#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK24

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "DBDGameplay_structs.hpp"
#include "TheK24_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TheK24.K24WhipAttack.Client_ContaminationResult
// 0x0010 (0x0010 - 0x0000)
struct K24WhipAttack_Client_ContaminationResult final
{
public:
	class ADBDPlayer*                             Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K24WhipAttack_Client_ContaminationResult) == 0x000008, "Wrong alignment on K24WhipAttack_Client_ContaminationResult");
static_assert(sizeof(K24WhipAttack_Client_ContaminationResult) == 0x000010, "Wrong size on K24WhipAttack_Client_ContaminationResult");
static_assert(offsetof(K24WhipAttack_Client_ContaminationResult, Target) == 0x000000, "Member 'K24WhipAttack_Client_ContaminationResult::Target' has a wrong offset!");
static_assert(offsetof(K24WhipAttack_Client_ContaminationResult, IsValid) == 0x000008, "Member 'K24WhipAttack_Client_ContaminationResult::IsValid' has a wrong offset!");

// Function TheK24.K24WhipAttack.Server_ContaminatePlayer
// 0x0010 (0x0010 - 0x0000)
struct K24WhipAttack_Server_ContaminatePlayer final
{
public:
	class ASurvivor*                              Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetLocationTimestamp;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K24WhipAttack_Server_ContaminatePlayer) == 0x000008, "Wrong alignment on K24WhipAttack_Server_ContaminatePlayer");
static_assert(sizeof(K24WhipAttack_Server_ContaminatePlayer) == 0x000010, "Wrong size on K24WhipAttack_Server_ContaminatePlayer");
static_assert(offsetof(K24WhipAttack_Server_ContaminatePlayer, Target) == 0x000000, "Member 'K24WhipAttack_Server_ContaminatePlayer::Target' has a wrong offset!");
static_assert(offsetof(K24WhipAttack_Server_ContaminatePlayer, TargetLocationTimestamp) == 0x000008, "Member 'K24WhipAttack_Server_ContaminatePlayer::TargetLocationTimestamp' has a wrong offset!");

// Function TheK24.ActivateK24PowerInteraction.SetK24Power
// 0x0008 (0x0008 - 0x0000)
struct ActivateK24PowerInteraction_SetK24Power final
{
public:
	class AK24Power*                              K24Power;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActivateK24PowerInteraction_SetK24Power) == 0x000008, "Wrong alignment on ActivateK24PowerInteraction_SetK24Power");
static_assert(sizeof(ActivateK24PowerInteraction_SetK24Power) == 0x000008, "Wrong size on ActivateK24PowerInteraction_SetK24Power");
static_assert(offsetof(ActivateK24PowerInteraction_SetK24Power, K24Power) == 0x000000, "Member 'ActivateK24PowerInteraction_SetK24Power::K24Power' has a wrong offset!");

// Function TheK24.ZombieAttractedByGeneratorBTService.OnInRangeChanged
// 0x0010 (0x0010 - 0x0000)
struct ZombieAttractedByGeneratorBTService_OnInRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGenerator*                             Generator;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieAttractedByGeneratorBTService_OnInRangeChanged) == 0x000008, "Wrong alignment on ZombieAttractedByGeneratorBTService_OnInRangeChanged");
static_assert(sizeof(ZombieAttractedByGeneratorBTService_OnInRangeChanged) == 0x000010, "Wrong size on ZombieAttractedByGeneratorBTService_OnInRangeChanged");
static_assert(offsetof(ZombieAttractedByGeneratorBTService_OnInRangeChanged, inRange) == 0x000000, "Member 'ZombieAttractedByGeneratorBTService_OnInRangeChanged::inRange' has a wrong offset!");
static_assert(offsetof(ZombieAttractedByGeneratorBTService_OnInRangeChanged, Generator) == 0x000008, "Member 'ZombieAttractedByGeneratorBTService_OnInRangeChanged::Generator' has a wrong offset!");

// Function TheK24.Eruption.Cosmetic_OnGeneratorHighlightEnd
// 0x0008 (0x0008 - 0x0000)
struct Eruption_Cosmetic_OnGeneratorHighlightEnd final
{
public:
	class AGenerator*                             highlightedGenerator;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Eruption_Cosmetic_OnGeneratorHighlightEnd) == 0x000008, "Wrong alignment on Eruption_Cosmetic_OnGeneratorHighlightEnd");
static_assert(sizeof(Eruption_Cosmetic_OnGeneratorHighlightEnd) == 0x000008, "Wrong size on Eruption_Cosmetic_OnGeneratorHighlightEnd");
static_assert(offsetof(Eruption_Cosmetic_OnGeneratorHighlightEnd, highlightedGenerator) == 0x000000, "Member 'Eruption_Cosmetic_OnGeneratorHighlightEnd::highlightedGenerator' has a wrong offset!");

// Function TheK24.Eruption.Cosmetic_OnGeneratorHighlightStart
// 0x0008 (0x0008 - 0x0000)
struct Eruption_Cosmetic_OnGeneratorHighlightStart final
{
public:
	class AGenerator*                             highlightedGenerator;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Eruption_Cosmetic_OnGeneratorHighlightStart) == 0x000008, "Wrong alignment on Eruption_Cosmetic_OnGeneratorHighlightStart");
static_assert(sizeof(Eruption_Cosmetic_OnGeneratorHighlightStart) == 0x000008, "Wrong size on Eruption_Cosmetic_OnGeneratorHighlightStart");
static_assert(offsetof(Eruption_Cosmetic_OnGeneratorHighlightStart, highlightedGenerator) == 0x000000, "Member 'Eruption_Cosmetic_OnGeneratorHighlightStart::highlightedGenerator' has a wrong offset!");

// Function TheK24.Eruption.Multicast_HighlightGenerator
// 0x0008 (0x0008 - 0x0000)
struct Eruption_Multicast_HighlightGenerator final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Eruption_Multicast_HighlightGenerator) == 0x000008, "Wrong alignment on Eruption_Multicast_HighlightGenerator");
static_assert(sizeof(Eruption_Multicast_HighlightGenerator) == 0x000008, "Wrong size on Eruption_Multicast_HighlightGenerator");
static_assert(offsetof(Eruption_Multicast_HighlightGenerator, Generator) == 0x000000, "Member 'Eruption_Multicast_HighlightGenerator::Generator' has a wrong offset!");

// Function TheK24.Eruption.Multicast_RemoveHighlights
// 0x0010 (0x0010 - 0x0000)
struct Eruption_Multicast_RemoveHighlights final
{
public:
	TArray<class AGenerator*>                     highlightedGenerators;                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Eruption_Multicast_RemoveHighlights) == 0x000008, "Wrong alignment on Eruption_Multicast_RemoveHighlights");
static_assert(sizeof(Eruption_Multicast_RemoveHighlights) == 0x000010, "Wrong size on Eruption_Multicast_RemoveHighlights");
static_assert(offsetof(Eruption_Multicast_RemoveHighlights, highlightedGenerators) == 0x000000, "Member 'Eruption_Multicast_RemoveHighlights::highlightedGenerators' has a wrong offset!");

// Function TheK24.Eruption.GetGeneratorRegressPercentageAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Eruption_GetGeneratorRegressPercentageAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Eruption_GetGeneratorRegressPercentageAtLevel) == 0x000004, "Wrong alignment on Eruption_GetGeneratorRegressPercentageAtLevel");
static_assert(sizeof(Eruption_GetGeneratorRegressPercentageAtLevel) == 0x000004, "Wrong size on Eruption_GetGeneratorRegressPercentageAtLevel");
static_assert(offsetof(Eruption_GetGeneratorRegressPercentageAtLevel, ReturnValue) == 0x000000, "Member 'Eruption_GetGeneratorRegressPercentageAtLevel::ReturnValue' has a wrong offset!");

// Function TheK24.Eruption.GetScreamRevealLocationDuration
// 0x0004 (0x0004 - 0x0000)
struct Eruption_GetScreamRevealLocationDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Eruption_GetScreamRevealLocationDuration) == 0x000004, "Wrong alignment on Eruption_GetScreamRevealLocationDuration");
static_assert(sizeof(Eruption_GetScreamRevealLocationDuration) == 0x000004, "Wrong size on Eruption_GetScreamRevealLocationDuration");
static_assert(offsetof(Eruption_GetScreamRevealLocationDuration, ReturnValue) == 0x000000, "Member 'Eruption_GetScreamRevealLocationDuration::ReturnValue' has a wrong offset!");

// Function TheK24.Eruption.GetSurvivorImposedStatusEffectDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Eruption_GetSurvivorImposedStatusEffectDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Eruption_GetSurvivorImposedStatusEffectDurationAtLevel) == 0x000004, "Wrong alignment on Eruption_GetSurvivorImposedStatusEffectDurationAtLevel");
static_assert(sizeof(Eruption_GetSurvivorImposedStatusEffectDurationAtLevel) == 0x000004, "Wrong size on Eruption_GetSurvivorImposedStatusEffectDurationAtLevel");
static_assert(offsetof(Eruption_GetSurvivorImposedStatusEffectDurationAtLevel, ReturnValue) == 0x000000, "Member 'Eruption_GetSurvivorImposedStatusEffectDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheK24.Hysteria.GetObliviousEffectDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Hysteria_GetObliviousEffectDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hysteria_GetObliviousEffectDurationAtLevel) == 0x000004, "Wrong alignment on Hysteria_GetObliviousEffectDurationAtLevel");
static_assert(sizeof(Hysteria_GetObliviousEffectDurationAtLevel) == 0x000004, "Wrong size on Hysteria_GetObliviousEffectDurationAtLevel");
static_assert(offsetof(Hysteria_GetObliviousEffectDurationAtLevel, ReturnValue) == 0x000000, "Member 'Hysteria_GetObliviousEffectDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheK24.Hysteria.GetPerkCooldownDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Hysteria_GetPerkCooldownDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hysteria_GetPerkCooldownDurationAtLevel) == 0x000004, "Wrong alignment on Hysteria_GetPerkCooldownDurationAtLevel");
static_assert(sizeof(Hysteria_GetPerkCooldownDurationAtLevel) == 0x000004, "Wrong size on Hysteria_GetPerkCooldownDurationAtLevel");
static_assert(offsetof(Hysteria_GetPerkCooldownDurationAtLevel, ReturnValue) == 0x000000, "Member 'Hysteria_GetPerkCooldownDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheK24.ZombieFallDetectorComponent.Authority_OnMovementModeChange
// 0x0010 (0x0010 - 0x0000)
struct ZombieFallDetectorComponent_Authority_OnMovementModeChange final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PrevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZombieFallDetectorComponent_Authority_OnMovementModeChange) == 0x000008, "Wrong alignment on ZombieFallDetectorComponent_Authority_OnMovementModeChange");
static_assert(sizeof(ZombieFallDetectorComponent_Authority_OnMovementModeChange) == 0x000010, "Wrong size on ZombieFallDetectorComponent_Authority_OnMovementModeChange");
static_assert(offsetof(ZombieFallDetectorComponent_Authority_OnMovementModeChange, Character) == 0x000000, "Member 'ZombieFallDetectorComponent_Authority_OnMovementModeChange::Character' has a wrong offset!");
static_assert(offsetof(ZombieFallDetectorComponent_Authority_OnMovementModeChange, PrevMovementMode) == 0x000008, "Member 'ZombieFallDetectorComponent_Authority_OnMovementModeChange::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(ZombieFallDetectorComponent_Authority_OnMovementModeChange, PreviousCustomMode) == 0x000009, "Member 'ZombieFallDetectorComponent_Authority_OnMovementModeChange::PreviousCustomMode' has a wrong offset!");

// Function TheK24.ZombieResurrector.Authority_OnKillerPowerLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct ZombieResurrector_Authority_OnKillerPowerLevelChanged final
{
public:
	int32                                         powerlevel;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieResurrector_Authority_OnKillerPowerLevelChanged) == 0x000004, "Wrong alignment on ZombieResurrector_Authority_OnKillerPowerLevelChanged");
static_assert(sizeof(ZombieResurrector_Authority_OnKillerPowerLevelChanged) == 0x000004, "Wrong size on ZombieResurrector_Authority_OnKillerPowerLevelChanged");
static_assert(offsetof(ZombieResurrector_Authority_OnKillerPowerLevelChanged, powerlevel) == 0x000000, "Member 'ZombieResurrector_Authority_OnKillerPowerLevelChanged::powerlevel' has a wrong offset!");

// Function TheK24.K24AnimInstance.OnKillerPowerLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct K24AnimInstance_OnKillerPowerLevelChanged final
{
public:
	int32                                         powerlevel;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24AnimInstance_OnKillerPowerLevelChanged) == 0x000004, "Wrong alignment on K24AnimInstance_OnKillerPowerLevelChanged");
static_assert(sizeof(K24AnimInstance_OnKillerPowerLevelChanged) == 0x000004, "Wrong size on K24AnimInstance_OnKillerPowerLevelChanged");
static_assert(offsetof(K24AnimInstance_OnKillerPowerLevelChanged, powerlevel) == 0x000000, "Member 'K24AnimInstance_OnKillerPowerLevelChanged::powerlevel' has a wrong offset!");

// Function TheK24.K24CharacterFXComponent.Local_OnKillerPowerLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct K24CharacterFXComponent_Local_OnKillerPowerLevelChanged final
{
public:
	int32                                         powerlevel;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24CharacterFXComponent_Local_OnKillerPowerLevelChanged) == 0x000004, "Wrong alignment on K24CharacterFXComponent_Local_OnKillerPowerLevelChanged");
static_assert(sizeof(K24CharacterFXComponent_Local_OnKillerPowerLevelChanged) == 0x000004, "Wrong size on K24CharacterFXComponent_Local_OnKillerPowerLevelChanged");
static_assert(offsetof(K24CharacterFXComponent_Local_OnKillerPowerLevelChanged, powerlevel) == 0x000000, "Member 'K24CharacterFXComponent_Local_OnKillerPowerLevelChanged::powerlevel' has a wrong offset!");

// Function TheK24.K24CheatComponent.DBD_K24SetContaminationOnSurvivor
// 0x0001 (0x0001 - 0x0000)
struct K24CheatComponent_DBD_K24SetContaminationOnSurvivor final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24CheatComponent_DBD_K24SetContaminationOnSurvivor) == 0x000001, "Wrong alignment on K24CheatComponent_DBD_K24SetContaminationOnSurvivor");
static_assert(sizeof(K24CheatComponent_DBD_K24SetContaminationOnSurvivor) == 0x000001, "Wrong size on K24CheatComponent_DBD_K24SetContaminationOnSurvivor");
static_assert(offsetof(K24CheatComponent_DBD_K24SetContaminationOnSurvivor, Value) == 0x000000, "Member 'K24CheatComponent_DBD_K24SetContaminationOnSurvivor::Value' has a wrong offset!");

// Function TheK24.K24CheatComponent.DBD_K24SetPowerLevelPoints
// 0x0004 (0x0004 - 0x0000)
struct K24CheatComponent_DBD_K24SetPowerLevelPoints final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24CheatComponent_DBD_K24SetPowerLevelPoints) == 0x000004, "Wrong alignment on K24CheatComponent_DBD_K24SetPowerLevelPoints");
static_assert(sizeof(K24CheatComponent_DBD_K24SetPowerLevelPoints) == 0x000004, "Wrong size on K24CheatComponent_DBD_K24SetPowerLevelPoints");
static_assert(offsetof(K24CheatComponent_DBD_K24SetPowerLevelPoints, Value) == 0x000000, "Member 'K24CheatComponent_DBD_K24SetPowerLevelPoints::Value' has a wrong offset!");

// Function TheK24.K24CheatComponent.DBD_K24ZombieFall
// 0x0004 (0x0004 - 0x0000)
struct K24CheatComponent_DBD_K24ZombieFall final
{
public:
	float                                         Zvalue;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24CheatComponent_DBD_K24ZombieFall) == 0x000004, "Wrong alignment on K24CheatComponent_DBD_K24ZombieFall");
static_assert(sizeof(K24CheatComponent_DBD_K24ZombieFall) == 0x000004, "Wrong size on K24CheatComponent_DBD_K24ZombieFall");
static_assert(offsetof(K24CheatComponent_DBD_K24ZombieFall, Zvalue) == 0x000000, "Member 'K24CheatComponent_DBD_K24ZombieFall::Zvalue' has a wrong offset!");

// Function TheK24.K24CheatComponent.DBD_TeleportZombiesTo
// 0x000C (0x000C - 0x0000)
struct K24CheatComponent_DBD_TeleportZombiesTo final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24CheatComponent_DBD_TeleportZombiesTo) == 0x000004, "Wrong alignment on K24CheatComponent_DBD_TeleportZombiesTo");
static_assert(sizeof(K24CheatComponent_DBD_TeleportZombiesTo) == 0x00000C, "Wrong size on K24CheatComponent_DBD_TeleportZombiesTo");
static_assert(offsetof(K24CheatComponent_DBD_TeleportZombiesTo, X) == 0x000000, "Member 'K24CheatComponent_DBD_TeleportZombiesTo::X' has a wrong offset!");
static_assert(offsetof(K24CheatComponent_DBD_TeleportZombiesTo, Y) == 0x000004, "Member 'K24CheatComponent_DBD_TeleportZombiesTo::Y' has a wrong offset!");
static_assert(offsetof(K24CheatComponent_DBD_TeleportZombiesTo, Z) == 0x000008, "Member 'K24CheatComponent_DBD_TeleportZombiesTo::Z' has a wrong offset!");

// Function TheK24.K24CheatComponent.OnPawnControllerSet
// 0x0018 (0x0018 - 0x0000)
struct K24CheatComponent_OnPawnControllerSet final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            OldController;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            NewController;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24CheatComponent_OnPawnControllerSet) == 0x000008, "Wrong alignment on K24CheatComponent_OnPawnControllerSet");
static_assert(sizeof(K24CheatComponent_OnPawnControllerSet) == 0x000018, "Wrong size on K24CheatComponent_OnPawnControllerSet");
static_assert(offsetof(K24CheatComponent_OnPawnControllerSet, Pawn) == 0x000000, "Member 'K24CheatComponent_OnPawnControllerSet::Pawn' has a wrong offset!");
static_assert(offsetof(K24CheatComponent_OnPawnControllerSet, OldController) == 0x000008, "Member 'K24CheatComponent_OnPawnControllerSet::OldController' has a wrong offset!");
static_assert(offsetof(K24CheatComponent_OnPawnControllerSet, NewController) == 0x000010, "Member 'K24CheatComponent_OnPawnControllerSet::NewController' has a wrong offset!");

// Function TheK24.K24Power.Authority_OnSurvivorContaminated
// 0x0001 (0x0001 - 0x0000)
struct K24Power_Authority_OnSurvivorContaminated final
{
public:
	EContaminator                                 contaminator;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24Power_Authority_OnSurvivorContaminated) == 0x000001, "Wrong alignment on K24Power_Authority_OnSurvivorContaminated");
static_assert(sizeof(K24Power_Authority_OnSurvivorContaminated) == 0x000001, "Wrong size on K24Power_Authority_OnSurvivorContaminated");
static_assert(offsetof(K24Power_Authority_OnSurvivorContaminated, contaminator) == 0x000000, "Member 'K24Power_Authority_OnSurvivorContaminated::contaminator' has a wrong offset!");

// Function TheK24.K24Power.Multicast_PowerDestroyBreakable
// 0x0008 (0x0008 - 0x0000)
struct K24Power_Multicast_PowerDestroyBreakable final
{
public:
	class ABreakableBase*                         breakable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24Power_Multicast_PowerDestroyBreakable) == 0x000008, "Wrong alignment on K24Power_Multicast_PowerDestroyBreakable");
static_assert(sizeof(K24Power_Multicast_PowerDestroyBreakable) == 0x000008, "Wrong size on K24Power_Multicast_PowerDestroyBreakable");
static_assert(offsetof(K24Power_Multicast_PowerDestroyBreakable, breakable) == 0x000000, "Member 'K24Power_Multicast_PowerDestroyBreakable::breakable' has a wrong offset!");

// Function TheK24.K24Power.Multicast_PowerDestroyPallet
// 0x0008 (0x0008 - 0x0000)
struct K24Power_Multicast_PowerDestroyPallet final
{
public:
	class APallet*                                Pallet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24Power_Multicast_PowerDestroyPallet) == 0x000008, "Wrong alignment on K24Power_Multicast_PowerDestroyPallet");
static_assert(sizeof(K24Power_Multicast_PowerDestroyPallet) == 0x000008, "Wrong size on K24Power_Multicast_PowerDestroyPallet");
static_assert(offsetof(K24Power_Multicast_PowerDestroyPallet, Pallet) == 0x000000, "Member 'K24Power_Multicast_PowerDestroyPallet::Pallet' has a wrong offset!");

// Function TheK24.K24Power.OnPowerLevelChanged_Cosmetic
// 0x0004 (0x0004 - 0x0000)
struct K24Power_OnPowerLevelChanged_Cosmetic final
{
public:
	int32                                         powerlevel;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24Power_OnPowerLevelChanged_Cosmetic) == 0x000004, "Wrong alignment on K24Power_OnPowerLevelChanged_Cosmetic");
static_assert(sizeof(K24Power_OnPowerLevelChanged_Cosmetic) == 0x000004, "Wrong size on K24Power_OnPowerLevelChanged_Cosmetic");
static_assert(offsetof(K24Power_OnPowerLevelChanged_Cosmetic, powerlevel) == 0x000000, "Member 'K24Power_OnPowerLevelChanged_Cosmetic::powerlevel' has a wrong offset!");

// Function TheK24.K24Power.PowerHitStateEnd_Cosmetic
// 0x0030 (0x0030 - 0x0000)
struct K24Power_PowerHitStateEnd_Cosmetic final
{
public:
	struct FVector                                whipStartLocation;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                whipEndLocation;                                   // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24Power_PowerHitStateEnd_Cosmetic) == 0x000008, "Wrong alignment on K24Power_PowerHitStateEnd_Cosmetic");
static_assert(sizeof(K24Power_PowerHitStateEnd_Cosmetic) == 0x000030, "Wrong size on K24Power_PowerHitStateEnd_Cosmetic");
static_assert(offsetof(K24Power_PowerHitStateEnd_Cosmetic, whipStartLocation) == 0x000000, "Member 'K24Power_PowerHitStateEnd_Cosmetic::whipStartLocation' has a wrong offset!");
static_assert(offsetof(K24Power_PowerHitStateEnd_Cosmetic, whipEndLocation) == 0x000018, "Member 'K24Power_PowerHitStateEnd_Cosmetic::whipEndLocation' has a wrong offset!");

// Function TheK24.K24Power.Server_KillAZombie
// 0x0010 (0x0010 - 0x0000)
struct K24Power_Server_KillAZombie final
{
public:
	class AZombieCharacter*                       zombie;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   attackType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K24Power_Server_KillAZombie) == 0x000008, "Wrong alignment on K24Power_Server_KillAZombie");
static_assert(sizeof(K24Power_Server_KillAZombie) == 0x000010, "Wrong size on K24Power_Server_KillAZombie");
static_assert(offsetof(K24Power_Server_KillAZombie, zombie) == 0x000000, "Member 'K24Power_Server_KillAZombie::zombie' has a wrong offset!");
static_assert(offsetof(K24Power_Server_KillAZombie, attackType) == 0x000008, "Member 'K24Power_Server_KillAZombie::attackType' has a wrong offset!");

// Function TheK24.K24Power.Server_PowerDestroyBreakable
// 0x0008 (0x0008 - 0x0000)
struct K24Power_Server_PowerDestroyBreakable final
{
public:
	class ABreakableBase*                         breakable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24Power_Server_PowerDestroyBreakable) == 0x000008, "Wrong alignment on K24Power_Server_PowerDestroyBreakable");
static_assert(sizeof(K24Power_Server_PowerDestroyBreakable) == 0x000008, "Wrong size on K24Power_Server_PowerDestroyBreakable");
static_assert(offsetof(K24Power_Server_PowerDestroyBreakable, breakable) == 0x000000, "Member 'K24Power_Server_PowerDestroyBreakable::breakable' has a wrong offset!");

// Function TheK24.K24Power.Server_PowerDestroyPallet
// 0x0008 (0x0008 - 0x0000)
struct K24Power_Server_PowerDestroyPallet final
{
public:
	class APallet*                                Pallet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24Power_Server_PowerDestroyPallet) == 0x000008, "Wrong alignment on K24Power_Server_PowerDestroyPallet");
static_assert(sizeof(K24Power_Server_PowerDestroyPallet) == 0x000008, "Wrong size on K24Power_Server_PowerDestroyPallet");
static_assert(offsetof(K24Power_Server_PowerDestroyPallet, Pallet) == 0x000000, "Member 'K24Power_Server_PowerDestroyPallet::Pallet' has a wrong offset!");

// Function TheK24.K24Power.WhipAttackHit_Cosmetic
// 0x0078 (0x0078 - 0x0000)
struct K24Power_WhipAttackHit_Cosmetic final
{
public:
	struct FVector                                whipStartLocation;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                impactPointLocation;                               // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                whipEndLocation;                                   // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFirstHit;                                        // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ImpactNormal;                                      // 0x0050(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   phyMaterial;                                       // 0x0068(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hitACharacter;                                     // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K24Power_WhipAttackHit_Cosmetic) == 0x000008, "Wrong alignment on K24Power_WhipAttackHit_Cosmetic");
static_assert(sizeof(K24Power_WhipAttackHit_Cosmetic) == 0x000078, "Wrong size on K24Power_WhipAttackHit_Cosmetic");
static_assert(offsetof(K24Power_WhipAttackHit_Cosmetic, whipStartLocation) == 0x000000, "Member 'K24Power_WhipAttackHit_Cosmetic::whipStartLocation' has a wrong offset!");
static_assert(offsetof(K24Power_WhipAttackHit_Cosmetic, impactPointLocation) == 0x000018, "Member 'K24Power_WhipAttackHit_Cosmetic::impactPointLocation' has a wrong offset!");
static_assert(offsetof(K24Power_WhipAttackHit_Cosmetic, whipEndLocation) == 0x000030, "Member 'K24Power_WhipAttackHit_Cosmetic::whipEndLocation' has a wrong offset!");
static_assert(offsetof(K24Power_WhipAttackHit_Cosmetic, isFirstHit) == 0x000048, "Member 'K24Power_WhipAttackHit_Cosmetic::isFirstHit' has a wrong offset!");
static_assert(offsetof(K24Power_WhipAttackHit_Cosmetic, ImpactNormal) == 0x000050, "Member 'K24Power_WhipAttackHit_Cosmetic::ImpactNormal' has a wrong offset!");
static_assert(offsetof(K24Power_WhipAttackHit_Cosmetic, phyMaterial) == 0x000068, "Member 'K24Power_WhipAttackHit_Cosmetic::phyMaterial' has a wrong offset!");
static_assert(offsetof(K24Power_WhipAttackHit_Cosmetic, hitACharacter) == 0x000074, "Member 'K24Power_WhipAttackHit_Cosmetic::hitACharacter' has a wrong offset!");

// Function TheK24.K24Power.WhipAttackMove_Cosmetic
// 0x0038 (0x0038 - 0x0000)
struct K24Power_WhipAttackMove_Cosmetic final
{
public:
	struct FVector                                whipStartLocation;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                whipEndLocation;                                   // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFirstRayCast;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K24Power_WhipAttackMove_Cosmetic) == 0x000008, "Wrong alignment on K24Power_WhipAttackMove_Cosmetic");
static_assert(sizeof(K24Power_WhipAttackMove_Cosmetic) == 0x000038, "Wrong size on K24Power_WhipAttackMove_Cosmetic");
static_assert(offsetof(K24Power_WhipAttackMove_Cosmetic, whipStartLocation) == 0x000000, "Member 'K24Power_WhipAttackMove_Cosmetic::whipStartLocation' has a wrong offset!");
static_assert(offsetof(K24Power_WhipAttackMove_Cosmetic, whipEndLocation) == 0x000018, "Member 'K24Power_WhipAttackMove_Cosmetic::whipEndLocation' has a wrong offset!");
static_assert(offsetof(K24Power_WhipAttackMove_Cosmetic, isFirstRayCast) == 0x000030, "Member 'K24Power_WhipAttackMove_Cosmetic::isFirstRayCast' has a wrong offset!");

// Function TheK24.K24Power.GetPowerLevel
// 0x0004 (0x0004 - 0x0000)
struct K24Power_GetPowerLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24Power_GetPowerLevel) == 0x000004, "Wrong alignment on K24Power_GetPowerLevel");
static_assert(sizeof(K24Power_GetPowerLevel) == 0x000004, "Wrong size on K24Power_GetPowerLevel");
static_assert(offsetof(K24Power_GetPowerLevel, ReturnValue) == 0x000000, "Member 'K24Power_GetPowerLevel::ReturnValue' has a wrong offset!");

// Function TheK24.K24Power.GetWhipLength
// 0x0004 (0x0004 - 0x0000)
struct K24Power_GetWhipLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24Power_GetWhipLength) == 0x000004, "Wrong alignment on K24Power_GetWhipLength");
static_assert(sizeof(K24Power_GetWhipLength) == 0x000004, "Wrong size on K24Power_GetWhipLength");
static_assert(offsetof(K24Power_GetWhipLength, ReturnValue) == 0x000000, "Member 'K24Power_GetWhipLength::ReturnValue' has a wrong offset!");

// Function TheK24.K24Power.IsInPower
// 0x0001 (0x0001 - 0x0000)
struct K24Power_IsInPower final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24Power_IsInPower) == 0x000001, "Wrong alignment on K24Power_IsInPower");
static_assert(sizeof(K24Power_IsInPower) == 0x000001, "Wrong size on K24Power_IsInPower");
static_assert(offsetof(K24Power_IsInPower, ReturnValue) == 0x000000, "Member 'K24Power_IsInPower::ReturnValue' has a wrong offset!");

// Function TheK24.K24PowerAnimInstance.OnKillerPowerLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct K24PowerAnimInstance_OnKillerPowerLevelChanged final
{
public:
	int32                                         powerlevel;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24PowerAnimInstance_OnKillerPowerLevelChanged) == 0x000004, "Wrong alignment on K24PowerAnimInstance_OnKillerPowerLevelChanged");
static_assert(sizeof(K24PowerAnimInstance_OnKillerPowerLevelChanged) == 0x000004, "Wrong size on K24PowerAnimInstance_OnKillerPowerLevelChanged");
static_assert(offsetof(K24PowerAnimInstance_OnKillerPowerLevelChanged, powerlevel) == 0x000000, "Member 'K24PowerAnimInstance_OnKillerPowerLevelChanged::powerlevel' has a wrong offset!");

// Function TheK24.k24PowerCooldownInteraction.SetK24Power
// 0x0008 (0x0008 - 0x0000)
struct k24PowerCooldownInteraction_SetK24Power final
{
public:
	class AK24Power*                              K24Power;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(k24PowerCooldownInteraction_SetK24Power) == 0x000008, "Wrong alignment on k24PowerCooldownInteraction_SetK24Power");
static_assert(sizeof(k24PowerCooldownInteraction_SetK24Power) == 0x000008, "Wrong size on k24PowerCooldownInteraction_SetK24Power");
static_assert(offsetof(k24PowerCooldownInteraction_SetK24Power, K24Power) == 0x000000, "Member 'k24PowerCooldownInteraction_SetK24Power::K24Power' has a wrong offset!");

// Function TheK24.K24PowerPresentationItemProgressComponent.SetK24Power
// 0x0008 (0x0008 - 0x0000)
struct K24PowerPresentationItemProgressComponent_SetK24Power final
{
public:
	class AK24Power*                              K24Power;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24PowerPresentationItemProgressComponent_SetK24Power) == 0x000008, "Wrong alignment on K24PowerPresentationItemProgressComponent_SetK24Power");
static_assert(sizeof(K24PowerPresentationItemProgressComponent_SetK24Power) == 0x000008, "Wrong size on K24PowerPresentationItemProgressComponent_SetK24Power");
static_assert(offsetof(K24PowerPresentationItemProgressComponent_SetK24Power, K24Power) == 0x000000, "Member 'K24PowerPresentationItemProgressComponent_SetK24Power::K24Power' has a wrong offset!");

// Function TheK24.K24SurvivorCosmeticHelperActor.Cosmetic_OnHit_SFX
// 0x0001 (0x0001 - 0x0000)
struct K24SurvivorCosmeticHelperActor_Cosmetic_OnHit_SFX final
{
public:
	EContaminator                                 contaminator;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K24SurvivorCosmeticHelperActor_Cosmetic_OnHit_SFX) == 0x000001, "Wrong alignment on K24SurvivorCosmeticHelperActor_Cosmetic_OnHit_SFX");
static_assert(sizeof(K24SurvivorCosmeticHelperActor_Cosmetic_OnHit_SFX) == 0x000001, "Wrong size on K24SurvivorCosmeticHelperActor_Cosmetic_OnHit_SFX");
static_assert(offsetof(K24SurvivorCosmeticHelperActor_Cosmetic_OnHit_SFX, contaminator) == 0x000000, "Member 'K24SurvivorCosmeticHelperActor_Cosmetic_OnHit_SFX::contaminator' has a wrong offset!");

// Function TheK24.LethalPursuer.GetSurvivorRevealDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct LethalPursuer_GetSurvivorRevealDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LethalPursuer_GetSurvivorRevealDurationAtLevel) == 0x000004, "Wrong alignment on LethalPursuer_GetSurvivorRevealDurationAtLevel");
static_assert(sizeof(LethalPursuer_GetSurvivorRevealDurationAtLevel) == 0x000004, "Wrong size on LethalPursuer_GetSurvivorRevealDurationAtLevel");
static_assert(offsetof(LethalPursuer_GetSurvivorRevealDurationAtLevel, ReturnValue) == 0x000000, "Member 'LethalPursuer_GetSurvivorRevealDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheK24.SurvivorContaminationComponent.Multicast_OnContaminated
// 0x0001 (0x0001 - 0x0000)
struct SurvivorContaminationComponent_Multicast_OnContaminated final
{
public:
	EContaminator                                 contaminator;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorContaminationComponent_Multicast_OnContaminated) == 0x000001, "Wrong alignment on SurvivorContaminationComponent_Multicast_OnContaminated");
static_assert(sizeof(SurvivorContaminationComponent_Multicast_OnContaminated) == 0x000001, "Wrong size on SurvivorContaminationComponent_Multicast_OnContaminated");
static_assert(offsetof(SurvivorContaminationComponent_Multicast_OnContaminated, contaminator) == 0x000000, "Member 'SurvivorContaminationComponent_Multicast_OnContaminated::contaminator' has a wrong offset!");

// Function TheK24.SurvivorContaminationComponent.IsContaminated
// 0x0001 (0x0001 - 0x0000)
struct SurvivorContaminationComponent_IsContaminated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorContaminationComponent_IsContaminated) == 0x000001, "Wrong alignment on SurvivorContaminationComponent_IsContaminated");
static_assert(sizeof(SurvivorContaminationComponent_IsContaminated) == 0x000001, "Wrong size on SurvivorContaminationComponent_IsContaminated");
static_assert(offsetof(SurvivorContaminationComponent_IsContaminated, ReturnValue) == 0x000000, "Member 'SurvivorContaminationComponent_IsContaminated::ReturnValue' has a wrong offset!");

// Function TheK24.ZombieAIController.Authority_OnTargetPerceptionUpdated
// 0x0068 (0x0068 - 0x0000)
struct ZombieAIController_Authority_OnTargetPerceptionUpdated final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x0060)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieAIController_Authority_OnTargetPerceptionUpdated) == 0x000008, "Wrong alignment on ZombieAIController_Authority_OnTargetPerceptionUpdated");
static_assert(sizeof(ZombieAIController_Authority_OnTargetPerceptionUpdated) == 0x000068, "Wrong size on ZombieAIController_Authority_OnTargetPerceptionUpdated");
static_assert(offsetof(ZombieAIController_Authority_OnTargetPerceptionUpdated, Actor) == 0x000000, "Member 'ZombieAIController_Authority_OnTargetPerceptionUpdated::Actor' has a wrong offset!");
static_assert(offsetof(ZombieAIController_Authority_OnTargetPerceptionUpdated, Stimulus) == 0x000008, "Member 'ZombieAIController_Authority_OnTargetPerceptionUpdated::Stimulus' has a wrong offset!");

// Function TheK24.ZombieCharacter.Authority_OnFlashlightAdded
// 0x0008 (0x0008 - 0x0000)
struct ZombieCharacter_Authority_OnFlashlightAdded final
{
public:
	const class UFlashlightComponent*             Flashlight;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_Authority_OnFlashlightAdded) == 0x000008, "Wrong alignment on ZombieCharacter_Authority_OnFlashlightAdded");
static_assert(sizeof(ZombieCharacter_Authority_OnFlashlightAdded) == 0x000008, "Wrong size on ZombieCharacter_Authority_OnFlashlightAdded");
static_assert(offsetof(ZombieCharacter_Authority_OnFlashlightAdded, Flashlight) == 0x000000, "Member 'ZombieCharacter_Authority_OnFlashlightAdded::Flashlight' has a wrong offset!");

// Function TheK24.ZombieCharacter.Authority_OnFlashlightRemoved
// 0x0008 (0x0008 - 0x0000)
struct ZombieCharacter_Authority_OnFlashlightRemoved final
{
public:
	const class UFlashlightComponent*             Flashlight;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_Authority_OnFlashlightRemoved) == 0x000008, "Wrong alignment on ZombieCharacter_Authority_OnFlashlightRemoved");
static_assert(sizeof(ZombieCharacter_Authority_OnFlashlightRemoved) == 0x000008, "Wrong size on ZombieCharacter_Authority_OnFlashlightRemoved");
static_assert(offsetof(ZombieCharacter_Authority_OnFlashlightRemoved, Flashlight) == 0x000000, "Member 'ZombieCharacter_Authority_OnFlashlightRemoved::Flashlight' has a wrong offset!");

// Function TheK24.ZombieCharacter.Authority_OnRangedExplosiveInRangeBegin
// 0x0010 (0x0010 - 0x0000)
struct ZombieCharacter_Authority_OnRangedExplosiveInRangeBegin final
{
public:
	struct FRangedExplosiveEffectData             effectData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_Authority_OnRangedExplosiveInRangeBegin) == 0x000008, "Wrong alignment on ZombieCharacter_Authority_OnRangedExplosiveInRangeBegin");
static_assert(sizeof(ZombieCharacter_Authority_OnRangedExplosiveInRangeBegin) == 0x000010, "Wrong size on ZombieCharacter_Authority_OnRangedExplosiveInRangeBegin");
static_assert(offsetof(ZombieCharacter_Authority_OnRangedExplosiveInRangeBegin, effectData) == 0x000000, "Member 'ZombieCharacter_Authority_OnRangedExplosiveInRangeBegin::effectData' has a wrong offset!");

// Function TheK24.ZombieCharacter.Authority_OnZombieStateChanged
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_Authority_OnZombieStateChanged final
{
public:
	EZombieState                                  ZombieState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_Authority_OnZombieStateChanged) == 0x000001, "Wrong alignment on ZombieCharacter_Authority_OnZombieStateChanged");
static_assert(sizeof(ZombieCharacter_Authority_OnZombieStateChanged) == 0x000001, "Wrong size on ZombieCharacter_Authority_OnZombieStateChanged");
static_assert(offsetof(ZombieCharacter_Authority_OnZombieStateChanged, ZombieState) == 0x000000, "Member 'ZombieCharacter_Authority_OnZombieStateChanged::ZombieState' has a wrong offset!");

// Function TheK24.ZombieCharacter.Multicast_ZombieKilledByKillerCosmetic
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_Multicast_ZombieKilledByKillerCosmetic final
{
public:
	EAttackType                                   attackType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_Multicast_ZombieKilledByKillerCosmetic) == 0x000001, "Wrong alignment on ZombieCharacter_Multicast_ZombieKilledByKillerCosmetic");
static_assert(sizeof(ZombieCharacter_Multicast_ZombieKilledByKillerCosmetic) == 0x000001, "Wrong size on ZombieCharacter_Multicast_ZombieKilledByKillerCosmetic");
static_assert(offsetof(ZombieCharacter_Multicast_ZombieKilledByKillerCosmetic, attackType) == 0x000000, "Member 'ZombieCharacter_Multicast_ZombieKilledByKillerCosmetic::attackType' has a wrong offset!");

// Function TheK24.ZombieCharacter.OnBeginOverlapZombieAttackDetector
// 0x0110 (0x0110 - 0x0000)
struct ZombieCharacter_OnBeginOverlapZombieAttackDetector final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_OnBeginOverlapZombieAttackDetector) == 0x000008, "Wrong alignment on ZombieCharacter_OnBeginOverlapZombieAttackDetector");
static_assert(sizeof(ZombieCharacter_OnBeginOverlapZombieAttackDetector) == 0x000110, "Wrong size on ZombieCharacter_OnBeginOverlapZombieAttackDetector");
static_assert(offsetof(ZombieCharacter_OnBeginOverlapZombieAttackDetector, HitComponent) == 0x000000, "Member 'ZombieCharacter_OnBeginOverlapZombieAttackDetector::HitComponent' has a wrong offset!");
static_assert(offsetof(ZombieCharacter_OnBeginOverlapZombieAttackDetector, OtherActor) == 0x000008, "Member 'ZombieCharacter_OnBeginOverlapZombieAttackDetector::OtherActor' has a wrong offset!");
static_assert(offsetof(ZombieCharacter_OnBeginOverlapZombieAttackDetector, OtherComp) == 0x000010, "Member 'ZombieCharacter_OnBeginOverlapZombieAttackDetector::OtherComp' has a wrong offset!");
static_assert(offsetof(ZombieCharacter_OnBeginOverlapZombieAttackDetector, OtherBodyIndex) == 0x000018, "Member 'ZombieCharacter_OnBeginOverlapZombieAttackDetector::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ZombieCharacter_OnBeginOverlapZombieAttackDetector, bFromSweep) == 0x00001C, "Member 'ZombieCharacter_OnBeginOverlapZombieAttackDetector::bFromSweep' has a wrong offset!");
static_assert(offsetof(ZombieCharacter_OnBeginOverlapZombieAttackDetector, SweepResult) == 0x000020, "Member 'ZombieCharacter_OnBeginOverlapZombieAttackDetector::SweepResult' has a wrong offset!");

// Function TheK24.ZombieCharacter.OnEndOverlapZombieAttackDetector
// 0x0020 (0x0020 - 0x0000)
struct ZombieCharacter_OnEndOverlapZombieAttackDetector final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZombieCharacter_OnEndOverlapZombieAttackDetector) == 0x000008, "Wrong alignment on ZombieCharacter_OnEndOverlapZombieAttackDetector");
static_assert(sizeof(ZombieCharacter_OnEndOverlapZombieAttackDetector) == 0x000020, "Wrong size on ZombieCharacter_OnEndOverlapZombieAttackDetector");
static_assert(offsetof(ZombieCharacter_OnEndOverlapZombieAttackDetector, HitComponent) == 0x000000, "Member 'ZombieCharacter_OnEndOverlapZombieAttackDetector::HitComponent' has a wrong offset!");
static_assert(offsetof(ZombieCharacter_OnEndOverlapZombieAttackDetector, OtherActor) == 0x000008, "Member 'ZombieCharacter_OnEndOverlapZombieAttackDetector::OtherActor' has a wrong offset!");
static_assert(offsetof(ZombieCharacter_OnEndOverlapZombieAttackDetector, OtherComp) == 0x000010, "Member 'ZombieCharacter_OnEndOverlapZombieAttackDetector::OtherComp' has a wrong offset!");
static_assert(offsetof(ZombieCharacter_OnEndOverlapZombieAttackDetector, OtherBodyIndex) == 0x000018, "Member 'ZombieCharacter_OnEndOverlapZombieAttackDetector::OtherBodyIndex' has a wrong offset!");

// Function TheK24.ZombieCharacter.OnRep_ZombieState
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_OnRep_ZombieState final
{
public:
	EZombieState                                  previousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_OnRep_ZombieState) == 0x000001, "Wrong alignment on ZombieCharacter_OnRep_ZombieState");
static_assert(sizeof(ZombieCharacter_OnRep_ZombieState) == 0x000001, "Wrong size on ZombieCharacter_OnRep_ZombieState");
static_assert(offsetof(ZombieCharacter_OnRep_ZombieState, previousState) == 0x000000, "Member 'ZombieCharacter_OnRep_ZombieState::previousState' has a wrong offset!");

// Function TheK24.ZombieCharacter.OnZombieStateChanged_Cosmetic
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_OnZombieStateChanged_Cosmetic final
{
public:
	EZombieState                                  ZombieState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_OnZombieStateChanged_Cosmetic) == 0x000001, "Wrong alignment on ZombieCharacter_OnZombieStateChanged_Cosmetic");
static_assert(sizeof(ZombieCharacter_OnZombieStateChanged_Cosmetic) == 0x000001, "Wrong size on ZombieCharacter_OnZombieStateChanged_Cosmetic");
static_assert(offsetof(ZombieCharacter_OnZombieStateChanged_Cosmetic, ZombieState) == 0x000000, "Member 'ZombieCharacter_OnZombieStateChanged_Cosmetic::ZombieState' has a wrong offset!");

// Function TheK24.ZombieCharacter.SetCharacterActive_Cosmetic
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_SetCharacterActive_Cosmetic final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_SetCharacterActive_Cosmetic) == 0x000001, "Wrong alignment on ZombieCharacter_SetCharacterActive_Cosmetic");
static_assert(sizeof(ZombieCharacter_SetCharacterActive_Cosmetic) == 0x000001, "Wrong size on ZombieCharacter_SetCharacterActive_Cosmetic");
static_assert(offsetof(ZombieCharacter_SetCharacterActive_Cosmetic, Value) == 0x000000, "Member 'ZombieCharacter_SetCharacterActive_Cosmetic::Value' has a wrong offset!");

// Function TheK24.ZombieCharacter.ZombieKilledByKiller_Cosmetic
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_ZombieKilledByKiller_Cosmetic final
{
public:
	EAttackType                                   attackType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_ZombieKilledByKiller_Cosmetic) == 0x000001, "Wrong alignment on ZombieCharacter_ZombieKilledByKiller_Cosmetic");
static_assert(sizeof(ZombieCharacter_ZombieKilledByKiller_Cosmetic) == 0x000001, "Wrong size on ZombieCharacter_ZombieKilledByKiller_Cosmetic");
static_assert(offsetof(ZombieCharacter_ZombieKilledByKiller_Cosmetic, attackType) == 0x000000, "Member 'ZombieCharacter_ZombieKilledByKiller_Cosmetic::attackType' has a wrong offset!");

// Function TheK24.ZombieCharacter.GetAudioSwitchState
// 0x0010 (0x0010 - 0x0000)
struct ZombieCharacter_GetAudioSwitchState final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_GetAudioSwitchState) == 0x000008, "Wrong alignment on ZombieCharacter_GetAudioSwitchState");
static_assert(sizeof(ZombieCharacter_GetAudioSwitchState) == 0x000010, "Wrong size on ZombieCharacter_GetAudioSwitchState");
static_assert(offsetof(ZombieCharacter_GetAudioSwitchState, ReturnValue) == 0x000000, "Member 'ZombieCharacter_GetAudioSwitchState::ReturnValue' has a wrong offset!");

// Function TheK24.ZombieCharacter.GetAuthoritativeMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct ZombieCharacter_GetAuthoritativeMovementComponent final
{
public:
	class UAuthoritativeMovementComponent*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_GetAuthoritativeMovementComponent) == 0x000008, "Wrong alignment on ZombieCharacter_GetAuthoritativeMovementComponent");
static_assert(sizeof(ZombieCharacter_GetAuthoritativeMovementComponent) == 0x000008, "Wrong size on ZombieCharacter_GetAuthoritativeMovementComponent");
static_assert(offsetof(ZombieCharacter_GetAuthoritativeMovementComponent, ReturnValue) == 0x000000, "Member 'ZombieCharacter_GetAuthoritativeMovementComponent::ReturnValue' has a wrong offset!");

// Function TheK24.ZombieCharacter.GetOtherCharactersVerticalCollisionsHandler
// 0x0008 (0x0008 - 0x0000)
struct ZombieCharacter_GetOtherCharactersVerticalCollisionsHandler final
{
public:
	class UOtherCharactersVerticalCollisionsHandler* ReturnValue;                                    // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_GetOtherCharactersVerticalCollisionsHandler) == 0x000008, "Wrong alignment on ZombieCharacter_GetOtherCharactersVerticalCollisionsHandler");
static_assert(sizeof(ZombieCharacter_GetOtherCharactersVerticalCollisionsHandler) == 0x000008, "Wrong size on ZombieCharacter_GetOtherCharactersVerticalCollisionsHandler");
static_assert(offsetof(ZombieCharacter_GetOtherCharactersVerticalCollisionsHandler, ReturnValue) == 0x000000, "Member 'ZombieCharacter_GetOtherCharactersVerticalCollisionsHandler::ReturnValue' has a wrong offset!");

// Function TheK24.ZombieCharacter.GetZombieGender
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_GetZombieGender final
{
public:
	EZombieGender                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_GetZombieGender) == 0x000001, "Wrong alignment on ZombieCharacter_GetZombieGender");
static_assert(sizeof(ZombieCharacter_GetZombieGender) == 0x000001, "Wrong size on ZombieCharacter_GetZombieGender");
static_assert(offsetof(ZombieCharacter_GetZombieGender, ReturnValue) == 0x000000, "Member 'ZombieCharacter_GetZombieGender::ReturnValue' has a wrong offset!");

// Function TheK24.ZombiesInterestEventManager.Authority_OnLoudNoiseTriggered
// 0x0038 (0x0038 - 0x0000)
struct ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered final
{
public:
	class AActor*                                 originator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 instigatingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          shouldTrack;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         audibleRange;                                      // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isQuickAction;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isDeceivingNoise;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered) == 0x000008, "Wrong alignment on ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered");
static_assert(sizeof(ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered) == 0x000038, "Wrong size on ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered");
static_assert(offsetof(ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered, originator) == 0x000000, "Member 'ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered::originator' has a wrong offset!");
static_assert(offsetof(ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered, instigatingActor) == 0x000008, "Member 'ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered::instigatingActor' has a wrong offset!");
static_assert(offsetof(ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered, Location) == 0x000010, "Member 'ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered::Location' has a wrong offset!");
static_assert(offsetof(ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered, shouldTrack) == 0x000028, "Member 'ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered::shouldTrack' has a wrong offset!");
static_assert(offsetof(ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered, audibleRange) == 0x00002C, "Member 'ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered::audibleRange' has a wrong offset!");
static_assert(offsetof(ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered, isQuickAction) == 0x000030, "Member 'ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered::isQuickAction' has a wrong offset!");
static_assert(offsetof(ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered, isDeceivingNoise) == 0x000031, "Member 'ZombiesInterestEventManager_Authority_OnLoudNoiseTriggered::isDeceivingNoise' has a wrong offset!");

}

