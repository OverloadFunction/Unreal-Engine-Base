#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_K37_VFX

#include "Basic.hpp"

#include "EK37Forms_structs.hpp"


namespace SDK::Params
{

// Function BPI_K37_VFX.BPI_K37_VFX_C.GetK37FormsMaterialHelpers
// 0x0018 (0x0018 - 0x0000)
struct BPI_K37_VFX_C_GetK37FormsMaterialHelpers final
{
public:
	class UMaterialHelper*                        Vampire;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialHelper*                        Wolf;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialHelper*                        Bat;                                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_K37_VFX_C_GetK37FormsMaterialHelpers) == 0x000008, "Wrong alignment on BPI_K37_VFX_C_GetK37FormsMaterialHelpers");
static_assert(sizeof(BPI_K37_VFX_C_GetK37FormsMaterialHelpers) == 0x000018, "Wrong size on BPI_K37_VFX_C_GetK37FormsMaterialHelpers");
static_assert(offsetof(BPI_K37_VFX_C_GetK37FormsMaterialHelpers, Vampire) == 0x000000, "Member 'BPI_K37_VFX_C_GetK37FormsMaterialHelpers::Vampire' has a wrong offset!");
static_assert(offsetof(BPI_K37_VFX_C_GetK37FormsMaterialHelpers, Wolf) == 0x000008, "Member 'BPI_K37_VFX_C_GetK37FormsMaterialHelpers::Wolf' has a wrong offset!");
static_assert(offsetof(BPI_K37_VFX_C_GetK37FormsMaterialHelpers, Bat) == 0x000010, "Member 'BPI_K37_VFX_C_GetK37FormsMaterialHelpers::Bat' has a wrong offset!");

// Function BPI_K37_VFX.BPI_K37_VFX_C.GetK37FormTransitionTimelines
// 0x0018 (0x0018 - 0x0000)
struct BPI_K37_VFX_C_GetK37FormTransitionTimelines final
{
public:
	class UTimelineComponent*                     Vampire;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UTimelineComponent*                     Bat;                                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UTimelineComponent*                     Wolf;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_K37_VFX_C_GetK37FormTransitionTimelines) == 0x000008, "Wrong alignment on BPI_K37_VFX_C_GetK37FormTransitionTimelines");
static_assert(sizeof(BPI_K37_VFX_C_GetK37FormTransitionTimelines) == 0x000018, "Wrong size on BPI_K37_VFX_C_GetK37FormTransitionTimelines");
static_assert(offsetof(BPI_K37_VFX_C_GetK37FormTransitionTimelines, Vampire) == 0x000000, "Member 'BPI_K37_VFX_C_GetK37FormTransitionTimelines::Vampire' has a wrong offset!");
static_assert(offsetof(BPI_K37_VFX_C_GetK37FormTransitionTimelines, Bat) == 0x000008, "Member 'BPI_K37_VFX_C_GetK37FormTransitionTimelines::Bat' has a wrong offset!");
static_assert(offsetof(BPI_K37_VFX_C_GetK37FormTransitionTimelines, Wolf) == 0x000010, "Member 'BPI_K37_VFX_C_GetK37FormTransitionTimelines::Wolf' has a wrong offset!");

// Function BPI_K37_VFX.BPI_K37_VFX_C.GetVFXBatsNS
// 0x0008 (0x0008 - 0x0000)
struct BPI_K37_VFX_C_GetVFXBatsNS final
{
public:
	class UNiagaraComponent*                      BatsNiagaraSystem;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_K37_VFX_C_GetVFXBatsNS) == 0x000008, "Wrong alignment on BPI_K37_VFX_C_GetVFXBatsNS");
static_assert(sizeof(BPI_K37_VFX_C_GetVFXBatsNS) == 0x000008, "Wrong size on BPI_K37_VFX_C_GetVFXBatsNS");
static_assert(offsetof(BPI_K37_VFX_C_GetVFXBatsNS, BatsNiagaraSystem) == 0x000000, "Member 'BPI_K37_VFX_C_GetVFXBatsNS::BatsNiagaraSystem' has a wrong offset!");

// Function BPI_K37_VFX.BPI_K37_VFX_C.K37FormTransitionVFX
// 0x0018 (0x0018 - 0x0000)
struct BPI_K37_VFX_C_K37FormTransitionVFX final
{
public:
	EK37Forms                                     FormToTransitionInOrOutFrom;                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldTransformIntoForm;                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldMeshSwap;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlayRate;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideGlowingEyesInVampireForm;                      // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_K37_VFX_C_K37FormTransitionVFX) == 0x000008, "Wrong alignment on BPI_K37_VFX_C_K37FormTransitionVFX");
static_assert(sizeof(BPI_K37_VFX_C_K37FormTransitionVFX) == 0x000018, "Wrong size on BPI_K37_VFX_C_K37FormTransitionVFX");
static_assert(offsetof(BPI_K37_VFX_C_K37FormTransitionVFX, FormToTransitionInOrOutFrom) == 0x000000, "Member 'BPI_K37_VFX_C_K37FormTransitionVFX::FormToTransitionInOrOutFrom' has a wrong offset!");
static_assert(offsetof(BPI_K37_VFX_C_K37FormTransitionVFX, ShouldTransformIntoForm) == 0x000001, "Member 'BPI_K37_VFX_C_K37FormTransitionVFX::ShouldTransformIntoForm' has a wrong offset!");
static_assert(offsetof(BPI_K37_VFX_C_K37FormTransitionVFX, ShouldMeshSwap) == 0x000002, "Member 'BPI_K37_VFX_C_K37FormTransitionVFX::ShouldMeshSwap' has a wrong offset!");
static_assert(offsetof(BPI_K37_VFX_C_K37FormTransitionVFX, PlayRate) == 0x000008, "Member 'BPI_K37_VFX_C_K37FormTransitionVFX::PlayRate' has a wrong offset!");
static_assert(offsetof(BPI_K37_VFX_C_K37FormTransitionVFX, HideGlowingEyesInVampireForm) == 0x000010, "Member 'BPI_K37_VFX_C_K37FormTransitionVFX::HideGlowingEyesInVampireForm' has a wrong offset!");

// Function BPI_K37_VFX.BPI_K37_VFX_C.K37OnEnterForm
// 0x0018 (0x0018 - 0x0000)
struct BPI_K37_VFX_C_K37OnEnterForm final
{
public:
	EK37Forms                                     Form;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlayRate;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isStartingForm;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_K37_VFX_C_K37OnEnterForm) == 0x000008, "Wrong alignment on BPI_K37_VFX_C_K37OnEnterForm");
static_assert(sizeof(BPI_K37_VFX_C_K37OnEnterForm) == 0x000018, "Wrong size on BPI_K37_VFX_C_K37OnEnterForm");
static_assert(offsetof(BPI_K37_VFX_C_K37OnEnterForm, Form) == 0x000000, "Member 'BPI_K37_VFX_C_K37OnEnterForm::Form' has a wrong offset!");
static_assert(offsetof(BPI_K37_VFX_C_K37OnEnterForm, PlayRate) == 0x000008, "Member 'BPI_K37_VFX_C_K37OnEnterForm::PlayRate' has a wrong offset!");
static_assert(offsetof(BPI_K37_VFX_C_K37OnEnterForm, isStartingForm) == 0x000010, "Member 'BPI_K37_VFX_C_K37OnEnterForm::isStartingForm' has a wrong offset!");

// Function BPI_K37_VFX.BPI_K37_VFX_C.K37OnExitForm
// 0x0010 (0x0010 - 0x0000)
struct BPI_K37_VFX_C_K37OnExitForm final
{
public:
	EK37Forms                                     Form;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlayRate;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_K37_VFX_C_K37OnExitForm) == 0x000008, "Wrong alignment on BPI_K37_VFX_C_K37OnExitForm");
static_assert(sizeof(BPI_K37_VFX_C_K37OnExitForm) == 0x000010, "Wrong size on BPI_K37_VFX_C_K37OnExitForm");
static_assert(offsetof(BPI_K37_VFX_C_K37OnExitForm, Form) == 0x000000, "Member 'BPI_K37_VFX_C_K37OnExitForm::Form' has a wrong offset!");
static_assert(offsetof(BPI_K37_VFX_C_K37OnExitForm, PlayRate) == 0x000008, "Member 'BPI_K37_VFX_C_K37OnExitForm::PlayRate' has a wrong offset!");

// Function BPI_K37_VFX.BPI_K37_VFX_C.K37SetBatTeleportState
// 0x0001 (0x0001 - 0x0000)
struct BPI_K37_VFX_C_K37SetBatTeleportState final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_K37_VFX_C_K37SetBatTeleportState) == 0x000001, "Wrong alignment on BPI_K37_VFX_C_K37SetBatTeleportState");
static_assert(sizeof(BPI_K37_VFX_C_K37SetBatTeleportState) == 0x000001, "Wrong size on BPI_K37_VFX_C_K37SetBatTeleportState");
static_assert(offsetof(BPI_K37_VFX_C_K37SetBatTeleportState, Enabled) == 0x000000, "Member 'BPI_K37_VFX_C_K37SetBatTeleportState::Enabled' has a wrong offset!");

// Function BPI_K37_VFX.BPI_K37_VFX_C.K37SetMistShapeState
// 0x0003 (0x0003 - 0x0000)
struct BPI_K37_VFX_C_K37SetMistShapeState final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceMistEvenIfAlreadyVampire;                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDissolve;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_K37_VFX_C_K37SetMistShapeState) == 0x000001, "Wrong alignment on BPI_K37_VFX_C_K37SetMistShapeState");
static_assert(sizeof(BPI_K37_VFX_C_K37SetMistShapeState) == 0x000003, "Wrong size on BPI_K37_VFX_C_K37SetMistShapeState");
static_assert(offsetof(BPI_K37_VFX_C_K37SetMistShapeState, Enabled) == 0x000000, "Member 'BPI_K37_VFX_C_K37SetMistShapeState::Enabled' has a wrong offset!");
static_assert(offsetof(BPI_K37_VFX_C_K37SetMistShapeState, ForceMistEvenIfAlreadyVampire) == 0x000001, "Member 'BPI_K37_VFX_C_K37SetMistShapeState::ForceMistEvenIfAlreadyVampire' has a wrong offset!");
static_assert(offsetof(BPI_K37_VFX_C_K37SetMistShapeState, UseDissolve) == 0x000002, "Member 'BPI_K37_VFX_C_K37SetMistShapeState::UseDissolve' has a wrong offset!");

}

