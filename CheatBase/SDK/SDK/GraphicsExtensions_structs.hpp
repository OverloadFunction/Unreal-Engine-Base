#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GraphicsExtensions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GFXUtilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum GraphicsExtensions.EShadowDepthLODSelection
// NumValues: 0x0006
enum class EShadowDepthLODSelection : uint8
{
	ViewDependent                            = 0,
	HighestLOD                               = 1,
	LowestLOD                                = 2,
	ShadowView                               = 3,
	Max                                      = 4,
	EShadowDepthLODSelection_MAX             = 5,
};

// ScriptStruct GraphicsExtensions.AmbianceRequest
// 0x09A0 (0x09A0 - 0x0000)
struct alignas(0x10) FAmbianceRequest final
{
public:
	uint8                                         Pad_0[0x990];                                      // 0x0000(0x0990)(Fixing Size After Last Property [ Dumper-7 ])
	class UAmbianceManagerDataAsset*              DataAsset;                                         // 0x0990(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_998[0x8];                                      // 0x0998(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAmbianceRequest) == 0x000010, "Wrong alignment on FAmbianceRequest");
static_assert(sizeof(FAmbianceRequest) == 0x0009A0, "Wrong size on FAmbianceRequest");
static_assert(offsetof(FAmbianceRequest, DataAsset) == 0x000990, "Member 'FAmbianceRequest::DataAsset' has a wrong offset!");

// ScriptStruct GraphicsExtensions.BloomParams
// 0x00C0 (0x00C0 - 0x0000)
struct FBloomParams final
{
public:
	EBloomMethod                                  BloomMethod;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BloomIntensity;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomSizeScale;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bloom1Size;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bloom2Size;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bloom3Size;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bloom4Size;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bloom5Size;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bloom6Size;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom1Tint;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom2Tint;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom3Tint;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom4Tint;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom5Tint;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom6Tint;                                        // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomConvolutionScatterDispersion;                 // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomConvolutionSize;                              // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BloomConvolutionTexture;                           // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BloomConvolutionCenterUV;                          // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomConvolutionPreFilterMin;                      // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomConvolutionPreFilterMax;                      // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomConvolutionPreFilterMult;                     // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomConvolutionBufferScale;                       // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_BloomMethod : 1;                         // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomIntensity : 1;                      // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomThreshold : 1;                      // 0x00B8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom1Tint : 1;                          // 0x00B8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom1Size : 1;                          // 0x00B8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom2Size : 1;                          // 0x00B8(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom2Tint : 1;                          // 0x00B8(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom3Tint : 1;                          // 0x00B8(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom3Size : 1;                          // 0x00B9(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom4Tint : 1;                          // 0x00B9(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom4Size : 1;                          // 0x00B9(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom5Tint : 1;                          // 0x00B9(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom5Size : 1;                          // 0x00B9(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom6Tint : 1;                          // 0x00B9(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom6Size : 1;                          // 0x00B9(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomSizeScale : 1;                      // 0x00B9(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomConvolutionTexture : 1;             // 0x00BA(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomConvolutionScatterDispersion : 1;   // 0x00BA(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomConvolutionSize : 1;                // 0x00BA(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomConvolutionCenterUV : 1;            // 0x00BA(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomConvolutionPreFilterMin : 1;        // 0x00BA(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomConvolutionPreFilterMax : 1;        // 0x00BA(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomConvolutionPreFilterMult : 1;       // 0x00BA(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomConvolutionBufferScale : 1;         // 0x00BA(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBloomParams) == 0x000008, "Wrong alignment on FBloomParams");
static_assert(sizeof(FBloomParams) == 0x0000C0, "Wrong size on FBloomParams");
static_assert(offsetof(FBloomParams, BloomMethod) == 0x000000, "Member 'FBloomParams::BloomMethod' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomIntensity) == 0x000004, "Member 'FBloomParams::BloomIntensity' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomThreshold) == 0x000008, "Member 'FBloomParams::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomSizeScale) == 0x00000C, "Member 'FBloomParams::BloomSizeScale' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom1Size) == 0x000010, "Member 'FBloomParams::Bloom1Size' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom2Size) == 0x000014, "Member 'FBloomParams::Bloom2Size' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom3Size) == 0x000018, "Member 'FBloomParams::Bloom3Size' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom4Size) == 0x00001C, "Member 'FBloomParams::Bloom4Size' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom5Size) == 0x000020, "Member 'FBloomParams::Bloom5Size' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom6Size) == 0x000024, "Member 'FBloomParams::Bloom6Size' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom1Tint) == 0x000028, "Member 'FBloomParams::Bloom1Tint' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom2Tint) == 0x000038, "Member 'FBloomParams::Bloom2Tint' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom3Tint) == 0x000048, "Member 'FBloomParams::Bloom3Tint' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom4Tint) == 0x000058, "Member 'FBloomParams::Bloom4Tint' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom5Tint) == 0x000068, "Member 'FBloomParams::Bloom5Tint' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom6Tint) == 0x000078, "Member 'FBloomParams::Bloom6Tint' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionScatterDispersion) == 0x000088, "Member 'FBloomParams::BloomConvolutionScatterDispersion' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionSize) == 0x00008C, "Member 'FBloomParams::BloomConvolutionSize' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionTexture) == 0x000090, "Member 'FBloomParams::BloomConvolutionTexture' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionCenterUV) == 0x000098, "Member 'FBloomParams::BloomConvolutionCenterUV' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionPreFilterMin) == 0x0000A8, "Member 'FBloomParams::BloomConvolutionPreFilterMin' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionPreFilterMax) == 0x0000AC, "Member 'FBloomParams::BloomConvolutionPreFilterMax' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionPreFilterMult) == 0x0000B0, "Member 'FBloomParams::BloomConvolutionPreFilterMult' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionBufferScale) == 0x0000B4, "Member 'FBloomParams::BloomConvolutionBufferScale' has a wrong offset!");

// ScriptStruct GraphicsExtensions.ExposureParams
// 0x0058 (0x0058 - 0x0000)
struct FExposureParams final
{
public:
	float                                         AutoExposureBias;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AutoExposureApplyPhysicalCameraExposure : 1;       // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AutoExposureBiasCurve;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               AutoExposureMeterMask;                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureLowPercent;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureHighPercent;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureMinBrightness;                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureMaxBrightness;                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureSpeedUp;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureSpeedDown;                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HistogramLogMin;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HistogramLogMax;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureHighlightContrastScale;               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureShadowContrastScale;                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureDetailStrength;                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureBlurredLuminanceBlend;                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureBlurredLuminanceKernelSizePercent;    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureMiddleGreyBias;                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoExposureMethod                           AutoExposureMethod;                                // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_AutoExposureMethod : 1;                  // 0x0051(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureLowPercent : 1;              // 0x0051(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureHighPercent : 1;             // 0x0051(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureMinBrightness : 1;           // 0x0051(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureMaxBrightness : 1;           // 0x0051(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureSpeedUp : 1;                 // 0x0051(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureSpeedDown : 1;               // 0x0051(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureBias : 1;                    // 0x0051(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureBiasCurve : 1;               // 0x0052(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureMeterMask : 1;               // 0x0052(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureApplyPhysicalCameraExposure : 1; // 0x0052(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HistogramLogMin : 1;                     // 0x0052(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HistogramLogMax : 1;                     // 0x0052(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalExposureContrastScale : 1;          // 0x0052(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalExposureHighlightContrastScale : 1; // 0x0052(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalExposureShadowContrastScale : 1;    // 0x0052(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalExposureDetailStrength : 1;         // 0x0053(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalExposureBlurredLuminanceBlend : 1;  // 0x0053(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalExposureBlurredLuminanceKernelSizePercent : 1; // 0x0053(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalExposureMiddleGreyBias : 1;         // 0x0053(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExposureParams) == 0x000008, "Wrong alignment on FExposureParams");
static_assert(sizeof(FExposureParams) == 0x000058, "Wrong size on FExposureParams");
static_assert(offsetof(FExposureParams, AutoExposureBias) == 0x000000, "Member 'FExposureParams::AutoExposureBias' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureBiasCurve) == 0x000008, "Member 'FExposureParams::AutoExposureBiasCurve' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureMeterMask) == 0x000010, "Member 'FExposureParams::AutoExposureMeterMask' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureLowPercent) == 0x000018, "Member 'FExposureParams::AutoExposureLowPercent' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureHighPercent) == 0x00001C, "Member 'FExposureParams::AutoExposureHighPercent' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureMinBrightness) == 0x000020, "Member 'FExposureParams::AutoExposureMinBrightness' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureMaxBrightness) == 0x000024, "Member 'FExposureParams::AutoExposureMaxBrightness' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureSpeedUp) == 0x000028, "Member 'FExposureParams::AutoExposureSpeedUp' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureSpeedDown) == 0x00002C, "Member 'FExposureParams::AutoExposureSpeedDown' has a wrong offset!");
static_assert(offsetof(FExposureParams, HistogramLogMin) == 0x000030, "Member 'FExposureParams::HistogramLogMin' has a wrong offset!");
static_assert(offsetof(FExposureParams, HistogramLogMax) == 0x000034, "Member 'FExposureParams::HistogramLogMax' has a wrong offset!");
static_assert(offsetof(FExposureParams, LocalExposureHighlightContrastScale) == 0x000038, "Member 'FExposureParams::LocalExposureHighlightContrastScale' has a wrong offset!");
static_assert(offsetof(FExposureParams, LocalExposureShadowContrastScale) == 0x00003C, "Member 'FExposureParams::LocalExposureShadowContrastScale' has a wrong offset!");
static_assert(offsetof(FExposureParams, LocalExposureDetailStrength) == 0x000040, "Member 'FExposureParams::LocalExposureDetailStrength' has a wrong offset!");
static_assert(offsetof(FExposureParams, LocalExposureBlurredLuminanceBlend) == 0x000044, "Member 'FExposureParams::LocalExposureBlurredLuminanceBlend' has a wrong offset!");
static_assert(offsetof(FExposureParams, LocalExposureBlurredLuminanceKernelSizePercent) == 0x000048, "Member 'FExposureParams::LocalExposureBlurredLuminanceKernelSizePercent' has a wrong offset!");
static_assert(offsetof(FExposureParams, LocalExposureMiddleGreyBias) == 0x00004C, "Member 'FExposureParams::LocalExposureMiddleGreyBias' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureMethod) == 0x000050, "Member 'FExposureParams::AutoExposureMethod' has a wrong offset!");

// ScriptStruct GraphicsExtensions.ChromaticAberrationParams
// 0x000C (0x000C - 0x0000)
struct FChromaticAberrationParams final
{
public:
	float                                         SceneFringeIntensity;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChromaticAberrationStartOffset;                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_SceneFringeIntensity : 1;                // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ChromaticAberrationStartOffset : 1;      // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChromaticAberrationParams) == 0x000004, "Wrong alignment on FChromaticAberrationParams");
static_assert(sizeof(FChromaticAberrationParams) == 0x00000C, "Wrong size on FChromaticAberrationParams");
static_assert(offsetof(FChromaticAberrationParams, SceneFringeIntensity) == 0x000000, "Member 'FChromaticAberrationParams::SceneFringeIntensity' has a wrong offset!");
static_assert(offsetof(FChromaticAberrationParams, ChromaticAberrationStartOffset) == 0x000004, "Member 'FChromaticAberrationParams::ChromaticAberrationStartOffset' has a wrong offset!");

// ScriptStruct GraphicsExtensions.ColoGradingTemperature
// 0x0010 (0x0010 - 0x0000)
struct FColoGradingTemperature final
{
public:
	ETemperatureMethod                            TemperatureType;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WhiteTemp;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WhiteTint;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_TemperatureType : 1;                     // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WhiteTemp : 1;                           // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WhiteTint : 1;                           // 0x000C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColoGradingTemperature) == 0x000004, "Wrong alignment on FColoGradingTemperature");
static_assert(sizeof(FColoGradingTemperature) == 0x000010, "Wrong size on FColoGradingTemperature");
static_assert(offsetof(FColoGradingTemperature, TemperatureType) == 0x000000, "Member 'FColoGradingTemperature::TemperatureType' has a wrong offset!");
static_assert(offsetof(FColoGradingTemperature, WhiteTemp) == 0x000004, "Member 'FColoGradingTemperature::WhiteTemp' has a wrong offset!");
static_assert(offsetof(FColoGradingTemperature, WhiteTint) == 0x000008, "Member 'FColoGradingTemperature::WhiteTint' has a wrong offset!");

// ScriptStruct GraphicsExtensions.ColoGradingGlobal
// 0x00B0 (0x00B0 - 0x0000)
struct FColoGradingGlobal final
{
public:
	struct FVector4                               ColorSaturation;                                   // 0x0000(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrast;                                     // 0x0020(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGamma;                                        // 0x0040(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGain;                                         // 0x0060(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffset;                                       // 0x0080(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ColorSaturation : 1;                     // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorContrast : 1;                       // 0x00A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGamma : 1;                          // 0x00A0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGain : 1;                           // 0x00A0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorOffset : 1;                         // 0x00A0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0xF];                                       // 0x00A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColoGradingGlobal) == 0x000010, "Wrong alignment on FColoGradingGlobal");
static_assert(sizeof(FColoGradingGlobal) == 0x0000B0, "Wrong size on FColoGradingGlobal");
static_assert(offsetof(FColoGradingGlobal, ColorSaturation) == 0x000000, "Member 'FColoGradingGlobal::ColorSaturation' has a wrong offset!");
static_assert(offsetof(FColoGradingGlobal, ColorContrast) == 0x000020, "Member 'FColoGradingGlobal::ColorContrast' has a wrong offset!");
static_assert(offsetof(FColoGradingGlobal, ColorGamma) == 0x000040, "Member 'FColoGradingGlobal::ColorGamma' has a wrong offset!");
static_assert(offsetof(FColoGradingGlobal, ColorGain) == 0x000060, "Member 'FColoGradingGlobal::ColorGain' has a wrong offset!");
static_assert(offsetof(FColoGradingGlobal, ColorOffset) == 0x000080, "Member 'FColoGradingGlobal::ColorOffset' has a wrong offset!");

// ScriptStruct GraphicsExtensions.ColoGradingShadows
// 0x00B0 (0x00B0 - 0x0000)
struct FColoGradingShadows final
{
public:
	struct FVector4                               ColorSaturationShadows;                            // 0x0000(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastShadows;                              // 0x0020(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaShadows;                                 // 0x0040(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainShadows;                                  // 0x0060(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetShadows;                                // 0x0080(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionShadowsMax;                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ColorSaturationShadows : 1;              // 0x00A4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorContrastShadows : 1;                // 0x00A4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGammaShadows : 1;                   // 0x00A4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGainShadows : 1;                    // 0x00A4(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorOffsetShadows : 1;                  // 0x00A4(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorCorrectionShadowsMax : 1;           // 0x00A4(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A5[0xB];                                       // 0x00A5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColoGradingShadows) == 0x000010, "Wrong alignment on FColoGradingShadows");
static_assert(sizeof(FColoGradingShadows) == 0x0000B0, "Wrong size on FColoGradingShadows");
static_assert(offsetof(FColoGradingShadows, ColorSaturationShadows) == 0x000000, "Member 'FColoGradingShadows::ColorSaturationShadows' has a wrong offset!");
static_assert(offsetof(FColoGradingShadows, ColorContrastShadows) == 0x000020, "Member 'FColoGradingShadows::ColorContrastShadows' has a wrong offset!");
static_assert(offsetof(FColoGradingShadows, ColorGammaShadows) == 0x000040, "Member 'FColoGradingShadows::ColorGammaShadows' has a wrong offset!");
static_assert(offsetof(FColoGradingShadows, ColorGainShadows) == 0x000060, "Member 'FColoGradingShadows::ColorGainShadows' has a wrong offset!");
static_assert(offsetof(FColoGradingShadows, ColorOffsetShadows) == 0x000080, "Member 'FColoGradingShadows::ColorOffsetShadows' has a wrong offset!");
static_assert(offsetof(FColoGradingShadows, ColorCorrectionShadowsMax) == 0x0000A0, "Member 'FColoGradingShadows::ColorCorrectionShadowsMax' has a wrong offset!");

// ScriptStruct GraphicsExtensions.ColoGradingMidtones
// 0x00B0 (0x00B0 - 0x0000)
struct FColoGradingMidtones final
{
public:
	struct FVector4                               ColorSaturationMidtones;                           // 0x0000(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastMidtones;                             // 0x0020(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaMidtones;                                // 0x0040(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainMidtones;                                 // 0x0060(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetMidtones;                               // 0x0080(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ColorSaturationMidtones : 1;             // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorContrastMidtones : 1;               // 0x00A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGammaMidtones : 1;                  // 0x00A0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGainMidtones : 1;                   // 0x00A0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorOffsetMidtones : 1;                 // 0x00A0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0xF];                                       // 0x00A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColoGradingMidtones) == 0x000010, "Wrong alignment on FColoGradingMidtones");
static_assert(sizeof(FColoGradingMidtones) == 0x0000B0, "Wrong size on FColoGradingMidtones");
static_assert(offsetof(FColoGradingMidtones, ColorSaturationMidtones) == 0x000000, "Member 'FColoGradingMidtones::ColorSaturationMidtones' has a wrong offset!");
static_assert(offsetof(FColoGradingMidtones, ColorContrastMidtones) == 0x000020, "Member 'FColoGradingMidtones::ColorContrastMidtones' has a wrong offset!");
static_assert(offsetof(FColoGradingMidtones, ColorGammaMidtones) == 0x000040, "Member 'FColoGradingMidtones::ColorGammaMidtones' has a wrong offset!");
static_assert(offsetof(FColoGradingMidtones, ColorGainMidtones) == 0x000060, "Member 'FColoGradingMidtones::ColorGainMidtones' has a wrong offset!");
static_assert(offsetof(FColoGradingMidtones, ColorOffsetMidtones) == 0x000080, "Member 'FColoGradingMidtones::ColorOffsetMidtones' has a wrong offset!");

// ScriptStruct GraphicsExtensions.ColoGradingHighlights
// 0x00B0 (0x00B0 - 0x0000)
struct FColoGradingHighlights final
{
public:
	struct FVector4                               ColorSaturationHighlights;                         // 0x0000(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastHighlights;                           // 0x0020(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaHighlights;                              // 0x0040(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainHighlights;                               // 0x0060(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetHighlights;                             // 0x0080(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionHighlightsMin;                      // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionHighlightsMax;                      // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ColorSaturationHighlights : 1;           // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorContrastHighlights : 1;             // 0x00A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGammaHighlights : 1;                // 0x00A8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGainHighlights : 1;                 // 0x00A8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorOffsetHighlights : 1;               // 0x00A8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorCorrectionHighlightsMin : 1;        // 0x00A8(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorCorrectionHighlightsMax : 1;        // 0x00A8(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColoGradingHighlights) == 0x000010, "Wrong alignment on FColoGradingHighlights");
static_assert(sizeof(FColoGradingHighlights) == 0x0000B0, "Wrong size on FColoGradingHighlights");
static_assert(offsetof(FColoGradingHighlights, ColorSaturationHighlights) == 0x000000, "Member 'FColoGradingHighlights::ColorSaturationHighlights' has a wrong offset!");
static_assert(offsetof(FColoGradingHighlights, ColorContrastHighlights) == 0x000020, "Member 'FColoGradingHighlights::ColorContrastHighlights' has a wrong offset!");
static_assert(offsetof(FColoGradingHighlights, ColorGammaHighlights) == 0x000040, "Member 'FColoGradingHighlights::ColorGammaHighlights' has a wrong offset!");
static_assert(offsetof(FColoGradingHighlights, ColorGainHighlights) == 0x000060, "Member 'FColoGradingHighlights::ColorGainHighlights' has a wrong offset!");
static_assert(offsetof(FColoGradingHighlights, ColorOffsetHighlights) == 0x000080, "Member 'FColoGradingHighlights::ColorOffsetHighlights' has a wrong offset!");
static_assert(offsetof(FColoGradingHighlights, ColorCorrectionHighlightsMin) == 0x0000A0, "Member 'FColoGradingHighlights::ColorCorrectionHighlightsMin' has a wrong offset!");
static_assert(offsetof(FColoGradingHighlights, ColorCorrectionHighlightsMax) == 0x0000A4, "Member 'FColoGradingHighlights::ColorCorrectionHighlightsMax' has a wrong offset!");

// ScriptStruct GraphicsExtensions.ColoGradingMisc
// 0x0030 (0x0030 - 0x0000)
struct FColoGradingMisc final
{
public:
	float                                         BlueCorrection;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpandGamut;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToneCurveAmount;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SceneColorTint;                                    // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorGradingIntensity;                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ColorGradingLUT;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_BlueCorrection : 1;                      // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ExpandGamut : 1;                         // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ToneCurveAmount : 1;                     // 0x0028(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SceneColorTint : 1;                      // 0x0028(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGradingIntensity : 1;               // 0x0028(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGradingLUT : 1;                     // 0x0028(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColoGradingMisc) == 0x000008, "Wrong alignment on FColoGradingMisc");
static_assert(sizeof(FColoGradingMisc) == 0x000030, "Wrong size on FColoGradingMisc");
static_assert(offsetof(FColoGradingMisc, BlueCorrection) == 0x000000, "Member 'FColoGradingMisc::BlueCorrection' has a wrong offset!");
static_assert(offsetof(FColoGradingMisc, ExpandGamut) == 0x000004, "Member 'FColoGradingMisc::ExpandGamut' has a wrong offset!");
static_assert(offsetof(FColoGradingMisc, ToneCurveAmount) == 0x000008, "Member 'FColoGradingMisc::ToneCurveAmount' has a wrong offset!");
static_assert(offsetof(FColoGradingMisc, SceneColorTint) == 0x00000C, "Member 'FColoGradingMisc::SceneColorTint' has a wrong offset!");
static_assert(offsetof(FColoGradingMisc, ColorGradingIntensity) == 0x00001C, "Member 'FColoGradingMisc::ColorGradingIntensity' has a wrong offset!");
static_assert(offsetof(FColoGradingMisc, ColorGradingLUT) == 0x000020, "Member 'FColoGradingMisc::ColorGradingLUT' has a wrong offset!");

// ScriptStruct GraphicsExtensions.ColorGradingParams
// 0x0300 (0x0300 - 0x0000)
struct FColorGradingParams final
{
public:
	struct FColoGradingTemperature                Temperature;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FColoGradingGlobal                     Global;                                            // 0x0010(0x00B0)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FColoGradingShadows                    Shadows;                                           // 0x00C0(0x00B0)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FColoGradingMidtones                   Midtones;                                          // 0x0170(0x00B0)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FColoGradingHighlights                 Highlights;                                        // 0x0220(0x00B0)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FColoGradingMisc                       Misc;                                              // 0x02D0(0x0030)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FColorGradingParams) == 0x000010, "Wrong alignment on FColorGradingParams");
static_assert(sizeof(FColorGradingParams) == 0x000300, "Wrong size on FColorGradingParams");
static_assert(offsetof(FColorGradingParams, Temperature) == 0x000000, "Member 'FColorGradingParams::Temperature' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, Global) == 0x000010, "Member 'FColorGradingParams::Global' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, Shadows) == 0x0000C0, "Member 'FColorGradingParams::Shadows' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, Midtones) == 0x000170, "Member 'FColorGradingParams::Midtones' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, Highlights) == 0x000220, "Member 'FColorGradingParams::Highlights' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, Misc) == 0x0002D0, "Member 'FColorGradingParams::Misc' has a wrong offset!");

// ScriptStruct GraphicsExtensions.FilmGrainParams
// 0x0030 (0x0030 - 0x0000)
struct FFilmGrainParams final
{
public:
	float                                         FilmGrainIntensity;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmGrainIntensityShadows;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmGrainIntensityMidtones;                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmGrainIntensityHighlights;                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmGrainShadowsMax;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmGrainHighlightsMin;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmGrainHighlightsMax;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmGrainTexelSize;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             FilmGrainTexture;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_FilmGrainIntensity : 1;                  // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmGrainIntensityShadows : 1;           // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmGrainIntensityMidtones : 1;          // 0x0028(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmGrainIntensityHighlights : 1;        // 0x0028(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmGrainShadowsMax : 1;                 // 0x0028(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmGrainHighlightsMin : 1;              // 0x0028(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmGrainHighlightsMax : 1;              // 0x0028(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmGrainTexelSize : 1;                  // 0x0028(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmGrainTexture : 1;                    // 0x0029(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFilmGrainParams) == 0x000008, "Wrong alignment on FFilmGrainParams");
static_assert(sizeof(FFilmGrainParams) == 0x000030, "Wrong size on FFilmGrainParams");
static_assert(offsetof(FFilmGrainParams, FilmGrainIntensity) == 0x000000, "Member 'FFilmGrainParams::FilmGrainIntensity' has a wrong offset!");
static_assert(offsetof(FFilmGrainParams, FilmGrainIntensityShadows) == 0x000004, "Member 'FFilmGrainParams::FilmGrainIntensityShadows' has a wrong offset!");
static_assert(offsetof(FFilmGrainParams, FilmGrainIntensityMidtones) == 0x000008, "Member 'FFilmGrainParams::FilmGrainIntensityMidtones' has a wrong offset!");
static_assert(offsetof(FFilmGrainParams, FilmGrainIntensityHighlights) == 0x00000C, "Member 'FFilmGrainParams::FilmGrainIntensityHighlights' has a wrong offset!");
static_assert(offsetof(FFilmGrainParams, FilmGrainShadowsMax) == 0x000010, "Member 'FFilmGrainParams::FilmGrainShadowsMax' has a wrong offset!");
static_assert(offsetof(FFilmGrainParams, FilmGrainHighlightsMin) == 0x000014, "Member 'FFilmGrainParams::FilmGrainHighlightsMin' has a wrong offset!");
static_assert(offsetof(FFilmGrainParams, FilmGrainHighlightsMax) == 0x000018, "Member 'FFilmGrainParams::FilmGrainHighlightsMax' has a wrong offset!");
static_assert(offsetof(FFilmGrainParams, FilmGrainTexelSize) == 0x00001C, "Member 'FFilmGrainParams::FilmGrainTexelSize' has a wrong offset!");
static_assert(offsetof(FFilmGrainParams, FilmGrainTexture) == 0x000020, "Member 'FFilmGrainParams::FilmGrainTexture' has a wrong offset!");

// ScriptStruct GraphicsExtensions.FilmParams
// 0x0018 (0x0018 - 0x0000)
struct FFilmParams final
{
public:
	float                                         FilmSlope;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmToe;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmShoulder;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmBlackClip;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmWhiteClip;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_FilmSlope : 1;                           // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmToe : 1;                             // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmShoulder : 1;                        // 0x0014(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmBlackClip : 1;                       // 0x0014(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmWhiteClip : 1;                       // 0x0014(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFilmParams) == 0x000004, "Wrong alignment on FFilmParams");
static_assert(sizeof(FFilmParams) == 0x000018, "Wrong size on FFilmParams");
static_assert(offsetof(FFilmParams, FilmSlope) == 0x000000, "Member 'FFilmParams::FilmSlope' has a wrong offset!");
static_assert(offsetof(FFilmParams, FilmToe) == 0x000004, "Member 'FFilmParams::FilmToe' has a wrong offset!");
static_assert(offsetof(FFilmParams, FilmShoulder) == 0x000008, "Member 'FFilmParams::FilmShoulder' has a wrong offset!");
static_assert(offsetof(FFilmParams, FilmBlackClip) == 0x00000C, "Member 'FFilmParams::FilmBlackClip' has a wrong offset!");
static_assert(offsetof(FFilmParams, FilmWhiteClip) == 0x000010, "Member 'FFilmParams::FilmWhiteClip' has a wrong offset!");

// ScriptStruct GraphicsExtensions.GlobalIllumParams
// 0x0018 (0x0018 - 0x0000)
struct FGlobalIllumParams final
{
public:
	struct FLinearColor                           IndirectLightingColor;                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightingIntensity;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_IndirectLightingColor : 1;               // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_IndirectLightingIntensity : 1;           // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGlobalIllumParams) == 0x000004, "Wrong alignment on FGlobalIllumParams");
static_assert(sizeof(FGlobalIllumParams) == 0x000018, "Wrong size on FGlobalIllumParams");
static_assert(offsetof(FGlobalIllumParams, IndirectLightingColor) == 0x000000, "Member 'FGlobalIllumParams::IndirectLightingColor' has a wrong offset!");
static_assert(offsetof(FGlobalIllumParams, IndirectLightingIntensity) == 0x000010, "Member 'FGlobalIllumParams::IndirectLightingIntensity' has a wrong offset!");

// ScriptStruct GraphicsExtensions.AmbientOcclusionParams
// 0x0034 (0x0034 - 0x0000)
struct FAmbientOcclusionParams final
{
public:
	float                                         AmbientOcclusionIntensity;                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionRadius;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AmbientOcclusionRadiusInWS : 1;                    // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AmbientOcclusionFadeDistance;                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionFadeRadius;                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionPower;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionBias;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionQuality;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionMipBlend;                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionMipScale;                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionMipThreshold;                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionTemporalBlendWeight;               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_AmbientOcclusionIntensity : 1;           // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionRadius : 1;              // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionFadeDistance : 1;        // 0x0030(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionFadeRadius : 1;          // 0x0030(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionRadiusInWS : 1;          // 0x0030(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionPower : 1;               // 0x0030(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionBias : 1;                // 0x0030(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionQuality : 1;             // 0x0030(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionMipBlend : 1;            // 0x0031(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionMipScale : 1;            // 0x0031(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionMipThreshold : 1;        // 0x0031(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionTemporalBlendWeight : 1; // 0x0031(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAmbientOcclusionParams) == 0x000004, "Wrong alignment on FAmbientOcclusionParams");
static_assert(sizeof(FAmbientOcclusionParams) == 0x000034, "Wrong size on FAmbientOcclusionParams");
static_assert(offsetof(FAmbientOcclusionParams, AmbientOcclusionIntensity) == 0x000000, "Member 'FAmbientOcclusionParams::AmbientOcclusionIntensity' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionParams, AmbientOcclusionRadius) == 0x000004, "Member 'FAmbientOcclusionParams::AmbientOcclusionRadius' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionParams, AmbientOcclusionFadeDistance) == 0x00000C, "Member 'FAmbientOcclusionParams::AmbientOcclusionFadeDistance' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionParams, AmbientOcclusionFadeRadius) == 0x000010, "Member 'FAmbientOcclusionParams::AmbientOcclusionFadeRadius' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionParams, AmbientOcclusionPower) == 0x000014, "Member 'FAmbientOcclusionParams::AmbientOcclusionPower' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionParams, AmbientOcclusionBias) == 0x000018, "Member 'FAmbientOcclusionParams::AmbientOcclusionBias' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionParams, AmbientOcclusionQuality) == 0x00001C, "Member 'FAmbientOcclusionParams::AmbientOcclusionQuality' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionParams, AmbientOcclusionMipBlend) == 0x000020, "Member 'FAmbientOcclusionParams::AmbientOcclusionMipBlend' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionParams, AmbientOcclusionMipScale) == 0x000024, "Member 'FAmbientOcclusionParams::AmbientOcclusionMipScale' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionParams, AmbientOcclusionMipThreshold) == 0x000028, "Member 'FAmbientOcclusionParams::AmbientOcclusionMipThreshold' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionParams, AmbientOcclusionTemporalBlendWeight) == 0x00002C, "Member 'FAmbientOcclusionParams::AmbientOcclusionTemporalBlendWeight' has a wrong offset!");

// ScriptStruct GraphicsExtensions.LensFlareParams
// 0x00B0 (0x00B0 - 0x0000)
struct FLensFlareParams final
{
public:
	float                                         LensFlareIntensity;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LensFlareTint;                                     // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LensFlareBokehSize;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LensFlareThreshold;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               LensFlareBokehShape;                               // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LensFlareTints[0x8];                               // 0x0028(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_LensFlareIntensity : 1;                  // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LensFlareTint : 1;                       // 0x00A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LensFlareBokehSize : 1;                  // 0x00A8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LensFlareThreshold : 1;                  // 0x00A8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LensFlareBokehShape : 1;                 // 0x00A8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LensFlareTints : 1;                      // 0x00A8(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLensFlareParams) == 0x000008, "Wrong alignment on FLensFlareParams");
static_assert(sizeof(FLensFlareParams) == 0x0000B0, "Wrong size on FLensFlareParams");
static_assert(offsetof(FLensFlareParams, LensFlareIntensity) == 0x000000, "Member 'FLensFlareParams::LensFlareIntensity' has a wrong offset!");
static_assert(offsetof(FLensFlareParams, LensFlareTint) == 0x000004, "Member 'FLensFlareParams::LensFlareTint' has a wrong offset!");
static_assert(offsetof(FLensFlareParams, LensFlareBokehSize) == 0x000014, "Member 'FLensFlareParams::LensFlareBokehSize' has a wrong offset!");
static_assert(offsetof(FLensFlareParams, LensFlareThreshold) == 0x000018, "Member 'FLensFlareParams::LensFlareThreshold' has a wrong offset!");
static_assert(offsetof(FLensFlareParams, LensFlareBokehShape) == 0x000020, "Member 'FLensFlareParams::LensFlareBokehShape' has a wrong offset!");
static_assert(offsetof(FLensFlareParams, LensFlareTints) == 0x000028, "Member 'FLensFlareParams::LensFlareTints' has a wrong offset!");

// ScriptStruct GraphicsExtensions.DepthOfFieldParams
// 0x0024 (0x0024 - 0x0000)
struct FDepthOfFieldParams final
{
public:
	float                                         DepthOfFieldFstop;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldMinFstop;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DepthOfFieldBladeCount;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldSensorWidth;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldSqueezeFactor;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldFocalDistance;                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldDepthBlurAmount;                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOfFieldDepthBlurRadius;                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_DepthOfFieldFstop : 1;                   // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldMinFstop : 1;                // 0x0020(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldBladeCount : 1;              // 0x0020(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldSensorWidth : 1;             // 0x0020(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldSqueezeFactor : 1;           // 0x0020(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldFocalDistance : 1;           // 0x0020(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldDepthBlurAmount : 1;         // 0x0020(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DepthOfFieldDepthBlurRadius : 1;         // 0x0020(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDepthOfFieldParams) == 0x000004, "Wrong alignment on FDepthOfFieldParams");
static_assert(sizeof(FDepthOfFieldParams) == 0x000024, "Wrong size on FDepthOfFieldParams");
static_assert(offsetof(FDepthOfFieldParams, DepthOfFieldFstop) == 0x000000, "Member 'FDepthOfFieldParams::DepthOfFieldFstop' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldParams, DepthOfFieldMinFstop) == 0x000004, "Member 'FDepthOfFieldParams::DepthOfFieldMinFstop' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldParams, DepthOfFieldBladeCount) == 0x000008, "Member 'FDepthOfFieldParams::DepthOfFieldBladeCount' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldParams, DepthOfFieldSensorWidth) == 0x00000C, "Member 'FDepthOfFieldParams::DepthOfFieldSensorWidth' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldParams, DepthOfFieldSqueezeFactor) == 0x000010, "Member 'FDepthOfFieldParams::DepthOfFieldSqueezeFactor' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldParams, DepthOfFieldFocalDistance) == 0x000014, "Member 'FDepthOfFieldParams::DepthOfFieldFocalDistance' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldParams, DepthOfFieldDepthBlurAmount) == 0x000018, "Member 'FDepthOfFieldParams::DepthOfFieldDepthBlurAmount' has a wrong offset!");
static_assert(offsetof(FDepthOfFieldParams, DepthOfFieldDepthBlurRadius) == 0x00001C, "Member 'FDepthOfFieldParams::DepthOfFieldDepthBlurRadius' has a wrong offset!");

// ScriptStruct GraphicsExtensions.ReflectionParams
// 0x0010 (0x0010 - 0x0000)
struct FReflectionParams final
{
public:
	struct FBPCompatiblePerPlatformFloat          ScreenSpaceReflectionIntensity;                    // 0x0000(0x0004)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FBPCompatiblePerPlatformFloat          ScreenSpaceReflectionQuality;                      // 0x0004(0x0004)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ScreenSpaceReflectionMaxRoughness;                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ScreenSpaceReflectionIntensity : 1;      // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ScreenSpaceReflectionQuality : 1;        // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ScreenSpaceReflectionMaxRoughness : 1;   // 0x000C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReflectionParams) == 0x000004, "Wrong alignment on FReflectionParams");
static_assert(sizeof(FReflectionParams) == 0x000010, "Wrong size on FReflectionParams");
static_assert(offsetof(FReflectionParams, ScreenSpaceReflectionIntensity) == 0x000000, "Member 'FReflectionParams::ScreenSpaceReflectionIntensity' has a wrong offset!");
static_assert(offsetof(FReflectionParams, ScreenSpaceReflectionQuality) == 0x000004, "Member 'FReflectionParams::ScreenSpaceReflectionQuality' has a wrong offset!");
static_assert(offsetof(FReflectionParams, ScreenSpaceReflectionMaxRoughness) == 0x000008, "Member 'FReflectionParams::ScreenSpaceReflectionMaxRoughness' has a wrong offset!");

// ScriptStruct GraphicsExtensions.PostProcessParams
// 0x0650 (0x0650 - 0x0000)
struct FPostProcessParams final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBloomParams                           Bloom;                                             // 0x0060(0x00C0)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FExposureParams                        Exposure;                                          // 0x0120(0x0058)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FChromaticAberrationParams             ChromaticAberration;                               // 0x0178(0x000C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0xC];                                      // 0x0184(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColorGradingParams                    ColorGrading;                                      // 0x0190(0x0300)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FDepthOfFieldParams                    DepthOfField;                                      // 0x0490(0x0024)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FReflectionParams                      Reflection;                                        // 0x04B4(0x0010)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FFilmParams                            Film;                                              // 0x04C4(0x0018)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFilmGrainParams                       FilmGrain;                                         // 0x04E0(0x0030)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FLensFlareParams                       LensFlareParams;                                   // 0x0510(0x00B0)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FGlobalIllumParams                     GlobalIllumination;                                // 0x05C0(0x0018)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FAmbientOcclusionParams                AmbientOcclusion;                                  // 0x05D8(0x0034)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VignetteIntensity;                                 // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeightedBlendables                    WeightedBlendables;                                // 0x0610(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           AmbientCubemapTint;                                // 0x0620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientCubemapIntensity;                           // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           AmbientCubemap;                                    // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0640(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnbound;                                          // 0x0641(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBloomOverrided;                                 // 0x0642(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExposureOverrided;                              // 0x0643(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChromaticOverrided;                             // 0x0644(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsColorGradingOverrided;                          // 0x0645(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFilmOverrided;                                  // 0x0646(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFilmGrainOverrided;                             // 0x0647(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGIOverrided;                                    // 0x0648(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_VignetteIntensity : 1;                   // 0x0649(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bPostProcessMaterialOverrided;                     // 0x064A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAOOverrided;                                    // 0x064B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLensFlareOverrided;                             // 0x064C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDepthOfFieldOverrided;                          // 0x064D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReflectionOverrided;                            // 0x064E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_AmbientCubemapTint : 1;                  // 0x064F(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientCubemapIntensity : 1;             // 0x064F(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FPostProcessParams) == 0x000010, "Wrong alignment on FPostProcessParams");
static_assert(sizeof(FPostProcessParams) == 0x000650, "Wrong size on FPostProcessParams");
static_assert(offsetof(FPostProcessParams, Transform) == 0x000000, "Member 'FPostProcessParams::Transform' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, Bloom) == 0x000060, "Member 'FPostProcessParams::Bloom' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, Exposure) == 0x000120, "Member 'FPostProcessParams::Exposure' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, ChromaticAberration) == 0x000178, "Member 'FPostProcessParams::ChromaticAberration' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, ColorGrading) == 0x000190, "Member 'FPostProcessParams::ColorGrading' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, DepthOfField) == 0x000490, "Member 'FPostProcessParams::DepthOfField' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, Reflection) == 0x0004B4, "Member 'FPostProcessParams::Reflection' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, Film) == 0x0004C4, "Member 'FPostProcessParams::Film' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, FilmGrain) == 0x0004E0, "Member 'FPostProcessParams::FilmGrain' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, LensFlareParams) == 0x000510, "Member 'FPostProcessParams::LensFlareParams' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, GlobalIllumination) == 0x0005C0, "Member 'FPostProcessParams::GlobalIllumination' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, AmbientOcclusion) == 0x0005D8, "Member 'FPostProcessParams::AmbientOcclusion' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, VignetteIntensity) == 0x00060C, "Member 'FPostProcessParams::VignetteIntensity' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, WeightedBlendables) == 0x000610, "Member 'FPostProcessParams::WeightedBlendables' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, AmbientCubemapTint) == 0x000620, "Member 'FPostProcessParams::AmbientCubemapTint' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, AmbientCubemapIntensity) == 0x000630, "Member 'FPostProcessParams::AmbientCubemapIntensity' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, AmbientCubemap) == 0x000638, "Member 'FPostProcessParams::AmbientCubemap' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bEnabled) == 0x000640, "Member 'FPostProcessParams::bEnabled' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bUnbound) == 0x000641, "Member 'FPostProcessParams::bUnbound' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsBloomOverrided) == 0x000642, "Member 'FPostProcessParams::bIsBloomOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsExposureOverrided) == 0x000643, "Member 'FPostProcessParams::bIsExposureOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsChromaticOverrided) == 0x000644, "Member 'FPostProcessParams::bIsChromaticOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsColorGradingOverrided) == 0x000645, "Member 'FPostProcessParams::bIsColorGradingOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsFilmOverrided) == 0x000646, "Member 'FPostProcessParams::bIsFilmOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsFilmGrainOverrided) == 0x000647, "Member 'FPostProcessParams::bIsFilmGrainOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsGIOverrided) == 0x000648, "Member 'FPostProcessParams::bIsGIOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bPostProcessMaterialOverrided) == 0x00064A, "Member 'FPostProcessParams::bPostProcessMaterialOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsAOOverrided) == 0x00064B, "Member 'FPostProcessParams::bIsAOOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsLensFlareOverrided) == 0x00064C, "Member 'FPostProcessParams::bIsLensFlareOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsDepthOfFieldOverrided) == 0x00064D, "Member 'FPostProcessParams::bIsDepthOfFieldOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsReflectionOverrided) == 0x00064E, "Member 'FPostProcessParams::bIsReflectionOverrided' has a wrong offset!");

// ScriptStruct GraphicsExtensions.DirectionalLightParams
// 0x0100 (0x0100 - 0x0000)
struct FDirectionalLightParams final
{
public:
	struct FVector3d                              Position;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator3f                             Orientation;                                       // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceAngle;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceSoftAngle;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTemperature;                                   // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temperature;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAffectWorld;                                    // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCastShadows;                                    // 0x003D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	ELightingDetailMode                           DetailLevelBeforeCastDynamicShadows;               // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionContribution;                      // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecularScale;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBias;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSlopeBias;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSharpen;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactShadowLength;                               // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContactShadowLengthInWS;                           // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastTranslucentShadows;                            // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadowsFromCinematicObjectsOnly;              // 0x0062(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                      LightingChannels;                                  // 0x0063(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          CastStaticShadows;                                 // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastDynamicShadows;                                // 0x0065(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CascadeShadowMapQualityReductionBHVR;              // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowResolutionScale;                             // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectTranslucentLighting;                        // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ContactShadowCastingIntensity;                     // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactShadowNonCastingIntensity;                  // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransmission;                                     // 0x007C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastVolumetricShadow;                             // 0x007D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x007E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenInGame;                                     // 0x007F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleInReflectionCaptures;                      // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLightShaftOcclusion;                        // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionMaskDarkness;                             // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionDepthRange;                               // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLightShaftBloom;                            // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BloomScale;                                        // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomMaxBrightness;                                // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BloomTint;                                         // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightShaftOverrideDirection;                       // 0x00A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicShadowDistanceMovableLight;                 // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DynamicShadowCascades;                             // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CascadeDistributionExponent;                       // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDrawDistance;                                   // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceFadeRange;                              // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LightFunctionMaterial;                             // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightFunctionScale;                                // 0x00D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFunctionFadeDistance;                         // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisabledBrightness;                                // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailModeBitMask;                                 // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDirectionalLightParams) == 0x000008, "Wrong alignment on FDirectionalLightParams");
static_assert(sizeof(FDirectionalLightParams) == 0x000100, "Wrong size on FDirectionalLightParams");
static_assert(offsetof(FDirectionalLightParams, Position) == 0x000000, "Member 'FDirectionalLightParams::Position' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, Orientation) == 0x000018, "Member 'FDirectionalLightParams::Orientation' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, Intensity) == 0x000024, "Member 'FDirectionalLightParams::Intensity' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, Color) == 0x000028, "Member 'FDirectionalLightParams::Color' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, SourceAngle) == 0x00002C, "Member 'FDirectionalLightParams::SourceAngle' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, SourceSoftAngle) == 0x000030, "Member 'FDirectionalLightParams::SourceSoftAngle' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bUseTemperature) == 0x000034, "Member 'FDirectionalLightParams::bUseTemperature' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, Temperature) == 0x000038, "Member 'FDirectionalLightParams::Temperature' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bIsAffectWorld) == 0x00003C, "Member 'FDirectionalLightParams::bIsAffectWorld' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bIsCastShadows) == 0x00003D, "Member 'FDirectionalLightParams::bIsCastShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, DetailLevelBeforeCastDynamicShadows) == 0x000040, "Member 'FDirectionalLightParams::DetailLevelBeforeCastDynamicShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, VolumetricScatteringIntensity) == 0x000044, "Member 'FDirectionalLightParams::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, AmbientOcclusionContribution) == 0x000048, "Member 'FDirectionalLightParams::AmbientOcclusionContribution' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, SpecularScale) == 0x00004C, "Member 'FDirectionalLightParams::SpecularScale' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, ShadowBias) == 0x000050, "Member 'FDirectionalLightParams::ShadowBias' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, ShadowSlopeBias) == 0x000054, "Member 'FDirectionalLightParams::ShadowSlopeBias' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, ShadowSharpen) == 0x000058, "Member 'FDirectionalLightParams::ShadowSharpen' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, ContactShadowLength) == 0x00005C, "Member 'FDirectionalLightParams::ContactShadowLength' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, ContactShadowLengthInWS) == 0x000060, "Member 'FDirectionalLightParams::ContactShadowLengthInWS' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, CastTranslucentShadows) == 0x000061, "Member 'FDirectionalLightParams::CastTranslucentShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bCastShadowsFromCinematicObjectsOnly) == 0x000062, "Member 'FDirectionalLightParams::bCastShadowsFromCinematicObjectsOnly' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, LightingChannels) == 0x000063, "Member 'FDirectionalLightParams::LightingChannels' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, CastStaticShadows) == 0x000064, "Member 'FDirectionalLightParams::CastStaticShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, CastDynamicShadows) == 0x000065, "Member 'FDirectionalLightParams::CastDynamicShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, CascadeShadowMapQualityReductionBHVR) == 0x000068, "Member 'FDirectionalLightParams::CascadeShadowMapQualityReductionBHVR' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, ShadowResolutionScale) == 0x00006C, "Member 'FDirectionalLightParams::ShadowResolutionScale' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bAffectTranslucentLighting) == 0x000070, "Member 'FDirectionalLightParams::bAffectTranslucentLighting' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, ContactShadowCastingIntensity) == 0x000074, "Member 'FDirectionalLightParams::ContactShadowCastingIntensity' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, ContactShadowNonCastingIntensity) == 0x000078, "Member 'FDirectionalLightParams::ContactShadowNonCastingIntensity' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bTransmission) == 0x00007C, "Member 'FDirectionalLightParams::bTransmission' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bCastVolumetricShadow) == 0x00007D, "Member 'FDirectionalLightParams::bCastVolumetricShadow' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bIsVisible) == 0x00007E, "Member 'FDirectionalLightParams::bIsVisible' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bHiddenInGame) == 0x00007F, "Member 'FDirectionalLightParams::bHiddenInGame' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bVisibleInReflectionCaptures) == 0x000080, "Member 'FDirectionalLightParams::bVisibleInReflectionCaptures' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bEnableLightShaftOcclusion) == 0x000081, "Member 'FDirectionalLightParams::bEnableLightShaftOcclusion' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, OcclusionMaskDarkness) == 0x000084, "Member 'FDirectionalLightParams::OcclusionMaskDarkness' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, OcclusionDepthRange) == 0x000088, "Member 'FDirectionalLightParams::OcclusionDepthRange' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bEnableLightShaftBloom) == 0x00008C, "Member 'FDirectionalLightParams::bEnableLightShaftBloom' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, BloomScale) == 0x000090, "Member 'FDirectionalLightParams::BloomScale' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, BloomThreshold) == 0x000094, "Member 'FDirectionalLightParams::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, BloomMaxBrightness) == 0x000098, "Member 'FDirectionalLightParams::BloomMaxBrightness' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, BloomTint) == 0x00009C, "Member 'FDirectionalLightParams::BloomTint' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, LightShaftOverrideDirection) == 0x0000A0, "Member 'FDirectionalLightParams::LightShaftOverrideDirection' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, DynamicShadowDistanceMovableLight) == 0x0000B8, "Member 'FDirectionalLightParams::DynamicShadowDistanceMovableLight' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, DynamicShadowCascades) == 0x0000BC, "Member 'FDirectionalLightParams::DynamicShadowCascades' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, CascadeDistributionExponent) == 0x0000C0, "Member 'FDirectionalLightParams::CascadeDistributionExponent' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, MaxDrawDistance) == 0x0000C4, "Member 'FDirectionalLightParams::MaxDrawDistance' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, MaxDistanceFadeRange) == 0x0000C8, "Member 'FDirectionalLightParams::MaxDistanceFadeRange' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, LightFunctionMaterial) == 0x0000D0, "Member 'FDirectionalLightParams::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, LightFunctionScale) == 0x0000D8, "Member 'FDirectionalLightParams::LightFunctionScale' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, LightFunctionFadeDistance) == 0x0000F0, "Member 'FDirectionalLightParams::LightFunctionFadeDistance' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, DisabledBrightness) == 0x0000F4, "Member 'FDirectionalLightParams::DisabledBrightness' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, DetailModeBitMask) == 0x0000F8, "Member 'FDirectionalLightParams::DetailModeBitMask' has a wrong offset!");

// ScriptStruct GraphicsExtensions.AdaptiveShadowMapParams
// 0x0018 (0x0018 - 0x0000)
struct FAdaptiveShadowMapParams final
{
public:
	int32                                         Levels;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreGeneratedLevels;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAutoRadius;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthMin;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthMax;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdaptiveShadowMapParams) == 0x000004, "Wrong alignment on FAdaptiveShadowMapParams");
static_assert(sizeof(FAdaptiveShadowMapParams) == 0x000018, "Wrong size on FAdaptiveShadowMapParams");
static_assert(offsetof(FAdaptiveShadowMapParams, Levels) == 0x000000, "Member 'FAdaptiveShadowMapParams::Levels' has a wrong offset!");
static_assert(offsetof(FAdaptiveShadowMapParams, PreGeneratedLevels) == 0x000004, "Member 'FAdaptiveShadowMapParams::PreGeneratedLevels' has a wrong offset!");
static_assert(offsetof(FAdaptiveShadowMapParams, bUseAutoRadius) == 0x000008, "Member 'FAdaptiveShadowMapParams::bUseAutoRadius' has a wrong offset!");
static_assert(offsetof(FAdaptiveShadowMapParams, Radius) == 0x00000C, "Member 'FAdaptiveShadowMapParams::Radius' has a wrong offset!");
static_assert(offsetof(FAdaptiveShadowMapParams, DepthMin) == 0x000010, "Member 'FAdaptiveShadowMapParams::DepthMin' has a wrong offset!");
static_assert(offsetof(FAdaptiveShadowMapParams, DepthMax) == 0x000014, "Member 'FAdaptiveShadowMapParams::DepthMax' has a wrong offset!");

// ScriptStruct GraphicsExtensions.SkylightParams
// 0x00B0 (0x00B0 - 0x0000)
struct FSkylightParams final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           Cubemap;                                           // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceCubemapAngle;                                // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyDistanceThreshold;                              // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsWorld;                                     // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastShadows;                                       // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricScatteringIntensity;                     // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionContribution;                      // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowerHemisphereIsBlack;                           // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LowerHemisphereColor;                              // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectTranslucentLighting;                        // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransmission;                                     // 0x00A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x00A2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenInGame;                                     // 0x00A3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShowIlluminanceMeter : 1;                         // 0x00A4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DetailModeBitMask;                                 // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkylightParams) == 0x000010, "Wrong alignment on FSkylightParams");
static_assert(sizeof(FSkylightParams) == 0x0000B0, "Wrong size on FSkylightParams");
static_assert(offsetof(FSkylightParams, Transform) == 0x000000, "Member 'FSkylightParams::Transform' has a wrong offset!");
static_assert(offsetof(FSkylightParams, Intensity) == 0x000060, "Member 'FSkylightParams::Intensity' has a wrong offset!");
static_assert(offsetof(FSkylightParams, Color) == 0x000064, "Member 'FSkylightParams::Color' has a wrong offset!");
static_assert(offsetof(FSkylightParams, Cubemap) == 0x000070, "Member 'FSkylightParams::Cubemap' has a wrong offset!");
static_assert(offsetof(FSkylightParams, SourceCubemapAngle) == 0x000078, "Member 'FSkylightParams::SourceCubemapAngle' has a wrong offset!");
static_assert(offsetof(FSkylightParams, SkyDistanceThreshold) == 0x00007C, "Member 'FSkylightParams::SkyDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FSkylightParams, bAffectsWorld) == 0x000080, "Member 'FSkylightParams::bAffectsWorld' has a wrong offset!");
static_assert(offsetof(FSkylightParams, CastShadows) == 0x000081, "Member 'FSkylightParams::CastShadows' has a wrong offset!");
static_assert(offsetof(FSkylightParams, VolumetricScatteringIntensity) == 0x000084, "Member 'FSkylightParams::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSkylightParams, AmbientOcclusionContribution) == 0x000088, "Member 'FSkylightParams::AmbientOcclusionContribution' has a wrong offset!");
static_assert(offsetof(FSkylightParams, bLowerHemisphereIsBlack) == 0x00008C, "Member 'FSkylightParams::bLowerHemisphereIsBlack' has a wrong offset!");
static_assert(offsetof(FSkylightParams, LowerHemisphereColor) == 0x000090, "Member 'FSkylightParams::LowerHemisphereColor' has a wrong offset!");
static_assert(offsetof(FSkylightParams, bAffectTranslucentLighting) == 0x0000A0, "Member 'FSkylightParams::bAffectTranslucentLighting' has a wrong offset!");
static_assert(offsetof(FSkylightParams, bTransmission) == 0x0000A1, "Member 'FSkylightParams::bTransmission' has a wrong offset!");
static_assert(offsetof(FSkylightParams, bIsVisible) == 0x0000A2, "Member 'FSkylightParams::bIsVisible' has a wrong offset!");
static_assert(offsetof(FSkylightParams, bHiddenInGame) == 0x0000A3, "Member 'FSkylightParams::bHiddenInGame' has a wrong offset!");
static_assert(offsetof(FSkylightParams, DetailModeBitMask) == 0x0000A8, "Member 'FSkylightParams::DetailModeBitMask' has a wrong offset!");

// ScriptStruct GraphicsExtensions.SkyDomeParams
// 0x0030 (0x0030 - 0x0000)
struct FSkyDomeParams final
{
public:
	struct FRotator3f                             Orientation;                                       // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            sphereDome;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         scaling;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenInGame;                                     // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkyDomeParams) == 0x000008, "Wrong alignment on FSkyDomeParams");
static_assert(sizeof(FSkyDomeParams) == 0x000030, "Wrong size on FSkyDomeParams");
static_assert(offsetof(FSkyDomeParams, Orientation) == 0x000000, "Member 'FSkyDomeParams::Orientation' has a wrong offset!");
static_assert(offsetof(FSkyDomeParams, sphereDome) == 0x000010, "Member 'FSkyDomeParams::sphereDome' has a wrong offset!");
static_assert(offsetof(FSkyDomeParams, scaling) == 0x000018, "Member 'FSkyDomeParams::scaling' has a wrong offset!");
static_assert(offsetof(FSkyDomeParams, Material) == 0x000020, "Member 'FSkyDomeParams::Material' has a wrong offset!");
static_assert(offsetof(FSkyDomeParams, bIsVisible) == 0x000028, "Member 'FSkyDomeParams::bIsVisible' has a wrong offset!");
static_assert(offsetof(FSkyDomeParams, bHiddenInGame) == 0x000029, "Member 'FSkyDomeParams::bHiddenInGame' has a wrong offset!");

// ScriptStruct GraphicsExtensions.FogDirectionalInscatering
// 0x0018 (0x0018 - 0x0000)
struct FFogDirectionalInscatering final
{
public:
	float                                         DirectionalInscatteringExponent;                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringLuminance;                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFogDirectionalInscatering) == 0x000004, "Wrong alignment on FFogDirectionalInscatering");
static_assert(sizeof(FFogDirectionalInscatering) == 0x000018, "Wrong size on FFogDirectionalInscatering");
static_assert(offsetof(FFogDirectionalInscatering, DirectionalInscatteringExponent) == 0x000000, "Member 'FFogDirectionalInscatering::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FFogDirectionalInscatering, DirectionalInscatteringStartDistance) == 0x000004, "Member 'FFogDirectionalInscatering::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FFogDirectionalInscatering, DirectionalInscatteringLuminance) == 0x000008, "Member 'FFogDirectionalInscatering::DirectionalInscatteringLuminance' has a wrong offset!");

// ScriptStruct GraphicsExtensions.FogVolumetric
// 0x002C (0x002C - 0x0000)
struct FFogVolumetric final
{
public:
	bool                                          bEnableVolumetricFog;                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricFogScatteringDistribution;               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VolumetricFogAlbedo;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogEmissive;                             // 0x000C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogDistance;                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogStartDistance;                        // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogNearFadeInDistance;                   // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFogVolumetric) == 0x000004, "Wrong alignment on FFogVolumetric");
static_assert(sizeof(FFogVolumetric) == 0x00002C, "Wrong size on FFogVolumetric");
static_assert(offsetof(FFogVolumetric, bEnableVolumetricFog) == 0x000000, "Member 'FFogVolumetric::bEnableVolumetricFog' has a wrong offset!");
static_assert(offsetof(FFogVolumetric, VolumetricFogScatteringDistribution) == 0x000004, "Member 'FFogVolumetric::VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FFogVolumetric, VolumetricFogAlbedo) == 0x000008, "Member 'FFogVolumetric::VolumetricFogAlbedo' has a wrong offset!");
static_assert(offsetof(FFogVolumetric, VolumetricFogEmissive) == 0x00000C, "Member 'FFogVolumetric::VolumetricFogEmissive' has a wrong offset!");
static_assert(offsetof(FFogVolumetric, VolumetricFogExtinctionScale) == 0x00001C, "Member 'FFogVolumetric::VolumetricFogExtinctionScale' has a wrong offset!");
static_assert(offsetof(FFogVolumetric, VolumetricFogDistance) == 0x000020, "Member 'FFogVolumetric::VolumetricFogDistance' has a wrong offset!");
static_assert(offsetof(FFogVolumetric, VolumetricFogStartDistance) == 0x000024, "Member 'FFogVolumetric::VolumetricFogStartDistance' has a wrong offset!");
static_assert(offsetof(FFogVolumetric, VolumetricFogNearFadeInDistance) == 0x000028, "Member 'FFogVolumetric::VolumetricFogNearFadeInDistance' has a wrong offset!");

// ScriptStruct GraphicsExtensions.FogParams
// 0x00B0 (0x00B0 - 0x0000)
struct FFogParams final
{
public:
	struct FVector3f                              Position;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDensity;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFallOff;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogCutoffDistance;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogGradientZOffset;                                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceUntilFlatFog;                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHeightFogGradientEntry>        FogGradient;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	class UTextureCube*                           InscatteringColorCubemap;                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData              SecondFogData;                                     // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 InscatteringColor;                                 // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFogDirectionalInscatering             FogInscattering;                                   // 0x0054(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFogVolumetric                         FogVolumetric;                                     // 0x006C(0x002C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideLightColorsWithFogInscatteringColors;     // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDensityAndDistanceParametersWithDensityCurve; // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DensityCurve;                                      // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenInGame;                                     // 0x00A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DetailModeBitMask;                                 // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFogParams) == 0x000008, "Wrong alignment on FFogParams");
static_assert(sizeof(FFogParams) == 0x0000B0, "Wrong size on FFogParams");
static_assert(offsetof(FFogParams, Position) == 0x000000, "Member 'FFogParams::Position' has a wrong offset!");
static_assert(offsetof(FFogParams, FogDensity) == 0x00000C, "Member 'FFogParams::FogDensity' has a wrong offset!");
static_assert(offsetof(FFogParams, HeightFallOff) == 0x000010, "Member 'FFogParams::HeightFallOff' has a wrong offset!");
static_assert(offsetof(FFogParams, StartDistance) == 0x000014, "Member 'FFogParams::StartDistance' has a wrong offset!");
static_assert(offsetof(FFogParams, FogCutoffDistance) == 0x000018, "Member 'FFogParams::FogCutoffDistance' has a wrong offset!");
static_assert(offsetof(FFogParams, FogGradientZOffset) == 0x00001C, "Member 'FFogParams::FogGradientZOffset' has a wrong offset!");
static_assert(offsetof(FFogParams, DistanceUntilFlatFog) == 0x000020, "Member 'FFogParams::DistanceUntilFlatFog' has a wrong offset!");
static_assert(offsetof(FFogParams, FogGradient) == 0x000028, "Member 'FFogParams::FogGradient' has a wrong offset!");
static_assert(offsetof(FFogParams, InscatteringColorCubemap) == 0x000038, "Member 'FFogParams::InscatteringColorCubemap' has a wrong offset!");
static_assert(offsetof(FFogParams, SecondFogData) == 0x000040, "Member 'FFogParams::SecondFogData' has a wrong offset!");
static_assert(offsetof(FFogParams, InscatteringColor) == 0x00004C, "Member 'FFogParams::InscatteringColor' has a wrong offset!");
static_assert(offsetof(FFogParams, FogMaxOpacity) == 0x000050, "Member 'FFogParams::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FFogParams, FogInscattering) == 0x000054, "Member 'FFogParams::FogInscattering' has a wrong offset!");
static_assert(offsetof(FFogParams, FogVolumetric) == 0x00006C, "Member 'FFogParams::FogVolumetric' has a wrong offset!");
static_assert(offsetof(FFogParams, bOverrideLightColorsWithFogInscatteringColors) == 0x000098, "Member 'FFogParams::bOverrideLightColorsWithFogInscatteringColors' has a wrong offset!");
static_assert(offsetof(FFogParams, bOverrideDensityAndDistanceParametersWithDensityCurve) == 0x000099, "Member 'FFogParams::bOverrideDensityAndDistanceParametersWithDensityCurve' has a wrong offset!");
static_assert(offsetof(FFogParams, DensityCurve) == 0x0000A0, "Member 'FFogParams::DensityCurve' has a wrong offset!");
static_assert(offsetof(FFogParams, bIsVisible) == 0x0000A8, "Member 'FFogParams::bIsVisible' has a wrong offset!");
static_assert(offsetof(FFogParams, bHiddenInGame) == 0x0000A9, "Member 'FFogParams::bHiddenInGame' has a wrong offset!");
static_assert(offsetof(FFogParams, DetailModeBitMask) == 0x0000AC, "Member 'FFogParams::DetailModeBitMask' has a wrong offset!");

// ScriptStruct GraphicsExtensions.DBDCullDistanceVolumeParams
// 0x0018 (0x0018 - 0x0000)
struct FDBDCullDistanceVolumeParams final
{
public:
	TArray<struct FDBDCullDistanceSizePair>       CullDistances;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DetailModeBitMask;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDBDCullDistanceVolumeParams) == 0x000008, "Wrong alignment on FDBDCullDistanceVolumeParams");
static_assert(sizeof(FDBDCullDistanceVolumeParams) == 0x000018, "Wrong size on FDBDCullDistanceVolumeParams");
static_assert(offsetof(FDBDCullDistanceVolumeParams, CullDistances) == 0x000000, "Member 'FDBDCullDistanceVolumeParams::CullDistances' has a wrong offset!");
static_assert(offsetof(FDBDCullDistanceVolumeParams, DetailModeBitMask) == 0x000010, "Member 'FDBDCullDistanceVolumeParams::DetailModeBitMask' has a wrong offset!");

// ScriptStruct GraphicsExtensions.WeatherParams
// 0x0020 (0x0020 - 0x0000)
struct FWeatherParams final
{
public:
	float                                         WindStrength;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindSpeed;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              WindDirection;                                     // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindGustsIntensity;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindGustsSpeed;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherIntensity;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeatherParams) == 0x000004, "Wrong alignment on FWeatherParams");
static_assert(sizeof(FWeatherParams) == 0x000020, "Wrong size on FWeatherParams");
static_assert(offsetof(FWeatherParams, WindStrength) == 0x000000, "Member 'FWeatherParams::WindStrength' has a wrong offset!");
static_assert(offsetof(FWeatherParams, WindSpeed) == 0x000004, "Member 'FWeatherParams::WindSpeed' has a wrong offset!");
static_assert(offsetof(FWeatherParams, WindDirection) == 0x000008, "Member 'FWeatherParams::WindDirection' has a wrong offset!");
static_assert(offsetof(FWeatherParams, WindGustsIntensity) == 0x000014, "Member 'FWeatherParams::WindGustsIntensity' has a wrong offset!");
static_assert(offsetof(FWeatherParams, WindGustsSpeed) == 0x000018, "Member 'FWeatherParams::WindGustsSpeed' has a wrong offset!");
static_assert(offsetof(FWeatherParams, WeatherIntensity) == 0x00001C, "Member 'FWeatherParams::WeatherIntensity' has a wrong offset!");

// ScriptStruct GraphicsExtensions.FXParams
// 0x0008 (0x0008 - 0x0000)
struct FFXParams final
{
public:
	struct FColor                                 MistColor;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MistColorIntensity;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFXParams) == 0x000004, "Wrong alignment on FFXParams");
static_assert(sizeof(FFXParams) == 0x000008, "Wrong size on FFXParams");
static_assert(offsetof(FFXParams, MistColor) == 0x000000, "Member 'FFXParams::MistColor' has a wrong offset!");
static_assert(offsetof(FFXParams, MistColorIntensity) == 0x000004, "Member 'FFXParams::MistColorIntensity' has a wrong offset!");

// ScriptStruct GraphicsExtensions.SSRParams
// 0x0010 (0x0010 - 0x0000)
struct FSSRParams final
{
public:
	struct FBPCompatiblePerPlatformFloat          Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBPCompatiblePerPlatformFloat          Quality;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxRoughness;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBPCompatiblePerPlatformFloat          TranslucentIntensity;                              // 0x000C(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSRParams) == 0x000004, "Wrong alignment on FSSRParams");
static_assert(sizeof(FSSRParams) == 0x000010, "Wrong size on FSSRParams");
static_assert(offsetof(FSSRParams, Intensity) == 0x000000, "Member 'FSSRParams::Intensity' has a wrong offset!");
static_assert(offsetof(FSSRParams, Quality) == 0x000004, "Member 'FSSRParams::Quality' has a wrong offset!");
static_assert(offsetof(FSSRParams, MaxRoughness) == 0x000008, "Member 'FSSRParams::MaxRoughness' has a wrong offset!");
static_assert(offsetof(FSSRParams, TranslucentIntensity) == 0x00000C, "Member 'FSSRParams::TranslucentIntensity' has a wrong offset!");

// ScriptStruct GraphicsExtensions.AmbianceManagerParams
// 0x0970 (0x0970 - 0x0000)
struct FAmbianceManagerParams final
{
public:
	struct FPostProcessParams                     _postProcessParams;                                // 0x0000(0x0650)(Edit, NativeAccessSpecifierPrivate)
	struct FDirectionalLightParams                _directionalLightParams;                           // 0x0650(0x0100)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSkylightParams                        _skyLightParams;                                   // 0x0750(0x00B0)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSkyDomeParams                         _skyDomeParams;                                    // 0x0800(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FFogParams                             _fogParams;                                        // 0x0830(0x00B0)(Edit, NativeAccessSpecifierPrivate)
	struct FAdaptiveShadowMapParams               _asmParams;                                        // 0x08E0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDBDCullDistanceVolumeParams           _cullVolumeParams;                                 // 0x08F8(0x0018)(Edit, NativeAccessSpecifierPrivate)
	struct FWeatherParams                         _weatherParams;                                    // 0x0910(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FFXParams                              _fxParams;                                         // 0x0930(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSSRParams                             _ssrParams;                                        // 0x0938(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         _transitionDuration;                               // 0x0948(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_94C[0x4];                                      // 0x094C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _transitionCurve;                                  // 0x0950(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsPostProcessOverrided;                          // 0x0958(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsDirectionalLightOverrided;                     // 0x0959(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsSkyLightOverrided;                             // 0x095A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsSkyDomeOverrided;                              // 0x095B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsFogOverrided;                                  // 0x095C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsASMOverrided;                                  // 0x095D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsCullVolumeOverrided;                           // 0x095E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsWeatherOverrided;                              // 0x095F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsFXOverrided;                                   // 0x0960(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsSSROverrided;                                  // 0x0961(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_962[0xE];                                      // 0x0962(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAmbianceManagerParams) == 0x000010, "Wrong alignment on FAmbianceManagerParams");
static_assert(sizeof(FAmbianceManagerParams) == 0x000970, "Wrong size on FAmbianceManagerParams");
static_assert(offsetof(FAmbianceManagerParams, _postProcessParams) == 0x000000, "Member 'FAmbianceManagerParams::_postProcessParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _directionalLightParams) == 0x000650, "Member 'FAmbianceManagerParams::_directionalLightParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _skyLightParams) == 0x000750, "Member 'FAmbianceManagerParams::_skyLightParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _skyDomeParams) == 0x000800, "Member 'FAmbianceManagerParams::_skyDomeParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _fogParams) == 0x000830, "Member 'FAmbianceManagerParams::_fogParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _asmParams) == 0x0008E0, "Member 'FAmbianceManagerParams::_asmParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _cullVolumeParams) == 0x0008F8, "Member 'FAmbianceManagerParams::_cullVolumeParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _weatherParams) == 0x000910, "Member 'FAmbianceManagerParams::_weatherParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _fxParams) == 0x000930, "Member 'FAmbianceManagerParams::_fxParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _ssrParams) == 0x000938, "Member 'FAmbianceManagerParams::_ssrParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _transitionDuration) == 0x000948, "Member 'FAmbianceManagerParams::_transitionDuration' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _transitionCurve) == 0x000950, "Member 'FAmbianceManagerParams::_transitionCurve' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsPostProcessOverrided) == 0x000958, "Member 'FAmbianceManagerParams::_bIsPostProcessOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsDirectionalLightOverrided) == 0x000959, "Member 'FAmbianceManagerParams::_bIsDirectionalLightOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsSkyLightOverrided) == 0x00095A, "Member 'FAmbianceManagerParams::_bIsSkyLightOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsSkyDomeOverrided) == 0x00095B, "Member 'FAmbianceManagerParams::_bIsSkyDomeOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsFogOverrided) == 0x00095C, "Member 'FAmbianceManagerParams::_bIsFogOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsASMOverrided) == 0x00095D, "Member 'FAmbianceManagerParams::_bIsASMOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsCullVolumeOverrided) == 0x00095E, "Member 'FAmbianceManagerParams::_bIsCullVolumeOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsWeatherOverrided) == 0x00095F, "Member 'FAmbianceManagerParams::_bIsWeatherOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsFXOverrided) == 0x000960, "Member 'FAmbianceManagerParams::_bIsFXOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsSSROverrided) == 0x000961, "Member 'FAmbianceManagerParams::_bIsSSROverrided' has a wrong offset!");

// ScriptStruct GraphicsExtensions.GMAmbianceTagPriority
// 0x0010 (0x0018 - 0x0008)
struct FGMAmbianceTagPriority final : public FTableRowBase
{
public:
	struct FGameplayTag                           AmbianceType;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGMAmbianceTagPriority) == 0x000008, "Wrong alignment on FGMAmbianceTagPriority");
static_assert(sizeof(FGMAmbianceTagPriority) == 0x000018, "Wrong size on FGMAmbianceTagPriority");
static_assert(offsetof(FGMAmbianceTagPriority, AmbianceType) == 0x000008, "Member 'FGMAmbianceTagPriority::AmbianceType' has a wrong offset!");

}

