#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewsCore

#include "Basic.hpp"

#include "DBDUIViewsCore_classes.hpp"
#include "DBDUIViewsCore_parameters.hpp"


namespace SDK
{

// Function DBDUIViewsCore.CoreBaseUserWidget.DeregisterFromInput
// (Native, Public, BlueprintCallable)

void UCoreBaseUserWidget::DeregisterFromInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "DeregisterFromInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.OnControlModeChangedBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// EControlMode                            controlMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseUserWidget::OnControlModeChangedBP(EControlMode controlMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "OnControlModeChangedBP");

	Params::CoreBaseUserWidget_OnControlModeChangedBP Parms{};

	Parms.controlMode = controlMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreBaseUserWidget.PlayAnimationByName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             animName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   starttime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   loopcount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUMGSequencePlayMode                    PlayMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlaybackSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreBaseUserWidget::PlayAnimationByName(class FName animName, float starttime, int32 loopcount, EUMGSequencePlayMode PlayMode, float PlaybackSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "PlayAnimationByName");

	Params::CoreBaseUserWidget_PlayAnimationByName Parms{};

	Parms.animName = animName;
	Parms.starttime = starttime;
	Parms.loopcount = loopcount;
	Parms.PlayMode = PlayMode;
	Parms.PlaybackSpeed = PlaybackSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.PlayAnimationByNameWithFinishedDelegate
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             animName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       animationFinishedDelegate                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   starttime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   loopcount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUMGSequencePlayMode                    PlayMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlaybackSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UWidgetAnimation*           ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UWidgetAnimation* UCoreBaseUserWidget::PlayAnimationByNameWithFinishedDelegate(class FName animName, TDelegate<void()> animationFinishedDelegate, float starttime, int32 loopcount, EUMGSequencePlayMode PlayMode, float PlaybackSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "PlayAnimationByNameWithFinishedDelegate");

	Params::CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate Parms{};

	Parms.animName = animName;
	Parms.animationFinishedDelegate = animationFinishedDelegate;
	Parms.starttime = starttime;
	Parms.loopcount = loopcount;
	Parms.PlayMode = PlayMode;
	Parms.PlaybackSpeed = PlaybackSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.RegisterForInput
// (Native, Public, BlueprintCallable)

void UCoreBaseUserWidget::RegisterForInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "RegisterForInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.StopAnimationByName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             animName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreBaseUserWidget::StopAnimationByName(class FName animName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "StopAnimationByName");

	Params::CoreBaseUserWidget_StopAnimationByName Parms{};

	Parms.animName = animName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.UpdateScale
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseUserWidget::UpdateScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "UpdateScale");

	Params::CoreBaseUserWidget_UpdateScale Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.GetAnimationByName
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             animName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetAnimation* UCoreBaseUserWidget::GetAnimationByName(class FName animName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "GetAnimationByName");

	Params::CoreBaseUserWidget_GetAnimationByName Parms{};

	Parms.animName = animName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreOnboardingButtonHolderWidget.GetStepId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCoreOnboardingButtonHolderWidget::GetStepId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingButtonHolderWidget", "GetStepId");

	Params::CoreOnboardingButtonHolderWidget_GetStepId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreOnboardingButtonHolderWidget.OnButtonSetDataAnimationCompleteDelegate
// (Final, Native, Protected)

void UCoreOnboardingButtonHolderWidget::OnButtonSetDataAnimationCompleteDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingButtonHolderWidget", "OnButtonSetDataAnimationCompleteDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingButtonHolderWidget.OnClickedTutorialButton
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                clickedTutorialButton                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingButtonHolderWidget::OnClickedTutorialButton(class UCoreButtonWidget* clickedTutorialButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingButtonHolderWidget", "OnClickedTutorialButton");

	Params::CoreOnboardingButtonHolderWidget_OnClickedTutorialButton Parms{};

	Parms.clickedTutorialButton = clickedTutorialButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.FadeInAnimation_Implementation
// (Native, Public, BlueprintCallable)
// Parameters:
// const float                             FadeInDuration                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Delay                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::FadeInAnimation_Implementation(const float FadeInDuration, const float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "FadeInAnimation_Implementation");

	Params::CoreBinkVideoPlayerWidget_FadeInAnimation_Implementation Parms{};

	Parms.FadeInDuration = FadeInDuration;
	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.FadeOutAnimation_Implementation
// (Native, Public, BlueprintCallable)
// Parameters:
// const float                             FadeOutDuration                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Delay                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::FadeOutAnimation_Implementation(const float FadeOutDuration, const float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "FadeOutAnimation_Implementation");

	Params::CoreBinkVideoPlayerWidget_FadeOutAnimation_Implementation Parms{};

	Parms.FadeOutDuration = FadeOutDuration;
	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnEndReached
// (Final, Native, Public)

void UCoreBinkVideoPlayerWidget::OnEndReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "OnEndReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnFadeInAnimationComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::OnFadeInAnimationComplete(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "OnFadeInAnimationComplete");

	Params::CoreBinkVideoPlayerWidget_OnFadeInAnimationComplete Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnFadeOutAnimationComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::OnFadeOutAnimationComplete(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "OnFadeOutAnimationComplete");

	Params::CoreBinkVideoPlayerWidget_OnFadeOutAnimationComplete Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnMediaClosed
// (Final, Native, Public)

void UCoreBinkVideoPlayerWidget::OnMediaClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "OnMediaClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnMediaOpened
// (Final, Native, Public)
// Parameters:
// const class FString&                    OpenedUrl                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::OnMediaOpened(const class FString& OpenedUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "OnMediaOpened");

	Params::CoreBinkVideoPlayerWidget_OnMediaOpened Parms{};

	Parms.OpenedUrl = std::move(OpenedUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnSkipInputSwitcherTriggered
// (Final, Native, Private)

void UCoreBinkVideoPlayerWidget::OnSkipInputSwitcherTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "OnSkipInputSwitcherTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnSubtitlesChanged
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<class FString>&            subtitlesText                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::OnSubtitlesChanged(const TArray<class FString>& subtitlesText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "OnSubtitlesChanged");

	Params::CoreBinkVideoPlayerWidget_OnSubtitlesChanged Parms{};

	Parms.subtitlesText = std::move(subtitlesText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.SetSize_Implementation
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::SetSize_Implementation(const struct FVector2D& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "SetSize_Implementation");

	Params::CoreBinkVideoPlayerWidget_SetSize_Implementation Parms{};

	Parms.Size = std::move(Size);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBasePopupWidget.Hide
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreBasePopupWidget::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBasePopupWidget", "Hide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreBasePopupWidget.Show
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBasePopupViewData*               Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBasePopupWidget::Show(class UBasePopupViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBasePopupWidget", "Show");

	Params::CoreBasePopupWidget_Show Parms{};

	Parms.Data = Data;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreGenericPopupWidget.OnAlternativeAction
// (Native, Protected)

void UCoreGenericPopupWidget::OnAlternativeAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericPopupWidget", "OnAlternativeAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericPopupWidget.OnProgressionAction
// (Native, Protected)

void UCoreGenericPopupWidget::OnProgressionAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericPopupWidget", "OnProgressionAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericPopupWidget.OnRegressionAction
// (Native, Protected)

void UCoreGenericPopupWidget::OnRegressionAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericPopupWidget", "OnRegressionAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.TooltipWidget.OnHideTooltip
// (Native, Public)

void UTooltipWidget::OnHideTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TooltipWidget", "OnHideTooltip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.TooltipWidget.OnShowTooltip
// (Native, Public)

void UTooltipWidget::OnShowTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TooltipWidget", "OnShowTooltip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.TooltipWidget.GetPriority
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETooltipPriority                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETooltipPriority UTooltipWidget::GetPriority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TooltipWidget", "GetPriority");

	Params::TooltipWidget_GetPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.ArchiveCompendiumTooltipWidget.Reset
// (Final, Native, Public)

void UArchiveCompendiumTooltipWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveCompendiumTooltipWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ArchiveCompendiumTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FCompendiumButtonData&     tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UArchiveCompendiumTooltipWidget::SetTooltipData(const struct FCompendiumButtonData& tooltipViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveCompendiumTooltipWidget", "SetTooltipData");

	Params::ArchiveCompendiumTooltipWidget_SetTooltipData Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ArchiveNodeTooltipWidget.Reset
// (Final, Native, Public)

void UArchiveNodeTooltipWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveNodeTooltipWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ArchiveNodeTooltipWidget.SetNodeType
// (Event, Public, BlueprintEvent)
// Parameters:
// EArchiveNodeType                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveNodeTooltipWidget::SetNodeType(EArchiveNodeType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveNodeTooltipWidget", "SetNodeType");

	Params::ArchiveNodeTooltipWidget_SetNodeType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ArchiveNodeTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FArchiveNodeViewData&      NodeViewData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UArchiveNodeTooltipWidget::SetTooltipData(const struct FArchiveNodeViewData& NodeViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveNodeTooltipWidget", "SetTooltipData");

	Params::ArchiveNodeTooltipWidget_SetTooltipData Parms{};

	Parms.NodeViewData = std::move(NodeViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ArchivePassTooltipWidget.SetTooltipData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchivePassTooltipViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UArchivePassTooltipWidget::SetTooltipData(const struct FArchivePassTooltipViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchivePassTooltipWidget", "SetTooltipData");

	Params::ArchivePassTooltipWidget_SetTooltipData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBox.ClearAspectRatio
// (Final, Native, Public, BlueprintCallable)

void UAspectRatioBox::ClearAspectRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBox", "ClearAspectRatio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBox.SetAspectRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   inAspectRatio                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAspectRatioBox::SetAspectRatio(float inAspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBox", "SetAspectRatio");

	Params::AspectRatioBox_SetAspectRatio Parms{};

	Parms.inAspectRatio = inAspectRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBoxSlot.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    inHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAspectRatioBoxSlot::SetHorizontalAlignment(EHorizontalAlignment inHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBoxSlot", "SetHorizontalAlignment");

	Params::AspectRatioBoxSlot_SetHorizontalAlignment Parms{};

	Parms.inHorizontalAlignment = inHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBoxSlot.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   InPadding                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UAspectRatioBoxSlot::SetPadding(const struct FMargin& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBoxSlot", "SetPadding");

	Params::AspectRatioBoxSlot_SetPadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBoxSlot.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      inVerticalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAspectRatioBoxSlot::SetVerticalAlignment(EVerticalAlignment inVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBoxSlot", "SetVerticalAlignment");

	Params::AspectRatioBoxSlot_SetVerticalAlignment Parms{};

	Parms.inVerticalAlignment = inVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AudioEventWrapper.PostAudioEvent
// (Final, Native, Public, BlueprintCallable)

void UAudioEventWrapper::PostAudioEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AudioEventWrapper", "PostAudioEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.BaseFilterWidget.OnCheckBoxToggled
// (Native, Protected)

void UBaseFilterWidget::OnCheckBoxToggled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseFilterWidget", "OnCheckBoxToggled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.BaseFilterWidget.OnPlayerClick
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FPointerEvent&             PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBaseFilterWidget::OnPlayerClick(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseFilterWidget", "OnPlayerClick");

	Params::BaseFilterWidget_OnPlayerClick Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.BaseFilterWidget.OnWidgetVisibilityChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ESlateVisibility                        newVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseFilterWidget::OnWidgetVisibilityChanged(ESlateVisibility newVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseFilterWidget", "OnWidgetVisibilityChanged");

	Params::BaseFilterWidget_OnWidgetVisibilityChanged Parms{};

	Parms.newVisibility = newVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.BaseFilterWidget.ToggleWidgetVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBaseFilterWidget::ToggleWidgetVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseFilterWidget", "ToggleWidgetVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.BloodpointBonusLabelWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBloodpointBonus&          ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBloodpointBonusLabelWidget::SetData(const struct FBloodpointBonus& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BloodpointBonusLabelWidget", "SetData");

	Params::BloodpointBonusLabelWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.BloodpointBonusTooltip.SetTooltipData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBloodpointBonusTooltipViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBloodpointBonusTooltip::SetTooltipData(const struct FBloodpointBonusTooltipViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BloodpointBonusTooltip", "SetTooltipData");

	Params::BloodpointBonusTooltip_SetTooltipData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.BotLoadoutWidget.OnAcceptAction
// (Final, Native, Protected, BlueprintCallable)

void UBotLoadoutWidget::OnAcceptAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BotLoadoutWidget", "OnAcceptAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.BotLoadoutWidget.OnBackAction
// (Final, Native, Protected, BlueprintCallable)

void UBotLoadoutWidget::OnBackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BotLoadoutWidget", "OnBackAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.BotLoadoutWidget.OnDropDownListSelectedOptionChanged
// (Final, Native, Private)
// Parameters:
// const struct FTabWidgetData&            buttonData                                             (Parm, NativeAccessSpecifierPublic)

void UBotLoadoutWidget::OnDropDownListSelectedOptionChanged(const struct FTabWidgetData& buttonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BotLoadoutWidget", "OnDropDownListSelectedOptionChanged");

	Params::BotLoadoutWidget_OnDropDownListSelectedOptionChanged Parms{};

	Parms.buttonData = std::move(buttonData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.BotLoadoutWidget.OnDropdownSelected
// (Final, Native, Private)
// Parameters:
// ESlateVisibility                        InVisibility                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBotLoadoutWidget::OnDropdownSelected(ESlateVisibility InVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BotLoadoutWidget", "OnDropdownSelected");

	Params::BotLoadoutWidget_OnDropdownSelected Parms{};

	Parms.InVisibility = InVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.BotLoadoutWidget.OnPresetClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// const int32                             SelectedPresetId                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBotLoadoutWidget::OnPresetClicked(const int32 SelectedPresetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BotLoadoutWidget", "OnPresetClicked");

	Params::BotLoadoutWidget_OnPresetClicked Parms{};

	Parms.SelectedPresetId = SelectedPresetId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContentWidget.FadeInContent
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContentWidget::FadeInContent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContentWidget", "FadeInContent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContentWidget.FadeOutContent
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContentWidget::FadeOutContent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContentWidget", "FadeOutContent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContentWidget.ResetFade
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContentWidget::ResetFade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContentWidget", "ResetFade");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContentWidget.StopFadeInTweening
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   opacityValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContentWidget::StopFadeInTweening(float opacityValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContentWidget", "StopFadeInTweening");

	Params::CoreTabContentWidget_StopFadeInTweening Parms{};

	Parms.opacityValue = opacityValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuChallengeSetWidget.OnChallengeSetTabSelected
// (Final, Native, Public)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuChallengeSetWidget::OnChallengeSetTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuChallengeSetWidget", "OnChallengeSetTabSelected");

	Params::ChallengesMenuChallengeSetWidget_OnChallengeSetTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuChallengeSetWidget.RefreshMenuSkin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UChallengesMenuChallengeSetWidget::RefreshMenuSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuChallengeSetWidget", "RefreshMenuSkin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuChallengeSetWidget.GetSkinData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FChallengeSkinUIData       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FChallengeSkinUIData UChallengesMenuChallengeSetWidget::GetSkinData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuChallengeSetWidget", "GetSkinData");

	Params::ChallengesMenuChallengeSetWidget_GetSkinData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackTierItem.Clear
// (Event, Public, BlueprintEvent)

void UChallengesMenuRewardTrackTierItem::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackTierItem", "Clear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackTierItem.OnRewardClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRewardTrackTierItem::OnRewardClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackTierItem", "OnRewardClicked");

	Params::ChallengesMenuRewardTrackTierItem_OnRewardClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackTierItem.SetGenericData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FChallengeSetRewardTrackTierInfoViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UChallengesMenuRewardTrackTierItem::SetGenericData(const struct FChallengeSetRewardTrackTierInfoViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackTierItem", "SetGenericData");

	Params::ChallengesMenuRewardTrackTierItem_SetGenericData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackTierItem.SetLockedState
// (Event, Public, BlueprintEvent)
// Parameters:
// const bool                              IsLocked                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRewardTrackTierItem::SetLockedState(const bool IsLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackTierItem", "SetLockedState");

	Params::ChallengesMenuRewardTrackTierItem_SetLockedState Parms{};

	Parms.IsLocked = IsLocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackWidget.DisplayPage
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRewardTrackWidget::DisplayPage(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackWidget", "DisplayPage");

	Params::ChallengesMenuRewardTrackWidget_DisplayPage Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackWidget.OnNextButtonClicked
// (Final, Native, Private)

void UChallengesMenuRewardTrackWidget::OnNextButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackWidget", "OnNextButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackWidget.OnPreviousButtonClicked
// (Final, Native, Private)

void UChallengesMenuRewardTrackWidget::OnPreviousButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackWidget", "OnPreviousButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRewardTrackWidget.OnRewardItemClicked
// (Final, Native, Private)
// Parameters:
// int32                                   tier                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRewardTrackWidget::OnRewardItemClicked(int32 tier, class UCoreButtonWidget* Button, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackWidget", "OnRewardItemClicked");

	Params::ChallengesMenuRewardTrackWidget_OnRewardItemClicked Parms{};

	Parms.tier = tier;
	Parms.Button = Button;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnAlignmentChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// ETextJustify                            newAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnAlignmentChanged(ETextJustify newAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnAlignmentChanged");

	Params::CoreButtonWidget_OnAlignmentChanged Parms{};

	Parms.newAlignment = newAlignment;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnButtonVisibilityChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const EButtonWidgetVisibility           previousVisibility                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EButtonWidgetVisibility           newVisibility                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnButtonVisibilityChanged(const EButtonWidgetVisibility previousVisibility, const EButtonWidgetVisibility newVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnButtonVisibilityChanged");

	Params::CoreButtonWidget_OnButtonVisibilityChanged Parms{};

	Parms.previousVisibility = previousVisibility;
	Parms.newVisibility = newVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnChargingComplete
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnChargingComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnChargingComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnChargingTick
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnChargingTick(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnChargingTick");

	Params::CoreButtonWidget_OnChargingTick Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnClickableChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsClickable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnClickableChanged(bool IsClickable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnClickableChanged");

	Params::CoreButtonWidget_OnClickableChanged Parms{};

	Parms.IsClickable = IsClickable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnClicked
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnEnabledChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnEnabledChanged(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnEnabledChanged");

	Params::CoreButtonWidget_OnEnabledChanged Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnHovered
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalClicked
// (Native, Protected)

void UCoreButtonWidget::OnInternalClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalHovered
// (Native, Protected)

void UCoreButtonWidget::OnInternalHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalLongPressed
// (Native, Protected)

void UCoreButtonWidget::OnInternalLongPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalLongPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalPressed
// (Native, Protected)

void UCoreButtonWidget::OnInternalPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalReleased
// (Native, Protected)

void UCoreButtonWidget::OnInternalReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalUnhovered
// (Native, Protected)

void UCoreButtonWidget::OnInternalUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnLongPressed
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnLongPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnLongPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnPressed
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnReleased
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnUnhovered
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnUnhovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreButtonWidget.SetAdditionalIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        iconTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> iconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetAdditionalIcon");

	Params::CoreButtonWidget_SetAdditionalIcon Parms{};

	Parms.iconTexture = iconTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextJustify                            newAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetAlignment(ETextJustify newAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetAlignment");

	Params::CoreButtonWidget_SetAlignment Parms{};

	Parms.newAlignment = newAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetBackground
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMaterialInstance> backgroundMaterial                                     (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetBackground(TSoftObjectPtr<class UMaterialInstance> backgroundMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetBackground");

	Params::CoreButtonWidget_SetBackground Parms{};

	Parms.backgroundMaterial = backgroundMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetChargeable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isChargeable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      holdingAnimCurve                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetChargeable(bool isChargeable, class UCurveFloat* holdingAnimCurve, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetChargeable");

	Params::CoreButtonWidget_SetChargeable Parms{};

	Parms.isChargeable = isChargeable;
	Parms.holdingAnimCurve = holdingAnimCurve;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetClickable
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsClickable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetClickable(bool IsClickable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetClickable");

	Params::CoreButtonWidget_SetClickable Parms{};

	Parms.IsClickable = IsClickable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetEnabled");

	Params::CoreButtonWidget_SetEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetHoldable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isHoldable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetHoldable(bool isHoldable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetHoldable");

	Params::CoreButtonWidget_SetHoldable Parms{};

	Parms.isHoldable = isHoldable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetHoverable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isHoverable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetHoverable(bool isHoverable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetHoverable");

	Params::CoreButtonWidget_SetHoverable Parms{};

	Parms.isHoverable = isHoverable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetLabel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      label                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetLabel(const class FText& label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetLabel");

	Params::CoreButtonWidget_SetLabel Parms{};

	Parms.label = std::move(label);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetPressable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isPressable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetPressable(bool isPressable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetPressable");

	Params::CoreButtonWidget_SetPressable Parms{};

	Parms.isPressable = isPressable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetRepeatable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isRepeatable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      repetitionDelayCurve                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetRepeatable(bool isRepeatable, class UCurveFloat* repetitionDelayCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetRepeatable");

	Params::CoreButtonWidget_SetRepeatable Parms{};

	Parms.isRepeatable = isRepeatable;
	Parms.repetitionDelayCurve = repetitionDelayCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EButtonWidgetVisibility                 Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetVisible(EButtonWidgetVisibility Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetVisible");

	Params::CoreButtonWidget_SetVisible Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.UpdateLockedFeatureVisuals
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLockedFeature                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::UpdateLockedFeatureVisuals(bool IsLockedFeature)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "UpdateLockedFeatureVisuals");

	Params::CoreButtonWidget_UpdateLockedFeatureVisuals Parms{};

	Parms.IsLockedFeature = IsLockedFeature;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.GetHitzonePaintSpaceGeometry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGeometry                  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FGeometry UCoreButtonWidget::GetHitzonePaintSpaceGeometry() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "GetHitzonePaintSpaceGeometry");

	Params::CoreButtonWidget_GetHitzonePaintSpaceGeometry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonWidget.HasValidLockedFeatureData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonWidget::HasValidLockedFeatureData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "HasValidLockedFeatureData");

	Params::CoreButtonWidget_HasValidLockedFeatureData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonWidget.IsClickable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonWidget::IsClickable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "IsClickable");

	Params::CoreButtonWidget_IsClickable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonWidget.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonWidget::IsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "IsEnabled");

	Params::CoreButtonWidget_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonWidget.IsPressed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonWidget::IsPressed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "IsPressed");

	Params::CoreButtonWidget_IsPressed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.ChallengesMenuRiftButtonWidget.SetBackgroundVisuals
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isPremiumPass                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETierType                               tier                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRiftButtonWidget::SetBackgroundVisuals(bool isPremiumPass, ETierType tier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRiftButtonWidget", "SetBackgroundVisuals");

	Params::ChallengesMenuRiftButtonWidget_SetBackgroundVisuals Parms{};

	Parms.isPremiumPass = isPremiumPass;
	Parms.tier = tier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ChallengesMenuRiftButtonWidget.SetLockedVisuals
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRiftButtonWidget::SetLockedVisuals(bool IsLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRiftButtonWidget", "SetLockedVisuals");

	Params::ChallengesMenuRiftButtonWidget_SetLockedVisuals Parms{};

	Parms.IsLocked = IsLocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ChallengesMenuRiftButtonWidget.SetRiftPassTrackIcon
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isPremiumPass                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRiftButtonWidget::SetRiftPassTrackIcon(bool isPremiumPass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRiftButtonWidget", "SetRiftPassTrackIcon");

	Params::ChallengesMenuRiftButtonWidget_SetRiftPassTrackIcon Parms{};

	Parms.isPremiumPass = isPremiumPass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ChallengesMenuRiftButtonWidget.SetRiftProgressionColor
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETierType                               tier                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRiftButtonWidget::SetRiftProgressionColor(ETierType tier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRiftButtonWidget", "SetRiftProgressionColor");

	Params::ChallengesMenuRiftButtonWidget_SetRiftProgressionColor Parms{};

	Parms.tier = tier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ChallengesMenuRiftButtonWidget.SetRiftProgressionImage
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Percentage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRiftButtonWidget::SetRiftProgressionImage(float Percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRiftButtonWidget", "SetRiftProgressionImage");

	Params::ChallengesMenuRiftButtonWidget_SetRiftProgressionImage Parms{};

	Parms.Percentage = Percentage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.OnChallengeCardClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRitualsWidget::OnChallengeCardClicked(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRitualsWidget", "OnChallengeCardClicked");

	Params::ChallengesMenuRitualsWidget_OnChallengeCardClicked Parms{};

	Parms.targetButton = targetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.OnChallengeCardHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRitualsWidget::OnChallengeCardHovered(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRitualsWidget", "OnChallengeCardHovered");

	Params::ChallengesMenuRitualsWidget_OnChallengeCardHovered Parms{};

	Parms.targetButton = targetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.OnChallengeCardUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRitualsWidget::OnChallengeCardUnhovered(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRitualsWidget", "OnChallengeCardUnhovered");

	Params::ChallengesMenuRitualsWidget_OnChallengeCardUnhovered Parms{};

	Parms.targetButton = targetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.OnFiltersButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRitualsWidget::OnFiltersButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRitualsWidget", "OnFiltersButtonClicked");

	Params::ChallengesMenuRitualsWidget_OnFiltersButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.OnFollowChallengeInputSwitcherTriggered
// (Final, Native, Protected)

void UChallengesMenuRitualsWidget::OnFollowChallengeInputSwitcherTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRitualsWidget", "OnFollowChallengeInputSwitcherTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.OnSortingChanged
// (Final, Native, Protected)

void UChallengesMenuRitualsWidget::OnSortingChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRitualsWidget", "OnSortingChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.ScrollToSelectedItem
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const class FName&                      selectedItemId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengesMenuRitualsWidget::ScrollToSelectedItem(const class FName& selectedItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRitualsWidget", "ScrollToSelectedItem");

	Params::ChallengesMenuRitualsWidget_ScrollToSelectedItem Parms{};

	Parms.selectedItemId = selectedItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CharacterTooltipWidget.SetLevel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterTooltipWidget::SetLevel(int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterTooltipWidget", "SetLevel");

	Params::CharacterTooltipWidget_SetLevel Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CharacterTooltipWidget.SetLockDetails
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCharacterTooltipViewData& CharacterViewData                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCharacterTooltipWidget::SetLockDetails(const struct FCharacterTooltipViewData& CharacterViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterTooltipWidget", "SetLockDetails");

	Params::CharacterTooltipWidget_SetLockDetails Parms{};

	Parms.CharacterViewData = std::move(CharacterViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CharacterTooltipWidget.SetTooltipData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FCharacterTooltipViewData& CharacterViewData                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCharacterTooltipWidget::SetTooltipData(const struct FCharacterTooltipViewData& CharacterViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterTooltipWidget", "SetTooltipData");

	Params::CharacterTooltipWidget_SetTooltipData Parms{};

	Parms.CharacterViewData = std::move(CharacterViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CharacterTooltipWidget.SetTrialCharacterDetails
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCharacterTooltipViewData& CharacterViewData                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCharacterTooltipWidget::SetTrialCharacterDetails(const struct FCharacterTooltipViewData& CharacterViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterTooltipWidget", "SetTrialCharacterDetails");

	Params::CharacterTooltipWidget_SetTrialCharacterDetails Parms{};

	Parms.CharacterViewData = std::move(CharacterViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseHudWidget.PlayFocusAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreBaseHudWidget::PlayFocusAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseHudWidget", "PlayFocusAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseHudWidget.ShouldPlayFocusAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreBaseHudWidget::ShouldPlayFocusAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseHudWidget", "ShouldPlayFocusAnimation");

	Params::CoreBaseHudWidget_ShouldPlayFocusAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CompetenceContainerWidget.OnPerkRevealed
// (Final, Native, Private)

void UCompetenceContainerWidget::OnPerkRevealed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompetenceContainerWidget", "OnPerkRevealed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetActiveState
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutPartWidget::SetActiveState(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutPartWidget", "SetActiveState");

	Params::CoreBaseLoadoutPartWidget_SetActiveState Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutPartIcon
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        Icon                                                   (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutPartWidget::SetLoadoutPartIcon(TSoftObjectPtr<class UTexture2D> Icon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutPartWidget", "SetLoadoutPartIcon");

	Params::CoreBaseLoadoutPartWidget_SetLoadoutPartIcon Parms{};

	Parms.Icon = Icon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutPartRarity
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EItemRarity                             Rarity                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EItemSourceTag                          ItemSourceTags                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutPartWidget::SetLoadoutPartRarity(EItemRarity Rarity, EItemSourceTag ItemSourceTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutPartWidget", "SetLoadoutPartRarity");

	Params::CoreBaseLoadoutPartWidget_SetLoadoutPartRarity Parms{};

	Parms.Rarity = Rarity;
	Parms.ItemSourceTags = ItemSourceTags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutStackCount
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   StackCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutPartWidget::SetLoadoutStackCount(int32 StackCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutPartWidget", "SetLoadoutStackCount");

	Params::CoreBaseLoadoutPartWidget_SetLoadoutStackCount Parms{};

	Parms.StackCount = StackCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetStatusEffect
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStatusEffectType                       StatusEffectType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutPartWidget::SetStatusEffect(EStatusEffectType StatusEffectType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutPartWidget", "SetStatusEffect");

	Params::CoreBaseLoadoutPartWidget_SetStatusEffect Parms{};

	Parms.StatusEffectType = StatusEffectType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutTooltipWidget.Reset
// (Final, Native, Public)

void ULoadoutTooltipWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutTooltipWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutTooltipWidget.SetKillSwitchWarning
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// EDisabledItemOption                     disabledType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      DisabledMessage                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULoadoutTooltipWidget::SetKillSwitchWarning(EDisabledItemOption disabledType, const class FText& DisabledMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutTooltipWidget", "SetKillSwitchWarning");

	Params::LoadoutTooltipWidget_SetKillSwitchWarning Parms{};

	Parms.disabledType = disabledType;
	Parms.DisabledMessage = std::move(DisabledMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.LoadoutTooltipWidget.SetLoadoutTooltipLockedState
// (Event, Protected, BlueprintEvent)

void ULoadoutTooltipWidget::SetLoadoutTooltipLockedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutTooltipWidget", "SetLoadoutTooltipLockedState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.LoadoutTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLoadoutTooltipData&       tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULoadoutTooltipWidget::SetTooltipData(const struct FLoadoutTooltipData& tooltipViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutTooltipWidget", "SetTooltipData");

	Params::LoadoutTooltipWidget_SetTooltipData Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.AddElementsToSequence
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAlertsViewData&           AlertsViewData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::AddElementsToSequence(const struct FAlertsViewData& AlertsViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "AddElementsToSequence");

	Params::CoreAlertsWidget_AddElementsToSequence Parms{};

	Parms.AlertsViewData = std::move(AlertsViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.BaseRewardsSequenceCompleted
// (Final, Native, Public)

void UCoreAlertsWidget::BaseRewardsSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "BaseRewardsSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.ChallengesCompletedSequenceCompleted
// (Final, Native, Private)

void UCoreAlertsWidget::ChallengesCompletedSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "ChallengesCompletedSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.ChallengesRewardsSequenceCompleted
// (Final, Native, Public)

void UCoreAlertsWidget::ChallengesRewardsSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "ChallengesRewardsSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.DisplayNextBaseRewardsSequence
// (Final, Native, Private)

void UCoreAlertsWidget::DisplayNextBaseRewardsSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "DisplayNextBaseRewardsSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.DisplayNextChallengesRewardsSequence
// (Final, Native, Private)

void UCoreAlertsWidget::DisplayNextChallengesRewardsSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "DisplayNextChallengesRewardsSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.DisplayNextCompletedChallengesSequence
// (Final, Native, Private)

void UCoreAlertsWidget::DisplayNextCompletedChallengesSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "DisplayNextCompletedChallengesSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.DisplayNextRiftRewardsSequence
// (Final, Native, Private)

void UCoreAlertsWidget::DisplayNextRiftRewardsSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "DisplayNextRiftRewardsSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.DisplayNextRiftTierUpSequence
// (Final, Native, Private)

void UCoreAlertsWidget::DisplayNextRiftTierUpSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "DisplayNextRiftTierUpSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.EndChallengesCompletedSequenceAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreAlertsWidget::EndChallengesCompletedSequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "EndChallengesCompletedSequenceAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.EndFadeOutRewardsSequenceAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreAlertsWidget::EndFadeOutRewardsSequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "EndFadeOutRewardsSequenceAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.EndInterSequenceAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreAlertsWidget::EndInterSequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "EndInterSequenceAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.EndRiftTierUpSequenceAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreAlertsWidget::EndRiftTierUpSequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "EndRiftTierUpSequenceAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.OnRewardHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::OnRewardHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "OnRewardHovered");

	Params::CoreAlertsWidget_OnRewardHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.OnRewardUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::OnRewardUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "OnRewardUnhovered");

	Params::CoreAlertsWidget_OnRewardUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.OnSkipTriggered
// (Final, Native, Public)

void UCoreAlertsWidget::OnSkipTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "OnSkipTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayDisappearRewardSound
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreAlertsWidget::PlayDisappearRewardSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayDisappearRewardSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayDisplayRewardSound
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRewardWrapperViewData&    RewardData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::PlayDisplayRewardSound(const struct FRewardWrapperViewData& RewardData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayDisplayRewardSound");

	Params::CoreAlertsWidget_PlayDisplayRewardSound Parms{};

	Parms.RewardData = std::move(RewardData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayEndSequenceAnimation
// (Event, Public, BlueprintEvent)

void UCoreAlertsWidget::PlayEndSequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayEndSequenceAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayFadeOutRewardsSequenceAnimation
// (Event, Public, BlueprintEvent)

void UCoreAlertsWidget::PlayFadeOutRewardsSequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayFadeOutRewardsSequenceAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayInterSequenceAnimation
// (Event, Public, BlueprintEvent)

void UCoreAlertsWidget::PlayInterSequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayInterSequenceAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayNextChallengesCompletedSequenceAnimation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FCompletedChallengeViewData>&challengesCompleted                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::PlayNextChallengesCompletedSequenceAnimation(const TArray<struct FCompletedChallengeViewData>& challengesCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayNextChallengesCompletedSequenceAnimation");

	Params::CoreAlertsWidget_PlayNextChallengesCompletedSequenceAnimation Parms{};

	Parms.challengesCompleted = std::move(challengesCompleted);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayNextRewardsSequenceAnimation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FRewardWrapperViewData>&Rewards                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    eventFrameLabel                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::PlayNextRewardsSequenceAnimation(const TArray<struct FRewardWrapperViewData>& Rewards, const class FString& eventFrameLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayNextRewardsSequenceAnimation");

	Params::CoreAlertsWidget_PlayNextRewardsSequenceAnimation Parms{};

	Parms.Rewards = std::move(Rewards);
	Parms.eventFrameLabel = std::move(eventFrameLabel);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayNextRiftTierUpSequenceAnimation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FRiftTierUpViewData>&riftTierUpData                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    eventFrameLabel                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      riftTierUpText                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::PlayNextRiftTierUpSequenceAnimation(const TArray<struct FRiftTierUpViewData>& riftTierUpData, const class FString& eventFrameLabel, const class FText& riftTierUpText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayNextRiftTierUpSequenceAnimation");

	Params::CoreAlertsWidget_PlayNextRiftTierUpSequenceAnimation Parms{};

	Parms.riftTierUpData = std::move(riftTierUpData);
	Parms.eventFrameLabel = std::move(eventFrameLabel);
	Parms.riftTierUpText = std::move(riftTierUpText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayProgressBarSoundEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             Duration                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::PlayProgressBarSoundEffect(const float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayProgressBarSoundEffect");

	Params::CoreAlertsWidget_PlayProgressBarSoundEffect Parms{};

	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlayRewardsDelaySequenceAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreAlertsWidget::PlayRewardsDelaySequenceAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlayRewardsDelaySequenceAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.PlaySoundEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    soundFx                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::PlaySoundEffect(class UAkAudioEvent* soundFx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "PlaySoundEffect");

	Params::CoreAlertsWidget_PlaySoundEffect Parms{};

	Parms.soundFx = soundFx;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreAlertsWidget.RegisterRewardEvents
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreRewardWidget*                rewardWidget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::RegisterRewardEvents(class UCoreRewardWidget* rewardWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "RegisterRewardEvents");

	Params::CoreAlertsWidget_RegisterRewardEvents Parms{};

	Parms.rewardWidget = rewardWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.RiftRewardsSequenceCompleted
// (Final, Native, Public)

void UCoreAlertsWidget::RiftRewardsSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "RiftRewardsSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.RiftTierUpSequenceCompleted
// (Final, Native, Private)

void UCoreAlertsWidget::RiftTierUpSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "RiftTierUpSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.SetCanSkipSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              canSkipSequence                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAlertsWidget::SetCanSkipSequence(const bool canSkipSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "SetCanSkipSequence");

	Params::CoreAlertsWidget_SetCanSkipSequence Parms{};

	Parms.canSkipSequence = canSkipSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.SkipSequence
// (Event, Public, BlueprintEvent)

void UCoreAlertsWidget::SkipSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "SkipSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreAlertsWidget.SkipSequenceCompleted
// (Final, Native, Public, BlueprintCallable)

void UCoreAlertsWidget::SkipSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "SkipSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.StartAlertRewards
// (Native, Public, BlueprintCallable)

void UCoreAlertsWidget::StartAlertRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "StartAlertRewards");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.EndEndSequenceAnimation
// (Final, Native, Public, BlueprintCallable, Const)

void UCoreAlertsWidget::EndEndSequenceAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "EndEndSequenceAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAlertsWidget.GetChallengeSetIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    eventFrameLabel                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> UCoreAlertsWidget::GetChallengeSetIcon(const class FString& eventFrameLabel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "GetChallengeSetIcon");

	Params::CoreAlertsWidget_GetChallengeSetIcon Parms{};

	Parms.eventFrameLabel = std::move(eventFrameLabel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreAlertsWidget.GetDisplayRewardSound
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FRewardWrapperViewData&    RewardData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UAkAudioEvent*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkAudioEvent* UCoreAlertsWidget::GetDisplayRewardSound(const struct FRewardWrapperViewData& RewardData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "GetDisplayRewardSound");

	Params::CoreAlertsWidget_GetDisplayRewardSound Parms{};

	Parms.RewardData = std::move(RewardData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreAlertsWidget.IsChallengeCompleted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FChallengeViewData&        challenge                                              (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreAlertsWidget::IsChallengeCompleted(const struct FChallengeViewData& challenge) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAlertsWidget", "IsChallengeCompleted");

	Params::CoreAlertsWidget_IsChallengeCompleted Parms{};

	Parms.challenge = std::move(challenge);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.FriendSearchPopupWidget.OnFriendClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFriendSearchPopupWidget::OnFriendClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendSearchPopupWidget", "OnFriendClicked");

	Params::FriendSearchPopupWidget_OnFriendClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.OnSelectedChanged
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    withAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSelectableButtonWidget::OnSelectedChanged(bool IsSelected, bool withAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "OnSelectedChanged");

	Params::CoreSelectableButtonWidget_OnSelectedChanged Parms{};

	Parms.IsSelected = IsSelected;
	Parms.withAnimation = withAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.SetSelectable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsSelectable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSelectableButtonWidget::SetSelectable(bool IsSelectable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "SetSelectable");

	Params::CoreSelectableButtonWidget_SetSelectable Parms{};

	Parms.IsSelectable = IsSelectable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.SetSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    performAction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSelectableButtonWidget::SetSelected(bool IsSelected, bool performAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "SetSelected");

	Params::CoreSelectableButtonWidget_SetSelected Parms{};

	Parms.IsSelected = IsSelected;
	Parms.performAction = performAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.UpdateBackgroundSkin
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInterface*               skinMaterial                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSelectableButtonWidget::UpdateBackgroundSkin(class UMaterialInterface* skinMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "UpdateBackgroundSkin");

	Params::CoreSelectableButtonWidget_UpdateBackgroundSkin Parms{};

	Parms.skinMaterial = skinMaterial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.IsSelectable
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreSelectableButtonWidget::IsSelectable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "IsSelectable");

	Params::CoreSelectableButtonWidget_IsSelectable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.IsSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreSelectableButtonWidget::IsSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "IsSelected");

	Params::CoreSelectableButtonWidget_IsSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.ClearData
// (Final, Native, Public)

void UCoreArchiveChallengeReminderSlotWidget::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.Init
// (Final, Native, Public)
// Parameters:
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::Init(EPlayerRole Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "Init");

	Params::CoreArchiveChallengeReminderSlotWidget_Init Parms{};

	Parms.Role = Role;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.InitVisualState
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreArchiveChallengeReminderSlotWidget::InitVisualState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "InitVisualState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchiveChallengeReminderViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::SetData(const struct FArchiveChallengeReminderViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "SetData");

	Params::CoreArchiveChallengeReminderSlotWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetQuestNodeHoverEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHovered_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::SetQuestNodeHoverEffect(bool IsHovered_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "SetQuestNodeHoverEffect");

	Params::CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect Parms{};

	Parms.IsHovered_0 = IsHovered_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetSlotSelectorState
// (Final, Native, Public)
// Parameters:
// bool                                    isSelectorOpen                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::SetSlotSelectorState(bool isSelectorOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "SetSlotSelectorState");

	Params::CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState Parms{};

	Parms.isSelectorOpen = isSelectorOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SwapChallenge
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchiveChallengeReminderViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::SwapChallenge(const struct FArchiveChallengeReminderViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "SwapChallenge");

	Params::CoreArchiveChallengeReminderSlotWidget_SwapChallenge Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateActiveState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PlayAnimation_0                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::UpdateActiveState(bool IsActive, bool PlayAnimation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "UpdateActiveState");

	Params::CoreArchiveChallengeReminderSlotWidget_UpdateActiveState Parms{};

	Parms.IsActive = IsActive;
	Parms.PlayAnimation_0 = PlayAnimation_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateProgressBar
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::UpdateProgressBar(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "UpdateProgressBar");

	Params::CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateVisualState
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchiveChallengeReminderViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::UpdateVisualState(const struct FArchiveChallengeReminderViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "UpdateVisualState");

	Params::CoreArchiveChallengeReminderSlotWidget_UpdateVisualState Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.GetTomeId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCoreArchiveCompendiumButtonWidget::GetTomeId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "GetTomeId");

	Params::CoreArchiveCompendiumButtonWidget_GetTomeId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.OnButtonHovered
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveCompendiumButtonWidget::OnButtonHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "OnButtonHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.OnButtonUnhovered
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveCompendiumButtonWidget::OnButtonUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "OnButtonUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.ResetVisuals
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreArchiveCompendiumButtonWidget::ResetVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "ResetVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetButtonData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCompendiumButtonData&     buttonData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumButtonWidget::SetButtonData(const struct FCompendiumButtonData& buttonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "SetButtonData");

	Params::CoreArchiveCompendiumButtonWidget_SetButtonData Parms{};

	Parms.buttonData = std::move(buttonData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetButtonVisual
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FCompendiumButtonData&     buttonData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumButtonWidget::SetButtonVisual(const struct FCompendiumButtonData& buttonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "SetButtonVisual");

	Params::CoreArchiveCompendiumButtonWidget_SetButtonVisual Parms{};

	Parms.buttonData = std::move(buttonData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetGhostStory
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isGhostStory                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumButtonWidget::SetGhostStory(bool isGhostStory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "SetGhostStory");

	Params::CoreArchiveCompendiumButtonWidget_SetGhostStory Parms{};

	Parms.isGhostStory = isGhostStory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetLevelProgressionVisual
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   buttonLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EArchivesStoryLevelStatus               levelStatus                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumButtonWidget::SetLevelProgressionVisual(int32 buttonLevel, EArchivesStoryLevelStatus levelStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "SetLevelProgressionVisual");

	Params::CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual Parms{};

	Parms.buttonLevel = buttonLevel;
	Parms.levelStatus = levelStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.CreateAndAddButtonToGrid
// (Final, Native, Private)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreArchiveCompendiumButtonWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreArchiveCompendiumButtonWidget* UCoreArchiveCompendiumWidget::CreateAndAddButtonToGrid(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "CreateAndAddButtonToGrid");

	Params::CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.CreateGhostStories
// (Final, Native, Private)
// Parameters:
// const int32                             currentStoryNum                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumWidget::CreateGhostStories(const int32 currentStoryNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "CreateGhostStories");

	Params::CoreArchiveCompendiumWidget_CreateGhostStories Parms{};

	Parms.currentStoryNum = currentStoryNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.OnPastStoryClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumWidget::OnPastStoryClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "OnPastStoryClicked");

	Params::CoreArchiveCompendiumWidget_OnPastStoryClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.Reset
// (Final, Native, Private)

void UCoreArchiveCompendiumWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.ResetScroll
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveCompendiumWidget::ResetScroll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "ResetScroll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.SetGridSlot
// (Final, Native, Private)
// Parameters:
// class UGridSlot*                        GridSlot                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumWidget::SetGridSlot(class UGridSlot* GridSlot, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "SetGridSlot");

	Params::CoreArchiveCompendiumWidget_SetGridSlot Parms{};

	Parms.GridSlot = GridSlot;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LabelTooltipWidget.Reset
// (Final, Native, Public)

void ULabelTooltipWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LabelTooltipWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LabelTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      labelText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULabelTooltipWidget::SetTooltipData(const class FText& labelText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LabelTooltipWidget", "SetTooltipData");

	Params::LabelTooltipWidget_SetTooltipData Parms{};

	Parms.labelText = std::move(labelText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.OnTextVisibilityChanged
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveJournalImageViewerWidget::OnTextVisibilityChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "OnTextVisibilityChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.OnVoiceOverAutoPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    autoplay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::OnVoiceOverAutoPlay(bool autoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "OnVoiceOverAutoPlay");

	Params::CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay Parms{};

	Parms.autoplay = autoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.OnVoiceOverPlay
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveJournalImageViewerWidget::OnVoiceOverPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "OnVoiceOverPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchivesVignetteEntryViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              hasTitle                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              hasDescription                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::SetData(const struct FArchivesVignetteEntryViewData& Data, const bool hasTitle, const bool hasDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "SetData");

	Params::CoreArchiveJournalImageViewerWidget_SetData Parms{};

	Parms.Data = std::move(Data);
	Parms.hasTitle = hasTitle;
	Parms.hasDescription = hasDescription;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetScrollData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      journalEntryScrollPromptText                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::SetScrollData(const class FText& journalEntryScrollPromptText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "SetScrollData");

	Params::CoreArchiveJournalImageViewerWidget_SetScrollData Parms{};

	Parms.journalEntryScrollPromptText = std::move(journalEntryScrollPromptText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetTextVisibilityInputText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      displayText                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      hideText                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::SetTextVisibilityInputText(const class FText& displayText, const class FText& hideText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "SetTextVisibilityInputText");

	Params::CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText Parms{};

	Parms.displayText = std::move(displayText);
	Parms.hideText = std::move(hideText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetVoiceOverText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      playVoiceOverText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      stopVoiceOverText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      autoplayVoiceOverText                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::SetVoiceOverText(const class FText& playVoiceOverText, const class FText& stopVoiceOverText, const class FText& autoplayVoiceOverText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "SetVoiceOverText");

	Params::CoreArchiveJournalImageViewerWidget_SetVoiceOverText Parms{};

	Parms.playVoiceOverText = std::move(playVoiceOverText);
	Parms.stopVoiceOverText = std::move(stopVoiceOverText);
	Parms.autoplayVoiceOverText = std::move(autoplayVoiceOverText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.InitializeArrow
// (Final, Native, Private)
// Parameters:
// class UCoreInputSwitcherWidget*         arrowWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Active                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::InitializeArrow(class UCoreInputSwitcherWidget* arrowWidget, bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "InitializeArrow");

	Params::CoreArchiveJournalWidget_InitializeArrow Parms{};

	Parms.arrowWidget = arrowWidget;
	Parms.Active = Active;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnFirstJournalEntryUnlocked
// (Final, Native, Private)

void UCoreArchiveJournalWidget::OnFirstJournalEntryUnlocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnFirstJournalEntryUnlocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnJournalEntriesUnlocked
// (Final, Native, Private)

void UCoreArchiveJournalWidget::OnJournalEntriesUnlocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnJournalEntriesUnlocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnLeftArrowTriggered
// (Final, Native, Private)

void UCoreArchiveJournalWidget::OnLeftArrowTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnLeftArrowTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnRewardImageLoaded
// (Final, Native, Private)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        LoadedTexture                                          (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      TitleText                                              (Parm, NativeAccessSpecifierPublic)
// const class FText&                      descriptionText                                        (Parm, NativeAccessSpecifierPublic)
// float                                   textureOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnRewardImageLoaded(TSoftObjectPtr<class UTexture2D> LoadedTexture, bool Success, const class FText& TitleText, const class FText& descriptionText, float textureOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnRewardImageLoaded");

	Params::CoreArchiveJournalWidget_OnRewardImageLoaded Parms{};

	Parms.LoadedTexture = LoadedTexture;
	Parms.Success = Success;
	Parms.TitleText = std::move(TitleText);
	Parms.descriptionText = std::move(descriptionText);
	Parms.textureOffset = textureOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnRightArrowTriggered
// (Final, Native, Private)

void UCoreArchiveJournalWidget::OnRightArrowTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnRightArrowTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteButtonSelected
// (Final, Native, Public)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnVignetteButtonSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVignetteButtonSelected");

	Params::CoreArchiveJournalWidget_OnVignetteButtonSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteCinematicSelected
// (Final, Native, Public)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnVignetteCinematicSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVignetteCinematicSelected");

	Params::CoreArchiveJournalWidget_OnVignetteCinematicSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteEntrySelected
// (Final, Native, Public)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnVignetteEntrySelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVignetteEntrySelected");

	Params::CoreArchiveJournalWidget_OnVignetteEntrySelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVoiceOverAutoPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    autoplay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnVoiceOverAutoPlay(bool autoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVoiceOverAutoPlay");

	Params::CoreArchiveJournalWidget_OnVoiceOverAutoPlay Parms{};

	Parms.autoplay = autoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVoiceOverPlay
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveJournalWidget::OnVoiceOverPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVoiceOverPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetArrowButtons
// (Final, Native, Private)

void UCoreArchiveJournalWidget::SetArrowButtons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetArrowButtons");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetBottomFogOffset
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasAudio                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetBottomFogOffset(bool HasAudio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetBottomFogOffset");

	Params::CoreArchiveJournalWidget_SetBottomFogOffset Parms{};

	Parms.HasAudio = HasAudio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetEntryImage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      TitleText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      descriptionText                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TSoftObjectPtr<class UTexture2D>& RewardImage                                            (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   textureOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetEntryImage(const class FText& TitleText, const class FText& descriptionText, const TSoftObjectPtr<class UTexture2D>& RewardImage, float textureOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetEntryImage");

	Params::CoreArchiveJournalWidget_SetEntryImage Parms{};

	Parms.TitleText = std::move(TitleText);
	Parms.descriptionText = std::move(descriptionText);
	Parms.RewardImage = RewardImage;
	Parms.textureOffset = textureOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetEntryText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      TitleText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      descriptionText                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetEntryText(const class FText& TitleText, const class FText& descriptionText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetEntryText");

	Params::CoreArchiveJournalWidget_SetEntryText Parms{};

	Parms.TitleText = std::move(TitleText);
	Parms.descriptionText = std::move(descriptionText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetTopFogOffset
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    hasTitle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    hasDescription                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetTopFogOffset(bool hasTitle, bool hasDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetTopFogOffset");

	Params::CoreArchiveJournalWidget_SetTopFogOffset Parms{};

	Parms.hasTitle = hasTitle;
	Parms.hasDescription = hasDescription;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVignetteText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      TitleText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      SubtitleText                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetVignetteText(const class FText& TitleText, const class FText& SubtitleText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetVignetteText");

	Params::CoreArchiveJournalWidget_SetVignetteText Parms{};

	Parms.TitleText = std::move(TitleText);
	Parms.SubtitleText = std::move(SubtitleText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVoiceOverButtonsVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              IsVisible_0                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetVoiceOverButtonsVisibility(const bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetVoiceOverButtonsVisibility");

	Params::CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVoiceOverText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      playVoiceOverText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      stopVoiceOverText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      autoplayVoiceOverText                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetVoiceOverText(const class FText& playVoiceOverText, const class FText& stopVoiceOverText, const class FText& autoplayVoiceOverText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetVoiceOverText");

	Params::CoreArchiveJournalWidget_SetVoiceOverText Parms{};

	Parms.playVoiceOverText = std::move(playVoiceOverText);
	Parms.stopVoiceOverText = std::move(stopVoiceOverText);
	Parms.autoplayVoiceOverText = std::move(autoplayVoiceOverText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.ShowImageViewer
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveJournalWidget::ShowImageViewer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "ShowImageViewer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveLevelProgressionWidget.OnStoryLevelSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveLevelProgressionWidget::OnStoryLevelSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveLevelProgressionWidget", "OnStoryLevelSelected");

	Params::CoreArchiveLevelProgressionWidget_OnStoryLevelSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveLevelProgressionWidget.OnTomeLevelUnlockedAnimation
// (Final, Native, Private)

void UCoreArchiveLevelProgressionWidget::OnTomeLevelUnlockedAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveLevelProgressionWidget", "OnTomeLevelUnlockedAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePrestigeTooltipWidget.SetTooltipData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FPrestigeViewData&         Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCorePrestigeTooltipWidget::SetTooltipData(const struct FPrestigeViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePrestigeTooltipWidget", "SetTooltipData");

	Params::CorePrestigeTooltipWidget_SetTooltipData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveObjectiveWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchiveNodeObjectiveViewData&objectiveData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveObjectiveWidget::SetData(const struct FArchiveNodeObjectiveViewData& objectiveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveObjectiveWidget", "SetData");

	Params::CoreArchiveObjectiveWidget_SetData Parms{};

	Parms.objectiveData = std::move(objectiveData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchivePassBannerWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStoreArchivePassViewData& Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchivePassBannerWidget::SetData(const struct FStoreArchivePassViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivePassBannerWidget", "SetData");

	Params::CoreArchivePassBannerWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyLoadoutWidget.OnPresetClicked
// (Final, Native, Private)
// Parameters:
// const int32                             SelectedPresetId                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyLoadoutWidget::OnPresetClicked(const int32 SelectedPresetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyLoadoutWidget", "OnPresetClicked");

	Params::CoreLobbyLoadoutWidget_OnPresetClicked Parms{};

	Parms.SelectedPresetId = SelectedPresetId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchivePassPurchasePopupWidget.OnPurchaseBundleClicked
// (Final, Native, Private)
// Parameters:
// ECurrencyType                           currencyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchivePassPurchasePopupWidget::OnPurchaseBundleClicked(ECurrencyType currencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivePassPurchasePopupWidget", "OnPurchaseBundleClicked");

	Params::CoreArchivePassPurchasePopupWidget_OnPurchaseBundleClicked Parms{};

	Parms.currencyType = currencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchivePassPurchasePopupWidget.OnPurchaseClicked
// (Final, Native, Private)
// Parameters:
// ECurrencyType                           currencyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchivePassPurchasePopupWidget::OnPurchaseClicked(ECurrencyType currencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivePassPurchasePopupWidget", "OnPurchaseClicked");

	Params::CoreArchivePassPurchasePopupWidget_OnPurchaseClicked Parms{};

	Parms.currencyType = currencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.BindToNode
// (Native, Protected)
// Parameters:
// class UCoreArchiveQuestNodeWidget*      Node                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::BindToNode(class UCoreArchiveQuestNodeWidget* Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "BindToNode");

	Params::CoreArchiveQuestMapWidget_BindToNode Parms{};

	Parms.Node = Node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.BindToPath
// (Native, Protected)
// Parameters:
// class UCoreArchiveQuestPathWidget*      Path                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::BindToPath(class UCoreArchiveQuestPathWidget* Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "BindToPath");

	Params::CoreArchiveQuestMapWidget_BindToPath Parms{};

	Parms.Path = Path;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeClicked
// (Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::OnNodeClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "OnNodeClicked");

	Params::CoreArchiveQuestMapWidget_OnNodeClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::OnNodeHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "OnNodeHovered");

	Params::CoreArchiveQuestMapWidget_OnNodeHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodesRevealCompleted
// (Final, Native, Private)

void UCoreArchiveQuestMapWidget::OnNodesRevealCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "OnNodesRevealCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::OnNodeUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "OnNodeUnhovered");

	Params::CoreArchiveQuestMapWidget_OnNodeUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.SetupNode
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FArchiveNodeGraphViewData& NodeData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::SetupNode(const struct FArchiveNodeGraphViewData& NodeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "SetupNode");

	Params::CoreArchiveQuestMapWidget_SetupNode Parms{};

	Parms.NodeData = std::move(NodeData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.SetupPath
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FArchiveMapPathViewData&   PathData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::SetupPath(const struct FArchiveMapPathViewData& PathData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "SetupPath");

	Params::CoreArchiveQuestMapWidget_SetupPath Parms{};

	Parms.PathData = std::move(PathData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.UnbindFromNode
// (Native, Protected)
// Parameters:
// class UCoreArchiveQuestNodeWidget*      Node                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::UnbindFromNode(class UCoreArchiveQuestNodeWidget* Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "UnbindFromNode");

	Params::CoreArchiveQuestMapWidget_UnbindFromNode Parms{};

	Parms.Node = Node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.UnbindFromPath
// (Native, Protected)
// Parameters:
// class UCoreArchiveQuestPathWidget*      Path                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::UnbindFromPath(class UCoreArchiveQuestPathWidget* Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "UnbindFromPath");

	Params::CoreArchiveQuestMapWidget_UnbindFromPath Parms{};

	Parms.Path = Path;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.OnButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::OnButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "OnButtonClicked");

	Params::CoreButtonSelector_OnButtonClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.OnButtonSelectedAgain
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::OnButtonSelectedAgain(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "OnButtonSelectedAgain");

	Params::CoreButtonSelector_OnButtonSelectedAgain Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.OnButtonSelectedChanged
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::OnButtonSelectedChanged(class UCoreSelectableButtonWidget* selectedButton, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "OnButtonSelectedChanged");

	Params::CoreButtonSelector_OnButtonSelectedChanged Parms{};

	Parms.selectedButton = selectedButton;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.Select
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonToSelect                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    performAction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::Select(class UCoreSelectableButtonWidget* buttonToSelect, bool performAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "Select");

	Params::CoreButtonSelector_Select Parms{};

	Parms.buttonToSelect = buttonToSelect;
	Parms.performAction = performAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonSelector.SelectAtIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    performAction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::SelectAtIndex(int32 Index_0, bool performAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "SelectAtIndex");

	Params::CoreButtonSelector_SelectAtIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.performAction = performAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonSelector.SelectNext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::SelectNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "SelectNext");

	Params::CoreButtonSelector_SelectNext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonSelector.SelectPrevious
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::SelectPrevious()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "SelectPrevious");

	Params::CoreButtonSelector_SelectPrevious Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonSelector.SetAllEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::SetAllEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "SetAllEnabled");

	Params::CoreButtonSelector_SetAllEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.SetInputsEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::SetInputsEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "SetInputsEnabled");

	Params::CoreButtonSelector_SetInputsEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.UnselectCurrent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    performAction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::UnselectCurrent(bool performAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "UnselectCurrent");

	Params::CoreButtonSelector_UnselectCurrent Parms{};

	Parms.performAction = performAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.GetInputsEnabled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::GetInputsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "GetInputsEnabled");

	Params::CoreButtonSelector_GetInputsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonSelector.HasSelection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::HasSelection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "HasSelection");

	Params::CoreButtonSelector_HasSelection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePresetContainerWidget.BroadcastSelectedPreset
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetContainerWidget::BroadcastSelectedPreset(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetContainerWidget", "BroadcastSelectedPreset");

	Params::CorePresetContainerWidget_BroadcastSelectedPreset Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePresetContainerWidget.SetPresetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    presetData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             selectedPreset                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetContainerWidget::SetPresetData(const TArray<int32>& presetData, const int32 selectedPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetContainerWidget", "SetPresetData");

	Params::CorePresetContainerWidget_SetPresetData Parms{};

	Parms.presetData = std::move(presetData);
	Parms.selectedPreset = selectedPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePresetContainerWidget.GetSelectedPreset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCorePresetWidget*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCorePresetWidget* UCorePresetContainerWidget::GetSelectedPreset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetContainerWidget", "GetSelectedPreset");

	Params::CorePresetContainerWidget_GetSelectedPreset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.BroadcastDragBegin
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveQuestNodeWidget::BroadcastDragBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "BroadcastDragBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.HandleStatusChange
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const EStoryNodeState                   prevStatus                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EStoryNodeState                   currentStatus                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::HandleStatusChange(const EStoryNodeState prevStatus, const EStoryNodeState currentStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "HandleStatusChange");

	Params::CoreArchiveQuestNodeWidget_HandleStatusChange Parms{};

	Parms.prevStatus = prevStatus;
	Parms.currentStatus = currentStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.InitNode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      NodeId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FArchiveNodeViewData&      Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    isChallengeReminderNode                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::InitNode(const class FName& NodeId, const struct FArchiveNodeViewData& Data, bool isChallengeReminderNode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "InitNode");

	Params::CoreArchiveQuestNodeWidget_InitNode Parms{};

	Parms.NodeId = NodeId;
	Parms.Data = std::move(Data);
	Parms.isChallengeReminderNode = isChallengeReminderNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.OnInit
// (Event, Protected, BlueprintEvent)

void UCoreArchiveQuestNodeWidget::OnInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "OnInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.OnReset
// (Event, Protected, BlueprintEvent)

void UCoreArchiveQuestNodeWidget::OnReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "OnReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.OnStatusChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// ENodeStatusChange                       nodeStatusChange                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::OnStatusChanged(ENodeStatusChange nodeStatusChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "OnStatusChanged");

	Params::CoreArchiveQuestNodeWidget_OnStatusChanged Parms{};

	Parms.nodeStatusChange = nodeStatusChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.Reset
// (Final, Native, Public)

void UCoreArchiveQuestNodeWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.SetCurrencyRewardBackground
// (Event, Protected, BlueprintEvent)
// Parameters:
// ECurrencyType                           currencyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::SetCurrencyRewardBackground(ECurrencyType currencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "SetCurrencyRewardBackground");

	Params::CoreArchiveQuestNodeWidget_SetCurrencyRewardBackground Parms{};

	Parms.currencyType = currencyType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.SetCustomizationRewardRarity
// (Event, Protected, BlueprintEvent)
// Parameters:
// EItemRarity                             Rarity                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::SetCustomizationRewardRarity(EItemRarity Rarity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "SetCustomizationRewardRarity");

	Params::CoreArchiveQuestNodeWidget_SetCustomizationRewardRarity Parms{};

	Parms.Rarity = Rarity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.SetIcon
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// bool                                    isReward                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSoftObjectPtr<class UTexture2D>& iconTexture                                            (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::SetIcon(bool isReward, const TSoftObjectPtr<class UTexture2D>& iconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "SetIcon");

	Params::CoreArchiveQuestNodeWidget_SetIcon Parms{};

	Parms.isReward = isReward;
	Parms.iconTexture = iconTexture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.ShowRewardNodeTooltip
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveQuestNodeWidget::ShowRewardNodeTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "ShowRewardNodeTooltip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.UpdateAllStoryIndicators
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveQuestNodeWidget::UpdateAllStoryIndicators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "UpdateAllStoryIndicators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.UpdateNode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchiveNodeViewData&      Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::UpdateNode(const struct FArchiveNodeViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "UpdateNode");

	Params::CoreArchiveQuestNodeWidget_UpdateNode Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.UpdateStoryIndicatorOpacity
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsImageReward                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsCompleted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::UpdateStoryIndicatorOpacity(bool IsImageReward, bool IsCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "UpdateStoryIndicatorOpacity");

	Params::CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity Parms{};

	Parms.IsImageReward = IsImageReward;
	Parms.IsCompleted = IsCompleted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.IsSelectableNode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreArchiveQuestNodeWidget::IsSelectableNode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "IsSelectableNode");

	Params::CoreArchiveQuestNodeWidget_IsSelectableNode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.IsValidNode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreArchiveQuestNodeWidget::IsValidNode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "IsValidNode");

	Params::CoreArchiveQuestNodeWidget_IsValidNode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.NeedsChallengeReminderHoverAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreArchiveQuestNodeWidget::NeedsChallengeReminderHoverAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "NeedsChallengeReminderHoverAnimation");

	Params::CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.InitPath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchiveMapPathViewData&   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCoreArchiveQuestPathWidget::InitPath(const struct FArchiveMapPathViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestPathWidget", "InitPath");

	Params::CoreArchiveQuestPathWidget_InitPath Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.Reset
// (Final, Native, Public)

void UCoreArchiveQuestPathWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestPathWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.SetVisualState
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const EArchivePathStatus&               pathStatus                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestPathWidget::SetVisualState(const EArchivePathStatus& pathStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestPathWidget", "SetVisualState");

	Params::CoreArchiveQuestPathWidget_SetVisualState Parms{};

	Parms.pathStatus = pathStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.UpdatePath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchiveMapPathViewData&   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCoreArchiveQuestPathWidget::UpdatePath(const struct FArchiveMapPathViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestPathWidget", "UpdatePath");

	Params::CoreArchiveQuestPathWidget_UpdatePath Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadoutWidget.CreateInventoryGrid
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCoreMenuLoadoutPartWidget>currentLoadoutClass                                    (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreMenuLoadoutPartWidget*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreMenuLoadoutPartWidget* UCoreLoadoutWidget::CreateInventoryGrid(int32 Index_0, TSubclassOf<class UCoreMenuLoadoutPartWidget> currentLoadoutClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "CreateInventoryGrid");

	Params::CoreLoadoutWidget_CreateInventoryGrid Parms{};

	Parms.Index_0 = Index_0;
	Parms.currentLoadoutClass = currentLoadoutClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreLoadoutWidget.OnInventoryItemClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                itemWidget                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadoutWidget::OnInventoryItemClicked(class UCoreButtonWidget* itemWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "OnInventoryItemClicked");

	Params::CoreLoadoutWidget_OnInventoryItemClicked Parms{};

	Parms.itemWidget = itemWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadoutWidget.OnInventoryItemHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadoutWidget::OnInventoryItemHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "OnInventoryItemHovered");

	Params::CoreLoadoutWidget_OnInventoryItemHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadoutWidget.OnInventoryItemUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadoutWidget::OnInventoryItemUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "OnInventoryItemUnhovered");

	Params::CoreLoadoutWidget_OnInventoryItemUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadoutWidget.OnInventoryLeftArrowClicked
// (Final, Native, Private, BlueprintCallable)

void UCoreLoadoutWidget::OnInventoryLeftArrowClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "OnInventoryLeftArrowClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadoutWidget.OnInventoryRightArrowClicked
// (Final, Native, Private, BlueprintCallable)

void UCoreLoadoutWidget::OnInventoryRightArrowClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "OnInventoryRightArrowClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadoutWidget.OnPaginationAnimationCompleted
// (Final, Native, Private)

void UCoreLoadoutWidget::OnPaginationAnimationCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "OnPaginationAnimationCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadoutWidget.OnPaginationSelected
// (Final, Native, Private)
// Parameters:
// const int32                             CurrentPage                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isUpdate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadoutWidget::OnPaginationSelected(const int32 CurrentPage, bool isUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "OnPaginationSelected");

	Params::CoreLoadoutWidget_OnPaginationSelected Parms{};

	Parms.CurrentPage = CurrentPage;
	Parms.isUpdate = isUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadoutWidget.OnSlotClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// ELoadoutSlot                            clickedLoadoutSlot                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadoutWidget::OnSlotClicked(ELoadoutSlot clickedLoadoutSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "OnSlotClicked");

	Params::CoreLoadoutWidget_OnSlotClicked Parms{};

	Parms.clickedLoadoutSlot = clickedLoadoutSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadoutWidget.PlayPaginationOutAnimation
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isNextPage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadoutWidget::PlayPaginationOutAnimation(bool isNextPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "PlayPaginationOutAnimation");

	Params::CoreLoadoutWidget_PlayPaginationOutAnimation Parms{};

	Parms.isNextPage = isNextPage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreLoadoutWidget.StopPaginationAnimation
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const float                             inventoryElementsOpacity                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadoutWidget::StopPaginationAnimation(const float inventoryElementsOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "StopPaginationAnimation");

	Params::CoreLoadoutWidget_StopPaginationAnimation Parms{};

	Parms.inventoryElementsOpacity = inventoryElementsOpacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadoutWidget.UpdateInventoryGridContent
// (Final, Native, Private, BlueprintCallable)

void UCoreLoadoutWidget::UpdateInventoryGridContent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "UpdateInventoryGridContent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadoutWidget.UpdateInventoryStatus
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// const ELoadoutInventoryDisabledReason   InventoryDisabledReason                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             numberOfPages                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreLoadoutWidget::UpdateInventoryStatus(const ELoadoutInventoryDisabledReason InventoryDisabledReason, const int32 numberOfPages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "UpdateInventoryStatus");

	Params::CoreLoadoutWidget_UpdateInventoryStatus Parms{};

	Parms.InventoryDisabledReason = InventoryDisabledReason;
	Parms.numberOfPages = numberOfPages;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreLoadoutWidget.UpdateLoadoutLayout
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreLoadoutWidget::UpdateLoadoutLayout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "UpdateLoadoutLayout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreLoadoutWidget.IsLayoutSectionEnabled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             loadoutLayoutMask                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreLoadoutWidget::IsLayoutSectionEnabled(const int32 loadoutLayoutMask) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadoutWidget", "IsLayoutSectionEnabled");

	Params::CoreLoadoutWidget_IsLayoutSectionEnabled Parms{};

	Parms.loadoutLayoutMask = loadoutLayoutMask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.Clear
// (Event, Public, BlueprintEvent)

void UCoreArchiveRiftTierItem::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "Clear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.OnRewardClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftTierItem::OnRewardClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "OnRewardClicked");

	Params::CoreArchiveRiftTierItem_OnRewardClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.PlayUnlockanimation
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsPremiumUnlocked                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftTierItem::PlayUnlockanimation(bool IsPremiumUnlocked, float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "PlayUnlockanimation");

	Params::CoreArchiveRiftTierItem_PlayUnlockanimation Parms{};

	Parms.IsPremiumUnlocked = IsPremiumUnlocked;
	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.SetGenericData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FArchiveRiftTierRewardsViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveRiftTierItem::SetGenericData(const struct FArchiveRiftTierRewardsViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "SetGenericData");

	Params::CoreArchiveRiftTierItem_SetGenericData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.SetLockedState
// (Event, Public, BlueprintEvent)
// Parameters:
// const bool                              IsLocked                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              hasPremium                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftTierItem::SetLockedState(const bool IsLocked, const bool hasPremium)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "SetLockedState");

	Params::CoreArchiveRiftTierItem_SetLockedState Parms{};

	Parms.IsLocked = IsLocked;
	Parms.hasPremium = hasPremium;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveSlotSelectorWidget.OnBothSelection
// (Final, Native, Private)

void UCoreArchiveSlotSelectorWidget::OnBothSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveSlotSelectorWidget", "OnBothSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveSlotSelectorWidget.OnCancelSelection
// (Final, Native, Private)

void UCoreArchiveSlotSelectorWidget::OnCancelSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveSlotSelectorWidget", "OnCancelSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveSlotSelectorWidget.OnKillerSelection
// (Final, Native, Private)

void UCoreArchiveSlotSelectorWidget::OnKillerSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveSlotSelectorWidget", "OnKillerSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveSlotSelectorWidget.OnSurvivorSelection
// (Final, Native, Private)

void UCoreArchiveSlotSelectorWidget::OnSurvivorSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveSlotSelectorWidget", "OnSurvivorSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.GetButton
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// EMainMenuButtonType                     Button                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreBaseUserWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreBaseUserWidget* UCoreMainMenuWidget::GetButton(EMainMenuButtonType Button, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "GetButton");

	Params::CoreMainMenuWidget_GetButton Parms{};

	Parms.Button = Button;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnArchivesButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnArchivesButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnArchivesButtonClicked");

	Params::CoreMainMenuWidget_OnArchivesButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnChallengesButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnChallengesButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnChallengesButtonClicked");

	Params::CoreMainMenuWidget_OnChallengesButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnCreditsButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnCreditsButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnCreditsButtonClicked");

	Params::CoreMainMenuWidget_OnCreditsButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnEventButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnEventButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnEventButtonClicked");

	Params::CoreMainMenuWidget_OnEventButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnExitButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnExitButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnExitButtonClicked");

	Params::CoreMainMenuWidget_OnExitButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnExitButtonTriggered
// (Final, Native, Private)

void UCoreMainMenuWidget::OnExitButtonTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnExitButtonTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnFriendsButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnFriendsButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnFriendsButtonClicked");

	Params::CoreMainMenuWidget_OnFriendsButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnInboxButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnInboxButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnInboxButtonClicked");

	Params::CoreMainMenuWidget_OnInboxButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnPlayButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnPlayButtonClicked");

	Params::CoreMainMenuWidget_OnPlayButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayCustomButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnPlayCustomButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnPlayCustomButtonClicked");

	Params::CoreMainMenuWidget_OnPlayCustomButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayKillerButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnPlayKillerButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnPlayKillerButtonClicked");

	Params::CoreMainMenuWidget_OnPlayKillerButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayLimitedTimeEventButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnPlayLimitedTimeEventButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnPlayLimitedTimeEventButtonClicked");

	Params::CoreMainMenuWidget_OnPlayLimitedTimeEventButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayLimitedTimeEventKillerButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnPlayLimitedTimeEventKillerButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnPlayLimitedTimeEventKillerButtonClicked");

	Params::CoreMainMenuWidget_OnPlayLimitedTimeEventKillerButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayLimitedTimeEventSurvivorButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnPlayLimitedTimeEventSurvivorButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnPlayLimitedTimeEventSurvivorButtonClicked");

	Params::CoreMainMenuWidget_OnPlayLimitedTimeEventSurvivorButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlaySurvivorButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnPlaySurvivorButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnPlaySurvivorButtonClicked");

	Params::CoreMainMenuWidget_OnPlaySurvivorButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnRiftButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnRiftButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnRiftButtonClicked");

	Params::CoreMainMenuWidget_OnRiftButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnSettingsButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnSettingsButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnSettingsButtonClicked");

	Params::CoreMainMenuWidget_OnSettingsButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnStoreButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnStoreButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnStoreButtonClicked");

	Params::CoreMainMenuWidget_OnStoreButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.OnTutorialButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::OnTutorialButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "OnTutorialButtonClicked");

	Params::CoreMainMenuWidget_OnTutorialButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuWidget.ShowLimitedTimeEventSubMenu
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    Open                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::ShowLimitedTimeEventSubMenu(bool Open)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "ShowLimitedTimeEventSubMenu");

	Params::CoreMainMenuWidget_ShowLimitedTimeEventSubMenu Parms{};

	Parms.Open = Open;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuWidget.ShowPlaySubMenu
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    Open                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::ShowPlaySubMenu(bool Open)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "ShowPlaySubMenu");

	Params::CoreMainMenuWidget_ShowPlaySubMenu Parms{};

	Parms.Open = Open;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuWidget.ShowUiTakeover
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuWidget::ShowUiTakeover(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "ShowUiTakeover");

	Params::CoreMainMenuWidget_ShowUiTakeover Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuWidget.HasActiveLTE
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreMainMenuWidget::HasActiveLTE() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuWidget", "HasActiveLTE");

	Params::CoreMainMenuWidget_HasActiveLTE Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchivesWidget.OnBackButtonClicked
// (Final, Native, Protected)

void UCoreArchivesWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivesWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchivesWidget.OnChallengeReminderClick
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchivesWidget::OnChallengeReminderClick(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivesWidget", "OnChallengeReminderClick");

	Params::CoreArchivesWidget_OnChallengeReminderClick Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchivesWidget.OnInfoButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchivesWidget::OnInfoButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivesWidget", "OnInfoButtonClicked");

	Params::CoreArchivesWidget_OnInfoButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchivesWidget.OnSettingsButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchivesWidget::OnSettingsButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivesWidget", "OnSettingsButtonClicked");

	Params::CoreArchivesWidget_OnSettingsButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchivesWidget.OnSlotSelected
// (Final, Native, Protected)
// Parameters:
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchivesWidget::OnSlotSelected(EPlayerRole Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivesWidget", "OnSlotSelected");

	Params::CoreArchivesWidget_OnSlotSelected Parms{};

	Parms.Role = Role;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchivesWidget.OnSlotSelectionCancelled
// (Final, Native, Protected)

void UCoreArchivesWidget::OnSlotSelectionCancelled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivesWidget", "OnSlotSelectionCancelled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchivesWidget.SetScrollData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      vignetteListScrollPromptText                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      journalEntryScrollPromptText                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchivesWidget::SetScrollData(const class FText& vignetteListScrollPromptText, const class FText& journalEntryScrollPromptText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivesWidget", "SetScrollData");

	Params::CoreArchivesWidget_SetScrollData Parms{};

	Parms.vignetteListScrollPromptText = std::move(vignetteListScrollPromptText);
	Parms.journalEntryScrollPromptText = std::move(journalEntryScrollPromptText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchivesWidget.SetSubtitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      subtitle                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchivesWidget::SetSubtitle(const class FText& subtitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivesWidget", "SetSubtitle");

	Params::CoreArchivesWidget_SetSubtitle Parms{};

	Parms.subtitle = std::move(subtitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.OnLessInputTriggered
// (Final, Native, Private)

void UCoreArchiveTierPurchasePopupWidget::OnLessInputTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTierPurchasePopupWidget", "OnLessInputTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.OnMoreInputTriggered
// (Final, Native, Private)

void UCoreArchiveTierPurchasePopupWidget::OnMoreInputTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTierPurchasePopupWidget", "OnMoreInputTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.OnPurchaseClicked
// (Final, Native, Private)
// Parameters:
// ECurrencyType                           currencyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveTierPurchasePopupWidget::OnPurchaseClicked(ECurrencyType currencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTierPurchasePopupWidget", "OnPurchaseClicked");

	Params::CoreArchiveTierPurchasePopupWidget_OnPurchaseClicked Parms{};

	Parms.currencyType = currencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.SetVisualData
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UArchiveTierPurchasePopupViewData*ViewData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveTierPurchasePopupWidget::SetVisualData(const class UArchiveTierPurchasePopupViewData* ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTierPurchasePopupWidget", "SetVisualData");

	Params::CoreArchiveTierPurchasePopupWidget_SetVisualData Parms{};

	Parms.ViewData = ViewData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreLobbySidePanelButton.ForceUnselectButton
// (Event, Public, BlueprintEvent)

void UCoreLobbySidePanelButton::ForceUnselectButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbySidePanelButton", "ForceUnselectButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreLobbySidePanelButton.OnButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbySidePanelButton::OnButtonHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbySidePanelButton", "OnButtonHovered");

	Params::CoreLobbySidePanelButton_OnButtonHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbySidePanelButton.OnButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbySidePanelButton::OnButtonUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbySidePanelButton", "OnButtonUnhovered");

	Params::CoreLobbySidePanelButton_OnButtonUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbySidePanelButton.SetDecoration
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    decorationId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbySidePanelButton::SetDecoration(const class FString& decorationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbySidePanelButton", "SetDecoration");

	Params::CoreLobbySidePanelButton_SetDecoration Parms{};

	Parms.decorationId = std::move(decorationId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreLobbySidePanelButton.SetIcon
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    eventBannerId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbySidePanelButton::SetIcon(const class FString& eventBannerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbySidePanelButton", "SetIcon");

	Params::CoreLobbySidePanelButton_SetIcon Parms{};

	Parms.eventBannerId = std::move(eventBannerId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreLobbySidePanelButton.IsDisabledButInteractable
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreLobbySidePanelButton::IsDisabledButInteractable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbySidePanelButton", "IsDisabledButInteractable");

	Params::CoreLobbySidePanelButton_IsDisabledButInteractable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveTomeWidget.OnMenuTabSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveTomeWidget::OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTomeWidget", "OnMenuTabSelected");

	Params::CoreArchiveTomeWidget_OnMenuTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseLoadoutSectionWidget.HideTooltip
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                unhoveredSlotWidget                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutSectionWidget::HideTooltip(class UCoreButtonWidget* unhoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutSectionWidget", "HideTooltip");

	Params::CoreBaseLoadoutSectionWidget_HideTooltip Parms{};

	Parms.unhoveredSlotWidget = unhoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseLoadoutSectionWidget.OnSlotClicked
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutSectionWidget::OnSlotClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutSectionWidget", "OnSlotClicked");

	Params::CoreBaseLoadoutSectionWidget_OnSlotClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseLoadoutSectionWidget.ShowTooltip
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                hoveredSlotWidget                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutSectionWidget::ShowTooltip(class UCoreButtonWidget* hoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutSectionWidget", "ShowTooltip");

	Params::CoreBaseLoadoutSectionWidget_ShowTooltip Parms{};

	Parms.hoveredSlotWidget = hoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.Init
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FTabWidgetData>&    tabsData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::Init(const TArray<struct FTabWidgetData>& tabsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "Init");

	Params::CoreTabContainerWidget_Init Parms{};

	Parms.tabsData = std::move(tabsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.LayOutTabs
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContainerWidget::LayOutTabs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "LayOutTabs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.OnTabSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::OnTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "OnTabSelected");

	Params::CoreTabContainerWidget_OnTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.RemoveTabs
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContainerWidget::RemoveTabs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "RemoveTabs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.SelectNextOrPreviousTab
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              isSelectingNextTab                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::SelectNextOrPreviousTab(const bool isSelectingNextTab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "SelectNextOrPreviousTab");

	Params::CoreTabContainerWidget_SelectNextOrPreviousTab Parms{};

	Parms.isSelectingNextTab = isSelectingNextTab;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.SetNotificationVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              HasNotification                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::SetNotificationVisibility(const int32 Key, const bool HasNotification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "SetNotificationVisibility");

	Params::CoreTabContainerWidget_SetNotificationVisibility Parms{};

	Parms.Key = Key;
	Parms.HasNotification = HasNotification;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.SetTabEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              Enabled                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::SetTabEnabled(const int32 Key, const bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "SetTabEnabled");

	Params::CoreTabContainerWidget_SetTabEnabled Parms{};

	Parms.Key = Key;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.SetTabVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              Visible                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::SetTabVisible(const int32 Key, const bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "SetTabVisible");

	Params::CoreTabContainerWidget_SetTabVisible Parms{};

	Parms.Key = Key;
	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.SetUseControllerTabSwitching
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              Enabled                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::SetUseControllerTabSwitching(const bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "SetUseControllerTabSwitching");

	Params::CoreTabContainerWidget_SetUseControllerTabSwitching Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.UpdateBackgroundSkin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               skinMaterial                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::UpdateBackgroundSkin(const int32 Key, class UMaterialInterface* skinMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "UpdateBackgroundSkin");

	Params::CoreTabContainerWidget_UpdateBackgroundSkin Parms{};

	Parms.Key = Key;
	Parms.skinMaterial = skinMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.UpdateInputSwitchers
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreTabContainerWidget::UpdateInputSwitchers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "UpdateInputSwitchers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreTabContainerWidget.GetTab
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreTabWidget*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreTabWidget* UCoreTabContainerWidget::GetTab(int32 Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "GetTab");

	Params::CoreTabContainerWidget_GetTab Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.GetTabIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCoreTabContainerWidget::GetTabIndex(int32 Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "GetTabIndex");

	Params::CoreTabContainerWidget_GetTabIndex Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreLockedOverlayWidget.SetIsLocked
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    useAnimation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLockedOverlayWidget::SetIsLocked(bool IsLocked, bool useAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLockedOverlayWidget", "SetIsLocked");

	Params::CoreLockedOverlayWidget_SetIsLocked Parms{};

	Parms.IsLocked = IsLocked;
	Parms.useAnimation = useAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreTabWidget.HasLabelTooltip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreTabWidget::HasLabelTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "HasLabelTooltip");

	Params::CoreTabWidget_HasLabelTooltip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTabWidget.PostInit
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreTabWidget::PostInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "PostInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreTabWidget.SetIconSoftTexture
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        iconTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 forcedIconSize                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabWidget::SetIconSoftTexture(TSoftObjectPtr<class UTexture2D> iconTexture, const struct FVector2D& forcedIconSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "SetIconSoftTexture");

	Params::CoreTabWidget_SetIconSoftTexture Parms{};

	Parms.iconTexture = iconTexture;
	Parms.forcedIconSize = std::move(forcedIconSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabWidget.SetIconTexture
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UTexture2D*                       iconTexture                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 forcedIconSize                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabWidget::SetIconTexture(class UTexture2D* iconTexture, const struct FVector2D& forcedIconSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "SetIconTexture");

	Params::CoreTabWidget_SetIconTexture Parms{};

	Parms.iconTexture = iconTexture;
	Parms.forcedIconSize = std::move(forcedIconSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabWidget.SetNotificationVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    HasNotification                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabWidget::SetNotificationVisibility(bool HasNotification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "SetNotificationVisibility");

	Params::CoreTabWidget_SetNotificationVisibility Parms{};

	Parms.HasNotification = HasNotification;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabWidget.GetKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCoreTabWidget::GetKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "GetKey");

	Params::CoreTabWidget_GetKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTabWidget.GetTabText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreTabWidget::GetTabText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "GetTabText");

	Params::CoreTabWidget_GetTabText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchivesVignetteViewData& vignetteDataList                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteButtonWidget::SetData(const struct FArchivesVignetteViewData& vignetteDataList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteButtonWidget", "SetData");

	Params::CoreArchiveVignetteButtonWidget_SetData Parms{};

	Parms.vignetteDataList = std::move(vignetteDataList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetVignetteRead
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              IsRead                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteButtonWidget::SetVignetteRead(const bool IsRead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteButtonWidget", "SetVignetteRead");

	Params::CoreArchiveVignetteButtonWidget_SetVignetteRead Parms{};

	Parms.IsRead = IsRead;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetVisualData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      vignetteTitle                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      vignetteSubtitle                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      vignetteProgressText                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              displayProgress                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             vignetteProgress                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              isUnread                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      unreadIndicatorText                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              showCinematics                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              lockCinematics                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteButtonWidget::SetVisualData(const class FText& vignetteTitle, const class FText& vignetteSubtitle, const class FText& vignetteProgressText, const bool displayProgress, const float vignetteProgress, const bool isUnread, const class FText& unreadIndicatorText, const bool showCinematics, const bool lockCinematics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteButtonWidget", "SetVisualData");

	Params::CoreArchiveVignetteButtonWidget_SetVisualData Parms{};

	Parms.vignetteTitle = std::move(vignetteTitle);
	Parms.vignetteSubtitle = std::move(vignetteSubtitle);
	Parms.vignetteProgressText = std::move(vignetteProgressText);
	Parms.displayProgress = displayProgress;
	Parms.vignetteProgress = vignetteProgress;
	Parms.isUnread = isUnread;
	Parms.unreadIndicatorText = std::move(unreadIndicatorText);
	Parms.showCinematics = showCinematics;
	Parms.lockCinematics = lockCinematics;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetAvailabilityVisuals
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              IsAvailable                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuLoadoutPartWidget::SetAvailabilityVisuals(const bool IsAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetAvailabilityVisuals");

	Params::CoreMenuLoadoutPartWidget_SetAvailabilityVisuals Parms{};

	Parms.IsAvailable = IsAvailable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetDisplayLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ELoadoutSlotDisplayLocation       displayLocation                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuLoadoutPartWidget::SetDisplayLocation(const ELoadoutSlotDisplayLocation displayLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetDisplayLocation");

	Params::CoreMenuLoadoutPartWidget_SetDisplayLocation Parms{};

	Parms.displayLocation = displayLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetEmptyWidget
// (Native, Public)

void UCoreMenuLoadoutPartWidget::SetEmptyWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetEmptyWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetInventoryData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UMenuLoadoutPartViewData*   Data                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuLoadoutPartWidget::SetInventoryData(const class UMenuLoadoutPartViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetInventoryData");

	Params::CoreMenuLoadoutPartWidget_SetInventoryData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetLoadoutPartData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UMenuLoadoutPartViewData*   Data                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuLoadoutPartWidget::SetLoadoutPartData(const class UMenuLoadoutPartViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetLoadoutPartData");

	Params::CoreMenuLoadoutPartWidget_SetLoadoutPartData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetPlusSignVisibilityWhenEmpty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              showPlusSignWhenEmpty                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuLoadoutPartWidget::SetPlusSignVisibilityWhenEmpty(const bool showPlusSignWhenEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetPlusSignVisibilityWhenEmpty");

	Params::CoreMenuLoadoutPartWidget_SetPlusSignVisibilityWhenEmpty Parms{};

	Parms.showPlusSignWhenEmpty = showPlusSignWhenEmpty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetSelectedState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    selectedState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuLoadoutPartWidget::SetSelectedState(bool selectedState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetSelectedState");

	Params::CoreMenuLoadoutPartWidget_SetSelectedState Parms{};

	Parms.selectedState = selectedState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.UpdateBackgroundImage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreMenuLoadoutPartWidget::UpdateBackgroundImage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "UpdateBackgroundImage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetBeginnerModeTooltipText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreMenuLoadoutPartWidget::GetBeginnerModeTooltipText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "GetBeginnerModeTooltipText");

	Params::CoreMenuLoadoutPartWidget_GetBeginnerModeTooltipText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetLoadoutPartCanBeSelected
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreMenuLoadoutPartWidget::GetLoadoutPartCanBeSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "GetLoadoutPartCanBeSelected");

	Params::CoreMenuLoadoutPartWidget_GetLoadoutPartCanBeSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetLoadoutPartData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UMenuLoadoutPartViewData*   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UMenuLoadoutPartViewData* UCoreMenuLoadoutPartWidget::GetLoadoutPartData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "GetLoadoutPartData");

	Params::CoreMenuLoadoutPartWidget_GetLoadoutPartData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetSelectedState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreMenuLoadoutPartWidget::GetSelectedState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "GetSelectedState");

	Params::CoreMenuLoadoutPartWidget_GetSelectedState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetTooltipData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLoadoutTooltipData              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLoadoutTooltipData UCoreMenuLoadoutPartWidget::GetTooltipData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "GetTooltipData");

	Params::CoreMenuLoadoutPartWidget_GetTooltipData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetWidgetItemId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UCoreMenuLoadoutPartWidget::GetWidgetItemId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "GetWidgetItemId");

	Params::CoreMenuLoadoutPartWidget_GetWidgetItemId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetWidgetLockedState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreMenuLoadoutPartWidget::GetWidgetLockedState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "GetWidgetLockedState");

	Params::CoreMenuLoadoutPartWidget_GetWidgetLockedState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.ShouldShowAvailabilityVisuals
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreMenuLoadoutPartWidget::ShouldShowAvailabilityVisuals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "ShouldShowAvailabilityVisuals");

	Params::CoreMenuLoadoutPartWidget_ShouldShowAvailabilityVisuals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveVignetteCinematicButton.SetIsForceDisabled
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isForceDisabled_0                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteCinematicButton::SetIsForceDisabled(bool isForceDisabled_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteCinematicButton", "SetIsForceDisabled");

	Params::CoreArchiveVignetteCinematicButton_SetIsForceDisabled Parms{};

	Parms.isForceDisabled_0 = isForceDisabled_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveVignetteCinematicButton.UnlockCinematic
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreArchiveVignetteCinematicButton::UnlockCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteCinematicButton", "UnlockCinematic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveVignetteCinematicContainerWidget.UnlockCinematics
// (Final, Native, Public)

void UCoreArchiveVignetteCinematicContainerWidget::UnlockCinematics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteCinematicContainerWidget", "UnlockCinematics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMatchmakingReadyMarkerWidget.SetNumberOfMarkers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   numberOfMarkers                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMatchmakingReadyMarkerWidget::SetNumberOfMarkers(int32 numberOfMarkers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMatchmakingReadyMarkerWidget", "SetNumberOfMarkers");

	Params::CoreMatchmakingReadyMarkerWidget_SetNumberOfMarkers Parms{};

	Parms.numberOfMarkers = numberOfMarkers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMatchmakingReadyMarkerWidget.SetReadyStatus
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMatchmakingReadyStatusViewData&status                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreMatchmakingReadyMarkerWidget::SetReadyStatus(const struct FMatchmakingReadyStatusViewData& status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMatchmakingReadyMarkerWidget", "SetReadyStatus");

	Params::CoreMatchmakingReadyMarkerWidget_SetReadyStatus Parms{};

	Parms.status = std::move(status);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             entryNumber                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              IsRead                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              isImage                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteEntryButtonWidget::SetData(const int32 entryNumber, const bool IsRead, const bool isImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryButtonWidget", "SetData");

	Params::CoreArchiveVignetteEntryButtonWidget_SetData Parms{};

	Parms.entryNumber = entryNumber;
	Parms.IsRead = IsRead;
	Parms.isImage = isImage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.SetVisualData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             entryNumber                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              IsRead                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      unreadIndicatorText                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              isImage                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteEntryButtonWidget::SetVisualData(const int32 entryNumber, const bool IsRead, const class FText& unreadIndicatorText, const bool isImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryButtonWidget", "SetVisualData");

	Params::CoreArchiveVignetteEntryButtonWidget_SetVisualData Parms{};

	Parms.entryNumber = entryNumber;
	Parms.IsRead = IsRead;
	Parms.unreadIndicatorText = std::move(unreadIndicatorText);
	Parms.isImage = isImage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.UnlockEntry
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreArchiveVignetteEntryButtonWidget::UnlockEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryButtonWidget", "UnlockEntry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.GetEntryNumber
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UCoreArchiveVignetteEntryButtonWidget::GetEntryNumber() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryButtonWidget", "GetEntryNumber");

	Params::CoreArchiveVignetteEntryButtonWidget_GetEntryNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryContainerWidget.OnUnlockComplete
// (Final, Native, Public)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteEntryContainerWidget::OnUnlockComplete(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryContainerWidget", "OnUnlockComplete");

	Params::CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryContainerWidget.OnUnlockProgress
// (Final, Native, Public)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteEntryContainerWidget::OnUnlockProgress(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryContainerWidget", "OnUnlockProgress");

	Params::CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyTitleWidget.OnBloodPointBulkSpendingButtonClicked
// (Final, Native, Protected, BlueprintCallable)

void UCoreLobbyTitleWidget::OnBloodPointBulkSpendingButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyTitleWidget", "OnBloodPointBulkSpendingButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyTitleWidget.OnBloodPointBulkSpendingButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyTitleWidget::OnBloodPointBulkSpendingButtonHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyTitleWidget", "OnBloodPointBulkSpendingButtonHovered");

	Params::CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyTitleWidget.OnBloodPointBulkSpendingButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyTitleWidget::OnBloodPointBulkSpendingButtonUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyTitleWidget", "OnBloodPointBulkSpendingButtonUnhovered");

	Params::CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyTitleWidget.OnFadeInAnimationComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyTitleWidget::OnFadeInAnimationComplete(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyTitleWidget", "OnFadeInAnimationComplete");

	Params::CoreLobbyTitleWidget_OnFadeInAnimationComplete Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyTitleWidget.OnFadeOutAnimationComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyTitleWidget::OnFadeOutAnimationComplete(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyTitleWidget", "OnFadeOutAnimationComplete");

	Params::CoreLobbyTitleWidget_OnFadeOutAnimationComplete Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyTitleWidget.OnPrestigeHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyTitleWidget::OnPrestigeHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyTitleWidget", "OnPrestigeHovered");

	Params::CoreLobbyTitleWidget_OnPrestigeHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyTitleWidget.OnPrestigeUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyTitleWidget::OnPrestigeUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyTitleWidget", "OnPrestigeUnhovered");

	Params::CoreLobbyTitleWidget_OnPrestigeUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyTitleWidget.PlayLevelUpAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              isPrestigeUp                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyTitleWidget::PlayLevelUpAnimation(const bool isPrestigeUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyTitleWidget", "PlayLevelUpAnimation");

	Params::CoreLobbyTitleWidget_PlayLevelUpAnimation Parms{};

	Parms.isPrestigeUp = isPrestigeUp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreLobbyTitleWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLobbyTitleViewData&       LobbyTitleViewData                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreLobbyTitleWidget::SetData(const struct FLobbyTitleViewData& LobbyTitleViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyTitleWidget", "SetData");

	Params::CoreLobbyTitleWidget_SetData Parms{};

	Parms.LobbyTitleViewData = std::move(LobbyTitleViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyTitleWidget.SetLobbyTitleFadeOutAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreLobbyTitleWidget::SetLobbyTitleFadeOutAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyTitleWidget", "SetLobbyTitleFadeOutAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAuricCellsBundleWidget.OnBuyButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAuricCellsBundleWidget::OnBuyButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsBundleWidget", "OnBuyButtonClicked");

	Params::CoreAuricCellsBundleWidget_OnBuyButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAuricCellsBundleWidget.SetData
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAuricCellsBundleViewData& BundleData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreAuricCellsBundleWidget::SetData(const struct FAuricCellsBundleViewData& BundleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsBundleWidget", "SetData");

	Params::CoreAuricCellsBundleWidget_SetData Parms{};

	Parms.BundleData = std::move(BundleData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAuricCellsBundleWidget.SetRewardHighlight
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    rewardHighlight                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAuricCellsBundleWidget::SetRewardHighlight(bool rewardHighlight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsBundleWidget", "SetRewardHighlight");

	Params::CoreAuricCellsBundleWidget_SetRewardHighlight Parms{};

	Parms.rewardHighlight = rewardHighlight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreAuricCellsBundleWidget.SetupAsReward
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreAuricCellsBundleWidget::SetupAsReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsBundleWidget", "SetupAsReward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreAuricCellsContainerWidget.OnBuyAction
// (Final, Native, Protected)
// Parameters:
// class FName                             bundleId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAuricCellsContainerWidget::OnBuyAction(class FName bundleId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsContainerWidget", "OnBuyAction");

	Params::CoreAuricCellsContainerWidget_OnBuyAction Parms{};

	Parms.bundleId = bundleId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAuricCellsContainerWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FAuricCellsBundleViewData>&bundlesData                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreAuricCellsContainerWidget::SetData(const TArray<struct FAuricCellsBundleViewData>& bundlesData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsContainerWidget", "SetData");

	Params::CoreAuricCellsContainerWidget_SetData Parms{};

	Parms.bundlesData = std::move(bundlesData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuAddonWidget.GetAddonInventoryScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreMenuAddonWidget::GetAddonInventoryScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuAddonWidget", "GetAddonInventoryScale");

	Params::CoreMenuAddonWidget_GetAddonInventoryScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreAuricCellsWidget.OnBuyAction
// (Final, Native, Protected)
// Parameters:
// class FName                             bundleId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreAuricCellsWidget::OnBuyAction(class FName bundleId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsWidget", "OnBuyAction");

	Params::CoreAuricCellsWidget_OnBuyAction Parms{};

	Parms.bundleId = bundleId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreAuricCellsWidget.OnSupportACreatorInputSwitcherClicked
// (Final, Native, Protected)

void UCoreAuricCellsWidget::OnSupportACreatorInputSwitcherClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreAuricCellsWidget", "OnSupportACreatorInputSwitcherClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnConfirmButtonHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBloodPointBulkSpendingPopupWidget::OnConfirmButtonHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnConfirmButtonHovered");

	Params::CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnConfirmButtonUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBloodPointBulkSpendingPopupWidget::OnConfirmButtonUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnConfirmButtonUnhovered");

	Params::CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnConfirmClicked
// (Final, Native, Private)
// Parameters:
// ECurrencyType                           currencyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBloodPointBulkSpendingPopupWidget::OnConfirmClicked(ECurrencyType currencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnConfirmClicked");

	Params::CoreBloodPointBulkSpendingPopupWidget_OnConfirmClicked Parms{};

	Parms.currencyType = currencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnHitzoneHovered
// (Final, Native, Private)

void UCoreBloodPointBulkSpendingPopupWidget::OnHitzoneHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnHitzoneHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnHitzoneUnhovered
// (Final, Native, Private)

void UCoreBloodPointBulkSpendingPopupWidget::OnHitzoneUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnHitzoneUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnInputButtonPressed
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBloodPointBulkSpendingPopupWidget::OnInputButtonPressed(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnInputButtonPressed");

	Params::CoreBloodPointBulkSpendingPopupWidget_OnInputButtonPressed Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnInputButtonReleased
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBloodPointBulkSpendingPopupWidget::OnInputButtonReleased(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnInputButtonReleased");

	Params::CoreBloodPointBulkSpendingPopupWidget_OnInputButtonReleased Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnInputChanged
// (Final, Native, Protected)

void UCoreBloodPointBulkSpendingPopupWidget::OnInputChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnInputChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnInputPromptPressed
// (Final, Native, Private)

void UCoreBloodPointBulkSpendingPopupWidget::OnInputPromptPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnInputPromptPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnInputPromptReleased
// (Final, Native, Private)

void UCoreBloodPointBulkSpendingPopupWidget::OnInputPromptReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnInputPromptReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnLessInputTriggered
// (Final, Native, Private)

void UCoreBloodPointBulkSpendingPopupWidget::OnLessInputTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnLessInputTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnMaxInputTriggered
// (Final, Native, Private)

void UCoreBloodPointBulkSpendingPopupWidget::OnMaxInputTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnMaxInputTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnMinInputTriggered
// (Final, Native, Private)

void UCoreBloodPointBulkSpendingPopupWidget::OnMinInputTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnMinInputTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnMoreInputTriggered
// (Final, Native, Private)

void UCoreBloodPointBulkSpendingPopupWidget::OnMoreInputTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnMoreInputTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnValueChanged
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreBloodPointBulkSpendingPopupWidget::OnValueChanged(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnValueChanged");

	Params::CoreBloodPointBulkSpendingPopupWidget_OnValueChanged Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnValueCommitted
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             inCommitType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBloodPointBulkSpendingPopupWidget::OnValueCommitted(const class FText& InText, ETextCommit inCommitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBloodPointBulkSpendingPopupWidget", "OnValueCommitted");

	Params::CoreBloodPointBulkSpendingPopupWidget_OnValueCommitted Parms{};

	Parms.InText = std::move(InText);
	Parms.inCommitType = inCommitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuPerkWidget.PlayEmptySlotAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreMenuPerkWidget::PlayEmptySlotAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuPerkWidget", "PlayEmptySlotAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreMenuPerkWidget.PlayUnlockanimation
// (Native, Event, Public, BlueprintEvent)

void UCoreMenuPerkWidget::PlayUnlockanimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuPerkWidget", "PlayUnlockanimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuPerkWidget.SetMenuPerkLevel
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuPerkWidget::SetMenuPerkLevel(int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuPerkWidget", "SetMenuPerkLevel");

	Params::CoreMenuPerkWidget_SetMenuPerkLevel Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMenuPerkWidget.SetPerkLocked
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             perkUnlockLevel                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuPerkWidget::SetPerkLocked(const int32 perkUnlockLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuPerkWidget", "SetPerkLocked");

	Params::CoreMenuPerkWidget_SetPerkLocked Parms{};

	Parms.perkUnlockLevel = perkUnlockLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuPerkWidget.SetPerkUnlocked
// (Native, Event, Protected, BlueprintEvent)

void UCoreMenuPerkWidget::SetPerkUnlocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuPerkWidget", "SetPerkUnlocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuPerkWidget.StopAllUnlockAnimations
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreMenuPerkWidget::StopAllUnlockAnimations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuPerkWidget", "StopAllUnlockAnimations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreMenuPerkWidget.StopEmptySlotAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreMenuPerkWidget::StopEmptySlotAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuPerkWidget", "StopEmptySlotAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreChallengeCardListWidget.OnIsScrollableChanged
// (Final, Native, Protected)
// Parameters:
// const bool                              IsScrollable                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeCardListWidget::OnIsScrollableChanged(const bool IsScrollable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardListWidget", "OnIsScrollableChanged");

	Params::CoreChallengeCardListWidget_OnIsScrollableChanged Parms{};

	Parms.IsScrollable = IsScrollable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeCardListWidget.SetVisuals
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEmpty                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeCardListWidget::SetVisuals(bool IsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardListWidget", "SetVisuals");

	Params::CoreChallengeCardListWidget_SetVisuals Parms{};

	Parms.IsEmpty = IsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreChallengeCardListWidget.UpdateBackgroundVisuals
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreChallengeCardListWidget::UpdateBackgroundVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardListWidget", "UpdateBackgroundVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.OnRewardHoveredCallback
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeCardWidget::OnRewardHoveredCallback(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "OnRewardHoveredCallback");

	Params::CoreChallengeCardWidget_OnRewardHoveredCallback Parms{};

	Parms.targetButton = targetButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.OnRewardUnhoveredCallback
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeCardWidget::OnRewardUnhoveredCallback(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "OnRewardUnhoveredCallback");

	Params::CoreChallengeCardWidget_OnRewardUnhoveredCallback Parms{};

	Parms.targetButton = targetButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.UpdateHeaderBackground
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeCardWidget::UpdateHeaderBackground(EPlayerRole Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "UpdateHeaderBackground");

	Params::CoreChallengeCardWidget_UpdateHeaderBackground Parms{};

	Parms.Role = Role;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.UpdateRewardVisuals
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreChallengeCardWidget::UpdateRewardVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "UpdateRewardVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.UpdateVisuals
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCompleted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsHovered_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeCardWidget::UpdateVisuals(bool IsCompleted, bool IsHovered_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "UpdateVisuals");

	Params::CoreChallengeCardWidget_UpdateVisuals Parms{};

	Parms.IsCompleted = IsCompleted;
	Parms.IsHovered_0 = IsHovered_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.GetLabelTooltipText
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreChallengeCardWidget::GetLabelTooltipText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "GetLabelTooltipText");

	Params::CoreChallengeCardWidget_GetLabelTooltipText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreChallengeCardWidget.IsChallengeCompleted
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreChallengeCardWidget::IsChallengeCompleted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeCardWidget", "IsChallengeCompleted");

	Params::CoreChallengeCardWidget_IsChallengeCompleted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreChallengeFilterWidget.OnClearFiltersClicked
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeFilterWidget::OnClearFiltersClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeFilterWidget", "OnClearFiltersClicked");

	Params::CoreChallengeFilterWidget_OnClearFiltersClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeFilterWidget.OnSortingChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ESortingOption                          sorting                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESortingOrder                           Order                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeFilterWidget::OnSortingChanged(ESortingOption sorting, ESortingOrder Order)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeFilterWidget", "OnSortingChanged");

	Params::CoreChallengeFilterWidget_OnSortingChanged Parms{};

	Parms.sorting = sorting;
	Parms.Order = Order;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeIconWidget.SetChallengeData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FChallengeViewData&        ChallengeData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreChallengeIconWidget::SetChallengeData(const struct FChallengeViewData& ChallengeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeIconWidget", "SetChallengeData");

	Params::CoreChallengeIconWidget_SetChallengeData Parms{};

	Parms.ChallengeData = std::move(ChallengeData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeIconWidget.SetDefaultVisuals
// (Event, Protected, BlueprintEvent)
// Parameters:
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeIconWidget::SetDefaultVisuals(EPlayerRole Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeIconWidget", "SetDefaultVisuals");

	Params::CoreChallengeIconWidget_SetDefaultVisuals Parms{};

	Parms.Role = Role;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreExpandableListWidget.SetExpandable
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsExpandable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreExpandableListWidget::SetExpandable(bool IsExpandable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreExpandableListWidget", "SetExpandable");

	Params::CoreExpandableListWidget_SetExpandable Parms{};

	Parms.IsExpandable = IsExpandable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreExpandableListWidget.SetExpanded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    shouldBeExpanded                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreExpandableListWidget::SetExpanded(bool shouldBeExpanded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreExpandableListWidget", "SetExpanded");

	Params::CoreExpandableListWidget_SetExpanded Parms{};

	Parms.shouldBeExpanded = shouldBeExpanded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreExpandableListWidget.SetInitialVisuals
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsExpanded                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreExpandableListWidget::SetInitialVisuals(bool IsExpanded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreExpandableListWidget", "SetInitialVisuals");

	Params::CoreExpandableListWidget_SetInitialVisuals Parms{};

	Parms.IsExpanded = IsExpanded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreExpandableListWidget.UpdateVisuals
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreExpandableListWidget::UpdateVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreExpandableListWidget", "UpdateVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreExpandableListWidget.IsExpandable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreExpandableListWidget::IsExpandable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreExpandableListWidget", "IsExpandable");

	Params::CoreExpandableListWidget_IsExpandable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreExpandableListWidget.IsExpanded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreExpandableListWidget::IsExpanded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreExpandableListWidget", "IsExpanded");

	Params::CoreExpandableListWidget_IsExpanded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreChallengeMenuSubListWidget.IsCompleted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreChallengeMenuSubListWidget::IsCompleted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeMenuSubListWidget", "IsCompleted");

	Params::CoreChallengeMenuSubListWidget_IsCompleted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreChallengeProgressBarWidget.SetChallengeData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      descriptionText                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const float                             progressFraction                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      ProgressText                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   titleCharacterLimit                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeProgressBarWidget::SetChallengeData(const class FText& descriptionText, const float progressFraction, const class FText& ProgressText, int32 titleCharacterLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeProgressBarWidget", "SetChallengeData");

	Params::CoreChallengeProgressBarWidget_SetChallengeData Parms{};

	Parms.descriptionText = std::move(descriptionText);
	Parms.progressFraction = progressFraction;
	Parms.ProgressText = std::move(ProgressText);
	Parms.titleCharacterLimit = titleCharacterLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeSetItemWidget.SetChallengeSetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FChallengeSetMenuViewData& ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FChallengeSkinUIData&      challengeSkinData                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreChallengeSetItemWidget::SetChallengeSetData(const struct FChallengeSetMenuViewData& ViewData, const struct FChallengeSkinUIData& challengeSkinData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeSetItemWidget", "SetChallengeSetData");

	Params::CoreChallengeSetItemWidget_SetChallengeSetData Parms{};

	Parms.ViewData = std::move(ViewData);
	Parms.challengeSkinData = std::move(challengeSkinData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeSetItemWidget.SetColorBackground
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UColorTripleDataAsset*            Color                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeSetItemWidget::SetColorBackground(class UColorTripleDataAsset* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeSetItemWidget", "SetColorBackground");

	Params::CoreChallengeSetItemWidget_SetColorBackground Parms{};

	Parms.Color = Color;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreChallengeSetItemWidget.SetExpiredStateVisuals
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isExpired                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeSetItemWidget::SetExpiredStateVisuals(bool isExpired)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeSetItemWidget", "SetExpiredStateVisuals");

	Params::CoreChallengeSetItemWidget_SetExpiredStateVisuals Parms{};

	Parms.isExpired = isExpired;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreChallengeSetListWidget.OnItemSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeSetListWidget::OnItemSelected(class UCoreSelectableButtonWidget* Button, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeSetListWidget", "OnItemSelected");

	Params::CoreChallengeSetListWidget_OnItemSelected Parms{};

	Parms.Button = Button;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeSetListWidget.SetChallengeSetData
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<struct FChallengeSetMenuViewData>&challengeSetArray                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UDataTable*                       eventSkinDataTable                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeSetListWidget::SetChallengeSetData(const TArray<struct FChallengeSetMenuViewData>& challengeSetArray, class UDataTable* eventSkinDataTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeSetListWidget", "SetChallengeSetData");

	Params::CoreChallengeSetListWidget_SetChallengeSetData Parms{};

	Parms.challengeSetArray = std::move(challengeSetArray);
	Parms.eventSkinDataTable = eventSkinDataTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnBackButtonClicked
// (Final, Native, Protected)

void UCoreChallengesMenuWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengesMenuWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnChallengeSetSelected
// (Final, Native, Protected)
// Parameters:
// const class FString&                    ChallengeSetId                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    eventFrameLabel                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengesMenuWidget::OnChallengeSetSelected(const class FString& ChallengeSetId, const class FString& eventFrameLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengesMenuWidget", "OnChallengeSetSelected");

	Params::CoreChallengesMenuWidget_OnChallengeSetSelected Parms{};

	Parms.ChallengeSetId = std::move(ChallengeSetId);
	Parms.eventFrameLabel = std::move(eventFrameLabel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnGoToEventButtonClicked
// (Final, Native, Protected)

void UCoreChallengesMenuWidget::OnGoToEventButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengesMenuWidget", "OnGoToEventButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnGoToRiftPassButtonClicked
// (Final, Native, Protected)

void UCoreChallengesMenuWidget::OnGoToRiftPassButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengesMenuWidget", "OnGoToRiftPassButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnInfoButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengesMenuWidget::OnInfoButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengesMenuWidget", "OnInfoButtonClicked");

	Params::CoreChallengesMenuWidget_OnInfoButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnMenuTabSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengesMenuWidget::OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengesMenuWidget", "OnMenuTabSelected");

	Params::CoreChallengesMenuWidget_OnMenuTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnRiftButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengesMenuWidget::OnRiftButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengesMenuWidget", "OnRiftButtonClicked");

	Params::CoreChallengesMenuWidget_OnRiftButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnSettingsButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengesMenuWidget::OnSettingsButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengesMenuWidget", "OnSettingsButtonClicked");

	Params::CoreChallengesMenuWidget_OnSettingsButtonClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengesMenuWidget.SetUiTakeoverVisuals
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengesMenuWidget::SetUiTakeoverVisuals(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengesMenuWidget", "SetUiTakeoverVisuals");

	Params::CoreChallengesMenuWidget_SetUiTakeoverVisuals Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreChallengesMenuWidget.UpdateChallengeMenuVisuals
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FChallengeSkinUIData&      challengeSkinData                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreChallengesMenuWidget::UpdateChallengeMenuVisuals(const struct FChallengeSkinUIData& challengeSkinData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengesMenuWidget", "UpdateChallengeMenuVisuals");

	Params::CoreChallengesMenuWidget_UpdateChallengeMenuVisuals Parms{};

	Parms.challengeSkinData = std::move(challengeSkinData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreChallengeTrackerContainerWidget.OnReadingTimeDelayDone
// (Final, Native, Private)

void UCoreChallengeTrackerContainerWidget::OnReadingTimeDelayDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeTrackerContainerWidget", "OnReadingTimeDelayDone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeTrackerContainerWidget.OnWidgetClosingDone
// (Final, Native, Private)
// Parameters:
// class UCoreChallengeTrackerWidget*      trackerWidget                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeTrackerContainerWidget::OnWidgetClosingDone(class UCoreChallengeTrackerWidget* trackerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeTrackerContainerWidget", "OnWidgetClosingDone");

	Params::CoreChallengeTrackerContainerWidget_OnWidgetClosingDone Parms{};

	Parms.trackerWidget = trackerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeTrackerContainerWidget.OnWidgetOpeningDone
// (Final, Native, Private)
// Parameters:
// class UCoreChallengeTrackerWidget*      trackerWidget                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeTrackerContainerWidget::OnWidgetOpeningDone(class UCoreChallengeTrackerWidget* trackerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeTrackerContainerWidget", "OnWidgetOpeningDone");

	Params::CoreChallengeTrackerContainerWidget_OnWidgetOpeningDone Parms{};

	Parms.trackerWidget = trackerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeTrackerContainerWidget.OnWidgetProgressingDone
// (Final, Native, Private)
// Parameters:
// class UCoreChallengeTrackerWidget*      trackerWidget                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChallengeTrackerContainerWidget::OnWidgetProgressingDone(class UCoreChallengeTrackerWidget* trackerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeTrackerContainerWidget", "OnWidgetProgressingDone");

	Params::CoreChallengeTrackerContainerWidget_OnWidgetProgressingDone Parms{};

	Parms.trackerWidget = trackerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChallengeTrackerWidget.GetChallengeSetIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    eventFrameLabel                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> UCoreChallengeTrackerWidget::GetChallengeSetIcon(const class FString& eventFrameLabel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChallengeTrackerWidget", "GetChallengeSetIcon");

	Params::CoreChallengeTrackerWidget_GetChallengeSetIcon Parms{};

	Parms.eventFrameLabel = std::move(eventFrameLabel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreCharacterPerksWidget.HideTooltip
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                unhoveredSlotWidget                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCharacterPerksWidget::HideTooltip(class UCoreButtonWidget* unhoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCharacterPerksWidget", "HideTooltip");

	Params::CoreCharacterPerksWidget_HideTooltip Parms{};

	Parms.unhoveredSlotWidget = unhoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCharacterPerksWidget.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<class UMenuPerkViewData*>& CharacterUniquePerksViewData                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const EPlayerRole                       Role                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMenuPowerViewData*               KillerPowerViewData                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              keepKillerPowerSizeWhenNotVisible                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCharacterPerksWidget::SetData(const TArray<class UMenuPerkViewData*>& CharacterUniquePerksViewData, const EPlayerRole Role, class UMenuPowerViewData* KillerPowerViewData, const bool keepKillerPowerSizeWhenNotVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCharacterPerksWidget", "SetData");

	Params::CoreCharacterPerksWidget_SetData Parms{};

	Parms.CharacterUniquePerksViewData = std::move(CharacterUniquePerksViewData);
	Parms.Role = Role;
	Parms.KillerPowerViewData = KillerPowerViewData;
	Parms.keepKillerPowerSizeWhenNotVisible = keepKillerPowerSizeWhenNotVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCharacterPerksWidget.SetPerkData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreMenuPerkWidget*              perkWidget                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMenuPerkViewData*                PerkViewData                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCharacterPerksWidget::SetPerkData(class UCoreMenuPerkWidget* perkWidget, class UMenuPerkViewData* PerkViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCharacterPerksWidget", "SetPerkData");

	Params::CoreCharacterPerksWidget_SetPerkData Parms{};

	Parms.perkWidget = perkWidget;
	Parms.PerkViewData = PerkViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCharacterPerksWidget.ShowTooltip
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                hoveredSlotWidget                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCharacterPerksWidget::ShowTooltip(class UCoreButtonWidget* hoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCharacterPerksWidget", "ShowTooltip");

	Params::CoreCharacterPerksWidget_ShowTooltip Parms{};

	Parms.hoveredSlotWidget = hoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerProfileWidget.OnPlayerCardBannerHovered
// (Final, Native, Private)

void UCorePlayerProfileWidget::OnPlayerCardBannerHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerProfileWidget", "OnPlayerCardBannerHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerProfileWidget.OnPlayerCardBannerUnhovered
// (Final, Native, Private)

void UCorePlayerProfileWidget::OnPlayerCardBannerUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerProfileWidget", "OnPlayerCardBannerUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerProfileWidget.OnPlayerCardButtonHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerProfileWidget::OnPlayerCardButtonHovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerProfileWidget", "OnPlayerCardButtonHovered");

	Params::CorePlayerProfileWidget_OnPlayerCardButtonHovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerProfileWidget.OnPlayerCardButtonUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerProfileWidget::OnPlayerCardButtonUnhovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerProfileWidget", "OnPlayerCardButtonUnhovered");

	Params::CorePlayerProfileWidget_OnPlayerCardButtonUnhovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerProfileWidget.OnPlayerProfileClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerProfileWidget::OnPlayerProfileClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerProfileWidget", "OnPlayerProfileClicked");

	Params::CorePlayerProfileWidget_OnPlayerProfileClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerProfileWidget.SetBadgeBannerData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPlayerCardViewData&       Badge                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FPlayerCardViewData&       Banner                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              showBanner                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerProfileWidget::SetBadgeBannerData(const struct FPlayerCardViewData& Badge, const struct FPlayerCardViewData& Banner, const bool showBanner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerProfileWidget", "SetBadgeBannerData");

	Params::CorePlayerProfileWidget_SetBadgeBannerData Parms{};

	Parms.Badge = std::move(Badge);
	Parms.Banner = std::move(Banner);
	Parms.showBanner = showBanner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerProfileWidget.SetPlayerCardAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              IsAnimationPlaying_0                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerProfileWidget::SetPlayerCardAnimation(const bool IsAnimationPlaying_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerProfileWidget", "SetPlayerCardAnimation");

	Params::CorePlayerProfileWidget_SetPlayerCardAnimation Parms{};

	Parms.IsAnimationPlaying_0 = IsAnimationPlaying_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreRewardWidget.BindHoverBorder
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              bind                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWidget::BindHoverBorder(const bool bind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "BindHoverBorder");

	Params::CoreRewardWidget_BindHoverBorder Parms{};

	Parms.bind = bind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.OnButtonHovered
// (Native, Protected)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWidget::OnButtonHovered(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "OnButtonHovered");

	Params::CoreRewardWidget_OnButtonHovered Parms{};

	Parms.targetButton = targetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.OnButtonSelectedChanged
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected_0                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWidget::OnButtonSelectedChanged(class UCoreSelectableButtonWidget* targetButton, bool IsSelected_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "OnButtonSelectedChanged");

	Params::CoreRewardWidget_OnButtonSelectedChanged Parms{};

	Parms.targetButton = targetButton;
	Parms.IsSelected_0 = IsSelected_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.OnButtonUnhovered
// (Native, Protected)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWidget::OnButtonUnhovered(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "OnButtonUnhovered");

	Params::CoreRewardWidget_OnButtonUnhovered Parms{};

	Parms.targetButton = targetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.SetIsLocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsLocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    useAnimation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWidget::SetIsLocked(bool IsLocked, bool useAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "SetIsLocked");

	Params::CoreRewardWidget_SetIsLocked Parms{};

	Parms.IsLocked = IsLocked;
	Parms.useAnimation = useAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.SetRewardData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRewardViewData&           RewardData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreRewardWidget::SetRewardData(const struct FRewardViewData& RewardData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "SetRewardData");

	Params::CoreRewardWidget_SetRewardData Parms{};

	Parms.RewardData = std::move(RewardData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.SetRewardScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWidget::SetRewardScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "SetRewardScale");

	Params::CoreRewardWidget_SetRewardScale Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.SetTooltipAlignment
// (Native, Public, BlueprintCallable)
// Parameters:
// const ETooltipHorizontalAlignment       Alignment                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWidget::SetTooltipAlignment(const ETooltipHorizontalAlignment Alignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "SetTooltipAlignment");

	Params::CoreRewardWidget_SetTooltipAlignment Parms{};

	Parms.Alignment = Alignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCharacterRewardWidget.SetCharacterRewardData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FCharacterRewardViewData&  CharacterRewardViewData                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCharacterRewardWidget::SetCharacterRewardData(const struct FCharacterRewardViewData& CharacterRewardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCharacterRewardWidget", "SetCharacterRewardData");

	Params::CoreCharacterRewardWidget_SetCharacterRewardData Parms{};

	Parms.CharacterRewardViewData = std::move(CharacterRewardViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerCardAnimationWidget.SetMaterialAnimated
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    IsAnimated                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerCardAnimationWidget::SetMaterialAnimated(bool IsAnimated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerCardAnimationWidget", "SetMaterialAnimated");

	Params::CorePlayerCardAnimationWidget_SetMaterialAnimated Parms{};

	Parms.IsAnimated = IsAnimated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChatMessageWidget.SetPlayerMessage
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const int32                             PlayerIndex                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChatMessageWidget::SetPlayerMessage(const int32 PlayerIndex, const class FString& PlayerName, const class FString& Message) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChatMessageWidget", "SetPlayerMessage");

	Params::CoreChatMessageWidget_SetPlayerMessage Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.PlayerName = std::move(PlayerName);
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChatMessageWidget.SetSystemMessage
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChatMessageWidget::SetSystemMessage(const class FString& Message) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChatMessageWidget", "SetSystemMessage");

	Params::CoreChatMessageWidget_SetSystemMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChatMessageWidget.SetSystemWarningMessage
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChatMessageWidget::SetSystemWarningMessage(const class FString& Message) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChatMessageWidget", "SetSystemWarningMessage");

	Params::CoreChatMessageWidget_SetSystemWarningMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChatWidget.OnChatScrollBoxHovered
// (Final, Native, Private)

void UCoreChatWidget::OnChatScrollBoxHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChatWidget", "OnChatScrollBoxHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChatWidget.OnChatScrollBoxUnHovered
// (Final, Native, Private)

void UCoreChatWidget::OnChatScrollBoxUnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChatWidget", "OnChatScrollBoxUnHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChatWidget.OnCollapseClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                CoreButtonWidget                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChatWidget::OnCollapseClicked(class UCoreButtonWidget* CoreButtonWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChatWidget", "OnCollapseClicked");

	Params::CoreChatWidget_OnCollapseClicked Parms{};

	Parms.CoreButtonWidget = CoreButtonWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChatWidget.OnExpandClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                CoreButtonWidget                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChatWidget::OnExpandClicked(class UCoreButtonWidget* CoreButtonWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChatWidget", "OnExpandClicked");

	Params::CoreChatWidget_OnExpandClicked Parms{};

	Parms.CoreButtonWidget = CoreButtonWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChatWidget.OnIsScrollableChanged
// (Final, Native, Private)
// Parameters:
// const bool                              IsScrollable                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChatWidget::OnIsScrollableChanged(const bool IsScrollable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChatWidget", "OnIsScrollableChanged");

	Params::CoreChatWidget_OnIsScrollableChanged Parms{};

	Parms.IsScrollable = IsScrollable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreChatWidget.OnTextCommitted
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreChatWidget::OnTextCommitted(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreChatWidget", "OnTextCommitted");

	Params::CoreChatWidget_OnTextCommitted Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.CheckNextPendingButtonUpdate
// (Final, Native, Private)

void UCoreOnboardingTutorialPanelWidget::CheckNextPendingButtonUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "CheckNextPendingButtonUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.NextPendingButtonUpdated
// (Final, Native, Private)

void UCoreOnboardingTutorialPanelWidget::NextPendingButtonUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "NextPendingButtonUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.SetTutorialDescription
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      Description                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    isWarning                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialPanelWidget::SetTutorialDescription(const class FText& Description, bool isWarning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "SetTutorialDescription");

	Params::CoreOnboardingTutorialPanelWidget_SetTutorialDescription Parms{};

	Parms.Description = std::move(Description);
	Parms.isWarning = isWarning;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.SetTutorialSeparators
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class FString&                    completedStepId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialPanelWidget::SetTutorialSeparators(const class FString& completedStepId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "SetTutorialSeparators");

	Params::CoreOnboardingTutorialPanelWidget_SetTutorialSeparators Parms{};

	Parms.completedStepId = std::move(completedStepId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.TryBroadcastSelectedTutorial
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialPanelWidget::TryBroadcastSelectedTutorial(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "TryBroadcastSelectedTutorial");

	Params::CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial Parms{};

	Parms.buttonTarget = buttonTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCreditsWidget.OnScrollEnd
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCreditsWidget::OnScrollEnd(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCreditsWidget", "OnScrollEnd");

	Params::CoreCreditsWidget_OnScrollEnd Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCreditsWidget.ScrollText
// (Final, Native, Private)

void UCoreCreditsWidget::ScrollText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCreditsWidget", "ScrollText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerButtonWidget.SetKeyOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      keyOverride                                            (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerButtonWidget::SetKeyOverride(const struct FKey& keyOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerButtonWidget", "SetKeyOverride");

	Params::CoreKeyListenerButtonWidget_SetKeyOverride Parms{};

	Parms.keyOverride = std::move(keyOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerButtonWidget.SetUIAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EUIActionType                     ActionType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerButtonWidget::SetUIAction(const EUIActionType ActionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerButtonWidget", "SetUIAction");

	Params::CoreKeyListenerButtonWidget_SetUIAction Parms{};

	Parms.ActionType = ActionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerLevelWidget.AnimateLevelUp
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCorePlayerLevelWidget::AnimateLevelUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerLevelWidget", "AnimateLevelUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CorePlayerLevelWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPlayerLevelViewData&      ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCorePlayerLevelWidget::SetData(const struct FPlayerLevelViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerLevelWidget", "SetData");

	Params::CorePlayerLevelWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCurrencyButtonWidget.OnCurrencyButtonPressed
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCurrencyButtonWidget::OnCurrencyButtonPressed(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyButtonWidget", "OnCurrencyButtonPressed");

	Params::CoreCurrencyButtonWidget_OnCurrencyButtonPressed Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyButtonWidget.SetCurrencyData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPriceTagViewData&         CurrencyData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyButtonWidget::SetCurrencyData(const struct FPriceTagViewData& CurrencyData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyButtonWidget", "SetCurrencyData");

	Params::CoreCurrencyButtonWidget_SetCurrencyData Parms{};

	Parms.CurrencyData = std::move(CurrencyData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyButtonWidget.SetModalEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              IsEnabled_0                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCurrencyButtonWidget::SetModalEnabled(const bool IsEnabled_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyButtonWidget", "SetModalEnabled");

	Params::CoreCurrencyButtonWidget_SetModalEnabled Parms{};

	Parms.IsEnabled_0 = IsEnabled_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyButtonWidget.GetCurrencyType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECurrencyType                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECurrencyType UCoreCurrencyButtonWidget::GetCurrencyType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyButtonWidget", "GetCurrencyType");

	Params::CoreCurrencyButtonWidget_GetCurrencyType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreCurrencyButtonWidget.SetBackgroundVisible
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const bool                              ShowBackground                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCurrencyButtonWidget::SetBackgroundVisible(const bool ShowBackground) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyButtonWidget", "SetBackgroundVisible");

	Params::CoreCurrencyButtonWidget_SetBackgroundVisible Parms{};

	Parms.ShowBackground = ShowBackground;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyExpirationLabelWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FCurrencyExpirationLabelViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyExpirationLabelWidget::SetData(const struct FCurrencyExpirationLabelViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyExpirationLabelWidget", "SetData");

	Params::CoreCurrencyExpirationLabelWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePowerBundleWidget.SetActiveState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePowerBundleWidget::SetActiveState(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePowerBundleWidget", "SetActiveState");

	Params::CorePowerBundleWidget_SetActiveState Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCurrencyForTooltipsWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FCurrencyProgressionRewardViewData&currencyRewardViewData                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyForTooltipsWidget::SetData(const struct FCurrencyProgressionRewardViewData& currencyRewardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyForTooltipsWidget", "SetData");

	Params::CoreCurrencyForTooltipsWidget_SetData Parms{};

	Parms.currencyRewardViewData = std::move(currencyRewardViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.OnAlignmentChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// ETextJustify                            newAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::OnAlignmentChanged(ETextJustify newAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "OnAlignmentChanged");

	Params::CoreKeyListenerInputPromptWidget_OnAlignmentChanged Parms{};

	Parms.newAlignment = newAlignment;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.OnChargingComplete
// (Event, Protected, BlueprintEvent)

void UCoreKeyListenerInputPromptWidget::OnChargingComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "OnChargingComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.OnChargingTick
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::OnChargingTick(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "OnChargingTick");

	Params::CoreKeyListenerInputPromptWidget_OnChargingTick Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.OnEnabledChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::OnEnabledChanged(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "OnEnabledChanged");

	Params::CoreKeyListenerInputPromptWidget_OnEnabledChanged Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SendAnalyticsData
// (Final, Native, Private)

void UCoreKeyListenerInputPromptWidget::SendAnalyticsData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SendAnalyticsData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetAdditionalIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        iconTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> iconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetAdditionalIcon");

	Params::CoreKeyListenerInputPromptWidget_SetAdditionalIcon Parms{};

	Parms.iconTexture = iconTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextJustify                            newAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetAlignment(ETextJustify newAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetAlignment");

	Params::CoreKeyListenerInputPromptWidget_SetAlignment Parms{};

	Parms.newAlignment = newAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetBetaFeatureOverlayVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsVisible_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetBetaFeatureOverlayVisible(bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetBetaFeatureOverlayVisible");

	Params::CoreKeyListenerInputPromptWidget_SetBetaFeatureOverlayVisible Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetChargeable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isChargeable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      holdingAnimCurve                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetChargeable(bool isChargeable, class UCurveFloat* holdingAnimCurve, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetChargeable");

	Params::CoreKeyListenerInputPromptWidget_SetChargeable Parms{};

	Parms.isChargeable = isChargeable;
	Parms.holdingAnimCurve = holdingAnimCurve;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetEnabled");

	Params::CoreKeyListenerInputPromptWidget_SetEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetKeyOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      keyOverride                                            (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetKeyOverride(const struct FKey& keyOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetKeyOverride");

	Params::CoreKeyListenerInputPromptWidget_SetKeyOverride Parms{};

	Parms.keyOverride = std::move(keyOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetLabel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      label                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetLabel(const class FText& label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetLabel");

	Params::CoreKeyListenerInputPromptWidget_SetLabel Parms{};

	Parms.label = std::move(label);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetRepeatable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isRepeatable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      repetitionDelayCurve                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetRepeatable(bool isRepeatable, class UCurveFloat* repetitionDelayCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetRepeatable");

	Params::CoreKeyListenerInputPromptWidget_SetRepeatable Parms{};

	Parms.isRepeatable = isRepeatable;
	Parms.repetitionDelayCurve = repetitionDelayCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetUIAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EUIActionType                     ActionType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetUIAction(const EUIActionType ActionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetUIAction");

	Params::CoreKeyListenerInputPromptWidget_SetUIAction Parms{};

	Parms.ActionType = ActionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.IsCharging
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreKeyListenerInputPromptWidget::IsCharging() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "IsCharging");

	Params::CoreKeyListenerInputPromptWidget_IsCharging Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreKeyListenerInputPromptWidget::IsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "IsEnabled");

	Params::CoreKeyListenerInputPromptWidget_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerSocialOptionButtonWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPlayerSocialOptionViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePlayerSocialOptionButtonWidget::SetData(const struct FPlayerSocialOptionViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerSocialOptionButtonWidget", "SetData");

	Params::CorePlayerSocialOptionButtonWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerSocialOptionButtonWidget.UpdateVisual
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCorePlayerSocialOptionButtonWidget::UpdateVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerSocialOptionButtonWidget", "UpdateVisual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreCurrencyInputPromptWidget.SetCurrencyData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPriceTagViewData&         CurrencyData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyInputPromptWidget::SetCurrencyData(const struct FPriceTagViewData& CurrencyData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputPromptWidget", "SetCurrencyData");

	Params::CoreCurrencyInputPromptWidget_SetCurrencyData Parms{};

	Parms.CurrencyData = std::move(CurrencyData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyInputPromptWidget.SetModalEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              IsEnabled_0                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCurrencyInputPromptWidget::SetModalEnabled(const bool IsEnabled_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputPromptWidget", "SetModalEnabled");

	Params::CoreCurrencyInputPromptWidget_SetModalEnabled Parms{};

	Parms.IsEnabled_0 = IsEnabled_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyInputPromptWidget.GetCurrencyType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECurrencyType                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECurrencyType UCoreCurrencyInputPromptWidget::GetCurrencyType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputPromptWidget", "GetCurrencyType");

	Params::CoreCurrencyInputPromptWidget_GetCurrencyType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreCurrencyInputPromptWidget.SetBackgroundVisible
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const bool                              ShowBackground                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCurrencyInputPromptWidget::SetBackgroundVisible(const bool ShowBackground) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputPromptWidget", "SetBackgroundVisible");

	Params::CoreCurrencyInputPromptWidget_SetBackgroundVisible Parms{};

	Parms.ShowBackground = ShowBackground;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.OnAlignmentChanged
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// ETextJustify                            newAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::OnAlignmentChanged(ETextJustify newAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "OnAlignmentChanged");

	Params::CoreInputSwitcherWidget_OnAlignmentChanged Parms{};

	Parms.newAlignment = newAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.OnButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::OnButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "OnButtonClicked");

	Params::CoreInputSwitcherWidget_OnButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.OnInputPromptTriggered
// (Final, Native, Private)

void UCoreInputSwitcherWidget::OnInputPromptTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "OnInputPromptTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetAdditionalIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        iconTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> iconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetAdditionalIcon");

	Params::CoreInputSwitcherWidget_SetAdditionalIcon Parms{};

	Parms.iconTexture = iconTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextJustify                            newAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetAlignment(ETextJustify newAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetAlignment");

	Params::CoreInputSwitcherWidget_SetAlignment Parms{};

	Parms.newAlignment = newAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetBackground
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMaterialInstance> backgroundMaterial                                     (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetBackground(TSoftObjectPtr<class UMaterialInstance> backgroundMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetBackground");

	Params::CoreInputSwitcherWidget_SetBackground Parms{};

	Parms.backgroundMaterial = backgroundMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetChargeable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isChargeable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      holdingAnimCurve                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetChargeable(bool isChargeable, class UCurveFloat* holdingAnimCurve, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetChargeable");

	Params::CoreInputSwitcherWidget_SetChargeable Parms{};

	Parms.isChargeable = isChargeable;
	Parms.holdingAnimCurve = holdingAnimCurve;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetEnabled");

	Params::CoreInputSwitcherWidget_SetEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetKeyOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      keyOverride                                            (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetKeyOverride(const struct FKey& keyOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetKeyOverride");

	Params::CoreInputSwitcherWidget_SetKeyOverride Parms{};

	Parms.keyOverride = std::move(keyOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetLabel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      label                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetLabel(const class FText& label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetLabel");

	Params::CoreInputSwitcherWidget_SetLabel Parms{};

	Parms.label = std::move(label);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetRepeatable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isRepeatable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      repetitionDelayCurve                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetRepeatable(bool isRepeatable, class UCurveFloat* repetitionDelayCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetRepeatable");

	Params::CoreInputSwitcherWidget_SetRepeatable Parms{};

	Parms.isRepeatable = isRepeatable;
	Parms.repetitionDelayCurve = repetitionDelayCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetUIAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EUIActionType                     ActionType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetUIAction(const EUIActionType ActionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetUIAction");

	Params::CoreInputSwitcherWidget_SetUIAction Parms{};

	Parms.ActionType = ActionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.GetButton
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreButtonWidget*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreButtonWidget* UCoreInputSwitcherWidget::GetButton() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "GetButton");

	Params::CoreInputSwitcherWidget_GetButton Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.GetEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInputSwitcherWidget::GetEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "GetEnabled");

	Params::CoreInputSwitcherWidget_GetEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.GetInputPrompt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreKeyListenerInputPromptWidget* UCoreInputSwitcherWidget::GetInputPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "GetInputPrompt");

	Params::CoreInputSwitcherWidget_GetInputPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerExpGaugeWidget.Add
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             bonusXp                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerExpGaugeWidget::Add(const int32 bonusXp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerExpGaugeWidget", "Add");

	Params::CorePlayerExpGaugeWidget_Add Parms{};

	Parms.bonusXp = bonusXp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerExpGaugeWidget.OnUpdateComplete
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerExpGaugeWidget::OnUpdateComplete(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerExpGaugeWidget", "OnUpdateComplete");

	Params::CorePlayerExpGaugeWidget_OnUpdateComplete Parms{};

	Parms.tween = tween;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerExpGaugeWidget.OnUpdateProgress
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerExpGaugeWidget::OnUpdateProgress(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerExpGaugeWidget", "OnUpdateProgress");

	Params::CorePlayerExpGaugeWidget_OnUpdateProgress Parms{};

	Parms.tween = tween;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerExpGaugeWidget.SetViewData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPlayerLevelViewData&      playerViewData                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCorePlayerExpGaugeWidget::SetViewData(const struct FPlayerLevelViewData& playerViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerExpGaugeWidget", "SetViewData");

	Params::CorePlayerExpGaugeWidget_SetViewData Parms{};

	Parms.playerViewData = std::move(playerViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCurrencyInputSwitcherWidget.OnInputSwitcherTriggered
// (Final, Native, Private)

void UCoreCurrencyInputSwitcherWidget::OnInputSwitcherTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputSwitcherWidget", "OnInputSwitcherTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyInputSwitcherWidget.SetBackgroundVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              ShowBackground                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCurrencyInputSwitcherWidget::SetBackgroundVisible(const bool ShowBackground)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputSwitcherWidget", "SetBackgroundVisible");

	Params::CoreCurrencyInputSwitcherWidget_SetBackgroundVisible Parms{};

	Parms.ShowBackground = ShowBackground;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyInputSwitcherWidget.SetCurrencyData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPriceTagViewData&         CurrencyData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyInputSwitcherWidget::SetCurrencyData(const struct FPriceTagViewData& CurrencyData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputSwitcherWidget", "SetCurrencyData");

	Params::CoreCurrencyInputSwitcherWidget_SetCurrencyData Parms{};

	Parms.CurrencyData = std::move(CurrencyData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyInputSwitcherWidget.GetCurrencyType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECurrencyType                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECurrencyType UCoreCurrencyInputSwitcherWidget::GetCurrencyType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyInputSwitcherWidget", "GetCurrencyType");

	Params::CoreCurrencyInputSwitcherWidget_GetCurrencyType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreCurrencyLabelWidget.PlayNotEnoughCurrency
// (Event, Public, BlueprintEvent)

void UCoreCurrencyLabelWidget::PlayNotEnoughCurrency()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyLabelWidget", "PlayNotEnoughCurrency");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreCurrencyLabelWidget.SetData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FCurrencyLabelViewData&    ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyLabelWidget::SetData(const struct FCurrencyLabelViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyLabelWidget", "SetData");

	Params::CoreCurrencyLabelWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCurrencyLabelWidget.UpdateCurrency
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   newBalance                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   previousBalance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCurrencyLabelWidget::UpdateCurrency(int32 newBalance, int32 previousBalance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyLabelWidget", "UpdateCurrency");

	Params::CoreCurrencyLabelWidget_UpdateCurrency Parms{};

	Parms.newBalance = newBalance;
	Parms.previousBalance = previousBalance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerStatusKillerEffectWidget.ClearVisual
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCorePlayerStatusKillerEffectWidget::ClearVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusKillerEffectWidget", "ClearVisual");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerStatusKillerEffectWidget.SetKillerData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPlayerStatusViewData&     Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePlayerStatusKillerEffectWidget::SetKillerData(const struct FPlayerStatusViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusKillerEffectWidget", "SetKillerData");

	Params::CorePlayerStatusKillerEffectWidget_SetKillerData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerStatusKillerEffectK07Widget.AfflictionHit
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCorePlayerStatusKillerEffectK07Widget::AfflictionHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusKillerEffectK07Widget", "AfflictionHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreCurrencyProgressionRewardWidget.SetCurrencyProgressionRewardData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FCurrencyProgressionRewardViewData&CurrencyProgressionRewardViewData                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyProgressionRewardWidget::SetCurrencyProgressionRewardData(const struct FCurrencyProgressionRewardViewData& CurrencyProgressionRewardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyProgressionRewardWidget", "SetCurrencyProgressionRewardData");

	Params::CoreCurrencyProgressionRewardWidget_SetCurrencyProgressionRewardData Parms{};

	Parms.CurrencyProgressionRewardViewData = std::move(CurrencyProgressionRewardViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCustomizationItemSlotWrapper.SetAsEmptySlot
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              isEmptySlot                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCustomizationItemSlotWrapper::SetAsEmptySlot(const bool isEmptySlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCustomizationItemSlotWrapper", "SetAsEmptySlot");

	Params::CoreCustomizationItemSlotWrapper_SetAsEmptySlot Parms{};

	Parms.isEmptySlot = isEmptySlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCustomizationItemSlotWrapper.GetCustomizationItemWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreStoreCustomizationItemWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreStoreCustomizationItemWidget* UCoreCustomizationItemSlotWrapper::GetCustomizationItemWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCustomizationItemSlotWrapper", "GetCustomizationItemWidget");

	Params::CoreCustomizationItemSlotWrapper_GetCustomizationItemWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePriceTagWidget.SetBackgroundVisible
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              ShowBackground_0                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePriceTagWidget::SetBackgroundVisible(const bool ShowBackground_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePriceTagWidget", "SetBackgroundVisible");

	Params::CorePriceTagWidget_SetBackgroundVisible Parms{};

	Parms.ShowBackground_0 = ShowBackground_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePriceTagWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPriceTagViewData&         ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePriceTagWidget::SetData(const struct FPriceTagViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePriceTagWidget", "SetData");

	Params::CorePriceTagWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePriceTagWidget.SetDiscountTagSpacing
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const float                             bottomPadding                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePriceTagWidget::SetDiscountTagSpacing(const float bottomPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePriceTagWidget", "SetDiscountTagSpacing");

	Params::CorePriceTagWidget_SetDiscountTagSpacing Parms{};

	Parms.bottomPadding = bottomPadding;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePriceTagWidget.SetHighlightInsufficientCurrency
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              Highlight                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePriceTagWidget::SetHighlightInsufficientCurrency(const bool Highlight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePriceTagWidget", "SetHighlightInsufficientCurrency");

	Params::CorePriceTagWidget_SetHighlightInsufficientCurrency Parms{};

	Parms.Highlight = Highlight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePriceTagWidget.UpdatePriceTagScale
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const float                             priceTagScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePriceTagWidget::UpdatePriceTagScale(const float priceTagScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePriceTagWidget", "UpdatePriceTagScale");

	Params::CorePriceTagWidget_UpdatePriceTagScale Parms{};

	Parms.priceTagScale = priceTagScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCustomizationRewardWidget.SetCustomizationRewardData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FCustomizationRewardViewData&CustomizationRewardViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCustomizationRewardWidget::SetCustomizationRewardData(const struct FCustomizationRewardViewData& CustomizationRewardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCustomizationRewardWidget", "SetCustomizationRewardData");

	Params::CoreCustomizationRewardWidget_SetCustomizationRewardData Parms{};

	Parms.CustomizationRewardViewData = std::move(CustomizationRewardViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisabledStateOverlayWidget.SetOverlayImage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const EDisabledItemOption               DisabledItemOption                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreDisabledStateOverlayWidget::SetOverlayImage(const EDisabledItemOption DisabledItemOption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisabledStateOverlayWidget", "SetOverlayImage");

	Params::CoreDisabledStateOverlayWidget_SetOverlayImage Parms{};

	Parms.DisabledItemOption = DisabledItemOption;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisplayStandWidget.OnDrag
// (Final, Native, Protected, HasDefaults)
// Parameters:
// const struct FVector2D&                 cursorDelta                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreDisplayStandWidget::OnDrag(const struct FVector2D& cursorDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisplayStandWidget", "OnDrag");

	Params::CoreDisplayStandWidget_OnDrag Parms{};

	Parms.cursorDelta = std::move(cursorDelta);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisplayStandWidget.SetDisplayPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*DisplayPrompt                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreDisplayStandWidget::SetDisplayPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisplayStandWidget", "SetDisplayPrompt");

	Params::CoreDisplayStandWidget_SetDisplayPrompt Parms{};

	Parms.DisplayPrompt = DisplayPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisplayStandWidget.SetDisplayPromptText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      displayPromptText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreDisplayStandWidget::SetDisplayPromptText(const class FText& displayPromptText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisplayStandWidget", "SetDisplayPromptText");

	Params::CoreDisplayStandWidget_SetDisplayPromptText Parms{};

	Parms.displayPromptText = std::move(displayPromptText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisplayStandWidget.SetDisplayPromptVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              IsVisible_0                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreDisplayStandWidget::SetDisplayPromptVisibility(const bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisplayStandWidget", "SetDisplayPromptVisibility");

	Params::CoreDisplayStandWidget_SetDisplayPromptVisibility Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisplayStandWidget.SetUseControllerRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              UseControllerRotation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreDisplayStandWidget::SetUseControllerRotation(const bool UseControllerRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisplayStandWidget", "SetUseControllerRotation");

	Params::CoreDisplayStandWidget_SetUseControllerRotation Parms{};

	Parms.UseControllerRotation = UseControllerRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisplayStandWidget.UpdateDisplayPrompt
// (Final, Native, Public, BlueprintCallable)

void UCoreDisplayStandWidget::UpdateDisplayPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisplayStandWidget", "UpdateDisplayPrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisplayStandWidget.GetUseControllerRotation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreDisplayStandWidget::GetUseControllerRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisplayStandWidget", "GetUseControllerRotation");

	Params::CoreDisplayStandWidget_GetUseControllerRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreEffectCardWidget.SetTooltipData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCustomizationTooltipViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreEffectCardWidget::SetTooltipData(const struct FCustomizationTooltipViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEffectCardWidget", "SetTooltipData");

	Params::CoreEffectCardWidget_SetTooltipData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreEffectCardWidget.UpdateCardState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const EEffectCardState                  State                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreEffectCardWidget::UpdateCardState(const EEffectCardState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEffectCardWidget", "UpdateCardState");

	Params::CoreEffectCardWidget_UpdateCardState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreEffectCardWidget.UpdateTimer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const float                             currentTimer_0                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreEffectCardWidget::UpdateTimer(const float currentTimer_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEffectCardWidget", "UpdateTimer");

	Params::CoreEffectCardWidget_UpdateTimer Parms{};

	Parms.currentTimer_0 = currentTimer_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreEndGameCollapseBarWidget.PlayToZeroAnimation
// (Event, Protected, BlueprintEvent)

void UCoreEndGameCollapseBarWidget::PlayToZeroAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEndGameCollapseBarWidget", "PlayToZeroAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreEndGameCollapseBarWidget.UpdateBarProgression
// (Event, Protected, BlueprintEvent)
// Parameters:
// const float                             Progress                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreEndGameCollapseBarWidget::UpdateBarProgression(const float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEndGameCollapseBarWidget", "UpdateBarProgression");

	Params::CoreEndGameCollapseBarWidget_UpdateBarProgression Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.AnimateHide
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPackDetailsWidget::AnimateHide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "AnimateHide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.AnimateShow
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPackDetailsWidget::AnimateShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "AnimateShow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnArchivePassClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackDetailsWidget::OnArchivePassClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "OnArchivePassClicked");

	Params::CoreStoreSpecialPackDetailsWidget_OnArchivePassClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnCharacterClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackDetailsWidget::OnCharacterClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "OnCharacterClicked");

	Params::CoreStoreSpecialPackDetailsWidget_OnCharacterClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnCurrencyButtonClicked
// (Final, Native, Private)
// Parameters:
// ECurrencyType                           currencyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackDetailsWidget::OnCurrencyButtonClicked(ECurrencyType currencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "OnCurrencyButtonClicked");

	Params::CoreStoreSpecialPackDetailsWidget_OnCurrencyButtonClicked Parms{};

	Parms.currencyType = currencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnCustomizationClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackDetailsWidget::OnCustomizationClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "OnCustomizationClicked");

	Params::CoreStoreSpecialPackDetailsWidget_OnCustomizationClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnHideAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPackDetailsWidget::OnHideAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "OnHideAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnPremiumButtonClicked
// (Final, Native, Private)

void UCoreStoreSpecialPackDetailsWidget::OnPremiumButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "OnPremiumButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnShowAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPackDetailsWidget::OnShowAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "OnShowAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.SetSpecialPackImageUsingComposition
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             numberOfItems                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UStorePackContentData*>&Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<class FName, class UTexture2D*>&icons                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackDetailsWidget::SetSpecialPackImageUsingComposition(const int32 numberOfItems, const TArray<class UStorePackContentData*>& Data, const TMap<class FName, class UTexture2D*>& icons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "SetSpecialPackImageUsingComposition");

	Params::CoreStoreSpecialPackDetailsWidget_SetSpecialPackImageUsingComposition Parms{};

	Parms.numberOfItems = numberOfItems;
	Parms.Data = std::move(Data);
	Parms.icons = std::move(icons);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.LoadPackImage
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftObjectPtr<class UTexture2D>& localPtr                                               (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoftRemoteContentCacheObjectPtr*remotePtr                                              (Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPackDetailsWidget::LoadPackImage(const TSoftObjectPtr<class UTexture2D>& localPtr, struct FSoftRemoteContentCacheObjectPtr* remotePtr) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPackDetailsWidget", "LoadPackImage");

	Params::CoreStoreSpecialPackDetailsWidget_LoadPackImage Parms{};

	Parms.localPtr = localPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (remotePtr != nullptr)
		*remotePtr = std::move(Parms.remotePtr);
}


// Function DBDUIViewsCore.CoreScreenIndicatorWidget.ClearData
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreScreenIndicatorWidget::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreScreenIndicatorWidget", "ClearData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreScreenIndicatorWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FScreenIndicatorViewData&  Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreScreenIndicatorWidget::SetData(const struct FScreenIndicatorViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreScreenIndicatorWidget", "SetData");

	Params::CoreScreenIndicatorWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreEventEntryWidget.OnBackAction
// (Final, Native, Public, BlueprintCallable)

void UCoreEventEntryWidget::OnBackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEventEntryWidget", "OnBackAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreEventEntryWidget.OnEnter
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreEventEntryWidget::OnEnter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEventEntryWidget", "OnEnter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreEventEntryWidget.OnLeave
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreEventEntryWidget::OnLeave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEventEntryWidget", "OnLeave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreEventEntryWidget.OnShow
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreEventEntryWidget::OnShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEventEntryWidget", "OnShow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreEventEntryWidget.OnTabSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreEventEntryWidget::OnTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEventEntryWidget", "OnTabSelected");

	Params::CoreEventEntryWidget_OnTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreEventEntryWidget.SetTabsVisuals
// (Event, Protected, BlueprintEvent)

void UCoreEventEntryWidget::SetTabsVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEventEntryWidget", "SetTabsVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreEventEntryWidget.SetUiTakeoverActive
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreEventEntryWidget::SetUiTakeoverActive(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEventEntryWidget", "SetUiTakeoverActive");

	Params::CoreEventEntryWidget_SetUiTakeoverActive Parms{};

	Parms.IsActive = IsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreUnlockConfirmationPopupWidget.OnUnlockAction
// (Final, Native, Protected)
// Parameters:
// const ECurrencyType                     currencyType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreUnlockConfirmationPopupWidget::OnUnlockAction(const ECurrencyType currencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreUnlockConfirmationPopupWidget", "OnUnlockAction");

	Params::CoreStoreUnlockConfirmationPopupWidget_OnUnlockAction Parms{};

	Parms.currencyType = currencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreExternalEffectsWidget.HideExternalAddon_Implementation
// (Native, Public)
// Parameters:
// const class FName                       ItemId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreExternalEffectsWidget::HideExternalAddon_Implementation(const class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreExternalEffectsWidget", "HideExternalAddon_Implementation");

	Params::CoreExternalEffectsWidget_HideExternalAddon_Implementation Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreExternalEffectsWidget.HideExternalPerk_Implementation
// (Native, Public)
// Parameters:
// const class FName                       ItemId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreExternalEffectsWidget::HideExternalPerk_Implementation(const class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreExternalEffectsWidget", "HideExternalPerk_Implementation");

	Params::CoreExternalEffectsWidget_HideExternalPerk_Implementation Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreExternalEffectsWidget.HideExternalSkill_Implementation
// (Native, Public)
// Parameters:
// const class FName                       ItemId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreExternalEffectsWidget::HideExternalSkill_Implementation(const class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreExternalEffectsWidget", "HideExternalSkill_Implementation");

	Params::CoreExternalEffectsWidget_HideExternalSkill_Implementation Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.OnBackAction
// (Final, Native, Protected)

void UCoreStoreMenuWidget::OnBackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "OnBackAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.OnGetAuricCellsInputSwitcherTriggered
// (Final, Native, Protected)

void UCoreStoreMenuWidget::OnGetAuricCellsInputSwitcherTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "OnGetAuricCellsInputSwitcherTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.OnMenuTabSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreMenuWidget::OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "OnMenuTabSelected");

	Params::CoreStoreMenuWidget_OnMenuTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.OnMenuTabSelectedAgain
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreMenuWidget::OnMenuTabSelectedAgain(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "OnMenuTabSelectedAgain");

	Params::CoreStoreMenuWidget_OnMenuTabSelectedAgain Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreMenuWidget.OnRedeemCodeInputSwitcherTriggered
// (Final, Native, Protected)

void UCoreStoreMenuWidget::OnRedeemCodeInputSwitcherTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreMenuWidget", "OnRedeemCodeInputSwitcherTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreFilterButtonWidget.SetToggledState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsToggled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreFilterButtonWidget::SetToggledState(bool IsToggled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFilterButtonWidget", "SetToggledState");

	Params::CoreFilterButtonWidget_SetToggledState Parms{};

	Parms.IsToggled = IsToggled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreFilterButtonWidget.UpdateVisualState
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreFilterButtonWidget::UpdateVisualState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFilterButtonWidget", "UpdateVisualState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreFilterButtonWidget.IsToggled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreFilterButtonWidget::IsToggled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFilterButtonWidget", "IsToggled");

	Params::CoreFilterButtonWidget_IsToggled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.SetBetaFeatureOverlayVisible
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreFooterButtonWidget::SetBetaFeatureOverlayVisible(bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "SetBetaFeatureOverlayVisible");

	Params::CoreFooterButtonWidget_SetBetaFeatureOverlayVisible Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.SetHoveredColor
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreFooterButtonWidget::SetHoveredColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "SetHoveredColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.SetIconTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       iconTexture                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreFooterButtonWidget::SetIconTexture(class UTexture2D* iconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "SetIconTexture");

	Params::CoreFooterButtonWidget_SetIconTexture Parms{};

	Parms.iconTexture = iconTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.SetSubPanelText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      Title                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      Description                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreFooterButtonWidget::SetSubPanelText(const class FText& Title, const class FText& Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "SetSubPanelText");

	Params::CoreFooterButtonWidget_SetSubPanelText Parms{};

	Parms.Title = std::move(Title);
	Parms.Description = std::move(Description);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.SetUnhoveredColor
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreFooterButtonWidget::SetUnhoveredColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "SetUnhoveredColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.IsLocked
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreFooterButtonWidget::IsLocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "IsLocked");

	Params::CoreFooterButtonWidget_IsLocked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreRiftWidget.DisplayPage
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::DisplayPage(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "DisplayPage");

	Params::CoreRiftWidget_DisplayPage Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnBackButtonClicked
// (Final, Native, Protected)

void UCoreRiftWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnCurrentPageAnimationCompleted
// (Final, Native, Private)

void UCoreRiftWidget::OnCurrentPageAnimationCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnCurrentPageAnimationCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnGoToQuestsButtonClicked
// (Final, Native, Protected)

void UCoreRiftWidget::OnGoToQuestsButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnGoToQuestsButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnInfoButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::OnInfoButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnInfoButtonClicked");

	Params::CoreRiftWidget_OnInfoButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnNextButtonClicked
// (Final, Native, Private)

void UCoreRiftWidget::OnNextButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnNextButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnOutfitButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::OnOutfitButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnOutfitButtonClicked");

	Params::CoreRiftWidget_OnOutfitButtonClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnOutfitButtonHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::OnOutfitButtonHovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnOutfitButtonHovered");

	Params::CoreRiftWidget_OnOutfitButtonHovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnOutfitButtonUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::OnOutfitButtonUnhovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnOutfitButtonUnhovered");

	Params::CoreRiftWidget_OnOutfitButtonUnhovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnPlayMoriButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::OnPlayMoriButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnPlayMoriButtonClicked");

	Params::CoreRiftWidget_OnPlayMoriButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnPlayMoriButtonHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::OnPlayMoriButtonHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnPlayMoriButtonHovered");

	Params::CoreRiftWidget_OnPlayMoriButtonHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnPlayMoriButtonUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::OnPlayMoriButtonUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnPlayMoriButtonUnhovered");

	Params::CoreRiftWidget_OnPlayMoriButtonUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnPlaySecondMoriButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::OnPlaySecondMoriButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnPlaySecondMoriButtonClicked");

	Params::CoreRiftWidget_OnPlaySecondMoriButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnPlaySecondMoriButtonHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::OnPlaySecondMoriButtonHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnPlaySecondMoriButtonHovered");

	Params::CoreRiftWidget_OnPlaySecondMoriButtonHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnPlaySecondMoriButtonUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::OnPlaySecondMoriButtonUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnPlaySecondMoriButtonUnhovered");

	Params::CoreRiftWidget_OnPlaySecondMoriButtonUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnPreviousButtonClicked
// (Final, Native, Private)

void UCoreRiftWidget::OnPreviousButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnPreviousButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnRewardAnimationCompleted
// (Final, Native, Private)

void UCoreRiftWidget::OnRewardAnimationCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnRewardAnimationCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnRewardItemClicked
// (Final, Native, Private)
// Parameters:
// int32                                   tier                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isPremium                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::OnRewardItemClicked(int32 tier, class UCoreButtonWidget* Button, bool isPremium, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnRewardItemClicked");

	Params::CoreRiftWidget_OnRewardItemClicked Parms{};

	Parms.tier = tier;
	Parms.Button = Button;
	Parms.isPremium = isPremium;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnRiftPackButtonClicked
// (Final, Native, Private)

void UCoreRiftWidget::OnRiftPackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnRiftPackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.OnSettingsButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::OnSettingsButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "OnSettingsButtonClicked");

	Params::CoreRiftWidget_OnSettingsButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRiftWidget.PlayPremiumTrackUnlockAnimation
// (Event, Protected, BlueprintEvent)

void UCoreRiftWidget::PlayPremiumTrackUnlockAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "PlayPremiumTrackUnlockAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreRiftWidget.SetTierVisuals
// (Event, Protected, BlueprintEvent)
// Parameters:
// ETierType                               TierType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::SetTierVisuals(ETierType TierType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "SetTierVisuals");

	Params::CoreRiftWidget_SetTierVisuals Parms{};

	Parms.TierType = TierType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreRiftWidget.SetVisualData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FArchivesRiftGenericViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCoreRiftWidget::SetVisualData(const struct FArchivesRiftGenericViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "SetVisualData");

	Params::CoreRiftWidget_SetVisualData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreRiftWidget.UpdateMoriButtonVisual
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              HasUniqueMori                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRiftWidget::UpdateMoriButtonVisual(const bool HasUniqueMori)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRiftWidget", "UpdateMoriButtonVisual");

	Params::CoreRiftWidget_UpdateMoriButtonVisual Parms{};

	Parms.HasUniqueMori = HasUniqueMori;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreFooterInputSwitcherWidget.SetBetaFeatureOverlayVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsVisible_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreFooterInputSwitcherWidget::SetBetaFeatureOverlayVisible(bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterInputSwitcherWidget", "SetBetaFeatureOverlayVisible");

	Params::CoreFooterInputSwitcherWidget_SetBetaFeatureOverlayVisible Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualCategoryButton.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText&                      Title_0                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
// const class FText&                      Description_0                                          (ConstParm, Parm, NativeAccessSpecifierPublic)

void UCoreGameManualCategoryButton::SetText(const class FText& Title_0, const class FText& Description_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualCategoryButton", "SetText");

	Params::CoreGameManualCategoryButton_SetText Parms{};

	Parms.Title_0 = std::move(Title_0);
	Parms.Description_0 = std::move(Description_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSharedPerksDisplayWidget.OnPerkHovered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                hoveredPerk                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSharedPerksDisplayWidget::OnPerkHovered(class UCoreButtonWidget* hoveredPerk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSharedPerksDisplayWidget", "OnPerkHovered");

	Params::CoreSharedPerksDisplayWidget_OnPerkHovered Parms{};

	Parms.hoveredPerk = hoveredPerk;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSharedPerksDisplayWidget.OnPerkUnhovered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                unhoveredPerk                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSharedPerksDisplayWidget::OnPerkUnhovered(class UCoreButtonWidget* unhoveredPerk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSharedPerksDisplayWidget", "OnPerkUnhovered");

	Params::CoreSharedPerksDisplayWidget_OnPerkUnhovered Parms{};

	Parms.unhoveredPerk = unhoveredPerk;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSharedPerksDisplayWidget.SetLockedVisual
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              IsVisible_0                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSharedPerksDisplayWidget::SetLockedVisual(const bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSharedPerksDisplayWidget", "SetLockedVisual");

	Params::CoreSharedPerksDisplayWidget_SetLockedVisual Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.OnTopicsTabSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGameManualPanelWidget::OnTopicsTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "OnTopicsTabSelected");

	Params::CoreGameManualPanelWidget_OnTopicsTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.ResetScrolls
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    resetTopicsScroll                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGameManualPanelWidget::ResetScrolls(bool resetTopicsScroll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "ResetScrolls");

	Params::CoreGameManualPanelWidget_ResetScrolls Parms{};

	Parms.resetTopicsScroll = resetTopicsScroll;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.SetCurrentOnbardingMenuSubtitle
// (Final, Native, Private, BlueprintCallable)

void UCoreGameManualPanelWidget::SetCurrentOnbardingMenuSubtitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "SetCurrentOnbardingMenuSubtitle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.SetGameManualMenuState
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// EGameManualMenuState                    menuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGameManualPanelWidget::SetGameManualMenuState(EGameManualMenuState menuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "SetGameManualMenuState");

	Params::CoreGameManualPanelWidget_SetGameManualMenuState Parms{};

	Parms.menuState = menuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.ShowHelpTopics
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// EHelpType                               categoryType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGameManualPanelWidget::ShowHelpTopics(EHelpType categoryType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "ShowHelpTopics");

	Params::CoreGameManualPanelWidget_ShowHelpTopics Parms{};

	Parms.categoryType = categoryType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.ToggleGameManualMenuState
// (Final, Native, Private, BlueprintCallable)

void UCoreGameManualPanelWidget::ToggleGameManualMenuState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "ToggleGameManualMenuState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGammaSettingsPopupWidget.OnGammaValueChanged
// (Final, Native, Protected)
// Parameters:
// float                                   gamma                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGammaSettingsPopupWidget::OnGammaValueChanged(float gamma)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGammaSettingsPopupWidget", "OnGammaValueChanged");

	Params::CoreGammaSettingsPopupWidget_OnGammaValueChanged Parms{};

	Parms.gamma = gamma;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGammaSettingsPopupWidget.OnResetTriggered
// (Final, Native, Protected, BlueprintCallable)

void UCoreGammaSettingsPopupWidget::OnResetTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGammaSettingsPopupWidget", "OnResetTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.SettingsMatchDetailsWidget.OnMouseWheelInput
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FPointerEvent&             PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USettingsMatchDetailsWidget::OnMouseWheelInput(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsMatchDetailsWidget", "OnMouseWheelInput");

	Params::SettingsMatchDetailsWidget_OnMouseWheelInput Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.SettingsMatchDetailsWidget.OnSurvivorInfoButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USettingsMatchDetailsWidget::OnSurvivorInfoButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsMatchDetailsWidget", "OnSurvivorInfoButtonClicked");

	Params::SettingsMatchDetailsWidget_OnSurvivorInfoButtonClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.SettingsMatchDetailsWidget.UpdateCenterSeparator
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void USettingsMatchDetailsWidget::UpdateCenterSeparator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsMatchDetailsWidget", "UpdateCenterSeparator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGenericTextInputPopupWidget::OnButtonHovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "OnButtonHovered");

	Params::CoreGenericTextInputPopupWidget_OnButtonHovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGenericTextInputPopupWidget::OnButtonUnhovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "OnButtonUnhovered");

	Params::CoreGenericTextInputPopupWidget_OnButtonUnhovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnKeyboardButtonClicked
// (Final, Native, Protected)

void UCoreGenericTextInputPopupWidget::OnKeyboardButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "OnKeyboardButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnTextChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreGenericTextInputPopupWidget::OnTextChanged(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "OnTextChanged");

	Params::CoreGenericTextInputPopupWidget_OnTextChanged Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnTextCommitted
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             inCommitType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGenericTextInputPopupWidget::OnTextCommitted(const class FText& InText, ETextCommit inCommitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "OnTextCommitted");

	Params::CoreGenericTextInputPopupWidget_OnTextCommitted Parms{};

	Parms.InText = std::move(InText);
	Parms.inCommitType = inCommitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnTextEntered
// (Native, Protected, BlueprintCallable)
// Parameters:
// EPopupButtonType                        selectedButtonType                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    inputText                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGenericTextInputPopupWidget::OnTextEntered(EPopupButtonType selectedButtonType, const class FString& inputText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "OnTextEntered");

	Params::CoreGenericTextInputPopupWidget_OnTextEntered Parms{};

	Parms.selectedButtonType = selectedButtonType;
	Parms.inputText = std::move(inputText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnTextInputChoiceSelected
// (Native, Public, BlueprintCallable)
// Parameters:
// EPopupButtonType                        selectedButtonType                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    inputText                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGenericTextInputPopupWidget::OnTextInputChoiceSelected(EPopupButtonType selectedButtonType, const class FString& inputText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "OnTextInputChoiceSelected");

	Params::CoreGenericTextInputPopupWidget_OnTextInputChoiceSelected Parms{};

	Parms.selectedButtonType = selectedButtonType;
	Parms.inputText = std::move(inputText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.UpdateCharacterCounterVisual
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    limitReached                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGenericTextInputPopupWidget::UpdateCharacterCounterVisual(bool limitReached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericTextInputPopupWidget", "UpdateCharacterCounterVisual");

	Params::CoreGenericTextInputPopupWidget_UpdateCharacterCounterVisual Parms{};

	Parms.limitReached = limitReached;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreRewardPopupWidget.AnimateHideReward
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreRewardPopupWidget::AnimateHideReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardPopupWidget", "AnimateHideReward");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardPopupWidget.OnHideRewardAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreRewardPopupWidget::OnHideRewardAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardPopupWidget", "OnHideRewardAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardPopupWidget.OnNextClicked
// (Final, Native, Private)

void UCoreRewardPopupWidget::OnNextClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardPopupWidget", "OnNextClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardPopupWidget.PlaySfx
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const EItemRarity                       Rarity                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardPopupWidget::PlaySfx(const EItemRarity Rarity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardPopupWidget", "PlaySfx");

	Params::CoreRewardPopupWidget_PlaySfx Parms{};

	Parms.Rarity = Rarity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardPopupWidget.SetRewardData
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGrantedRewardPopupViewData*      RewardData                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardPopupWidget::SetRewardData(class UGrantedRewardPopupViewData* RewardData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardPopupWidget", "SetRewardData");

	Params::CoreRewardPopupWidget_SetRewardData Parms{};

	Parms.RewardData = RewardData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreRewardPopupWidget.SetRewardList
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class URewardListRewardPopupViewData*   rewardListData                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreRewardPopupWidget::SetRewardList(class URewardListRewardPopupViewData* rewardListData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardPopupWidget", "SetRewardList");

	Params::CoreRewardPopupWidget_SetRewardList Parms{};

	Parms.rewardListData = rewardListData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreRewardPopupWidget.SetRewardWrapperData
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCoreRewardWrapperWidget*         targetWidget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URewardWrapperRewardPopupViewData*RewardData                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreRewardPopupWidget::SetRewardWrapperData(class UCoreRewardWrapperWidget* targetWidget, class URewardWrapperRewardPopupViewData* RewardData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardPopupWidget", "SetRewardWrapperData");

	Params::CoreRewardPopupWidget_SetRewardWrapperData Parms{};

	Parms.targetWidget = targetWidget;
	Parms.RewardData = RewardData;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreRewardPopupWidget.ShowNextReward
// (Final, Native, Protected, BlueprintCallable)

void UCoreRewardPopupWidget::ShowNextReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardPopupWidget", "ShowNextReward");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSettingsPlayerInfoContainerWidget.OnPlayerInfoButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsPlayerInfoContainerWidget::OnPlayerInfoButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsPlayerInfoContainerWidget", "OnPlayerInfoButtonClicked");

	Params::CoreSettingsPlayerInfoContainerWidget_OnPlayerInfoButtonClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSettingsPlayerInfoContainerWidget.SetButtonPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   ButtonPadding                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UCoreSettingsPlayerInfoContainerWidget::SetButtonPadding(const struct FMargin& ButtonPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsPlayerInfoContainerWidget", "SetButtonPadding");

	Params::CoreSettingsPlayerInfoContainerWidget_SetButtonPadding Parms{};

	Parms.ButtonPadding = std::move(ButtonPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSettingsPlayerInfoContainerWidget.SetPlayerInfoMaxNumberOfColumns
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NumberOfColumns                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsPlayerInfoContainerWidget::SetPlayerInfoMaxNumberOfColumns(int32 NumberOfColumns)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsPlayerInfoContainerWidget", "SetPlayerInfoMaxNumberOfColumns");

	Params::CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoMaxNumberOfColumns Parms{};

	Parms.NumberOfColumns = NumberOfColumns;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSettingsPlayerInfoContainerWidget.SetPlayerInfoOfferingVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsVisible_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsPlayerInfoContainerWidget::SetPlayerInfoOfferingVisibility(bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsPlayerInfoContainerWidget", "SetPlayerInfoOfferingVisibility");

	Params::CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoOfferingVisibility Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAimingCrosshairWidget.GetPreviousState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAimingCrosshairState                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAimingCrosshairState UCoreHudAimingCrosshairWidget::GetPreviousState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAimingCrosshairWidget", "GetPreviousState");

	Params::CoreHudAimingCrosshairWidget_GetPreviousState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAimingCrosshairWidget.GetProgress
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreHudAimingCrosshairWidget::GetProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAimingCrosshairWidget", "GetProgress");

	Params::CoreHudAimingCrosshairWidget_GetProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAimingCrosshairWidget.GetState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAimingCrosshairState                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAimingCrosshairState UCoreHudAimingCrosshairWidget::GetState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAimingCrosshairWidget", "GetState");

	Params::CoreHudAimingCrosshairWidget_GetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.ClearAlerts
// (Final, Native, Private)

void UCoreHudAlertWidget::ClearAlerts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "ClearAlerts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.OnClearAlertsComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudAlertWidget::OnClearAlertsComplete(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "OnClearAlertsComplete");

	Params::CoreHudAlertWidget_OnClearAlertsComplete Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.OnPopAlertComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudAlertWidget::OnPopAlertComplete(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "OnPopAlertComplete");

	Params::CoreHudAlertWidget_OnPopAlertComplete Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.PopAlert
// (Final, Native, Private)

void UCoreHudAlertWidget::PopAlert()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "PopAlert");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.GetAlerts
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UCoreBaseUserWidget*>      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UCoreBaseUserWidget*> UCoreHudAlertWidget::GetAlerts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "GetAlerts");

	Params::CoreHudAlertWidget_GetAlerts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.GetPendingAlerts
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UCoreBaseUserWidget*>      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UCoreBaseUserWidget*> UCoreHudAlertWidget::GetPendingAlerts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "GetPendingAlerts");

	Params::CoreHudAlertWidget_GetPendingAlerts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.GetRemainingTime
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreHudAlertWidget::GetRemainingTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "GetRemainingTime");

	Params::CoreHudAlertWidget_GetRemainingTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreSortingWidget.OnNextSortingOptionClick
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSortingWidget::OnNextSortingOptionClick(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSortingWidget", "OnNextSortingOptionClick");

	Params::CoreSortingWidget_OnNextSortingOptionClick Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSortingWidget.OnPreviousSortingOptionClick
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSortingWidget::OnPreviousSortingOptionClick(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSortingWidget", "OnPreviousSortingOptionClick");

	Params::CoreSortingWidget_OnPreviousSortingOptionClick Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSortingWidget.OnSortingOrderClick
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSortingWidget::OnSortingOrderClick(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSortingWidget", "OnSortingOrderClick");

	Params::CoreSortingWidget_OnSortingOrderClick Parms{};

	Parms.buttonTarget = buttonTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSortingWidget.SetSortingOrderButtonVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    showSortingOrderButton                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSortingWidget::SetSortingOrderButtonVisibility(bool showSortingOrderButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSortingWidget", "SetSortingOrderButtonVisibility");

	Params::CoreSortingWidget_SetSortingOrderButtonVisibility Parms{};

	Parms.showSortingOrderButton = showSortingOrderButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSortingWidget.ToggleSortingOrder
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ESortingOrder                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESortingOrder UCoreSortingWidget::ToggleSortingOrder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSortingWidget", "ToggleSortingOrder");

	Params::CoreSortingWidget_ToggleSortingOrder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreSortingWidget.UpdateSortingOrderButton
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESortingOrder                           sortingOrder                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSortingWidget::UpdateSortingOrderButton(ESortingOrder sortingOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSortingWidget", "UpdateSortingOrderButton");

	Params::CoreSortingWidget_UpdateSortingOrderButton Parms{};

	Parms.sortingOrder = sortingOrder;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSortingWidget.IsOptionEnabled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESortingOption                          Option                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreSortingWidget::IsOptionEnabled(ESortingOption Option) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSortingWidget", "IsOptionEnabled");

	Params::CoreSortingWidget_IsOptionEnabled Parms{};

	Parms.Option = Option;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.Init
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDirectionalInputKey                    Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudDirectionalMiniGameItemWidget::Init(EDirectionalInputKey Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameItemWidget", "Init");

	Params::CoreHudDirectionalMiniGameItemWidget_Init Parms{};

	Parms.Direction = Direction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.RevealDirection
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    withAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudDirectionalMiniGameItemWidget::RevealDirection(bool withAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameItemWidget", "RevealDirection");

	Params::CoreHudDirectionalMiniGameItemWidget_RevealDirection Parms{};

	Parms.withAnimation = withAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.UpdateFinaleVisualState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSuccessful                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudDirectionalMiniGameItemWidget::UpdateFinaleVisualState(bool IsSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameItemWidget", "UpdateFinaleVisualState");

	Params::CoreHudDirectionalMiniGameItemWidget_UpdateFinaleVisualState Parms{};

	Parms.IsSuccessful = IsSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.UpdateResult
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSuccessful                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudDirectionalMiniGameItemWidget::UpdateResult(bool IsSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameItemWidget", "UpdateResult");

	Params::CoreHudDirectionalMiniGameItemWidget_UpdateResult Parms{};

	Parms.IsSuccessful = IsSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameWidget.GetWidgets
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TArray<class UCoreHudDirectionalMiniGameItemWidget*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UCoreHudDirectionalMiniGameItemWidget*> UCoreHudDirectionalMiniGameWidget::GetWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameWidget", "GetWidgets");

	Params::CoreHudDirectionalMiniGameWidget_GetWidgets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameWidget.ShowVisual
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreHudDirectionalMiniGameWidget::ShowVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameWidget", "ShowVisual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameWidget.GetCurrentType
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDirectionalMiniGameType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDirectionalMiniGameType UCoreHudDirectionalMiniGameWidget::GetCurrentType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameWidget", "GetCurrentType");

	Params::CoreHudDirectionalMiniGameWidget_GetCurrentType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreShrineOfSecretsItemWidget.OnPurchaseButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreShrineOfSecretsItemWidget::OnPurchaseButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsItemWidget", "OnPurchaseButtonClicked");

	Params::CoreShrineOfSecretsItemWidget_OnPurchaseButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreShrineOfSecretsItemWidget.PlayUnlockanimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreShrineOfSecretsItemWidget::PlayUnlockanimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsItemWidget", "PlayUnlockanimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreShrineOfSecretsItemWidget.SetEventDiscountVisualData
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FShrineOfSecretsDiscountUIInfo&discountInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreShrineOfSecretsItemWidget::SetEventDiscountVisualData(const struct FShrineOfSecretsDiscountUIInfo& discountInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsItemWidget", "SetEventDiscountVisualData");

	Params::CoreShrineOfSecretsItemWidget_SetEventDiscountVisualData Parms{};

	Parms.discountInfo = std::move(discountInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreShrineOfSecretsItemWidget.SetVisuals
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FShrineOfSecretsItemViewData&ShrineOfSecretsItemViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreShrineOfSecretsItemWidget::SetVisuals(const struct FShrineOfSecretsItemViewData& ShrineOfSecretsItemViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsItemWidget", "SetVisuals");

	Params::CoreShrineOfSecretsItemWidget_SetVisuals Parms{};

	Parms.ShrineOfSecretsItemViewData = std::move(ShrineOfSecretsItemViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSettingsPerksDisplayWidget.OnPerkClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsPerksDisplayWidget::OnPerkClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsPerksDisplayWidget", "OnPerkClicked");

	Params::CoreSettingsPerksDisplayWidget_OnPerkClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSettingsPerksDisplayWidget.OnPerkHovered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                hoveredPerk                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsPerksDisplayWidget::OnPerkHovered(class UCoreButtonWidget* hoveredPerk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsPerksDisplayWidget", "OnPerkHovered");

	Params::CoreSettingsPerksDisplayWidget_OnPerkHovered Parms{};

	Parms.hoveredPerk = hoveredPerk;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSettingsPerksDisplayWidget.OnPerkUnhovered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                unhoveredPerk                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsPerksDisplayWidget::OnPerkUnhovered(class UCoreButtonWidget* unhoveredPerk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsPerksDisplayWidget", "OnPerkUnhovered");

	Params::CoreSettingsPerksDisplayWidget_OnPerkUnhovered Parms{};

	Parms.unhoveredPerk = unhoveredPerk;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudScoreAlertItem.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FScoreAlertViewData&       Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreHudScoreAlertItem::SetData(const struct FScoreAlertViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudScoreAlertItem", "SetData");

	Params::CoreHudScoreAlertItem_SetData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudStatusEffectAlertItem.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStatusEffectAlertViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreHudStatusEffectAlertItem::SetData(const struct FStatusEffectAlertViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudStatusEffectAlertItem", "SetData");

	Params::CoreHudStatusEffectAlertItem_SetData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreArchivePassItemWidget.OnButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreArchivePassItemWidget::OnButtonHovered(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreArchivePassItemWidget", "OnButtonHovered");

	Params::CoreStoreArchivePassItemWidget_OnButtonHovered Parms{};

	Parms.targetButton = targetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreArchivePassItemWidget.OnButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreArchivePassItemWidget::OnButtonUnhovered(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreArchivePassItemWidget", "OnButtonUnhovered");

	Params::CoreStoreArchivePassItemWidget_OnButtonUnhovered Parms{};

	Parms.targetButton = targetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreArchivePassItemWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStoreArchivePassViewData& Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreArchivePassItemWidget::SetData(const struct FStoreArchivePassViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreArchivePassItemWidget", "SetData");

	Params::CoreStoreArchivePassItemWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreIconButtonWidget.SetIconTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TSoftObjectPtr<class UTexture2D>  iconTexture_0                                          (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreIconButtonWidget::SetIconTexture(const TSoftObjectPtr<class UTexture2D> iconTexture_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreIconButtonWidget", "SetIconTexture");

	Params::CoreIconButtonWidget_SetIconTexture Parms{};

	Parms.iconTexture_0 = iconTexture_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToggleButtonWidget.SetActiveVisualState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToggleButtonWidget::SetActiveVisualState(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToggleButtonWidget", "SetActiveVisualState");

	Params::CoreToggleButtonWidget_SetActiveVisualState Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreToggleButtonWidget.SetToDefaultState
// (Final, Native, Public, BlueprintCallable)

void UCoreToggleButtonWidget::SetToDefaultState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToggleButtonWidget", "SetToDefaultState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToggleButtonWidget.IsToggled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreToggleButtonWidget::IsToggled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToggleButtonWidget", "IsToggled");

	Params::CoreToggleButtonWidget_IsToggled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.OnLoadingHintsFadeSequenceCompleted
// (Final, Native, Protected)

void UCoreSpecialEventLoadingScreenWidget::OnLoadingHintsFadeSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenWidget", "OnLoadingHintsFadeSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FSpecialEventLoadingScreenViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenWidget::SetData(const struct FSpecialEventLoadingScreenViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenWidget", "SetData");

	Params::CoreSpecialEventLoadingScreenWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.SetLoadingHint
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FLoadingHintViewData&      loadingHintData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenWidget::SetLoadingHint(const struct FLoadingHintViewData& loadingHintData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenWidget", "SetLoadingHint");

	Params::CoreSpecialEventLoadingScreenWidget_SetLoadingHint Parms{};

	Parms.loadingHintData = std::move(loadingHintData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.UpdateProgress
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenWidget::UpdateProgress(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenWidget", "UpdateProgress");

	Params::CoreSpecialEventLoadingScreenWidget_UpdateProgress Parms{};

	Parms.Progress = Progress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.SetLoadingLogoColor
// (Final, Native, Protected, HasOutParams, HasDefaults, Const)
// Parameters:
// const struct FLinearColor&              FillingColor                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenWidget::SetLoadingLogoColor(const struct FLinearColor& FillingColor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenWidget", "SetLoadingLogoColor");

	Params::CoreSpecialEventLoadingScreenWidget_SetLoadingLogoColor Parms{};

	Parms.FillingColor = std::move(FillingColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.SetProgressBarColors
// (Final, Native, Protected, HasOutParams, HasDefaults, Const)
// Parameters:
// const struct FLinearColor&              MainColor                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              secondaryColor                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenWidget::SetProgressBarColors(const struct FLinearColor& MainColor, const struct FLinearColor& secondaryColor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenWidget", "SetProgressBarColors");

	Params::CoreSpecialEventLoadingScreenWidget_SetProgressBarColors Parms{};

	Parms.MainColor = std::move(MainColor);
	Parms.secondaryColor = std::move(secondaryColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreIconToggleWidget.SetNotificationIconVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShowNotification                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreIconToggleWidget::SetNotificationIconVisibility(bool ShowNotification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreIconToggleWidget", "SetNotificationIconVisibility");

	Params::CoreIconToggleWidget_SetNotificationIconVisibility Parms{};

	Parms.ShowNotification = ShowNotification;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreImagePreviewAreaWidget.OnItemClicked
// (Final, Native, Protected)
// Parameters:
// const int32                             selectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreImagePreviewAreaWidget::OnItemClicked(const int32 selectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreImagePreviewAreaWidget", "OnItemClicked");

	Params::CoreImagePreviewAreaWidget_OnItemClicked Parms{};

	Parms.selectedIndex = selectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreImagePreviewAreaWidget.SetAnimatedPreviewData
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UStoreCustomizationItemViewData*previewItemData                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreImagePreviewAreaWidget::SetAnimatedPreviewData(const class UStoreCustomizationItemViewData* previewItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreImagePreviewAreaWidget", "SetAnimatedPreviewData");

	Params::CoreImagePreviewAreaWidget_SetAnimatedPreviewData Parms{};

	Parms.previewItemData = previewItemData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreImagePreviewAreaWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCustomizationItemPreviewAreaViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreImagePreviewAreaWidget::SetData(const struct FCustomizationItemPreviewAreaViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreImagePreviewAreaWidget", "SetData");

	Params::CoreImagePreviewAreaWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreImagePreviewAreaWidget.SetPreviewContainerVisual
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const ECustomizationCategory            CustomizationCategory                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreImagePreviewAreaWidget::SetPreviewContainerVisual(const ECustomizationCategory CustomizationCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreImagePreviewAreaWidget", "SetPreviewContainerVisual");

	Params::CoreImagePreviewAreaWidget_SetPreviewContainerVisual Parms{};

	Parms.CustomizationCategory = CustomizationCategory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreInboxBodySectionBaseWidget.GetSectionType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENewsAndMessagesSectionType             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ENewsAndMessagesSectionType UCoreInboxBodySectionBaseWidget::GetSectionType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodySectionBaseWidget", "GetSectionType");

	Params::CoreInboxBodySectionBaseWidget_GetSectionType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInboxBodySectionBaseWidget.SetData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInboxBodySectionViewData*        ViewData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInboxBodySectionBaseWidget::SetData(class UInboxBodySectionViewData* ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodySectionBaseWidget", "SetData");

	Params::CoreInboxBodySectionBaseWidget_SetData Parms{};

	Parms.ViewData = ViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInboxBodySectionBaseWidget.SetSkin
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInboxSkinUIData&          skinUIData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInboxBodySectionBaseWidget::SetSkin(const struct FInboxSkinUIData& skinUIData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodySectionBaseWidget", "SetSkin");

	Params::CoreInboxBodySectionBaseWidget_SetSkin Parms{};

	Parms.skinUIData = std::move(skinUIData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCategoryButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnCategoryButtonHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnCategoryButtonHovered");

	Params::CoreStoreCharactersCustomizationsWidget_OnCategoryButtonHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCategoryButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnCategoryButtonUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnCategoryButtonUnhovered");

	Params::CoreStoreCharactersCustomizationsWidget_OnCategoryButtonUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCategorySelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnCategorySelected(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnCategorySelected");

	Params::CoreStoreCharactersCustomizationsWidget_OnCategorySelected Parms{};

	Parms.buttonTarget = buttonTarget;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCategorySelectedAgain
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnCategorySelectedAgain(class UCoreSelectableButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnCategorySelectedAgain");

	Params::CoreStoreCharactersCustomizationsWidget_OnCategorySelectedAgain Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnClearFiltersClicked
// (Final, Native, Protected)

void UCoreStoreCharactersCustomizationsWidget::OnClearFiltersClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnClearFiltersClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCustomizationSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnCustomizationSelected(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnCustomizationSelected");

	Params::CoreStoreCharactersCustomizationsWidget_OnCustomizationSelected Parms{};

	Parms.buttonTarget = buttonTarget;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCustomizationSelectedAgain
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnCustomizationSelectedAgain(class UCoreSelectableButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnCustomizationSelectedAgain");

	Params::CoreStoreCharactersCustomizationsWidget_OnCustomizationSelectedAgain Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnFiltersButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnFiltersButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnFiltersButtonClicked");

	Params::CoreStoreCharactersCustomizationsWidget_OnFiltersButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnFiltersChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FStoreCharactersFiltersData&storeFiltersData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnFiltersChanged(const struct FStoreCharactersFiltersData& storeFiltersData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnFiltersChanged");

	Params::CoreStoreCharactersCustomizationsWidget_OnFiltersChanged Parms{};

	Parms.storeFiltersData = std::move(storeFiltersData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnFiltersWidgetVisibilityChanged
// (Final, Native, Protected)
// Parameters:
// const ESlateVisibility                  newVisibility                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnFiltersWidgetVisibilityChanged(const ESlateVisibility newVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnFiltersWidgetVisibilityChanged");

	Params::CoreStoreCharactersCustomizationsWidget_OnFiltersWidgetVisibilityChanged Parms{};

	Parms.newVisibility = newVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnPresetSelected
// (Final, Native, Protected)
// Parameters:
// const int32                             SelectedPresetId                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::OnPresetSelected(const int32 SelectedPresetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "OnPresetSelected");

	Params::CoreStoreCharactersCustomizationsWidget_OnPresetSelected Parms{};

	Parms.SelectedPresetId = SelectedPresetId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.SetRightStickMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERightStickMode                         rightStickMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersCustomizationsWidget::SetRightStickMode(ERightStickMode rightStickMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "SetRightStickMode");

	Params::CoreStoreCharactersCustomizationsWidget_SetRightStickMode Parms{};

	Parms.rightStickMode = rightStickMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.GetCharacterCustomizationsScrollBox
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDBDScrollBox*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDBDScrollBox* UCoreStoreCharactersCustomizationsWidget::GetCharacterCustomizationsScrollBox() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "GetCharacterCustomizationsScrollBox");

	Params::CoreStoreCharactersCustomizationsWidget_GetCharacterCustomizationsScrollBox Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.GetRightStickMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERightStickMode                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ERightStickMode UCoreStoreCharactersCustomizationsWidget::GetRightStickMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersCustomizationsWidget", "GetRightStickMode");

	Params::CoreStoreCharactersCustomizationsWidget_GetRightStickMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreOnboardingMenuWidget.OnMenuTabSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuWidget::OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuWidget", "OnMenuTabSelected");

	Params::CoreOnboardingMenuWidget_OnMenuTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingMenuWidget.OnMenuTabSelectedAgain
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuWidget::OnMenuTabSelectedAgain(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuWidget", "OnMenuTabSelectedAgain");

	Params::CoreOnboardingMenuWidget_OnMenuTabSelectedAgain Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingMenuWidget.SetBackButton
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// const bool                              isFTUE                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuWidget::SetBackButton(const bool isFTUE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuWidget", "SetBackButton");

	Params::CoreOnboardingMenuWidget_SetBackButton Parms{};

	Parms.isFTUE = isFTUE;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingMenuWidget.SetTitleText
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// const bool                              IsInTutorial                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuWidget::SetTitleText(const bool IsInTutorial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuWidget", "SetTitleText");

	Params::CoreOnboardingMenuWidget_SetTitleText Parms{};

	Parms.IsInTutorial = IsInTutorial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxBodySectionWrapperWidget.CreateSectionOfType
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const ENewsAndMessagesSectionType       Type                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxBodySectionWrapperWidget::CreateSectionOfType(const ENewsAndMessagesSectionType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodySectionWrapperWidget", "CreateSectionOfType");

	Params::CoreInboxBodySectionWrapperWidget_CreateSectionOfType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxBodySectionWrapperWidget.DestroyCurrentSection
// (Final, Native, Protected, BlueprintCallable)

void UCoreInboxBodySectionWrapperWidget::DestroyCurrentSection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodySectionWrapperWidget", "DestroyCurrentSection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxBodySectionWrapperWidget.SetData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInboxBodySectionViewData*        ViewData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInboxBodySectionWrapperWidget::SetData(class UInboxBodySectionViewData* ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodySectionWrapperWidget", "SetData");

	Params::CoreInboxBodySectionWrapperWidget_SetData Parms{};

	Parms.ViewData = ViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInboxBodyWidget.SetData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UInboxItemViewData*         ViewData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxBodyWidget::SetData(const class UInboxItemViewData* ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxBodyWidget", "SetData");

	Params::CoreInboxBodyWidget_SetData Parms{};

	Parms.ViewData = ViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuSkillWidget.SetMenuSkillLocked
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuSkillWidget::SetMenuSkillLocked(bool IsLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuSkillWidget", "SetMenuSkillLocked");

	Params::CoreMenuSkillWidget_SetMenuSkillLocked Parms{};

	Parms.IsLocked = IsLocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMenuSkillWidget.SetMenuSkillUnlockable
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUnlockable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuSkillWidget::SetMenuSkillUnlockable(bool IsUnlockable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuSkillWidget", "SetMenuSkillUnlockable");

	Params::CoreMenuSkillWidget_SetMenuSkillUnlockable Parms{};

	Parms.IsUnlockable = IsUnlockable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreInboxCallToActionWidget.OnRedirectClicked
// (Final, Native, Private)

void UCoreInboxCallToActionWidget::OnRedirectClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxCallToActionWidget", "OnRedirectClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxHeaderWidget.SetBackgroundMaterial
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const TSoftObjectPtr<class UMaterialInterface>backgroundMaterial                                     (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxHeaderWidget::SetBackgroundMaterial(const TSoftObjectPtr<class UMaterialInterface> backgroundMaterial) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxHeaderWidget", "SetBackgroundMaterial");

	Params::CoreInboxHeaderWidget_SetBackgroundMaterial Parms{};

	Parms.backgroundMaterial = backgroundMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxHeaderWidget.SetIconTexture
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const TSoftObjectPtr<class UTexture2D>  iconTexture                                            (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              matchSize                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxHeaderWidget::SetIconTexture(const TSoftObjectPtr<class UTexture2D> iconTexture, const bool matchSize) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxHeaderWidget", "SetIconTexture");

	Params::CoreInboxHeaderWidget_SetIconTexture Parms{};

	Parms.iconTexture = iconTexture;
	Parms.matchSize = matchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxHeaderWidget.SetTexts
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText&                      TitleText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      SubtitleText                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInboxHeaderWidget::SetTexts(const class FText& TitleText, const class FText& SubtitleText) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxHeaderWidget", "SetTexts");

	Params::CoreInboxHeaderWidget_SetTexts Parms{};

	Parms.TitleText = std::move(TitleText);
	Parms.SubtitleText = std::move(SubtitleText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.OnPlayerClick
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FPointerEvent&             PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreCharacterPerksToastWidget::OnPlayerClick(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterPerksToastWidget", "OnPlayerClick");

	Params::CoreStoreCharacterPerksToastWidget_OnPlayerClick Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.OnWidgetVisibilityChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ESlateVisibility                        newVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharacterPerksToastWidget::OnWidgetVisibilityChanged(ESlateVisibility newVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterPerksToastWidget", "OnWidgetVisibilityChanged");

	Params::CoreStoreCharacterPerksToastWidget_OnWidgetVisibilityChanged Parms{};

	Parms.newVisibility = newVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<class UMenuPerkViewData*>& CharacterUniquePerksViewData                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const EPlayerRole                       Role                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMenuPowerViewData*               KillerPowerViewData                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharacterPerksToastWidget::SetData(const TArray<class UMenuPerkViewData*>& CharacterUniquePerksViewData, const EPlayerRole Role, class UMenuPowerViewData* KillerPowerViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterPerksToastWidget", "SetData");

	Params::CoreStoreCharacterPerksToastWidget_SetData Parms{};

	Parms.CharacterUniquePerksViewData = std::move(CharacterUniquePerksViewData);
	Parms.Role = Role;
	Parms.KillerPowerViewData = KillerPowerViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.ToggleWidgetVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStoreCharacterPerksToastWidget::ToggleWidgetVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterPerksToastWidget", "ToggleWidgetVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreInboxItemWidget.OnItemClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxItemWidget::OnItemClicked(class UCoreButtonWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxItemWidget", "OnItemClicked");

	Params::CoreInboxItemWidget_OnItemClicked Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxItemWidget.SetData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UInboxItemViewData*         ViewData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxItemWidget::SetData(const class UInboxItemViewData* ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxItemWidget", "SetData");

	Params::CoreInboxItemWidget_SetData Parms{};

	Parms.ViewData = ViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxItemWidget.SetNotificationIcon
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              IsNew                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxItemWidget::SetNotificationIcon(const bool IsNew)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxItemWidget", "SetNotificationIcon");

	Params::CoreInboxItemWidget_SetNotificationIcon Parms{};

	Parms.IsNew = IsNew;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxItemWidget.SetSkin
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInboxSkinUIData&          skinUIData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInboxItemWidget::SetSkin(const struct FInboxSkinUIData& skinUIData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxItemWidget", "SetSkin");

	Params::CoreInboxItemWidget_SetSkin Parms{};

	Parms.skinUIData = std::move(skinUIData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreInboxItemWidget.SetSticky
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              IsSticky                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxItemWidget::SetSticky(const bool IsSticky)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxItemWidget", "SetSticky");

	Params::CoreInboxItemWidget_SetSticky Parms{};

	Parms.IsSticky = IsSticky;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxKeyArtWidget.OnTextureLoaded
// (Event, Protected, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const bool                              Success                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       LoadedTexture                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxKeyArtWidget::OnTextureLoaded(const bool Success, class UTexture2D* LoadedTexture) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxKeyArtWidget", "OnTextureLoaded");

	Params::CoreInboxKeyArtWidget_OnTextureLoaded Parms{};

	Parms.Success = Success;
	Parms.LoadedTexture = LoadedTexture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreInboxKeyArtWidget.OnTextureLoadedDelayed
// (Final, Native, Protected, Const)
// Parameters:
// const bool                              Success                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       LoadedTexture                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxKeyArtWidget::OnTextureLoadedDelayed(const bool Success, class UTexture2D* LoadedTexture) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxKeyArtWidget", "OnTextureLoadedDelayed");

	Params::CoreInboxKeyArtWidget_OnTextureLoadedDelayed Parms{};

	Parms.Success = Success;
	Parms.LoadedTexture = LoadedTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxKeyArtWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSoftRemoteContentCacheObjectPtr*remotePtr                                              (Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxKeyArtWidget::SetData(struct FSoftRemoteContentCacheObjectPtr* remotePtr) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxKeyArtWidget", "SetData");

	Params::CoreInboxKeyArtWidget_SetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (remotePtr != nullptr)
		*remotePtr = std::move(Parms.remotePtr);
}


// Function DBDUIViewsCore.CoreStoreCollectionsListWidget.OnCollectionItemClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCollectionsListWidget::OnCollectionItemClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsListWidget", "OnCollectionItemClicked");

	Params::CoreStoreCollectionsListWidget_OnCollectionItemClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCollectionsListWidget.UpdateTitleFromScroll
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// float                                   CurrentOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCollectionsListWidget::UpdateTitleFromScroll(float CurrentOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsListWidget", "UpdateTitleFromScroll");

	Params::CoreStoreCollectionsListWidget_UpdateTitleFromScroll Parms{};

	Parms.CurrentOffset = CurrentOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxListWidget.OnItemClicked
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FName&                      ItemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxListWidget::OnItemClicked(const class FName& ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxListWidget", "OnItemClicked");

	Params::CoreInboxListWidget_OnItemClicked Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxListWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class UInboxItemViewData*>&Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInboxListWidget::SetData(const TArray<class UInboxItemViewData*>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxListWidget", "SetData");

	Params::CoreInboxListWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxListWidget.SetSelectedItem
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// const class UInboxItemViewData*         SelectedItem                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxListWidget::SetSelectedItem(const class UInboxItemViewData* SelectedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxListWidget", "SetSelectedItem");

	Params::CoreInboxListWidget_SetSelectedItem Parms{};

	Parms.SelectedItem = SelectedItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxWidget.OnBackButtonClicked
// (Final, Native, Private)

void UCoreInboxWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxWidget.OnClaimClicked
// (Final, Native, Private)

void UCoreInboxWidget::OnClaimClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxWidget", "OnClaimClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxWidget.OnItemClicked
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FName&                      ItemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxWidget::OnItemClicked(const class FName& ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxWidget", "OnItemClicked");

	Params::CoreInboxWidget_OnItemClicked Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxWidget.OnMessagesGeneralButtonClicked
// (Final, Native, Private)

void UCoreInboxWidget::OnMessagesGeneralButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxWidget", "OnMessagesGeneralButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxWidget.OnNewsGeneralButtonClicked
// (Final, Native, Private)

void UCoreInboxWidget::OnNewsGeneralButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxWidget", "OnNewsGeneralButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxWidget.OnRedirectClicked
// (Final, Native, Private)

void UCoreInboxWidget::OnRedirectClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxWidget", "OnRedirectClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInboxWidget.OnTabSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInboxWidget::OnTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInboxWidget", "OnTabSelected");

	Params::CoreInboxWidget_OnTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnCharacterSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersSelectionWidget::OnCharacterSelected(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "OnCharacterSelected");

	Params::CoreStoreCharactersSelectionWidget_OnCharacterSelected Parms{};

	Parms.buttonTarget = buttonTarget;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnClearFiltersClicked
// (Final, Native, Protected)

void UCoreStoreCharactersSelectionWidget::OnClearFiltersClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "OnClearFiltersClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnFiltersButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersSelectionWidget::OnFiltersButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "OnFiltersButtonClicked");

	Params::CoreStoreCharactersSelectionWidget_OnFiltersButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnFiltersChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FStoreCharactersFiltersData&storeFiltersData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreCharactersSelectionWidget::OnFiltersChanged(const struct FStoreCharactersFiltersData& storeFiltersData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "OnFiltersChanged");

	Params::CoreStoreCharactersSelectionWidget_OnFiltersChanged Parms{};

	Parms.storeFiltersData = std::move(storeFiltersData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnFiltersWidgetVisibilityChanged
// (Final, Native, Protected)
// Parameters:
// const ESlateVisibility                  newVisibility                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersSelectionWidget::OnFiltersWidgetVisibilityChanged(const ESlateVisibility newVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "OnFiltersWidgetVisibilityChanged");

	Params::CoreStoreCharactersSelectionWidget_OnFiltersWidgetVisibilityChanged Parms{};

	Parms.newVisibility = newVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnPerkToastButtonClick
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersSelectionWidget::OnPerkToastButtonClick(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "OnPerkToastButtonClick");

	Params::CoreStoreCharactersSelectionWidget_OnPerkToastButtonClick Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnPerkWidgetVisibilityChanged
// (Final, Native, Protected)
// Parameters:
// ESlateVisibility                        newVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersSelectionWidget::OnPerkWidgetVisibilityChanged(ESlateVisibility newVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "OnPerkWidgetVisibilityChanged");

	Params::CoreStoreCharactersSelectionWidget_OnPerkWidgetVisibilityChanged Parms{};

	Parms.newVisibility = newVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.SetRightStickMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERightStickMode                         rightStickMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersSelectionWidget::SetRightStickMode(ERightStickMode rightStickMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "SetRightStickMode");

	Params::CoreStoreCharactersSelectionWidget_SetRightStickMode Parms{};

	Parms.rightStickMode = rightStickMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.GetCharacterSelectionScrollBox
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDBDScrollBox*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDBDScrollBox* UCoreStoreCharactersSelectionWidget::GetCharacterSelectionScrollBox() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "GetCharacterSelectionScrollBox");

	Params::CoreStoreCharactersSelectionWidget_GetCharacterSelectionScrollBox Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.GetRightStickMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERightStickMode                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ERightStickMode UCoreStoreCharactersSelectionWidget::GetRightStickMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersSelectionWidget", "GetRightStickMode");

	Params::CoreStoreCharactersSelectionWidget_GetRightStickMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.DisplayPrompt
// (Event, Protected, BlueprintEvent)

void UCoreInputPromptWidget::DisplayPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "DisplayPrompt");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreInputPromptWidget.GetInputKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UCoreInputPromptWidget::GetInputKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "GetInputKey");

	Params::CoreInputPromptWidget_GetInputKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInputPromptWidget::IsEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "IsEnabled");

	Params::CoreInputPromptWidget_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.OnEnabledChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputPromptWidget::OnEnabledChanged(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "OnEnabledChanged");

	Params::CoreInputPromptWidget_OnEnabledChanged Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreInputPromptWidget.PromptNotFound
// (Final, Native, Protected, BlueprintCallable)

void UCoreInputPromptWidget::PromptNotFound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "PromptNotFound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.SetBetaFeatureOverlayVisible
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputPromptWidget::SetBetaFeatureOverlayVisible(bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "SetBetaFeatureOverlayVisible");

	Params::CoreInputPromptWidget_SetBetaFeatureOverlayVisible Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreInputPromptWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputPromptWidget::SetEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "SetEnabled");

	Params::CoreInputPromptWidget_SetEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.SetInputKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      InputKey                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputPromptWidget::SetInputKey(const struct FKey& InputKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "SetInputKey");

	Params::CoreInputPromptWidget_SetInputKey Parms{};

	Parms.InputKey = std::move(InputKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.GetInputShortDisplayName
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreInputPromptWidget::GetInputShortDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "GetInputShortDisplayName");

	Params::CoreInputPromptWidget_GetInputShortDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.BindHoverBorder
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              IsInteractable_0                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::BindHoverBorder(const bool IsInteractable_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "BindHoverBorder");

	Params::CoreStoreItemWidget_BindHoverBorder Parms{};

	Parms.IsInteractable_0 = IsInteractable_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.ClearPriceTagWidgets
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreItemWidget::ClearPriceTagWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "ClearPriceTagWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.ClearTimerFlagWidgets
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreItemWidget::ClearTimerFlagWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "ClearTimerFlagWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.CreatePriceTagWidget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCorePriceTagWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCorePriceTagWidget* UCoreStoreItemWidget::CreatePriceTagWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "CreatePriceTagWidget");

	Params::CoreStoreItemWidget_CreatePriceTagWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.CreateTimerFlagWidget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreTimerFlagWidget*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreTimerFlagWidget* UCoreStoreItemWidget::CreateTimerFlagWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "CreateTimerFlagWidget");

	Params::CoreStoreItemWidget_CreateTimerFlagWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.OnButtonHovered
// (Native, Protected)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::OnButtonHovered(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "OnButtonHovered");

	Params::CoreStoreItemWidget_OnButtonHovered Parms{};

	Parms.targetButton = targetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.OnButtonSelectedChanged
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected_0                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::OnButtonSelectedChanged(class UCoreSelectableButtonWidget* targetButton, bool IsSelected_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "OnButtonSelectedChanged");

	Params::CoreStoreItemWidget_OnButtonSelectedChanged Parms{};

	Parms.targetButton = targetButton;
	Parms.IsSelected_0 = IsSelected_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.OnButtonUnhovered
// (Native, Protected)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::OnButtonUnhovered(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "OnButtonUnhovered");

	Params::CoreStoreItemWidget_OnButtonUnhovered Parms{};

	Parms.targetButton = targetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.SetNotificationTag
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              IsNew                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::SetNotificationTag(const bool IsNew)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "SetNotificationTag");

	Params::CoreStoreItemWidget_SetNotificationTag Parms{};

	Parms.IsNew = IsNew;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreItemWidget.SetPriceTagScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             priceTagScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::SetPriceTagScale(const float priceTagScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "SetPriceTagScale");

	Params::CoreStoreItemWidget_SetPriceTagScale Parms{};

	Parms.priceTagScale = priceTagScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.SetScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::SetScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "SetScale");

	Params::CoreStoreItemWidget_SetScale Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.SetShowTooltipOnHover
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              showTooltipOnHover                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::SetShowTooltipOnHover(const bool showTooltipOnHover)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "SetShowTooltipOnHover");

	Params::CoreStoreItemWidget_SetShowTooltipOnHover Parms{};

	Parms.showTooltipOnHover = showTooltipOnHover;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.SetStoreItemData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreItemViewData*               Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::SetStoreItemData(class UStoreItemViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "SetStoreItemData");

	Params::CoreStoreItemWidget_SetStoreItemData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.SetStoreItemLayout
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   layoutMask                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::SetStoreItemLayout(int32 layoutMask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "SetStoreItemLayout");

	Params::CoreStoreItemWidget_SetStoreItemLayout Parms{};

	Parms.layoutMask = layoutMask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.SetTimerFlagSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFlagSize                               FlagSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemWidget::SetTimerFlagSize(EFlagSize FlagSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "SetTimerFlagSize");

	Params::CoreStoreItemWidget_SetTimerFlagSize Parms{};

	Parms.FlagSize = FlagSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreItemWidget.IsTagEnabled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             layoutMask                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreStoreItemWidget::IsTagEnabled(const int32 layoutMask) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemWidget", "IsTagEnabled");

	Params::CoreStoreItemWidget_IsTagEnabled Parms{};

	Parms.layoutMask = layoutMask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInteractionProgressWidget.SetProficiencies
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FStatusEffectViewData>&proficiencyDatas                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInteractionProgressWidget::SetProficiencies(const TArray<struct FStatusEffectViewData>& proficiencyDatas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionProgressWidget", "SetProficiencies");

	Params::CoreInteractionProgressWidget_SetProficiencies Parms{};

	Parms.proficiencyDatas = std::move(proficiencyDatas);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.PlayIdleAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreInteractionPromptActionWidget::PlayIdleAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "PlayIdleAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      InputKey_0                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptActionWidget::SetInputKey(const struct FKey& InputKey_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "SetInputKey");

	Params::CoreInteractionPromptActionWidget_SetInputKey Parms{};

	Parms.InputKey_0 = std::move(InputKey_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      InputKey2_0                                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptActionWidget::SetInputKey2(const struct FKey& InputKey2_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "SetInputKey2");

	Params::CoreInteractionPromptActionWidget_SetInputKey2 Parms{};

	Parms.InputKey2_0 = std::move(InputKey2_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey3
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      InputKey3_0                                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptActionWidget::SetInputKey3(const struct FKey& InputKey3_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "SetInputKey3");

	Params::CoreInteractionPromptActionWidget_SetInputKey3 Parms{};

	Parms.InputKey3_0 = std::move(InputKey3_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey4
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      InputKey4_0                                            (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptActionWidget::SetInputKey4(const struct FKey& InputKey4_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "SetInputKey4");

	Params::CoreInteractionPromptActionWidget_SetInputKey4 Parms{};

	Parms.InputKey4_0 = std::move(InputKey4_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.StopIdleAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreInteractionPromptActionWidget::StopIdleAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "StopIdleAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasFourthPrompt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInteractionPromptActionWidget::HasFourthPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "HasFourthPrompt");

	Params::CoreInteractionPromptActionWidget_HasFourthPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasSecondPrompt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInteractionPromptActionWidget::HasSecondPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "HasSecondPrompt");

	Params::CoreInteractionPromptActionWidget_HasSecondPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasThirdPrompt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInteractionPromptActionWidget::HasThirdPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "HasThirdPrompt");

	Params::CoreInteractionPromptActionWidget_HasThirdPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCollectionsCustomizationsWidget.SetCollectionVisuals
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UStoreCollectionViewData*   CollectionViewData                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCollectionsCustomizationsWidget::SetCollectionVisuals(const class UStoreCollectionViewData* CollectionViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsCustomizationsWidget", "SetCollectionVisuals");

	Params::CoreStoreCollectionsCustomizationsWidget_SetCollectionVisuals Parms{};

	Parms.CollectionViewData = CollectionViewData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreCollectionsCustomizationsWidget.GetCharactersCustomizations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreStoreCharactersCustomizationsWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreStoreCharactersCustomizationsWidget* UCoreStoreCollectionsCustomizationsWidget::GetCharactersCustomizations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsCustomizationsWidget", "GetCharactersCustomizations");

	Params::CoreStoreCollectionsCustomizationsWidget_GetCharactersCustomizations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInteractionPromptWidget.ClearData
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreInteractionPromptWidget::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptWidget", "ClearData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreInteractionPromptWidget.OnLargeTextSettingsChanged
// (Final, Native, Private)
// Parameters:
// bool                                    isLargeTextEnabled                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptWidget::OnLargeTextSettingsChanged(bool isLargeTextEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptWidget", "OnLargeTextSettingsChanged");

	Params::CoreInteractionPromptWidget_OnLargeTextSettingsChanged Parms{};

	Parms.isLargeTextEnabled = isLargeTextEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInteractionPromptViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInteractionPromptWidget::SetData(const struct FInteractionPromptViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptWidget", "SetData");

	Params::CoreInteractionPromptWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.ClearPriceTagWidgets
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreFeaturedCustomizationItemWidget::ClearPriceTagWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "ClearPriceTagWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.ClearTimerFlagWidgets
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreFeaturedCustomizationItemWidget::ClearTimerFlagWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "ClearTimerFlagWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.CreatePriceTagWidget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCorePriceTagWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCorePriceTagWidget* UCoreStoreFeaturedCustomizationItemWidget::CreatePriceTagWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "CreatePriceTagWidget");

	Params::CoreStoreFeaturedCustomizationItemWidget_CreatePriceTagWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.OnSelectedItemChanged
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected_0                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::OnSelectedItemChanged(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "OnSelectedItemChanged");

	Params::CoreStoreFeaturedCustomizationItemWidget_OnSelectedItemChanged Parms{};

	Parms.buttonTarget = buttonTarget;
	Parms.IsSelected_0 = IsSelected_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.SetChapterPackData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreChapterPackViewData*        chapterPackViewData                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::SetChapterPackData(class UStoreChapterPackViewData* chapterPackViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "SetChapterPackData");

	Params::CoreStoreFeaturedCustomizationItemWidget_SetChapterPackData Parms{};

	Parms.chapterPackViewData = chapterPackViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.SetCustomizationData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreCustomizationItemViewData*  customizationItemViewData                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::SetCustomizationData(class UStoreCustomizationItemViewData* customizationItemViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "SetCustomizationData");

	Params::CoreStoreFeaturedCustomizationItemWidget_SetCustomizationData Parms{};

	Parms.customizationItemViewData = customizationItemViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.SetOwnedTagVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              IsVisible_0                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::SetOwnedTagVisibility(const bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "SetOwnedTagVisibility");

	Params::CoreStoreFeaturedCustomizationItemWidget_SetOwnedTagVisibility Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.SetPriceTags
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              IsBuyable                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FPriceTagViewData>& priceTags                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::SetPriceTags(const bool IsBuyable, const TArray<struct FPriceTagViewData>& priceTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "SetPriceTags");

	Params::CoreStoreFeaturedCustomizationItemWidget_SetPriceTags Parms{};

	Parms.IsBuyable = IsBuyable;
	Parms.priceTags = std::move(priceTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.SetTimerFlags
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FTimerFlagViewData&        LimitedTimeFlag                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FTimerFlagViewData&        DiscountTimeFlag                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              IsOwned                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::SetTimerFlags(const struct FTimerFlagViewData& LimitedTimeFlag, const struct FTimerFlagViewData& DiscountTimeFlag, const bool IsOwned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "SetTimerFlags");

	Params::CoreStoreFeaturedCustomizationItemWidget_SetTimerFlags Parms{};

	Parms.LimitedTimeFlag = std::move(LimitedTimeFlag);
	Parms.DiscountTimeFlag = std::move(DiscountTimeFlag);
	Parms.IsOwned = IsOwned;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.ShowTimerFlagWidget
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FTimerFlagViewData&        timerFlagData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCoreTimerFlagWidget*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreTimerFlagWidget* UCoreStoreFeaturedCustomizationItemWidget::ShowTimerFlagWidget(const struct FTimerFlagViewData& timerFlagData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "ShowTimerFlagWidget");

	Params::CoreStoreFeaturedCustomizationItemWidget_ShowTimerFlagWidget Parms{};

	Parms.timerFlagData = std::move(timerFlagData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.UpdateOnHoverBorder
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::UpdateOnHoverBorder(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "UpdateOnHoverBorder");

	Params::CoreStoreFeaturedCustomizationItemWidget_UpdateOnHoverBorder Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.UpdatePosition
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::UpdatePosition(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "UpdatePosition");

	Params::CoreStoreFeaturedCustomizationItemWidget_UpdatePosition Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.UpdateSize
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::UpdateSize(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "UpdateSize");

	Params::CoreStoreFeaturedCustomizationItemWidget_UpdateSize Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.UpdateSizeCompleted
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemWidget::UpdateSizeCompleted(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemWidget", "UpdateSizeCompleted");

	Params::CoreStoreFeaturedCustomizationItemWidget_UpdateSizeCompleted Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.OnContentClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::OnContentClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "OnContentClicked");

	Params::CoreStoreContentWidget_OnContentClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetChapterPackData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreChapterPackViewData*        Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              appendDataToAnalyticsName                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetChapterPackData(class UStoreChapterPackViewData* Data, const bool appendDataToAnalyticsName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetChapterPackData");

	Params::CoreStoreContentWidget_SetChapterPackData Parms{};

	Parms.Data = Data;
	Parms.appendDataToAnalyticsName = appendDataToAnalyticsName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetCollectionData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreCollectionViewData*         Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              appendDataToAnalyticsName                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetCollectionData(class UStoreCollectionViewData* Data, const bool appendDataToAnalyticsName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetCollectionData");

	Params::CoreStoreContentWidget_SetCollectionData Parms{};

	Parms.Data = Data;
	Parms.appendDataToAnalyticsName = appendDataToAnalyticsName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetCrossPromotionData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FCrossPromoCampaignViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              appendDataToAnalyticsName                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetCrossPromotionData(const struct FCrossPromoCampaignViewData& Data, const bool appendDataToAnalyticsName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetCrossPromotionData");

	Params::CoreStoreContentWidget_SetCrossPromotionData Parms{};

	Parms.Data = std::move(Data);
	Parms.appendDataToAnalyticsName = appendDataToAnalyticsName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetHeritagePackData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStoreHeritagePackViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              appendDataToAnalyticsName                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetHeritagePackData(const struct FStoreHeritagePackViewData& Data, const bool appendDataToAnalyticsName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetHeritagePackData");

	Params::CoreStoreContentWidget_SetHeritagePackData Parms{};

	Parms.Data = std::move(Data);
	Parms.appendDataToAnalyticsName = appendDataToAnalyticsName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetImageCompositionData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    packId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      DisplayTitle                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             PackImageCompositionNumberOfItems                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UStorePackContentData*>&packContentData                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetImageCompositionData(const class FString& packId, const class FText& DisplayTitle, const int32 PackImageCompositionNumberOfItems, const TArray<class UStorePackContentData*>& packContentData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetImageCompositionData");

	Params::CoreStoreContentWidget_SetImageCompositionData Parms{};

	Parms.packId = std::move(packId);
	Parms.DisplayTitle = std::move(DisplayTitle);
	Parms.PackImageCompositionNumberOfItems = PackImageCompositionNumberOfItems;
	Parms.packContentData = std::move(packContentData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetNewIcon
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              IsNew                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetNewIcon(const bool IsNew)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetNewIcon");

	Params::CoreStoreContentWidget_SetNewIcon Parms{};

	Parms.IsNew = IsNew;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetOwnedTagVisibility
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              IsVisible_0                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetOwnedTagVisibility(const bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetOwnedTagVisibility");

	Params::CoreStoreContentWidget_SetOwnedTagVisibility Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetPriceTagDataAndVisibility
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPriceTagViewData&         PriceTagData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              IsVisible_0                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetPriceTagDataAndVisibility(const struct FPriceTagViewData& PriceTagData, const bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetPriceTagDataAndVisibility");

	Params::CoreStoreContentWidget_SetPriceTagDataAndVisibility Parms{};

	Parms.PriceTagData = std::move(PriceTagData);
	Parms.IsVisible_0 = IsVisible_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetPriceTagVisibility
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              IsVisible_0                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetPriceTagVisibility(const bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetPriceTagVisibility");

	Params::CoreStoreContentWidget_SetPriceTagVisibility Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetRiftIconsVisibility
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              showRiftIconsContainer                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              showRiftFragmentIcon                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetRiftIconsVisibility(const bool showRiftIconsContainer, const bool showRiftFragmentIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetRiftIconsVisibility");

	Params::CoreStoreContentWidget_SetRiftIconsVisibility Parms{};

	Parms.showRiftIconsContainer = showRiftIconsContainer;
	Parms.showRiftFragmentIcon = showRiftFragmentIcon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetSimplifiedData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    packId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      DisplayTitle                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TSoftObjectPtr<class UTexture2D>& imagePtr                                               (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSoftRemoteContentCacheObjectPtr&imageRemotePtr                                         (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetSimplifiedData(const class FString& packId, const class FText& DisplayTitle, const TSoftObjectPtr<class UTexture2D>& imagePtr, const struct FSoftRemoteContentCacheObjectPtr& imageRemotePtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetSimplifiedData");

	Params::CoreStoreContentWidget_SetSimplifiedData Parms{};

	Parms.packId = std::move(packId);
	Parms.DisplayTitle = std::move(DisplayTitle);
	Parms.imagePtr = imagePtr;
	Parms.imageRemotePtr = std::move(imageRemotePtr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetSimplifiedVisuals
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreContentWidget::SetSimplifiedVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetSimplifiedVisuals");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetSpecialPackData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreSpecialPackViewData*        Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              appendDataToAnalyticsName                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetSpecialPackData(class UStoreSpecialPackViewData* Data, const bool appendDataToAnalyticsName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetSpecialPackData");

	Params::CoreStoreContentWidget_SetSpecialPackData Parms{};

	Parms.Data = Data;
	Parms.appendDataToAnalyticsName = appendDataToAnalyticsName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetSpecialPackImageUsingComposition
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             numberOfItems                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UStorePackContentData*>&Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<class FName, class UTexture2D*>&icons                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetSpecialPackImageUsingComposition(const int32 numberOfItems, const TArray<class UStorePackContentData*>& Data, const TMap<class FName, class UTexture2D*>& icons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetSpecialPackImageUsingComposition");

	Params::CoreStoreContentWidget_SetSpecialPackImageUsingComposition Parms{};

	Parms.numberOfItems = numberOfItems;
	Parms.Data = std::move(Data);
	Parms.icons = std::move(icons);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetTextBlockVisibility
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UDBDTextBlock*                    TextBlock                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              IsVisible_0                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetTextBlockVisibility(class UDBDTextBlock* TextBlock, const bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetTextBlockVisibility");

	Params::CoreStoreContentWidget_SetTextBlockVisibility Parms{};

	Parms.TextBlock = TextBlock;
	Parms.IsVisible_0 = IsVisible_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetTimerFlagDataAndVisibility
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class UCoreTimerFlagWidget*             Timer                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTimerFlagViewData&        timerData                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              isItemOwned                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetTimerFlagDataAndVisibility(class UCoreTimerFlagWidget* Timer, const struct FTimerFlagViewData& timerData, const bool isItemOwned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetTimerFlagDataAndVisibility");

	Params::CoreStoreContentWidget_SetTimerFlagDataAndVisibility Parms{};

	Parms.Timer = Timer;
	Parms.timerData = std::move(timerData);
	Parms.isItemOwned = isItemOwned;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.SetTimerFlagVisibility
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreTimerFlagWidget*             Timer                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              IsVisible_0                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::SetTimerFlagVisibility(class UCoreTimerFlagWidget* Timer, const bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "SetTimerFlagVisibility");

	Params::CoreStoreContentWidget_SetTimerFlagVisibility Parms{};

	Parms.Timer = Timer;
	Parms.IsVisible_0 = IsVisible_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreContentWidget.LoadBannerImage
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        localPtr                                               (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoftRemoteContentCacheObjectPtr*remotePtr                                              (Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreContentWidget::LoadBannerImage(TSoftObjectPtr<class UTexture2D> localPtr, struct FSoftRemoteContentCacheObjectPtr* remotePtr) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreContentWidget", "LoadBannerImage");

	Params::CoreStoreContentWidget_LoadBannerImage Parms{};

	Parms.localPtr = localPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (remotePtr != nullptr)
		*remotePtr = std::move(Parms.remotePtr);
}


// Function DBDUIViewsCore.CoreItemSummaryPopupWidget.OnItemHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreItemSummaryPopupWidget::OnItemHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreItemSummaryPopupWidget", "OnItemHovered");

	Params::CoreItemSummaryPopupWidget_OnItemHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreItemSummaryPopupWidget.OnItemUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreItemSummaryPopupWidget::OnItemUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreItemSummaryPopupWidget", "OnItemUnhovered");

	Params::CoreItemSummaryPopupWidget_OnItemUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreItemSummaryPopupWidget.PreviewItems
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   perkCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   itemCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   addonCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OfferingCount                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreItemSummaryPopupWidget::PreviewItems(int32 perkCount, int32 itemCount, int32 addonCount, int32 OfferingCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreItemSummaryPopupWidget", "PreviewItems");

	Params::CoreItemSummaryPopupWidget_PreviewItems Parms{};

	Parms.perkCount = perkCount;
	Parms.itemCount = itemCount;
	Parms.addonCount = addonCount;
	Parms.OfferingCount = OfferingCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharmSlotListWidget.OnCharmSlotSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharmSlotListWidget::OnCharmSlotSelected(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharmSlotListWidget", "OnCharmSlotSelected");

	Params::CoreStoreCharmSlotListWidget_OnCharmSlotSelected Parms{};

	Parms.buttonTarget = buttonTarget;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget.OnIndicatorClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedContentContainerWidget::OnIndicatorClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedContentContainerWidget", "OnIndicatorClicked");

	Params::CoreStoreFeaturedContentContainerWidget_OnIndicatorClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget.OnIndicatorSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedContentContainerWidget::OnIndicatorSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedContentContainerWidget", "OnIndicatorSelected");

	Params::CoreStoreFeaturedContentContainerWidget_OnIndicatorSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget.OnNextArrowClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedContentContainerWidget::OnNextArrowClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedContentContainerWidget", "OnNextArrowClicked");

	Params::CoreStoreFeaturedContentContainerWidget_OnNextArrowClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget.OnPreviousArrowClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedContentContainerWidget::OnPreviousArrowClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedContentContainerWidget", "OnPreviousArrowClicked");

	Params::CoreStoreFeaturedContentContainerWidget_OnPreviousArrowClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget.OnStoreContentClicked
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FStoreContentViewData&     StoreContentViewData                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedContentContainerWidget::OnStoreContentClicked(const struct FStoreContentViewData& StoreContentViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedContentContainerWidget", "OnStoreContentClicked");

	Params::CoreStoreFeaturedContentContainerWidget_OnStoreContentClicked Parms{};

	Parms.StoreContentViewData = std::move(StoreContentViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget.OnStoreContentHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedContentContainerWidget::OnStoreContentHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedContentContainerWidget", "OnStoreContentHovered");

	Params::CoreStoreFeaturedContentContainerWidget_OnStoreContentHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget.OnStoreContentUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedContentContainerWidget::OnStoreContentUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedContentContainerWidget", "OnStoreContentUnhovered");

	Params::CoreStoreFeaturedContentContainerWidget_OnStoreContentUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreBaseTabWidget.OnShow
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStoreBaseTabWidget::OnShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreBaseTabWidget", "OnShow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreStoreBaseSubTabsWidget.GetSubTabContentForTab
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   subTabId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UCoreStoreBaseSubTabsWidget::GetSubTabContentForTab(int32 subTabId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreBaseSubTabsWidget", "GetSubTabContentForTab");

	Params::CoreStoreBaseSubTabsWidget_GetSubTabContentForTab Parms{};

	Parms.subTabId = subTabId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreBaseSubTabsWidget.OnSubTabSelected
// (Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreBaseSubTabsWidget::OnSubTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreBaseSubTabsWidget", "OnSubTabSelected");

	Params::CoreStoreBaseSubTabsWidget_OnSubTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.AnimateHideDetails
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::AnimateHideDetails()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "AnimateHideDetails");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.AnimateHideTabs
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::AnimateHideTabs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "AnimateHideTabs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.AnimateShowDetails
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::AnimateShowDetails()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "AnimateShowDetails");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.AnimateShowTabs
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::AnimateShowTabs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "AnimateShowTabs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.OnDetailsHideAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::OnDetailsHideAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "OnDetailsHideAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.OnDetailsShowAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::OnDetailsShowAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "OnDetailsShowAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.OnTabsHideAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::OnTabsHideAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "OnTabsHideAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.OnTabsShowAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreStoreSpecialPacksWidget::OnTabsShowAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "OnTabsShowAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.SetTabInputsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              IsEnabled                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPacksWidget::SetTabInputsEnabled(const bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksWidget", "SetTabInputsEnabled");

	Params::CoreStoreSpecialPacksWidget_SetTabInputsEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadingHintsDisplayWidget.SetLoadingHint
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLoadingHintViewData&      loadingHintData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreLoadingHintsDisplayWidget::SetLoadingHint(const struct FLoadingHintViewData& loadingHintData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingHintsDisplayWidget", "SetLoadingHint");

	Params::CoreLoadingHintsDisplayWidget_SetLoadingHint Parms{};

	Parms.loadingHintData = std::move(loadingHintData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadingHintsDisplayWidget.SetTextAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextJustify                            titleAlignment                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextJustify                            descriptionAlignment                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadingHintsDisplayWidget::SetTextAlignment(ETextJustify titleAlignment, ETextJustify descriptionAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingHintsDisplayWidget", "SetTextAlignment");

	Params::CoreLoadingHintsDisplayWidget_SetTextAlignment Parms{};

	Parms.titleAlignment = titleAlignment;
	Parms.descriptionAlignment = descriptionAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadingHintsDisplayWidget.SetTextColors
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLinearColor&              TitleColor                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              descriptionColor                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadingHintsDisplayWidget::SetTextColors(const struct FLinearColor& TitleColor, const struct FLinearColor& descriptionColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingHintsDisplayWidget", "SetTextColors");

	Params::CoreLoadingHintsDisplayWidget_SetTextColors Parms{};

	Parms.TitleColor = std::move(TitleColor);
	Parms.descriptionColor = std::move(descriptionColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadingHintsDisplayWidget.StartFadeSequence
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeOutDelay                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadingHintsDisplayWidget::StartFadeSequence(float FadeOutDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingHintsDisplayWidget", "StartFadeSequence");

	Params::CoreLoadingHintsDisplayWidget_StartFadeSequence Parms{};

	Parms.FadeOutDelay = FadeOutDelay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreLoadingLogoWidget.UpdateColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLinearColor&              Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadingLogoWidget::UpdateColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingLogoWidget", "UpdateColor");

	Params::CoreLoadingLogoWidget_UpdateColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadingScreenWidget.OnLoadingHintsFadeSequenceCompleted
// (Final, Native, Protected)

void UCoreLoadingScreenWidget::OnLoadingHintsFadeSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingScreenWidget", "OnLoadingHintsFadeSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadingScreenWidget.SetProgressBarColors
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLinearColor&              PrimaryColor                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              secondaryColor                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadingScreenWidget::SetProgressBarColors(const struct FLinearColor& PrimaryColor, const struct FLinearColor& secondaryColor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingScreenWidget", "SetProgressBarColors");

	Params::CoreLoadingScreenWidget_SetProgressBarColors Parms{};

	Parms.PrimaryColor = std::move(PrimaryColor);
	Parms.secondaryColor = std::move(secondaryColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLoadingScreenWidget.SetProgressBarValue
// (Final, Native, Protected, BlueprintCallable, Const)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLoadingScreenWidget::SetProgressBarValue(float Progress) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLoadingScreenWidget", "SetProgressBarValue");

	Params::CoreLoadingScreenWidget_SetProgressBarValue Parms{};

	Parms.Progress = Progress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCharacterContainerWidget.OnCharacterTileClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCharacterContainerWidget::OnCharacterTileClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCharacterContainerWidget", "OnCharacterTileClicked");

	Params::CoreStoreFeaturedCharacterContainerWidget_OnCharacterTileClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyCharactersWidget.OnSelectionSubTabHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyCharactersWidget::OnSelectionSubTabHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyCharactersWidget", "OnSelectionSubTabHovered");

	Params::CoreLobbyCharactersWidget_OnSelectionSubTabHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyCharactersWidget.OnSelectionSubTabUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyCharactersWidget::OnSelectionSubTabUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyCharactersWidget", "OnSelectionSubTabUnhovered");

	Params::CoreLobbyCharactersWidget_OnSelectionSubTabUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyCharactersWidget.OnSubTabSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyCharactersWidget::OnSubTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyCharactersWidget", "OnSubTabSelected");

	Params::CoreLobbyCharactersWidget_OnSubTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyPerkPreviewerWidget.IsLayoutSectionEnabled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             loadoutLayoutMask                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreLobbyPerkPreviewerWidget::IsLayoutSectionEnabled(const int32 loadoutLayoutMask) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyPerkPreviewerWidget", "IsLayoutSectionEnabled");

	Params::CoreLobbyPerkPreviewerWidget_IsLayoutSectionEnabled Parms{};

	Parms.loadoutLayoutMask = loadoutLayoutMask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreLobbySidePanelButtonDecoration.OnEnabledChanged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbySidePanelButtonDecoration::OnEnabledChanged(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbySidePanelButtonDecoration", "OnEnabledChanged");

	Params::CoreLobbySidePanelButtonDecoration_OnEnabledChanged Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbySidePanelButtonDecoration.OnHover
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreLobbySidePanelButtonDecoration::OnHover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbySidePanelButtonDecoration", "OnHover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbySidePanelButtonDecoration.OnPressed
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreLobbySidePanelButtonDecoration::OnPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbySidePanelButtonDecoration", "OnPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbySidePanelButtonDecoration.OnReleased
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreLobbySidePanelButtonDecoration::OnReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbySidePanelButtonDecoration", "OnReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbySidePanelButtonDecoration.OnUnhover
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreLobbySidePanelButtonDecoration::OnUnhover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbySidePanelButtonDecoration", "OnUnhover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbySidePanelButtonDecoration.SetInitialVisual
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreLobbySidePanelButtonDecoration::SetInitialVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbySidePanelButtonDecoration", "SetInitialVisual");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.HideBackgroundVisual
// (Event, Protected, BlueprintEvent)

void UCoreLobbyWidget::HideBackgroundVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "HideBackgroundVisual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnArchivesButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyWidget::OnArchivesButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnArchivesButtonClicked");

	Params::CoreLobbyWidget_OnArchivesButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnBackButtonClicked
// (Final, Native, Protected)

void UCoreLobbyWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnBloodPointBulkSpendingButtonClicked
// (Final, Native, Protected)

void UCoreLobbyWidget::OnBloodPointBulkSpendingButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnBloodPointBulkSpendingButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnChallengesButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyWidget::OnChallengesButtonHovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnChallengesButtonHovered");

	Params::CoreLobbyWidget_OnChallengesButtonHovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnChallengesButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyWidget::OnChallengesButtonUnhovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnChallengesButtonUnhovered");

	Params::CoreLobbyWidget_OnChallengesButtonUnhovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnChatHovered
// (Final, Native, Private)

void UCoreLobbyWidget::OnChatHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnChatHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnChatUnhovered
// (Final, Native, Private)

void UCoreLobbyWidget::OnChatUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnChatUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnFriendsButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyWidget::OnFriendsButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnFriendsButtonClicked");

	Params::CoreLobbyWidget_OnFriendsButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnInboxButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyWidget::OnInboxButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnInboxButtonClicked");

	Params::CoreLobbyWidget_OnInboxButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnLevelUpAnimationDone
// (Final, Native, Protected)

void UCoreLobbyWidget::OnLevelUpAnimationDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnLevelUpAnimationDone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnMatchManagementButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyWidget::OnMatchManagementButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnMatchManagementButtonClicked");

	Params::CoreLobbyWidget_OnMatchManagementButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnMenuStateChanged
// (Event, Protected, BlueprintEvent)

void UCoreLobbyWidget::OnMenuStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnMenuStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreLobbyWidget.OnSettingsButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyWidget::OnSettingsButtonClicked(class UCoreButtonWidget* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "OnSettingsButtonClicked");

	Params::CoreLobbyWidget_OnSettingsButtonClicked Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreLobbyWidget.SetUiTakeoverVisuals
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLobbyWidget::SetUiTakeoverVisuals(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "SetUiTakeoverVisuals");

	Params::CoreLobbyWidget_SetUiTakeoverVisuals Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreLobbyWidget.ShowBackgroundVisual
// (Event, Protected, BlueprintEvent)

void UCoreLobbyWidget::ShowBackgroundVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLobbyWidget", "ShowBackgroundVisual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.AddTimerFlag
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTimerFlagViewData&        TimerFlagViewData                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::AddTimerFlag(const struct FTimerFlagViewData& TimerFlagViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "AddTimerFlag");

	Params::CoreMainMenuButtonWidget_AddTimerFlag Parms{};

	Parms.TimerFlagViewData = std::move(TimerFlagViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.ClearAllTimerFlags
// (Final, Native, Public, BlueprintCallable)

void UCoreMainMenuButtonWidget::ClearAllTimerFlags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "ClearAllTimerFlags");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.CreateTimerFlag
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreTimerFlagWidget*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreTimerFlagWidget* UCoreMainMenuButtonWidget::CreateTimerFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "CreateTimerFlag");

	Params::CoreMainMenuButtonWidget_CreateTimerFlag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.GetRowDataFromMainMenuButtonsEventDB
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMainMenuButtonsEventData*       buttonsEventData                                       (Parm, OutParm, NativeAccessSpecifierPublic)
// const class FString&                    eventFrameLabel                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreMainMenuButtonWidget::GetRowDataFromMainMenuButtonsEventDB(struct FMainMenuButtonsEventData* buttonsEventData, const class FString& eventFrameLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "GetRowDataFromMainMenuButtonsEventDB");

	Params::CoreMainMenuButtonWidget_GetRowDataFromMainMenuButtonsEventDB Parms{};

	Parms.eventFrameLabel = std::move(eventFrameLabel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (buttonsEventData != nullptr)
		*buttonsEventData = std::move(Parms.buttonsEventData);

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.PlaySubMenuAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isFadingOut                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   animDuration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::PlaySubMenuAnimation(bool isFadingOut, float animDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "PlaySubMenuAnimation");

	Params::CoreMainMenuButtonWidget_PlaySubMenuAnimation Parms{};

	Parms.isFadingOut = isFadingOut;
	Parms.animDuration = animDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetBonus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bonusPercent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetBonus(int32 bonusPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetBonus");

	Params::CoreMainMenuButtonWidget_SetBonus Parms{};

	Parms.bonusPercent = bonusPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetBonusText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetBonusText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetBonusText");

	Params::CoreMainMenuButtonWidget_SetBonusText Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetBonusVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetBonusVisibility(bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetBonusVisibility");

	Params::CoreMainMenuButtonWidget_SetBonusVisibility Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetDecoration
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    decorationId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetDecoration(const class FString& decorationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetDecoration");

	Params::CoreMainMenuButtonWidget_SetDecoration Parms{};

	Parms.decorationId = std::move(decorationId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetDecorationVisible
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetDecorationVisible(bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetDecorationVisible");

	Params::CoreMainMenuButtonWidget_SetDecorationVisible Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetHighlight
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    decorationId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetHighlight(const class FString& decorationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetHighlight");

	Params::CoreMainMenuButtonWidget_SetHighlight Parms{};

	Parms.decorationId = std::move(decorationId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetIcon
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    eventID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetIcon(const class FString& eventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetIcon");

	Params::CoreMainMenuButtonWidget_SetIcon Parms{};

	Parms.eventID = std::move(eventID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetSubtitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      subtitle                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetSubtitle(const class FText& subtitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetSubtitle");

	Params::CoreMainMenuButtonWidget_SetSubtitle Parms{};

	Parms.subtitle = std::move(subtitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetSubtitleTimerIconVisible
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetSubtitleTimerIconVisible(bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetSubtitleTimerIconVisible");

	Params::CoreMainMenuButtonWidget_SetSubtitleTimerIconVisible Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetSubtitleVisible
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::SetSubtitleVisible(bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "SetSubtitleVisible");

	Params::CoreMainMenuButtonWidget_SetSubtitleVisible Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.UpdateNotificationVisibility
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreMainMenuButtonWidget::UpdateNotificationVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "UpdateNotificationVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.UpdateSubMenuVisuals
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isGoingInSubMenu                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isPreTransitionCall                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMainMenuButtonWidget::UpdateSubMenuVisuals(bool isGoingInSubMenu, bool isPreTransitionCall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "UpdateSubMenuVisuals");

	Params::CoreMainMenuButtonWidget_UpdateSubMenuVisuals Parms{};

	Parms.isGoingInSubMenu = isGoingInSubMenu;
	Parms.isPreTransitionCall = isPreTransitionCall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMainMenuButtonWidget.UpdateTimerFlagsVisibility
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreMainMenuButtonWidget::UpdateTimerFlagsVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMainMenuButtonWidget", "UpdateTimerFlagsVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.OnWatchVideoClicked
// (Final, Native, Public)

void UCoreMarketingInvitationPopupWidget::OnWatchVideoClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMarketingInvitationPopupWidget", "OnWatchVideoClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.SetOptOutToggleValue
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              isOptOutToggleActive                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMarketingInvitationPopupWidget::SetOptOutToggleValue(const bool isOptOutToggleActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMarketingInvitationPopupWidget", "SetOptOutToggleValue");

	Params::CoreMarketingInvitationPopupWidget_SetOptOutToggleValue Parms{};

	Parms.isOptOutToggleActive = isOptOutToggleActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.SetQRCodeImage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TSoftObjectPtr<class UTexture2D>& QrCodeImage                                            (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMarketingInvitationPopupWidget::SetQRCodeImage(const TSoftObjectPtr<class UTexture2D>& QrCodeImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMarketingInvitationPopupWidget", "SetQRCodeImage");

	Params::CoreMarketingInvitationPopupWidget_SetQRCodeImage Parms{};

	Parms.QrCodeImage = QrCodeImage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.ShowOptOutToggle
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              shouldShowToggle                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMarketingInvitationPopupWidget::ShowOptOutToggle(const bool shouldShowToggle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMarketingInvitationPopupWidget", "ShowOptOutToggle");

	Params::CoreMarketingInvitationPopupWidget_ShowOptOutToggle Parms{};

	Parms.shouldShowToggle = shouldShowToggle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.ShowRewards
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              ShowRewards_0                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMarketingInvitationPopupWidget::ShowRewards(const bool ShowRewards_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMarketingInvitationPopupWidget", "ShowRewards");

	Params::CoreMarketingInvitationPopupWidget_ShowRewards Parms{};

	Parms.ShowRewards_0 = ShowRewards_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.OnInstructionButtonClicked
// (Final, Native, Public, BlueprintCallable, Const)

void UCoreMarketingInvitationPopupWidget::OnInstructionButtonClicked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMarketingInvitationPopupWidget", "OnInstructionButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.OnOptOutToggleButtonClicked
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// bool                                    isOptOutToggleActive                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMarketingInvitationPopupWidget::OnOptOutToggleButtonClicked(bool isOptOutToggleActive) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMarketingInvitationPopupWidget", "OnOptOutToggleButtonClicked");

	Params::CoreMarketingInvitationPopupWidget_OnOptOutToggleButtonClicked Parms{};

	Parms.isOptOutToggleActive = isOptOutToggleActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMatchmakingWidget.PlayTextAnimation
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    Play                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMatchmakingWidget::PlayTextAnimation(bool Play)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMatchmakingWidget", "PlayTextAnimation");

	Params::CoreMatchmakingWidget_PlayTextAnimation Parms{};

	Parms.Play = Play;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMenuClassWidget.UpdateFullState
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isFull                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuClassWidget::UpdateFullState(bool isFull)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuClassWidget", "UpdateFullState");

	Params::CoreMenuClassWidget_UpdateFullState Parms{};

	Parms.isFull = isFull;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMenuOfferingWidget.SetHiddenOffering
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsHidden                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuOfferingWidget::SetHiddenOffering(bool IsHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuOfferingWidget", "SetHiddenOffering");

	Params::CoreMenuOfferingWidget_SetHiddenOffering Parms{};

	Parms.IsHidden = IsHidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreNewsWidget.OnBackButtonClicked
// (Final, Native, Private)

void UCoreNewsWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreNewsWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreNewsWidget.OnRedirectButtonClicked
// (Final, Native, Private)

void UCoreNewsWidget::OnRedirectButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreNewsWidget", "OnRedirectButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreNewsWidget.OnTabSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreNewsWidget::OnTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreNewsWidget", "OnTabSelected");

	Params::CoreNewsWidget_OnTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.ResetOnboardingMenuSubtitle
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreOnboardingMenuTitleWidget::ResetOnboardingMenuSubtitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuTitleWidget", "ResetOnboardingMenuSubtitle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuDoubleTitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      menuTitle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      menuSubTitle                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuTitleWidget::SetOnboardingMenuDoubleTitle(const class FText& menuTitle, const class FText& menuSubTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuTitleWidget", "SetOnboardingMenuDoubleTitle");

	Params::CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle Parms{};

	Parms.menuTitle = std::move(menuTitle);
	Parms.menuSubTitle = std::move(menuSubTitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuSubtitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      menuTitle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuTitleWidget::SetOnboardingMenuSubtitle(const class FText& menuTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuTitleWidget", "SetOnboardingMenuSubtitle");

	Params::CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle Parms{};

	Parms.menuTitle = std::move(menuTitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuTitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      menuTitle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuTitleWidget::SetOnboardingMenuTitle(const class FText& menuTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuTitleWidget", "SetOnboardingMenuTitle");

	Params::CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle Parms{};

	Parms.menuTitle = std::move(menuTitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::OnRewardClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "OnRewardClicked");

	Params::CoreOnboardingTutorialButtonWidget_OnRewardClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardPressed
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::OnRewardPressed(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "OnRewardPressed");

	Params::CoreOnboardingTutorialButtonWidget_OnRewardPressed Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardReleased
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::OnRewardReleased(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "OnRewardReleased");

	Params::CoreOnboardingTutorialButtonWidget_OnRewardReleased Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FOnboardingTutorialButtonViewData&ViewData_0                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    isRefreshingWithAnimation                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::SetData(const struct FOnboardingTutorialButtonViewData& ViewData_0, bool isRefreshingWithAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "SetData");

	Params::CoreOnboardingTutorialButtonWidget_SetData Parms{};

	Parms.ViewData_0 = std::move(ViewData_0);
	Parms.isRefreshingWithAnimation = isRefreshingWithAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetIsKillSwitch
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    isKillSwitch                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::SetIsKillSwitch(bool isKillSwitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "SetIsKillSwitch");

	Params::CoreOnboardingTutorialButtonWidget_SetIsKillSwitch Parms{};

	Parms.isKillSwitch = isKillSwitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetUIEnabled
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::SetUIEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "SetUIEnabled");

	Params::CoreOnboardingTutorialButtonWidget_SetUIEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetVisual
// (Final, Native, Protected, BlueprintCallable)

void UCoreOnboardingTutorialButtonWidget::SetVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "SetVisual");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.IsInUnavailableStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreOnboardingTutorialButtonWidget::IsInUnavailableStep() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "IsInUnavailableStep");

	Params::CoreOnboardingTutorialButtonWidget_IsInUnavailableStep Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.BindToButton
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                buttonToBindOn                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnHoverBorderWidget::BindToButton(class UCoreButtonWidget* buttonToBindOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "BindToButton");

	Params::CoreOnHoverBorderWidget_BindToButton Parms{};

	Parms.buttonToBindOn = buttonToBindOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.PlayHoveredAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    playForward                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnHoverBorderWidget::PlayHoveredAnimation(bool playForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "PlayHoveredAnimation");

	Params::CoreOnHoverBorderWidget_PlayHoveredAnimation Parms{};

	Parms.playForward = playForward;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.PlayPressedAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    playForward                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnHoverBorderWidget::PlayPressedAnimation(bool playForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "PlayPressedAnimation");

	Params::CoreOnHoverBorderWidget_PlayPressedAnimation Parms{};

	Parms.playForward = playForward;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.UnbindFromButton
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreOnHoverBorderWidget::UnbindFromButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "UnbindFromButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.UpdateBorderSize
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 desiredSize                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnHoverBorderWidget::UpdateBorderSize(int32 Thickness, const struct FVector2D& desiredSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "UpdateBorderSize");

	Params::CoreOnHoverBorderWidget_UpdateBorderSize Parms{};

	Parms.Thickness = Thickness;
	Parms.desiredSize = std::move(desiredSize);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.UpdateColors
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              progressBarColor                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              BackgroundColor                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnHoverBorderWidget::UpdateColors(const struct FLinearColor& progressBarColor, const struct FLinearColor& BackgroundColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "UpdateColors");

	Params::CoreOnHoverBorderWidget_UpdateColors Parms{};

	Parms.progressBarColor = std::move(progressBarColor);
	Parms.BackgroundColor = std::move(BackgroundColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePaginationContainerWidget.CreatePaginationWidget
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreSelectableButtonWidget*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreSelectableButtonWidget* UCorePaginationContainerWidget::CreatePaginationWidget(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePaginationContainerWidget", "CreatePaginationWidget");

	Params::CorePaginationContainerWidget_CreatePaginationWidget Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePaginationContainerWidget.OnPaginationSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePaginationContainerWidget::OnPaginationSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePaginationContainerWidget", "OnPaginationSelected");

	Params::CorePaginationContainerWidget_OnPaginationSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePaginationContainerWidget.UpdateSelectedWidget
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   currentIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   numberOfPages                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePaginationContainerWidget::UpdateSelectedWidget(int32 currentIndex, int32 numberOfPages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePaginationContainerWidget", "UpdateSelectedWidget");

	Params::CorePaginationContainerWidget_UpdateSelectedWidget Parms{};

	Parms.currentIndex = currentIndex;
	Parms.numberOfPages = numberOfPages;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePaginationContainerWidget.GetCurrentPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCorePaginationContainerWidget::GetCurrentPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePaginationContainerWidget", "GetCurrentPage");

	Params::CorePaginationContainerWidget_GetCurrentPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePaginationContainerWidget.GetNumberOfPages
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCorePaginationContainerWidget::GetNumberOfPages() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePaginationContainerWidget", "GetNumberOfPages");

	Params::CorePaginationContainerWidget_GetNumberOfPages Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerLevelTooltipWidget.SetTooltipData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FCorePlayerLevelTooltipViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCorePlayerLevelTooltipWidget::SetTooltipData(const struct FCorePlayerLevelTooltipViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerLevelTooltipWidget", "SetTooltipData");

	Params::CorePlayerLevelTooltipWidget_SetTooltipData Parms{};

	Parms.ViewData = std::move(ViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerNameWidget.SetPlayerName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      PlayerName                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePlayerNameWidget::SetPlayerName(const class FText& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerNameWidget", "SetPlayerName");

	Params::CorePlayerNameWidget_SetPlayerName Parms{};

	Parms.PlayerName = std::move(PlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerRankWidget.AnimateRankUp
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCorePlayerRankWidget::AnimateRankUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerRankWidget", "AnimateRankUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CorePlayerRankWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRankViewData&             Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePlayerRankWidget::SetData(const struct FRankViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerRankWidget", "SetData");

	Params::CorePlayerRankWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerRankWidget.SetRankImageAndText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             rankIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              IsKiller                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerRankWidget::SetRankImageAndText(const int32 rankIndex, const bool IsKiller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerRankWidget", "SetRankImageAndText");

	Params::CorePlayerRankWidget_SetRankImageAndText Parms{};

	Parms.rankIndex = rankIndex;
	Parms.IsKiller = IsKiller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerRankWidget.GetConfiguration
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FCoreRankWidgetConfiguration     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCoreRankWidgetConfiguration UCorePlayerRankWidget::GetConfiguration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerRankWidget", "GetConfiguration");

	Params::CorePlayerRankWidget_GetConfiguration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerSocialOptionsMenuWidget.Hide
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCorePlayerSocialOptionsMenuWidget::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerSocialOptionsMenuWidget", "Hide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerSocialOptionsMenuWidget.OnPlayerSocialOptionButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePlayerSocialOptionsMenuWidget::OnPlayerSocialOptionButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerSocialOptionsMenuWidget", "OnPlayerSocialOptionButtonClicked");

	Params::CorePlayerSocialOptionsMenuWidget_OnPlayerSocialOptionButtonClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerSocialOptionsMenuWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FPlayerSocialOptionViewData>&Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePlayerSocialOptionsMenuWidget::SetData(const TArray<struct FPlayerSocialOptionViewData>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerSocialOptionsMenuWidget", "SetData");

	Params::CorePlayerSocialOptionsMenuWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerSocialOptionsMenuWidget.Show
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCorePlayerSocialOptionsMenuWidget::Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerSocialOptionsMenuWidget", "Show");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.CacheViewData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const struct FPlayerStatusViewData&     Data                                                   (Parm, NativeAccessSpecifierPublic)
// struct FPlayerStatusViewData            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FPlayerStatusViewData UCorePlayerStatusWidget::CacheViewData(const struct FPlayerStatusViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "CacheViewData");

	Params::CorePlayerStatusWidget_CacheViewData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.GetKillersStatusEffectWidget
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UCorePlayerStatusKillerEffectWidget*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UCorePlayerStatusKillerEffectWidget*> UCorePlayerStatusWidget::GetKillersStatusEffectWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "GetKillersStatusEffectWidget");

	Params::CorePlayerStatusWidget_GetKillersStatusEffectWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.GetKillerStatusDataMappingDB
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UCorePlayerStatusWidget::GetKillerStatusDataMappingDB() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "GetKillerStatusDataMappingDB");

	Params::CorePlayerStatusWidget_GetKillerStatusDataMappingDB Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.GetPlayerStateChangeType
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FPlayerStatusViewData&     newViewData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EPlayerStateChangeType                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlayerStateChangeType UCorePlayerStatusWidget::GetPlayerStateChangeType(const struct FPlayerStatusViewData& newViewData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "GetPlayerStateChangeType");

	Params::CorePlayerStatusWidget_GetPlayerStateChangeType Parms{};

	Parms.newViewData = std::move(newViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.GetSecondaryKillersStatusEffectWidgets
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UCorePlayerStatusKillerEffectWidget*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UCorePlayerStatusKillerEffectWidget*> UCorePlayerStatusWidget::GetSecondaryKillersStatusEffectWidgets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "GetSecondaryKillersStatusEffectWidgets");

	Params::CorePlayerStatusWidget_GetSecondaryKillersStatusEffectWidgets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasKillerStatusDataChanged
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FPlayerStatusViewData&     newViewData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasKillerStatusDataChanged(const struct FPlayerStatusViewData& newViewData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasKillerStatusDataChanged");

	Params::CorePlayerStatusWidget_HasKillerStatusDataChanged Parms{};

	Parms.newViewData = std::move(newViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasObsessionStateChanged
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EObsessionUIState                       newObsessionState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasObsessionStateChanged(EObsessionUIState newObsessionState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasObsessionStateChanged");

	Params::CorePlayerStatusWidget_HasObsessionStateChanged Parms{};

	Parms.newObsessionState = newObsessionState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasPlayerStateChanged
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPlayerStatus                           newPlayerState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasPlayerStateChanged(EPlayerStatus newPlayerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasPlayerStateChanged");

	Params::CorePlayerStatusWidget_HasPlayerStateChanged Parms{};

	Parms.newPlayerState = newPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasPlayerStatusDataChanged
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FPlayerStatusViewData&     newViewData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasPlayerStatusDataChanged(const struct FPlayerStatusViewData& newViewData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasPlayerStatusDataChanged");

	Params::CorePlayerStatusWidget_HasPlayerStatusDataChanged Parms{};

	Parms.newViewData = std::move(newViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasTimerProgressChanged
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   newTimerProgress                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasTimerProgressChanged(float newTimerProgress) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasTimerProgressChanged");

	Params::CorePlayerStatusWidget_HasTimerProgressChanged Parms{};

	Parms.newTimerProgress = newTimerProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.ShouldPlaySleepAnimation
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESleepingUIState                        newSleepState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::ShouldPlaySleepAnimation(ESleepingUIState newSleepState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "ShouldPlaySleepAnimation");

	Params::CorePlayerStatusWidget_ShouldPlaySleepAnimation Parms{};

	Parms.newSleepState = newSleepState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePremiumCurrencyButtonWidget.SetPrice
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText&                      PriceText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePremiumCurrencyButtonWidget::SetPrice(const class FText& PriceText) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePremiumCurrencyButtonWidget", "SetPrice");

	Params::CorePremiumCurrencyButtonWidget_SetPrice Parms{};

	Parms.PriceText = std::move(PriceText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePresetWidget.OnPresetButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetWidget::OnPresetButtonHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetWidget", "OnPresetButtonHovered");

	Params::CorePresetWidget_OnPresetButtonHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePresetWidget.OnPresetButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetWidget::OnPresetButtonUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetWidget", "OnPresetButtonUnhovered");

	Params::CorePresetWidget_OnPresetButtonUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePresetWidget.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             presetId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetWidget::SetData(const int32 presetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetWidget", "SetData");

	Params::CorePresetWidget_SetData Parms{};

	Parms.presetId = presetId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePresetWidget.SetIsPreviewingAnyCustomization
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              isPreviewingAnyCustomization                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetWidget::SetIsPreviewingAnyCustomization(const bool isPreviewingAnyCustomization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetWidget", "SetIsPreviewingAnyCustomization");

	Params::CorePresetWidget_SetIsPreviewingAnyCustomization Parms{};

	Parms.isPreviewingAnyCustomization = isPreviewingAnyCustomization;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePrestigeWidget.PlayTransitionAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCorePrestigeWidget::PlayTransitionAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePrestigeWidget", "PlayTransitionAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CorePrestigeWidget.SetClawVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePrestigeWidget::SetClawVisibility(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePrestigeWidget", "SetClawVisibility");

	Params::CorePrestigeWidget_SetClawVisibility Parms{};

	Parms.Show = Show;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePrestigeWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPrestigeViewData&         Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    hideClaws                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePrestigeWidget::SetData(const struct FPrestigeViewData& Data, bool hideClaws)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePrestigeWidget", "SetData");

	Params::CorePrestigeWidget_SetData Parms{};

	Parms.Data = std::move(Data);
	Parms.hideClaws = hideClaws;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePrestigeWidget.SetProgressVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePrestigeWidget::SetProgressVisibility(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePrestigeWidget", "SetProgressVisibility");

	Params::CorePrestigeWidget_SetProgressVisibility Parms{};

	Parms.Show = Show;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePrestigeWidget.UpdateImagesAndText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPrestigeViewData&         Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCorePrestigeWidget::UpdateImagesAndText(const struct FPrestigeViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePrestigeWidget", "UpdateImagesAndText");

	Params::CorePrestigeWidget_UpdateImagesAndText Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePrestigeWidget.UpdateComponentVisibility
// (Final, Native, Public, BlueprintCallable, Const)

void UCorePrestigeWidget::UpdateComponentVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePrestigeWidget", "UpdateComponentVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePrestigeWidget.UpdatePrestigeImageOpacity
// (Final, Native, Public, BlueprintCallable, Const)

void UCorePrestigeWidget::UpdatePrestigeImageOpacity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePrestigeWidget", "UpdatePrestigeImageOpacity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreProfileMenuWidget.OnBackButtonClicked
// (Final, Native, Protected)

void UCoreProfileMenuWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreProfileMenuWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreProfileMenuWidget.OnMenuTabSelected
// (Final, Native, Public)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreProfileMenuWidget::OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreProfileMenuWidget", "OnMenuTabSelected");

	Params::CoreProfileMenuWidget_OnMenuTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRankTooltipWidget.SetTooltipData
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FRankTooltipViewData&      ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreRankTooltipWidget::SetTooltipData(const struct FRankTooltipViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRankTooltipWidget", "SetTooltipData");

	Params::CoreRankTooltipWidget_SetTooltipData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.ClearData
// (Final, Native, Public, BlueprintCallable)

void UCoreRewardWrapperWidget::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.CreateRewardWidget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSubclassOf<class UCoreRewardWidget>    rewardClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::CreateRewardWidget(TSubclassOf<class UCoreRewardWidget> rewardClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "CreateRewardWidget");

	Params::CoreRewardWrapperWidget_CreateRewardWidget Parms{};

	Parms.rewardClass = rewardClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRewardWrapperViewData&    ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::SetData(const struct FRewardWrapperViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "SetData");

	Params::CoreRewardWrapperWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetIsClickable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsClickable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::SetIsClickable(bool IsClickable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "SetIsClickable");

	Params::CoreRewardWrapperWidget_SetIsClickable Parms{};

	Parms.IsClickable = IsClickable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetIsLocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsLocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PlayAnimation_0                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::SetIsLocked(bool IsLocked, bool PlayAnimation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "SetIsLocked");

	Params::CoreRewardWrapperWidget_SetIsLocked Parms{};

	Parms.IsLocked = IsLocked;
	Parms.PlayAnimation_0 = PlayAnimation_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetScaleToFit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::SetScaleToFit(float Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "SetScaleToFit");

	Params::CoreRewardWrapperWidget_SetScaleToFit Parms{};

	Parms.Size = Size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetScaleUserSpecified
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::SetScaleUserSpecified(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "SetScaleUserSpecified");

	Params::CoreRewardWrapperWidget_SetScaleUserSpecified Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetTooltipAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ETooltipHorizontalAlignment       Alignment                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::SetTooltipAlignment(const ETooltipHorizontalAlignment Alignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "SetTooltipAlignment");

	Params::CoreRewardWrapperWidget_SetTooltipAlignment Parms{};

	Parms.Alignment = Alignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.GetRewardWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreRewardWidget*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreRewardWidget* UCoreRewardWrapperWidget::GetRewardWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "GetRewardWidget");

	Params::CoreRewardWrapperWidget_GetRewardWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.GetWidgetClassFromRewardType
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERewardType                             RewardType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCoreRewardWidget>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UCoreRewardWidget> UCoreRewardWrapperWidget::GetWidgetClassFromRewardType(ERewardType RewardType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "GetWidgetClassFromRewardType");

	Params::CoreRewardWrapperWidget_GetWidgetClassFromRewardType Parms{};

	Parms.RewardType = RewardType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreScreenIndicatorsContainerWidget.GetScreenIndicatorsMap
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TMap<class FString, class UCoreScreenIndicatorWidget*>ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class FString, class UCoreScreenIndicatorWidget*> UCoreScreenIndicatorsContainerWidget::GetScreenIndicatorsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreScreenIndicatorsContainerWidget", "GetScreenIndicatorsMap");

	Params::CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreScreenIndicatorsContainerWidget.FindScreenIndicatorKey
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreScreenIndicatorWidget*       Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCoreScreenIndicatorsContainerWidget::FindScreenIndicatorKey(class UCoreScreenIndicatorWidget* Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreScreenIndicatorsContainerWidget", "FindScreenIndicatorKey");

	Params::CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreSearchBarWidget.OnClearButtonClicked
// (Final, Native, Protected)

void UCoreSearchBarWidget::OnClearButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "OnClearButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSearchBarWidget.OnKeyboardButtonClicked
// (Final, Native, Protected)

void UCoreSearchBarWidget::OnKeyboardButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "OnKeyboardButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSearchBarWidget.OnTextChanged
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreSearchBarWidget::OnTextChanged(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "OnTextChanged");

	Params::CoreSearchBarWidget_OnTextChanged Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSearchBarWidget.OnTextCommitted
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             inCommitType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSearchBarWidget::OnTextCommitted(const class FText& InText, ETextCommit inCommitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "OnTextCommitted");

	Params::CoreSearchBarWidget_OnTextCommitted Parms{};

	Parms.InText = std::move(InText);
	Parms.inCommitType = inCommitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSearchBarWidget.OnTextInputChanged
// (Final, Native, Protected)

void UCoreSearchBarWidget::OnTextInputChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "OnTextInputChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSearchBarWidget.OnTextInputEntered
// (Final, Native, Protected)

void UCoreSearchBarWidget::OnTextInputEntered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "OnTextInputEntered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSearchBarWidget.GetEnteredText
// (Final, Native, Protected, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreSearchBarWidget::GetEnteredText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSearchBarWidget", "GetEnteredText");

	Params::CoreSearchBarWidget_GetEnteredText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreSettingsOfferingsDisplayWidget.OnOfferingHovered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                hoveredOffering                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsOfferingsDisplayWidget::OnOfferingHovered(class UCoreButtonWidget* hoveredOffering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsOfferingsDisplayWidget", "OnOfferingHovered");

	Params::CoreSettingsOfferingsDisplayWidget_OnOfferingHovered Parms{};

	Parms.hoveredOffering = hoveredOffering;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSettingsOfferingsDisplayWidget.OnOfferingUnhovered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                unhoveredOffering                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsOfferingsDisplayWidget::OnOfferingUnhovered(class UCoreButtonWidget* unhoveredOffering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsOfferingsDisplayWidget", "OnOfferingUnhovered");

	Params::CoreSettingsOfferingsDisplayWidget_OnOfferingUnhovered Parms{};

	Parms.unhoveredOffering = unhoveredOffering;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSettingsPlayerInfoButtonWidget.UpdateVisuals
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FPlayerInfoData&           PlayerInfoData                                         (Parm, NativeAccessSpecifierPublic)
// bool                                    isLocalPlayerSurvivor                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsPlayerInfoButtonWidget::UpdateVisuals(const struct FPlayerInfoData& PlayerInfoData, bool isLocalPlayerSurvivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsPlayerInfoButtonWidget", "UpdateVisuals");

	Params::CoreSettingsPlayerInfoButtonWidget_UpdateVisuals Parms{};

	Parms.PlayerInfoData = std::move(PlayerInfoData);
	Parms.isLocalPlayerSurvivor = isLocalPlayerSurvivor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSettingsSkillsDisplayWidget.OnSkillClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsSkillsDisplayWidget::OnSkillClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsSkillsDisplayWidget", "OnSkillClicked");

	Params::CoreSettingsSkillsDisplayWidget_OnSkillClicked Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSettingsSkillsDisplayWidget.OnSkillHovered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                hoveredPerk                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsSkillsDisplayWidget::OnSkillHovered(class UCoreButtonWidget* hoveredPerk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsSkillsDisplayWidget", "OnSkillHovered");

	Params::CoreSettingsSkillsDisplayWidget_OnSkillHovered Parms{};

	Parms.hoveredPerk = hoveredPerk;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSettingsSkillsDisplayWidget.OnSkillUnhovered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                unhoveredPerk                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSettingsSkillsDisplayWidget::OnSkillUnhovered(class UCoreButtonWidget* unhoveredPerk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSettingsSkillsDisplayWidget", "OnSkillUnhovered");

	Params::CoreSettingsSkillsDisplayWidget_OnSkillUnhovered Parms{};

	Parms.unhoveredPerk = unhoveredPerk;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreShrineOfSecretsWidget.OnBackButtonClicked
// (Final, Native, Private)

void UCoreShrineOfSecretsWidget::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsWidget", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreShrineOfSecretsWidget.OnPurchaseButtonClicked
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FShrineOfSecretsItemViewData&ShrineOfSecretsItemViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreShrineOfSecretsWidget::OnPurchaseButtonClicked(const struct FShrineOfSecretsItemViewData& ShrineOfSecretsItemViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsWidget", "OnPurchaseButtonClicked");

	Params::CoreShrineOfSecretsWidget_OnPurchaseButtonClicked Parms{};

	Parms.ShrineOfSecretsItemViewData = std::move(ShrineOfSecretsItemViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreShrineOfSecretsWidget.SetEventUi
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FShrineOfSecretsViewData&  ShrineOfSecretsViewData                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreShrineOfSecretsWidget::SetEventUi(const struct FShrineOfSecretsViewData& ShrineOfSecretsViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsWidget", "SetEventUi");

	Params::CoreShrineOfSecretsWidget_SetEventUi Parms{};

	Parms.ShrineOfSecretsViewData = std::move(ShrineOfSecretsViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreShrineOfSecretsWidget.UpdateTimer
// (Final, Native, Private)
// Parameters:
// int32                                   RemainingTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreShrineOfSecretsWidget::UpdateTimer(int32 RemainingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreShrineOfSecretsWidget", "UpdateTimer");

	Params::CoreShrineOfSecretsWidget_UpdateTimer Parms{};

	Parms.RemainingTime = RemainingTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSliderWidget.Decrement
// (Final, Native, Public, BlueprintCallable)

void UCoreSliderWidget::Decrement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSliderWidget", "Decrement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSliderWidget.Increment
// (Final, Native, Public, BlueprintCallable)

void UCoreSliderWidget::Increment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSliderWidget", "Increment");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSliderWidget.OnDecrementButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSliderWidget::OnDecrementButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSliderWidget", "OnDecrementButtonClicked");

	Params::CoreSliderWidget_OnDecrementButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSliderWidget.OnIncrementButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSliderWidget::OnIncrementButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSliderWidget", "OnIncrementButtonClicked");

	Params::CoreSliderWidget_OnIncrementButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSliderWidget.OnSliderHandlePressed
// (Final, Native, Private)

void UCoreSliderWidget::OnSliderHandlePressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSliderWidget", "OnSliderHandlePressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSliderWidget.OnSliderHandleReleased
// (Final, Native, Private)

void UCoreSliderWidget::OnSliderHandleReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSliderWidget", "OnSliderHandleReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSliderWidget.OnSliderHovered
// (Final, Native, Private)

void UCoreSliderWidget::OnSliderHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSliderWidget", "OnSliderHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSliderWidget.OnSliderUnhovered
// (Final, Native, Private)

void UCoreSliderWidget::OnSliderUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSliderWidget", "OnSliderUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSliderWidget.OnValueChanged
// (Final, Native, Private)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSliderWidget::OnValueChanged(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSliderWidget", "OnValueChanged");

	Params::CoreSliderWidget_OnValueChanged Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSliderWidget.ResetToDefaultValue
// (Final, Native, Public, BlueprintCallable)

void UCoreSliderWidget::ResetToDefaultValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSliderWidget", "ResetToDefaultValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSliderWidget.SetGhostValue
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSliderWidget::SetGhostValue(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSliderWidget", "SetGhostValue");

	Params::CoreSliderWidget_SetGhostValue Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSliderWidget.SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSliderWidget::SetValue(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSliderWidget", "SetValue");

	Params::CoreSliderWidget_SetValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSliderWidget.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreSliderWidget::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSliderWidget", "GetValue");

	Params::CoreSliderWidget_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.ClearActiveSpecialLoadingScreenWidget
// (Final, Native, Public, BlueprintCallable)

void UCoreSpecialEventLoadingScreenContainer::ClearActiveSpecialLoadingScreenWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenContainer", "ClearActiveSpecialLoadingScreenWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.HasCustomWidgetForEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      eventID                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreSpecialEventLoadingScreenContainer::HasCustomWidgetForEvent(const class FName& eventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenContainer", "HasCustomWidgetForEvent");

	Params::CoreSpecialEventLoadingScreenContainer_HasCustomWidgetForEvent Parms{};

	Parms.eventID = eventID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.OnLoadingHintsFadeSequenceCompleted
// (Final, Native, Protected)

void UCoreSpecialEventLoadingScreenContainer::OnLoadingHintsFadeSequenceCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenContainer", "OnLoadingHintsFadeSequenceCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.SetLoadingHint
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLoadingHintViewData&      loadingHintData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenContainer::SetLoadingHint(const struct FLoadingHintViewData& loadingHintData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenContainer", "SetLoadingHint");

	Params::CoreSpecialEventLoadingScreenContainer_SetLoadingHint Parms{};

	Parms.loadingHintData = std::move(loadingHintData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.SetupSpecialEventLoadingScreen
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      eventLabel                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenContainer::SetupSpecialEventLoadingScreen(const class FName& eventLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenContainer", "SetupSpecialEventLoadingScreen");

	Params::CoreSpecialEventLoadingScreenContainer_SetupSpecialEventLoadingScreen Parms{};

	Parms.eventLabel = eventLabel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.UpdateProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSpecialEventLoadingScreenContainer::UpdateProgress(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpecialEventLoadingScreenContainer", "UpdateProgress");

	Params::CoreSpecialEventLoadingScreenContainer_UpdateProgress Parms{};

	Parms.Progress = Progress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpectateBarWidget.OnLeaveTriggered
// (Final, Native, Private)

void UCoreSpectateBarWidget::OnLeaveTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpectateBarWidget", "OnLeaveTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpectateBarWidget.OnLeftArrowTriggered
// (Final, Native, Private)

void UCoreSpectateBarWidget::OnLeftArrowTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpectateBarWidget", "OnLeftArrowTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpectateBarWidget.OnRightArrowTriggered
// (Final, Native, Private)

void UCoreSpectateBarWidget::OnRightArrowTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpectateBarWidget", "OnRightArrowTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStartSequenceWidget.OnHideStartSequenceComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStartSequenceWidget::OnHideStartSequenceComplete(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStartSequenceWidget", "OnHideStartSequenceComplete");

	Params::CoreStartSequenceWidget_OnHideStartSequenceComplete Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.GetStatusEffectData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FStatusEffectViewData            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FStatusEffectViewData UCoreStatusEffectIcon::GetStatusEffectData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "GetStatusEffectData");

	Params::CoreStatusEffectIcon_GetStatusEffectData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.ResetWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStatusEffectIcon::ResetWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "ResetWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.SetInactiveTicks
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             inactiveTicks                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStatusEffectIcon::SetInactiveTicks(const int32 inactiveTicks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "SetInactiveTicks");

	Params::CoreStatusEffectIcon_SetInactiveTicks Parms{};

	Parms.inactiveTicks = inactiveTicks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.SetStatusEffectData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FStatusEffectViewData&     Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStatusEffectIcon::SetStatusEffectData(const struct FStatusEffectViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "SetStatusEffectData");

	Params::CoreStatusEffectIcon_SetStatusEffectData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.UpdatePercentageFill
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Percentage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStatusEffectIcon::UpdatePercentageFill(float Percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "UpdatePercentageFill");

	Params::CoreStatusEffectIcon_UpdatePercentageFill Parms{};

	Parms.Percentage = Percentage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.UpdateWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStatusEffectIcon::UpdateWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "UpdateWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.GetInactiveTicks
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCoreStatusEffectIcon::GetInactiveTicks() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "GetInactiveTicks");

	Params::CoreStatusEffectIcon_GetInactiveTicks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStatusEffectWidget.GetStatusEffectMap
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<class FName, class UCoreStatusEffectIcon*>ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class FName, class UCoreStatusEffectIcon*> UCoreStatusEffectWidget::GetStatusEffectMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectWidget", "GetStatusEffectMap");

	Params::CoreStatusEffectWidget_GetStatusEffectMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCategoryWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStoreCategoryViewData&    Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreCategoryWidget::SetData(const struct FStoreCategoryViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCategoryWidget", "SetData");

	Params::CoreStoreCategoryWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharacterItemWidget.SetStoreCharacterItemData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreCharacterItemViewData*      Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharacterItemWidget::SetStoreCharacterItemData(class UStoreCharacterItemViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharacterItemWidget", "SetStoreCharacterItemData");

	Params::CoreStoreCharacterItemWidget_SetStoreCharacterItemData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersBioWidget.SetRightStickMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERightStickMode                         rightStickMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersBioWidget::SetRightStickMode(ERightStickMode rightStickMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersBioWidget", "SetRightStickMode");

	Params::CoreStoreCharactersBioWidget_SetRightStickMode Parms{};

	Parms.rightStickMode = rightStickMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersBioWidget.GetCharacterBioScrollBox
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDBDScrollBox*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDBDScrollBox* UCoreStoreCharactersBioWidget::GetCharacterBioScrollBox() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersBioWidget", "GetCharacterBioScrollBox");

	Params::CoreStoreCharactersBioWidget_GetCharacterBioScrollBox Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCharactersBioWidget.GetRightStickMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERightStickMode                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ERightStickMode UCoreStoreCharactersBioWidget::GetRightStickMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersBioWidget", "GetRightStickMode");

	Params::CoreStoreCharactersBioWidget_GetRightStickMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCharactersFilterWidget.OnClearFiltersClicked
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersFilterWidget::OnClearFiltersClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersFilterWidget", "OnClearFiltersClicked");

	Params::CoreStoreCharactersFilterWidget_OnClearFiltersClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersFilterWidget.OnFilterOptionCheckBoxToggled
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoreCharactersFilterWidget::OnFilterOptionCheckBoxToggled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersFilterWidget", "OnFilterOptionCheckBoxToggled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersFilterWidget.OverrideDefaultFiltersAndSortingParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    defaultFilterAvailable                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    defaultFilterOwned                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   sortingOptions                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESortingOption                          defaultSortingOption                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESortingOrder                           defaultSortingOrder                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersFilterWidget::OverrideDefaultFiltersAndSortingParams(bool defaultFilterAvailable, bool defaultFilterOwned, int32 sortingOptions, ESortingOption defaultSortingOption, ESortingOrder defaultSortingOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersFilterWidget", "OverrideDefaultFiltersAndSortingParams");

	Params::CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams Parms{};

	Parms.defaultFilterAvailable = defaultFilterAvailable;
	Parms.defaultFilterOwned = defaultFilterOwned;
	Parms.sortingOptions = sortingOptions;
	Parms.defaultSortingOption = defaultSortingOption;
	Parms.defaultSortingOrder = defaultSortingOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersFilterWidget.GetCurrentFiltersData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FStoreCharactersFiltersData      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FStoreCharactersFiltersData UCoreStoreCharactersFilterWidget::GetCurrentFiltersData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersFilterWidget", "GetCurrentFiltersData");

	Params::CoreStoreCharactersFilterWidget_GetCurrentFiltersData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCharactersWidget.SetToggleableWidgetPromptController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UToggleableWidgetPromptController*Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharactersWidget::SetToggleableWidgetPromptController(class UToggleableWidgetPromptController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersWidget", "SetToggleableWidgetPromptController");

	Params::CoreStoreCharactersWidget_SetToggleableWidgetPromptController Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharactersWidget.GetBioTab
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreStoreCharactersBioWidget*    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreStoreCharactersBioWidget* UCoreStoreCharactersWidget::GetBioTab() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersWidget", "GetBioTab");

	Params::CoreStoreCharactersWidget_GetBioTab Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCharactersWidget.GetCustomizationsTab
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreStoreCharactersCustomizationsWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreStoreCharactersCustomizationsWidget* UCoreStoreCharactersWidget::GetCustomizationsTab() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersWidget", "GetCustomizationsTab");

	Params::CoreStoreCharactersWidget_GetCustomizationsTab Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCharactersWidget.GetSelectionTab
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreStoreCharactersSelectionWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreStoreCharactersSelectionWidget* UCoreStoreCharactersWidget::GetSelectionTab() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersWidget", "GetSelectionTab");

	Params::CoreStoreCharactersWidget_GetSelectionTab Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCharactersWidget.GetToggleableWidgetPromptController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UToggleableWidgetPromptController*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UToggleableWidgetPromptController* UCoreStoreCharactersWidget::GetToggleableWidgetPromptController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharactersWidget", "GetToggleableWidgetPromptController");

	Params::CoreStoreCharactersWidget_GetToggleableWidgetPromptController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCharmSlotWidget.OnButtonSelectedChanged
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected_0                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharmSlotWidget::OnButtonSelectedChanged(class UCoreSelectableButtonWidget* targetButton, bool IsSelected_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharmSlotWidget", "OnButtonSelectedChanged");

	Params::CoreStoreCharmSlotWidget_OnButtonSelectedChanged Parms{};

	Parms.targetButton = targetButton;
	Parms.IsSelected_0 = IsSelected_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharmSlotWidget.SetEmptyCharmSlotData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             slotIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCharmSlotWidget::SetEmptyCharmSlotData(const int32 slotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharmSlotWidget", "SetEmptyCharmSlotData");

	Params::CoreStoreCharmSlotWidget_SetEmptyCharmSlotData Parms{};

	Parms.slotIndex = slotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCharmSlotWidget.SetSelectedCharmSlotData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             slotIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCustomizationRewardViewData&charmSlotData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreCharmSlotWidget::SetSelectedCharmSlotData(const int32 slotIndex, const struct FCustomizationRewardViewData& charmSlotData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCharmSlotWidget", "SetSelectedCharmSlotData");

	Params::CoreStoreCharmSlotWidget_SetSelectedCharmSlotData Parms{};

	Parms.slotIndex = slotIndex;
	Parms.charmSlotData = std::move(charmSlotData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCollectionsItemWidget.GetStoreCollectionViewData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStoreCollectionViewData*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStoreCollectionViewData* UCoreStoreCollectionsItemWidget::GetStoreCollectionViewData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsItemWidget", "GetStoreCollectionViewData");

	Params::CoreStoreCollectionsItemWidget_GetStoreCollectionViewData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCollectionsItemWidget.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStoreCollectionViewData*         CollectionViewData                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ECollectionItemScaleType          collectionItemScale                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCollectionsItemWidget::SetData(class UStoreCollectionViewData* CollectionViewData, const ECollectionItemScaleType collectionItemScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsItemWidget", "SetData");

	Params::CoreStoreCollectionsItemWidget_SetData Parms{};

	Parms.CollectionViewData = CollectionViewData;
	Parms.collectionItemScale = collectionItemScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCollectionsItemWidget.SetupVisuals
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreCollectionViewData*         CollectionViewData                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ECollectionItemScaleType          collectionItemScale                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCollectionsItemWidget::SetupVisuals(class UStoreCollectionViewData* CollectionViewData, const ECollectionItemScaleType collectionItemScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsItemWidget", "SetupVisuals");

	Params::CoreStoreCollectionsItemWidget_SetupVisuals Parms{};

	Parms.CollectionViewData = CollectionViewData;
	Parms.collectionItemScale = collectionItemScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreCollectionsWidget.SetToggleableWidgetPromptController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UToggleableWidgetPromptController*Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCollectionsWidget::SetToggleableWidgetPromptController(class UToggleableWidgetPromptController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsWidget", "SetToggleableWidgetPromptController");

	Params::CoreStoreCollectionsWidget_SetToggleableWidgetPromptController Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCollectionsWidget.GetCollectionsCustomizations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreStoreCollectionsCustomizationsWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreStoreCollectionsCustomizationsWidget* UCoreStoreCollectionsWidget::GetCollectionsCustomizations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsWidget", "GetCollectionsCustomizations");

	Params::CoreStoreCollectionsWidget_GetCollectionsCustomizations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCollectionsWidget.GetCollectionsList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreStoreCollectionsListWidget*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreStoreCollectionsListWidget* UCoreStoreCollectionsWidget::GetCollectionsList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsWidget", "GetCollectionsList");

	Params::CoreStoreCollectionsWidget_GetCollectionsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCollectionsWidget.GetToggleableWidgetPromptController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UToggleableWidgetPromptController*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UToggleableWidgetPromptController* UCoreStoreCollectionsWidget::GetToggleableWidgetPromptController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCollectionsWidget", "GetToggleableWidgetPromptController");

	Params::CoreStoreCollectionsWidget_GetToggleableWidgetPromptController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCustomizationItemWidget.GetRealSize
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UCoreStoreCustomizationItemWidget::GetRealSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCustomizationItemWidget", "GetRealSize");

	Params::CoreStoreCustomizationItemWidget_GetRealSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreCustomizationItemWidget.SetEquippedItem
// (Event, Public, BlueprintEvent)
// Parameters:
// const bool                              IsEquipped                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCustomizationItemWidget::SetEquippedItem(const bool IsEquipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCustomizationItemWidget", "SetEquippedItem");

	Params::CoreStoreCustomizationItemWidget_SetEquippedItem Parms{};

	Parms.IsEquipped = IsEquipped;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoreCustomizationItemWidget.SetStoreCustomizationItemData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreCustomizationItemViewData*  Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreCustomizationItemWidget::SetStoreCustomizationItemData(class UStoreCustomizationItemViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCustomizationItemWidget", "SetStoreCustomizationItemData");

	Params::CoreStoreCustomizationItemWidget_SetStoreCustomizationItemData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreCustomizationItemWidget.MakeStoreRedirectionData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FStoreRedirectionData            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FStoreRedirectionData UCoreStoreCustomizationItemWidget::MakeStoreRedirectionData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreCustomizationItemWidget", "MakeStoreRedirectionData");

	Params::CoreStoreCustomizationItemWidget_MakeStoreRedirectionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCharacterWidget.GetCharacterViewData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FStoreFeaturedCharacterViewData  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FStoreFeaturedCharacterViewData UCoreStoreFeaturedCharacterWidget::GetCharacterViewData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCharacterWidget", "GetCharacterViewData");

	Params::CoreStoreFeaturedCharacterWidget_GetCharacterViewData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCharacterWidget.SetCharacterData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStoreFeaturedCharacterViewData&CharacterData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCharacterWidget::SetCharacterData(const struct FStoreFeaturedCharacterViewData& CharacterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCharacterWidget", "SetCharacterData");

	Params::CoreStoreFeaturedCharacterWidget_SetCharacterData Parms{};

	Parms.CharacterData = std::move(CharacterData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.InitItemContainer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStoreFeaturedCustomizationItemContainerWidget::InitItemContainer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "InitItemContainer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.MoveNext
// (Final, Native, Private)

void UCoreStoreFeaturedCustomizationItemContainerWidget::MoveNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "MoveNext");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.MovePrevious
// (Final, Native, Private)

void UCoreStoreFeaturedCustomizationItemContainerWidget::MovePrevious()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "MovePrevious");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.OnItemHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemContainerWidget::OnItemHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "OnItemHovered");

	Params::CoreStoreFeaturedCustomizationItemContainerWidget_OnItemHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.OnItemUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemContainerWidget::OnItemUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "OnItemUnhovered");

	Params::CoreStoreFeaturedCustomizationItemContainerWidget_OnItemUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.OnMoveCompleted
// (Final, Native, Private)

void UCoreStoreFeaturedCustomizationItemContainerWidget::OnMoveCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "OnMoveCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.OnSelectedItemAgain
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemContainerWidget::OnSelectedItemAgain(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "OnSelectedItemAgain");

	Params::CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemAgain Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.OnSelectedItemChanged
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemContainerWidget::OnSelectedItemChanged(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "OnSelectedItemChanged");

	Params::CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemChanged Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.SetItems
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FStoreContentViewData>&viewDataArray                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedCustomizationItemContainerWidget::SetItems(const TArray<struct FStoreContentViewData>& viewDataArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedCustomizationItemContainerWidget", "SetItems");

	Params::CoreStoreFeaturedCustomizationItemContainerWidget_SetItems Parms{};

	Parms.viewDataArray = std::move(viewDataArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedMysteryBoxWidget.OnClaimButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedMysteryBoxWidget::OnClaimButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedMysteryBoxWidget", "OnClaimButtonClicked");

	Params::CoreStoreFeaturedMysteryBoxWidget_OnClaimButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedMysteryBoxWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStoreMysteryBoxViewData&  ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCoreStoreFeaturedMysteryBoxWidget::SetData(const struct FStoreMysteryBoxViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedMysteryBoxWidget", "SetData");

	Params::CoreStoreFeaturedMysteryBoxWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreFeaturedMysteryBoxWidget.GetMysteryBoxViewData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FStoreMysteryBoxViewData   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FStoreMysteryBoxViewData UCoreStoreFeaturedMysteryBoxWidget::GetMysteryBoxViewData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreFeaturedMysteryBoxWidget", "GetMysteryBoxViewData");

	Params::CoreStoreFeaturedMysteryBoxWidget_GetMysteryBoxViewData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoreItemAvailabilityBannerWidget.OnAvailabilityBannerClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreItemAvailabilityBannerWidget::OnAvailabilityBannerClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreItemAvailabilityBannerWidget", "OnAvailabilityBannerClicked");

	Params::CoreStoreItemAvailabilityBannerWidget_OnAvailabilityBannerClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreRiftTierItemWidget.OnButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreRiftTierItemWidget::OnButtonHovered(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreRiftTierItemWidget", "OnButtonHovered");

	Params::CoreStoreRiftTierItemWidget_OnButtonHovered Parms{};

	Parms.targetButton = targetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreRiftTierItemWidget.OnButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreRiftTierItemWidget::OnButtonUnhovered(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreRiftTierItemWidget", "OnButtonUnhovered");

	Params::CoreStoreRiftTierItemWidget_OnButtonUnhovered Parms{};

	Parms.targetButton = targetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreRiftTierItemWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStoreRiftTierViewData&    Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreRiftTierItemWidget::SetData(const struct FStoreRiftTierViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreRiftTierItemWidget", "SetData");

	Params::CoreStoreRiftTierItemWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialPacksListWidget.OnItemClicked
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FStoreContentViewData&     contentViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoreSpecialPacksListWidget::OnItemClicked(const struct FStoreContentViewData& contentViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialPacksListWidget", "OnItemClicked");

	Params::CoreStoreSpecialPacksListWidget_OnItemClicked Parms{};

	Parms.contentViewData = std::move(contentViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialsWidget.OnArchivePassBannerClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialsWidget::OnArchivePassBannerClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialsWidget", "OnArchivePassBannerClicked");

	Params::CoreStoreSpecialsWidget_OnArchivePassBannerClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoreSpecialsWidget.OnSpecialItemClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoreSpecialsWidget::OnSpecialItemClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoreSpecialsWidget", "OnSpecialItemClicked");

	Params::CoreStoreSpecialsWidget_OnSpecialItemClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UArchiveStoryLevelViewData* ViewData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isSelectorReadOnly                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelButtonWidget::SetData(const class UArchiveStoryLevelViewData* ViewData, bool isSelectorReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "SetData");

	Params::CoreStoryLevelButtonWidget_SetData Parms{};

	Parms.ViewData = ViewData;
	Parms.isSelectorReadOnly = isSelectorReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateStatusData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EArchivesStoryLevelStatus               newStatus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isSelectorReadOnly                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelButtonWidget::UpdateStatusData(EArchivesStoryLevelStatus newStatus, bool isSelectorReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "UpdateStatusData");

	Params::CoreStoryLevelButtonWidget_UpdateStatusData Parms{};

	Parms.newStatus = newStatus;
	Parms.isSelectorReadOnly = isSelectorReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateVisual
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UArchiveStoryLevelViewData* ViewData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    newlyUnlocked                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelButtonWidget::UpdateVisual(const class UArchiveStoryLevelViewData* ViewData, bool newlyUnlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "UpdateVisual");

	Params::CoreStoryLevelButtonWidget_UpdateVisual Parms{};

	Parms.ViewData = ViewData;
	Parms.newlyUnlocked = newlyUnlocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateVisualStatus
// (Event, Protected, BlueprintEvent)
// Parameters:
// EArchivesStoryLevelStatus               newStatus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    newlyUnlocked                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelButtonWidget::UpdateVisualStatus(EArchivesStoryLevelStatus newStatus, bool newlyUnlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "UpdateVisualStatus");

	Params::CoreStoryLevelButtonWidget_UpdateVisualStatus Parms{};

	Parms.newStatus = newStatus;
	Parms.newlyUnlocked = newlyUnlocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.GetLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCoreStoryLevelButtonWidget::GetLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "GetLevel");

	Params::CoreStoryLevelButtonWidget_GetLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.AdaptButtonsPoolToData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   dataNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::AdaptButtonsPoolToData(int32 dataNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "AdaptButtonsPoolToData");

	Params::CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData Parms{};

	Parms.dataNumber = dataNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.OnStoryLevelUnlockedAnimation
// (Final, Native, Private)

void UCoreStoryLevelsSelectorWidget::OnStoryLevelUnlockedAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "OnStoryLevelUnlockedAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UArchiveStoryLevelViewData*>&levelbuttonsData                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::SetData(const TArray<class UArchiveStoryLevelViewData*>& levelbuttonsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "SetData");

	Params::CoreStoryLevelsSelectorWidget_SetData Parms{};

	Parms.levelbuttonsData = std::move(levelbuttonsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::SetEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "SetEnabled");

	Params::CoreStoryLevelsSelectorWidget_SetEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.SetUpInteractionMode
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoryLevelsSelectorWidget::SetUpInteractionMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "SetUpInteractionMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.UpdateLevelStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             Level                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EArchivesStoryLevelStatus         status                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::UpdateLevelStatus(const int32 Level, const EArchivesStoryLevelStatus status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "UpdateLevelStatus");

	Params::CoreStoryLevelsSelectorWidget_UpdateLevelStatus Parms{};

	Parms.Level = Level;
	Parms.status = status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.UpdateVisual
// (Event, Protected, BlueprintEvent)
// Parameters:
// EArchivesStoryLevelStatus               globalStatus                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PlayAnimation_0                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::UpdateVisual(EArchivesStoryLevelStatus globalStatus, bool PlayAnimation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "UpdateVisual");

	Params::CoreStoryLevelsSelectorWidget_UpdateVisual Parms{};

	Parms.globalStatus = globalStatus;
	Parms.PlayAnimation_0 = PlayAnimation_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.GetStoryLevelButton
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreStoryLevelButtonWidget*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreStoryLevelButtonWidget* UCoreStoryLevelsSelectorWidget::GetStoryLevelButton(int32 Level) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "GetStoryLevelButton");

	Params::CoreStoryLevelsSelectorWidget_GetStoryLevelButton Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.HideLoadoutTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                unhoveredSlotWidget                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::HideLoadoutTooltip(class UCoreButtonWidget* unhoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "HideLoadoutTooltip");

	Params::CoreTallyPlayerStatusWidget_HideLoadoutTooltip Parms{};

	Parms.unhoveredSlotWidget = unhoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.OnPlayerStatusClicked
// (Final, Native, Private, BlueprintCallable)

void UCoreTallyPlayerStatusWidget::OnPlayerStatusClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "OnPlayerStatusClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.OnPlayerStatusHovered
// (Final, Native, Private, BlueprintCallable)

void UCoreTallyPlayerStatusWidget::OnPlayerStatusHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "OnPlayerStatusHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.OnPlayerStatusUnhovered
// (Final, Native, Private, BlueprintCallable)

void UCoreTallyPlayerStatusWidget::OnPlayerStatusUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "OnPlayerStatusUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.OnReportButtonClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::OnReportButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "OnReportButtonClicked");

	Params::CoreTallyPlayerStatusWidget_OnReportButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetAsReported
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              IsReported                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::SetAsReported(const bool IsReported)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "SetAsReported");

	Params::CoreTallyPlayerStatusWidget_SetAsReported Parms{};

	Parms.IsReported = IsReported;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTallyPlayerStatusViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EGameType                               gameType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isUsingCharacterClass                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::SetData(const struct FTallyPlayerStatusViewData& ViewData, EGameType gameType, bool isUsingCharacterClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "SetData");

	Params::CoreTallyPlayerStatusWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);
	Parms.gameType = gameType;
	Parms.isUsingCharacterClass = isUsingCharacterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetKillerLoadoutBlocked
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              IsBlocked                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::SetKillerLoadoutBlocked(const bool IsBlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "SetKillerLoadoutBlocked");

	Params::CoreTallyPlayerStatusWidget_SetKillerLoadoutBlocked Parms{};

	Parms.IsBlocked = IsBlocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetPlayerCardAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              IsAnimationPlaying_0                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::SetPlayerCardAnimation(const bool IsAnimationPlaying_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "SetPlayerCardAnimation");

	Params::CoreTallyPlayerStatusWidget_SetPlayerCardAnimation Parms{};

	Parms.IsAnimationPlaying_0 = IsAnimationPlaying_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetPlayerCardAnimationMode
// (Final, Native, Public)
// Parameters:
// const EPlayerCardAnimationMode          PlayerCardAnimationMode                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::SetPlayerCardAnimationMode(const EPlayerCardAnimationMode PlayerCardAnimationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "SetPlayerCardAnimationMode");

	Params::CoreTallyPlayerStatusWidget_SetPlayerCardAnimationMode Parms{};

	Parms.PlayerCardAnimationMode = PlayerCardAnimationMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetReportButtonOpacity
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const float                             Opacity                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::SetReportButtonOpacity(const float Opacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "SetReportButtonOpacity");

	Params::CoreTallyPlayerStatusWidget_SetReportButtonOpacity Parms{};

	Parms.Opacity = Opacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.ShowLoadoutTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                hoveredSlotWidget                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyPlayerStatusWidget::ShowLoadoutTooltip(class UCoreButtonWidget* hoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyPlayerStatusWidget", "ShowLoadoutTooltip");

	Params::CoreTallyPlayerStatusWidget_ShowLoadoutTooltip Parms{};

	Parms.hoveredSlotWidget = hoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyScoreboardWidget.OnPlayerSocialOptionClicked
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FPlayerSocialOptionViewData&playerSocialOptionData                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreTallyScoreboardWidget::OnPlayerSocialOptionClicked(const struct FPlayerSocialOptionViewData& playerSocialOptionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyScoreboardWidget", "OnPlayerSocialOptionClicked");

	Params::CoreTallyScoreboardWidget_OnPlayerSocialOptionClicked Parms{};

	Parms.playerSocialOptionData = std::move(playerSocialOptionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyScoreboardWidget.OnPlayerStatusClicked
// (Final, Native, Private)
// Parameters:
// const class FString&                    PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyScoreboardWidget::OnPlayerStatusClicked(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyScoreboardWidget", "OnPlayerStatusClicked");

	Params::CoreTallyScoreboardWidget_OnPlayerStatusClicked Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTallyScoreboardWidget.OnReportButtonClicked
// (Final, Native, Private)
// Parameters:
// const class FString&                    PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTallyScoreboardWidget::OnReportButtonClicked(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTallyScoreboardWidget", "OnReportButtonClicked");

	Params::CoreTallyScoreboardWidget_OnReportButtonClicked Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTestBuildFlagWidget.UpdateTestFlagPosition
// (Event, Protected, BlueprintEvent)
// Parameters:
// ETestBuildFlagPosition                  testBuildFlagPosition                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTestBuildFlagWidget::UpdateTestFlagPosition(ETestBuildFlagPosition testBuildFlagPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTestBuildFlagWidget", "UpdateTestFlagPosition");

	Params::CoreTestBuildFlagWidget_UpdateTestFlagPosition Parms{};

	Parms.testBuildFlagPosition = testBuildFlagPosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreTimedEffectMeterWidget.SetVisualState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const ETimedEffectMeterState            newState                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTimedEffectMeterWidget::SetVisualState(const ETimedEffectMeterState newState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimedEffectMeterWidget", "SetVisualState");

	Params::CoreTimedEffectMeterWidget_SetVisualState Parms{};

	Parms.newState = newState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreTimedEffectMeterWidget.GetPreviousState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETimedEffectMeterState                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETimedEffectMeterState UCoreTimedEffectMeterWidget::GetPreviousState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimedEffectMeterWidget", "GetPreviousState");

	Params::CoreTimedEffectMeterWidget_GetPreviousState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTimedEffectMeterWidget.GetProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreTimedEffectMeterWidget::GetProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimedEffectMeterWidget", "GetProgress");

	Params::CoreTimedEffectMeterWidget_GetProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTimedEffectMeterWidget.GetState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETimedEffectMeterState                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETimedEffectMeterState UCoreTimedEffectMeterWidget::GetState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimedEffectMeterWidget", "GetState");

	Params::CoreTimedEffectMeterWidget_GetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.BindToButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTimerFlagWidget::BindToButton(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "BindToButton");

	Params::CoreTimerFlagWidget_BindToButton Parms{};

	Parms.targetButton = targetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.NativeDestruct
// (Native, Public)

void UCoreTimerFlagWidget::NativeDestruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "NativeDestruct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.OnTargetHovered
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTimerFlagWidget::OnTargetHovered(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "OnTargetHovered");

	Params::CoreTimerFlagWidget_OnTargetHovered Parms{};

	Parms.targetButton = targetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.OnTargetUnhovered
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTimerFlagWidget::OnTargetUnhovered(class UCoreButtonWidget* targetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "OnTargetUnhovered");

	Params::CoreTimerFlagWidget_OnTargetUnhovered Parms{};

	Parms.targetButton = targetButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.OnTimerTick
// (Final, Native, Protected)
// Parameters:
// int32                                   RemainingTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTimerFlagWidget::OnTimerTick(int32 RemainingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "OnTimerTick");

	Params::CoreTimerFlagWidget_OnTimerTick Parms{};

	Parms.RemainingTime = RemainingTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTimerFlagViewData&        Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreTimerFlagWidget::SetData(const struct FTimerFlagViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "SetData");

	Params::CoreTimerFlagWidget_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.UnbindFromButton
// (Final, Native, Public, BlueprintCallable)

void UCoreTimerFlagWidget::UnbindFromButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "UnbindFromButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.UpdateFlagSize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFlagSize                               FlagSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTimerFlagWidget::UpdateFlagSize(EFlagSize FlagSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "UpdateFlagSize");

	Params::CoreTimerFlagWidget_UpdateFlagSize Parms{};

	Parms.FlagSize = FlagSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.UpdateTimer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    newTimer                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTimerFlagWidget::UpdateTimer(const class FString& newTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "UpdateTimer");

	Params::CoreTimerFlagWidget_UpdateTimer Parms{};

	Parms.newTimer = std::move(newTimer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.GetCachedData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FTimerFlagViewData         ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FTimerFlagViewData UCoreTimerFlagWidget::GetCachedData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "GetCachedData");

	Params::CoreTimerFlagWidget_GetCachedData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.GetCurrentFlagSize
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFlagSize                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFlagSize UCoreTimerFlagWidget::GetCurrentFlagSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "GetCurrentFlagSize");

	Params::CoreTimerFlagWidget_GetCurrentFlagSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTimerFlagWidget.IsDataSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreTimerFlagWidget::IsDataSet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTimerFlagWidget", "IsDataSet");

	Params::CoreTimerFlagWidget_IsDataSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreToastNotificationContainerWidget.HandleToastButtonSelected
// (Final, Native, Protected)
// Parameters:
// const int32                             buttonId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const uint32                            notificationId                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationContainerWidget::HandleToastButtonSelected(const int32 buttonId, const uint32 notificationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationContainerWidget", "HandleToastButtonSelected");

	Params::CoreToastNotificationContainerWidget_HandleToastButtonSelected Parms{};

	Parms.buttonId = buttonId;
	Parms.notificationId = notificationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToastNotificationContainerWidget.HandleToastDisplayEnded
// (Final, Native, Protected)
// Parameters:
// const uint32                            notificationId                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationContainerWidget::HandleToastDisplayEnded(const uint32 notificationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationContainerWidget", "HandleToastDisplayEnded");

	Params::CoreToastNotificationContainerWidget_HandleToastDisplayEnded Parms{};

	Parms.notificationId = notificationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToastNotificationContainerWidget.HandleToastPromptSelected
// (Final, Native, Protected)
// Parameters:
// const uint32                            notificationId                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationContainerWidget::HandleToastPromptSelected(const uint32 notificationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationContainerWidget", "HandleToastPromptSelected");

	Params::CoreToastNotificationContainerWidget_HandleToastPromptSelected Parms{};

	Parms.notificationId = notificationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.ChangeVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationWidget::ChangeVisibility(bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "ChangeVisibility");

	Params::CoreToastNotificationWidget_ChangeVisibility Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.OnButtonClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// const int32                             buttonId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationWidget::OnButtonClicked(const int32 buttonId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "OnButtonClicked");

	Params::CoreToastNotificationWidget_OnButtonClicked Parms{};

	Parms.buttonId = buttonId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.OnLeftButtonClicked
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationWidget::OnLeftButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "OnLeftButtonClicked");

	Params::CoreToastNotificationWidget_OnLeftButtonClicked Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.OnRightButtonClicked
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationWidget::OnRightButtonClicked(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "OnRightButtonClicked");

	Params::CoreToastNotificationWidget_OnRightButtonClicked Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.OnTimerFinished
// (Final, Native, Private)

void UCoreToastNotificationWidget::OnTimerFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "OnTimerFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.SetVisuals
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FToastNotificationViewData&toastData                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              IsInteractable_0                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToastNotificationWidget::SetVisuals(const struct FToastNotificationViewData& toastData, const bool IsInteractable_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "SetVisuals");

	Params::CoreToastNotificationWidget_SetVisuals Parms{};

	Parms.toastData = std::move(toastData);
	Parms.IsInteractable_0 = IsInteractable_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.UpdateScaleformInputBlocker
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreToastNotificationWidget::UpdateScaleformInputBlocker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "UpdateScaleformInputBlocker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreToastNotificationWidget.OnOutAnimationFinished
// (Final, Native, Private, BlueprintCallable, Const)

void UCoreToastNotificationWidget::OnOutAnimationFinished() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToastNotificationWidget", "OnOutAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTutorialObjectiveItem.InitObjective
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTutorialObjectivesViewData&interactionsViewData                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreTutorialObjectiveItem::InitObjective(const struct FTutorialObjectivesViewData& interactionsViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTutorialObjectiveItem", "InitObjective");

	Params::CoreTutorialObjectiveItem_InitObjective Parms{};

	Parms.interactionsViewData = std::move(interactionsViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreTutorialObjectiveItem.SetObjectiveCompleted
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    removeAfterCompletion                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTutorialObjectiveItem::SetObjectiveCompleted(bool removeAfterCompletion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTutorialObjectiveItem", "SetObjectiveCompleted");

	Params::CoreTutorialObjectiveItem_SetObjectiveCompleted Parms{};

	Parms.removeAfterCompletion = removeAfterCompletion;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreTutorialObjectivesContainer.OnTutorialObjectiveCompleted
// (Final, Native, Private)
// Parameters:
// class UCoreTutorialObjectiveItem*       Item                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTutorialObjectivesContainer::OnTutorialObjectiveCompleted(class UCoreTutorialObjectiveItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTutorialObjectivesContainer", "OnTutorialObjectiveCompleted");

	Params::CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreUnlockPersonalPerksPopupWidget.HideMenuPerkTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                unhoveredSlotWidget                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreUnlockPersonalPerksPopupWidget::HideMenuPerkTooltip(class UCoreButtonWidget* unhoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreUnlockPersonalPerksPopupWidget", "HideMenuPerkTooltip");

	Params::CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip Parms{};

	Parms.unhoveredSlotWidget = unhoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreUnlockPersonalPerksPopupWidget.ShowMenuPerkTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                hoveredSlotWidget                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreUnlockPersonalPerksPopupWidget::ShowMenuPerkTooltip(class UCoreButtonWidget* hoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreUnlockPersonalPerksPopupWidget", "ShowMenuPerkTooltip");

	Params::CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip Parms{};

	Parms.hoveredSlotWidget = hoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.FullUpdateCurrency
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCurrencyLabelViewData&    ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreWalletWidget::FullUpdateCurrency(const struct FCurrencyLabelViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "FullUpdateCurrency");

	Params::CoreWalletWidget_FullUpdateCurrency Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.InitWallet
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FCurrencyLabelViewData>&walletData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreWalletWidget::InitWallet(const TArray<struct FCurrencyLabelViewData>& walletData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "InitWallet");

	Params::CoreWalletWidget_InitWallet Parms{};

	Parms.walletData = std::move(walletData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.OnCurrencyClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWalletWidget::OnCurrencyClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "OnCurrencyClicked");

	Params::CoreWalletWidget_OnCurrencyClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.PlayNotEnoughCurrency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ECurrencyType                     Type                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWalletWidget::PlayNotEnoughCurrency(const ECurrencyType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "PlayNotEnoughCurrency");

	Params::CoreWalletWidget_PlayNotEnoughCurrency Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.SetCurrenciesButtonsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              IsEnabled                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWalletWidget::SetCurrenciesButtonsEnabled(const bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "SetCurrenciesButtonsEnabled");

	Params::CoreWalletWidget_SetCurrenciesButtonsEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.UpdateCurrency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ECurrencyType                     Type                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   newBalance                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   previousBalance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWalletWidget::UpdateCurrency(const ECurrencyType Type, int32 newBalance, int32 previousBalance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "UpdateCurrency");

	Params::CoreWalletWidget_UpdateCurrency Parms{};

	Parms.Type = Type;
	Parms.newBalance = newBalance;
	Parms.previousBalance = previousBalance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemAvailabilityBannerClicked
// (Final, Native, Private)

void UCoreWardrobeActionButtonsWidget::OnItemAvailabilityBannerClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnItemAvailabilityBannerClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemEquipAllClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnItemEquipAllClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnItemEquipAllClicked");

	Params::CoreWardrobeActionButtonsWidget_OnItemEquipAllClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemEquipClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnItemEquipClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnItemEquipClicked");

	Params::CoreWardrobeActionButtonsWidget_OnItemEquipClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemSelectAllClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnItemSelectAllClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnItemSelectAllClicked");

	Params::CoreWardrobeActionButtonsWidget_OnItemSelectAllClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemUnlockPressed
// (Final, Native, Private)

void UCoreWardrobeActionButtonsWidget::OnItemUnlockPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnItemUnlockPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemUnlockReleased
// (Final, Native, Private)

void UCoreWardrobeActionButtonsWidget::OnItemUnlockReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnItemUnlockReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemUnlockTriggered
// (Final, Native, Private)
// Parameters:
// const ECurrencyType                     currencyType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnItemUnlockTriggered(const ECurrencyType currencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnItemUnlockTriggered");

	Params::CoreWardrobeActionButtonsWidget_OnItemUnlockTriggered Parms{};

	Parms.currencyType = currencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnPlayMoriClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnPlayMoriClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnPlayMoriClicked");

	Params::CoreWardrobeActionButtonsWidget_OnPlayMoriClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnPlayMoriHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnPlayMoriHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnPlayMoriHovered");

	Params::CoreWardrobeActionButtonsWidget_OnPlayMoriHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnPlayMoriUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnPlayMoriUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnPlayMoriUnhovered");

	Params::CoreWardrobeActionButtonsWidget_OnPlayMoriUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnPlaySecondMoriClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnPlaySecondMoriClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnPlaySecondMoriClicked");

	Params::CoreWardrobeActionButtonsWidget_OnPlaySecondMoriClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnSecondMoriHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnSecondMoriHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnSecondMoriHovered");

	Params::CoreWardrobeActionButtonsWidget_OnSecondMoriHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnSecondMoriUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnSecondMoriUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnSecondMoriUnhovered");

	Params::CoreWardrobeActionButtonsWidget_OnSecondMoriUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnZoomCharmClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::OnZoomCharmClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "OnZoomCharmClicked");

	Params::CoreWardrobeActionButtonsWidget_OnZoomCharmClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.UpdateMoriButtonVisual
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              HasUniqueMori                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::UpdateMoriButtonVisual(const bool HasUniqueMori)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "UpdateMoriButtonVisual");

	Params::CoreWardrobeActionButtonsWidget_UpdateMoriButtonVisual Parms{};

	Parms.HasUniqueMori = HasUniqueMori;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.UpdateZoomCharmIcon
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// const bool                              IsCharmZoomed                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWardrobeActionButtonsWidget::UpdateZoomCharmIcon(const bool IsCharmZoomed) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWardrobeActionButtonsWidget", "UpdateZoomCharmIcon");

	Params::CoreWardrobeActionButtonsWidget_UpdateZoomCharmIcon Parms{};

	Parms.IsCharmZoomed = IsCharmZoomed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreWatermarkWidget.UpdateWatermarkText
// (Final, Native, Protected)

void UCoreWatermarkWidget::UpdateWatermarkText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWatermarkWidget", "UpdateWatermarkText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CurrencyConversionPopupWidget.SetData
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UCurrencyConversionPopupViewData*Data                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCurrencyConversionPopupWidget::SetData(const class UCurrencyConversionPopupViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CurrencyConversionPopupWidget", "SetData");

	Params::CurrencyConversionPopupWidget_SetData Parms{};

	Parms.Data = Data;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CurrencyProgressionTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCurrencyProgressionTooltipViewData&currencyViewData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCurrencyProgressionTooltipWidget::SetTooltipData(const struct FCurrencyProgressionTooltipViewData& currencyViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CurrencyProgressionTooltipWidget", "SetTooltipData");

	Params::CurrencyProgressionTooltipWidget_SetTooltipData Parms{};

	Parms.currencyViewData = std::move(currencyViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemGridContainer.ClearGrid
// (Final, Native, Protected, BlueprintCallable)

void UCustomizationItemGridContainer::ClearGrid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemGridContainer", "ClearGrid");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemGridContainer.OnItemClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationItemGridContainer::OnItemClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemGridContainer", "OnItemClicked");

	Params::CustomizationItemGridContainer_OnItemClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemGridContainer.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UStoreCustomizationItemViewData*>&customizationRewardsData                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             selectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   overrideLayoutMask                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationItemGridContainer::SetData(const TArray<class UStoreCustomizationItemViewData*>& customizationRewardsData, const int32 selectedIndex, int32 overrideLayoutMask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemGridContainer", "SetData");

	Params::CustomizationItemGridContainer_SetData Parms{};

	Parms.customizationRewardsData = std::move(customizationRewardsData);
	Parms.selectedIndex = selectedIndex;
	Parms.overrideLayoutMask = overrideLayoutMask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemGridContainer.SetEquippedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              IsEquipped                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationItemGridContainer::SetEquippedItem(const bool IsEquipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemGridContainer", "SetEquippedItem");

	Params::CustomizationItemGridContainer_SetEquippedItem Parms{};

	Parms.IsEquipped = IsEquipped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemGridContainer.SetScrollPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*DisplayPrompt                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationItemGridContainer::SetScrollPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemGridContainer", "SetScrollPrompt");

	Params::CustomizationItemGridContainer_SetScrollPrompt Parms{};

	Parms.DisplayPrompt = DisplayPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemGridContainer.SetSelectedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             selectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationItemGridContainer::SetSelectedItem(const int32 selectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemGridContainer", "SetSelectedItem");

	Params::CustomizationItemGridContainer_SetSelectedItem Parms{};

	Parms.selectedIndex = selectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.DisableArchivesButton
// (Final, Native, Public, BlueprintCallable)

void UCustomizationItemOriginWidget::DisableArchivesButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "DisableArchivesButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.DisableChallengesButton
// (Final, Native, Public, BlueprintCallable)

void UCustomizationItemOriginWidget::DisableChallengesButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "DisableChallengesButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.DisableCurrencyButton
// (Final, Native, Public, BlueprintCallable)

void UCustomizationItemOriginWidget::DisableCurrencyButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "DisableCurrencyButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.DisableInputs
// (Final, Native, Public, BlueprintCallable)

void UCustomizationItemOriginWidget::DisableInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "DisableInputs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.DisableStoreButton
// (Final, Native, Public, BlueprintCallable)

void UCustomizationItemOriginWidget::DisableStoreButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "DisableStoreButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.OnButtonClick
// (Final, Native, Protected)

void UCustomizationItemOriginWidget::OnButtonClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "OnButtonClick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetArchivesState
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class FText>&              Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetArchivesState(const TArray<class FText>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetArchivesState");

	Params::CustomizationItemOriginWidget_SetArchivesState Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetChallengeState
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class FText>&              Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetChallengeState(const TArray<class FText>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetChallengeState");

	Params::CustomizationItemOriginWidget_SetChallengeState Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetCurrencyPurchaseState
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FPriceTagViewData&         CurrencyData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetCurrencyPurchaseState(const struct FPriceTagViewData& CurrencyData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetCurrencyPurchaseState");

	Params::CustomizationItemOriginWidget_SetCurrencyPurchaseState Parms{};

	Parms.CurrencyData = std::move(CurrencyData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCustomizationItemOriginViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetData(const struct FCustomizationItemOriginViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetData");

	Params::CustomizationItemOriginWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetDefaultState
// (Native, Event, Protected, BlueprintEvent)

void UCustomizationItemOriginWidget::SetDefaultState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetDefaultState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetGameplayState
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class FText>&              Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetGameplayState(const TArray<class FText>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetGameplayState");

	Params::CustomizationItemOriginWidget_SetGameplayState Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetInputSwitcherEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreInputSwitcherWidget*         inputSwitcher                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              Enabled                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetInputSwitcherEnabled(class UCoreInputSwitcherWidget* inputSwitcher, const bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetInputSwitcherEnabled");

	Params::CustomizationItemOriginWidget_SetInputSwitcherEnabled Parms{};

	Parms.inputSwitcher = inputSwitcher;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetMilestonePointsState
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class FText>&              Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetMilestonePointsState(const TArray<class FText>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetMilestonePointsState");

	Params::CustomizationItemOriginWidget_SetMilestonePointsState Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetState
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCustomizationItemOriginViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationItemOriginWidget::SetState(const struct FCustomizationItemOriginViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetState");

	Params::CustomizationItemOriginWidget_SetState Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetStoreState
// (Native, Event, Protected, BlueprintEvent)

void UCustomizationItemOriginWidget::SetStoreState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationItemOriginWidget", "SetStoreState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.AppendToDescriptionText
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      appendedText                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationTooltipWidget::AppendToDescriptionText(const class FText& appendedText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "AppendToDescriptionText");

	Params::CustomizationTooltipWidget_AppendToDescriptionText Parms{};

	Parms.appendedText = std::move(appendedText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.ClearPriceTagWidgets
// (Final, Native, Protected, BlueprintCallable)

void UCustomizationTooltipWidget::ClearPriceTagWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "ClearPriceTagWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.CreatePriceTagWidget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UCorePriceTagWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCorePriceTagWidget* UCustomizationTooltipWidget::CreatePriceTagWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "CreatePriceTagWidget");

	Params::CustomizationTooltipWidget_CreatePriceTagWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.SetOutfitParts
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              IsUnbreakable                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UCustomizationRewardOutfitPartsViewData*outfitPartsViewData                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationTooltipWidget::SetOutfitParts(const bool IsUnbreakable, const class UCustomizationRewardOutfitPartsViewData* outfitPartsViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "SetOutfitParts");

	Params::CustomizationTooltipWidget_SetOutfitParts Parms{};

	Parms.IsUnbreakable = IsUnbreakable;
	Parms.outfitPartsViewData = outfitPartsViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.SetStatusText
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              IsEquipped                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              IsOwned                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              IsAvailable                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              IsLocked                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              ShowAvailability                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationTooltipWidget::SetStatusText(const bool IsEquipped, const bool IsOwned, const bool IsAvailable, const bool IsLocked, const bool ShowAvailability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "SetStatusText");

	Params::CustomizationTooltipWidget_SetStatusText Parms{};

	Parms.IsEquipped = IsEquipped;
	Parms.IsOwned = IsOwned;
	Parms.IsAvailable = IsAvailable;
	Parms.IsLocked = IsLocked;
	Parms.ShowAvailability = ShowAvailability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.SetTags
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const EItemSourceTag                    ItemSourceTags                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationTooltipWidget::SetTags(const EItemSourceTag ItemSourceTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "SetTags");

	Params::CustomizationTooltipWidget_SetTags Parms{};

	Parms.ItemSourceTags = ItemSourceTags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.SetTooltipData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FCustomizationTooltipViewData&CustomizationViewData                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationTooltipWidget::SetTooltipData(const struct FCustomizationTooltipViewData& CustomizationViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "SetTooltipData");

	Params::CustomizationTooltipWidget_SetTooltipData Parms{};

	Parms.CustomizationViewData = std::move(CustomizationViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.DBDComboBoxString.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            OptionsList                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    DefaultOption                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDComboBoxString::SetData(const TArray<class FString>& OptionsList, const class FString& DefaultOption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDComboBoxString", "SetData");

	Params::DBDComboBoxString_SetData Parms{};

	Parms.OptionsList = std::move(OptionsList);
	Parms.DefaultOption = std::move(DefaultOption);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListButton.ToggleDropDownArrow
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    showArrow                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDDropDownListButton::ToggleDropDownArrow(bool showArrow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListButton", "ToggleDropDownArrow");

	Params::DBDDropDownListButton_ToggleDropDownArrow Parms{};

	Parms.showArrow = showArrow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.DBDDropDownListWidget.BindToTrigger
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                triggerButton                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDDropDownListWidget::BindToTrigger(class UCoreButtonWidget* triggerButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "BindToTrigger");

	Params::DBDDropDownListWidget_BindToTrigger Parms{};

	Parms.triggerButton = triggerButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.HideDropDownList
// (Final, Native, Private, BlueprintCallable)

void UDBDDropDownListWidget::HideDropDownList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "HideDropDownList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.OnOptionSelected
// (Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDDropDownListWidget::OnOptionSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "OnOptionSelected");

	Params::DBDDropDownListWidget_OnOptionSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.OnTriggerClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDDropDownListWidget::OnTriggerClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "OnTriggerClicked");

	Params::DBDDropDownListWidget_OnTriggerClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.OnUserClicked
// (Native, Protected, HasOutParams)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDBDDropDownListWidget::OnUserClicked(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "OnUserClicked");

	Params::DBDDropDownListWidget_OnUserClicked Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.UnbindFromTrigger
// (Final, Native, Public, BlueprintCallable)

void UDBDDropDownListWidget::UnbindFromTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "UnbindFromTrigger");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.UpdateDropDown
// (Native, Public)

void UDBDDropDownListWidget::UpdateDropDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "UpdateDropDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDEditableTextBox.GetTextStyles
// (Final, Native, Static, Public)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UDBDEditableTextBox::GetTextStyles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DBDEditableTextBox", "GetTextStyles");

	Params::DBDEditableTextBox_GetTextStyles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDEditableTextBox.PopulateTextStyles
// (Final, Native, Static, Public)

void UDBDEditableTextBox::PopulateTextStyles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DBDEditableTextBox", "PopulateTextStyles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDEditableTextBox.SetBackgroundColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLinearColor&              Color                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDEditableTextBox::SetBackgroundColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDEditableTextBox", "SetBackgroundColor");

	Params::DBDEditableTextBox_SetBackgroundColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDEditableTextBox.SetCharacterLimit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterLimit                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDEditableTextBox::SetCharacterLimit(int32 CharacterLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDEditableTextBox", "SetCharacterLimit");

	Params::DBDEditableTextBox_SetCharacterLimit Parms{};

	Parms.CharacterLimit = CharacterLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDEditableTextBox.GetCharacterLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDBDEditableTextBox::GetCharacterLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDEditableTextBox", "GetCharacterLimit");

	Params::DBDEditableTextBox_GetCharacterLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDImage.SetBrushFromSoftTextureWithDefault
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        SoftTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    matchSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDImage::SetBrushFromSoftTextureWithDefault(TSoftObjectPtr<class UTexture2D> SoftTexture, bool matchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDImage", "SetBrushFromSoftTextureWithDefault");

	Params::DBDImage_SetBrushFromSoftTextureWithDefault Parms{};

	Parms.SoftTexture = SoftTexture;
	Parms.matchSize = matchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDImage.SetBrushFromTextureWithDefault
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    matchSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDImage::SetBrushFromTextureWithDefault(class UTexture2D* Texture, bool matchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDImage", "SetBrushFromTextureWithDefault");

	Params::DBDImage_SetBrushFromTextureWithDefault Parms{};

	Parms.Texture = Texture;
	Parms.matchSize = matchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDImage.SetMaterialTextureFromSoftTextureWithDefault
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        SoftTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDImage::SetMaterialTextureFromSoftTextureWithDefault(TSoftObjectPtr<class UTexture2D> SoftTexture, class FName ParameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDImage", "SetMaterialTextureFromSoftTextureWithDefault");

	Params::DBDImage_SetMaterialTextureFromSoftTextureWithDefault Parms{};

	Parms.SoftTexture = SoftTexture;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDPreviewWorldImage.GetCurrentWorldName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UDBDPreviewWorldImage::GetCurrentWorldName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDPreviewWorldImage", "GetCurrentWorldName");

	Params::DBDPreviewWorldImage_GetCurrentWorldName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDRichTextBlock.GetTextStyles
// (Final, Native, Static, Protected)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UDBDRichTextBlock::GetTextStyles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DBDRichTextBlock", "GetTextStyles");

	Params::DBDRichTextBlock_GetTextStyles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDRichTextBlock.PopulateTextStyles
// (Final, Native, Static, Protected)

void UDBDRichTextBlock::PopulateTextStyles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DBDRichTextBlock", "PopulateTextStyles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.OnLargeTextSettingsChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    isLargeText                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDRichTextBlock::OnLargeTextSettingsChanged(bool isLargeText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "OnLargeTextSettingsChanged");

	Params::DBDRichTextBlock_OnLargeTextSettingsChanged Parms{};

	Parms.isLargeText = isLargeText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.OnSwitchDockStateChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    isDocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDRichTextBlock::OnSwitchDockStateChanged(bool isDocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "OnSwitchDockStateChanged");

	Params::DBDRichTextBlock_OnSwitchDockStateChanged Parms{};

	Parms.isDocked = isDocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.PreviewHTMLText
// (Final, Native, Protected)

void UDBDRichTextBlock::PreviewHTMLText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "PreviewHTMLText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.PreviewLargeText
// (Final, Native, Protected)

void UDBDRichTextBlock::PreviewLargeText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "PreviewLargeText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.PreviewUndocked
// (Final, Native, Protected)

void UDBDRichTextBlock::PreviewUndocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "PreviewUndocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.SetHTMLText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDBDRichTextBlock::SetHTMLText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "SetHTMLText");

	Params::DBDRichTextBlock_SetHTMLText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.SetIsUpperCase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isUpperCase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDRichTextBlock::SetIsUpperCase(bool isUpperCase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "SetIsUpperCase");

	Params::DBDRichTextBlock_SetIsUpperCase Parms{};

	Parms.isUpperCase = isUpperCase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.SetWrapTextAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   wrapTextAtValue                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDRichTextBlock::SetWrapTextAt(float wrapTextAtValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "SetWrapTextAt");

	Params::DBDRichTextBlock_SetWrapTextAt Parms{};

	Parms.wrapTextAtValue = wrapTextAtValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.GetIsUpperCase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDBDRichTextBlock::GetIsUpperCase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "GetIsUpperCase");

	Params::DBDRichTextBlock_GetIsUpperCase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDScrollBox.HandleControllerInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   analogValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDScrollBox::HandleControllerInput(float analogValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "HandleControllerInput");

	Params::DBDScrollBox_HandleControllerInput Parms{};

	Parms.analogValue = analogValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.HandleMouseWheelInput
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPointerEvent&             PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDBDScrollBox::HandleMouseWheelInput(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "HandleMouseWheelInput");

	Params::DBDScrollBox_HandleMouseWheelInput Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.HideDisplayPrompt
// (Final, Native, Public, BlueprintCallable)

void UDBDScrollBox::HideDisplayPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "HideDisplayPrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.IsMouseOver
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDBDScrollBox::IsMouseOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "IsMouseOver");

	Params::DBDScrollBox_IsMouseOver Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDScrollBox.OnControlModeChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EControlMode                            controlMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDScrollBox::OnControlModeChanged(EControlMode controlMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "OnControlModeChanged");

	Params::DBDScrollBox_OnControlModeChanged Parms{};

	Parms.controlMode = controlMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.RegisterForInput
// (Final, Native, Public, BlueprintCallable)

void UDBDScrollBox::RegisterForInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "RegisterForInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.SetDisplayPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*DisplayPrompt                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDScrollBox::SetDisplayPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "SetDisplayPrompt");

	Params::DBDScrollBox_SetDisplayPrompt Parms{};

	Parms.DisplayPrompt = DisplayPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.SetShouldScrollOnMouseOver
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              shouldScrollOnMouseOver                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDScrollBox::SetShouldScrollOnMouseOver(const bool shouldScrollOnMouseOver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "SetShouldScrollOnMouseOver");

	Params::DBDScrollBox_SetShouldScrollOnMouseOver Parms{};

	Parms.shouldScrollOnMouseOver = shouldScrollOnMouseOver;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.SetShowScrollDisplayPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EShowScrollDisplayPrompt          showScrollDisplayPrompt                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDScrollBox::SetShowScrollDisplayPrompt(const EShowScrollDisplayPrompt showScrollDisplayPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "SetShowScrollDisplayPrompt");

	Params::DBDScrollBox_SetShowScrollDisplayPrompt Parms{};

	Parms.showScrollDisplayPrompt = showScrollDisplayPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.UpdateDisplayPrompt
// (Final, Native, Public, BlueprintCallable)

void UDBDScrollBox::UpdateDisplayPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "UpdateDisplayPrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.UpdateSmoothMask
// (Final, Native, Private)
// Parameters:
// float                                   CurrentOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDScrollBox::UpdateSmoothMask(float CurrentOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "UpdateSmoothMask");

	Params::DBDScrollBox_UpdateSmoothMask Parms{};

	Parms.CurrentOffset = CurrentOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.IsScrollable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDBDScrollBox::IsScrollable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "IsScrollable");

	Params::DBDScrollBox_IsScrollable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDSlider.Decrement
// (Final, Native, Public, BlueprintCallable)

void UDBDSlider::Decrement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDSlider", "Decrement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDSlider.Increment
// (Final, Native, Public, BlueprintCallable)

void UDBDSlider::Increment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDSlider", "Increment");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDSlider.IsValidValue
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const float                             InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDBDSlider::IsValidValue(const float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDSlider", "IsValidValue");

	Params::DBDSlider_IsValidValue Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDSlider.OnControlModeChanged
// (Final, Native, Protected)
// Parameters:
// EControlMode                            controlMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDSlider::OnControlModeChanged(EControlMode controlMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDSlider", "OnControlModeChanged");

	Params::DBDSlider_OnControlModeChanged Parms{};

	Parms.controlMode = controlMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.GetTextStyles
// (Final, Native, Static, Protected)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UDBDTextBlock::GetTextStyles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DBDTextBlock", "GetTextStyles");

	Params::DBDTextBlock_GetTextStyles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDTextBlock.PopulateTextStyles
// (Final, Native, Static, Protected)

void UDBDTextBlock::PopulateTextStyles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DBDTextBlock", "PopulateTextStyles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.OnLargeTextSettingsChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    isLargeText                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTextBlock::OnLargeTextSettingsChanged(bool isLargeText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "OnLargeTextSettingsChanged");

	Params::DBDTextBlock_OnLargeTextSettingsChanged Parms{};

	Parms.isLargeText = isLargeText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.OnSwitchDockStateChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    isDocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTextBlock::OnSwitchDockStateChanged(bool isDocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "OnSwitchDockStateChanged");

	Params::DBDTextBlock_OnSwitchDockStateChanged Parms{};

	Parms.isDocked = isDocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.PreviewLargeText
// (Final, Native, Protected)

void UDBDTextBlock::PreviewLargeText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "PreviewLargeText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.PreviewUndocked
// (Final, Native, Protected)

void UDBDTextBlock::PreviewUndocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "PreviewUndocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.SetIsUpperCase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isUpperCase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTextBlock::SetIsUpperCase(bool isUpperCase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "SetIsUpperCase");

	Params::DBDTextBlock_SetIsUpperCase Parms{};

	Parms.isUpperCase = isUpperCase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.GetIsUpperCase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDBDTextBlock::GetIsUpperCase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "GetIsUpperCase");

	Params::DBDTextBlock_GetIsUpperCase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDTooltipManager.HideAllTooltips
// (Final, Native, Public, BlueprintCallable)

void UDBDTooltipManager::HideAllTooltips()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "HideAllTooltips");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.HideTooltip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ETooltipPriority                  Priority                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::HideTooltip(const ETooltipPriority Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "HideTooltip");

	Params::DBDTooltipManager_HideTooltip Parms{};

	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.OnViewportCreated
// (Final, Native, Private)

void UDBDTooltipManager::OnViewportCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "OnViewportCreated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveCompendiumTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCompendiumButtonData&     tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowArchiveCompendiumTooltip(const struct FCompendiumButtonData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowArchiveCompendiumTooltip");

	Params::DBDTooltipManager_ShowArchiveCompendiumTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveNodeTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchiveNodeViewData&      tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowArchiveNodeTooltip(const struct FArchiveNodeViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowArchiveNodeTooltip");

	Params::DBDTooltipManager_ShowArchiveNodeTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowArchivePassTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchivePassTooltipViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ETooltipVerticalAlignment         tooltipVerticalAlignment                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowArchivePassTooltip(const struct FArchivePassTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowArchivePassTooltip");

	Params::DBDTooltipManager_ShowArchivePassTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveRewardNodeTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchiveRewardNodeTooltipViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowArchiveRewardNodeTooltip(const struct FArchiveRewardNodeTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowArchiveRewardNodeTooltip");

	Params::DBDTooltipManager_ShowArchiveRewardNodeTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowBloodpointBonusTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBloodpointBonusTooltipViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FTooltipTriggerGeometry&   triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowBloodpointBonusTooltip(const struct FBloodpointBonusTooltipViewData& tooltipViewData, const struct FTooltipTriggerGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowBloodpointBonusTooltip");

	Params::DBDTooltipManager_ShowBloodpointBonusTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowChallengeTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FChallengeTooltipViewData& tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ETooltipVerticalAlignment         tooltipVerticalAlignment                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowChallengeTooltip(const struct FChallengeTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowChallengeTooltip");

	Params::DBDTooltipManager_ShowChallengeTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowCharacterTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCharacterTooltipViewData& tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowCharacterTooltip(const struct FCharacterTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowCharacterTooltip");

	Params::DBDTooltipManager_ShowCharacterTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowCurrencyTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCurrencyProgressionTooltipViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowCurrencyTooltip(const struct FCurrencyProgressionTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowCurrencyTooltip");

	Params::DBDTooltipManager_ShowCurrencyTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowCustomizationTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCustomizationTooltipViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowCustomizationTooltip(const struct FCustomizationTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowCustomizationTooltip");

	Params::DBDTooltipManager_ShowCustomizationTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowDisabledButtonTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      disabledButtonTooltipText                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ETooltipVerticalAlignment         tooltipVerticalAlignment                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowDisabledButtonTooltip(const class FText& disabledButtonTooltipText, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowDisabledButtonTooltip");

	Params::DBDTooltipManager_ShowDisabledButtonTooltip Parms{};

	Parms.disabledButtonTooltipText = std::move(disabledButtonTooltipText);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowFollowedQuestsTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FFollowedQuestsTooltipViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ETooltipVerticalAlignment         tooltipVerticalAlignment                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowFollowedQuestsTooltip(const struct FFollowedQuestsTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowFollowedQuestsTooltip");

	Params::DBDTooltipManager_ShowFollowedQuestsTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowLabelTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowLabelTooltip(const class FText& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowLabelTooltip");

	Params::DBDTooltipManager_ShowLabelTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowLoadoutTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLoadoutTooltipData&       tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowLoadoutTooltip(const struct FLoadoutTooltipData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowLoadoutTooltip");

	Params::DBDTooltipManager_ShowLoadoutTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowLockedFeatureTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLockedFeatureTooltipViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ETooltipVerticalAlignment         tooltipVerticalAlignment                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowLockedFeatureTooltip(const struct FLockedFeatureTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowLockedFeatureTooltip");

	Params::DBDTooltipManager_ShowLockedFeatureTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowMapShowcaseTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMapShowcaseTooltipViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FTooltipTriggerGeometry&   triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ETooltipVerticalAlignment         tooltipVerticalAlignment                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowMapShowcaseTooltip(const struct FMapShowcaseTooltipViewData& tooltipViewData, const struct FTooltipTriggerGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowMapShowcaseTooltip");

	Params::DBDTooltipManager_ShowMapShowcaseTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowNotEnoughCurrencyModal
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FNotEnoughCurrencyModalViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ETooltipVerticalAlignment         tooltipVerticalAlignment                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowNotEnoughCurrencyModal(const struct FNotEnoughCurrencyModalViewData& ViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowNotEnoughCurrencyModal");

	Params::DBDTooltipManager_ShowNotEnoughCurrencyModal Parms{};

	Parms.ViewData = std::move(ViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowObjectiveTrackerTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FEventObjectiveTrackerViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowObjectiveTrackerTooltip(const struct FEventObjectiveTrackerViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowObjectiveTrackerTooltip");

	Params::DBDTooltipManager_ShowObjectiveTrackerTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowPlayerLevelTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCorePlayerLevelTooltipViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowPlayerLevelTooltip(const struct FCorePlayerLevelTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowPlayerLevelTooltip");

	Params::DBDTooltipManager_ShowPlayerLevelTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowPrestigeTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPrestigeViewData&         tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowPrestigeTooltip(const struct FPrestigeViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowPrestigeTooltip");

	Params::DBDTooltipManager_ShowPrestigeTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowRankTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FRankTooltipViewData&      tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ETooltipVerticalAlignment         tooltipVerticalAlignment                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowRankTooltip(const struct FRankTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowRankTooltip");

	Params::DBDTooltipManager_ShowRankTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowSharedPerksTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSharedPerksTooltipViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowSharedPerksTooltip(const struct FSharedPerksTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowSharedPerksTooltip");

	Params::DBDTooltipManager_ShowSharedPerksTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBox.AddChildToWrapBox
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Content                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDBDWrapBoxSlot*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDBDWrapBoxSlot* UDBDWrapBox::AddChildToWrapBox(class UWidget* Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBox", "AddChildToWrapBox");

	Params::DBDWrapBox_AddChildToWrapBox Parms{};

	Parms.Content = Content;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDWrapBox.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    inHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBox::SetHorizontalAlignment(EHorizontalAlignment inHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBox", "SetHorizontalAlignment");

	Params::DBDWrapBox_SetHorizontalAlignment Parms{};

	Parms.inHorizontalAlignment = inHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBox.SetInnerSlotPadding
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 InPadding                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBox::SetInnerSlotPadding(const struct FVector2D& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBox", "SetInnerSlotPadding");

	Params::DBDWrapBox_SetInnerSlotPadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetFillEmptySpace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InbFillEmptySpace                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetFillEmptySpace(bool InbFillEmptySpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetFillEmptySpace");

	Params::DBDWrapBoxSlot_SetFillEmptySpace Parms{};

	Parms.InbFillEmptySpace = InbFillEmptySpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetFillSpanWhenLessThan
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InFillSpanWhenLessThan                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetFillSpanWhenLessThan(float InFillSpanWhenLessThan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetFillSpanWhenLessThan");

	Params::DBDWrapBoxSlot_SetFillSpanWhenLessThan Parms{};

	Parms.InFillSpanWhenLessThan = InFillSpanWhenLessThan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    inHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetHorizontalAlignment(EHorizontalAlignment inHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetHorizontalAlignment");

	Params::DBDWrapBoxSlot_SetHorizontalAlignment Parms{};

	Parms.inHorizontalAlignment = inHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   InPadding                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetPadding(const struct FMargin& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetPadding");

	Params::DBDWrapBoxSlot_SetPadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      inVerticalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetVerticalAlignment(EVerticalAlignment inVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetVerticalAlignment");

	Params::DBDWrapBoxSlot_SetVerticalAlignment Parms{};

	Parms.inVerticalAlignment = inVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DisabledButtonTooltipWidget.SetTooltipData
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      disabledButtonTooltipText                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDisabledButtonTooltipWidget::SetTooltipData(const class FText& disabledButtonTooltipText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisabledButtonTooltipWidget", "SetTooltipData");

	Params::DisabledButtonTooltipWidget_SetTooltipData Parms{};

	Parms.disabledButtonTooltipText = std::move(disabledButtonTooltipText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnAnalogInput
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FAnalogInputEvent&         analogEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDragZone::OnAnalogInput(const struct FAnalogInputEvent& analogEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnAnalogInput");

	Params::DragZone_OnAnalogInput Parms{};

	Parms.analogEvent = std::move(analogEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnMouseMoveGlobal
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDragZone::OnMouseMoveGlobal(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnMouseMoveGlobal");

	Params::DragZone_OnMouseMoveGlobal Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnMousePressGlobal
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDragZone::OnMousePressGlobal(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnMousePressGlobal");

	Params::DragZone_OnMousePressGlobal Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnMouseReleaseGlobal
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDragZone::OnMouseReleaseGlobal(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnMouseReleaseGlobal");

	Params::DragZone_OnMouseReleaseGlobal Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EmblemWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FEmblemViewData&           ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UEmblemWidget::SetData(const struct FEmblemViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmblemWidget", "SetData");

	Params::EmblemWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsTabWidget.OnPreviewAreaItemClicked
// (Final, Native, Protected)
// Parameters:
// const int32                             selectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventEntryRewardsTabWidget::OnPreviewAreaItemClicked(const int32 selectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsTabWidget", "OnPreviewAreaItemClicked");

	Params::EventEntryRewardsTabWidget_OnPreviewAreaItemClicked Parms{};

	Parms.selectedIndex = selectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsTabWidget.OnRewardGridItemClicked
// (Final, Native, Protected)
// Parameters:
// const int32                             selectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventEntryRewardsTabWidget::OnRewardGridItemClicked(const int32 selectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsTabWidget", "OnRewardGridItemClicked");

	Params::EventEntryRewardsTabWidget_OnRewardGridItemClicked Parms{};

	Parms.selectedIndex = selectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsTabWidget.SetScrollPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*DisplayPrompt                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventEntryRewardsTabWidget::SetScrollPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsTabWidget", "SetScrollPrompt");

	Params::EventEntryRewardsTabWidget_SetScrollPrompt Parms{};

	Parms.DisplayPrompt = DisplayPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryDetailsTabContentWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSpecialEventDetailsTabContentData&ContentData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FEventEntryPopupSkinUIData&skinData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UEventEntryDetailsTabContentWidget::SetData(const struct FSpecialEventDetailsTabContentData& ContentData, const struct FEventEntryPopupSkinUIData& skinData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryDetailsTabContentWidget", "SetData");

	Params::EventEntryDetailsTabContentWidget_SetData Parms{};

	Parms.ContentData = std::move(ContentData);
	Parms.skinData = std::move(skinData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.EventEntryDetailsTabLayoutWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FEventEntryPopupSkinUIData&skinData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FSpecialEventDetailsTabContentData>&ContentData                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TSoftObjectPtr<class UTexture2D>& ImageTexture                                           (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventEntryDetailsTabLayoutWidget::SetData(const struct FEventEntryPopupSkinUIData& skinData, const TArray<struct FSpecialEventDetailsTabContentData>& ContentData, const TSoftObjectPtr<class UTexture2D>& ImageTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryDetailsTabLayoutWidget", "SetData");

	Params::EventEntryDetailsTabLayoutWidget_SetData Parms{};

	Parms.skinData = std::move(skinData);
	Parms.ContentData = std::move(ContentData);
	Parms.ImageTexture = ImageTexture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.EventEntryDetailsTabLayoutWidget.SetTooltipEventData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCustomizationTooltipViewData&TooltipData                                            (Parm, NativeAccessSpecifierPublic)
// const struct FSpecialEventDetailsTabContentData&ContentData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FCustomizationTooltipViewData    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCustomizationTooltipViewData UEventEntryDetailsTabLayoutWidget::SetTooltipEventData(const struct FCustomizationTooltipViewData& TooltipData, const struct FSpecialEventDetailsTabContentData& ContentData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryDetailsTabLayoutWidget", "SetTooltipEventData");

	Params::EventEntryDetailsTabLayoutWidget_SetTooltipEventData Parms{};

	Parms.TooltipData = std::move(TooltipData);
	Parms.ContentData = std::move(ContentData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.EventEntryEventTabWidget.DisableInputs
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UEventEntryEventTabWidget::DisableInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryEventTabWidget", "DisableInputs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.EventEntryEventTabWidget.EnableInputs
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UEventEntryEventTabWidget::EnableInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryEventTabWidget", "EnableInputs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.EventEntryEventTabWidget.OnChallengesButtonClicked
// (Final, Native, Protected)

void UEventEntryEventTabWidget::OnChallengesButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryEventTabWidget", "OnChallengesButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.DisableInputs
// (Final, Native, Public, BlueprintCallable)

void UEventEntryRewardsDisplayWidget::DisableInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "DisableInputs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.DisableInstructionArchivesButton
// (Final, Native, Public, BlueprintCallable)

void UEventEntryRewardsDisplayWidget::DisableInstructionArchivesButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "DisableInstructionArchivesButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.DisableInstructionChallengesButton
// (Final, Native, Public, BlueprintCallable)

void UEventEntryRewardsDisplayWidget::DisableInstructionChallengesButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "DisableInstructionChallengesButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.DisableInstructionCurrencyButton
// (Final, Native, Public, BlueprintCallable)

void UEventEntryRewardsDisplayWidget::DisableInstructionCurrencyButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "DisableInstructionCurrencyButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.DisableInstructionStoreButton
// (Final, Native, Public, BlueprintCallable)

void UEventEntryRewardsDisplayWidget::DisableInstructionStoreButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "DisableInstructionStoreButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetInstructionWidgetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCustomizationItemOriginViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UEventEntryRewardsDisplayWidget::SetInstructionWidgetData(const struct FCustomizationItemOriginViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "SetInstructionWidgetData");

	Params::EventEntryRewardsDisplayWidget_SetInstructionWidgetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetItemsData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UStoreCustomizationItemViewData*>&customizationRewardsData                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             selectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventEntryRewardsDisplayWidget::SetItemsData(const TArray<class UStoreCustomizationItemViewData*>& customizationRewardsData, const int32 selectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "SetItemsData");

	Params::EventEntryRewardsDisplayWidget_SetItemsData Parms{};

	Parms.customizationRewardsData = std::move(customizationRewardsData);
	Parms.selectedIndex = selectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetPreviewAreaData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCustomizationItemPreviewAreaViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UEventEntryRewardsDisplayWidget::SetPreviewAreaData(const struct FCustomizationItemPreviewAreaViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "SetPreviewAreaData");

	Params::EventEntryRewardsDisplayWidget_SetPreviewAreaData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetScrollPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*DisplayPrompt                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventEntryRewardsDisplayWidget::SetScrollPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "SetScrollPrompt");

	Params::EventEntryRewardsDisplayWidget_SetScrollPrompt Parms{};

	Parms.DisplayPrompt = DisplayPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetSelectedReward
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             selectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventEntryRewardsDisplayWidget::SetSelectedReward(const int32 selectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "SetSelectedReward");

	Params::EventEntryRewardsDisplayWidget_SetSelectedReward Parms{};

	Parms.selectedIndex = selectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetVisuals
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FEventEntryPopupSkinUIData&skinUIData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UEventEntryRewardsDisplayWidget::SetVisuals(const struct FEventEntryPopupSkinUIData& skinUIData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryRewardsDisplayWidget", "SetVisuals");

	Params::EventEntryRewardsDisplayWidget_SetVisuals Parms{};

	Parms.skinUIData = std::move(skinUIData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.EventObjectiveTrackerTarget.SetData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FEventObjectiveTargetData& Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FEventObjectiveTrackerSkinUIData&skinData                                               (ConstParm, Parm, NativeAccessSpecifierPublic)

void UEventObjectiveTrackerTarget::SetData(const struct FEventObjectiveTargetData& Data, const struct FEventObjectiveTrackerSkinUIData& skinData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventObjectiveTrackerTarget", "SetData");

	Params::EventObjectiveTrackerTarget_SetData Parms{};

	Parms.Data = std::move(Data);
	Parms.skinData = std::move(skinData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.EventObjectiveTrackerTarget.SetIsReached
// (Event, Public, BlueprintEvent)
// Parameters:
// const bool                              IsReached                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventObjectiveTrackerTarget::SetIsReached(const bool IsReached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventObjectiveTrackerTarget", "SetIsReached");

	Params::EventObjectiveTrackerTarget_SetIsReached Parms{};

	Parms.IsReached = IsReached;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.EventObjectiveTrackerTarget.SetRewardPreviewVisible
// (Event, Public, BlueprintEvent)
// Parameters:
// const bool                              IsVisible_0                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventObjectiveTrackerTarget::SetRewardPreviewVisible(const bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventObjectiveTrackerTarget", "SetRewardPreviewVisible");

	Params::EventObjectiveTrackerTarget_SetRewardPreviewVisible Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.EventObjectiveTrackerWidget.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FEventObjectiveTrackerViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FEventObjectiveTrackerSkinUIData&skinData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UEventObjectiveTrackerWidget::SetData(const struct FEventObjectiveTrackerViewData& ViewData, const struct FEventObjectiveTrackerSkinUIData& skinData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventObjectiveTrackerWidget", "SetData");

	Params::EventObjectiveTrackerWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);
	Parms.skinData = std::move(skinData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventObjectiveTrackerWidget.SetTargetPosition
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UEventObjectiveTrackerTarget*Target                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   relativePosition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventObjectiveTrackerWidget::SetTargetPosition(const class UEventObjectiveTrackerTarget* Target, float relativePosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventObjectiveTrackerWidget", "SetTargetPosition");

	Params::EventObjectiveTrackerWidget_SetTargetPosition Parms{};

	Parms.Target = Target;
	Parms.relativePosition = relativePosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventPointsWidget.Highlight
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHighlighted                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventPointsWidget::Highlight(bool IsHighlighted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventPointsWidget", "Highlight");

	Params::EventPointsWidget_Highlight Parms{};

	Parms.IsHighlighted = IsHighlighted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.EventPointsWidget.SetValue
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventPointsWidget::SetValue(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventPointsWidget", "SetValue");

	Params::EventPointsWidget_SetValue Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.FollowedQuestsTooltipWidget.OnAnalogInput
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FAnalogInputEvent&         analogEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFollowedQuestsTooltipWidget::OnAnalogInput(const struct FAnalogInputEvent& analogEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FollowedQuestsTooltipWidget", "OnAnalogInput");

	Params::FollowedQuestsTooltipWidget_OnAnalogInput Parms{};

	Parms.analogEvent = std::move(analogEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.FollowedQuestsTooltipWidget.OnMouseWheelInput
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FPointerEvent&             PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFollowedQuestsTooltipWidget::OnMouseWheelInput(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FollowedQuestsTooltipWidget", "OnMouseWheelInput");

	Params::FollowedQuestsTooltipWidget_OnMouseWheelInput Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.FollowedQuestsTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FFollowedQuestsTooltipViewData&TooltipData                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFollowedQuestsTooltipWidget::SetTooltipData(const struct FFollowedQuestsTooltipViewData& TooltipData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FollowedQuestsTooltipWidget", "SetTooltipData");

	Params::FollowedQuestsTooltipWidget_SetTooltipData Parms{};

	Parms.TooltipData = std::move(TooltipData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.GradeChangePopupWidget.SetData
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UGradeChangePopupViewData*  Data                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGradeChangePopupWidget::SetData(const class UGradeChangePopupViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GradeChangePopupWidget", "SetData");

	Params::GradeChangePopupWidget_SetData Parms{};

	Parms.Data = Data;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.HudEffectCardWidget.AddMatchPoint
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isSecondPoint                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    withAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudEffectCardWidget::AddMatchPoint(bool isSecondPoint, bool withAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEffectCardWidget", "AddMatchPoint");

	Params::HudEffectCardWidget_AddMatchPoint Parms{};

	Parms.isSecondPoint = isSecondPoint;
	Parms.withAnimation = withAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.HudEffectCardWidget.InitCards
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FEffectCardViewData&       currentCardViewData                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FEffectCardViewData&       nextCardViewData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHudEffectCardWidget::InitCards(const struct FEffectCardViewData& currentCardViewData, const struct FEffectCardViewData& nextCardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEffectCardWidget", "InitCards");

	Params::HudEffectCardWidget_InitCards Parms{};

	Parms.currentCardViewData = std::move(currentCardViewData);
	Parms.nextCardViewData = std::move(nextCardViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.HudEffectCardWidget.RotateCards
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              isFutureCardValid                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FEffectCardViewData&       futureCardViewData                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHudEffectCardWidget::RotateCards(const bool isFutureCardValid, const struct FEffectCardViewData& futureCardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEffectCardWidget", "RotateCards");

	Params::HudEffectCardWidget_RotateCards Parms{};

	Parms.isFutureCardValid = isFutureCardValid;
	Parms.futureCardViewData = std::move(futureCardViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.HudEffectCardWidget.UpdateEffectCardName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const class FText&                      cardName                                               (Parm, NativeAccessSpecifierPublic)

void UHudEffectCardWidget::UpdateEffectCardName(const class FText& cardName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEffectCardWidget", "UpdateEffectCardName");

	Params::HudEffectCardWidget_UpdateEffectCardName Parms{};

	Parms.cardName = std::move(cardName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LeaveMatchPopupWidget.SetData
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ULeaveMatchPopupViewData*   Data                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULeaveMatchPopupWidget::SetData(const class ULeaveMatchPopupViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LeaveMatchPopupWidget", "SetData");

	Params::LeaveMatchPopupWidget_SetData Parms{};

	Parms.Data = Data;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.LobbyPlayerListItemWidget.HideLoadoutPartTooltip
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                unhoveredSlotWidget                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbyPlayerListItemWidget::HideLoadoutPartTooltip(class UCoreButtonWidget* unhoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerListItemWidget", "HideLoadoutPartTooltip");

	Params::LobbyPlayerListItemWidget_HideLoadoutPartTooltip Parms{};

	Parms.unhoveredSlotWidget = unhoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbyPlayerListItemWidget.OnBindHoverBorder
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerListItemState                    State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isHoverEnabled                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbyPlayerListItemWidget::OnBindHoverBorder(EPlayerListItemState State, bool isHoverEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerListItemWidget", "OnBindHoverBorder");

	Params::LobbyPlayerListItemWidget_OnBindHoverBorder Parms{};

	Parms.State = State;
	Parms.isHoverEnabled = isHoverEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.LobbyPlayerListItemWidget.SetState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerListItemState                    State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbyPlayerListItemWidget::SetState(EPlayerListItemState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerListItemWidget", "SetState");

	Params::LobbyPlayerListItemWidget_SetState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbyPlayerListItemWidget.ShowLoadoutPartTooltip
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                hoveredSlotWidget                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbyPlayerListItemWidget::ShowLoadoutPartTooltip(class UCoreButtonWidget* hoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerListItemWidget", "ShowLoadoutPartTooltip");

	Params::LobbyPlayerListItemWidget_ShowLoadoutPartTooltip Parms{};

	Parms.hoveredSlotWidget = hoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbyPlayerListWidget.OnKillerClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbyPlayerListWidget::OnKillerClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerListWidget", "OnKillerClicked");

	Params::LobbyPlayerListWidget_OnKillerClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbyPlayerListWidget.OnPlayerSocialOptionClicked
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FPlayerSocialOptionViewData&playerSocialOptionData                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULobbyPlayerListWidget::OnPlayerSocialOptionClicked(const struct FPlayerSocialOptionViewData& playerSocialOptionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerListWidget", "OnPlayerSocialOptionClicked");

	Params::LobbyPlayerListWidget_OnPlayerSocialOptionClicked Parms{};

	Parms.playerSocialOptionData = std::move(playerSocialOptionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbyPlayerListWidget.OnSurvivorClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbyPlayerListWidget::OnSurvivorClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerListWidget", "OnSurvivorClicked");

	Params::LobbyPlayerListWidget_OnSurvivorClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.InitializeSidePanel
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLobbySidePanelViewData&   sidePanelViewData                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::InitializeSidePanel(const struct FLobbySidePanelViewData& sidePanelViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "InitializeSidePanel");

	Params::LobbySidePanelWidget_InitializeSidePanel Parms{};

	Parms.sidePanelViewData = std::move(sidePanelViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.OnBloodWebButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::OnBloodWebButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "OnBloodWebButtonClicked");

	Params::LobbySidePanelWidget_OnBloodWebButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.OnButtonSelectedAgain
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::OnButtonSelectedAgain(class UCoreSelectableButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "OnButtonSelectedAgain");

	Params::LobbySidePanelWidget_OnButtonSelectedAgain Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.OnChallengesButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::OnChallengesButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "OnChallengesButtonClicked");

	Params::LobbySidePanelWidget_OnChallengesButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.OnChallengesButtonHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::OnChallengesButtonHovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "OnChallengesButtonHovered");

	Params::LobbySidePanelWidget_OnChallengesButtonHovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.OnChallengesButtonUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::OnChallengesButtonUnhovered(class UCoreButtonWidget* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "OnChallengesButtonUnhovered");

	Params::LobbySidePanelWidget_OnChallengesButtonUnhovered Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.OnCharacterButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::OnCharacterButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "OnCharacterButtonClicked");

	Params::LobbySidePanelWidget_OnCharacterButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.OnEventButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::OnEventButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "OnEventButtonClicked");

	Params::LobbySidePanelWidget_OnEventButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.OnKillerRoleButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::OnKillerRoleButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "OnKillerRoleButtonClicked");

	Params::LobbySidePanelWidget_OnKillerRoleButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.OnLoadoutButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::OnLoadoutButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "OnLoadoutButtonClicked");

	Params::LobbySidePanelWidget_OnLoadoutButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.OnShrineButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::OnShrineButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "OnShrineButtonClicked");

	Params::LobbySidePanelWidget_OnShrineButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.OnSpectatorRoleButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::OnSpectatorRoleButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "OnSpectatorRoleButtonClicked");

	Params::LobbySidePanelWidget_OnSpectatorRoleButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.OnStoreButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::OnStoreButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "OnStoreButtonClicked");

	Params::LobbySidePanelWidget_OnStoreButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.OnSurvivorRoleButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::OnSurvivorRoleButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "OnSurvivorRoleButtonClicked");

	Params::LobbySidePanelWidget_OnSurvivorRoleButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.OnTabButtonSelectedChanged
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      targetButton                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::OnTabButtonSelectedChanged(class UCoreSelectableButtonWidget* targetButton, bool IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "OnTabButtonSelectedChanged");

	Params::LobbySidePanelWidget_OnTabButtonSelectedChanged Parms{};

	Parms.targetButton = targetButton;
	Parms.IsSelected = IsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LobbySidePanelWidget.SetRoleButtonVisibility
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    IsVisible_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::SetRoleButtonVisibility(bool IsVisible_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "SetRoleButtonVisibility");

	Params::LobbySidePanelWidget_SetRoleButtonVisibility Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.LobbySidePanelWidget.SetUiTakeoverVisuals
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULobbySidePanelWidget::SetUiTakeoverVisuals(bool IsActive) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbySidePanelWidget", "SetUiTakeoverVisuals");

	Params::LobbySidePanelWidget_SetUiTakeoverVisuals Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.LockedFeatureTooltipWidget.SetTooltipData
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FLockedFeatureTooltipViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULockedFeatureTooltipWidget::SetTooltipData(const struct FLockedFeatureTooltipViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LockedFeatureTooltipWidget", "SetTooltipData");

	Params::LockedFeatureTooltipWidget_SetTooltipData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MapShowcaseTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FMapShowcaseTooltipViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMapShowcaseTooltipWidget::SetTooltipData(const struct FMapShowcaseTooltipViewData& tooltipViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapShowcaseTooltipWidget", "SetTooltipData");

	Params::MapShowcaseTooltipWidget_SetTooltipData Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerTierItem.OnBackgroundImageLoadingCompleted
// (Final, Native, Public)

void UMilestoneTrackerTierItem::OnBackgroundImageLoadingCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerTierItem", "OnBackgroundImageLoadingCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerTierItem.OnBackgroundImageLoadingStarted
// (Final, Native, Public)

void UMilestoneTrackerTierItem::OnBackgroundImageLoadingStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerTierItem", "OnBackgroundImageLoadingStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerTierItem.PlayUnlockanimation
// (Event, Public, BlueprintEvent)

void UMilestoneTrackerTierItem::PlayUnlockanimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerTierItem", "PlayUnlockanimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.MilestoneTrackerTierItem.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMilestoneTrackerItemViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMilestoneTrackerTierItem::SetData(const struct FMilestoneTrackerItemViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerTierItem", "SetData");

	Params::MilestoneTrackerTierItem_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerTierItem.SetVisualState
// (Event, Public, BlueprintEvent)
// Parameters:
// const EMilestoneTrackerItemState        State                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMilestoneTrackerTierItem::SetVisualState(const EMilestoneTrackerItemState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerTierItem", "SetVisualState");

	Params::MilestoneTrackerTierItem_SetVisualState Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.MilestoneTrackerTierItem.UpdateBackground
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TSoftObjectPtr<class UMaterialInstance>Background                                             (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMilestoneTrackerTierItem::UpdateBackground(const TSoftObjectPtr<class UMaterialInstance> Background)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerTierItem", "UpdateBackground");

	Params::MilestoneTrackerTierItem_UpdateBackground Parms{};

	Parms.Background = Background;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerTierItem.Clear
// (Final, Native, Public, BlueprintCallable, Const)

void UMilestoneTrackerTierItem::Clear() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerTierItem", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerWidget.DeselectMilestoneRewards
// (Final, Native, Public, BlueprintCallable)

void UMilestoneTrackerWidget::DeselectMilestoneRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerWidget", "DeselectMilestoneRewards");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerWidget.OnRewardItemClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMilestoneTrackerWidget::OnRewardItemClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerWidget", "OnRewardItemClicked");

	Params::MilestoneTrackerWidget_OnRewardItemClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerWidget.PlayMilestoneTrackerItemUnlockAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMilestoneTrackerWidget::PlayMilestoneTrackerItemUnlockAnimation(const int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerWidget", "PlayMilestoneTrackerItemUnlockAnimation");

	Params::MilestoneTrackerWidget_PlayMilestoneTrackerItemUnlockAnimation Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerWidget.SelectMilestoneTrackerItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ItemId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMilestoneTrackerWidget::SelectMilestoneTrackerItem(class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerWidget", "SelectMilestoneTrackerItem");

	Params::MilestoneTrackerWidget_SelectMilestoneTrackerItem Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMilestoneTrackerViewData& ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMilestoneTrackerWidget::SetData(const struct FMilestoneTrackerViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerWidget", "SetData");

	Params::MilestoneTrackerWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.MilestoneTrackerWidget.SetVisuals
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMilestoneTrackerEventBasedSkinViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMilestoneTrackerWidget::SetVisuals(const struct FMilestoneTrackerEventBasedSkinViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MilestoneTrackerWidget", "SetVisuals");

	Params::MilestoneTrackerWidget_SetVisuals Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.FinishCloseAnimation
// (Final, Native, Protected, BlueprintCallable)

void UModalWidget::FinishCloseAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "FinishCloseAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.FinishOpenAnimation
// (Final, Native, Protected, BlueprintCallable)

void UModalWidget::FinishOpenAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "FinishOpenAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.OnHoveredInternal
// (Final, Native, Protected)

void UModalWidget::OnHoveredInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "OnHoveredInternal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.OnKeyDownAnywhere
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FKeyEvent&                 Event                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UModalWidget::OnKeyDownAnywhere(const struct FKeyEvent& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "OnKeyDownAnywhere");

	Params::ModalWidget_OnKeyDownAnywhere Parms{};

	Parms.Event = std::move(Event);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.OnKeyUpAnywhere
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FKeyEvent&                 Event                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UModalWidget::OnKeyUpAnywhere(const struct FKeyEvent& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "OnKeyUpAnywhere");

	Params::ModalWidget_OnKeyUpAnywhere Parms{};

	Parms.Event = std::move(Event);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.OnMouseDownAnywhere
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FPointerEvent&             PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UModalWidget::OnMouseDownAnywhere(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "OnMouseDownAnywhere");

	Params::ModalWidget_OnMouseDownAnywhere Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.OnMouseUpAnywhere
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FPointerEvent&             PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UModalWidget::OnMouseUpAnywhere(const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "OnMouseUpAnywhere");

	Params::ModalWidget_OnMouseUpAnywhere Parms{};

	Parms.PointerEvent = std::move(PointerEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.OnUnhoveredInternal
// (Final, Native, Protected)

void UModalWidget::OnUnhoveredInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "OnUnhoveredInternal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.StartCloseAnimation
// (Native, Event, Protected, BlueprintEvent)

void UModalWidget::StartCloseAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "StartCloseAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.StartOpenAnimation
// (Native, Event, Protected, BlueprintEvent)

void UModalWidget::StartOpenAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "StartOpenAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ModalWidget.StopCloseAnimation
// (Event, Protected, BlueprintEvent)

void UModalWidget::StopCloseAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "StopCloseAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.ModalWidget.StopOpenAnimation
// (Event, Protected, BlueprintEvent)

void UModalWidget::StopOpenAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModalWidget", "StopOpenAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.NewRiftPopupWidget.OnQuestButtonClicked
// (Final, Native, Private, BlueprintCallable)

void UNewRiftPopupWidget::OnQuestButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NewRiftPopupWidget", "OnQuestButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.NewRiftPopupWidget.OnReplayButtonClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                CoreButtonWidget                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNewRiftPopupWidget::OnReplayButtonClicked(class UCoreButtonWidget* CoreButtonWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NewRiftPopupWidget", "OnReplayButtonClicked");

	Params::NewRiftPopupWidget_OnReplayButtonClicked Parms{};

	Parms.CoreButtonWidget = CoreButtonWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.NewRiftPopupWidget.OnRiftButtonClicked
// (Final, Native, Private, BlueprintCallable)

void UNewRiftPopupWidget::OnRiftButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NewRiftPopupWidget", "OnRiftButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.NotEnoughCurrencyModalWidget.OnButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                clickedButton                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNotEnoughCurrencyModalWidget::OnButtonClicked(class UCoreButtonWidget* clickedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotEnoughCurrencyModalWidget", "OnButtonClicked");

	Params::NotEnoughCurrencyModalWidget_OnButtonClicked Parms{};

	Parms.clickedButton = clickedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.NotEnoughCurrencyModalWidget.OnHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                hoveredButton                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNotEnoughCurrencyModalWidget::OnHovered(class UCoreButtonWidget* hoveredButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotEnoughCurrencyModalWidget", "OnHovered");

	Params::NotEnoughCurrencyModalWidget_OnHovered Parms{};

	Parms.hoveredButton = hoveredButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.NotEnoughCurrencyModalWidget.OnUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                unhoveredButton                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNotEnoughCurrencyModalWidget::OnUnhovered(class UCoreButtonWidget* unhoveredButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotEnoughCurrencyModalWidget", "OnUnhovered");

	Params::NotEnoughCurrencyModalWidget_OnUnhovered Parms{};

	Parms.unhoveredButton = unhoveredButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.NotEnoughCurrencyModalWidget.SetTooltipData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNotEnoughCurrencyModalViewData&Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UNotEnoughCurrencyModalWidget::SetTooltipData(const struct FNotEnoughCurrencyModalViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotEnoughCurrencyModalWidget", "SetTooltipData");

	Params::NotEnoughCurrencyModalWidget_SetTooltipData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ObjectiveRewardLabelWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FObjectiveRewardLabelViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UObjectiveRewardLabelWidget::SetData(const struct FObjectiveRewardLabelViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectiveRewardLabelWidget", "SetData");

	Params::ObjectiveRewardLabelWidget_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ObjectiveTrackerTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FEventObjectiveTrackerViewData&ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UObjectiveTrackerTooltipWidget::SetTooltipData(const struct FEventObjectiveTrackerViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectiveTrackerTooltipWidget", "SetTooltipData");

	Params::ObjectiveTrackerTooltipWidget_SetTooltipData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ProfileMenuCustomizationWidget.OnCustomizationGridItemClicked
// (Final, Native, Protected)
// Parameters:
// const int32                             selectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProfileMenuCustomizationWidget::OnCustomizationGridItemClicked(const int32 selectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuCustomizationWidget", "OnCustomizationGridItemClicked");

	Params::ProfileMenuCustomizationWidget_OnCustomizationGridItemClicked Parms{};

	Parms.selectedIndex = selectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ProfileMenuCustomizationWidget.OnEquipButtonClicked
// (Final, Native, Protected)

void UProfileMenuCustomizationWidget::OnEquipButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuCustomizationWidget", "OnEquipButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ProfileMenuPlayerRankWrapper.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRankViewData&             Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UProfileMenuPlayerRankWrapper::SetData(const struct FRankViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuPlayerRankWrapper", "SetData");

	Params::ProfileMenuPlayerRankWrapper_SetData Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ReportFeedbackInfoWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FReportFeedbackData&       ReportData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UReportFeedbackInfoWidget::SetData(const struct FReportFeedbackData& ReportData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReportFeedbackInfoWidget", "SetData");

	Params::ReportFeedbackInfoWidget_SetData Parms{};

	Parms.ReportData = std::move(ReportData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.RichTextBlockScalableImageDecorator.ResetTintColor
// (Final, Native, Public, BlueprintCallable)

void URichTextBlockScalableImageDecorator::ResetTintColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RichTextBlockScalableImageDecorator", "ResetTintColor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.RichTextBlockScalableImageDecorator.SetTintColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FSlateColor&               TintColor_0                                            (Parm, NativeAccessSpecifierPublic)

void URichTextBlockScalableImageDecorator::SetTintColor(const struct FSlateColor& TintColor_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RichTextBlockScalableImageDecorator", "SetTintColor");

	Params::RichTextBlockScalableImageDecorator_SetTintColor Parms{};

	Parms.TintColor_0 = std::move(TintColor_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.SecurityCameraOverlayWidget.GetLocalizedDisabledLabel
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText USecurityCameraOverlayWidget::GetLocalizedDisabledLabel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SecurityCameraOverlayWidget", "GetLocalizedDisabledLabel");

	Params::SecurityCameraOverlayWidget_GetLocalizedDisabledLabel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.SecurityCameraOverlayWidget.GetLocalizedUsedLabel
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText USecurityCameraOverlayWidget::GetLocalizedUsedLabel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SecurityCameraOverlayWidget", "GetLocalizedUsedLabel");

	Params::SecurityCameraOverlayWidget_GetLocalizedUsedLabel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.SecurityCameraOverlayWidget.GetLocalizedYouLabel
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText USecurityCameraOverlayWidget::GetLocalizedYouLabel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SecurityCameraOverlayWidget", "GetLocalizedYouLabel");

	Params::SecurityCameraOverlayWidget_GetLocalizedYouLabel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.SecurityCameraOverlayWidget.GetBatteryPercent
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USecurityCameraOverlayWidget::GetBatteryPercent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SecurityCameraOverlayWidget", "GetBatteryPercent");

	Params::SecurityCameraOverlayWidget_GetBatteryPercent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.SecurityCameraOverlayWidget.GetPreviousState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESecurityCameraState                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESecurityCameraState USecurityCameraOverlayWidget::GetPreviousState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SecurityCameraOverlayWidget", "GetPreviousState");

	Params::SecurityCameraOverlayWidget_GetPreviousState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.SecurityCameraOverlayWidget.GetState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESecurityCameraState                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESecurityCameraState USecurityCameraOverlayWidget::GetState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SecurityCameraOverlayWidget", "GetState");

	Params::SecurityCameraOverlayWidget_GetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.SettingsWidget.OnBackInputSwitcherTriggered
// (Final, Native, Protected)

void USettingsWidget::OnBackInputSwitcherTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsWidget", "OnBackInputSwitcherTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.SettingsWidget.OnQuitInputSwitcherTriggered
// (Final, Native, Protected)

void USettingsWidget::OnQuitInputSwitcherTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsWidget", "OnQuitInputSwitcherTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.SettingsWidget.OnResetDefaultsInputSwitcherTriggered
// (Final, Native, Protected)

void USettingsWidget::OnResetDefaultsInputSwitcherTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsWidget", "OnResetDefaultsInputSwitcherTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.TestWidget.SetShowWorkbench
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    showWorkbench_0                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTestWidget::SetShowWorkbench(bool showWorkbench_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestWidget", "SetShowWorkbench");

	Params::TestWidget_SetShowWorkbench Parms{};

	Parms.showWorkbench_0 = showWorkbench_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.Disable
// (Final, Native, Public, BlueprintCallable)

void UToggleableWidgetPromptController::Disable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "Disable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.OnControlModeChanged
// (Final, Native, Private)
// Parameters:
// EControlMode                            controlMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UToggleableWidgetPromptController::OnControlModeChanged(EControlMode controlMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "OnControlModeChanged");

	Params::ToggleableWidgetPromptController_OnControlModeChanged Parms{};

	Parms.controlMode = controlMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.OnScrollableStateChanged
// (Final, Native, Private)
// Parameters:
// const bool                              IsScrollable                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UToggleableWidgetPromptController::OnScrollableStateChanged(const bool IsScrollable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "OnScrollableStateChanged");

	Params::ToggleableWidgetPromptController_OnScrollableStateChanged Parms{};

	Parms.IsScrollable = IsScrollable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.Reenable
// (Final, Native, Public, BlueprintCallable)

void UToggleableWidgetPromptController::Reenable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "Reenable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.Reset
// (Final, Native, Public, BlueprintCallable)

void UToggleableWidgetPromptController::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetRotatePrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*rotatePrompt                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UToggleableWidgetPromptController::SetRotatePrompt(class UCoreKeyListenerInputPromptWidget* rotatePrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "SetRotatePrompt");

	Params::ToggleableWidgetPromptController_SetRotatePrompt Parms{};

	Parms.rotatePrompt = rotatePrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetRotatePromptText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      rotatePromptText                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UToggleableWidgetPromptController::SetRotatePromptText(const class FText& rotatePromptText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "SetRotatePromptText");

	Params::ToggleableWidgetPromptController_SetRotatePromptText Parms{};

	Parms.rotatePromptText = std::move(rotatePromptText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetScrollPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*ScrollPrompt                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UToggleableWidgetPromptController::SetScrollPrompt(class UCoreKeyListenerInputPromptWidget* ScrollPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "SetScrollPrompt");

	Params::ToggleableWidgetPromptController_SetScrollPrompt Parms{};

	Parms.ScrollPrompt = ScrollPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetScrollPromptText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      scrollPromptText                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UToggleableWidgetPromptController::SetScrollPromptText(const class FText& scrollPromptText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "SetScrollPromptText");

	Params::ToggleableWidgetPromptController_SetScrollPromptText Parms{};

	Parms.scrollPromptText = std::move(scrollPromptText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetTogglePrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*togglePrompt                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UToggleableWidgetPromptController::SetTogglePrompt(class UCoreKeyListenerInputPromptWidget* togglePrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "SetTogglePrompt");

	Params::ToggleableWidgetPromptController_SetTogglePrompt Parms{};

	Parms.togglePrompt = togglePrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetTogglePromptText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      togglePromptText                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UToggleableWidgetPromptController::SetTogglePromptText(const class FText& togglePromptText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "SetTogglePromptText");

	Params::ToggleableWidgetPromptController_SetTogglePromptText Parms{};

	Parms.togglePromptText = std::move(togglePromptText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetupScrollableWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDBDScrollBox*                    ScrollBox                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreKeyListenerInputPromptWidget*ScrollPrompt                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UToggleableWidgetPromptController::SetupScrollableWidget(class UDBDScrollBox* ScrollBox, class UCoreKeyListenerInputPromptWidget* ScrollPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "SetupScrollableWidget");

	Params::ToggleableWidgetPromptController_SetupScrollableWidget Parms{};

	Parms.ScrollBox = ScrollBox;
	Parms.ScrollPrompt = ScrollPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetupToggleableWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDBDScrollBox*                    ScrollBox                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreDisplayStandWidget*          DisplayStand                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreKeyListenerInputPromptWidget*togglePrompt                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreKeyListenerInputPromptWidget*ScrollPrompt                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreKeyListenerInputPromptWidget*rotatePrompt                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERightStickMode                         overrideMode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UToggleableWidgetPromptController::SetupToggleableWidget(class UDBDScrollBox* ScrollBox, class UCoreDisplayStandWidget* DisplayStand, class UCoreKeyListenerInputPromptWidget* togglePrompt, class UCoreKeyListenerInputPromptWidget* ScrollPrompt, class UCoreKeyListenerInputPromptWidget* rotatePrompt, ERightStickMode overrideMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "SetupToggleableWidget");

	Params::ToggleableWidgetPromptController_SetupToggleableWidget Parms{};

	Parms.ScrollBox = ScrollBox;
	Parms.DisplayStand = DisplayStand;
	Parms.togglePrompt = togglePrompt;
	Parms.ScrollPrompt = ScrollPrompt;
	Parms.rotatePrompt = rotatePrompt;
	Parms.overrideMode = overrideMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.UpdateAllPrompts
// (Final, Native, Public, BlueprintCallable)

void UToggleableWidgetPromptController::UpdateAllPrompts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "UpdateAllPrompts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.UpdateInteractiveWidgetBehaviours
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERightStickMode                         overrideMode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UToggleableWidgetPromptController::UpdateInteractiveWidgetBehaviours(ERightStickMode overrideMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "UpdateInteractiveWidgetBehaviours");

	Params::ToggleableWidgetPromptController_UpdateInteractiveWidgetBehaviours Parms{};

	Parms.overrideMode = overrideMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ToggleableWidgetPromptController.GetRightStickMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERightStickMode                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ERightStickMode UToggleableWidgetPromptController::GetRightStickMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleableWidgetPromptController", "GetRightStickMode");

	Params::ToggleableWidgetPromptController_GetRightStickMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

