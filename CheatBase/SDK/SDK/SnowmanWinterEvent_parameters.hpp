#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SnowmanWinterEvent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Projectile_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "SnowmanWinterEvent_structs.hpp"


namespace SDK::Params
{

// Function SnowmanWinterEvent.HideInSnowmanInteraction.Multicast_StartControllingSnowman
// 0x0008 (0x0008 - 0x0000)
struct HideInSnowmanInteraction_Multicast_StartControllingSnowman final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HideInSnowmanInteraction_Multicast_StartControllingSnowman) == 0x000008, "Wrong alignment on HideInSnowmanInteraction_Multicast_StartControllingSnowman");
static_assert(sizeof(HideInSnowmanInteraction_Multicast_StartControllingSnowman) == 0x000008, "Wrong size on HideInSnowmanInteraction_Multicast_StartControllingSnowman");
static_assert(offsetof(HideInSnowmanInteraction_Multicast_StartControllingSnowman, Player) == 0x000000, "Member 'HideInSnowmanInteraction_Multicast_StartControllingSnowman::Player' has a wrong offset!");

// Function SnowmanWinterEvent.HideInSnowmanInteraction.Multicast_StopControllingSnowman
// 0x0008 (0x0008 - 0x0000)
struct HideInSnowmanInteraction_Multicast_StopControllingSnowman final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HideInSnowmanInteraction_Multicast_StopControllingSnowman) == 0x000008, "Wrong alignment on HideInSnowmanInteraction_Multicast_StopControllingSnowman");
static_assert(sizeof(HideInSnowmanInteraction_Multicast_StopControllingSnowman) == 0x000008, "Wrong size on HideInSnowmanInteraction_Multicast_StopControllingSnowman");
static_assert(offsetof(HideInSnowmanInteraction_Multicast_StopControllingSnowman, Player) == 0x000000, "Member 'HideInSnowmanInteraction_Multicast_StopControllingSnowman::Player' has a wrong offset!");

// Function SnowmanWinterEvent.SnowballProjectile.Cosmetic_OnCollisionHit
// 0x0050 (0x0050 - 0x0000)
struct SnowballProjectile_Cosmetic_OnCollisionHit final
{
public:
	class AActor*                                 hitActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FImpactInfo                            ImpactInfo;                                        // 0x0008(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballProjectile_Cosmetic_OnCollisionHit) == 0x000008, "Wrong alignment on SnowballProjectile_Cosmetic_OnCollisionHit");
static_assert(sizeof(SnowballProjectile_Cosmetic_OnCollisionHit) == 0x000050, "Wrong size on SnowballProjectile_Cosmetic_OnCollisionHit");
static_assert(offsetof(SnowballProjectile_Cosmetic_OnCollisionHit, hitActor) == 0x000000, "Member 'SnowballProjectile_Cosmetic_OnCollisionHit::hitActor' has a wrong offset!");
static_assert(offsetof(SnowballProjectile_Cosmetic_OnCollisionHit, ImpactInfo) == 0x000008, "Member 'SnowballProjectile_Cosmetic_OnCollisionHit::ImpactInfo' has a wrong offset!");

// Function SnowmanWinterEvent.SnowballProjectile.Cosmetic_OnPlayerHit
// 0x0050 (0x0050 - 0x0000)
struct SnowballProjectile_Cosmetic_OnPlayerHit final
{
public:
	class ADBDPlayer*                             hitPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FImpactInfo                            ImpactInfo;                                        // 0x0008(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballProjectile_Cosmetic_OnPlayerHit) == 0x000008, "Wrong alignment on SnowballProjectile_Cosmetic_OnPlayerHit");
static_assert(sizeof(SnowballProjectile_Cosmetic_OnPlayerHit) == 0x000050, "Wrong size on SnowballProjectile_Cosmetic_OnPlayerHit");
static_assert(offsetof(SnowballProjectile_Cosmetic_OnPlayerHit, hitPlayer) == 0x000000, "Member 'SnowballProjectile_Cosmetic_OnPlayerHit::hitPlayer' has a wrong offset!");
static_assert(offsetof(SnowballProjectile_Cosmetic_OnPlayerHit, ImpactInfo) == 0x000008, "Member 'SnowballProjectile_Cosmetic_OnPlayerHit::ImpactInfo' has a wrong offset!");

// Function SnowmanWinterEvent.SnowballProjectile.Cosmetic_OnSnowballThrown
// 0x0020 (0x0020 - 0x0000)
struct SnowballProjectile_Cosmetic_OnSnowballThrown final
{
public:
	struct FVector                                launchDirection;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         launchSpeed;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnowballProjectile_Cosmetic_OnSnowballThrown) == 0x000008, "Wrong alignment on SnowballProjectile_Cosmetic_OnSnowballThrown");
static_assert(sizeof(SnowballProjectile_Cosmetic_OnSnowballThrown) == 0x000020, "Wrong size on SnowballProjectile_Cosmetic_OnSnowballThrown");
static_assert(offsetof(SnowballProjectile_Cosmetic_OnSnowballThrown, launchDirection) == 0x000000, "Member 'SnowballProjectile_Cosmetic_OnSnowballThrown::launchDirection' has a wrong offset!");
static_assert(offsetof(SnowballProjectile_Cosmetic_OnSnowballThrown, launchSpeed) == 0x000018, "Member 'SnowballProjectile_Cosmetic_OnSnowballThrown::launchSpeed' has a wrong offset!");

// Function SnowmanWinterEvent.SnowballProjectile.OnCollisionComponentHit
// 0x0120 (0x0120 - 0x0000)
struct SnowballProjectile_OnCollisionComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0030(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballProjectile_OnCollisionComponentHit) == 0x000008, "Wrong alignment on SnowballProjectile_OnCollisionComponentHit");
static_assert(sizeof(SnowballProjectile_OnCollisionComponentHit) == 0x000120, "Wrong size on SnowballProjectile_OnCollisionComponentHit");
static_assert(offsetof(SnowballProjectile_OnCollisionComponentHit, HitComponent) == 0x000000, "Member 'SnowballProjectile_OnCollisionComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(SnowballProjectile_OnCollisionComponentHit, OtherActor) == 0x000008, "Member 'SnowballProjectile_OnCollisionComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(SnowballProjectile_OnCollisionComponentHit, OtherComponent) == 0x000010, "Member 'SnowballProjectile_OnCollisionComponentHit::OtherComponent' has a wrong offset!");
static_assert(offsetof(SnowballProjectile_OnCollisionComponentHit, NormalImpulse) == 0x000018, "Member 'SnowballProjectile_OnCollisionComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SnowballProjectile_OnCollisionComponentHit, HitResult) == 0x000030, "Member 'SnowballProjectile_OnCollisionComponentHit::HitResult' has a wrong offset!");

// Function SnowmanWinterEvent.SnowballProjectile.OnPlayerDetectorHit
// 0x00F8 (0x00F8 - 0x0000)
struct SnowballProjectile_OnPlayerDetectorHit final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballProjectile_OnPlayerDetectorHit) == 0x000008, "Wrong alignment on SnowballProjectile_OnPlayerDetectorHit");
static_assert(sizeof(SnowballProjectile_OnPlayerDetectorHit) == 0x0000F8, "Wrong size on SnowballProjectile_OnPlayerDetectorHit");
static_assert(offsetof(SnowballProjectile_OnPlayerDetectorHit, PrimitiveComponent) == 0x000000, "Member 'SnowballProjectile_OnPlayerDetectorHit::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(SnowballProjectile_OnPlayerDetectorHit, HitResult) == 0x000008, "Member 'SnowballProjectile_OnPlayerDetectorHit::HitResult' has a wrong offset!");

// Function SnowmanWinterEvent.SnowmanBase.Cosmetic_SetSnowmanMaterialVariant
// 0x0004 (0x0004 - 0x0000)
struct SnowmanBase_Cosmetic_SetSnowmanMaterialVariant final
{
public:
	int32                                         materialVariantIndex;                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowmanBase_Cosmetic_SetSnowmanMaterialVariant) == 0x000004, "Wrong alignment on SnowmanBase_Cosmetic_SetSnowmanMaterialVariant");
static_assert(sizeof(SnowmanBase_Cosmetic_SetSnowmanMaterialVariant) == 0x000004, "Wrong size on SnowmanBase_Cosmetic_SetSnowmanMaterialVariant");
static_assert(offsetof(SnowmanBase_Cosmetic_SetSnowmanMaterialVariant, materialVariantIndex) == 0x000000, "Member 'SnowmanBase_Cosmetic_SetSnowmanMaterialVariant::materialVariantIndex' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Authority_OnSnowmanHandOverlapBegin
// 0x0110 (0x0110 - 0x0000)
struct Snowman_Authority_OnSnowmanHandOverlapBegin final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Authority_OnSnowmanHandOverlapBegin) == 0x000008, "Wrong alignment on Snowman_Authority_OnSnowmanHandOverlapBegin");
static_assert(sizeof(Snowman_Authority_OnSnowmanHandOverlapBegin) == 0x000110, "Wrong size on Snowman_Authority_OnSnowmanHandOverlapBegin");
static_assert(offsetof(Snowman_Authority_OnSnowmanHandOverlapBegin, HitComponent) == 0x000000, "Member 'Snowman_Authority_OnSnowmanHandOverlapBegin::HitComponent' has a wrong offset!");
static_assert(offsetof(Snowman_Authority_OnSnowmanHandOverlapBegin, OtherActor) == 0x000008, "Member 'Snowman_Authority_OnSnowmanHandOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(Snowman_Authority_OnSnowmanHandOverlapBegin, OtherComp) == 0x000010, "Member 'Snowman_Authority_OnSnowmanHandOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(Snowman_Authority_OnSnowmanHandOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'Snowman_Authority_OnSnowmanHandOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Snowman_Authority_OnSnowmanHandOverlapBegin, bFromSweep) == 0x00001C, "Member 'Snowman_Authority_OnSnowmanHandOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(Snowman_Authority_OnSnowmanHandOverlapBegin, SweepResult) == 0x000020, "Member 'Snowman_Authority_OnSnowmanHandOverlapBegin::SweepResult' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Authority_OnSnowmanHandOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct Snowman_Authority_OnSnowmanHandOverlapEnd final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Snowman_Authority_OnSnowmanHandOverlapEnd) == 0x000008, "Wrong alignment on Snowman_Authority_OnSnowmanHandOverlapEnd");
static_assert(sizeof(Snowman_Authority_OnSnowmanHandOverlapEnd) == 0x000020, "Wrong size on Snowman_Authority_OnSnowmanHandOverlapEnd");
static_assert(offsetof(Snowman_Authority_OnSnowmanHandOverlapEnd, HitComponent) == 0x000000, "Member 'Snowman_Authority_OnSnowmanHandOverlapEnd::HitComponent' has a wrong offset!");
static_assert(offsetof(Snowman_Authority_OnSnowmanHandOverlapEnd, OtherActor) == 0x000008, "Member 'Snowman_Authority_OnSnowmanHandOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(Snowman_Authority_OnSnowmanHandOverlapEnd, OtherComp) == 0x000010, "Member 'Snowman_Authority_OnSnowmanHandOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(Snowman_Authority_OnSnowmanHandOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'Snowman_Authority_OnSnowmanHandOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Cosmetic_OnAdditionalActorHidden
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Cosmetic_OnAdditionalActorHidden final
{
public:
	class AActor*                                 actorToHide;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Cosmetic_OnAdditionalActorHidden) == 0x000008, "Wrong alignment on Snowman_Cosmetic_OnAdditionalActorHidden");
static_assert(sizeof(Snowman_Cosmetic_OnAdditionalActorHidden) == 0x000008, "Wrong size on Snowman_Cosmetic_OnAdditionalActorHidden");
static_assert(offsetof(Snowman_Cosmetic_OnAdditionalActorHidden, actorToHide) == 0x000000, "Member 'Snowman_Cosmetic_OnAdditionalActorHidden::actorToHide' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForKiller
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForKiller final
{
public:
	class AKiller*                                killerAttackingSnowman;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForKiller) == 0x000008, "Wrong alignment on Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForKiller");
static_assert(sizeof(Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForKiller) == 0x000008, "Wrong size on Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForKiller");
static_assert(offsetof(Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForKiller, killerAttackingSnowman) == 0x000000, "Member 'Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForKiller::killerAttackingSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForSurvivor
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForSurvivor final
{
public:
	class ASurvivor*                              survivorUsingSnowman;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForSurvivor) == 0x000008, "Wrong alignment on Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForSurvivor");
static_assert(sizeof(Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForSurvivor) == 0x000008, "Wrong size on Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForSurvivor");
static_assert(offsetof(Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForSurvivor, survivorUsingSnowman) == 0x000000, "Member 'Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForSurvivor::survivorUsingSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Cosmetic_OnKillerFinishTransitionOutOfSnowman
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Cosmetic_OnKillerFinishTransitionOutOfSnowman final
{
public:
	const class AKiller*                          Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Cosmetic_OnKillerFinishTransitionOutOfSnowman) == 0x000008, "Wrong alignment on Snowman_Cosmetic_OnKillerFinishTransitionOutOfSnowman");
static_assert(sizeof(Snowman_Cosmetic_OnKillerFinishTransitionOutOfSnowman) == 0x000008, "Wrong size on Snowman_Cosmetic_OnKillerFinishTransitionOutOfSnowman");
static_assert(offsetof(Snowman_Cosmetic_OnKillerFinishTransitionOutOfSnowman, Killer) == 0x000000, "Member 'Snowman_Cosmetic_OnKillerFinishTransitionOutOfSnowman::Killer' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanDestroyedByAttackWhileControlled
// 0x0010 (0x0010 - 0x0000)
struct Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileControlled final
{
public:
	class ASurvivor*                              survivorUsingSnowman;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AKiller*                                killerAttackingSnowman;                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileControlled) == 0x000008, "Wrong alignment on Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileControlled");
static_assert(sizeof(Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileControlled) == 0x000010, "Wrong size on Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileControlled");
static_assert(offsetof(Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileControlled, survivorUsingSnowman) == 0x000000, "Member 'Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileControlled::survivorUsingSnowman' has a wrong offset!");
static_assert(offsetof(Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileControlled, killerAttackingSnowman) == 0x000008, "Member 'Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileControlled::killerAttackingSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanDestroyedByAttackWhileEmpty
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileEmpty final
{
public:
	class AKiller*                                killerAttackingSnowman;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileEmpty) == 0x000008, "Wrong alignment on Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileEmpty");
static_assert(sizeof(Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileEmpty) == 0x000008, "Wrong size on Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileEmpty");
static_assert(offsetof(Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileEmpty, killerAttackingSnowman) == 0x000000, "Member 'Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileEmpty::killerAttackingSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanDestroyedByKillerAttackExit
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Cosmetic_OnSnowmanDestroyedByKillerAttackExit final
{
public:
	class AKiller*                                killerUsingSnowman;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Cosmetic_OnSnowmanDestroyedByKillerAttackExit) == 0x000008, "Wrong alignment on Snowman_Cosmetic_OnSnowmanDestroyedByKillerAttackExit");
static_assert(sizeof(Snowman_Cosmetic_OnSnowmanDestroyedByKillerAttackExit) == 0x000008, "Wrong size on Snowman_Cosmetic_OnSnowmanDestroyedByKillerAttackExit");
static_assert(offsetof(Snowman_Cosmetic_OnSnowmanDestroyedByKillerAttackExit, killerUsingSnowman) == 0x000000, "Member 'Snowman_Cosmetic_OnSnowmanDestroyedByKillerAttackExit::killerUsingSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileControlled
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileControlled final
{
public:
	class ADBDPlayer*                             playerUsingThisSnowman;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileControlled) == 0x000008, "Wrong alignment on Snowman_Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileControlled");
static_assert(sizeof(Snowman_Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileControlled) == 0x000008, "Wrong size on Snowman_Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileControlled");
static_assert(offsetof(Snowman_Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileControlled, playerUsingThisSnowman) == 0x000000, "Member 'Snowman_Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileControlled::playerUsingThisSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanDestroyedBySurvivorRunExit
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Cosmetic_OnSnowmanDestroyedBySurvivorRunExit final
{
public:
	class ASurvivor*                              survivorUsingSnowman;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Cosmetic_OnSnowmanDestroyedBySurvivorRunExit) == 0x000008, "Wrong alignment on Snowman_Cosmetic_OnSnowmanDestroyedBySurvivorRunExit");
static_assert(sizeof(Snowman_Cosmetic_OnSnowmanDestroyedBySurvivorRunExit) == 0x000008, "Wrong size on Snowman_Cosmetic_OnSnowmanDestroyedBySurvivorRunExit");
static_assert(offsetof(Snowman_Cosmetic_OnSnowmanDestroyedBySurvivorRunExit, survivorUsingSnowman) == 0x000000, "Member 'Snowman_Cosmetic_OnSnowmanDestroyedBySurvivorRunExit::survivorUsingSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanHighFive
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Cosmetic_OnSnowmanHighFive final
{
public:
	class ASnowman*                               otherSnowman;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Cosmetic_OnSnowmanHighFive) == 0x000008, "Wrong alignment on Snowman_Cosmetic_OnSnowmanHighFive");
static_assert(sizeof(Snowman_Cosmetic_OnSnowmanHighFive) == 0x000008, "Wrong size on Snowman_Cosmetic_OnSnowmanHighFive");
static_assert(offsetof(Snowman_Cosmetic_OnSnowmanHighFive, otherSnowman) == 0x000000, "Member 'Snowman_Cosmetic_OnSnowmanHighFive::otherSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanStartBeingControlledByKiller
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Cosmetic_OnSnowmanStartBeingControlledByKiller final
{
public:
	class AKiller*                                killerUsingSnowman;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Cosmetic_OnSnowmanStartBeingControlledByKiller) == 0x000008, "Wrong alignment on Snowman_Cosmetic_OnSnowmanStartBeingControlledByKiller");
static_assert(sizeof(Snowman_Cosmetic_OnSnowmanStartBeingControlledByKiller) == 0x000008, "Wrong size on Snowman_Cosmetic_OnSnowmanStartBeingControlledByKiller");
static_assert(offsetof(Snowman_Cosmetic_OnSnowmanStartBeingControlledByKiller, killerUsingSnowman) == 0x000000, "Member 'Snowman_Cosmetic_OnSnowmanStartBeingControlledByKiller::killerUsingSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanStartBeingControlledBySurvivor
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Cosmetic_OnSnowmanStartBeingControlledBySurvivor final
{
public:
	class ASurvivor*                              survivorUsingSnowman;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Cosmetic_OnSnowmanStartBeingControlledBySurvivor) == 0x000008, "Wrong alignment on Snowman_Cosmetic_OnSnowmanStartBeingControlledBySurvivor");
static_assert(sizeof(Snowman_Cosmetic_OnSnowmanStartBeingControlledBySurvivor) == 0x000008, "Wrong size on Snowman_Cosmetic_OnSnowmanStartBeingControlledBySurvivor");
static_assert(offsetof(Snowman_Cosmetic_OnSnowmanStartBeingControlledBySurvivor, survivorUsingSnowman) == 0x000000, "Member 'Snowman_Cosmetic_OnSnowmanStartBeingControlledBySurvivor::survivorUsingSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanStartBeingUsedByKiller
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Cosmetic_OnSnowmanStartBeingUsedByKiller final
{
public:
	class AKiller*                                killerUsingSnowman;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Cosmetic_OnSnowmanStartBeingUsedByKiller) == 0x000008, "Wrong alignment on Snowman_Cosmetic_OnSnowmanStartBeingUsedByKiller");
static_assert(sizeof(Snowman_Cosmetic_OnSnowmanStartBeingUsedByKiller) == 0x000008, "Wrong size on Snowman_Cosmetic_OnSnowmanStartBeingUsedByKiller");
static_assert(offsetof(Snowman_Cosmetic_OnSnowmanStartBeingUsedByKiller, killerUsingSnowman) == 0x000000, "Member 'Snowman_Cosmetic_OnSnowmanStartBeingUsedByKiller::killerUsingSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanStartBeingUsedBySurvivor
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Cosmetic_OnSnowmanStartBeingUsedBySurvivor final
{
public:
	class ASurvivor*                              survivorUsingSnowman;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Cosmetic_OnSnowmanStartBeingUsedBySurvivor) == 0x000008, "Wrong alignment on Snowman_Cosmetic_OnSnowmanStartBeingUsedBySurvivor");
static_assert(sizeof(Snowman_Cosmetic_OnSnowmanStartBeingUsedBySurvivor) == 0x000008, "Wrong size on Snowman_Cosmetic_OnSnowmanStartBeingUsedBySurvivor");
static_assert(offsetof(Snowman_Cosmetic_OnSnowmanStartBeingUsedBySurvivor, survivorUsingSnowman) == 0x000000, "Member 'Snowman_Cosmetic_OnSnowmanStartBeingUsedBySurvivor::survivorUsingSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Multicast_OnSnowmanStartBeingControlledByKiller
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Multicast_OnSnowmanStartBeingControlledByKiller final
{
public:
	class AKiller*                                killerUsingSnowman;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Multicast_OnSnowmanStartBeingControlledByKiller) == 0x000008, "Wrong alignment on Snowman_Multicast_OnSnowmanStartBeingControlledByKiller");
static_assert(sizeof(Snowman_Multicast_OnSnowmanStartBeingControlledByKiller) == 0x000008, "Wrong size on Snowman_Multicast_OnSnowmanStartBeingControlledByKiller");
static_assert(offsetof(Snowman_Multicast_OnSnowmanStartBeingControlledByKiller, killerUsingSnowman) == 0x000000, "Member 'Snowman_Multicast_OnSnowmanStartBeingControlledByKiller::killerUsingSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Multicast_OnSnowmanStartBeingControlledBySurvivor
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Multicast_OnSnowmanStartBeingControlledBySurvivor final
{
public:
	class ASurvivor*                              survivorUsingSnowman;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Multicast_OnSnowmanStartBeingControlledBySurvivor) == 0x000008, "Wrong alignment on Snowman_Multicast_OnSnowmanStartBeingControlledBySurvivor");
static_assert(sizeof(Snowman_Multicast_OnSnowmanStartBeingControlledBySurvivor) == 0x000008, "Wrong size on Snowman_Multicast_OnSnowmanStartBeingControlledBySurvivor");
static_assert(offsetof(Snowman_Multicast_OnSnowmanStartBeingControlledBySurvivor, survivorUsingSnowman) == 0x000000, "Member 'Snowman_Multicast_OnSnowmanStartBeingControlledBySurvivor::survivorUsingSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Multicast_OnSnowmanStartBeingUsedByKiller
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Multicast_OnSnowmanStartBeingUsedByKiller final
{
public:
	class AKiller*                                killerUsingSnowman;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Multicast_OnSnowmanStartBeingUsedByKiller) == 0x000008, "Wrong alignment on Snowman_Multicast_OnSnowmanStartBeingUsedByKiller");
static_assert(sizeof(Snowman_Multicast_OnSnowmanStartBeingUsedByKiller) == 0x000008, "Wrong size on Snowman_Multicast_OnSnowmanStartBeingUsedByKiller");
static_assert(offsetof(Snowman_Multicast_OnSnowmanStartBeingUsedByKiller, killerUsingSnowman) == 0x000000, "Member 'Snowman_Multicast_OnSnowmanStartBeingUsedByKiller::killerUsingSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Multicast_OnSnowmanStartBeingUsedBySurvivor
// 0x0008 (0x0008 - 0x0000)
struct Snowman_Multicast_OnSnowmanStartBeingUsedBySurvivor final
{
public:
	class ASurvivor*                              survivorUsingSnowman;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Multicast_OnSnowmanStartBeingUsedBySurvivor) == 0x000008, "Wrong alignment on Snowman_Multicast_OnSnowmanStartBeingUsedBySurvivor");
static_assert(sizeof(Snowman_Multicast_OnSnowmanStartBeingUsedBySurvivor) == 0x000008, "Wrong size on Snowman_Multicast_OnSnowmanStartBeingUsedBySurvivor");
static_assert(offsetof(Snowman_Multicast_OnSnowmanStartBeingUsedBySurvivor, survivorUsingSnowman) == 0x000000, "Member 'Snowman_Multicast_OnSnowmanStartBeingUsedBySurvivor::survivorUsingSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Multicast_StartSnowmanDestruction
// 0x0010 (0x0010 - 0x0000)
struct Snowman_Multicast_StartSnowmanDestruction final
{
public:
	ESnowmanDestructionType                       snowmanDestructionType;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          unlockRequirementsSatisfiedForSurvivor;            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          unlockRequirementsSatisfiedForKiller;              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             playerInSnowman;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_Multicast_StartSnowmanDestruction) == 0x000008, "Wrong alignment on Snowman_Multicast_StartSnowmanDestruction");
static_assert(sizeof(Snowman_Multicast_StartSnowmanDestruction) == 0x000010, "Wrong size on Snowman_Multicast_StartSnowmanDestruction");
static_assert(offsetof(Snowman_Multicast_StartSnowmanDestruction, snowmanDestructionType) == 0x000000, "Member 'Snowman_Multicast_StartSnowmanDestruction::snowmanDestructionType' has a wrong offset!");
static_assert(offsetof(Snowman_Multicast_StartSnowmanDestruction, unlockRequirementsSatisfiedForSurvivor) == 0x000001, "Member 'Snowman_Multicast_StartSnowmanDestruction::unlockRequirementsSatisfiedForSurvivor' has a wrong offset!");
static_assert(offsetof(Snowman_Multicast_StartSnowmanDestruction, unlockRequirementsSatisfiedForKiller) == 0x000002, "Member 'Snowman_Multicast_StartSnowmanDestruction::unlockRequirementsSatisfiedForKiller' has a wrong offset!");
static_assert(offsetof(Snowman_Multicast_StartSnowmanDestruction, playerInSnowman) == 0x000008, "Member 'Snowman_Multicast_StartSnowmanDestruction::playerInSnowman' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.OnFinishedPlaying
// 0x0040 (0x0040 - 0x0000)
struct Snowman_OnFinishedPlaying final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_OnFinishedPlaying) == 0x000008, "Wrong alignment on Snowman_OnFinishedPlaying");
static_assert(sizeof(Snowman_OnFinishedPlaying) == 0x000040, "Wrong size on Snowman_OnFinishedPlaying");
static_assert(offsetof(Snowman_OnFinishedPlaying, gameEventType) == 0x000000, "Member 'Snowman_OnFinishedPlaying::gameEventType' has a wrong offset!");
static_assert(offsetof(Snowman_OnFinishedPlaying, GameEventData) == 0x000010, "Member 'Snowman_OnFinishedPlaying::GameEventData' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.OnTransitionBackToKillerFinished
// 0x0008 (0x0008 - 0x0000)
struct Snowman_OnTransitionBackToKillerFinished final
{
public:
	const class AKiller*                          Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowman_OnTransitionBackToKillerFinished) == 0x000008, "Wrong alignment on Snowman_OnTransitionBackToKillerFinished");
static_assert(sizeof(Snowman_OnTransitionBackToKillerFinished) == 0x000008, "Wrong size on Snowman_OnTransitionBackToKillerFinished");
static_assert(offsetof(Snowman_OnTransitionBackToKillerFinished, Killer) == 0x000000, "Member 'Snowman_OnTransitionBackToKillerFinished::Killer' has a wrong offset!");

// Function SnowmanWinterEvent.Snowman.Multicast_DrawDebugCollisionCheck
// 0x0020 (0x0020 - 0x0000)
struct Snowman_Multicast_DrawDebugCollisionCheck final
{
public:
	struct FVector                                BoxExtent;                                         // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         debugLifetime;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Snowman_Multicast_DrawDebugCollisionCheck) == 0x000008, "Wrong alignment on Snowman_Multicast_DrawDebugCollisionCheck");
static_assert(sizeof(Snowman_Multicast_DrawDebugCollisionCheck) == 0x000020, "Wrong size on Snowman_Multicast_DrawDebugCollisionCheck");
static_assert(offsetof(Snowman_Multicast_DrawDebugCollisionCheck, BoxExtent) == 0x000000, "Member 'Snowman_Multicast_DrawDebugCollisionCheck::BoxExtent' has a wrong offset!");
static_assert(offsetof(Snowman_Multicast_DrawDebugCollisionCheck, debugLifetime) == 0x000018, "Member 'Snowman_Multicast_DrawDebugCollisionCheck::debugLifetime' has a wrong offset!");

// Function SnowmanWinterEvent.SnowmanAnimInstance.Cosmetic_OnSnowmanDestroyedEvent
// 0x0001 (0x0001 - 0x0000)
struct SnowmanAnimInstance_Cosmetic_OnSnowmanDestroyedEvent final
{
public:
	ESnowmanDestructionType                       snowmanDestructionType;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowmanAnimInstance_Cosmetic_OnSnowmanDestroyedEvent) == 0x000001, "Wrong alignment on SnowmanAnimInstance_Cosmetic_OnSnowmanDestroyedEvent");
static_assert(sizeof(SnowmanAnimInstance_Cosmetic_OnSnowmanDestroyedEvent) == 0x000001, "Wrong size on SnowmanAnimInstance_Cosmetic_OnSnowmanDestroyedEvent");
static_assert(offsetof(SnowmanAnimInstance_Cosmetic_OnSnowmanDestroyedEvent, snowmanDestructionType) == 0x000000, "Member 'SnowmanAnimInstance_Cosmetic_OnSnowmanDestroyedEvent::snowmanDestructionType' has a wrong offset!");

// Function SnowmanWinterEvent.SnowmanKillerPerspectiveChangeComponent.SetFirstPersonTargetData
// 0x0008 (0x0008 - 0x0000)
struct SnowmanKillerPerspectiveChangeComponent_SetFirstPersonTargetData final
{
public:
	const class AKiller*                          Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowmanKillerPerspectiveChangeComponent_SetFirstPersonTargetData) == 0x000008, "Wrong alignment on SnowmanKillerPerspectiveChangeComponent_SetFirstPersonTargetData");
static_assert(sizeof(SnowmanKillerPerspectiveChangeComponent_SetFirstPersonTargetData) == 0x000008, "Wrong size on SnowmanKillerPerspectiveChangeComponent_SetFirstPersonTargetData");
static_assert(offsetof(SnowmanKillerPerspectiveChangeComponent_SetFirstPersonTargetData, Killer) == 0x000000, "Member 'SnowmanKillerPerspectiveChangeComponent_SetFirstPersonTargetData::Killer' has a wrong offset!");

// Function SnowmanWinterEvent.SnowmanWinterEventComponent.DBD_Winter2021ShowSnowmenSpawnCollisionChecks
// 0x0004 (0x0004 - 0x0000)
struct SnowmanWinterEventComponent_DBD_Winter2021ShowSnowmenSpawnCollisionChecks final
{
public:
	float                                         numberOfSeconds;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowmanWinterEventComponent_DBD_Winter2021ShowSnowmenSpawnCollisionChecks) == 0x000004, "Wrong alignment on SnowmanWinterEventComponent_DBD_Winter2021ShowSnowmenSpawnCollisionChecks");
static_assert(sizeof(SnowmanWinterEventComponent_DBD_Winter2021ShowSnowmenSpawnCollisionChecks) == 0x000004, "Wrong size on SnowmanWinterEventComponent_DBD_Winter2021ShowSnowmenSpawnCollisionChecks");
static_assert(offsetof(SnowmanWinterEventComponent_DBD_Winter2021ShowSnowmenSpawnCollisionChecks, numberOfSeconds) == 0x000000, "Member 'SnowmanWinterEventComponent_DBD_Winter2021ShowSnowmenSpawnCollisionChecks::numberOfSeconds' has a wrong offset!");

// Function SnowmanWinterEvent.SnowmanWinterEventComponent.DBD_Winter2021VisualizeCalculatedSpawnData
// 0x0004 (0x0004 - 0x0000)
struct SnowmanWinterEventComponent_DBD_Winter2021VisualizeCalculatedSpawnData final
{
public:
	float                                         numberOfSeconds;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowmanWinterEventComponent_DBD_Winter2021VisualizeCalculatedSpawnData) == 0x000004, "Wrong alignment on SnowmanWinterEventComponent_DBD_Winter2021VisualizeCalculatedSpawnData");
static_assert(sizeof(SnowmanWinterEventComponent_DBD_Winter2021VisualizeCalculatedSpawnData) == 0x000004, "Wrong size on SnowmanWinterEventComponent_DBD_Winter2021VisualizeCalculatedSpawnData");
static_assert(offsetof(SnowmanWinterEventComponent_DBD_Winter2021VisualizeCalculatedSpawnData, numberOfSeconds) == 0x000000, "Member 'SnowmanWinterEventComponent_DBD_Winter2021VisualizeCalculatedSpawnData::numberOfSeconds' has a wrong offset!");

// Function SnowmanWinterEvent.SurvivorHideInSnowmanInteraction.Authority_OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct SurvivorHideInSnowmanInteraction_Authority_OnDamageStateChanged final
{
public:
	EHealthState                                  oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealthState                                  currentDamageState;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorHideInSnowmanInteraction_Authority_OnDamageStateChanged) == 0x000001, "Wrong alignment on SurvivorHideInSnowmanInteraction_Authority_OnDamageStateChanged");
static_assert(sizeof(SurvivorHideInSnowmanInteraction_Authority_OnDamageStateChanged) == 0x000002, "Wrong size on SurvivorHideInSnowmanInteraction_Authority_OnDamageStateChanged");
static_assert(offsetof(SurvivorHideInSnowmanInteraction_Authority_OnDamageStateChanged, oldDamageState) == 0x000000, "Member 'SurvivorHideInSnowmanInteraction_Authority_OnDamageStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(SurvivorHideInSnowmanInteraction_Authority_OnDamageStateChanged, currentDamageState) == 0x000001, "Member 'SurvivorHideInSnowmanInteraction_Authority_OnDamageStateChanged::currentDamageState' has a wrong offset!");

// Function SnowmanWinterEvent.SurvivorHideInSnowmanInteraction.Cosmetic_OnSurvivorScreamFromExit
// 0x0008 (0x0008 - 0x0000)
struct SurvivorHideInSnowmanInteraction_Cosmetic_OnSurvivorScreamFromExit final
{
public:
	class ADBDPlayer*                             playerExiting;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorHideInSnowmanInteraction_Cosmetic_OnSurvivorScreamFromExit) == 0x000008, "Wrong alignment on SurvivorHideInSnowmanInteraction_Cosmetic_OnSurvivorScreamFromExit");
static_assert(sizeof(SurvivorHideInSnowmanInteraction_Cosmetic_OnSurvivorScreamFromExit) == 0x000008, "Wrong size on SurvivorHideInSnowmanInteraction_Cosmetic_OnSurvivorScreamFromExit");
static_assert(offsetof(SurvivorHideInSnowmanInteraction_Cosmetic_OnSurvivorScreamFromExit, playerExiting) == 0x000000, "Member 'SurvivorHideInSnowmanInteraction_Cosmetic_OnSurvivorScreamFromExit::playerExiting' has a wrong offset!");

}

