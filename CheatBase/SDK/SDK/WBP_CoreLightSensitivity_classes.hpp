#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CoreLightSensitivity

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DBDUIViewsCore_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_CoreLightSensitivity.WBP_CoreLightSensitivity_C
// 0x0038 (0x0388 - 0x0350)
class UWBP_CoreLightSensitivity_C final : public UCoreLightSensitivityWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDBDImage*                              Background;                                        // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel;                                       // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDRichTextBlock*                      LightSensitivityRichTextBlock1;                    // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDRichTextBlock*                      LightSensitivityRichTextBlock2;                    // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDRichTextBlock*                      LightSensitivityRichTextBlock3;                    // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           TextContainer;                                     // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_CoreLightSensitivity(int32 EntryPoint);
	void OnInitialized();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_CoreLightSensitivity_C">();
	}
	static class UWBP_CoreLightSensitivity_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_CoreLightSensitivity_C>();
	}
};
static_assert(alignof(UWBP_CoreLightSensitivity_C) == 0x000008, "Wrong alignment on UWBP_CoreLightSensitivity_C");
static_assert(sizeof(UWBP_CoreLightSensitivity_C) == 0x000388, "Wrong size on UWBP_CoreLightSensitivity_C");
static_assert(offsetof(UWBP_CoreLightSensitivity_C, UberGraphFrame) == 0x000350, "Member 'UWBP_CoreLightSensitivity_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_CoreLightSensitivity_C, Background) == 0x000358, "Member 'UWBP_CoreLightSensitivity_C::Background' has a wrong offset!");
static_assert(offsetof(UWBP_CoreLightSensitivity_C, CanvasPanel) == 0x000360, "Member 'UWBP_CoreLightSensitivity_C::CanvasPanel' has a wrong offset!");
static_assert(offsetof(UWBP_CoreLightSensitivity_C, LightSensitivityRichTextBlock1) == 0x000368, "Member 'UWBP_CoreLightSensitivity_C::LightSensitivityRichTextBlock1' has a wrong offset!");
static_assert(offsetof(UWBP_CoreLightSensitivity_C, LightSensitivityRichTextBlock2) == 0x000370, "Member 'UWBP_CoreLightSensitivity_C::LightSensitivityRichTextBlock2' has a wrong offset!");
static_assert(offsetof(UWBP_CoreLightSensitivity_C, LightSensitivityRichTextBlock3) == 0x000378, "Member 'UWBP_CoreLightSensitivity_C::LightSensitivityRichTextBlock3' has a wrong offset!");
static_assert(offsetof(UWBP_CoreLightSensitivity_C, TextContainer) == 0x000380, "Member 'UWBP_CoreLightSensitivity_C::TextContainer' has a wrong offset!");

}

