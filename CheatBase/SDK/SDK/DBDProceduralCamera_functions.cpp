#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDProceduralCamera

#include "Basic.hpp"

#include "DBDProceduralCamera_classes.hpp"
#include "DBDProceduralCamera_parameters.hpp"


namespace SDK
{

// Function DBDProceduralCamera.PCCameraSequencesConfig.GetSequence
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// class FName                             CharacterId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              OutfitsID                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UProceduralCameraSequenceData*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UProceduralCameraSequenceData* UPCCameraSequencesConfig::GetSequence(class FName CharacterId, const TArray<class FName>& OutfitsID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCCameraSequencesConfig", "GetSequence");

	Params::PCCameraSequencesConfig_GetSequence Parms{};

	Parms.CharacterId = CharacterId;
	Parms.OutfitsID = std::move(OutfitsID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDProceduralCamera.PCCharacterSequenceOverride.GetSequence
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<class FName>&              OutfitsID                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UProceduralCameraSequenceData*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UProceduralCameraSequenceData* UPCCharacterSequenceOverride::GetSequence(const TArray<class FName>& OutfitsID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCCharacterSequenceOverride", "GetSequence");

	Params::PCCharacterSequenceOverride_GetSequence Parms{};

	Parms.OutfitsID = std::move(OutfitsID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDProceduralCamera.ProceduralCameraComponent.CreateCameraIntroSequence
// (Final, Native, Public, BlueprintCallable)

void UProceduralCameraComponent::CreateCameraIntroSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraComponent", "CreateCameraIntroSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDProceduralCamera.ProceduralCameraComponent.DebugFunction
// (Final, Native, Public)

void UProceduralCameraComponent::DebugFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraComponent", "DebugFunction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDProceduralCamera.ProceduralCameraComponent.ClearLevelSequence
// (Final, Native, Public, HasDefaults, BlueprintCallable, Const)
// Parameters:
// const struct FGuid&                     CameraGuid                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProceduralCameraComponent::ClearLevelSequence(const struct FGuid& CameraGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraComponent", "ClearLevelSequence");

	Params::ProceduralCameraComponent_ClearLevelSequence Parms{};

	Parms.CameraGuid = std::move(CameraGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDProceduralCamera.ProceduralCameraComponent.GetCameraComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCameraComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraComponent* UProceduralCameraComponent::GetCameraComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraComponent", "GetCameraComponent");

	Params::ProceduralCameraComponent_GetCameraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDProceduralCamera.ProceduralCameraComponent.GetSpawnedCameraActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACineCameraActor*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACineCameraActor* UProceduralCameraComponent::GetSpawnedCameraActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraComponent", "GetSpawnedCameraActor");

	Params::ProceduralCameraComponent_GetSpawnedCameraActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDProceduralCamera.ProceduralCameraComponent.GetTargetActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UProceduralCameraComponent::GetTargetActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraComponent", "GetTargetActor");

	Params::ProceduralCameraComponent_GetTargetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDProceduralCamera.ProceduralCameraComponent.GetTargetPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADBDPlayer*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADBDPlayer* UProceduralCameraComponent::GetTargetPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraComponent", "GetTargetPlayer");

	Params::ProceduralCameraComponent_GetTargetPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDProceduralCamera.ProceduralCameraComponent.LaunchCameraIntroSequence
// (Final, Native, Public, BlueprintCallable, Const)

void UProceduralCameraComponent::LaunchCameraIntroSequence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraComponent", "LaunchCameraIntroSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDProceduralCamera.ProceduralCameraRaD.BeginCinematic
// (Final, Native, Public)

void AProceduralCameraRaD::BeginCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraRaD", "BeginCinematic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDProceduralCamera.ProceduralCameraRaD.ComputeTrackObstructionScore
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FCameraShot*                     CameraShot                                             (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void AProceduralCameraRaD::ComputeTrackObstructionScore(struct FCameraShot* CameraShot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraRaD", "ComputeTrackObstructionScore");

	Params::ProceduralCameraRaD_ComputeTrackObstructionScore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CameraShot != nullptr)
		*CameraShot = std::move(Parms.CameraShot);
}


// Function DBDProceduralCamera.ProceduralCameraRaD.OnCameraTransition
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   TransitionDuration                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BeginAt                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AProceduralCameraRaD::OnCameraTransition(float TransitionDuration, float BeginAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraRaD", "OnCameraTransition");

	Params::ProceduralCameraRaD_OnCameraTransition Parms{};

	Parms.TransitionDuration = TransitionDuration;
	Parms.BeginAt = BeginAt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDProceduralCamera.ProceduralCameraRaD.PlayCinematic
// (Final, Native, Private)

void AProceduralCameraRaD::PlayCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraRaD", "PlayCinematic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDProceduralCamera.ProceduralCameraRaD.SelectTracks
// (Final, Native, Public)

void AProceduralCameraRaD::SelectTracks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraRaD", "SelectTracks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

