#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheGhostface

#include "Basic.hpp"

#include "DBDSharedTypes_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "TheGhostface_structs.hpp"


namespace SDK::Params
{

// Function TheGhostface.GhostChargeStalkModeInteraction.GetStealthComponent
// 0x0008 (0x0008 - 0x0000)
struct GhostChargeStalkModeInteraction_GetStealthComponent final
{
public:
	class UGhostStealthComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostChargeStalkModeInteraction_GetStealthComponent) == 0x000008, "Wrong alignment on GhostChargeStalkModeInteraction_GetStealthComponent");
static_assert(sizeof(GhostChargeStalkModeInteraction_GetStealthComponent) == 0x000008, "Wrong size on GhostChargeStalkModeInteraction_GetStealthComponent");
static_assert(offsetof(GhostChargeStalkModeInteraction_GetStealthComponent, ReturnValue) == 0x000000, "Member 'GhostChargeStalkModeInteraction_GetStealthComponent::ReturnValue' has a wrong offset!");

// Function TheGhostface.AISkill_Interaction_StalkGhost.HandlePotentialLeanChange
// 0x0001 (0x0001 - 0x0000)
struct AISkill_Interaction_StalkGhost_HandlePotentialLeanChange final
{
public:
	ELeanState                                    potentialLeanState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISkill_Interaction_StalkGhost_HandlePotentialLeanChange) == 0x000001, "Wrong alignment on AISkill_Interaction_StalkGhost_HandlePotentialLeanChange");
static_assert(sizeof(AISkill_Interaction_StalkGhost_HandlePotentialLeanChange) == 0x000001, "Wrong size on AISkill_Interaction_StalkGhost_HandlePotentialLeanChange");
static_assert(offsetof(AISkill_Interaction_StalkGhost_HandlePotentialLeanChange, potentialLeanState) == 0x000000, "Member 'AISkill_Interaction_StalkGhost_HandlePotentialLeanChange::potentialLeanState' has a wrong offset!");

// Function TheGhostface.GhostKillerAnalyticsComponent.Authority_OnPreAttackSuccess
// 0x0040 (0x0040 - 0x0000)
struct GhostKillerAnalyticsComponent_Authority_OnPreAttackSuccess final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostKillerAnalyticsComponent_Authority_OnPreAttackSuccess) == 0x000008, "Wrong alignment on GhostKillerAnalyticsComponent_Authority_OnPreAttackSuccess");
static_assert(sizeof(GhostKillerAnalyticsComponent_Authority_OnPreAttackSuccess) == 0x000040, "Wrong size on GhostKillerAnalyticsComponent_Authority_OnPreAttackSuccess");
static_assert(offsetof(GhostKillerAnalyticsComponent_Authority_OnPreAttackSuccess, GameplayTag) == 0x000000, "Member 'GhostKillerAnalyticsComponent_Authority_OnPreAttackSuccess::GameplayTag' has a wrong offset!");
static_assert(offsetof(GhostKillerAnalyticsComponent_Authority_OnPreAttackSuccess, GameEventData) == 0x000010, "Member 'GhostKillerAnalyticsComponent_Authority_OnPreAttackSuccess::GameEventData' has a wrong offset!");

// Function TheGhostface.GhostKillerAnalyticsComponent.Authority_OnStalkChargePercentChanged
// 0x0010 (0x0010 - 0x0000)
struct GhostKillerAnalyticsComponent_Authority_OnStalkChargePercentChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostKillerAnalyticsComponent_Authority_OnStalkChargePercentChanged) == 0x000008, "Wrong alignment on GhostKillerAnalyticsComponent_Authority_OnStalkChargePercentChanged");
static_assert(sizeof(GhostKillerAnalyticsComponent_Authority_OnStalkChargePercentChanged) == 0x000010, "Wrong size on GhostKillerAnalyticsComponent_Authority_OnStalkChargePercentChanged");
static_assert(offsetof(GhostKillerAnalyticsComponent_Authority_OnStalkChargePercentChanged, ChargeableComponent) == 0x000000, "Member 'GhostKillerAnalyticsComponent_Authority_OnStalkChargePercentChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(GhostKillerAnalyticsComponent_Authority_OnStalkChargePercentChanged, PercentCompletionChange) == 0x000008, "Member 'GhostKillerAnalyticsComponent_Authority_OnStalkChargePercentChanged::PercentCompletionChange' has a wrong offset!");
static_assert(offsetof(GhostKillerAnalyticsComponent_Authority_OnStalkChargePercentChanged, TotalPercentComplete) == 0x00000C, "Member 'GhostKillerAnalyticsComponent_Authority_OnStalkChargePercentChanged::TotalPercentComplete' has a wrong offset!");

// Function TheGhostface.GhostKillerAnalyticsComponent.Local_OnIsStealthChanged
// 0x0001 (0x0001 - 0x0000)
struct GhostKillerAnalyticsComponent_Local_OnIsStealthChanged final
{
public:
	bool                                          IsStealth;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostKillerAnalyticsComponent_Local_OnIsStealthChanged) == 0x000001, "Wrong alignment on GhostKillerAnalyticsComponent_Local_OnIsStealthChanged");
static_assert(sizeof(GhostKillerAnalyticsComponent_Local_OnIsStealthChanged) == 0x000001, "Wrong size on GhostKillerAnalyticsComponent_Local_OnIsStealthChanged");
static_assert(offsetof(GhostKillerAnalyticsComponent_Local_OnIsStealthChanged, IsStealth) == 0x000000, "Member 'GhostKillerAnalyticsComponent_Local_OnIsStealthChanged::IsStealth' has a wrong offset!");

// Function TheGhostface.GhostKillerAnalyticsComponent.Local_OnLeanStateChanged
// 0x0001 (0x0001 - 0x0000)
struct GhostKillerAnalyticsComponent_Local_OnLeanStateChanged final
{
public:
	ELeanState                                    leanState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostKillerAnalyticsComponent_Local_OnLeanStateChanged) == 0x000001, "Wrong alignment on GhostKillerAnalyticsComponent_Local_OnLeanStateChanged");
static_assert(sizeof(GhostKillerAnalyticsComponent_Local_OnLeanStateChanged) == 0x000001, "Wrong size on GhostKillerAnalyticsComponent_Local_OnLeanStateChanged");
static_assert(offsetof(GhostKillerAnalyticsComponent_Local_OnLeanStateChanged, leanState) == 0x000000, "Member 'GhostKillerAnalyticsComponent_Local_OnLeanStateChanged::leanState' has a wrong offset!");

// Function TheGhostface.GhostKillerAnalyticsComponent.Local_OnStalkModeChanged
// 0x0001 (0x0001 - 0x0000)
struct GhostKillerAnalyticsComponent_Local_OnStalkModeChanged final
{
public:
	bool                                          IsInStalkMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostKillerAnalyticsComponent_Local_OnStalkModeChanged) == 0x000001, "Wrong alignment on GhostKillerAnalyticsComponent_Local_OnStalkModeChanged");
static_assert(sizeof(GhostKillerAnalyticsComponent_Local_OnStalkModeChanged) == 0x000001, "Wrong size on GhostKillerAnalyticsComponent_Local_OnStalkModeChanged");
static_assert(offsetof(GhostKillerAnalyticsComponent_Local_OnStalkModeChanged, IsInStalkMode) == 0x000000, "Member 'GhostKillerAnalyticsComponent_Local_OnStalkModeChanged::IsInStalkMode' has a wrong offset!");

// Function TheGhostface.GhostStalkedComponent.Authority_OnStalkedChargeFull
// 0x0018 (0x0018 - 0x0000)
struct GhostStalkedComponent_Authority_OnStalkedChargeFull final
{
public:
	bool                                          COMPLETED;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         instigatorsForCompletion;                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStalkedComponent_Authority_OnStalkedChargeFull) == 0x000008, "Wrong alignment on GhostStalkedComponent_Authority_OnStalkedChargeFull");
static_assert(sizeof(GhostStalkedComponent_Authority_OnStalkedChargeFull) == 0x000018, "Wrong size on GhostStalkedComponent_Authority_OnStalkedChargeFull");
static_assert(offsetof(GhostStalkedComponent_Authority_OnStalkedChargeFull, COMPLETED) == 0x000000, "Member 'GhostStalkedComponent_Authority_OnStalkedChargeFull::COMPLETED' has a wrong offset!");
static_assert(offsetof(GhostStalkedComponent_Authority_OnStalkedChargeFull, instigatorsForCompletion) == 0x000008, "Member 'GhostStalkedComponent_Authority_OnStalkedChargeFull::instigatorsForCompletion' has a wrong offset!");

// Function TheGhostface.GhostStalkedComponent.DBD_DebugGhost
// 0x0001 (0x0001 - 0x0000)
struct GhostStalkedComponent_DBD_DebugGhost final
{
public:
	bool                                          debug;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStalkedComponent_DBD_DebugGhost) == 0x000001, "Wrong alignment on GhostStalkedComponent_DBD_DebugGhost");
static_assert(sizeof(GhostStalkedComponent_DBD_DebugGhost) == 0x000001, "Wrong size on GhostStalkedComponent_DBD_DebugGhost");
static_assert(offsetof(GhostStalkedComponent_DBD_DebugGhost, debug) == 0x000000, "Member 'GhostStalkedComponent_DBD_DebugGhost::debug' has a wrong offset!");

// Function TheGhostface.GhostStalkedComponent.OnKillerSpottedChanged
// 0x0010 (0x0010 - 0x0000)
struct GhostStalkedComponent_OnKillerSpottedChanged final
{
public:
	class ADBDPlayer*                             spotter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spotted;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GhostStalkedComponent_OnKillerSpottedChanged) == 0x000008, "Wrong alignment on GhostStalkedComponent_OnKillerSpottedChanged");
static_assert(sizeof(GhostStalkedComponent_OnKillerSpottedChanged) == 0x000010, "Wrong size on GhostStalkedComponent_OnKillerSpottedChanged");
static_assert(offsetof(GhostStalkedComponent_OnKillerSpottedChanged, spotter) == 0x000000, "Member 'GhostStalkedComponent_OnKillerSpottedChanged::spotter' has a wrong offset!");
static_assert(offsetof(GhostStalkedComponent_OnKillerSpottedChanged, spotted) == 0x000008, "Member 'GhostStalkedComponent_OnKillerSpottedChanged::spotted' has a wrong offset!");

// Function TheGhostface.GhostStalkedComponent.OnLocallyObservedChanged
// 0x0008 (0x0008 - 0x0000)
struct GhostStalkedComponent_OnLocallyObservedChanged final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStalkedComponent_OnLocallyObservedChanged) == 0x000008, "Wrong alignment on GhostStalkedComponent_OnLocallyObservedChanged");
static_assert(sizeof(GhostStalkedComponent_OnLocallyObservedChanged) == 0x000008, "Wrong size on GhostStalkedComponent_OnLocallyObservedChanged");
static_assert(offsetof(GhostStalkedComponent_OnLocallyObservedChanged, Player) == 0x000000, "Member 'GhostStalkedComponent_OnLocallyObservedChanged::Player' has a wrong offset!");

// Function TheGhostface.GhostStalkedComponent.GetMeterPercentage
// 0x0004 (0x0004 - 0x0000)
struct GhostStalkedComponent_GetMeterPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStalkedComponent_GetMeterPercentage) == 0x000004, "Wrong alignment on GhostStalkedComponent_GetMeterPercentage");
static_assert(sizeof(GhostStalkedComponent_GetMeterPercentage) == 0x000004, "Wrong size on GhostStalkedComponent_GetMeterPercentage");
static_assert(offsetof(GhostStalkedComponent_GetMeterPercentage, ReturnValue) == 0x000000, "Member 'GhostStalkedComponent_GetMeterPercentage::ReturnValue' has a wrong offset!");

// Function TheGhostface.GhostStalkedComponent.IsMarked
// 0x0001 (0x0001 - 0x0000)
struct GhostStalkedComponent_IsMarked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStalkedComponent_IsMarked) == 0x000001, "Wrong alignment on GhostStalkedComponent_IsMarked");
static_assert(sizeof(GhostStalkedComponent_IsMarked) == 0x000001, "Wrong size on GhostStalkedComponent_IsMarked");
static_assert(offsetof(GhostStalkedComponent_IsMarked, ReturnValue) == 0x000000, "Member 'GhostStalkedComponent_IsMarked::ReturnValue' has a wrong offset!");

// Function TheGhostface.GhostStalkPowerComponent.Authority_OnIsCrouchedChanged
// 0x0001 (0x0001 - 0x0000)
struct GhostStalkPowerComponent_Authority_OnIsCrouchedChanged final
{
public:
	bool                                          isCrouched;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStalkPowerComponent_Authority_OnIsCrouchedChanged) == 0x000001, "Wrong alignment on GhostStalkPowerComponent_Authority_OnIsCrouchedChanged");
static_assert(sizeof(GhostStalkPowerComponent_Authority_OnIsCrouchedChanged) == 0x000001, "Wrong size on GhostStalkPowerComponent_Authority_OnIsCrouchedChanged");
static_assert(offsetof(GhostStalkPowerComponent_Authority_OnIsCrouchedChanged, isCrouched) == 0x000000, "Member 'GhostStalkPowerComponent_Authority_OnIsCrouchedChanged::isCrouched' has a wrong offset!");

// Function TheGhostface.GhostStalkPowerComponent.Authority_OnStalkModeChanged
// 0x0001 (0x0001 - 0x0000)
struct GhostStalkPowerComponent_Authority_OnStalkModeChanged final
{
public:
	bool                                          IsInStalkMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStalkPowerComponent_Authority_OnStalkModeChanged) == 0x000001, "Wrong alignment on GhostStalkPowerComponent_Authority_OnStalkModeChanged");
static_assert(sizeof(GhostStalkPowerComponent_Authority_OnStalkModeChanged) == 0x000001, "Wrong size on GhostStalkPowerComponent_Authority_OnStalkModeChanged");
static_assert(offsetof(GhostStalkPowerComponent_Authority_OnStalkModeChanged, IsInStalkMode) == 0x000000, "Member 'GhostStalkPowerComponent_Authority_OnStalkModeChanged::IsInStalkMode' has a wrong offset!");

// Function TheGhostface.GhostStalkPowerComponent.OnLeanStateChanged
// 0x0001 (0x0001 - 0x0000)
struct GhostStalkPowerComponent_OnLeanStateChanged final
{
public:
	ELeanState                                    leanState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStalkPowerComponent_OnLeanStateChanged) == 0x000001, "Wrong alignment on GhostStalkPowerComponent_OnLeanStateChanged");
static_assert(sizeof(GhostStalkPowerComponent_OnLeanStateChanged) == 0x000001, "Wrong size on GhostStalkPowerComponent_OnLeanStateChanged");
static_assert(offsetof(GhostStalkPowerComponent_OnLeanStateChanged, leanState) == 0x000000, "Member 'GhostStalkPowerComponent_OnLeanStateChanged::leanState' has a wrong offset!");

// Function TheGhostface.GhostStealthComponent.Client_SpawnMarkerOnCharacter
// 0x0008 (0x0008 - 0x0000)
struct GhostStealthComponent_Client_SpawnMarkerOnCharacter final
{
public:
	class ACharacter*                             revealer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStealthComponent_Client_SpawnMarkerOnCharacter) == 0x000008, "Wrong alignment on GhostStealthComponent_Client_SpawnMarkerOnCharacter");
static_assert(sizeof(GhostStealthComponent_Client_SpawnMarkerOnCharacter) == 0x000008, "Wrong size on GhostStealthComponent_Client_SpawnMarkerOnCharacter");
static_assert(offsetof(GhostStealthComponent_Client_SpawnMarkerOnCharacter, revealer) == 0x000000, "Member 'GhostStealthComponent_Client_SpawnMarkerOnCharacter::revealer' has a wrong offset!");

// Function TheGhostface.GhostStealthComponent.Multicast_BroadcastOnSuccessfulAttackInStealth
// 0x0008 (0x0008 - 0x0000)
struct GhostStealthComponent_Multicast_BroadcastOnSuccessfulAttackInStealth final
{
public:
	class ADBDPlayer*                             Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStealthComponent_Multicast_BroadcastOnSuccessfulAttackInStealth) == 0x000008, "Wrong alignment on GhostStealthComponent_Multicast_BroadcastOnSuccessfulAttackInStealth");
static_assert(sizeof(GhostStealthComponent_Multicast_BroadcastOnSuccessfulAttackInStealth) == 0x000008, "Wrong size on GhostStealthComponent_Multicast_BroadcastOnSuccessfulAttackInStealth");
static_assert(offsetof(GhostStealthComponent_Multicast_BroadcastOnSuccessfulAttackInStealth, Target) == 0x000000, "Member 'GhostStealthComponent_Multicast_BroadcastOnSuccessfulAttackInStealth::Target' has a wrong offset!");

// Function TheGhostface.GhostStealthComponent.Multicast_OnIsBeingSpottedChanged
// 0x0010 (0x0010 - 0x0000)
struct GhostStealthComponent_Multicast_OnIsBeingSpottedChanged final
{
public:
	class ADBDPlayer*                             spotter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isBeingSpotted;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          onlyUpdateSurvivor;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GhostStealthComponent_Multicast_OnIsBeingSpottedChanged) == 0x000008, "Wrong alignment on GhostStealthComponent_Multicast_OnIsBeingSpottedChanged");
static_assert(sizeof(GhostStealthComponent_Multicast_OnIsBeingSpottedChanged) == 0x000010, "Wrong size on GhostStealthComponent_Multicast_OnIsBeingSpottedChanged");
static_assert(offsetof(GhostStealthComponent_Multicast_OnIsBeingSpottedChanged, spotter) == 0x000000, "Member 'GhostStealthComponent_Multicast_OnIsBeingSpottedChanged::spotter' has a wrong offset!");
static_assert(offsetof(GhostStealthComponent_Multicast_OnIsBeingSpottedChanged, isBeingSpotted) == 0x000008, "Member 'GhostStealthComponent_Multicast_OnIsBeingSpottedChanged::isBeingSpotted' has a wrong offset!");
static_assert(offsetof(GhostStealthComponent_Multicast_OnIsBeingSpottedChanged, onlyUpdateSurvivor) == 0x000009, "Member 'GhostStealthComponent_Multicast_OnIsBeingSpottedChanged::onlyUpdateSurvivor' has a wrong offset!");

// Function TheGhostface.GhostStealthComponent.Multicast_OnPlayerSpottedKiller
// 0x0008 (0x0008 - 0x0000)
struct GhostStealthComponent_Multicast_OnPlayerSpottedKiller final
{
public:
	class ADBDPlayer*                             spotter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStealthComponent_Multicast_OnPlayerSpottedKiller) == 0x000008, "Wrong alignment on GhostStealthComponent_Multicast_OnPlayerSpottedKiller");
static_assert(sizeof(GhostStealthComponent_Multicast_OnPlayerSpottedKiller) == 0x000008, "Wrong size on GhostStealthComponent_Multicast_OnPlayerSpottedKiller");
static_assert(offsetof(GhostStealthComponent_Multicast_OnPlayerSpottedKiller, spotter) == 0x000000, "Member 'GhostStealthComponent_Multicast_OnPlayerSpottedKiller::spotter' has a wrong offset!");

// Function TheGhostface.GhostStealthComponent.OnRep_StealthState
// 0x0001 (0x0001 - 0x0000)
struct GhostStealthComponent_OnRep_StealthState final
{
public:
	EGhostStealthState                            previousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStealthComponent_OnRep_StealthState) == 0x000001, "Wrong alignment on GhostStealthComponent_OnRep_StealthState");
static_assert(sizeof(GhostStealthComponent_OnRep_StealthState) == 0x000001, "Wrong size on GhostStealthComponent_OnRep_StealthState");
static_assert(offsetof(GhostStealthComponent_OnRep_StealthState, previousState) == 0x000000, "Member 'GhostStealthComponent_OnRep_StealthState::previousState' has a wrong offset!");

// Function TheGhostface.GhostStealthComponent.GetStealthChargePercent
// 0x0004 (0x0004 - 0x0000)
struct GhostStealthComponent_GetStealthChargePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStealthComponent_GetStealthChargePercent) == 0x000004, "Wrong alignment on GhostStealthComponent_GetStealthChargePercent");
static_assert(sizeof(GhostStealthComponent_GetStealthChargePercent) == 0x000004, "Wrong size on GhostStealthComponent_GetStealthChargePercent");
static_assert(offsetof(GhostStealthComponent_GetStealthChargePercent, ReturnValue) == 0x000000, "Member 'GhostStealthComponent_GetStealthChargePercent::ReturnValue' has a wrong offset!");

// Function TheGhostface.GhostStealthComponent.GetStealthState
// 0x0001 (0x0001 - 0x0000)
struct GhostStealthComponent_GetStealthState final
{
public:
	EGhostStealthState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStealthComponent_GetStealthState) == 0x000001, "Wrong alignment on GhostStealthComponent_GetStealthState");
static_assert(sizeof(GhostStealthComponent_GetStealthState) == 0x000001, "Wrong size on GhostStealthComponent_GetStealthState");
static_assert(offsetof(GhostStealthComponent_GetStealthState, ReturnValue) == 0x000000, "Member 'GhostStealthComponent_GetStealthState::ReturnValue' has a wrong offset!");

// Function TheGhostface.GhostStealthComponent.IsStealth
// 0x0001 (0x0001 - 0x0000)
struct GhostStealthComponent_IsStealth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStealthComponent_IsStealth) == 0x000001, "Wrong alignment on GhostStealthComponent_IsStealth");
static_assert(sizeof(GhostStealthComponent_IsStealth) == 0x000001, "Wrong size on GhostStealthComponent_IsStealth");
static_assert(offsetof(GhostStealthComponent_IsStealth, ReturnValue) == 0x000000, "Member 'GhostStealthComponent_IsStealth::ReturnValue' has a wrong offset!");

// Function TheGhostface.GhostStealthComponent.IsStealthReadyToActivate
// 0x0001 (0x0001 - 0x0000)
struct GhostStealthComponent_IsStealthReadyToActivate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStealthComponent_IsStealthReadyToActivate) == 0x000001, "Wrong alignment on GhostStealthComponent_IsStealthReadyToActivate");
static_assert(sizeof(GhostStealthComponent_IsStealthReadyToActivate) == 0x000001, "Wrong size on GhostStealthComponent_IsStealthReadyToActivate");
static_assert(offsetof(GhostStealthComponent_IsStealthReadyToActivate, ReturnValue) == 0x000000, "Member 'GhostStealthComponent_IsStealthReadyToActivate::ReturnValue' has a wrong offset!");

// Function TheGhostface.GhostStealthComponent.SetRedStainVisibility
// 0x0001 (0x0001 - 0x0000)
struct GhostStealthComponent_SetRedStainVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GhostStealthComponent_SetRedStainVisibility) == 0x000001, "Wrong alignment on GhostStealthComponent_SetRedStainVisibility");
static_assert(sizeof(GhostStealthComponent_SetRedStainVisibility) == 0x000001, "Wrong size on GhostStealthComponent_SetRedStainVisibility");
static_assert(offsetof(GhostStealthComponent_SetRedStainVisibility, Visible) == 0x000000, "Member 'GhostStealthComponent_SetRedStainVisibility::Visible' has a wrong offset!");

// Function TheGhostface.TheGhostUtilities.IsKillerStealth
// 0x0010 (0x0010 - 0x0000)
struct TheGhostUtilities_IsKillerStealth final
{
public:
	const class AActor*                           Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TheGhostUtilities_IsKillerStealth) == 0x000008, "Wrong alignment on TheGhostUtilities_IsKillerStealth");
static_assert(sizeof(TheGhostUtilities_IsKillerStealth) == 0x000010, "Wrong size on TheGhostUtilities_IsKillerStealth");
static_assert(offsetof(TheGhostUtilities_IsKillerStealth, Killer) == 0x000000, "Member 'TheGhostUtilities_IsKillerStealth::Killer' has a wrong offset!");
static_assert(offsetof(TheGhostUtilities_IsKillerStealth, ReturnValue) == 0x000008, "Member 'TheGhostUtilities_IsKillerStealth::ReturnValue' has a wrong offset!");

}

