#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK23

#include "Basic.hpp"

#include "TheK23_classes.hpp"
#include "TheK23_parameters.hpp"


namespace SDK
{

// Function TheK23.FlurryComboScoreComponent.OnRep_ComboScore
// (Final, Native, Private, Const)

void UFlurryComboScoreComponent::OnRep_ComboScore() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlurryComboScoreComponent", "OnRep_ComboScore");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.FlurryOfKnives.Multicast_StartThrowing
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void UFlurryOfKnives::Multicast_StartThrowing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlurryOfKnives", "Multicast_StartThrowing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.FlurryOfKnives.OnRep_NumOfStacksReduction
// (Final, Native, Private)

void UFlurryOfKnives::OnRep_NumOfStacksReduction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlurryOfKnives", "OnRep_NumOfStacksReduction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.FlurryOfKnives.Server_DecreaseConsecutiveKnivesStacks
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UFlurryOfKnives::Server_DecreaseConsecutiveKnivesStacks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlurryOfKnives", "Server_DecreaseConsecutiveKnivesStacks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.FlurryOfKnives.Server_StartThrowing
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UFlurryOfKnives::Server_StartThrowing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlurryOfKnives", "Server_StartThrowing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.TricksterChainedThrowsAddon.OnRep_ConsecutiveHits
// (Native, Protected)

void UTricksterChainedThrowsAddon::OnRep_ConsecutiveHits()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TricksterChainedThrowsAddon", "OnRep_ConsecutiveHits");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.K23SurvivorCosmeticHelperActor.Cosmetic_K23CamperHitByKnife
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   lacerationPercentage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK23SurvivorCosmeticHelperActor::Cosmetic_K23CamperHitByKnife(float lacerationPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K23SurvivorCosmeticHelperActor", "Cosmetic_K23CamperHitByKnife");

	Params::K23SurvivorCosmeticHelperActor_Cosmetic_K23CamperHitByKnife Parms{};

	Parms.lacerationPercentage = lacerationPercentage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK23.KnifeProjectile.BP_CosmeticOnAddonExplosion
// (BlueprintCosmetic, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Normal                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AKnifeProjectile::BP_CosmeticOnAddonExplosion(const struct FVector& Location, const struct FVector& Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeProjectile", "BP_CosmeticOnAddonExplosion");

	Params::KnifeProjectile_BP_CosmeticOnAddonExplosion Parms{};

	Parms.Location = std::move(Location);
	Parms.Normal = std::move(Normal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK23.KnifeProjectile.BP_OnLaunchCosmetic
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// const struct FLaunchInfo&               LaunchInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    hasImpactOnLaunch                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AKnifeProjectile::BP_OnLaunchCosmetic(const struct FLaunchInfo& LaunchInfo, bool hasImpactOnLaunch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeProjectile", "BP_OnLaunchCosmetic");

	Params::KnifeProjectile_BP_OnLaunchCosmetic Parms{};

	Parms.LaunchInfo = std::move(LaunchInfo);
	Parms.hasImpactOnLaunch = hasImpactOnLaunch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK23.KnifeProjectile.BP_SetKnifeActive
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AKnifeProjectile::BP_SetKnifeActive(bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeProjectile", "BP_SetKnifeActive");

	Params::KnifeProjectile_BP_SetKnifeActive Parms{};

	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK23.KnifeProjectile.OnProjectileBounce
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// const struct FHitResult&                ImpactResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FVector&                   ImpactVelocity                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AKnifeProjectile::OnProjectileBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeProjectile", "OnProjectileBounce");

	Params::KnifeProjectile_OnProjectileBounce Parms{};

	Parms.ImpactResult = std::move(ImpactResult);
	Parms.ImpactVelocity = std::move(ImpactVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.KnifeProjectile.OnWorldColliderHit
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AKnifeProjectile::OnWorldColliderHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeProjectile", "OnWorldColliderHit");

	Params::KnifeProjectile_OnWorldColliderHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.KnifeProjectile.SetKnifeAcquired
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    acquired                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AKnifeProjectile::SetKnifeAcquired(bool acquired)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeProjectile", "SetKnifeAcquired");

	Params::KnifeProjectile_SetKnifeAcquired Parms{};

	Parms.acquired = acquired;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.KnifeProjectile.GetAddonExplosionRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AKnifeProjectile::GetAddonExplosionRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeProjectile", "GetAddonExplosionRadius");

	Params::KnifeProjectile_GetAddonExplosionRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK23.KnifeProjectile.KnifeCanPierceCampers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AKnifeProjectile::KnifeCanPierceCampers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeProjectile", "KnifeCanPierceCampers");

	Params::KnifeProjectile_KnifeCanPierceCampers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK23.KnifeProjectile.ShouldPlayRicochetSound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AKnifeProjectile::ShouldPlayRicochetSound() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeProjectile", "ShouldPlayRicochetSound");

	Params::KnifeProjectile_ShouldPlayRicochetSound Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK23.KnifeProjectile.WasLaunchedDuringSuperMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AKnifeProjectile::WasLaunchedDuringSuperMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeProjectile", "WasLaunchedDuringSuperMode");

	Params::KnifeProjectile_WasLaunchedDuringSuperMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK23.KnifeRack.OnReloadEnded
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AKnifeRack::OnReloadEnded(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeRack", "OnReloadEnded");

	Params::KnifeRack_OnReloadEnded Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK23.KnifeRack.OnReloadMontageStarted
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   actionSpeedMultiplier                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AKnifeRack::OnReloadMontageStarted(float actionSpeedMultiplier, class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnifeRack", "OnReloadMontageStarted");

	Params::KnifeRack_OnReloadMontageStarted Parms{};

	Parms.actionSpeedMultiplier = actionSpeedMultiplier;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK23.KnivesLauncher.GetLocallyPredictedAmmo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UKnivesLauncher::GetLocallyPredictedAmmo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnivesLauncher", "GetLocallyPredictedAmmo");

	Params::KnivesLauncher_GetLocallyPredictedAmmo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK23.KnivesLauncher.GetPower
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AThrowingKnives*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AThrowingKnives* UKnivesLauncher::GetPower() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnivesLauncher", "GetPower");

	Params::KnivesLauncher_GetPower Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK23.LacerationComponent.Cosmetic_OnKnifeHit
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// float                                   lacerationPercent                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AKiller*                          owningKiller                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isDangerous                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    causedDamage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CausedKO                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ImpactNormal                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULacerationComponent::Cosmetic_OnKnifeHit(float lacerationPercent, class AKiller* owningKiller, bool isDangerous, bool causedDamage, bool CausedKO, const struct FVector& ImpactNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LacerationComponent", "Cosmetic_OnKnifeHit");

	Params::LacerationComponent_Cosmetic_OnKnifeHit Parms{};

	Parms.lacerationPercent = lacerationPercent;
	Parms.owningKiller = owningKiller;
	Parms.isDangerous = isDangerous;
	Parms.causedDamage = causedDamage;
	Parms.CausedKO = CausedKO;
	Parms.ImpactNormal = std::move(ImpactNormal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK23.LacerationComponent.Multicast_KnifeHit
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults)
// Parameters:
// float                                   newLaceration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AKiller*                          owningKiller                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    causedDamage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CausedKO                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   impactLocation                                         (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ImpactNormal                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULacerationComponent::Multicast_KnifeHit(float newLaceration, class AKiller* owningKiller, bool causedDamage, bool CausedKO, const struct FVector& impactLocation, const struct FVector& ImpactNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LacerationComponent", "Multicast_KnifeHit");

	Params::LacerationComponent_Multicast_KnifeHit Parms{};

	Parms.newLaceration = newLaceration;
	Parms.owningKiller = owningKiller;
	Parms.causedDamage = causedDamage;
	Parms.CausedKO = CausedKO;
	Parms.impactLocation = std::move(impactLocation);
	Parms.ImpactNormal = std::move(ImpactNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.LacerationComponent.OnRepLaceration
// (Final, Native, Private)
// Parameters:
// float                                   oldLaceration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULacerationComponent::OnRepLaceration(float oldLaceration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LacerationComponent", "OnRepLaceration");

	Params::LacerationComponent_OnRepLaceration Parms{};

	Parms.oldLaceration = oldLaceration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.NoWayOut.Multicast_TriggerLoudNoise
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ADBDPlayer*                       Instigator                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AEscapeDoor*                      EscapeDoor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNoWayOut::Multicast_TriggerLoudNoise(class ADBDPlayer* Instigator, class AEscapeDoor* EscapeDoor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NoWayOut", "Multicast_TriggerLoudNoise");

	Params::NoWayOut_Multicast_TriggerLoudNoise Parms{};

	Parms.Instigator = Instigator;
	Parms.EscapeDoor = EscapeDoor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.NoWayOut.GetExitGatePanelBlockBaseDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNoWayOut::GetExitGatePanelBlockBaseDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NoWayOut", "GetExitGatePanelBlockBaseDurationAtLevel");

	Params::NoWayOut_GetExitGatePanelBlockBaseDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK23.NoWayOut.GetExitGatePanelBlockDurationPerTokenAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNoWayOut::GetExitGatePanelBlockDurationPerTokenAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NoWayOut", "GetExitGatePanelBlockDurationPerTokenAtLevel");

	Params::NoWayOut_GetExitGatePanelBlockDurationPerTokenAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK23.Starstruck.GetExposedEffectDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UStarstruck::GetExposedEffectDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Starstruck", "GetExposedEffectDurationAtLevel");

	Params::Starstruck_GetExposedEffectDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK23.Starstruck.GetPerkCooldownDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UStarstruck::GetPerkCooldownDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Starstruck", "GetPerkCooldownDurationAtLevel");

	Params::Starstruck_GetPerkCooldownDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK23.ThrowingKnives.Authority_SpawnReloadInteractionOnLockers
// (Final, Native, Public)

void AThrowingKnives::Authority_SpawnReloadInteractionOnLockers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrowingKnives", "Authority_SpawnReloadInteractionOnLockers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.ThrowingKnives.Cosmetic_OnComboFinished
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    isSRankCombo                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AThrowingKnives::Cosmetic_OnComboFinished(bool isSRankCombo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrowingKnives", "Cosmetic_OnComboFinished");

	Params::ThrowingKnives_Cosmetic_OnComboFinished Parms{};

	Parms.isSRankCombo = isSRankCombo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK23.ThrowingKnives.Cosmetic_OnComboScoreChanged
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// float                                   scoreNormalizedForAudio                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AThrowingKnives::Cosmetic_OnComboScoreChanged(float scoreNormalizedForAudio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrowingKnives", "Cosmetic_OnComboScoreChanged");

	Params::ThrowingKnives_Cosmetic_OnComboScoreChanged Parms{};

	Parms.scoreNormalizedForAudio = scoreNormalizedForAudio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK23.ThrowingKnives.Cosmetic_OnLaunch
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AThrowingKnives::Cosmetic_OnLaunch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrowingKnives", "Cosmetic_OnLaunch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK23.ThrowingKnives.Cosmetic_OnUsePowerWhenInCooldown
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AThrowingKnives::Cosmetic_OnUsePowerWhenInCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrowingKnives", "Cosmetic_OnUsePowerWhenInCooldown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK23.ThrowingKnives.Cosmetic_OnUsePowerWhenOutOfAmmo
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AThrowingKnives::Cosmetic_OnUsePowerWhenOutOfAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrowingKnives", "Cosmetic_OnUsePowerWhenOutOfAmmo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK23.ThrowingKnives.Multicast_OnUsePowerWhenInCooldown
// (Net, Native, Event, NetMulticast, Public)

void AThrowingKnives::Multicast_OnUsePowerWhenInCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrowingKnives", "Multicast_OnUsePowerWhenInCooldown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.ThrowingKnives.Multicast_OnUsePowerWhenOutOfAmmo
// (Net, Native, Event, NetMulticast, Public)

void AThrowingKnives::Multicast_OnUsePowerWhenOutOfAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrowingKnives", "Multicast_OnUsePowerWhenOutOfAmmo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.ThrowingKnives.OnItemUsedStateChanged
// (Final, Native, Private)
// Parameters:
// bool                                    Pressed                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AThrowingKnives::OnItemUsedStateChanged(bool Pressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrowingKnives", "OnItemUsedStateChanged");

	Params::ThrowingKnives_OnItemUsedStateChanged Parms{};

	Parms.Pressed = Pressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.ThrowingKnives.GetLauncher
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UKnivesLauncher*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKnivesLauncher* AThrowingKnives::GetLauncher() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrowingKnives", "GetLauncher");

	Params::ThrowingKnives_GetLauncher Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK23.ThrowingKnives.GetSlasher
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AKiller*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AKiller* AThrowingKnives::GetSlasher() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrowingKnives", "GetSlasher");

	Params::ThrowingKnives_GetSlasher Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK23.TricksterCharacterVFXInterface.HideWeapon
// (BlueprintCosmetic, Event, Public, BlueprintCallable, BlueprintEvent)

void ITricksterCharacterVFXInterface::HideWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TricksterCharacterVFXInterface", "HideWeapon");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function TheK23.TricksterCharacterVFXInterface.SetIsInCooldown
// (BlueprintCosmetic, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isInCooldown                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITricksterCharacterVFXInterface::SetIsInCooldown(bool isInCooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TricksterCharacterVFXInterface", "SetIsInCooldown");

	Params::TricksterCharacterVFXInterface_SetIsInCooldown Parms{};

	Parms.isInCooldown = isInCooldown;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function TheK23.TricksterCharacterVFXInterface.SetIsSuperModeReady
// (BlueprintCosmetic, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isSuperModeReady                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITricksterCharacterVFXInterface::SetIsSuperModeReady(bool isSuperModeReady)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TricksterCharacterVFXInterface", "SetIsSuperModeReady");

	Params::TricksterCharacterVFXInterface_SetIsSuperModeReady Parms{};

	Parms.isSuperModeReady = isSuperModeReady;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function TheK23.TricksterCharacterVFXInterface.SetKnivesVisibility
// (BlueprintCosmetic, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    leftKnife                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    rightKnife                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITricksterCharacterVFXInterface::SetKnivesVisibility(bool leftKnife, bool rightKnife)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TricksterCharacterVFXInterface", "SetKnivesVisibility");

	Params::TricksterCharacterVFXInterface_SetKnivesVisibility Parms{};

	Parms.leftKnife = leftKnife;
	Parms.rightKnife = rightKnife;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function TheK23.TricksterCharacterVFXInterface.SetSuperModeActive
// (BlueprintCosmetic, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITricksterCharacterVFXInterface::SetSuperModeActive(bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TricksterCharacterVFXInterface", "SetSuperModeActive");

	Params::TricksterCharacterVFXInterface_SetSuperModeActive Parms{};

	Parms.Active = Active;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function TheK23.TricksterCharacterVFXInterface.ShowWeapon
// (BlueprintCosmetic, Event, Public, BlueprintCallable, BlueprintEvent)

void ITricksterCharacterVFXInterface::ShowWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TricksterCharacterVFXInterface", "ShowWeapon");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function TheK23.TricksterSuperModeComponent.InitSuperModeMaxCharge
// (Final, Native, Private)

void UTricksterSuperModeComponent::InitSuperModeMaxCharge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TricksterSuperModeComponent", "InitSuperModeMaxCharge");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.TricksterSuperModeComponent.OnRepIsInCooldown
// (Final, Native, Private)

void UTricksterSuperModeComponent::OnRepIsInCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TricksterSuperModeComponent", "OnRepIsInCooldown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.TricksterSuperModeComponent.OnRepIsInSuperMode
// (Final, Native, Private)

void UTricksterSuperModeComponent::OnRepIsInSuperMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TricksterSuperModeComponent", "OnRepIsInSuperMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK23.TricksterSuperModeComponent.OnRepIsSuperModeReady
// (Final, Native, Private)

void UTricksterSuperModeComponent::OnRepIsSuperModeReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TricksterSuperModeComponent", "OnRepIsSuperModeReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

