#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheGunslinger

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "GameplayTagUtilities_structs.hpp"
#include "DBDAudio_structs.hpp"
#include "DBDBots_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DataTableUtilities_structs.hpp"
#include "StatSystem_structs.hpp"
#include "TheGunslinger_structs.hpp"
#include "DBDAnimation_classes.hpp"
#include "Projectile_classes.hpp"
#include "DBDCompetence_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "GameplayUtilities_structs.hpp"
#include "GameplayUtilities_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class TheGunslinger.AISkill_Interaction_HarpoonAim
// 0x0708 (0x09A8 - 0x02A0)
class UAISkill_Interaction_HarpoonAim final : public UAISkill_Interaction_KillerPower
{
public:
	struct FAITunableParameter                    MinimumAimRange;                                   // 0x02A0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    MaximumAimRange;                                   // 0x0300(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    MinimumFireRange;                                  // 0x0360(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    MaximumFireRange;                                  // 0x03C0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    StopAimAfterHiddenTime;                            // 0x0420(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    AimAttemptTimeAtNavlink;                           // 0x0480(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    HookTravelSpeed;                                   // 0x04E0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    CameraLerpOverride;                                // 0x0540(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    AimInaccuracy;                                     // 0x05A0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    AimStabilityMultiplier;                            // 0x0600(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    AimStabilityVariance;                              // 0x0660(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    AimVerticalInaccuracyMultiplier;                   // 0x06C0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    AimAdjustHeight;                                   // 0x0720(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    HighAimAdjustHeight;                               // 0x0780(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    ObstructionAdjustHeight;                           // 0x07E0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    FirePrecisionAngle;                                // 0x0840(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    AimRandomMaxTime;                                  // 0x08A0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    RandomFireDelayTime;                               // 0x0900(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_960[0x48];                                     // 0x0960(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_Interaction_HarpoonAim">();
	}
	static class UAISkill_Interaction_HarpoonAim* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_Interaction_HarpoonAim>();
	}
};
static_assert(alignof(UAISkill_Interaction_HarpoonAim) == 0x000008, "Wrong alignment on UAISkill_Interaction_HarpoonAim");
static_assert(sizeof(UAISkill_Interaction_HarpoonAim) == 0x0009A8, "Wrong size on UAISkill_Interaction_HarpoonAim");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, MinimumAimRange) == 0x0002A0, "Member 'UAISkill_Interaction_HarpoonAim::MinimumAimRange' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, MaximumAimRange) == 0x000300, "Member 'UAISkill_Interaction_HarpoonAim::MaximumAimRange' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, MinimumFireRange) == 0x000360, "Member 'UAISkill_Interaction_HarpoonAim::MinimumFireRange' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, MaximumFireRange) == 0x0003C0, "Member 'UAISkill_Interaction_HarpoonAim::MaximumFireRange' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, StopAimAfterHiddenTime) == 0x000420, "Member 'UAISkill_Interaction_HarpoonAim::StopAimAfterHiddenTime' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, AimAttemptTimeAtNavlink) == 0x000480, "Member 'UAISkill_Interaction_HarpoonAim::AimAttemptTimeAtNavlink' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, HookTravelSpeed) == 0x0004E0, "Member 'UAISkill_Interaction_HarpoonAim::HookTravelSpeed' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, CameraLerpOverride) == 0x000540, "Member 'UAISkill_Interaction_HarpoonAim::CameraLerpOverride' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, AimInaccuracy) == 0x0005A0, "Member 'UAISkill_Interaction_HarpoonAim::AimInaccuracy' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, AimStabilityMultiplier) == 0x000600, "Member 'UAISkill_Interaction_HarpoonAim::AimStabilityMultiplier' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, AimStabilityVariance) == 0x000660, "Member 'UAISkill_Interaction_HarpoonAim::AimStabilityVariance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, AimVerticalInaccuracyMultiplier) == 0x0006C0, "Member 'UAISkill_Interaction_HarpoonAim::AimVerticalInaccuracyMultiplier' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, AimAdjustHeight) == 0x000720, "Member 'UAISkill_Interaction_HarpoonAim::AimAdjustHeight' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, HighAimAdjustHeight) == 0x000780, "Member 'UAISkill_Interaction_HarpoonAim::HighAimAdjustHeight' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, ObstructionAdjustHeight) == 0x0007E0, "Member 'UAISkill_Interaction_HarpoonAim::ObstructionAdjustHeight' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, FirePrecisionAngle) == 0x000840, "Member 'UAISkill_Interaction_HarpoonAim::FirePrecisionAngle' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, AimRandomMaxTime) == 0x0008A0, "Member 'UAISkill_Interaction_HarpoonAim::AimRandomMaxTime' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HarpoonAim, RandomFireDelayTime) == 0x000900, "Member 'UAISkill_Interaction_HarpoonAim::RandomFireDelayTime' has a wrong offset!");

// Class TheGunslinger.AISkill_Interaction_HarpoonReload
// 0x0060 (0x02E0 - 0x0280)
class UAISkill_Interaction_HarpoonReload final : public UAISkill_Interaction
{
public:
	struct FAITunableParameter                    MinimumPathDistance;                               // 0x0280(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_Interaction_HarpoonReload">();
	}
	static class UAISkill_Interaction_HarpoonReload* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_Interaction_HarpoonReload>();
	}
};
static_assert(alignof(UAISkill_Interaction_HarpoonReload) == 0x000008, "Wrong alignment on UAISkill_Interaction_HarpoonReload");
static_assert(sizeof(UAISkill_Interaction_HarpoonReload) == 0x0002E0, "Wrong size on UAISkill_Interaction_HarpoonReload");
static_assert(offsetof(UAISkill_Interaction_HarpoonReload, MinimumPathDistance) == 0x000280, "Member 'UAISkill_Interaction_HarpoonReload::MinimumPathDistance' has a wrong offset!");

// Class TheGunslinger.ChainPlayerMovementStatusEffect
// 0x0058 (0x03F0 - 0x0398)
class UChainPlayerMovementStatusEffect : public UStatusEffect
{
public:
	struct FDBDTunableRowHandle                   _baseMovementSpeedMultiplier;                      // 0x0398(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _collisionMovementSpeedMultiplier;                 // 0x03C0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	class ARifleChain*                            _chain;                                            // 0x03E8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnIsChainCollidingChanged(bool IsColliding);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChainPlayerMovementStatusEffect">();
	}
	static class UChainPlayerMovementStatusEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChainPlayerMovementStatusEffect>();
	}
};
static_assert(alignof(UChainPlayerMovementStatusEffect) == 0x000008, "Wrong alignment on UChainPlayerMovementStatusEffect");
static_assert(sizeof(UChainPlayerMovementStatusEffect) == 0x0003F0, "Wrong size on UChainPlayerMovementStatusEffect");
static_assert(offsetof(UChainPlayerMovementStatusEffect, _baseMovementSpeedMultiplier) == 0x000398, "Member 'UChainPlayerMovementStatusEffect::_baseMovementSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UChainPlayerMovementStatusEffect, _collisionMovementSpeedMultiplier) == 0x0003C0, "Member 'UChainPlayerMovementStatusEffect::_collisionMovementSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UChainPlayerMovementStatusEffect, _chain) == 0x0003E8, "Member 'UChainPlayerMovementStatusEffect::_chain' has a wrong offset!");

// Class TheGunslinger.ChainKillerMovementStatusEffect
// 0x0070 (0x0460 - 0x03F0)
class UChainKillerMovementStatusEffect final : public UChainPlayerMovementStatusEffect
{
public:
	struct FDBDTunableRowHandle                   _backwardMovementSpeedMultiplier;                  // 0x03F0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _backwardMovementAngle;                            // 0x0418(0x0028)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_440[0x20];                                     // 0x0440(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChainKillerMovementStatusEffect">();
	}
	static class UChainKillerMovementStatusEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChainKillerMovementStatusEffect>();
	}
};
static_assert(alignof(UChainKillerMovementStatusEffect) == 0x000008, "Wrong alignment on UChainKillerMovementStatusEffect");
static_assert(sizeof(UChainKillerMovementStatusEffect) == 0x000460, "Wrong size on UChainKillerMovementStatusEffect");
static_assert(offsetof(UChainKillerMovementStatusEffect, _backwardMovementSpeedMultiplier) == 0x0003F0, "Member 'UChainKillerMovementStatusEffect::_backwardMovementSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UChainKillerMovementStatusEffect, _backwardMovementAngle) == 0x000418, "Member 'UChainKillerMovementStatusEffect::_backwardMovementAngle' has a wrong offset!");

// Class TheGunslinger.ChainLinkableComponent
// 0x0110 (0x01C8 - 0x00B8)
class UChainLinkableComponent : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x20];                                      // 0x00B8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UBaseCameraTargetingStrategy> _cameraTargetingStrategyClass;                   // 0x00D8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerReelInputAccelerationConstraintStrategy* _inputAccelerationStrategy;                // 0x00E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AKiller*                                _owningKiller;                                     // 0x00E8(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URiflePlayerLinker*                     _chainLink;                                        // 0x00F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _movementStatusEffectClass;                        // 0x00F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _linkedStatusEffectClass;                          // 0x0100(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_108[0x48];                                     // 0x0108(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTagStateBool                          _isLinkedLingering;                                // 0x0150(0x0048)(Net, NativeAccessSpecifierPrivate)
	class UChainPlayerMovementStatusEffect*       _movementStatusEffect;                             // 0x0198(0x0008)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A0[0x8];                                      // 0x01A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UBaseCameraTargetingStrategy*           _cameraStrategy;                                   // 0x01A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B0[0x18];                                     // 0x01B0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnKillerSet(class AKiller* Killer);
	void OnRep_OwningKiller();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChainLinkableComponent">();
	}
	static class UChainLinkableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChainLinkableComponent>();
	}
};
static_assert(alignof(UChainLinkableComponent) == 0x000008, "Wrong alignment on UChainLinkableComponent");
static_assert(sizeof(UChainLinkableComponent) == 0x0001C8, "Wrong size on UChainLinkableComponent");
static_assert(offsetof(UChainLinkableComponent, _cameraTargetingStrategyClass) == 0x0000D8, "Member 'UChainLinkableComponent::_cameraTargetingStrategyClass' has a wrong offset!");
static_assert(offsetof(UChainLinkableComponent, _inputAccelerationStrategy) == 0x0000E0, "Member 'UChainLinkableComponent::_inputAccelerationStrategy' has a wrong offset!");
static_assert(offsetof(UChainLinkableComponent, _owningKiller) == 0x0000E8, "Member 'UChainLinkableComponent::_owningKiller' has a wrong offset!");
static_assert(offsetof(UChainLinkableComponent, _chainLink) == 0x0000F0, "Member 'UChainLinkableComponent::_chainLink' has a wrong offset!");
static_assert(offsetof(UChainLinkableComponent, _movementStatusEffectClass) == 0x0000F8, "Member 'UChainLinkableComponent::_movementStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UChainLinkableComponent, _linkedStatusEffectClass) == 0x000100, "Member 'UChainLinkableComponent::_linkedStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UChainLinkableComponent, _isLinkedLingering) == 0x000150, "Member 'UChainLinkableComponent::_isLinkedLingering' has a wrong offset!");
static_assert(offsetof(UChainLinkableComponent, _movementStatusEffect) == 0x000198, "Member 'UChainLinkableComponent::_movementStatusEffect' has a wrong offset!");
static_assert(offsetof(UChainLinkableComponent, _cameraStrategy) == 0x0001A8, "Member 'UChainLinkableComponent::_cameraStrategy' has a wrong offset!");

// Class TheGunslinger.DeadMansSwitch
// 0x0028 (0x0488 - 0x0460)
class UDeadMansSwitch final : public UPerk
{
public:
	uint8                                         Pad_460[0x8];                                      // 0x0460(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _generatorBlockingDuration[0x3];                   // 0x0468(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGenerator*                             _blockedGenerator;                                 // 0x0478(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isActivated;                                      // 0x0480(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_BlockedGenerator(class AGenerator* previouslyBlockedGenerator);

	float GetActivationDurationAtLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DeadMansSwitch">();
	}
	static class UDeadMansSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDeadMansSwitch>();
	}
};
static_assert(alignof(UDeadMansSwitch) == 0x000008, "Wrong alignment on UDeadMansSwitch");
static_assert(sizeof(UDeadMansSwitch) == 0x000488, "Wrong size on UDeadMansSwitch");
static_assert(offsetof(UDeadMansSwitch, _generatorBlockingDuration) == 0x000468, "Member 'UDeadMansSwitch::_generatorBlockingDuration' has a wrong offset!");
static_assert(offsetof(UDeadMansSwitch, _blockedGenerator) == 0x000478, "Member 'UDeadMansSwitch::_blockedGenerator' has a wrong offset!");
static_assert(offsetof(UDeadMansSwitch, _isActivated) == 0x000480, "Member 'UDeadMansSwitch::_isActivated' has a wrong offset!");

// Class TheGunslinger.FireHarpoonRifleInteraction
// 0x0500 (0x0C70 - 0x0770)
class UFireHarpoonRifleInteraction final : public UInteractionDefinition
{
public:
	TMulticastInlineDelegate<void()>              OnFireHarpoon;                                     // 0x0768(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnHitPlayer;                                       // 0x0778(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_788[0x1];                                      // 0x0788(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EFireHarpoonRifleAimingInteractionSubState    _aimingSubState;                                   // 0x0789(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_78A[0x6];                                      // 0x078A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHarpoonProjectile*                     _harpoon;                                          // 0x0790(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ADBDPlayer*                             _collector;                                        // 0x0798(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _aimDownSightDuration;                             // 0x07A0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _aimDownSightZoom;                                 // 0x07C8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _aimDownSightMousePitchScaleMultiplier;            // 0x07F0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _aimDownSightMouseYawScaleMultiplier;              // 0x0818(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _aimDownSightGamepadPitchScaleMultiplier;          // 0x0840(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _aimDownSightGamepadYawScaleMultiplier;            // 0x0868(0x0028)(Edit, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _aimDownSightGamepadPitchCurve;                    // 0x0890(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _aimDownSightGamepadYawCurve;                      // 0x0898(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _aimDownSightRotationScaleAdjustmentTime;          // 0x08A0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _aimDownSightMovementSpeedMultiplier;              // 0x08C8(0x0080)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _fireDuration;                                     // 0x0948(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _fireRotationScaleMultiplier;                      // 0x0970(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _fireRotationScaleAdjustmentTime;                  // 0x0998(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _fireMovementSpeedMultiplier;                      // 0x09C0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _longRangeShotMinDistance;                         // 0x09E8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A10[0x8];                                      // 0x0A10(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _successMovementSpeedMultiplier;                   // 0x0A18(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _missMovementSpeedMultiplier;                      // 0x0A40(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _missShotCooldownDuration;                         // 0x0A68(0x0080)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _nearMissShotMaxDistance;                          // 0x0AE8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _successShotDuration;                              // 0x0B10(0x0028)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B38[0x138];                                    // 0x0B38(0x0138)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Server_SetAimingSubstate(EFireHarpoonRifleAimingInteractionSubState newState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FireHarpoonRifleInteraction">();
	}
	static class UFireHarpoonRifleInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFireHarpoonRifleInteraction>();
	}
};
static_assert(alignof(UFireHarpoonRifleInteraction) == 0x000010, "Wrong alignment on UFireHarpoonRifleInteraction");
static_assert(sizeof(UFireHarpoonRifleInteraction) == 0x000C70, "Wrong size on UFireHarpoonRifleInteraction");
static_assert(offsetof(UFireHarpoonRifleInteraction, OnFireHarpoon) == 0x000768, "Member 'UFireHarpoonRifleInteraction::OnFireHarpoon' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, OnHitPlayer) == 0x000778, "Member 'UFireHarpoonRifleInteraction::OnHitPlayer' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _aimingSubState) == 0x000789, "Member 'UFireHarpoonRifleInteraction::_aimingSubState' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _harpoon) == 0x000790, "Member 'UFireHarpoonRifleInteraction::_harpoon' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _collector) == 0x000798, "Member 'UFireHarpoonRifleInteraction::_collector' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _aimDownSightDuration) == 0x0007A0, "Member 'UFireHarpoonRifleInteraction::_aimDownSightDuration' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _aimDownSightZoom) == 0x0007C8, "Member 'UFireHarpoonRifleInteraction::_aimDownSightZoom' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _aimDownSightMousePitchScaleMultiplier) == 0x0007F0, "Member 'UFireHarpoonRifleInteraction::_aimDownSightMousePitchScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _aimDownSightMouseYawScaleMultiplier) == 0x000818, "Member 'UFireHarpoonRifleInteraction::_aimDownSightMouseYawScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _aimDownSightGamepadPitchScaleMultiplier) == 0x000840, "Member 'UFireHarpoonRifleInteraction::_aimDownSightGamepadPitchScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _aimDownSightGamepadYawScaleMultiplier) == 0x000868, "Member 'UFireHarpoonRifleInteraction::_aimDownSightGamepadYawScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _aimDownSightGamepadPitchCurve) == 0x000890, "Member 'UFireHarpoonRifleInteraction::_aimDownSightGamepadPitchCurve' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _aimDownSightGamepadYawCurve) == 0x000898, "Member 'UFireHarpoonRifleInteraction::_aimDownSightGamepadYawCurve' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _aimDownSightRotationScaleAdjustmentTime) == 0x0008A0, "Member 'UFireHarpoonRifleInteraction::_aimDownSightRotationScaleAdjustmentTime' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _aimDownSightMovementSpeedMultiplier) == 0x0008C8, "Member 'UFireHarpoonRifleInteraction::_aimDownSightMovementSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _fireDuration) == 0x000948, "Member 'UFireHarpoonRifleInteraction::_fireDuration' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _fireRotationScaleMultiplier) == 0x000970, "Member 'UFireHarpoonRifleInteraction::_fireRotationScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _fireRotationScaleAdjustmentTime) == 0x000998, "Member 'UFireHarpoonRifleInteraction::_fireRotationScaleAdjustmentTime' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _fireMovementSpeedMultiplier) == 0x0009C0, "Member 'UFireHarpoonRifleInteraction::_fireMovementSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _longRangeShotMinDistance) == 0x0009E8, "Member 'UFireHarpoonRifleInteraction::_longRangeShotMinDistance' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _successMovementSpeedMultiplier) == 0x000A18, "Member 'UFireHarpoonRifleInteraction::_successMovementSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _missMovementSpeedMultiplier) == 0x000A40, "Member 'UFireHarpoonRifleInteraction::_missMovementSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _missShotCooldownDuration) == 0x000A68, "Member 'UFireHarpoonRifleInteraction::_missShotCooldownDuration' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _nearMissShotMaxDistance) == 0x000AE8, "Member 'UFireHarpoonRifleInteraction::_nearMissShotMaxDistance' has a wrong offset!");
static_assert(offsetof(UFireHarpoonRifleInteraction, _successShotDuration) == 0x000B10, "Member 'UFireHarpoonRifleInteraction::_successShotDuration' has a wrong offset!");

// Class TheGunslinger.Gearhead
// 0x0020 (0x0480 - 0x0460)
class UGearhead final : public UPerk
{
public:
	TSubclassOf<class UStatusEffect>              _timedRevealToKillerEffect;                        // 0x0460(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _surviorAuraDurations[0x3];                        // 0x0468(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _perkDuration;                                     // 0x0474(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESkillCheckType                               _skillCheckType;                                   // 0x0478(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _basicAttack;                                      // 0x0479(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_47A[0x6];                                      // 0x047A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnSurvivorHealthStateChange(EHealthState oldDamageState, EHealthState newDamageState);
	void Authority_OnSurvivorRemoved(class ASurvivor* removedPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Gearhead">();
	}
	static class UGearhead* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGearhead>();
	}
};
static_assert(alignof(UGearhead) == 0x000008, "Wrong alignment on UGearhead");
static_assert(sizeof(UGearhead) == 0x000480, "Wrong size on UGearhead");
static_assert(offsetof(UGearhead, _timedRevealToKillerEffect) == 0x000460, "Member 'UGearhead::_timedRevealToKillerEffect' has a wrong offset!");
static_assert(offsetof(UGearhead, _surviorAuraDurations) == 0x000468, "Member 'UGearhead::_surviorAuraDurations' has a wrong offset!");
static_assert(offsetof(UGearhead, _perkDuration) == 0x000474, "Member 'UGearhead::_perkDuration' has a wrong offset!");
static_assert(offsetof(UGearhead, _skillCheckType) == 0x000478, "Member 'UGearhead::_skillCheckType' has a wrong offset!");
static_assert(offsetof(UGearhead, _basicAttack) == 0x000479, "Member 'UGearhead::_basicAttack' has a wrong offset!");

// Class TheGunslinger.GunslingerAnimInstance
// 0x0210 (0x0930 - 0x0720)
class UGunslingerAnimInstance final : public UKillerAnimInstance
{
public:
	bool                                          _isAiming;                                         // 0x0720(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isAimingWarmup;                                   // 0x0721(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isAimingCooldown;                                 // 0x0722(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isAimingReadyToShoot;                             // 0x0723(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isAimingWarmupOrReadyToShoot;                     // 0x0724(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isFiring;                                         // 0x0725(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInMissShotCooldown;                             // 0x0726(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInSuccessShot;                                  // 0x0727(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isLinked;                                         // 0x0728(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isReeling;                                        // 0x0729(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInGunState;                                     // 0x072A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_72B[0x1];                                      // 0x072B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _idleToAimAnimPlayrate;                            // 0x072C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _aimToIdleAnimPlayrate;                            // 0x0730(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _fireAnimPlayRate;                                 // 0x0734(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _missShotCooldownAnimPlayRate;                     // 0x0738(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _successShotAnimPlayRate;                          // 0x073C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _idleToAimAnim;                                    // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _aimToIdleAnim;                                    // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _fireAnim;                                         // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _missShotCooldownAnim;                             // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _successShotAnim;                                  // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _idleToAimAnimDuration;                            // 0x0768(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _aimToIdleAnimDuration;                            // 0x0790(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _fireAnimDuration;                                 // 0x07B8(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FTunableStat                           _missShotCooldownAnimDuration;                     // 0x07E0(0x0080)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _successShotAnimDuration;                          // 0x0860(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_888[0xA8];                                     // 0x0888(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GunslingerAnimInstance">();
	}
	static class UGunslingerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGunslingerAnimInstance>();
	}
};
static_assert(alignof(UGunslingerAnimInstance) == 0x000010, "Wrong alignment on UGunslingerAnimInstance");
static_assert(sizeof(UGunslingerAnimInstance) == 0x000930, "Wrong size on UGunslingerAnimInstance");
static_assert(offsetof(UGunslingerAnimInstance, _isAiming) == 0x000720, "Member 'UGunslingerAnimInstance::_isAiming' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _isAimingWarmup) == 0x000721, "Member 'UGunslingerAnimInstance::_isAimingWarmup' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _isAimingCooldown) == 0x000722, "Member 'UGunslingerAnimInstance::_isAimingCooldown' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _isAimingReadyToShoot) == 0x000723, "Member 'UGunslingerAnimInstance::_isAimingReadyToShoot' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _isAimingWarmupOrReadyToShoot) == 0x000724, "Member 'UGunslingerAnimInstance::_isAimingWarmupOrReadyToShoot' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _isFiring) == 0x000725, "Member 'UGunslingerAnimInstance::_isFiring' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _isInMissShotCooldown) == 0x000726, "Member 'UGunslingerAnimInstance::_isInMissShotCooldown' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _isInSuccessShot) == 0x000727, "Member 'UGunslingerAnimInstance::_isInSuccessShot' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _isLinked) == 0x000728, "Member 'UGunslingerAnimInstance::_isLinked' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _isReeling) == 0x000729, "Member 'UGunslingerAnimInstance::_isReeling' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _isInGunState) == 0x00072A, "Member 'UGunslingerAnimInstance::_isInGunState' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _idleToAimAnimPlayrate) == 0x00072C, "Member 'UGunslingerAnimInstance::_idleToAimAnimPlayrate' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _aimToIdleAnimPlayrate) == 0x000730, "Member 'UGunslingerAnimInstance::_aimToIdleAnimPlayrate' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _fireAnimPlayRate) == 0x000734, "Member 'UGunslingerAnimInstance::_fireAnimPlayRate' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _missShotCooldownAnimPlayRate) == 0x000738, "Member 'UGunslingerAnimInstance::_missShotCooldownAnimPlayRate' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _successShotAnimPlayRate) == 0x00073C, "Member 'UGunslingerAnimInstance::_successShotAnimPlayRate' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _idleToAimAnim) == 0x000740, "Member 'UGunslingerAnimInstance::_idleToAimAnim' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _aimToIdleAnim) == 0x000748, "Member 'UGunslingerAnimInstance::_aimToIdleAnim' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _fireAnim) == 0x000750, "Member 'UGunslingerAnimInstance::_fireAnim' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _missShotCooldownAnim) == 0x000758, "Member 'UGunslingerAnimInstance::_missShotCooldownAnim' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _successShotAnim) == 0x000760, "Member 'UGunslingerAnimInstance::_successShotAnim' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _idleToAimAnimDuration) == 0x000768, "Member 'UGunslingerAnimInstance::_idleToAimAnimDuration' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _aimToIdleAnimDuration) == 0x000790, "Member 'UGunslingerAnimInstance::_aimToIdleAnimDuration' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _fireAnimDuration) == 0x0007B8, "Member 'UGunslingerAnimInstance::_fireAnimDuration' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _missShotCooldownAnimDuration) == 0x0007E0, "Member 'UGunslingerAnimInstance::_missShotCooldownAnimDuration' has a wrong offset!");
static_assert(offsetof(UGunslingerAnimInstance, _successShotAnimDuration) == 0x000860, "Member 'UGunslingerAnimInstance::_successShotAnimDuration' has a wrong offset!");

// Class TheGunslinger.GunslingerCameraTargetingStrategy
// 0x0018 (0x0068 - 0x0050)
class UGunslingerCameraTargetingStrategy final : public UBaseCameraTargetingStrategy
{
public:
	class FName                                   _cameraSocketName;                                 // 0x0050(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   _survivorHarpoonSocketName;                        // 0x005C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GunslingerCameraTargetingStrategy">();
	}
	static class UGunslingerCameraTargetingStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGunslingerCameraTargetingStrategy>();
	}
};
static_assert(alignof(UGunslingerCameraTargetingStrategy) == 0x000008, "Wrong alignment on UGunslingerCameraTargetingStrategy");
static_assert(sizeof(UGunslingerCameraTargetingStrategy) == 0x000068, "Wrong size on UGunslingerCameraTargetingStrategy");
static_assert(offsetof(UGunslingerCameraTargetingStrategy, _cameraSocketName) == 0x000050, "Member 'UGunslingerCameraTargetingStrategy::_cameraSocketName' has a wrong offset!");
static_assert(offsetof(UGunslingerCameraTargetingStrategy, _survivorHarpoonSocketName) == 0x00005C, "Member 'UGunslingerCameraTargetingStrategy::_survivorHarpoonSocketName' has a wrong offset!");

// Class TheGunslinger.GunslingerEffectsComponent
// 0x00A0 (0x0158 - 0x00B8)
class UGunslingerEffectsComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(bool isAiming)> OnIsAimingChanged;                                 // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              PlayOutOfAmmoSound;                                // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         _minimumTimeBetweenBroadcast;                      // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHarpoonRifle*                          _rifle;                                            // 0x00E0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x70];                                      // 0x00E8(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multicast_PlayOutOfAmmoSound();
	void OnItemUsedStateChanged(bool IsPressed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GunslingerEffectsComponent">();
	}
	static class UGunslingerEffectsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGunslingerEffectsComponent>();
	}
};
static_assert(alignof(UGunslingerEffectsComponent) == 0x000008, "Wrong alignment on UGunslingerEffectsComponent");
static_assert(sizeof(UGunslingerEffectsComponent) == 0x000158, "Wrong size on UGunslingerEffectsComponent");
static_assert(offsetof(UGunslingerEffectsComponent, OnIsAimingChanged) == 0x0000B8, "Member 'UGunslingerEffectsComponent::OnIsAimingChanged' has a wrong offset!");
static_assert(offsetof(UGunslingerEffectsComponent, PlayOutOfAmmoSound) == 0x0000C8, "Member 'UGunslingerEffectsComponent::PlayOutOfAmmoSound' has a wrong offset!");
static_assert(offsetof(UGunslingerEffectsComponent, _minimumTimeBetweenBroadcast) == 0x0000D8, "Member 'UGunslingerEffectsComponent::_minimumTimeBetweenBroadcast' has a wrong offset!");
static_assert(offsetof(UGunslingerEffectsComponent, _rifle) == 0x0000E0, "Member 'UGunslingerEffectsComponent::_rifle' has a wrong offset!");

// Class TheGunslinger.GunslingerUtilities
// 0x0000 (0x0030 - 0x0030)
class UGunslingerUtilities final : public UBlueprintFunctionLibrary
{
public:
	static class AHarpoonRifle* GetHarpoonRifle(class ADBDPlayer* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GunslingerUtilities">();
	}
	static class UGunslingerUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGunslingerUtilities>();
	}
};
static_assert(alignof(UGunslingerUtilities) == 0x000008, "Wrong alignment on UGunslingerUtilities");
static_assert(sizeof(UGunslingerUtilities) == 0x000030, "Wrong size on UGunslingerUtilities");

// Class TheGunslinger.HarpoonChainPositioner
// 0x00B0 (0x0168 - 0x00B8)
class UHarpoonChainPositioner final : public UActorComponent
{
public:
	TSubclassOf<class AHarpoonProp>               _harpoonPropClass;                                 // 0x00B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   _survivorAttachSocket;                             // 0x00C0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   _animationSocket;                                  // 0x00CC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _reelBackToRifleSpeed;                             // 0x00D8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	float                                         _harpoonMinimumSnapBackDistance;                   // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _harpoonMaximumSnapBackDistance;                   // 0x0108(0x0028)(Edit, NativeAccessSpecifierPrivate)
	class AHarpoonProp*                           _harpoonProp;                                      // 0x0130(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AHarpoonProjectile*                     _harpoonProjectile;                                // 0x0138(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ADBDPlayer*                             _collector;                                        // 0x0140(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ARifleChain*                            _chain;                                            // 0x0150(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_158[0x10];                                     // 0x0158(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AttachToAnimSocket();
	void AttachToRifle();
	void OnCurrentHarpoonChanged(class AActor* currentHarpoon);
	void OnHarpoonLoadedOnRifle();
	void OnHarpoonTravelingChanged(bool isTravelling);
	void OnOwnerCollected(class ADBDPlayer* collector);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HarpoonChainPositioner">();
	}
	static class UHarpoonChainPositioner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHarpoonChainPositioner>();
	}
};
static_assert(alignof(UHarpoonChainPositioner) == 0x000008, "Wrong alignment on UHarpoonChainPositioner");
static_assert(sizeof(UHarpoonChainPositioner) == 0x000168, "Wrong size on UHarpoonChainPositioner");
static_assert(offsetof(UHarpoonChainPositioner, _harpoonPropClass) == 0x0000B8, "Member 'UHarpoonChainPositioner::_harpoonPropClass' has a wrong offset!");
static_assert(offsetof(UHarpoonChainPositioner, _survivorAttachSocket) == 0x0000C0, "Member 'UHarpoonChainPositioner::_survivorAttachSocket' has a wrong offset!");
static_assert(offsetof(UHarpoonChainPositioner, _animationSocket) == 0x0000CC, "Member 'UHarpoonChainPositioner::_animationSocket' has a wrong offset!");
static_assert(offsetof(UHarpoonChainPositioner, _reelBackToRifleSpeed) == 0x0000D8, "Member 'UHarpoonChainPositioner::_reelBackToRifleSpeed' has a wrong offset!");
static_assert(offsetof(UHarpoonChainPositioner, _harpoonMinimumSnapBackDistance) == 0x000100, "Member 'UHarpoonChainPositioner::_harpoonMinimumSnapBackDistance' has a wrong offset!");
static_assert(offsetof(UHarpoonChainPositioner, _harpoonMaximumSnapBackDistance) == 0x000108, "Member 'UHarpoonChainPositioner::_harpoonMaximumSnapBackDistance' has a wrong offset!");
static_assert(offsetof(UHarpoonChainPositioner, _harpoonProp) == 0x000130, "Member 'UHarpoonChainPositioner::_harpoonProp' has a wrong offset!");
static_assert(offsetof(UHarpoonChainPositioner, _harpoonProjectile) == 0x000138, "Member 'UHarpoonChainPositioner::_harpoonProjectile' has a wrong offset!");
static_assert(offsetof(UHarpoonChainPositioner, _collector) == 0x000140, "Member 'UHarpoonChainPositioner::_collector' has a wrong offset!");
static_assert(offsetof(UHarpoonChainPositioner, _chain) == 0x000150, "Member 'UHarpoonChainPositioner::_chain' has a wrong offset!");

// Class TheGunslinger.HarpoonedSurvivorSubAnimInstance
// 0x00B0 (0x0690 - 0x05E0)
class UHarpoonedSurvivorSubAnimInstance final : public UBaseSurvivorAnimInstance
{
public:
	uint8                                         Pad_5E0[0x8];                                      // 0x05E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _linkedMaxSpeed;                                   // 0x05E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _timeBeforeHarpoonHitReset;                        // 0x05EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   _hitHarpoonedEnterEvent;                           // 0x05F0(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   _chainBreakEnterEvent;                             // 0x05FC(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChainLinked;                                    // 0x0608(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingReeled;                                    // 0x0609(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hasLinkInput;                                     // 0x060A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_60B[0x1];                                      // 0x060B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _linkInputX;                                       // 0x060C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _linkInputY;                                       // 0x0610(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _chainBreakTrigger;                                // 0x0614(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _triggerHarpoonHit;                                // 0x0615(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_616[0x2];                                      // 0x0616(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _harpoonHitTurnAnimNormalizedStartTime;            // 0x0618(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _harpoonHitAnimTurnRight;                          // 0x061C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrawling;                                       // 0x061D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isIdle;                                           // 0x061E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61F[0x1];                                      // 0x061F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _walkAnimSpeed;                                    // 0x0620(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _yaw;                                              // 0x0624(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _pitch;                                            // 0x0628(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_62C[0x64];                                     // 0x062C(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HarpoonedSurvivorSubAnimInstance">();
	}
	static class UHarpoonedSurvivorSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHarpoonedSurvivorSubAnimInstance>();
	}
};
static_assert(alignof(UHarpoonedSurvivorSubAnimInstance) == 0x000010, "Wrong alignment on UHarpoonedSurvivorSubAnimInstance");
static_assert(sizeof(UHarpoonedSurvivorSubAnimInstance) == 0x000690, "Wrong size on UHarpoonedSurvivorSubAnimInstance");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _linkedMaxSpeed) == 0x0005E8, "Member 'UHarpoonedSurvivorSubAnimInstance::_linkedMaxSpeed' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _timeBeforeHarpoonHitReset) == 0x0005EC, "Member 'UHarpoonedSurvivorSubAnimInstance::_timeBeforeHarpoonHitReset' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _hitHarpoonedEnterEvent) == 0x0005F0, "Member 'UHarpoonedSurvivorSubAnimInstance::_hitHarpoonedEnterEvent' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _chainBreakEnterEvent) == 0x0005FC, "Member 'UHarpoonedSurvivorSubAnimInstance::_chainBreakEnterEvent' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _isChainLinked) == 0x000608, "Member 'UHarpoonedSurvivorSubAnimInstance::_isChainLinked' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _isBeingReeled) == 0x000609, "Member 'UHarpoonedSurvivorSubAnimInstance::_isBeingReeled' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _hasLinkInput) == 0x00060A, "Member 'UHarpoonedSurvivorSubAnimInstance::_hasLinkInput' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _linkInputX) == 0x00060C, "Member 'UHarpoonedSurvivorSubAnimInstance::_linkInputX' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _linkInputY) == 0x000610, "Member 'UHarpoonedSurvivorSubAnimInstance::_linkInputY' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _chainBreakTrigger) == 0x000614, "Member 'UHarpoonedSurvivorSubAnimInstance::_chainBreakTrigger' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _triggerHarpoonHit) == 0x000615, "Member 'UHarpoonedSurvivorSubAnimInstance::_triggerHarpoonHit' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _harpoonHitTurnAnimNormalizedStartTime) == 0x000618, "Member 'UHarpoonedSurvivorSubAnimInstance::_harpoonHitTurnAnimNormalizedStartTime' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _harpoonHitAnimTurnRight) == 0x00061C, "Member 'UHarpoonedSurvivorSubAnimInstance::_harpoonHitAnimTurnRight' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _isCrawling) == 0x00061D, "Member 'UHarpoonedSurvivorSubAnimInstance::_isCrawling' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _isIdle) == 0x00061E, "Member 'UHarpoonedSurvivorSubAnimInstance::_isIdle' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _walkAnimSpeed) == 0x000620, "Member 'UHarpoonedSurvivorSubAnimInstance::_walkAnimSpeed' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _yaw) == 0x000624, "Member 'UHarpoonedSurvivorSubAnimInstance::_yaw' has a wrong offset!");
static_assert(offsetof(UHarpoonedSurvivorSubAnimInstance, _pitch) == 0x000628, "Member 'UHarpoonedSurvivorSubAnimInstance::_pitch' has a wrong offset!");

// Class TheGunslinger.HarpoonLauncher
// 0x0058 (0x0200 - 0x01A8)
class UHarpoonLauncher final : public UKillerProjectileLauncher
{
public:
	struct FDBDTunableRowHandle                   _launchSpeed;                                      // 0x01A8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _launchDistanceFromCamera;                         // 0x01D0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	float                                         _launchZOffset;                                    // 0x01F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HarpoonLauncher">();
	}
	static class UHarpoonLauncher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHarpoonLauncher>();
	}
};
static_assert(alignof(UHarpoonLauncher) == 0x000008, "Wrong alignment on UHarpoonLauncher");
static_assert(sizeof(UHarpoonLauncher) == 0x000200, "Wrong size on UHarpoonLauncher");
static_assert(offsetof(UHarpoonLauncher, _launchSpeed) == 0x0001A8, "Member 'UHarpoonLauncher::_launchSpeed' has a wrong offset!");
static_assert(offsetof(UHarpoonLauncher, _launchDistanceFromCamera) == 0x0001D0, "Member 'UHarpoonLauncher::_launchDistanceFromCamera' has a wrong offset!");
static_assert(offsetof(UHarpoonLauncher, _launchZOffset) == 0x0001F8, "Member 'UHarpoonLauncher::_launchZOffset' has a wrong offset!");

// Class TheGunslinger.HarpoonProjectile
// 0x00E0 (0x04B8 - 0x03D8)
class AHarpoonProjectile final : public AKillerProjectile
{
public:
	uint8                                         Pad_3D8[0x88];                                     // 0x03D8(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _launchDistanceFromCamera;                         // 0x0460(0x0028)(Edit, NativeAccessSpecifierPrivate)
	class UHarpoonProjectileMovementComponent*    _movement;                                         // 0x0488(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    _environmentCollider;                              // 0x0490(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    _targetCollider;                                   // 0x0498(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDBDSkeletalMeshComponentBudgeted*      _skeletalMeshComponent;                            // 0x04A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPoolableActorComponent*                _poolableActorComponent;                           // 0x04A8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B0[0x8];                                      // 0x04B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHarpoonStop(const struct FHitResult& Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HarpoonProjectile">();
	}
	static class AHarpoonProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHarpoonProjectile>();
	}
};
static_assert(alignof(AHarpoonProjectile) == 0x000008, "Wrong alignment on AHarpoonProjectile");
static_assert(sizeof(AHarpoonProjectile) == 0x0004B8, "Wrong size on AHarpoonProjectile");
static_assert(offsetof(AHarpoonProjectile, _launchDistanceFromCamera) == 0x000460, "Member 'AHarpoonProjectile::_launchDistanceFromCamera' has a wrong offset!");
static_assert(offsetof(AHarpoonProjectile, _movement) == 0x000488, "Member 'AHarpoonProjectile::_movement' has a wrong offset!");
static_assert(offsetof(AHarpoonProjectile, _environmentCollider) == 0x000490, "Member 'AHarpoonProjectile::_environmentCollider' has a wrong offset!");
static_assert(offsetof(AHarpoonProjectile, _targetCollider) == 0x000498, "Member 'AHarpoonProjectile::_targetCollider' has a wrong offset!");
static_assert(offsetof(AHarpoonProjectile, _skeletalMeshComponent) == 0x0004A0, "Member 'AHarpoonProjectile::_skeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(AHarpoonProjectile, _poolableActorComponent) == 0x0004A8, "Member 'AHarpoonProjectile::_poolableActorComponent' has a wrong offset!");

// Class TheGunslinger.HarpoonProjectileMovementComponent
// 0x0030 (0x0320 - 0x02F0)
class UHarpoonProjectileMovementComponent final : public UPhysicsBasedProjectileMovementComponent
{
public:
	struct FDBDTunableRowHandle                   _maxTravelDistance;                                // 0x02F0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_318[0x8];                                      // 0x0318(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HarpoonProjectileMovementComponent">();
	}
	static class UHarpoonProjectileMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHarpoonProjectileMovementComponent>();
	}
};
static_assert(alignof(UHarpoonProjectileMovementComponent) == 0x000010, "Wrong alignment on UHarpoonProjectileMovementComponent");
static_assert(sizeof(UHarpoonProjectileMovementComponent) == 0x000320, "Wrong size on UHarpoonProjectileMovementComponent");
static_assert(offsetof(UHarpoonProjectileMovementComponent, _maxTravelDistance) == 0x0002F0, "Member 'UHarpoonProjectileMovementComponent::_maxTravelDistance' has a wrong offset!");

// Class TheGunslinger.HarpoonProp
// 0x0010 (0x02B0 - 0x02A0)
class AHarpoonProp final : public AActor
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDSkeletalMeshComponentBudgeted*      _skeletalMeshComponent;                            // 0x02A8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HarpoonProp">();
	}
	static class AHarpoonProp* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHarpoonProp>();
	}
};
static_assert(alignof(AHarpoonProp) == 0x000008, "Wrong alignment on AHarpoonProp");
static_assert(sizeof(AHarpoonProp) == 0x0002B0, "Wrong size on AHarpoonProp");
static_assert(offsetof(AHarpoonProp, _skeletalMeshComponent) == 0x0002A8, "Member 'AHarpoonProp::_skeletalMeshComponent' has a wrong offset!");

// Class TheGunslinger.HarpoonProviderComponent
// 0x0000 (0x00E8 - 0x00E8)
class UHarpoonProviderComponent final : public USingleProjectileProviderComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HarpoonProviderComponent">();
	}
	static class UHarpoonProviderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHarpoonProviderComponent>();
	}
};
static_assert(alignof(UHarpoonProviderComponent) == 0x000008, "Wrong alignment on UHarpoonProviderComponent");
static_assert(sizeof(UHarpoonProviderComponent) == 0x0000E8, "Wrong size on UHarpoonProviderComponent");

// Class TheGunslinger.HarpoonRifle
// 0x00C0 (0x0618 - 0x0558)
class AHarpoonRifle final : public ACollectable
{
public:
	uint8                                         Pad_558[0x18];                                     // 0x0558(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UChainLinkableComponent>    _survivorLinkableClass;                            // 0x0570(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UChainLinkableComponent>    _killerLinkableClass;                              // 0x0578(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class ARifleChain>                _chainClass;                                       // 0x0580(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   _rifleMuzzleSocket;                                // 0x0588(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   _rifleHarpoonLoadingSocket;                        // 0x0594(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _crowActiveRange;                                  // 0x05A0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	class UHarpoonLauncher*                       _launcher;                                         // 0x05C8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHarpoonProviderComponent*              _harpoonProvider;                                  // 0x05D0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ARifleChain*                            _chain;                                            // 0x05D8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URifleChainTensionComponent*            _chainTensionComponent;                            // 0x05E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChargeableComponent*                   _chainTensionChargeable;                           // 0x05E8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URiflePlayerLinker*                     _playerLinker;                                     // 0x05F0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHarpoonChainPositioner*                _harpoonChainPositioner;                           // 0x05F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFireHarpoonRifleInteraction*           _fireInteraction;                                  // 0x0600(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTriggerableActivatorComponent*         _crowsActivatorComponent;                          // 0x0608(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_610[0x8];                                      // 0x0610(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnFireHarpoon();

	class ARifleChain* GetChain() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HarpoonRifle">();
	}
	static class AHarpoonRifle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHarpoonRifle>();
	}
};
static_assert(alignof(AHarpoonRifle) == 0x000008, "Wrong alignment on AHarpoonRifle");
static_assert(sizeof(AHarpoonRifle) == 0x000618, "Wrong size on AHarpoonRifle");
static_assert(offsetof(AHarpoonRifle, _survivorLinkableClass) == 0x000570, "Member 'AHarpoonRifle::_survivorLinkableClass' has a wrong offset!");
static_assert(offsetof(AHarpoonRifle, _killerLinkableClass) == 0x000578, "Member 'AHarpoonRifle::_killerLinkableClass' has a wrong offset!");
static_assert(offsetof(AHarpoonRifle, _chainClass) == 0x000580, "Member 'AHarpoonRifle::_chainClass' has a wrong offset!");
static_assert(offsetof(AHarpoonRifle, _rifleMuzzleSocket) == 0x000588, "Member 'AHarpoonRifle::_rifleMuzzleSocket' has a wrong offset!");
static_assert(offsetof(AHarpoonRifle, _rifleHarpoonLoadingSocket) == 0x000594, "Member 'AHarpoonRifle::_rifleHarpoonLoadingSocket' has a wrong offset!");
static_assert(offsetof(AHarpoonRifle, _crowActiveRange) == 0x0005A0, "Member 'AHarpoonRifle::_crowActiveRange' has a wrong offset!");
static_assert(offsetof(AHarpoonRifle, _launcher) == 0x0005C8, "Member 'AHarpoonRifle::_launcher' has a wrong offset!");
static_assert(offsetof(AHarpoonRifle, _harpoonProvider) == 0x0005D0, "Member 'AHarpoonRifle::_harpoonProvider' has a wrong offset!");
static_assert(offsetof(AHarpoonRifle, _chain) == 0x0005D8, "Member 'AHarpoonRifle::_chain' has a wrong offset!");
static_assert(offsetof(AHarpoonRifle, _chainTensionComponent) == 0x0005E0, "Member 'AHarpoonRifle::_chainTensionComponent' has a wrong offset!");
static_assert(offsetof(AHarpoonRifle, _chainTensionChargeable) == 0x0005E8, "Member 'AHarpoonRifle::_chainTensionChargeable' has a wrong offset!");
static_assert(offsetof(AHarpoonRifle, _playerLinker) == 0x0005F0, "Member 'AHarpoonRifle::_playerLinker' has a wrong offset!");
static_assert(offsetof(AHarpoonRifle, _harpoonChainPositioner) == 0x0005F8, "Member 'AHarpoonRifle::_harpoonChainPositioner' has a wrong offset!");
static_assert(offsetof(AHarpoonRifle, _fireInteraction) == 0x000600, "Member 'AHarpoonRifle::_fireInteraction' has a wrong offset!");
static_assert(offsetof(AHarpoonRifle, _crowsActivatorComponent) == 0x000608, "Member 'AHarpoonRifle::_crowsActivatorComponent' has a wrong offset!");

// Class TheGunslinger.HarpoonRifleAnimInstance
// 0x0010 (0x0360 - 0x0350)
class UHarpoonRifleAnimInstance final : public UAnimInstance
{
public:
	class ARifleChain*                            _chain;                                            // 0x0350(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _chainUnwindingSpeed;                              // 0x0358(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HarpoonRifleAnimInstance">();
	}
	static class UHarpoonRifleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHarpoonRifleAnimInstance>();
	}
};
static_assert(alignof(UHarpoonRifleAnimInstance) == 0x000010, "Wrong alignment on UHarpoonRifleAnimInstance");
static_assert(sizeof(UHarpoonRifleAnimInstance) == 0x000360, "Wrong size on UHarpoonRifleAnimInstance");
static_assert(offsetof(UHarpoonRifleAnimInstance, _chain) == 0x000350, "Member 'UHarpoonRifleAnimInstance::_chain' has a wrong offset!");
static_assert(offsetof(UHarpoonRifleAnimInstance, _chainUnwindingSpeed) == 0x000358, "Member 'UHarpoonRifleAnimInstance::_chainUnwindingSpeed' has a wrong offset!");

// Class TheGunslinger.HellshireIronAddon
// 0x0018 (0x0318 - 0x0300)
class UHellshireIronAddon final : public UItemAddon
{
public:
	float                                         _undetectableDurationPostHarpoon;                  // 0x0300(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _undetectableTimedEffectClass;                     // 0x0308(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _statusEffect;                                     // 0x0310(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HellshireIronAddon">();
	}
	static class UHellshireIronAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHellshireIronAddon>();
	}
};
static_assert(alignof(UHellshireIronAddon) == 0x000008, "Wrong alignment on UHellshireIronAddon");
static_assert(sizeof(UHellshireIronAddon) == 0x000318, "Wrong size on UHellshireIronAddon");
static_assert(offsetof(UHellshireIronAddon, _undetectableDurationPostHarpoon) == 0x000300, "Member 'UHellshireIronAddon::_undetectableDurationPostHarpoon' has a wrong offset!");
static_assert(offsetof(UHellshireIronAddon, _undetectableTimedEffectClass) == 0x000308, "Member 'UHellshireIronAddon::_undetectableTimedEffectClass' has a wrong offset!");
static_assert(offsetof(UHellshireIronAddon, _statusEffect) == 0x000310, "Member 'UHellshireIronAddon::_statusEffect' has a wrong offset!");

// Class TheGunslinger.HexRetribution
// 0x0020 (0x0500 - 0x04E0)
class UHexRetribution final : public UHexPerk
{
public:
	float                                         _obliviousDurationByLevels[0x3];                   // 0x04E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _auraRevealDuration;                               // 0x04EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _revealEffectClass;                                // 0x04F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _obliviousEffectClass;                             // 0x04F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HexRetribution">();
	}
	static class UHexRetribution* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHexRetribution>();
	}
};
static_assert(alignof(UHexRetribution) == 0x000008, "Wrong alignment on UHexRetribution");
static_assert(sizeof(UHexRetribution) == 0x000500, "Wrong size on UHexRetribution");
static_assert(offsetof(UHexRetribution, _obliviousDurationByLevels) == 0x0004E0, "Member 'UHexRetribution::_obliviousDurationByLevels' has a wrong offset!");
static_assert(offsetof(UHexRetribution, _auraRevealDuration) == 0x0004EC, "Member 'UHexRetribution::_auraRevealDuration' has a wrong offset!");
static_assert(offsetof(UHexRetribution, _revealEffectClass) == 0x0004F0, "Member 'UHexRetribution::_revealEffectClass' has a wrong offset!");
static_assert(offsetof(UHexRetribution, _obliviousEffectClass) == 0x0004F8, "Member 'UHexRetribution::_obliviousEffectClass' has a wrong offset!");

// Class TheGunslinger.HoneyLocustThornsAddon
// 0x0010 (0x0310 - 0x0300)
class UHoneyLocustThornsAddon final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _mangledStatusEffectClass;                         // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _mangledEffectLifetime;                            // 0x0308(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoneyLocustThornsAddon">();
	}
	static class UHoneyLocustThornsAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHoneyLocustThornsAddon>();
	}
};
static_assert(alignof(UHoneyLocustThornsAddon) == 0x000008, "Wrong alignment on UHoneyLocustThornsAddon");
static_assert(sizeof(UHoneyLocustThornsAddon) == 0x000310, "Wrong size on UHoneyLocustThornsAddon");
static_assert(offsetof(UHoneyLocustThornsAddon, _mangledStatusEffectClass) == 0x000300, "Member 'UHoneyLocustThornsAddon::_mangledStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UHoneyLocustThornsAddon, _mangledEffectLifetime) == 0x000308, "Member 'UHoneyLocustThornsAddon::_mangledEffectLifetime' has a wrong offset!");

// Class TheGunslinger.GunslingerHarpoon
// 0x0000 (0x0000 - 0x0000)
class IGunslingerHarpoon final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GunslingerHarpoon">();
	}
	static class IGunslingerHarpoon* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGunslingerHarpoon>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IGunslingerHarpoon) == 0x000001, "Wrong alignment on IGunslingerHarpoon");
static_assert(sizeof(IGunslingerHarpoon) == 0x000001, "Wrong size on IGunslingerHarpoon");

// Class TheGunslinger.IridescentCoinAddon
// 0x0038 (0x0338 - 0x0300)
class UIridescentCoinAddon final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _exposedStatusEffectClass;                         // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _exposedStatusEffect;                              // 0x0308(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_310[0x28];                                     // 0x0310(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IridescentCoinAddon">();
	}
	static class UIridescentCoinAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIridescentCoinAddon>();
	}
};
static_assert(alignof(UIridescentCoinAddon) == 0x000008, "Wrong alignment on UIridescentCoinAddon");
static_assert(sizeof(UIridescentCoinAddon) == 0x000338, "Wrong size on UIridescentCoinAddon");
static_assert(offsetof(UIridescentCoinAddon, _exposedStatusEffectClass) == 0x000300, "Member 'UIridescentCoinAddon::_exposedStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UIridescentCoinAddon, _exposedStatusEffect) == 0x000308, "Member 'UIridescentCoinAddon::_exposedStatusEffect' has a wrong offset!");

// Class TheGunslinger.K19GameStateComponent
// 0x0008 (0x00C0 - 0x00B8)
class UK19GameStateComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K19GameStateComponent">();
	}
	static class UK19GameStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK19GameStateComponent>();
	}
};
static_assert(alignof(UK19GameStateComponent) == 0x000008, "Wrong alignment on UK19GameStateComponent");
static_assert(sizeof(UK19GameStateComponent) == 0x0000C0, "Wrong size on UK19GameStateComponent");

// Class TheGunslinger.K19Utilities
// 0x0000 (0x0030 - 0x0030)
class UK19Utilities final : public UBlueprintFunctionLibrary
{
public:
	static void K19CreateDecalSpawner(const class UObject* WorldContextObject, class FName decalSpawnerName, class UMaterialInterface* decalMaterial, int32 PoolSize, ESpawnerStrategyType spawnerStrategyType);
	static void K19ReleaseDecalSpawner(const class UObject* WorldContextObject, class FName decalSpawnerName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K19Utilities">();
	}
	static class UK19Utilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK19Utilities>();
	}
};
static_assert(alignof(UK19Utilities) == 0x000008, "Wrong alignment on UK19Utilities");
static_assert(sizeof(UK19Utilities) == 0x000030, "Wrong size on UK19Utilities");

// Class TheGunslinger.KillerChainLinkableComponent
// 0x0018 (0x01E0 - 0x01C8)
class UKillerChainLinkableComponent final : public UChainLinkableComponent
{
public:
	uint8                                         Pad_1C8[0x18];                                     // 0x01C8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerChainLinkableComponent">();
	}
	static class UKillerChainLinkableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerChainLinkableComponent>();
	}
};
static_assert(alignof(UKillerChainLinkableComponent) == 0x000008, "Wrong alignment on UKillerChainLinkableComponent");
static_assert(sizeof(UKillerChainLinkableComponent) == 0x0001E0, "Wrong size on UKillerChainLinkableComponent");

// Class TheGunslinger.PlayerReelInputAccelerationConstraintStrategy
// 0x0040 (0x00F8 - 0x00B8)
class UPlayerReelInputAccelerationConstraintStrategy final : public UBaseInputAccelerationConstraintStrategy
{
public:
	uint8                                         Pad_B8[0x40];                                      // 0x00B8(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerReelInputAccelerationConstraintStrategy">();
	}
	static class UPlayerReelInputAccelerationConstraintStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerReelInputAccelerationConstraintStrategy>();
	}
};
static_assert(alignof(UPlayerReelInputAccelerationConstraintStrategy) == 0x000008, "Wrong alignment on UPlayerReelInputAccelerationConstraintStrategy");
static_assert(sizeof(UPlayerReelInputAccelerationConstraintStrategy) == 0x0000F8, "Wrong size on UPlayerReelInputAccelerationConstraintStrategy");

// Class TheGunslinger.PrisonChainAddon
// 0x0030 (0x0330 - 0x0300)
class UPrisonChainAddon final : public UItemAddon
{
public:
	struct FDBDTunableRowHandle                   _maxTensionCharge;                                 // 0x0300(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         _tensionChargeModifier;                            // 0x0328(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrisonChainAddon">();
	}
	static class UPrisonChainAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrisonChainAddon>();
	}
};
static_assert(alignof(UPrisonChainAddon) == 0x000008, "Wrong alignment on UPrisonChainAddon");
static_assert(sizeof(UPrisonChainAddon) == 0x000330, "Wrong size on UPrisonChainAddon");
static_assert(offsetof(UPrisonChainAddon, _maxTensionCharge) == 0x000300, "Member 'UPrisonChainAddon::_maxTensionCharge' has a wrong offset!");
static_assert(offsetof(UPrisonChainAddon, _tensionChargeModifier) == 0x000328, "Member 'UPrisonChainAddon::_tensionChargeModifier' has a wrong offset!");

// Class TheGunslinger.ReelChainInteraction
// 0x0040 (0x07B0 - 0x0770)
class UReelChainInteraction final : public UInteractionDefinition
{
public:
	float                                         _frontMovementAngle;                               // 0x0768(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_76C[0x4];                                      // 0x076C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _minimumFrontVelocity;                             // 0x0770(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_774[0x4];                                      // 0x0774(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             _linkedPlayer;                                     // 0x0778(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_780[0x30];                                     // 0x0780(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReelChainInteraction">();
	}
	static class UReelChainInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReelChainInteraction>();
	}
};
static_assert(alignof(UReelChainInteraction) == 0x000010, "Wrong alignment on UReelChainInteraction");
static_assert(sizeof(UReelChainInteraction) == 0x0007B0, "Wrong size on UReelChainInteraction");
static_assert(offsetof(UReelChainInteraction, _frontMovementAngle) == 0x000768, "Member 'UReelChainInteraction::_frontMovementAngle' has a wrong offset!");
static_assert(offsetof(UReelChainInteraction, _minimumFrontVelocity) == 0x000770, "Member 'UReelChainInteraction::_minimumFrontVelocity' has a wrong offset!");
static_assert(offsetof(UReelChainInteraction, _linkedPlayer) == 0x000778, "Member 'UReelChainInteraction::_linkedPlayer' has a wrong offset!");

// Class TheGunslinger.ReloadHarpoonRifleInteraction
// 0x00C0 (0x0980 - 0x08C0)
class UReloadHarpoonRifleInteraction final : public UChargeableInteractionDefinition
{
public:
	struct FDBDTunableRowHandle                   _reloadTime;                                       // 0x08C0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _movementSpeedMultiplier;                          // 0x08E8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _rotationScaleMultiplier;                          // 0x0910(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _rotationScaleAdjustmentTime;                      // 0x0938(0x0028)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_960[0x20];                                     // 0x0960(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReloadHarpoonRifleInteraction">();
	}
	static class UReloadHarpoonRifleInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReloadHarpoonRifleInteraction>();
	}
};
static_assert(alignof(UReloadHarpoonRifleInteraction) == 0x000010, "Wrong alignment on UReloadHarpoonRifleInteraction");
static_assert(sizeof(UReloadHarpoonRifleInteraction) == 0x000980, "Wrong size on UReloadHarpoonRifleInteraction");
static_assert(offsetof(UReloadHarpoonRifleInteraction, _reloadTime) == 0x0008C0, "Member 'UReloadHarpoonRifleInteraction::_reloadTime' has a wrong offset!");
static_assert(offsetof(UReloadHarpoonRifleInteraction, _movementSpeedMultiplier) == 0x0008E8, "Member 'UReloadHarpoonRifleInteraction::_movementSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UReloadHarpoonRifleInteraction, _rotationScaleMultiplier) == 0x000910, "Member 'UReloadHarpoonRifleInteraction::_rotationScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UReloadHarpoonRifleInteraction, _rotationScaleAdjustmentTime) == 0x000938, "Member 'UReloadHarpoonRifleInteraction::_rotationScaleAdjustmentTime' has a wrong offset!");

// Class TheGunslinger.RifleChain
// 0x02D0 (0x0570 - 0x02A0)
class ARifleChain final : public AActor
{
public:
	TMulticastInlineDelegate<void(class AActor* Projectile)> OnProjectileSet;                        // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsColliding)> OnIsCollidingChanged;                           // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAkComponent*                           _chainCenterAkComponent;                           // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          _collisionLoopStartEvent;                          // 0x02C8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          _collisionLoopEndEvent;                            // 0x02D0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FAkSoundLoop>                   _collisionSoundLoops;                              // 0x02D8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class AKiller*                                _owningKiller;                                     // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _sphereTraceRadius;                                // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _timeBetweenTrace;                                 // 0x02F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TScriptInterface<class IGunslingerHarpoon>    _harpoon;                                          // 0x02F8(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ADBDPlayer*                             _linkedPlayer;                                     // 0x0308(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_310[0x260];                                    // 0x0310(0x0260)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindToLinkedPlayer(class ADBDPlayer* linkedPlayer);
	void Cosmetic_OnAttachmentChanged(bool IsAttached);
	void OnAttachToPlayer(class ADBDPlayer* Player);
	void OnLaunch();
	void OnLinkedPlayerPerspectiveChanged(class ADBDPlayer* Player);
	void OnReelBackToRifle();
	void OnUnattachFromPlayer(class ADBDPlayer* Player);
	int32 SpawnChainPoints(const struct FVector& Start, const struct FVector& Stop, class UCurveFloat* influenceCurve, float pointYPosition, float pointZPosition, bool useOffset, class USplineComponent* spline);
	void UnbindFromLinkedPlayer();
	void UpdateChainMesh(class UInstancedStaticMeshComponent* Mesh, class USplineComponent* spline, float alpha);

	struct FVector GetChainEnd() const;
	struct FVector GetChainStart() const;
	class URifleChainTensionComponent* GetChainTensionComponent() const;
	TArray<struct FHitResult> GetFirstAndLastCollisionHits() const;
	class AKiller* GetOwningKiller() const;
	class URiflePlayerLinker* GetRiflePlayerLinker() const;
	float GetUnwindingSpeed() const;
	bool IsColliding() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RifleChain">();
	}
	static class ARifleChain* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARifleChain>();
	}
};
static_assert(alignof(ARifleChain) == 0x000008, "Wrong alignment on ARifleChain");
static_assert(sizeof(ARifleChain) == 0x000570, "Wrong size on ARifleChain");
static_assert(offsetof(ARifleChain, OnProjectileSet) == 0x0002A0, "Member 'ARifleChain::OnProjectileSet' has a wrong offset!");
static_assert(offsetof(ARifleChain, OnIsCollidingChanged) == 0x0002B0, "Member 'ARifleChain::OnIsCollidingChanged' has a wrong offset!");
static_assert(offsetof(ARifleChain, _chainCenterAkComponent) == 0x0002C0, "Member 'ARifleChain::_chainCenterAkComponent' has a wrong offset!");
static_assert(offsetof(ARifleChain, _collisionLoopStartEvent) == 0x0002C8, "Member 'ARifleChain::_collisionLoopStartEvent' has a wrong offset!");
static_assert(offsetof(ARifleChain, _collisionLoopEndEvent) == 0x0002D0, "Member 'ARifleChain::_collisionLoopEndEvent' has a wrong offset!");
static_assert(offsetof(ARifleChain, _collisionSoundLoops) == 0x0002D8, "Member 'ARifleChain::_collisionSoundLoops' has a wrong offset!");
static_assert(offsetof(ARifleChain, _owningKiller) == 0x0002E8, "Member 'ARifleChain::_owningKiller' has a wrong offset!");
static_assert(offsetof(ARifleChain, _sphereTraceRadius) == 0x0002F0, "Member 'ARifleChain::_sphereTraceRadius' has a wrong offset!");
static_assert(offsetof(ARifleChain, _timeBetweenTrace) == 0x0002F4, "Member 'ARifleChain::_timeBetweenTrace' has a wrong offset!");
static_assert(offsetof(ARifleChain, _harpoon) == 0x0002F8, "Member 'ARifleChain::_harpoon' has a wrong offset!");
static_assert(offsetof(ARifleChain, _linkedPlayer) == 0x000308, "Member 'ARifleChain::_linkedPlayer' has a wrong offset!");

// Class TheGunslinger.RifleChainTensionComponent
// 0x01F0 (0x02A8 - 0x00B8)
class URifleChainTensionComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool IsBuildingTension)> OnIsBuildingTensionChanged;               // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x18];                                      // 0x00D0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _isBuildingTension;                                // 0x00E8(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USurvivorChainLinkableComponent*        _targetlinkable;                                   // 0x00F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _maxTensionCharge;                                 // 0x0108(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _baseTensionRate;                                  // 0x0130(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _collisionTensionRate;                             // 0x0158(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _survivorPullingTensionRate;                       // 0x0180(0x0080)(Edit, NativeAccessSpecifierPrivate)
	struct FNonTunableStat                        _currentTensionRate;                               // 0x0200(0x0060)(Edit, NativeAccessSpecifierPrivate)
	EProgressModifier                             _progressModifierForSurvivors;                     // 0x0260(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _chargeProgressDescriptionText;                    // 0x0268(0x0018)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_280[0x18];                                     // 0x0280(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class ARifleChain*                            _chain;                                            // 0x0298(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_IsBuildingTension();
	void OnTensionChargeableCompletionChanged(bool COMPLETED, const TArray<class AActor*>& instigatorsForCompletion);

	float GetProgress() const;
	bool IsBuildingTension() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RifleChainTensionComponent">();
	}
	static class URifleChainTensionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URifleChainTensionComponent>();
	}
};
static_assert(alignof(URifleChainTensionComponent) == 0x000008, "Wrong alignment on URifleChainTensionComponent");
static_assert(sizeof(URifleChainTensionComponent) == 0x0002A8, "Wrong size on URifleChainTensionComponent");
static_assert(offsetof(URifleChainTensionComponent, OnIsBuildingTensionChanged) == 0x0000C0, "Member 'URifleChainTensionComponent::OnIsBuildingTensionChanged' has a wrong offset!");
static_assert(offsetof(URifleChainTensionComponent, _isBuildingTension) == 0x0000E8, "Member 'URifleChainTensionComponent::_isBuildingTension' has a wrong offset!");
static_assert(offsetof(URifleChainTensionComponent, _targetlinkable) == 0x0000F0, "Member 'URifleChainTensionComponent::_targetlinkable' has a wrong offset!");
static_assert(offsetof(URifleChainTensionComponent, _maxTensionCharge) == 0x000108, "Member 'URifleChainTensionComponent::_maxTensionCharge' has a wrong offset!");
static_assert(offsetof(URifleChainTensionComponent, _baseTensionRate) == 0x000130, "Member 'URifleChainTensionComponent::_baseTensionRate' has a wrong offset!");
static_assert(offsetof(URifleChainTensionComponent, _collisionTensionRate) == 0x000158, "Member 'URifleChainTensionComponent::_collisionTensionRate' has a wrong offset!");
static_assert(offsetof(URifleChainTensionComponent, _survivorPullingTensionRate) == 0x000180, "Member 'URifleChainTensionComponent::_survivorPullingTensionRate' has a wrong offset!");
static_assert(offsetof(URifleChainTensionComponent, _currentTensionRate) == 0x000200, "Member 'URifleChainTensionComponent::_currentTensionRate' has a wrong offset!");
static_assert(offsetof(URifleChainTensionComponent, _progressModifierForSurvivors) == 0x000260, "Member 'URifleChainTensionComponent::_progressModifierForSurvivors' has a wrong offset!");
static_assert(offsetof(URifleChainTensionComponent, _chargeProgressDescriptionText) == 0x000268, "Member 'URifleChainTensionComponent::_chargeProgressDescriptionText' has a wrong offset!");
static_assert(offsetof(URifleChainTensionComponent, _chain) == 0x000298, "Member 'URifleChainTensionComponent::_chain' has a wrong offset!");

// Class TheGunslinger.RiflePlayerLinker
// 0x01D8 (0x0290 - 0x00B8)
class URiflePlayerLinker final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class ADBDPlayer* linkedPlayer)> OnLinkedPlayerSet;                // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             _linkedPlayer;                                     // 0x00C8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ADBDPlayer*                             _lastLinkedPlayer;                                 // 0x00D0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ADBDPlayer*                             _linkedPlayerDuringAttack;                         // 0x00D8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ADBDPlayer*                             _linkOwner;                                        // 0x00E0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _desiredLinkLength;                                // 0x00E8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EC[0x54];                                      // 0x00EC(0x0054)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _elasticLength;                                    // 0x0140(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _minimumLinkLength;                                // 0x0168(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _breakFreeCloseRangeMaxDistance;                   // 0x0190(0x0028)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x4];                                      // 0x01B8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _movementLinkReductionThreshold;                   // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _movementAccelerationTreshold;                     // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C4[0xCC];                                     // 0x01C4(0x00CC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Client_OnAuthorityTensionBreakChain(class ADBDPlayer* Player);
	void Multicast_Link(class ADBDPlayer* linkedPlayer);
	void Multicast_Unlink();
	void Server_OnClientConfirmTensionBreakChain(class ADBDPlayer* Player);

	class ADBDPlayer* GetLinkedPlayer() const;
	class ADBDPlayer* GetLinkOwner() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RiflePlayerLinker">();
	}
	static class URiflePlayerLinker* GetDefaultObj()
	{
		return GetDefaultObjImpl<URiflePlayerLinker>();
	}
};
static_assert(alignof(URiflePlayerLinker) == 0x000008, "Wrong alignment on URiflePlayerLinker");
static_assert(sizeof(URiflePlayerLinker) == 0x000290, "Wrong size on URiflePlayerLinker");
static_assert(offsetof(URiflePlayerLinker, OnLinkedPlayerSet) == 0x0000B8, "Member 'URiflePlayerLinker::OnLinkedPlayerSet' has a wrong offset!");
static_assert(offsetof(URiflePlayerLinker, _linkedPlayer) == 0x0000C8, "Member 'URiflePlayerLinker::_linkedPlayer' has a wrong offset!");
static_assert(offsetof(URiflePlayerLinker, _lastLinkedPlayer) == 0x0000D0, "Member 'URiflePlayerLinker::_lastLinkedPlayer' has a wrong offset!");
static_assert(offsetof(URiflePlayerLinker, _linkedPlayerDuringAttack) == 0x0000D8, "Member 'URiflePlayerLinker::_linkedPlayerDuringAttack' has a wrong offset!");
static_assert(offsetof(URiflePlayerLinker, _linkOwner) == 0x0000E0, "Member 'URiflePlayerLinker::_linkOwner' has a wrong offset!");
static_assert(offsetof(URiflePlayerLinker, _desiredLinkLength) == 0x0000E8, "Member 'URiflePlayerLinker::_desiredLinkLength' has a wrong offset!");
static_assert(offsetof(URiflePlayerLinker, _elasticLength) == 0x000140, "Member 'URiflePlayerLinker::_elasticLength' has a wrong offset!");
static_assert(offsetof(URiflePlayerLinker, _minimumLinkLength) == 0x000168, "Member 'URiflePlayerLinker::_minimumLinkLength' has a wrong offset!");
static_assert(offsetof(URiflePlayerLinker, _breakFreeCloseRangeMaxDistance) == 0x000190, "Member 'URiflePlayerLinker::_breakFreeCloseRangeMaxDistance' has a wrong offset!");
static_assert(offsetof(URiflePlayerLinker, _movementLinkReductionThreshold) == 0x0001BC, "Member 'URiflePlayerLinker::_movementLinkReductionThreshold' has a wrong offset!");
static_assert(offsetof(URiflePlayerLinker, _movementAccelerationTreshold) == 0x0001C0, "Member 'URiflePlayerLinker::_movementAccelerationTreshold' has a wrong offset!");

// Class TheGunslinger.RustedSpikeAddon
// 0x0010 (0x0310 - 0x0300)
class URustedSpikeAddon final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _mangledStatusEffectClass;                         // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _mangledEffectLifetime;                            // 0x0308(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RustedSpikeAddon">();
	}
	static class URustedSpikeAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<URustedSpikeAddon>();
	}
};
static_assert(alignof(URustedSpikeAddon) == 0x000008, "Wrong alignment on URustedSpikeAddon");
static_assert(sizeof(URustedSpikeAddon) == 0x000310, "Wrong size on URustedSpikeAddon");
static_assert(offsetof(URustedSpikeAddon, _mangledStatusEffectClass) == 0x000300, "Member 'URustedSpikeAddon::_mangledStatusEffectClass' has a wrong offset!");
static_assert(offsetof(URustedSpikeAddon, _mangledEffectLifetime) == 0x000308, "Member 'URustedSpikeAddon::_mangledEffectLifetime' has a wrong offset!");

// Class TheGunslinger.SurvivorChainLinkableComponent
// 0x0118 (0x02E0 - 0x01C8)
class USurvivorChainLinkableComponent final : public UChainLinkableComponent
{
public:
	struct FDBDTunableRowHandle                   _pullbackAngle;                                    // 0x01C8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F0[0x8];                                      // 0x01F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _immobilizationDuration;                           // 0x01F8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _linkableInteractionTags;                          // 0x0220(0x0020)(Edit, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _cancelableInteractionTags;                        // 0x0240(0x0020)(Edit, NativeAccessSpecifierPrivate)
	TSubclassOf<class USurvivorReelVelocityAdditiveStrategy> _velocityAdditiveStrategyClass;         // 0x0260(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize10                  _linkedMoveInput;                                  // 0x0270(0x0018)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _immobilizationEffect;                             // 0x0288(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _immobilizationStatusEffectClass;                  // 0x0290(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USurvivorReelVelocityAdditiveStrategy*  _velocityAdditiveStrategy;                         // 0x0298(0x0008)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A0[0x40];                                     // 0x02A0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLocallyObservedChanged(class ADBDPlayer* Player);
	void OnSightStatusChanged(ESightStatus status);
	void OnSurvivorBreakFreeFromHarpoon(const struct FGameplayTag& gameEventType, const struct FGameEventData& GameEventData);

	void OnRep_VelocityAdditiveStrategy() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorChainLinkableComponent">();
	}
	static class USurvivorChainLinkableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorChainLinkableComponent>();
	}
};
static_assert(alignof(USurvivorChainLinkableComponent) == 0x000008, "Wrong alignment on USurvivorChainLinkableComponent");
static_assert(sizeof(USurvivorChainLinkableComponent) == 0x0002E0, "Wrong size on USurvivorChainLinkableComponent");
static_assert(offsetof(USurvivorChainLinkableComponent, _pullbackAngle) == 0x0001C8, "Member 'USurvivorChainLinkableComponent::_pullbackAngle' has a wrong offset!");
static_assert(offsetof(USurvivorChainLinkableComponent, _immobilizationDuration) == 0x0001F8, "Member 'USurvivorChainLinkableComponent::_immobilizationDuration' has a wrong offset!");
static_assert(offsetof(USurvivorChainLinkableComponent, _linkableInteractionTags) == 0x000220, "Member 'USurvivorChainLinkableComponent::_linkableInteractionTags' has a wrong offset!");
static_assert(offsetof(USurvivorChainLinkableComponent, _cancelableInteractionTags) == 0x000240, "Member 'USurvivorChainLinkableComponent::_cancelableInteractionTags' has a wrong offset!");
static_assert(offsetof(USurvivorChainLinkableComponent, _velocityAdditiveStrategyClass) == 0x000260, "Member 'USurvivorChainLinkableComponent::_velocityAdditiveStrategyClass' has a wrong offset!");
static_assert(offsetof(USurvivorChainLinkableComponent, _linkedMoveInput) == 0x000270, "Member 'USurvivorChainLinkableComponent::_linkedMoveInput' has a wrong offset!");
static_assert(offsetof(USurvivorChainLinkableComponent, _immobilizationEffect) == 0x000288, "Member 'USurvivorChainLinkableComponent::_immobilizationEffect' has a wrong offset!");
static_assert(offsetof(USurvivorChainLinkableComponent, _immobilizationStatusEffectClass) == 0x000290, "Member 'USurvivorChainLinkableComponent::_immobilizationStatusEffectClass' has a wrong offset!");
static_assert(offsetof(USurvivorChainLinkableComponent, _velocityAdditiveStrategy) == 0x000298, "Member 'USurvivorChainLinkableComponent::_velocityAdditiveStrategy' has a wrong offset!");

// Class TheGunslinger.SurvivorReelVelocityAdditiveStrategy
// 0x0160 (0x0218 - 0x00B8)
class USurvivorReelVelocityAdditiveStrategy final : public UBaseCharacterVelocityCalculationStrategy
{
public:
	struct FTunableStat                           _reelSpeed;                                        // 0x00B8(0x0080)(Edit, NativeAccessSpecifierPrivate)
	float                                         _minimumLinkLengthDelta;                           // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _maximumVelocityAdditive;                          // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AKiller*                                _owningKiller;                                     // 0x0140(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTagStateBool                          _isBeingReeled;                                    // 0x0148(0x0048)(Net, NativeAccessSpecifierPrivate)
	struct FTagStateBool                          _isBeingPulled;                                    // 0x0190(0x0048)(Net, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D8[0x40];                                     // 0x01D8(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_OwningKiller();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorReelVelocityAdditiveStrategy">();
	}
	static class USurvivorReelVelocityAdditiveStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorReelVelocityAdditiveStrategy>();
	}
};
static_assert(alignof(USurvivorReelVelocityAdditiveStrategy) == 0x000008, "Wrong alignment on USurvivorReelVelocityAdditiveStrategy");
static_assert(sizeof(USurvivorReelVelocityAdditiveStrategy) == 0x000218, "Wrong size on USurvivorReelVelocityAdditiveStrategy");
static_assert(offsetof(USurvivorReelVelocityAdditiveStrategy, _reelSpeed) == 0x0000B8, "Member 'USurvivorReelVelocityAdditiveStrategy::_reelSpeed' has a wrong offset!");
static_assert(offsetof(USurvivorReelVelocityAdditiveStrategy, _minimumLinkLengthDelta) == 0x000138, "Member 'USurvivorReelVelocityAdditiveStrategy::_minimumLinkLengthDelta' has a wrong offset!");
static_assert(offsetof(USurvivorReelVelocityAdditiveStrategy, _maximumVelocityAdditive) == 0x00013C, "Member 'USurvivorReelVelocityAdditiveStrategy::_maximumVelocityAdditive' has a wrong offset!");
static_assert(offsetof(USurvivorReelVelocityAdditiveStrategy, _owningKiller) == 0x000140, "Member 'USurvivorReelVelocityAdditiveStrategy::_owningKiller' has a wrong offset!");
static_assert(offsetof(USurvivorReelVelocityAdditiveStrategy, _isBeingReeled) == 0x000148, "Member 'USurvivorReelVelocityAdditiveStrategy::_isBeingReeled' has a wrong offset!");
static_assert(offsetof(USurvivorReelVelocityAdditiveStrategy, _isBeingPulled) == 0x000190, "Member 'USurvivorReelVelocityAdditiveStrategy::_isBeingPulled' has a wrong offset!");

}

