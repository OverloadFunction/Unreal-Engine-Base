#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Halloween2023

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "DBDBots_classes.hpp"
#include "Engine_classes.hpp"
#include "DBDInteraction_classes.hpp"
#include "DataTableUtilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class Halloween2023.AISkill_FindInteractable_UnstableRift
// 0x0120 (0x0438 - 0x0318)
class UAISkill_FindInteractable_UnstableRift final : public UAISkill_FindInteractable
{
public:
	struct FAITunableParameter                    MaxVoidEnergyWeight;                               // 0x0318(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    MaxDistanceWeight;                                 // 0x0378(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    RiftDistanceToReachMaxDistanceWeight;              // 0x03D8(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_FindInteractable_UnstableRift">();
	}
	static class UAISkill_FindInteractable_UnstableRift* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_FindInteractable_UnstableRift>();
	}
};
static_assert(alignof(UAISkill_FindInteractable_UnstableRift) == 0x000008, "Wrong alignment on UAISkill_FindInteractable_UnstableRift");
static_assert(sizeof(UAISkill_FindInteractable_UnstableRift) == 0x000438, "Wrong size on UAISkill_FindInteractable_UnstableRift");
static_assert(offsetof(UAISkill_FindInteractable_UnstableRift, MaxVoidEnergyWeight) == 0x000318, "Member 'UAISkill_FindInteractable_UnstableRift::MaxVoidEnergyWeight' has a wrong offset!");
static_assert(offsetof(UAISkill_FindInteractable_UnstableRift, MaxDistanceWeight) == 0x000378, "Member 'UAISkill_FindInteractable_UnstableRift::MaxDistanceWeight' has a wrong offset!");
static_assert(offsetof(UAISkill_FindInteractable_UnstableRift, RiftDistanceToReachMaxDistanceWeight) == 0x0003D8, "Member 'UAISkill_FindInteractable_UnstableRift::RiftDistanceToReachMaxDistanceWeight' has a wrong offset!");

// Class Halloween2023.AISkill_FindInteractable_VoidZoneTeleporter
// 0x0000 (0x0318 - 0x0318)
class UAISkill_FindInteractable_VoidZoneTeleporter final : public UAISkill_FindInteractable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_FindInteractable_VoidZoneTeleporter">();
	}
	static class UAISkill_FindInteractable_VoidZoneTeleporter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_FindInteractable_VoidZoneTeleporter>();
	}
};
static_assert(alignof(UAISkill_FindInteractable_VoidZoneTeleporter) == 0x000008, "Wrong alignment on UAISkill_FindInteractable_VoidZoneTeleporter");
static_assert(sizeof(UAISkill_FindInteractable_VoidZoneTeleporter) == 0x000318, "Wrong size on UAISkill_FindInteractable_VoidZoneTeleporter");

// Class Halloween2023.AISkill_Find_StandardWorldHaunt
// 0x00D0 (0x03D0 - 0x0300)
class UAISkill_Find_StandardWorldHaunt final : public UAISkill_Find
{
public:
	class FName                                   BBIsFleeing;                                       // 0x0300(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAITunableParameter                    MaxDistanceWeight;                                 // 0x0310(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    HauntDistanceToReachMaxDistanceWeightIfFleeing;    // 0x0370(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_Find_StandardWorldHaunt">();
	}
	static class UAISkill_Find_StandardWorldHaunt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_Find_StandardWorldHaunt>();
	}
};
static_assert(alignof(UAISkill_Find_StandardWorldHaunt) == 0x000008, "Wrong alignment on UAISkill_Find_StandardWorldHaunt");
static_assert(sizeof(UAISkill_Find_StandardWorldHaunt) == 0x0003D0, "Wrong size on UAISkill_Find_StandardWorldHaunt");
static_assert(offsetof(UAISkill_Find_StandardWorldHaunt, BBIsFleeing) == 0x000300, "Member 'UAISkill_Find_StandardWorldHaunt::BBIsFleeing' has a wrong offset!");
static_assert(offsetof(UAISkill_Find_StandardWorldHaunt, MaxDistanceWeight) == 0x000310, "Member 'UAISkill_Find_StandardWorldHaunt::MaxDistanceWeight' has a wrong offset!");
static_assert(offsetof(UAISkill_Find_StandardWorldHaunt, HauntDistanceToReachMaxDistanceWeightIfFleeing) == 0x000370, "Member 'UAISkill_Find_StandardWorldHaunt::HauntDistanceToReachMaxDistanceWeightIfFleeing' has a wrong offset!");

// Class Halloween2023.AISkill_Find_VoidWorldHaunt
// 0x0000 (0x0300 - 0x0300)
class UAISkill_Find_VoidWorldHaunt final : public UAISkill_Find
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_Find_VoidWorldHaunt">();
	}
	static class UAISkill_Find_VoidWorldHaunt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_Find_VoidWorldHaunt>();
	}
};
static_assert(alignof(UAISkill_Find_VoidWorldHaunt) == 0x000008, "Wrong alignment on UAISkill_Find_VoidWorldHaunt");
static_assert(sizeof(UAISkill_Find_VoidWorldHaunt) == 0x000300, "Wrong size on UAISkill_Find_VoidWorldHaunt");

// Class Halloween2023.CaptureVoidWorldHauntInteraction
// 0x0030 (0x08F0 - 0x08C0)
class UCaptureVoidWorldHauntInteraction final : public UChargeableInteractionDefinition
{
public:
	class FText                                   _standardInteractionString;                        // 0x08C0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                   _contestedInteractionString;                       // 0x08D8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CaptureVoidWorldHauntInteraction">();
	}
	static class UCaptureVoidWorldHauntInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCaptureVoidWorldHauntInteraction>();
	}
};
static_assert(alignof(UCaptureVoidWorldHauntInteraction) == 0x000010, "Wrong alignment on UCaptureVoidWorldHauntInteraction");
static_assert(sizeof(UCaptureVoidWorldHauntInteraction) == 0x0008F0, "Wrong size on UCaptureVoidWorldHauntInteraction");
static_assert(offsetof(UCaptureVoidWorldHauntInteraction, _standardInteractionString) == 0x0008C0, "Member 'UCaptureVoidWorldHauntInteraction::_standardInteractionString' has a wrong offset!");
static_assert(offsetof(UCaptureVoidWorldHauntInteraction, _contestedInteractionString) == 0x0008D8, "Member 'UCaptureVoidWorldHauntInteraction::_contestedInteractionString' has a wrong offset!");

// Class Halloween2023.HalloweenHauntStunInteraction
// 0x0020 (0x0790 - 0x0770)
class UHalloweenHauntStunInteraction final : public UGenericStunInteractionDefinition
{
public:
	struct FDBDTunableRowHandle                   _stunDuration;                                     // 0x0768(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HalloweenHauntStunInteraction">();
	}
	static class UHalloweenHauntStunInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHalloweenHauntStunInteraction>();
	}
};
static_assert(alignof(UHalloweenHauntStunInteraction) == 0x000010, "Wrong alignment on UHalloweenHauntStunInteraction");
static_assert(sizeof(UHalloweenHauntStunInteraction) == 0x000790, "Wrong size on UHalloweenHauntStunInteraction");
static_assert(offsetof(UHalloweenHauntStunInteraction, _stunDuration) == 0x000768, "Member 'UHalloweenHauntStunInteraction::_stunDuration' has a wrong offset!");

// Class Halloween2023.HauntComponent
// 0x0058 (0x0110 - 0x00B8)
class UHauntComponent : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class ADBDPlayer* Player)> Cosmetic_PlayerEnterHauntRadius;        // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class ADBDPlayer* Player)> Cosmetic_PlayerLeavesHauntRadius;       // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const EPlayerRole PlayerRole, bool IsInteractable)> Cosmetic_EnableHauntForInteraction; // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	EPlayerRole                                   _winningPlayerRole;                                // 0x00E8(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInteractable;                                   // 0x00E9(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EOfferingEffectType                           _offeringEffectTypeNeeded;                         // 0x00EA(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EB[0x5];                                       // 0x00EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   _stateTagsPreventingInteraction;                   // 0x00F0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UPlayersInZoneTracker*                  _slasherInZoneTracker;                             // 0x0100(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayersInZoneTracker*                  _survivorsInZoneTracker;                           // 0x0108(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnEventComponentsCreated();
	void OnLevelReadyToPlay();
	void OnPlayerEnterZone(class ADBDPlayer* Player);
	void OnPlayerLeftZone(class ADBDPlayer* Player);
	void OnRep_IsInteractable();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HauntComponent">();
	}
	static class UHauntComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHauntComponent>();
	}
};
static_assert(alignof(UHauntComponent) == 0x000008, "Wrong alignment on UHauntComponent");
static_assert(sizeof(UHauntComponent) == 0x000110, "Wrong size on UHauntComponent");
static_assert(offsetof(UHauntComponent, Cosmetic_PlayerEnterHauntRadius) == 0x0000B8, "Member 'UHauntComponent::Cosmetic_PlayerEnterHauntRadius' has a wrong offset!");
static_assert(offsetof(UHauntComponent, Cosmetic_PlayerLeavesHauntRadius) == 0x0000C8, "Member 'UHauntComponent::Cosmetic_PlayerLeavesHauntRadius' has a wrong offset!");
static_assert(offsetof(UHauntComponent, Cosmetic_EnableHauntForInteraction) == 0x0000D8, "Member 'UHauntComponent::Cosmetic_EnableHauntForInteraction' has a wrong offset!");
static_assert(offsetof(UHauntComponent, _winningPlayerRole) == 0x0000E8, "Member 'UHauntComponent::_winningPlayerRole' has a wrong offset!");
static_assert(offsetof(UHauntComponent, _isInteractable) == 0x0000E9, "Member 'UHauntComponent::_isInteractable' has a wrong offset!");
static_assert(offsetof(UHauntComponent, _offeringEffectTypeNeeded) == 0x0000EA, "Member 'UHauntComponent::_offeringEffectTypeNeeded' has a wrong offset!");
static_assert(offsetof(UHauntComponent, _stateTagsPreventingInteraction) == 0x0000F0, "Member 'UHauntComponent::_stateTagsPreventingInteraction' has a wrong offset!");
static_assert(offsetof(UHauntComponent, _slasherInZoneTracker) == 0x000100, "Member 'UHauntComponent::_slasherInZoneTracker' has a wrong offset!");
static_assert(offsetof(UHauntComponent, _survivorsInZoneTracker) == 0x000108, "Member 'UHauntComponent::_survivorsInZoneTracker' has a wrong offset!");

// Class Halloween2023.HauntOutlineStrategy
// 0x0018 (0x0178 - 0x0160)
class UHauntOutlineStrategy final : public USourceBasedOutlineUpdateStrategy
{
public:
	struct FLinearColor                           _displayColor;                                     // 0x0160(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_170[0x8];                                      // 0x0170(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HauntOutlineStrategy">();
	}
	static class UHauntOutlineStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHauntOutlineStrategy>();
	}
};
static_assert(alignof(UHauntOutlineStrategy) == 0x000008, "Wrong alignment on UHauntOutlineStrategy");
static_assert(sizeof(UHauntOutlineStrategy) == 0x000178, "Wrong size on UHauntOutlineStrategy");
static_assert(offsetof(UHauntOutlineStrategy, _displayColor) == 0x000160, "Member 'UHauntOutlineStrategy::_displayColor' has a wrong offset!");

// Class Halloween2023.StandardWorldHauntComponent
// 0x01B0 (0x02C0 - 0x0110)
class UStandardWorldHauntComponent final : public UHauntComponent
{
public:
	uint8                                         Pad_110[0x10];                                     // 0x0110(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ADBDPlayer* Player)> Cosmetic_OnPlayerTriggerBoon;           // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class ADBDPlayer* Player)> Cosmetic_OnPlayerTriggerTrap;           // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              Cosmetic_OnAutomaticShutDownReached;               // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class ADBDPlayer* Player)> ForceMovePlayerTowardsHaunt;            // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _timeAfterVoidZoneCloseBeforeAutomaticShutdown;    // 0x0160(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _hasteStatusEffectClass;                           // 0x0188(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _hasteDuration;                                    // 0x0190(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _hasteValue;                                       // 0x01B8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _hinderedEffectClass;                              // 0x01E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _hindredDuration;                                  // 0x01E8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _hindredValue;                                     // 0x0210(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _killerStunDuration;                               // 0x0238(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _playerTrackerRadius;                              // 0x0260(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class URespawnableComponent*                  _respawnableComponent;                             // 0x0288(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_290[0x30];                                     // 0x0290(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnAutomaticShutDownReached();
	void Authority_OnVoidZoneClosed();
	void Authority_OnVoidZoneOpened();
	void Multicast_BlessOrTrapCharacterEnteringZone(class ADBDPlayer* Player, bool isBlessing);
	void Multicast_OnAutomaticShutDownReached();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StandardWorldHauntComponent">();
	}
	static class UStandardWorldHauntComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStandardWorldHauntComponent>();
	}
};
static_assert(alignof(UStandardWorldHauntComponent) == 0x000008, "Wrong alignment on UStandardWorldHauntComponent");
static_assert(sizeof(UStandardWorldHauntComponent) == 0x0002C0, "Wrong size on UStandardWorldHauntComponent");
static_assert(offsetof(UStandardWorldHauntComponent, Cosmetic_OnPlayerTriggerBoon) == 0x000120, "Member 'UStandardWorldHauntComponent::Cosmetic_OnPlayerTriggerBoon' has a wrong offset!");
static_assert(offsetof(UStandardWorldHauntComponent, Cosmetic_OnPlayerTriggerTrap) == 0x000130, "Member 'UStandardWorldHauntComponent::Cosmetic_OnPlayerTriggerTrap' has a wrong offset!");
static_assert(offsetof(UStandardWorldHauntComponent, Cosmetic_OnAutomaticShutDownReached) == 0x000140, "Member 'UStandardWorldHauntComponent::Cosmetic_OnAutomaticShutDownReached' has a wrong offset!");
static_assert(offsetof(UStandardWorldHauntComponent, ForceMovePlayerTowardsHaunt) == 0x000150, "Member 'UStandardWorldHauntComponent::ForceMovePlayerTowardsHaunt' has a wrong offset!");
static_assert(offsetof(UStandardWorldHauntComponent, _timeAfterVoidZoneCloseBeforeAutomaticShutdown) == 0x000160, "Member 'UStandardWorldHauntComponent::_timeAfterVoidZoneCloseBeforeAutomaticShutdown' has a wrong offset!");
static_assert(offsetof(UStandardWorldHauntComponent, _hasteStatusEffectClass) == 0x000188, "Member 'UStandardWorldHauntComponent::_hasteStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UStandardWorldHauntComponent, _hasteDuration) == 0x000190, "Member 'UStandardWorldHauntComponent::_hasteDuration' has a wrong offset!");
static_assert(offsetof(UStandardWorldHauntComponent, _hasteValue) == 0x0001B8, "Member 'UStandardWorldHauntComponent::_hasteValue' has a wrong offset!");
static_assert(offsetof(UStandardWorldHauntComponent, _hinderedEffectClass) == 0x0001E0, "Member 'UStandardWorldHauntComponent::_hinderedEffectClass' has a wrong offset!");
static_assert(offsetof(UStandardWorldHauntComponent, _hindredDuration) == 0x0001E8, "Member 'UStandardWorldHauntComponent::_hindredDuration' has a wrong offset!");
static_assert(offsetof(UStandardWorldHauntComponent, _hindredValue) == 0x000210, "Member 'UStandardWorldHauntComponent::_hindredValue' has a wrong offset!");
static_assert(offsetof(UStandardWorldHauntComponent, _killerStunDuration) == 0x000238, "Member 'UStandardWorldHauntComponent::_killerStunDuration' has a wrong offset!");
static_assert(offsetof(UStandardWorldHauntComponent, _playerTrackerRadius) == 0x000260, "Member 'UStandardWorldHauntComponent::_playerTrackerRadius' has a wrong offset!");
static_assert(offsetof(UStandardWorldHauntComponent, _respawnableComponent) == 0x000288, "Member 'UStandardWorldHauntComponent::_respawnableComponent' has a wrong offset!");

// Class Halloween2023.VoidZoneHauntComponent
// 0x04A8 (0x05B8 - 0x0110)
class UVoidZoneHauntComponent final : public UHauntComponent
{
public:
	uint8                                         Pad_110[0x20];                                     // 0x0110(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool isContested)> Cosmetic_OnHauntContested;                      // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const EPlayerRole PlayerRole)> Cosmetic_OnHauntWon;                // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              Cosmetic_OnVoidZoneOpen;                           // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              Cosmetic_OnVoidZoneClose;                          // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_170[0x8];                                      // 0x0170(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _voidEnergyToCaptureHaunt;                         // 0x0178(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _survivorVoidEnergyPerSecond;                      // 0x01A0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _progressDecayTimer;                               // 0x01C8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _initialWaitTimeToCaptureEnergy;                   // 0x01F0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _progressDecayAmount;                              // 0x0218(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _progressCancelAmount;                             // 0x0240(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _slasherVoidEnergyPerSecond;                       // 0x0268(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _camperRateToTakeVoidEnergy;                       // 0x0290(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _slasherRateToTakeVoidEnergy;                      // 0x02B8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeOrbMoves;                                     // 0x02E0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _survivorTrackerRadius;                            // 0x0308(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _slasherTrackerRadius;                             // 0x0330(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _hasteStatusEffectClass;                           // 0x0358(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _camperHasteValue;                                 // 0x0360(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _slasherHasteValue;                                // 0x0388(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _enduranceStatusEffectClass;                       // 0x03B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _undetectableStatusEffectClass;                    // 0x03B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _camperActionSpeedBoostStatusEffectClass;          // 0x03C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _slasherActionSpeedBoostStatusEffectClass;         // 0x03C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _slasherAttackCooldownStatusEffectClass;           // 0x03D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _itemEnergyGainedOnCapture;                        // 0x03D8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _camperBonusDurations;                             // 0x0400(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _camperActionSpeedValue;                           // 0x0428(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _slasherBonusDurations;                            // 0x0450(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _slasherActionSpeedValue;                          // 0x0478(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	EPlayerRole                                   _currentRoleWinningHaunt;                          // 0x04A0(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A1[0x3];                                      // 0x04A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _heightOffsetToSpawnOrb;                           // 0x04A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A8[0xA0];                                     // 0x04A8(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	class UChargeableInteractionDefinition*       _captureHauntInteraction;                          // 0x0548(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChargeableComponent*                   _captureHauntChargeable;                           // 0x0550(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_558[0x60];                                     // 0x0558(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_AddCaptureProgress(int32 Progress, class ADBDPlayer* playerGivingEnergy);
	void Authority_DecayProgress(float DeltaTime);
	void Authority_GrantCaptureBonusStatusEffects(class ADBDPlayer* Player);
	void Authority_OnInteractionCompleted(bool COMPLETED, const TArray<class AActor*>& instigatorsForCompletion);
	void Authority_OnVoidZoneClose();
	void Authority_OnVoidZoneOpen();
	void Authority_PlayerInZone(class ADBDPlayer* Player);
	void Authority_ResetAllProgress();
	void Authority_StartRegression();
	void Multicast_AddCaptureProgress(int32 Progress);
	void Multicast_OnVoidZoneClose();
	void Multicast_OnVoidZoneOpen();
	void Multicast_PlayerEnterOrLeftZone(class ADBDPlayer* playerEnteringOrLeavingZone, bool isPlayerLeavingZone, float chargeRemainingInHaunt, const TArray<TWeakObjectPtr<class ADBDPlayer>>& playersInZone, bool isZoneContested, bool shouldRegressProgress);
	void Multicast_UpdateAllPlayerHauntTargets(float chargeRemainingInHaunt, const TArray<TWeakObjectPtr<class ADBDPlayer>>& playersInZone, bool isZoneContested, bool shouldRegressProgress);
	void Multicast_WinHauntForTeam(class ADBDPlayer* winningPlayer, const TArray<TWeakObjectPtr<class ADBDPlayer>>& playersInZone);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidZoneHauntComponent">();
	}
	static class UVoidZoneHauntComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidZoneHauntComponent>();
	}
};
static_assert(alignof(UVoidZoneHauntComponent) == 0x000008, "Wrong alignment on UVoidZoneHauntComponent");
static_assert(sizeof(UVoidZoneHauntComponent) == 0x0005B8, "Wrong size on UVoidZoneHauntComponent");
static_assert(offsetof(UVoidZoneHauntComponent, Cosmetic_OnHauntContested) == 0x000130, "Member 'UVoidZoneHauntComponent::Cosmetic_OnHauntContested' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, Cosmetic_OnHauntWon) == 0x000140, "Member 'UVoidZoneHauntComponent::Cosmetic_OnHauntWon' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, Cosmetic_OnVoidZoneOpen) == 0x000150, "Member 'UVoidZoneHauntComponent::Cosmetic_OnVoidZoneOpen' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, Cosmetic_OnVoidZoneClose) == 0x000160, "Member 'UVoidZoneHauntComponent::Cosmetic_OnVoidZoneClose' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _voidEnergyToCaptureHaunt) == 0x000178, "Member 'UVoidZoneHauntComponent::_voidEnergyToCaptureHaunt' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _survivorVoidEnergyPerSecond) == 0x0001A0, "Member 'UVoidZoneHauntComponent::_survivorVoidEnergyPerSecond' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _progressDecayTimer) == 0x0001C8, "Member 'UVoidZoneHauntComponent::_progressDecayTimer' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _initialWaitTimeToCaptureEnergy) == 0x0001F0, "Member 'UVoidZoneHauntComponent::_initialWaitTimeToCaptureEnergy' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _progressDecayAmount) == 0x000218, "Member 'UVoidZoneHauntComponent::_progressDecayAmount' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _progressCancelAmount) == 0x000240, "Member 'UVoidZoneHauntComponent::_progressCancelAmount' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _slasherVoidEnergyPerSecond) == 0x000268, "Member 'UVoidZoneHauntComponent::_slasherVoidEnergyPerSecond' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _camperRateToTakeVoidEnergy) == 0x000290, "Member 'UVoidZoneHauntComponent::_camperRateToTakeVoidEnergy' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _slasherRateToTakeVoidEnergy) == 0x0002B8, "Member 'UVoidZoneHauntComponent::_slasherRateToTakeVoidEnergy' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _timeOrbMoves) == 0x0002E0, "Member 'UVoidZoneHauntComponent::_timeOrbMoves' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _survivorTrackerRadius) == 0x000308, "Member 'UVoidZoneHauntComponent::_survivorTrackerRadius' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _slasherTrackerRadius) == 0x000330, "Member 'UVoidZoneHauntComponent::_slasherTrackerRadius' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _hasteStatusEffectClass) == 0x000358, "Member 'UVoidZoneHauntComponent::_hasteStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _camperHasteValue) == 0x000360, "Member 'UVoidZoneHauntComponent::_camperHasteValue' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _slasherHasteValue) == 0x000388, "Member 'UVoidZoneHauntComponent::_slasherHasteValue' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _enduranceStatusEffectClass) == 0x0003B0, "Member 'UVoidZoneHauntComponent::_enduranceStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _undetectableStatusEffectClass) == 0x0003B8, "Member 'UVoidZoneHauntComponent::_undetectableStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _camperActionSpeedBoostStatusEffectClass) == 0x0003C0, "Member 'UVoidZoneHauntComponent::_camperActionSpeedBoostStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _slasherActionSpeedBoostStatusEffectClass) == 0x0003C8, "Member 'UVoidZoneHauntComponent::_slasherActionSpeedBoostStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _slasherAttackCooldownStatusEffectClass) == 0x0003D0, "Member 'UVoidZoneHauntComponent::_slasherAttackCooldownStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _itemEnergyGainedOnCapture) == 0x0003D8, "Member 'UVoidZoneHauntComponent::_itemEnergyGainedOnCapture' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _camperBonusDurations) == 0x000400, "Member 'UVoidZoneHauntComponent::_camperBonusDurations' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _camperActionSpeedValue) == 0x000428, "Member 'UVoidZoneHauntComponent::_camperActionSpeedValue' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _slasherBonusDurations) == 0x000450, "Member 'UVoidZoneHauntComponent::_slasherBonusDurations' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _slasherActionSpeedValue) == 0x000478, "Member 'UVoidZoneHauntComponent::_slasherActionSpeedValue' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _currentRoleWinningHaunt) == 0x0004A0, "Member 'UVoidZoneHauntComponent::_currentRoleWinningHaunt' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _heightOffsetToSpawnOrb) == 0x0004A4, "Member 'UVoidZoneHauntComponent::_heightOffsetToSpawnOrb' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _captureHauntInteraction) == 0x000548, "Member 'UVoidZoneHauntComponent::_captureHauntInteraction' has a wrong offset!");
static_assert(offsetof(UVoidZoneHauntComponent, _captureHauntChargeable) == 0x000550, "Member 'UVoidZoneHauntComponent::_captureHauntChargeable' has a wrong offset!");

}

