#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LobbyDialogueComponent

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "SpecificReactionDialogue_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass LobbyDialogueComponent.LobbyDialogueComponent_C
// 0x0260 (0x0318 - 0x00B8)
class ULobbyDialogueComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FAkEventWithSubtitle>           C1_OnSpawnFallback;                                // 0x00C0(0x0010)(Edit, BlueprintVisible)
	int32                                         C1_PlayProbability;                                // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpecificReactionDialogue>      C2_OnSpawnReactToSpecificCharacter;                // 0x00D8(0x0010)(Edit, BlueprintVisible)
	int32                                         C2_PlayProbability;                                // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkEventWithSubtitle>           C3_OnSpawnReactToCharacterGroup;                   // 0x00F0(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         C3_CharacterGroup;                                 // 0x0100(0x0010)(Edit, BlueprintVisible)
	int32                                         C3_PlayProbability;                                // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatRange                            C1_C2_C3_Delay;                                    // 0x0114(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpecificReactionDialogue>      C4_OnGuestJoinedReactToSpecificCharacter;          // 0x0128(0x0010)(Edit, BlueprintVisible)
	int32                                         C4_PlayProbability;                                // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkEventWithSubtitle>           C5_OnGuestJoinedReactToCharacterGroup;             // 0x0140(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         C5_CharacterGroup;                                 // 0x0150(0x0010)(Edit, BlueprintVisible)
	int32                                         C5_PlayProbability;                                // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatRange                            C4_C5_Delay;                                       // 0x0164(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkEventWithSubtitle>           C6_OnReadiedButOthersNotReady;                     // 0x0178(0x0010)(Edit, BlueprintVisible)
	int32                                         C6_PlayProbability;                                // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatRange                            C6_Delay;                                          // 0x018C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkEventWithSubtitle>           C7_OnPartyFilledWithCharacterGroup;                // 0x01A0(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         C7_CharacterGroup;                                 // 0x01B0(0x0010)(Edit, BlueprintVisible)
	int32                                         C7_PlayProbability;                                // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkEventWithSubtitle>           C8_OnStayInLobby;                                  // 0x01C8(0x0010)(Edit, BlueprintVisible)
	int32                                         C8_PlayProbability;                                // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatRange                            C8_Delay;                                          // 0x01DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          C8_ShouldPlaySecondVoiceLine;                      // 0x01EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         C9_10_PlayProbability;                             // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatRange                            C9_10_Delay;                                       // 0x01F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UAkAudioEvent*, struct FAkEventWithSubtitle> C9_10_DialogueMap;                       // 0x0208(0x0050)(Edit, BlueprintVisible)
	class FString                                 C9_10_RespondingCharacterName;                     // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FAkEventWithSubtitle>           C11_OnMaxPrestige;                                 // 0x0268(0x0010)(Edit, BlueprintVisible)
	int32                                         C11_PlayProbability;                               // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatRange                            C11_Delay;                                         // 0x027C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         C12_PlayProbability;                               // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatRange                            C12_Delay;                                         // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, struct FSpecificReactionDialogue> C12_EventMapping;                    // 0x02A0(0x0050)(Edit, BlueprintVisible)
	class UAkAudioEvent*                          AudioStopEvent;                                    // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayingDialogue;                                 // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayingC9_10;                                    // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPermanentlyMuted;                                // 0x02FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTemporarilyMuted;                                // 0x02FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          LastPlayedAkEvent;                                 // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           LocalAudioTarget;                                  // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ADBDMenuPlayer*                         Player;                                            // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ShouldPlayContextN(int32 dialogueId, int32 PlayProbability, bool* PassesDefaultRequirements);
	void ShouldPlayC9(TMap<class UAkAudioEvent*, struct FAkEventWithSubtitle>& ResponseDialogue, bool* ShouldPlay);
	void ShouldPlayC5(bool* ShouldPlay);
	void ShouldPlayC8(bool* ShouldPlay);
	void ShouldPlayC4(TArray<struct FAkEventWithSubtitle>& FoundDialogue, bool* ShouldPlay);
	void ShouldPlayC7(bool* ShouldPlay);
	void ShouldPlayC3(bool* ShouldPlay);
	void ShouldPlayC6(bool* ShouldPlay);
	void ShouldPlayC2(TArray<struct FAkEventWithSubtitle>& FoundDialogue, bool* ShouldPlay);
	void ShouldPlayC12(const struct FGameplayTag& InformationTag, bool* ShouldPlay, TArray<struct FAkEventWithSubtitle>* FoundEvents);
	void SetIsTemporarilyMuted(bool IsTemporarilyMuted_0);
	void ShouldPlayC11(bool* ShouldPlay);
	void Run_C12Gameplay_Tag_Anim_Notify(const struct FGameplayTag& InformationTag, class UAkComponent* AudioTarget);
	void ShouldPlayC10(TMap<class UAkAudioEvent*, struct FAkEventWithSubtitle>& ResponseDialogue, bool* ShouldPlay);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ShouldPlayC1(bool* ShouldPlay);
	void OnPlayerMaxPrestige(class UAkGameObject* AudioTarget);
	void OnMaxPrestige(class UAkGameObject* AudioTarget);
	void OnLocalPlayerSpawn(class UAkComponent* AudioTarget);
	void OnLocalSpawn(class UAkComponent* AudioTarget);
	void OnLocalPlayerReadyChanged(class ADBDMenuPlayer* Player_0, class UAkComponent* AudioTarget);
	void OnLocalReady(class UAkComponent* AudioTarget, bool IsReady);
	void OnGuestSpawn(class ADBDMenuPlayer* Guest, class UAkComponent* AudioTarget);
	void OnLobbyWait(class UAkComponent* AudioTarget);
	void OnGuestPlayerDespawned(class ADBDMenuPlayer* Player_0);
	void OnGuestPlayerSpawn(class ADBDMenuPlayer* Player_0, class UAkComponent* AudioTarget);
	void OnDialogueFinishedC4(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void OnGameplayTagAnimNotify(const struct FGameplayTag& InformationTag, class UAkComponent* AudioTarget);
	void OnCharacterRespond(class UAkComponent* AudioTarget, const class FString& PreviousContext);
	void OnDialogueFinishedC2(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void OnBeginPlay(class UAkComponent* AudioTarget, class ADBDMenuPlayer* Player_0);
	void OnDialogueFinished(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void OnAllPlayersReadyInOnlineLobby();
	void IsSpecificCharacterInLobby(class FString& Character, bool* Success);
	void GetPlayableEvents(TArray<struct FAkEventWithSubtitle>& AudioEvents, bool* ShouldPlay, TArray<struct FAkEventWithSubtitle>* PlayableEvents);
	void FindSpecificDialogueForCharacter(TArray<struct FSpecificReactionDialogue>& ReactionDialogues, const class FString& Character, TArray<struct FAkEventWithSubtitle>* Dialogue, bool* Success);
	void GetLocalCharacterName(class FString* CharacterName);
	void ExecuteUbergraph_LobbyDialogueComponent(int32 EntryPoint);
	void EventsContainForcedDebugLine(TArray<struct FAkEventWithSubtitle>& EventArray, int32* IndexInArray);

	void GetIsMuted(bool* isMuted) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LobbyDialogueComponent_C">();
	}
	static class ULobbyDialogueComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyDialogueComponent_C>();
	}
};
static_assert(alignof(ULobbyDialogueComponent_C) == 0x000008, "Wrong alignment on ULobbyDialogueComponent_C");
static_assert(sizeof(ULobbyDialogueComponent_C) == 0x000318, "Wrong size on ULobbyDialogueComponent_C");
static_assert(offsetof(ULobbyDialogueComponent_C, UberGraphFrame) == 0x0000B8, "Member 'ULobbyDialogueComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C1_OnSpawnFallback) == 0x0000C0, "Member 'ULobbyDialogueComponent_C::C1_OnSpawnFallback' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C1_PlayProbability) == 0x0000D0, "Member 'ULobbyDialogueComponent_C::C1_PlayProbability' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C2_OnSpawnReactToSpecificCharacter) == 0x0000D8, "Member 'ULobbyDialogueComponent_C::C2_OnSpawnReactToSpecificCharacter' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C2_PlayProbability) == 0x0000E8, "Member 'ULobbyDialogueComponent_C::C2_PlayProbability' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C3_OnSpawnReactToCharacterGroup) == 0x0000F0, "Member 'ULobbyDialogueComponent_C::C3_OnSpawnReactToCharacterGroup' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C3_CharacterGroup) == 0x000100, "Member 'ULobbyDialogueComponent_C::C3_CharacterGroup' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C3_PlayProbability) == 0x000110, "Member 'ULobbyDialogueComponent_C::C3_PlayProbability' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C1_C2_C3_Delay) == 0x000114, "Member 'ULobbyDialogueComponent_C::C1_C2_C3_Delay' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C4_OnGuestJoinedReactToSpecificCharacter) == 0x000128, "Member 'ULobbyDialogueComponent_C::C4_OnGuestJoinedReactToSpecificCharacter' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C4_PlayProbability) == 0x000138, "Member 'ULobbyDialogueComponent_C::C4_PlayProbability' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C5_OnGuestJoinedReactToCharacterGroup) == 0x000140, "Member 'ULobbyDialogueComponent_C::C5_OnGuestJoinedReactToCharacterGroup' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C5_CharacterGroup) == 0x000150, "Member 'ULobbyDialogueComponent_C::C5_CharacterGroup' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C5_PlayProbability) == 0x000160, "Member 'ULobbyDialogueComponent_C::C5_PlayProbability' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C4_C5_Delay) == 0x000164, "Member 'ULobbyDialogueComponent_C::C4_C5_Delay' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C6_OnReadiedButOthersNotReady) == 0x000178, "Member 'ULobbyDialogueComponent_C::C6_OnReadiedButOthersNotReady' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C6_PlayProbability) == 0x000188, "Member 'ULobbyDialogueComponent_C::C6_PlayProbability' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C6_Delay) == 0x00018C, "Member 'ULobbyDialogueComponent_C::C6_Delay' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C7_OnPartyFilledWithCharacterGroup) == 0x0001A0, "Member 'ULobbyDialogueComponent_C::C7_OnPartyFilledWithCharacterGroup' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C7_CharacterGroup) == 0x0001B0, "Member 'ULobbyDialogueComponent_C::C7_CharacterGroup' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C7_PlayProbability) == 0x0001C0, "Member 'ULobbyDialogueComponent_C::C7_PlayProbability' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C8_OnStayInLobby) == 0x0001C8, "Member 'ULobbyDialogueComponent_C::C8_OnStayInLobby' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C8_PlayProbability) == 0x0001D8, "Member 'ULobbyDialogueComponent_C::C8_PlayProbability' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C8_Delay) == 0x0001DC, "Member 'ULobbyDialogueComponent_C::C8_Delay' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C8_ShouldPlaySecondVoiceLine) == 0x0001EC, "Member 'ULobbyDialogueComponent_C::C8_ShouldPlaySecondVoiceLine' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C9_10_PlayProbability) == 0x0001F0, "Member 'ULobbyDialogueComponent_C::C9_10_PlayProbability' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C9_10_Delay) == 0x0001F4, "Member 'ULobbyDialogueComponent_C::C9_10_Delay' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C9_10_DialogueMap) == 0x000208, "Member 'ULobbyDialogueComponent_C::C9_10_DialogueMap' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C9_10_RespondingCharacterName) == 0x000258, "Member 'ULobbyDialogueComponent_C::C9_10_RespondingCharacterName' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C11_OnMaxPrestige) == 0x000268, "Member 'ULobbyDialogueComponent_C::C11_OnMaxPrestige' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C11_PlayProbability) == 0x000278, "Member 'ULobbyDialogueComponent_C::C11_PlayProbability' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C11_Delay) == 0x00027C, "Member 'ULobbyDialogueComponent_C::C11_Delay' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C12_PlayProbability) == 0x00028C, "Member 'ULobbyDialogueComponent_C::C12_PlayProbability' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C12_Delay) == 0x000290, "Member 'ULobbyDialogueComponent_C::C12_Delay' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, C12_EventMapping) == 0x0002A0, "Member 'ULobbyDialogueComponent_C::C12_EventMapping' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, AudioStopEvent) == 0x0002F0, "Member 'ULobbyDialogueComponent_C::AudioStopEvent' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, IsPlayingDialogue) == 0x0002F8, "Member 'ULobbyDialogueComponent_C::IsPlayingDialogue' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, IsPlayingC9_10) == 0x0002F9, "Member 'ULobbyDialogueComponent_C::IsPlayingC9_10' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, IsPermanentlyMuted) == 0x0002FA, "Member 'ULobbyDialogueComponent_C::IsPermanentlyMuted' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, IsTemporarilyMuted) == 0x0002FB, "Member 'ULobbyDialogueComponent_C::IsTemporarilyMuted' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, LastPlayedAkEvent) == 0x000300, "Member 'ULobbyDialogueComponent_C::LastPlayedAkEvent' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, LocalAudioTarget) == 0x000308, "Member 'ULobbyDialogueComponent_C::LocalAudioTarget' has a wrong offset!");
static_assert(offsetof(ULobbyDialogueComponent_C, Player) == 0x000310, "Member 'ULobbyDialogueComponent_C::Player' has a wrong offset!");

}

