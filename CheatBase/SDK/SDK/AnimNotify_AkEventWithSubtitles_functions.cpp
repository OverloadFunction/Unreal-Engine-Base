#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimNotify_AkEventWithSubtitles

#include "Basic.hpp"

#include "AnimNotify_AkEventWithSubtitles_classes.hpp"
#include "AnimNotify_AkEventWithSubtitles_parameters.hpp"


namespace SDK
{

// Function AnimNotify_AkEventWithSubtitles.AnimNotify_AkEventWithSubtitles_C.isPlayerLocallyObserved
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class ADBDBasePlayer*                   OwningPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   isPlayerLocallyObserved_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimNotify_AkEventWithSubtitles_C::isPlayerLocallyObserved(class ADBDBasePlayer* OwningPlayer, bool* isPlayerLocallyObserved_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotify_AkEventWithSubtitles_C", "isPlayerLocallyObserved");

	Params::AnimNotify_AkEventWithSubtitles_C_isPlayerLocallyObserved Parms{};

	Parms.OwningPlayer = OwningPlayer;

	UObject::ProcessEvent(Func, &Parms);

	if (isPlayerLocallyObserved_0 != nullptr)
		*isPlayerLocallyObserved_0 = Parms.isPlayerLocallyObserved_0;
}


// Function AnimNotify_AkEventWithSubtitles.AnimNotify_AkEventWithSubtitles_C.Received_Notify
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class USkeletalMeshComponent*           MeshComp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UAnimSequenceBase*                Animation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FAnimNotifyEventReference& EventReference                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UAnimNotify_AkEventWithSubtitles_C::Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, const struct FAnimNotifyEventReference& EventReference) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotify_AkEventWithSubtitles_C", "Received_Notify");

	Params::AnimNotify_AkEventWithSubtitles_C_Received_Notify Parms{};

	Parms.MeshComp = MeshComp;
	Parms.Animation = Animation;
	Parms.EventReference = std::move(EventReference);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AnimNotify_AkEventWithSubtitles.AnimNotify_AkEventWithSubtitles_C.Should Execute Notify
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class ADBDBasePlayer*&                  OwningPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool*                                   ShouldExecute                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimNotify_AkEventWithSubtitles_C::Should_Execute_Notify(class ADBDBasePlayer*& OwningPlayer, bool* ShouldExecute) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotify_AkEventWithSubtitles_C", "Should Execute Notify");

	Params::AnimNotify_AkEventWithSubtitles_C_Should_Execute_Notify Parms{};

	Parms.OwningPlayer = OwningPlayer;

	UObject::ProcessEvent(Func, &Parms);

	OwningPlayer = Parms.OwningPlayer;

	if (ShouldExecute != nullptr)
		*ShouldExecute = Parms.ShouldExecute;
}

}

