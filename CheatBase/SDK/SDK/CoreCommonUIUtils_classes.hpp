#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CoreCommonUIUtils

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "UMG_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "CoreCommonUIUtils_structs.hpp"


namespace SDK
{

// Class CoreCommonUIUtils.CoreCommonUIUtils
// 0x0000 (0x0030 - 0x0030)
class UCoreCommonUIUtils final : public UBlueprintFunctionLibrary
{
public:
	static class FString BeautifyNarrativeText(const class FString& str, const int32 charLimit);
	static int32 DivideWithRemainder(const int32 Dividend, const int32 Divisor, int32* Remainder);
	static class FString GetBeautifiedNumericString(const int32 Value);
	static class FText GetBeautifiedNumericText(const int32 Value);
	static float GetDPIScale();
	static class FText GetEmblemQualityText(const EEmblemQuality EmblemQuality);
	static class FString GetHexNoAlphaFromColor(const struct FColor& Color);
	static class FText GetItemTypeName(EInventoryItemType ItemType);
	static float GetNextUpdateRate(const struct FDateTime& EndTime);
	static class FText GetRemainingTimeText(const struct FDateTime& endDateTime, ERemainingTimeFormat timeFormat, const int32 numberOfDigits);
	static TArray<class FText> GetTextArrayBasedOnSourceTags(const EItemSourceTag Tags);
	static TArray<class FText> GetTextArrayBasedOnSpecialProperties(const ECustomizationSpecialProperty PropertyFlags);
	static class FText GetTextBasedOnRarity(const EItemRarity Rarity);
	static class FText GetTextBasedOnSourceTag(const EItemSourceTag Tag);
	static class FText GetTextBasedOnSpecialProperty(const ECustomizationSpecialProperty propertyFlag);
	static bool HasOuter(const class UObject* Object, class UObject* Root);
	static void SetConditionalWidgetVisibility(class UWidget* Widget, const bool Condition, const ESlateVisibility trueVisibility, const ESlateVisibility falseVisibility);
	static class FString Truncate(const class FString& str, int32 CharacterLimit, bool truncateOnSpace);
	static class FText WrapTextWithStyleTag(const class FText& Text, const class FText& Style);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCommonUIUtils">();
	}
	static class UCoreCommonUIUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCommonUIUtils>();
	}
};
static_assert(alignof(UCoreCommonUIUtils) == 0x000008, "Wrong alignment on UCoreCommonUIUtils");
static_assert(sizeof(UCoreCommonUIUtils) == 0x000030, "Wrong size on UCoreCommonUIUtils");

}

