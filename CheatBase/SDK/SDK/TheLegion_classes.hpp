#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheLegion

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "DBDBots_classes.hpp"
#include "Competence_classes.hpp"
#include "TheLegion_structs.hpp"
#include "Engine_classes.hpp"
#include "DataTableUtilities_structs.hpp"
#include "DBDAttack_classes.hpp"
#include "StatSystem_structs.hpp"
#include "DBDAnimation_classes.hpp"


namespace SDK
{

// Class TheLegion.Addon_Frenzy_ColdDirt
// 0x0068 (0x0368 - 0x0300)
class UAddon_Frenzy_ColdDirt final : public UItemAddon
{
public:
	TMap<int32, int32>                            _mapTokenPerChainedHit;                            // 0x0300(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	int32                                         _tokensToReachForActivation;                       // 0x0350(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _movementSpeedMultiplierModifier;                  // 0x0354(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_358[0x10];                                     // 0x0358(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_Frenzy_ColdDirt">();
	}
	static class UAddon_Frenzy_ColdDirt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_Frenzy_ColdDirt>();
	}
};
static_assert(alignof(UAddon_Frenzy_ColdDirt) == 0x000008, "Wrong alignment on UAddon_Frenzy_ColdDirt");
static_assert(sizeof(UAddon_Frenzy_ColdDirt) == 0x000368, "Wrong size on UAddon_Frenzy_ColdDirt");
static_assert(offsetof(UAddon_Frenzy_ColdDirt, _mapTokenPerChainedHit) == 0x000300, "Member 'UAddon_Frenzy_ColdDirt::_mapTokenPerChainedHit' has a wrong offset!");
static_assert(offsetof(UAddon_Frenzy_ColdDirt, _tokensToReachForActivation) == 0x000350, "Member 'UAddon_Frenzy_ColdDirt::_tokensToReachForActivation' has a wrong offset!");
static_assert(offsetof(UAddon_Frenzy_ColdDirt, _movementSpeedMultiplierModifier) == 0x000354, "Member 'UAddon_Frenzy_ColdDirt::_movementSpeedMultiplierModifier' has a wrong offset!");

// Class TheLegion.BaseFrenzyMixtapeAddon
// 0x0028 (0x0328 - 0x0300)
class UBaseFrenzyMixtapeAddon : public UItemAddon
{
public:
	TArray<class FName>                           _audioSwitchGroups;                                // 0x0300(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   _audioSwitchState;                                 // 0x0310(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31C[0xC];                                      // 0x031C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseFrenzyMixtapeAddon">();
	}
	static class UBaseFrenzyMixtapeAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseFrenzyMixtapeAddon>();
	}
};
static_assert(alignof(UBaseFrenzyMixtapeAddon) == 0x000008, "Wrong alignment on UBaseFrenzyMixtapeAddon");
static_assert(sizeof(UBaseFrenzyMixtapeAddon) == 0x000328, "Wrong size on UBaseFrenzyMixtapeAddon");
static_assert(offsetof(UBaseFrenzyMixtapeAddon, _audioSwitchGroups) == 0x000300, "Member 'UBaseFrenzyMixtapeAddon::_audioSwitchGroups' has a wrong offset!");
static_assert(offsetof(UBaseFrenzyMixtapeAddon, _audioSwitchState) == 0x000310, "Member 'UBaseFrenzyMixtapeAddon::_audioSwitchState' has a wrong offset!");

// Class TheLegion.Addon_Frenzy_FranksMixTape
// 0x0010 (0x0338 - 0x0328)
class UAddon_Frenzy_FranksMixTape final : public UBaseFrenzyMixtapeAddon
{
public:
	TSubclassOf<class UStatusEffect>              _statusEffectFranksWalls;                          // 0x0328(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _statusEffectFranksGenerators;                     // 0x0330(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_Frenzy_FranksMixTape">();
	}
	static class UAddon_Frenzy_FranksMixTape* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_Frenzy_FranksMixTape>();
	}
};
static_assert(alignof(UAddon_Frenzy_FranksMixTape) == 0x000008, "Wrong alignment on UAddon_Frenzy_FranksMixTape");
static_assert(sizeof(UAddon_Frenzy_FranksMixTape) == 0x000338, "Wrong size on UAddon_Frenzy_FranksMixTape");
static_assert(offsetof(UAddon_Frenzy_FranksMixTape, _statusEffectFranksWalls) == 0x000328, "Member 'UAddon_Frenzy_FranksMixTape::_statusEffectFranksWalls' has a wrong offset!");
static_assert(offsetof(UAddon_Frenzy_FranksMixTape, _statusEffectFranksGenerators) == 0x000330, "Member 'UAddon_Frenzy_FranksMixTape::_statusEffectFranksGenerators' has a wrong offset!");

// Class TheLegion.Addon_Frenzy_FumingMixTape
// 0x0058 (0x0380 - 0x0328)
class UAddon_Frenzy_FumingMixTape final : public UBaseFrenzyMixtapeAddon
{
public:
	uint8                                         Pad_328[0x50];                                     // 0x0328(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _regressionModifier;                               // 0x0378(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_Frenzy_FumingMixTape">();
	}
	static class UAddon_Frenzy_FumingMixTape* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_Frenzy_FumingMixTape>();
	}
};
static_assert(alignof(UAddon_Frenzy_FumingMixTape) == 0x000008, "Wrong alignment on UAddon_Frenzy_FumingMixTape");
static_assert(sizeof(UAddon_Frenzy_FumingMixTape) == 0x000380, "Wrong size on UAddon_Frenzy_FumingMixTape");
static_assert(offsetof(UAddon_Frenzy_FumingMixTape, _regressionModifier) == 0x000378, "Member 'UAddon_Frenzy_FumingMixTape::_regressionModifier' has a wrong offset!");

// Class TheLegion.Addon_Frenzy_JoeysMixTape
// 0x0018 (0x0340 - 0x0328)
class UAddon_Frenzy_JoeysMixTape final : public UBaseFrenzyMixtapeAddon
{
public:
	TSubclassOf<class UStatusEffect>              _statusEffectToImpose;                             // 0x0328(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_330[0x10];                                     // 0x0330(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_Frenzy_JoeysMixTape">();
	}
	static class UAddon_Frenzy_JoeysMixTape* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_Frenzy_JoeysMixTape>();
	}
};
static_assert(alignof(UAddon_Frenzy_JoeysMixTape) == 0x000008, "Wrong alignment on UAddon_Frenzy_JoeysMixTape");
static_assert(sizeof(UAddon_Frenzy_JoeysMixTape) == 0x000340, "Wrong size on UAddon_Frenzy_JoeysMixTape");
static_assert(offsetof(UAddon_Frenzy_JoeysMixTape, _statusEffectToImpose) == 0x000328, "Member 'UAddon_Frenzy_JoeysMixTape::_statusEffectToImpose' has a wrong offset!");

// Class TheLegion.Addon_Frenzy_MuralSketch
// 0x0008 (0x0308 - 0x0300)
class UAddon_Frenzy_MuralSketch final : public UItemAddon
{
public:
	float                                         _speedBonusPerHit;                                 // 0x0300(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_Frenzy_MuralSketch">();
	}
	static class UAddon_Frenzy_MuralSketch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_Frenzy_MuralSketch>();
	}
};
static_assert(alignof(UAddon_Frenzy_MuralSketch) == 0x000008, "Wrong alignment on UAddon_Frenzy_MuralSketch");
static_assert(sizeof(UAddon_Frenzy_MuralSketch) == 0x000308, "Wrong size on UAddon_Frenzy_MuralSketch");
static_assert(offsetof(UAddon_Frenzy_MuralSketch, _speedBonusPerHit) == 0x000300, "Member 'UAddon_Frenzy_MuralSketch::_speedBonusPerHit' has a wrong offset!");

// Class TheLegion.Addon_Frenzy_NeverSleepPills
// 0x0008 (0x0308 - 0x0300)
class UAddon_Frenzy_NeverSleepPills final : public UItemAddon
{
public:
	float                                         _speedModifierDuringFrenzy;                        // 0x0300(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_Frenzy_NeverSleepPills">();
	}
	static class UAddon_Frenzy_NeverSleepPills* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_Frenzy_NeverSleepPills>();
	}
};
static_assert(alignof(UAddon_Frenzy_NeverSleepPills) == 0x000008, "Wrong alignment on UAddon_Frenzy_NeverSleepPills");
static_assert(sizeof(UAddon_Frenzy_NeverSleepPills) == 0x000308, "Wrong size on UAddon_Frenzy_NeverSleepPills");
static_assert(offsetof(UAddon_Frenzy_NeverSleepPills, _speedModifierDuringFrenzy) == 0x000300, "Member 'UAddon_Frenzy_NeverSleepPills::_speedModifierDuringFrenzy' has a wrong offset!");

// Class TheLegion.Addon_Frenzy_StolenSketchBook
// 0x0008 (0x0308 - 0x0300)
class UAddon_Frenzy_StolenSketchBook final : public UItemAddon
{
public:
	int32                                         _dropItemAfterChainedHitNumber;                    // 0x0300(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_Frenzy_StolenSketchBook">();
	}
	static class UAddon_Frenzy_StolenSketchBook* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_Frenzy_StolenSketchBook>();
	}
};
static_assert(alignof(UAddon_Frenzy_StolenSketchBook) == 0x000008, "Wrong alignment on UAddon_Frenzy_StolenSketchBook");
static_assert(sizeof(UAddon_Frenzy_StolenSketchBook) == 0x000308, "Wrong size on UAddon_Frenzy_StolenSketchBook");
static_assert(offsetof(UAddon_Frenzy_StolenSketchBook, _dropItemAfterChainedHitNumber) == 0x000300, "Member 'UAddon_Frenzy_StolenSketchBook::_dropItemAfterChainedHitNumber' has a wrong offset!");

// Class TheLegion.AISkill_Interaction_Frenzy
// 0x01F8 (0x0498 - 0x02A0)
class UAISkill_Interaction_Frenzy final : public UAISkill_Interaction_KillerPower
{
public:
	struct FAITunableParameter                    MaxStartRange;                                     // 0x02A0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    StopRange;                                         // 0x0300(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    CurrentTargetDistanceMultiplier;                   // 0x0360(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         MultiplyVerticalDistanceThreshold;                 // 0x03C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalDistanceMultiplier;                        // 0x03C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BBRespectPalletChanceOverride;                     // 0x03C8(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAITunableParameter                    RespectPalletChanceInFrenzy;                       // 0x03D8(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    IgnorePalletUnderRemainingFrenzy;                  // 0x0438(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_Interaction_Frenzy">();
	}
	static class UAISkill_Interaction_Frenzy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_Interaction_Frenzy>();
	}
};
static_assert(alignof(UAISkill_Interaction_Frenzy) == 0x000008, "Wrong alignment on UAISkill_Interaction_Frenzy");
static_assert(sizeof(UAISkill_Interaction_Frenzy) == 0x000498, "Wrong size on UAISkill_Interaction_Frenzy");
static_assert(offsetof(UAISkill_Interaction_Frenzy, MaxStartRange) == 0x0002A0, "Member 'UAISkill_Interaction_Frenzy::MaxStartRange' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_Frenzy, StopRange) == 0x000300, "Member 'UAISkill_Interaction_Frenzy::StopRange' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_Frenzy, CurrentTargetDistanceMultiplier) == 0x000360, "Member 'UAISkill_Interaction_Frenzy::CurrentTargetDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_Frenzy, MultiplyVerticalDistanceThreshold) == 0x0003C0, "Member 'UAISkill_Interaction_Frenzy::MultiplyVerticalDistanceThreshold' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_Frenzy, VerticalDistanceMultiplier) == 0x0003C4, "Member 'UAISkill_Interaction_Frenzy::VerticalDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_Frenzy, BBRespectPalletChanceOverride) == 0x0003C8, "Member 'UAISkill_Interaction_Frenzy::BBRespectPalletChanceOverride' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_Frenzy, RespectPalletChanceInFrenzy) == 0x0003D8, "Member 'UAISkill_Interaction_Frenzy::RespectPalletChanceInFrenzy' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_Frenzy, IgnorePalletUnderRemainingFrenzy) == 0x000438, "Member 'UAISkill_Interaction_Frenzy::IgnorePalletUnderRemainingFrenzy' has a wrong offset!");

// Class TheLegion.BaseImposeEffectOnFrenzyBleedout
// 0x0008 (0x0308 - 0x0300)
class UBaseImposeEffectOnFrenzyBleedout final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _statusEffectToImpose;                             // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseImposeEffectOnFrenzyBleedout">();
	}
	static class UBaseImposeEffectOnFrenzyBleedout* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseImposeEffectOnFrenzyBleedout>();
	}
};
static_assert(alignof(UBaseImposeEffectOnFrenzyBleedout) == 0x000008, "Wrong alignment on UBaseImposeEffectOnFrenzyBleedout");
static_assert(sizeof(UBaseImposeEffectOnFrenzyBleedout) == 0x000308, "Wrong size on UBaseImposeEffectOnFrenzyBleedout");
static_assert(offsetof(UBaseImposeEffectOnFrenzyBleedout, _statusEffectToImpose) == 0x000300, "Member 'UBaseImposeEffectOnFrenzyBleedout::_statusEffectToImpose' has a wrong offset!");

// Class TheLegion.DiscordancePerk
// 0x0060 (0x04C0 - 0x0460)
class UDiscordancePerk final : public UPerk
{
public:
	TArray<struct FGeneratorQueryHandlePair>      _generatorQueryHandlePairs;                        // 0x0460(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_470[0x30];                                     // 0x0470(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _effectRange[0x3];                                 // 0x04A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _auraLingerDuration;                               // 0x04AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _numSurvivorsRepairingToReveal;                    // 0x04B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B4[0x1];                                      // 0x04B4(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _isPerkConsideredActive;                           // 0x04B5(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B6[0xA];                                      // 0x04B6(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multicast_AddGeneratorAura(class AGenerator* Generator);
	void Multicast_AddLingeringGeneratorAura(class AGenerator* Generator);

	float GetAuraLingerDuration() const;
	float GetEffectRangeAtLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DiscordancePerk">();
	}
	static class UDiscordancePerk* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDiscordancePerk>();
	}
};
static_assert(alignof(UDiscordancePerk) == 0x000008, "Wrong alignment on UDiscordancePerk");
static_assert(sizeof(UDiscordancePerk) == 0x0004C0, "Wrong size on UDiscordancePerk");
static_assert(offsetof(UDiscordancePerk, _generatorQueryHandlePairs) == 0x000460, "Member 'UDiscordancePerk::_generatorQueryHandlePairs' has a wrong offset!");
static_assert(offsetof(UDiscordancePerk, _effectRange) == 0x0004A0, "Member 'UDiscordancePerk::_effectRange' has a wrong offset!");
static_assert(offsetof(UDiscordancePerk, _auraLingerDuration) == 0x0004AC, "Member 'UDiscordancePerk::_auraLingerDuration' has a wrong offset!");
static_assert(offsetof(UDiscordancePerk, _numSurvivorsRepairingToReveal) == 0x0004B0, "Member 'UDiscordancePerk::_numSurvivorsRepairingToReveal' has a wrong offset!");
static_assert(offsetof(UDiscordancePerk, _isPerkConsideredActive) == 0x0004B5, "Member 'UDiscordancePerk::_isPerkConsideredActive' has a wrong offset!");

// Class TheLegion.FrenzyAttack
// 0x0010 (0x0440 - 0x0430)
class UFrenzyAttack final : public UPounceAttack
{
public:
	uint8                                         Pad_430[0x10];                                     // 0x0430(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FrenzyAttack">();
	}
	static class UFrenzyAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFrenzyAttack>();
	}
};
static_assert(alignof(UFrenzyAttack) == 0x000010, "Wrong alignment on UFrenzyAttack");
static_assert(sizeof(UFrenzyAttack) == 0x000440, "Wrong size on UFrenzyAttack");

// Class TheLegion.FrenzyAttackHittingSubstate
// 0x0000 (0x01A0 - 0x01A0)
class UFrenzyAttackHittingSubstate final : public UPounceAttackHittingSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FrenzyAttackHittingSubstate">();
	}
	static class UFrenzyAttackHittingSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFrenzyAttackHittingSubstate>();
	}
};
static_assert(alignof(UFrenzyAttackHittingSubstate) == 0x000008, "Wrong alignment on UFrenzyAttackHittingSubstate");
static_assert(sizeof(UFrenzyAttackHittingSubstate) == 0x0001A0, "Wrong size on UFrenzyAttackHittingSubstate");

// Class TheLegion.FrenzyAttackSuccessSubstate
// 0x0090 (0x01A8 - 0x0118)
class UFrenzyAttackSuccessSubstate final : public UPounceAttackSuccessSubstate
{
public:
	struct FDBDTunableRowHandle                   _healthyTime;                                      // 0x0118(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _injuredTime;                                      // 0x0140(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _bleedoutTime;                                     // 0x0168(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _healthyCurve;                                     // 0x0190(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _injuredCurve;                                     // 0x0198(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _bleedoutCurve;                                    // 0x01A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FrenzyAttackSuccessSubstate">();
	}
	static class UFrenzyAttackSuccessSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFrenzyAttackSuccessSubstate>();
	}
};
static_assert(alignof(UFrenzyAttackSuccessSubstate) == 0x000008, "Wrong alignment on UFrenzyAttackSuccessSubstate");
static_assert(sizeof(UFrenzyAttackSuccessSubstate) == 0x0001A8, "Wrong size on UFrenzyAttackSuccessSubstate");
static_assert(offsetof(UFrenzyAttackSuccessSubstate, _healthyTime) == 0x000118, "Member 'UFrenzyAttackSuccessSubstate::_healthyTime' has a wrong offset!");
static_assert(offsetof(UFrenzyAttackSuccessSubstate, _injuredTime) == 0x000140, "Member 'UFrenzyAttackSuccessSubstate::_injuredTime' has a wrong offset!");
static_assert(offsetof(UFrenzyAttackSuccessSubstate, _bleedoutTime) == 0x000168, "Member 'UFrenzyAttackSuccessSubstate::_bleedoutTime' has a wrong offset!");
static_assert(offsetof(UFrenzyAttackSuccessSubstate, _healthyCurve) == 0x000190, "Member 'UFrenzyAttackSuccessSubstate::_healthyCurve' has a wrong offset!");
static_assert(offsetof(UFrenzyAttackSuccessSubstate, _injuredCurve) == 0x000198, "Member 'UFrenzyAttackSuccessSubstate::_injuredCurve' has a wrong offset!");
static_assert(offsetof(UFrenzyAttackSuccessSubstate, _bleedoutCurve) == 0x0001A0, "Member 'UFrenzyAttackSuccessSubstate::_bleedoutCurve' has a wrong offset!");

// Class TheLegion.FrenzyComponent
// 0x0670 (0x0728 - 0x00B8)
class UFrenzyComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnFrenzyStarted;                                   // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float cooldownTime)> OnFrenzyEnded;                                // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFrenzyEndedNoCooldown;                           // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnInjuredBleedoutStartedDuringFrenzy;              // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFrenzyReadyToStart;                              // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 tier)>    OnFrenzyIncreasedTier;                             // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_120[0xD8];                                     // 0x0120(0x00D8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTunableStat                           _allowManuallyEndFrenzy;                           // 0x01F8(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _chargeToLoseOnRemoveBleedoutTimeAttack;           // 0x0278(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _chargeToLoseOnNonFrenzyAttack;                    // 0x02F8(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _chargeToLoseOnMissedFrenzyAttack;                 // 0x0378(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _cooldownDuration;                                 // 0x03F8(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _frenzyMaxDuration;                                // 0x0478(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _frenzyRechargeDuration;                           // 0x04F8(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _usagePercentNeededToStartFrenzy;                  // 0x0578(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _maxFrenzyTier;                                    // 0x05F8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _frenzyMaxBonusChargeDuration;                     // 0x0620(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class AKiller*                                _killer;                                           // 0x0648(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_650[0x10];                                     // 0x0650(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractionDefinition*                 _cooldownInteraction;                              // 0x0660(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _boltSlasherEffect;                                // 0x0668(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _frenzySlasherEffect;                              // 0x0670(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _frenzyEffect;                                     // 0x0678(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _frenzyCooldownEffect;                             // 0x0680(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _boltCamperEffect;                                 // 0x0688(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _frenzyCamperEffect;                               // 0x0690(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_698[0x90];                                     // 0x0698(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndFrenzy(EFrenzyEndReason Reason);
	void InitializeFrenzy();
	void OnFrenzyCooldownStarted();
	void OnMoriStarted();
	void PauseFrenzyChargeDepletion();
	void ResumeFrenzyChargeDepletion();
	void SetObjectState(class UGameplayTagContainerComponent* objectState);
	void SetStartingFrenzy(bool startingFrenzy);
	void StartFrenzy();

	bool CanManuallyEndFrenzy() const;
	bool CanStartFrenzy() const;
	int32 GetFrenzyTier() const;
	bool HasStartedInjuredBleedoutDuringThisFrenzy() const;
	bool IsInFrenzy() const;
	bool IsInFrenzyCooldown() const;
	bool IsStartingFrenzy() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FrenzyComponent">();
	}
	static class UFrenzyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFrenzyComponent>();
	}
};
static_assert(alignof(UFrenzyComponent) == 0x000008, "Wrong alignment on UFrenzyComponent");
static_assert(sizeof(UFrenzyComponent) == 0x000728, "Wrong size on UFrenzyComponent");
static_assert(offsetof(UFrenzyComponent, OnFrenzyStarted) == 0x0000C0, "Member 'UFrenzyComponent::OnFrenzyStarted' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, OnFrenzyEnded) == 0x0000D0, "Member 'UFrenzyComponent::OnFrenzyEnded' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, OnFrenzyEndedNoCooldown) == 0x0000E0, "Member 'UFrenzyComponent::OnFrenzyEndedNoCooldown' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, OnInjuredBleedoutStartedDuringFrenzy) == 0x0000F0, "Member 'UFrenzyComponent::OnInjuredBleedoutStartedDuringFrenzy' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, OnFrenzyReadyToStart) == 0x000100, "Member 'UFrenzyComponent::OnFrenzyReadyToStart' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, OnFrenzyIncreasedTier) == 0x000110, "Member 'UFrenzyComponent::OnFrenzyIncreasedTier' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _allowManuallyEndFrenzy) == 0x0001F8, "Member 'UFrenzyComponent::_allowManuallyEndFrenzy' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _chargeToLoseOnRemoveBleedoutTimeAttack) == 0x000278, "Member 'UFrenzyComponent::_chargeToLoseOnRemoveBleedoutTimeAttack' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _chargeToLoseOnNonFrenzyAttack) == 0x0002F8, "Member 'UFrenzyComponent::_chargeToLoseOnNonFrenzyAttack' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _chargeToLoseOnMissedFrenzyAttack) == 0x000378, "Member 'UFrenzyComponent::_chargeToLoseOnMissedFrenzyAttack' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _cooldownDuration) == 0x0003F8, "Member 'UFrenzyComponent::_cooldownDuration' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _frenzyMaxDuration) == 0x000478, "Member 'UFrenzyComponent::_frenzyMaxDuration' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _frenzyRechargeDuration) == 0x0004F8, "Member 'UFrenzyComponent::_frenzyRechargeDuration' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _usagePercentNeededToStartFrenzy) == 0x000578, "Member 'UFrenzyComponent::_usagePercentNeededToStartFrenzy' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _maxFrenzyTier) == 0x0005F8, "Member 'UFrenzyComponent::_maxFrenzyTier' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _frenzyMaxBonusChargeDuration) == 0x000620, "Member 'UFrenzyComponent::_frenzyMaxBonusChargeDuration' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _killer) == 0x000648, "Member 'UFrenzyComponent::_killer' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _cooldownInteraction) == 0x000660, "Member 'UFrenzyComponent::_cooldownInteraction' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _boltSlasherEffect) == 0x000668, "Member 'UFrenzyComponent::_boltSlasherEffect' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _frenzySlasherEffect) == 0x000670, "Member 'UFrenzyComponent::_frenzySlasherEffect' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _frenzyEffect) == 0x000678, "Member 'UFrenzyComponent::_frenzyEffect' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _frenzyCooldownEffect) == 0x000680, "Member 'UFrenzyComponent::_frenzyCooldownEffect' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _boltCamperEffect) == 0x000688, "Member 'UFrenzyComponent::_boltCamperEffect' has a wrong offset!");
static_assert(offsetof(UFrenzyComponent, _frenzyCamperEffect) == 0x000690, "Member 'UFrenzyComponent::_frenzyCamperEffect' has a wrong offset!");

// Class TheLegion.FrenzyEffect
// 0x0028 (0x03C0 - 0x0398)
class UFrenzyEffect final : public UStatusEffect
{
public:
	struct FDBDTunableRowHandle                   _increaseMovementSpeedPerTier;                     // 0x0398(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	void Authority_OnFrenzyTierIncreased(int32 tier);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FrenzyEffect">();
	}
	static class UFrenzyEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFrenzyEffect>();
	}
};
static_assert(alignof(UFrenzyEffect) == 0x000008, "Wrong alignment on UFrenzyEffect");
static_assert(sizeof(UFrenzyEffect) == 0x0003C0, "Wrong size on UFrenzyEffect");
static_assert(offsetof(UFrenzyEffect, _increaseMovementSpeedPerTier) == 0x000398, "Member 'UFrenzyEffect::_increaseMovementSpeedPerTier' has a wrong offset!");

// Class TheLegion.FrenzySlasherVault
// 0x0000 (0x0860 - 0x0860)
class UFrenzySlasherVault final : public UKillerVaultDefinition
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FrenzySlasherVault">();
	}
	static class UFrenzySlasherVault* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFrenzySlasherVault>();
	}
};
static_assert(alignof(UFrenzySlasherVault) == 0x000010, "Wrong alignment on UFrenzySlasherVault");
static_assert(sizeof(UFrenzySlasherVault) == 0x000860, "Wrong size on UFrenzySlasherVault");

// Class TheLegion.IsInFrenzyKillerInstinctRadius
// 0x00C8 (0x01B8 - 0x00F0)
class UIsInFrenzyKillerInstinctRadius final : public UEventDrivenModifierCondition
{
public:
	uint8                                         Pad_F0[0xC8];                                      // 0x00F0(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IsInFrenzyKillerInstinctRadius">();
	}
	static class UIsInFrenzyKillerInstinctRadius* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIsInFrenzyKillerInstinctRadius>();
	}
};
static_assert(alignof(UIsInFrenzyKillerInstinctRadius) == 0x000008, "Wrong alignment on UIsInFrenzyKillerInstinctRadius");
static_assert(sizeof(UIsInFrenzyKillerInstinctRadius) == 0x0001B8, "Wrong size on UIsInFrenzyKillerInstinctRadius");

// Class TheLegion.JoeysMixtapeEffect
// 0x0008 (0x03A0 - 0x0398)
class UJoeysMixtapeEffect final : public UStatusEffect
{
public:
	TSubclassOf<class UStatusEffect>              _statusEffectToImpose;                             // 0x0398(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JoeysMixtapeEffect">();
	}
	static class UJoeysMixtapeEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJoeysMixtapeEffect>();
	}
};
static_assert(alignof(UJoeysMixtapeEffect) == 0x000008, "Wrong alignment on UJoeysMixtapeEffect");
static_assert(sizeof(UJoeysMixtapeEffect) == 0x0003A0, "Wrong size on UJoeysMixtapeEffect");
static_assert(offsetof(UJoeysMixtapeEffect, _statusEffectToImpose) == 0x000398, "Member 'UJoeysMixtapeEffect::_statusEffectToImpose' has a wrong offset!");

// Class TheLegion.LegionAnimInstance
// 0x0020 (0x0740 - 0x0720)
class ULegionAnimInstance final : public UKillerAnimInstance
{
public:
	bool                                          _isFrenzy;                                         // 0x0720(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_721[0x1F];                                     // 0x0721(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LegionAnimInstance">();
	}
	static class ULegionAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULegionAnimInstance>();
	}
};
static_assert(alignof(ULegionAnimInstance) == 0x000010, "Wrong alignment on ULegionAnimInstance");
static_assert(sizeof(ULegionAnimInstance) == 0x000740, "Wrong size on ULegionAnimInstance");
static_assert(offsetof(ULegionAnimInstance, _isFrenzy) == 0x000720, "Member 'ULegionAnimInstance::_isFrenzy' has a wrong offset!");

// Class TheLegion.LegionAttackPicker
// 0x0018 (0x00D0 - 0x00B8)
class ULegionAttackPicker final : public UKillerAttackPickerComponent
{
public:
	uint8                                         Pad_B8[0x18];                                      // 0x00B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LegionAttackPicker">();
	}
	static class ULegionAttackPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULegionAttackPicker>();
	}
};
static_assert(alignof(ULegionAttackPicker) == 0x000008, "Wrong alignment on ULegionAttackPicker");
static_assert(sizeof(ULegionAttackPicker) == 0x0000D0, "Wrong size on ULegionAttackPicker");

// Class TheLegion.LegionCheatComponent
// 0x0000 (0x00B8 - 0x00B8)
class ULegionCheatComponent final : public UActorComponent
{
public:
	void DBD_LegionFrenzyForever();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LegionCheatComponent">();
	}
	static class ULegionCheatComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULegionCheatComponent>();
	}
};
static_assert(alignof(ULegionCheatComponent) == 0x000008, "Wrong alignment on ULegionCheatComponent");
static_assert(sizeof(ULegionCheatComponent) == 0x0000B8, "Wrong size on ULegionCheatComponent");

// Class TheLegion.LegionKillerAnalyticsComponent
// 0x0030 (0x00E8 - 0x00B8)
class ULegionKillerAnalyticsComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x30];                                      // 0x00B8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetGameEventDispatcher(class UGameEventDispatcher* GameEventDispatcher);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LegionKillerAnalyticsComponent">();
	}
	static class ULegionKillerAnalyticsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULegionKillerAnalyticsComponent>();
	}
};
static_assert(alignof(ULegionKillerAnalyticsComponent) == 0x000008, "Wrong alignment on ULegionKillerAnalyticsComponent");
static_assert(sizeof(ULegionKillerAnalyticsComponent) == 0x0000E8, "Wrong size on ULegionKillerAnalyticsComponent");

// Class TheLegion.LegionSurvivorAnalyticsComponent
// 0x0048 (0x0100 - 0x00B8)
class ULegionSurvivorAnalyticsComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x48];                                      // 0x00B8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGameEventDispatched(const struct FGameplayTag& gameEventType, const struct FGameEventData& GameEventData);
	void SetGameEventDispatcher(class UGameEventDispatcher* GameEventDispatcher);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LegionSurvivorAnalyticsComponent">();
	}
	static class ULegionSurvivorAnalyticsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULegionSurvivorAnalyticsComponent>();
	}
};
static_assert(alignof(ULegionSurvivorAnalyticsComponent) == 0x000008, "Wrong alignment on ULegionSurvivorAnalyticsComponent");
static_assert(sizeof(ULegionSurvivorAnalyticsComponent) == 0x000100, "Wrong size on ULegionSurvivorAnalyticsComponent");

// Class TheLegion.Madgrit
// 0x0008 (0x0468 - 0x0460)
class UMadgrit final : public UPerk
{
public:
	class UCurveFloat*                            _slashHittingSpeedCurve;                           // 0x0460(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Madgrit">();
	}
	static class UMadgrit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMadgrit>();
	}
};
static_assert(alignof(UMadgrit) == 0x000008, "Wrong alignment on UMadgrit");
static_assert(sizeof(UMadgrit) == 0x000468, "Wrong size on UMadgrit");
static_assert(offsetof(UMadgrit, _slashHittingSpeedCurve) == 0x000460, "Member 'UMadgrit::_slashHittingSpeedCurve' has a wrong offset!");

// Class TheLegion.ModifyFrenzyFOVEffect
// 0x0038 (0x03D0 - 0x0398)
class UModifyFrenzyFOVEffect final : public UStatusEffect
{
public:
	float                                         _increaseFOVPerHit;                                // 0x0398(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _frenzyBaseFOV;                                    // 0x03A0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C8[0x8];                                      // 0x03C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnFrenzyTierIncreased(int32 tier);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModifyFrenzyFOVEffect">();
	}
	static class UModifyFrenzyFOVEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModifyFrenzyFOVEffect>();
	}
};
static_assert(alignof(UModifyFrenzyFOVEffect) == 0x000008, "Wrong alignment on UModifyFrenzyFOVEffect");
static_assert(sizeof(UModifyFrenzyFOVEffect) == 0x0003D0, "Wrong size on UModifyFrenzyFOVEffect");
static_assert(offsetof(UModifyFrenzyFOVEffect, _increaseFOVPerHit) == 0x000398, "Member 'UModifyFrenzyFOVEffect::_increaseFOVPerHit' has a wrong offset!");
static_assert(offsetof(UModifyFrenzyFOVEffect, _frenzyBaseFOV) == 0x0003A0, "Member 'UModifyFrenzyFOVEffect::_frenzyBaseFOV' has a wrong offset!");

// Class TheLegion.OnSelfMendImposeEffect
// 0x0010 (0x03A8 - 0x0398)
class UOnSelfMendImposeEffect final : public UStatusEffect
{
public:
	float                                         _statusEffectTime;                                 // 0x0398(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _statusEffectToImpose;                             // 0x03A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnSelfMendImposeEffect">();
	}
	static class UOnSelfMendImposeEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnSelfMendImposeEffect>();
	}
};
static_assert(alignof(UOnSelfMendImposeEffect) == 0x000008, "Wrong alignment on UOnSelfMendImposeEffect");
static_assert(sizeof(UOnSelfMendImposeEffect) == 0x0003A8, "Wrong size on UOnSelfMendImposeEffect");
static_assert(offsetof(UOnSelfMendImposeEffect, _statusEffectTime) == 0x000398, "Member 'UOnSelfMendImposeEffect::_statusEffectTime' has a wrong offset!");
static_assert(offsetof(UOnSelfMendImposeEffect, _statusEffectToImpose) == 0x0003A0, "Member 'UOnSelfMendImposeEffect::_statusEffectToImpose' has a wrong offset!");

}

