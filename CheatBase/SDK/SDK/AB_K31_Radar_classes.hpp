#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_K31_Radar

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "TheK31_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AB_K31_Radar.AB_K31_Radar_C
// 0x0950 (0x0CD0 - 0x0380)
class UAB_K31_Radar_C final : public UK31RadarAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0388(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0390(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0398(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x03B8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x03E0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0408(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0430(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x0458(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x04A0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x04C0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x0508(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0528(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0570(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0590(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x05D8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_2;                      // 0x05F8(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x06C0(0x0050)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x0710(0x0108)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0818(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0840(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0868(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x08B0(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x08D0(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0900(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x0920(0x00C8)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x09E8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0A10(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0A38(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0A80(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0AA0(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0AD0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0AF0(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0BB8(0x0108)()
	bool                                          _isFPV;                                            // 0x0CC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void AnimNotify__consumeIsActivatingADroneRadar();
	void AnimNotify__consumeIsRecallingADroneRadar();
	void BlueprintBeginPlay();
	void ExecuteUbergraph_AB_K31_Radar(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AB_K31_Radar_C">();
	}
	static class UAB_K31_Radar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAB_K31_Radar_C>();
	}
};
static_assert(alignof(UAB_K31_Radar_C) == 0x000010, "Wrong alignment on UAB_K31_Radar_C");
static_assert(sizeof(UAB_K31_Radar_C) == 0x000CD0, "Wrong size on UAB_K31_Radar_C");
static_assert(offsetof(UAB_K31_Radar_C, UberGraphFrame) == 0x000380, "Member 'UAB_K31_Radar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimBlueprintExtension_PropertyAccess) == 0x000388, "Member 'UAB_K31_Radar_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimBlueprintExtension_Base) == 0x000390, "Member 'UAB_K31_Radar_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_Root) == 0x000398, "Member 'UAB_K31_Radar_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_TransitionResult_7) == 0x0003B8, "Member 'UAB_K31_Radar_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_TransitionResult_6) == 0x0003E0, "Member 'UAB_K31_Radar_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_TransitionResult_5) == 0x000408, "Member 'UAB_K31_Radar_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_TransitionResult_4) == 0x000430, "Member 'UAB_K31_Radar_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_SequencePlayer_5) == 0x000458, "Member 'UAB_K31_Radar_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_StateResult_7) == 0x0004A0, "Member 'UAB_K31_Radar_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_SequencePlayer_4) == 0x0004C0, "Member 'UAB_K31_Radar_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_StateResult_6) == 0x000508, "Member 'UAB_K31_Radar_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_SequencePlayer_3) == 0x000528, "Member 'UAB_K31_Radar_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_StateResult_5) == 0x000570, "Member 'UAB_K31_Radar_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_SequencePlayer_2) == 0x000590, "Member 'UAB_K31_Radar_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_StateResult_4) == 0x0005D8, "Member 'UAB_K31_Radar_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_StateMachine_2) == 0x0005F8, "Member 'UAB_K31_Radar_C::AnimGraphNode_StateMachine_2' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_Slot) == 0x0006C0, "Member 'UAB_K31_Radar_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_SaveCachedPose_1) == 0x000710, "Member 'UAB_K31_Radar_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_TransitionResult_3) == 0x000818, "Member 'UAB_K31_Radar_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_TransitionResult_2) == 0x000840, "Member 'UAB_K31_Radar_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_SequencePlayer_1) == 0x000868, "Member 'UAB_K31_Radar_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_StateResult_3) == 0x0008B0, "Member 'UAB_K31_Radar_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_UseCachedPose_1) == 0x0008D0, "Member 'UAB_K31_Radar_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_StateResult_2) == 0x000900, "Member 'UAB_K31_Radar_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_StateMachine_1) == 0x000920, "Member 'UAB_K31_Radar_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_TransitionResult_1) == 0x0009E8, "Member 'UAB_K31_Radar_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_TransitionResult) == 0x000A10, "Member 'UAB_K31_Radar_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_SequencePlayer) == 0x000A38, "Member 'UAB_K31_Radar_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_StateResult_1) == 0x000A80, "Member 'UAB_K31_Radar_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_UseCachedPose) == 0x000AA0, "Member 'UAB_K31_Radar_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_StateResult) == 0x000AD0, "Member 'UAB_K31_Radar_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_StateMachine) == 0x000AF0, "Member 'UAB_K31_Radar_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, AnimGraphNode_SaveCachedPose) == 0x000BB8, "Member 'UAB_K31_Radar_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UAB_K31_Radar_C, _isFPV) == 0x000CC0, "Member 'UAB_K31_Radar_C::_isFPV' has a wrong offset!");

}

