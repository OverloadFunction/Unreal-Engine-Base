#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CoreCommonUIUtils

#include "Basic.hpp"

#include "CoreCommonUIUtils_classes.hpp"
#include "CoreCommonUIUtils_parameters.hpp"


namespace SDK
{

// Function CoreCommonUIUtils.CoreCommonUIUtils.BeautifyNarrativeText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             charLimit                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCoreCommonUIUtils::BeautifyNarrativeText(const class FString& str, const int32 charLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "BeautifyNarrativeText");

	Params::CoreCommonUIUtils_BeautifyNarrativeText Parms{};

	Parms.str = std::move(str);
	Parms.charLimit = charLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.DivideWithRemainder
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             Dividend                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Divisor                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Remainder                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCoreCommonUIUtils::DivideWithRemainder(const int32 Dividend, const int32 Divisor, int32* Remainder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "DivideWithRemainder");

	Params::CoreCommonUIUtils_DivideWithRemainder Parms{};

	Parms.Dividend = Dividend;
	Parms.Divisor = Divisor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Remainder != nullptr)
		*Remainder = Parms.Remainder;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.GetBeautifiedNumericString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCoreCommonUIUtils::GetBeautifiedNumericString(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "GetBeautifiedNumericString");

	Params::CoreCommonUIUtils_GetBeautifiedNumericString Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.GetBeautifiedNumericText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreCommonUIUtils::GetBeautifiedNumericText(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "GetBeautifiedNumericText");

	Params::CoreCommonUIUtils_GetBeautifiedNumericText Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.GetDPIScale
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreCommonUIUtils::GetDPIScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "GetDPIScale");

	Params::CoreCommonUIUtils_GetDPIScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.GetEmblemQualityText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EEmblemQuality                    EmblemQuality                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreCommonUIUtils::GetEmblemQualityText(const EEmblemQuality EmblemQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "GetEmblemQualityText");

	Params::CoreCommonUIUtils_GetEmblemQualityText Parms{};

	Parms.EmblemQuality = EmblemQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.GetHexNoAlphaFromColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCoreCommonUIUtils::GetHexNoAlphaFromColor(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "GetHexNoAlphaFromColor");

	Params::CoreCommonUIUtils_GetHexNoAlphaFromColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.GetItemTypeName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EInventoryItemType                      ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreCommonUIUtils::GetItemTypeName(EInventoryItemType ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "GetItemTypeName");

	Params::CoreCommonUIUtils_GetItemTypeName Parms{};

	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.GetNextUpdateRate
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FDateTime&                 EndTime                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreCommonUIUtils::GetNextUpdateRate(const struct FDateTime& EndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "GetNextUpdateRate");

	Params::CoreCommonUIUtils_GetNextUpdateRate Parms{};

	Parms.EndTime = std::move(EndTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.GetRemainingTimeText
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDateTime&                 endDateTime                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERemainingTimeFormat                    timeFormat                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             numberOfDigits                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreCommonUIUtils::GetRemainingTimeText(const struct FDateTime& endDateTime, ERemainingTimeFormat timeFormat, const int32 numberOfDigits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "GetRemainingTimeText");

	Params::CoreCommonUIUtils_GetRemainingTimeText Parms{};

	Parms.endDateTime = std::move(endDateTime);
	Parms.timeFormat = timeFormat;
	Parms.numberOfDigits = numberOfDigits;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.GetTextArrayBasedOnSourceTags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EItemSourceTag                    Tags                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FText>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FText> UCoreCommonUIUtils::GetTextArrayBasedOnSourceTags(const EItemSourceTag Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "GetTextArrayBasedOnSourceTags");

	Params::CoreCommonUIUtils_GetTextArrayBasedOnSourceTags Parms{};

	Parms.Tags = Tags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.GetTextArrayBasedOnSpecialProperties
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const ECustomizationSpecialProperty     PropertyFlags                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FText>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FText> UCoreCommonUIUtils::GetTextArrayBasedOnSpecialProperties(const ECustomizationSpecialProperty PropertyFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "GetTextArrayBasedOnSpecialProperties");

	Params::CoreCommonUIUtils_GetTextArrayBasedOnSpecialProperties Parms{};

	Parms.PropertyFlags = PropertyFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.GetTextBasedOnRarity
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EItemRarity                       Rarity                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreCommonUIUtils::GetTextBasedOnRarity(const EItemRarity Rarity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "GetTextBasedOnRarity");

	Params::CoreCommonUIUtils_GetTextBasedOnRarity Parms{};

	Parms.Rarity = Rarity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.GetTextBasedOnSourceTag
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EItemSourceTag                    Tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreCommonUIUtils::GetTextBasedOnSourceTag(const EItemSourceTag Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "GetTextBasedOnSourceTag");

	Params::CoreCommonUIUtils_GetTextBasedOnSourceTag Parms{};

	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.GetTextBasedOnSpecialProperty
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const ECustomizationSpecialProperty     propertyFlag                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreCommonUIUtils::GetTextBasedOnSpecialProperty(const ECustomizationSpecialProperty propertyFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "GetTextBasedOnSpecialProperty");

	Params::CoreCommonUIUtils_GetTextBasedOnSpecialProperty Parms{};

	Parms.propertyFlag = propertyFlag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.HasOuter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Root                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreCommonUIUtils::HasOuter(const class UObject* Object, class UObject* Root)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "HasOuter");

	Params::CoreCommonUIUtils_HasOuter Parms{};

	Parms.Object = Object;
	Parms.Root = Root;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.SetConditionalWidgetVisibility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              Condition                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ESlateVisibility                  trueVisibility                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ESlateVisibility                  falseVisibility                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCommonUIUtils::SetConditionalWidgetVisibility(class UWidget* Widget, const bool Condition, const ESlateVisibility trueVisibility, const ESlateVisibility falseVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "SetConditionalWidgetVisibility");

	Params::CoreCommonUIUtils_SetConditionalWidgetVisibility Parms{};

	Parms.Widget = Widget;
	Parms.Condition = Condition;
	Parms.trueVisibility = trueVisibility;
	Parms.falseVisibility = falseVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.Truncate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharacterLimit                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    truncateOnSpace                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCoreCommonUIUtils::Truncate(const class FString& str, int32 CharacterLimit, bool truncateOnSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "Truncate");

	Params::CoreCommonUIUtils_Truncate Parms{};

	Parms.str = std::move(str);
	Parms.CharacterLimit = CharacterLimit;
	Parms.truncateOnSpace = truncateOnSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreCommonUIUtils.CoreCommonUIUtils.WrapTextWithStyleTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      Style                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreCommonUIUtils::WrapTextWithStyleTag(const class FText& Text, const class FText& Style)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreCommonUIUtils", "WrapTextWithStyleTag");

	Params::CoreCommonUIUtils_WrapTextWithStyleTag Parms{};

	Parms.Text = std::move(Text);
	Parms.Style = std::move(Style);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

