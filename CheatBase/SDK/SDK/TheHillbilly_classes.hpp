#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheHillbilly

#include "Basic.hpp"

#include "AnimationUtilities_structs.hpp"
#include "GameplayTagUtilities_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "DBDBots_classes.hpp"
#include "DBDCompetence_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_classes.hpp"
#include "DBDAttack_classes.hpp"
#include "DBDAnimation_classes.hpp"
#include "StatSystem_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "Competence_classes.hpp"


namespace SDK
{

// Class TheHillbilly.Addon_Hillbilly_15
// 0x00A0 (0x03A0 - 0x0300)
class UAddon_Hillbilly_15 final : public UItemAddon
{
public:
	struct FAnimationMontageDescriptor            _breakPalletMontage;                               // 0x0300(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         _halfDamageDurationAfterBreakable;                 // 0x0320(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_324[0x7C];                                     // 0x0324(0x007C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_Hillbilly_15">();
	}
	static class UAddon_Hillbilly_15* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_Hillbilly_15>();
	}
};
static_assert(alignof(UAddon_Hillbilly_15) == 0x000008, "Wrong alignment on UAddon_Hillbilly_15");
static_assert(sizeof(UAddon_Hillbilly_15) == 0x0003A0, "Wrong size on UAddon_Hillbilly_15");
static_assert(offsetof(UAddon_Hillbilly_15, _breakPalletMontage) == 0x000300, "Member 'UAddon_Hillbilly_15::_breakPalletMontage' has a wrong offset!");
static_assert(offsetof(UAddon_Hillbilly_15, _halfDamageDurationAfterBreakable) == 0x000320, "Member 'UAddon_Hillbilly_15::_halfDamageDurationAfterBreakable' has a wrong offset!");

// Class TheHillbilly.Addon_Hillbilly_18
// 0x0038 (0x0348 - 0x0310)
class UAddon_Hillbilly_18 final : public UOnEventBaseAddon
{
public:
	uint8                                         Pad_310[0x28];                                     // 0x0310(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _undetectableStatusEffectClass;                    // 0x0338(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _undetectableStatusEffect;                         // 0x0340(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_Hillbilly_18">();
	}
	static class UAddon_Hillbilly_18* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_Hillbilly_18>();
	}
};
static_assert(alignof(UAddon_Hillbilly_18) == 0x000008, "Wrong alignment on UAddon_Hillbilly_18");
static_assert(sizeof(UAddon_Hillbilly_18) == 0x000348, "Wrong size on UAddon_Hillbilly_18");
static_assert(offsetof(UAddon_Hillbilly_18, _undetectableStatusEffectClass) == 0x000338, "Member 'UAddon_Hillbilly_18::_undetectableStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UAddon_Hillbilly_18, _undetectableStatusEffect) == 0x000340, "Member 'UAddon_Hillbilly_18::_undetectableStatusEffect' has a wrong offset!");

// Class TheHillbilly.AISkill_Interaction_HillbillyChainsaw
// 0x03F0 (0x0690 - 0x02A0)
class UAISkill_Interaction_HillbillyChainsaw final : public UAISkill_Interaction_KillerPower
{
public:
	struct FAITunableParameter                    MinimumChargeDistance;                             // 0x02A0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    NormalStartDistanceToAngle;                        // 0x0300(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    NormalEndDistanceToAngle;                          // 0x0360(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    NormalMaximumDistance;                             // 0x03C0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    OverdriveStartDistanceToAngle;                     // 0x0420(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    OverdriveMaximumDistance;                          // 0x0480(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    FinalPathCheckAtChargePercent;                     // 0x04E0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    CurvedDashStartAdjustPercent;                      // 0x0540(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    IgnoreObstaclesUntilTurnYawScale;                  // 0x05A0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         CurveSegmentIntervalDistance;                      // 0x0600(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PathUpdateInterval;                                // 0x0604(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PathKeepTime;                                      // 0x0608(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavRaycastHitTargetDistanceMargin;                 // 0x060C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChainsawStartAdjustDistance;                       // 0x0610(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavRaycastHitDetectionDistance;                    // 0x0614(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumTraversalDistance;                          // 0x0618(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeDistance;                                    // 0x061C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstacleDetectionDistance;                         // 0x0620(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAdjustAngle;                                    // 0x0624(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAdjustAngle;                                    // 0x0628(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SideAngleDistanceMultiplier;                       // 0x062C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPathSegmentLength;                              // 0x0630(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PathAutoValidDistance;                             // 0x0634(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_638[0x58];                                     // 0x0638(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_Interaction_HillbillyChainsaw">();
	}
	static class UAISkill_Interaction_HillbillyChainsaw* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_Interaction_HillbillyChainsaw>();
	}
};
static_assert(alignof(UAISkill_Interaction_HillbillyChainsaw) == 0x000008, "Wrong alignment on UAISkill_Interaction_HillbillyChainsaw");
static_assert(sizeof(UAISkill_Interaction_HillbillyChainsaw) == 0x000690, "Wrong size on UAISkill_Interaction_HillbillyChainsaw");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, MinimumChargeDistance) == 0x0002A0, "Member 'UAISkill_Interaction_HillbillyChainsaw::MinimumChargeDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, NormalStartDistanceToAngle) == 0x000300, "Member 'UAISkill_Interaction_HillbillyChainsaw::NormalStartDistanceToAngle' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, NormalEndDistanceToAngle) == 0x000360, "Member 'UAISkill_Interaction_HillbillyChainsaw::NormalEndDistanceToAngle' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, NormalMaximumDistance) == 0x0003C0, "Member 'UAISkill_Interaction_HillbillyChainsaw::NormalMaximumDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, OverdriveStartDistanceToAngle) == 0x000420, "Member 'UAISkill_Interaction_HillbillyChainsaw::OverdriveStartDistanceToAngle' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, OverdriveMaximumDistance) == 0x000480, "Member 'UAISkill_Interaction_HillbillyChainsaw::OverdriveMaximumDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, FinalPathCheckAtChargePercent) == 0x0004E0, "Member 'UAISkill_Interaction_HillbillyChainsaw::FinalPathCheckAtChargePercent' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, CurvedDashStartAdjustPercent) == 0x000540, "Member 'UAISkill_Interaction_HillbillyChainsaw::CurvedDashStartAdjustPercent' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, IgnoreObstaclesUntilTurnYawScale) == 0x0005A0, "Member 'UAISkill_Interaction_HillbillyChainsaw::IgnoreObstaclesUntilTurnYawScale' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, CurveSegmentIntervalDistance) == 0x000600, "Member 'UAISkill_Interaction_HillbillyChainsaw::CurveSegmentIntervalDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, PathUpdateInterval) == 0x000604, "Member 'UAISkill_Interaction_HillbillyChainsaw::PathUpdateInterval' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, PathKeepTime) == 0x000608, "Member 'UAISkill_Interaction_HillbillyChainsaw::PathKeepTime' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, NavRaycastHitTargetDistanceMargin) == 0x00060C, "Member 'UAISkill_Interaction_HillbillyChainsaw::NavRaycastHitTargetDistanceMargin' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, ChainsawStartAdjustDistance) == 0x000610, "Member 'UAISkill_Interaction_HillbillyChainsaw::ChainsawStartAdjustDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, NavRaycastHitDetectionDistance) == 0x000614, "Member 'UAISkill_Interaction_HillbillyChainsaw::NavRaycastHitDetectionDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, MinimumTraversalDistance) == 0x000618, "Member 'UAISkill_Interaction_HillbillyChainsaw::MinimumTraversalDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, ChargeDistance) == 0x00061C, "Member 'UAISkill_Interaction_HillbillyChainsaw::ChargeDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, ObstacleDetectionDistance) == 0x000620, "Member 'UAISkill_Interaction_HillbillyChainsaw::ObstacleDetectionDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, MaxAdjustAngle) == 0x000624, "Member 'UAISkill_Interaction_HillbillyChainsaw::MaxAdjustAngle' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, MinAdjustAngle) == 0x000628, "Member 'UAISkill_Interaction_HillbillyChainsaw::MinAdjustAngle' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, SideAngleDistanceMultiplier) == 0x00062C, "Member 'UAISkill_Interaction_HillbillyChainsaw::SideAngleDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, MinPathSegmentLength) == 0x000630, "Member 'UAISkill_Interaction_HillbillyChainsaw::MinPathSegmentLength' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_HillbillyChainsaw, PathAutoValidDistance) == 0x000634, "Member 'UAISkill_Interaction_HillbillyChainsaw::PathAutoValidDistance' has a wrong offset!");

// Class TheHillbilly.BaseChainsawAttack
// 0x0120 (0x0550 - 0x0430)
#pragma pack(push, 0x1)
class alignas(0x10) UBaseChainsawAttack : public UPounceAttack
{
public:
	uint8                                         Pad_430[0x28];                                     // 0x0430(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           _chainsawHitGameEventTag;                          // 0x0458(0x000C)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           _chainsawAttemptGameEventTag;                      // 0x0464(0x000C)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_470[0xD8];                                     // 0x0470(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseChainsawAttack">();
	}
	static class UBaseChainsawAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseChainsawAttack>();
	}
};
#pragma pack(pop)
static_assert(alignof(UBaseChainsawAttack) == 0x000010, "Wrong alignment on UBaseChainsawAttack");
static_assert(sizeof(UBaseChainsawAttack) == 0x000550, "Wrong size on UBaseChainsawAttack");
static_assert(offsetof(UBaseChainsawAttack, _chainsawHitGameEventTag) == 0x000458, "Member 'UBaseChainsawAttack::_chainsawHitGameEventTag' has a wrong offset!");
static_assert(offsetof(UBaseChainsawAttack, _chainsawAttemptGameEventTag) == 0x000464, "Member 'UBaseChainsawAttack::_chainsawAttemptGameEventTag' has a wrong offset!");

// Class TheHillbilly.BaseChainsawAttackOpenSubstate
// 0x0038 (0x0168 - 0x0130)
class UBaseChainsawAttackOpenSubstate : public UPounceAttackOpenSubstate
{
public:
	uint8                                         Pad_130[0x38];                                     // 0x0130(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseChainsawAttackOpenSubstate">();
	}
	static class UBaseChainsawAttackOpenSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseChainsawAttackOpenSubstate>();
	}
};
static_assert(alignof(UBaseChainsawAttackOpenSubstate) == 0x000008, "Wrong alignment on UBaseChainsawAttackOpenSubstate");
static_assert(sizeof(UBaseChainsawAttackOpenSubstate) == 0x000168, "Wrong size on UBaseChainsawAttackOpenSubstate");

// Class TheHillbilly.BaseChainsawAttackSuccessSubstate
// 0x0000 (0x0118 - 0x0118)
class UBaseChainsawAttackSuccessSubstate : public UPounceAttackSuccessSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseChainsawAttackSuccessSubstate">();
	}
	static class UBaseChainsawAttackSuccessSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseChainsawAttackSuccessSubstate>();
	}
};
static_assert(alignof(UBaseChainsawAttackSuccessSubstate) == 0x000008, "Wrong alignment on UBaseChainsawAttackSuccessSubstate");
static_assert(sizeof(UBaseChainsawAttackSuccessSubstate) == 0x000118, "Wrong size on UBaseChainsawAttackSuccessSubstate");

// Class TheHillbilly.BaseChainsawAttackMissSubstate
// 0x0000 (0x0120 - 0x0120)
class UBaseChainsawAttackMissSubstate : public UPounceAttackMissSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseChainsawAttackMissSubstate">();
	}
	static class UBaseChainsawAttackMissSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseChainsawAttackMissSubstate>();
	}
};
static_assert(alignof(UBaseChainsawAttackMissSubstate) == 0x000008, "Wrong alignment on UBaseChainsawAttackMissSubstate");
static_assert(sizeof(UBaseChainsawAttackMissSubstate) == 0x000120, "Wrong size on UBaseChainsawAttackMissSubstate");

// Class TheHillbilly.BaseChainsawAttackObstructSubstate
// 0x0000 (0x0128 - 0x0128)
class UBaseChainsawAttackObstructSubstate : public UPounceAttackObstructSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseChainsawAttackObstructSubstate">();
	}
	static class UBaseChainsawAttackObstructSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseChainsawAttackObstructSubstate>();
	}
};
static_assert(alignof(UBaseChainsawAttackObstructSubstate) == 0x000008, "Wrong alignment on UBaseChainsawAttackObstructSubstate");
static_assert(sizeof(UBaseChainsawAttackObstructSubstate) == 0x000128, "Wrong size on UBaseChainsawAttackObstructSubstate");

// Class TheHillbilly.ChainsawAnalyticsBaseComponent
// 0x0040 (0x00F8 - 0x00B8)
class UChainsawAnalyticsBaseComponent : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _maxDistanceFromHookToBeConsideredCamping;         // 0x00C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CC[0x2C];                                      // 0x00CC(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChainsawAnalyticsBaseComponent">();
	}
	static class UChainsawAnalyticsBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChainsawAnalyticsBaseComponent>();
	}
};
static_assert(alignof(UChainsawAnalyticsBaseComponent) == 0x000008, "Wrong alignment on UChainsawAnalyticsBaseComponent");
static_assert(sizeof(UChainsawAnalyticsBaseComponent) == 0x0000F8, "Wrong size on UChainsawAnalyticsBaseComponent");
static_assert(offsetof(UChainsawAnalyticsBaseComponent, _maxDistanceFromHookToBeConsideredCamping) == 0x0000C8, "Member 'UChainsawAnalyticsBaseComponent::_maxDistanceFromHookToBeConsideredCamping' has a wrong offset!");

// Class TheHillbilly.ChainsawRevInteraction
// 0x0080 (0x0940 - 0x08C0)
class UChainsawRevInteraction : public UChargeableInteractionDefinition
{
public:
	uint8                                         Pad_8C0[0x48];                                     // 0x08C0(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _soundCueDistanceDataID;                           // 0x0908(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_914[0x4];                                      // 0x0914(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          _chainsawRevStartAkAudioEvent;                     // 0x0918(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          _chainsawRevEndAkAudioEvent;                       // 0x0920(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AKiller*                                _owningKiller;                                     // 0x0928(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_930[0x10];                                     // 0x0930(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLevelReadyToPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChainsawRevInteraction">();
	}
	static class UChainsawRevInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChainsawRevInteraction>();
	}
};
static_assert(alignof(UChainsawRevInteraction) == 0x000010, "Wrong alignment on UChainsawRevInteraction");
static_assert(sizeof(UChainsawRevInteraction) == 0x000940, "Wrong size on UChainsawRevInteraction");
static_assert(offsetof(UChainsawRevInteraction, _soundCueDistanceDataID) == 0x000908, "Member 'UChainsawRevInteraction::_soundCueDistanceDataID' has a wrong offset!");
static_assert(offsetof(UChainsawRevInteraction, _chainsawRevStartAkAudioEvent) == 0x000918, "Member 'UChainsawRevInteraction::_chainsawRevStartAkAudioEvent' has a wrong offset!");
static_assert(offsetof(UChainsawRevInteraction, _chainsawRevEndAkAudioEvent) == 0x000920, "Member 'UChainsawRevInteraction::_chainsawRevEndAkAudioEvent' has a wrong offset!");
static_assert(offsetof(UChainsawRevInteraction, _owningKiller) == 0x000928, "Member 'UChainsawRevInteraction::_owningKiller' has a wrong offset!");

// Class TheHillbilly.HillbillyAnalyticsComponent
// 0x00A0 (0x0198 - 0x00F8)
class UHillbillyAnalyticsComponent final : public UChainsawAnalyticsBaseComponent
{
public:
	uint8                                         Pad_F8[0xA0];                                      // 0x00F8(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HillbillyAnalyticsComponent">();
	}
	static class UHillbillyAnalyticsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHillbillyAnalyticsComponent>();
	}
};
static_assert(alignof(UHillbillyAnalyticsComponent) == 0x000008, "Wrong alignment on UHillbillyAnalyticsComponent");
static_assert(sizeof(UHillbillyAnalyticsComponent) == 0x000198, "Wrong size on UHillbillyAnalyticsComponent");

// Class TheHillbilly.HillbillyAnimInstance
// 0x0000 (0x0720 - 0x0720)
class UHillbillyAnimInstance final : public UKillerAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HillbillyAnimInstance">();
	}
	static class UHillbillyAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHillbillyAnimInstance>();
	}
};
static_assert(alignof(UHillbillyAnimInstance) == 0x000010, "Wrong alignment on UHillbillyAnimInstance");
static_assert(sizeof(UHillbillyAnimInstance) == 0x000720, "Wrong size on UHillbillyAnimInstance");

// Class TheHillbilly.HillbillyChainsawAttack
// 0x0550 (0x0AA0 - 0x0550)
class UHillbillyChainsawAttack final : public UBaseChainsawAttack
{
public:
	struct FStatProperty                          _initialChainsawTurnRate;                          // 0x0548(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FStatProperty                          _chainsawTurnRate;                                 // 0x05D0(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FStatProperty                          _turnRateAdjustmentTime;                           // 0x0658(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FStatProperty                          _overheatMaxSpeedOverride;                         // 0x06E0(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FStatProperty                          _overheatMaxSpeedAdjustmentTime;                   // 0x0768(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FStatProperty                          _attackZoneScaleFactor;                            // 0x07F0(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FStatProperty                          _obstructionZoneScaleFactor;                       // 0x0878(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_900[0x1A0];                                    // 0x0900(0x01A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnAttackFinished(class ADBDPlayer* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HillbillyChainsawAttack">();
	}
	static class UHillbillyChainsawAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHillbillyChainsawAttack>();
	}
};
static_assert(alignof(UHillbillyChainsawAttack) == 0x000010, "Wrong alignment on UHillbillyChainsawAttack");
static_assert(sizeof(UHillbillyChainsawAttack) == 0x000AA0, "Wrong size on UHillbillyChainsawAttack");
static_assert(offsetof(UHillbillyChainsawAttack, _initialChainsawTurnRate) == 0x000548, "Member 'UHillbillyChainsawAttack::_initialChainsawTurnRate' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawAttack, _chainsawTurnRate) == 0x0005D0, "Member 'UHillbillyChainsawAttack::_chainsawTurnRate' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawAttack, _turnRateAdjustmentTime) == 0x000658, "Member 'UHillbillyChainsawAttack::_turnRateAdjustmentTime' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawAttack, _overheatMaxSpeedOverride) == 0x0006E0, "Member 'UHillbillyChainsawAttack::_overheatMaxSpeedOverride' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawAttack, _overheatMaxSpeedAdjustmentTime) == 0x000768, "Member 'UHillbillyChainsawAttack::_overheatMaxSpeedAdjustmentTime' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawAttack, _attackZoneScaleFactor) == 0x0007F0, "Member 'UHillbillyChainsawAttack::_attackZoneScaleFactor' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawAttack, _obstructionZoneScaleFactor) == 0x000878, "Member 'UHillbillyChainsawAttack::_obstructionZoneScaleFactor' has a wrong offset!");

// Class TheHillbilly.HillbillyChainsawAttackOpenSubstate
// 0x0058 (0x01C0 - 0x0168)
class UHillbillyChainsawAttackOpenSubstate final : public UBaseChainsawAttackOpenSubstate
{
public:
	struct FDBDTunableRowHandle                   _longDashDuration;                                 // 0x0168(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_190[0x30];                                     // 0x0190(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HillbillyChainsawAttackOpenSubstate">();
	}
	static class UHillbillyChainsawAttackOpenSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHillbillyChainsawAttackOpenSubstate>();
	}
};
static_assert(alignof(UHillbillyChainsawAttackOpenSubstate) == 0x000008, "Wrong alignment on UHillbillyChainsawAttackOpenSubstate");
static_assert(sizeof(UHillbillyChainsawAttackOpenSubstate) == 0x0001C0, "Wrong size on UHillbillyChainsawAttackOpenSubstate");
static_assert(offsetof(UHillbillyChainsawAttackOpenSubstate, _longDashDuration) == 0x000168, "Member 'UHillbillyChainsawAttackOpenSubstate::_longDashDuration' has a wrong offset!");

// Class TheHillbilly.HillbillyChainsawAttackHittingSubstate
// 0x0000 (0x01A0 - 0x01A0)
class UHillbillyChainsawAttackHittingSubstate final : public UPounceAttackHittingSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HillbillyChainsawAttackHittingSubstate">();
	}
	static class UHillbillyChainsawAttackHittingSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHillbillyChainsawAttackHittingSubstate>();
	}
};
static_assert(alignof(UHillbillyChainsawAttackHittingSubstate) == 0x000008, "Wrong alignment on UHillbillyChainsawAttackHittingSubstate");
static_assert(sizeof(UHillbillyChainsawAttackHittingSubstate) == 0x0001A0, "Wrong size on UHillbillyChainsawAttackHittingSubstate");

// Class TheHillbilly.HillbillyChainsawAttackObstructSubstate
// 0x0000 (0x0128 - 0x0128)
class UHillbillyChainsawAttackObstructSubstate final : public UBaseChainsawAttackObstructSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HillbillyChainsawAttackObstructSubstate">();
	}
	static class UHillbillyChainsawAttackObstructSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHillbillyChainsawAttackObstructSubstate>();
	}
};
static_assert(alignof(UHillbillyChainsawAttackObstructSubstate) == 0x000008, "Wrong alignment on UHillbillyChainsawAttackObstructSubstate");
static_assert(sizeof(UHillbillyChainsawAttackObstructSubstate) == 0x000128, "Wrong size on UHillbillyChainsawAttackObstructSubstate");

// Class TheHillbilly.HillbillyChainsawOverheatComponent
// 0x06A8 (0x0760 - 0x00B8)
class UHillbillyChainsawOverheatComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(const float currentChargePercent, const bool IsChainsawOverheating)> OnHeatChargeUpdateDelegate; // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C8[0x1B8];                                     // 0x00C8(0x01B8)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimerObject*                           _overheatTimer;                                    // 0x0280(0x0008)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTagStateBool                          _isChainsawOverheating;                            // 0x0288(0x0048)(Net, Transient, RepNotify, NativeAccessSpecifierPrivate)
	class UPowerChargeComponent*                  _chainsawHeatCharge;                               // 0x02D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _overheatStatusEffectClass;                        // 0x02D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _heatDuration;                                     // 0x02E0(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _heatMaxCharge;                                    // 0x0360(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _heatRevStartAmount;                               // 0x03E0(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _heatRevInputPressActivationBuffer;                // 0x0460(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _heatSurvivorHitAmount;                            // 0x04E0(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _heatRevChargeRate;                                // 0x0560(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _heatDashChargeRate;                               // 0x05E0(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _heatDischargeRate;                                // 0x0660(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _heatDecayDelay;                                   // 0x06E0(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	void OnLevelReadyToPlay();

	void Authority_OnHeatChargeFull() const;
	bool IsChainsawOverheating() const;
	void OnRep_IsChainsawOverheating() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HillbillyChainsawOverheatComponent">();
	}
	static class UHillbillyChainsawOverheatComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHillbillyChainsawOverheatComponent>();
	}
};
static_assert(alignof(UHillbillyChainsawOverheatComponent) == 0x000008, "Wrong alignment on UHillbillyChainsawOverheatComponent");
static_assert(sizeof(UHillbillyChainsawOverheatComponent) == 0x000760, "Wrong size on UHillbillyChainsawOverheatComponent");
static_assert(offsetof(UHillbillyChainsawOverheatComponent, OnHeatChargeUpdateDelegate) == 0x0000B8, "Member 'UHillbillyChainsawOverheatComponent::OnHeatChargeUpdateDelegate' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawOverheatComponent, _overheatTimer) == 0x000280, "Member 'UHillbillyChainsawOverheatComponent::_overheatTimer' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawOverheatComponent, _isChainsawOverheating) == 0x000288, "Member 'UHillbillyChainsawOverheatComponent::_isChainsawOverheating' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawOverheatComponent, _chainsawHeatCharge) == 0x0002D0, "Member 'UHillbillyChainsawOverheatComponent::_chainsawHeatCharge' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawOverheatComponent, _overheatStatusEffectClass) == 0x0002D8, "Member 'UHillbillyChainsawOverheatComponent::_overheatStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawOverheatComponent, _heatDuration) == 0x0002E0, "Member 'UHillbillyChainsawOverheatComponent::_heatDuration' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawOverheatComponent, _heatMaxCharge) == 0x000360, "Member 'UHillbillyChainsawOverheatComponent::_heatMaxCharge' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawOverheatComponent, _heatRevStartAmount) == 0x0003E0, "Member 'UHillbillyChainsawOverheatComponent::_heatRevStartAmount' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawOverheatComponent, _heatRevInputPressActivationBuffer) == 0x000460, "Member 'UHillbillyChainsawOverheatComponent::_heatRevInputPressActivationBuffer' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawOverheatComponent, _heatSurvivorHitAmount) == 0x0004E0, "Member 'UHillbillyChainsawOverheatComponent::_heatSurvivorHitAmount' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawOverheatComponent, _heatRevChargeRate) == 0x000560, "Member 'UHillbillyChainsawOverheatComponent::_heatRevChargeRate' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawOverheatComponent, _heatDashChargeRate) == 0x0005E0, "Member 'UHillbillyChainsawOverheatComponent::_heatDashChargeRate' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawOverheatComponent, _heatDischargeRate) == 0x000660, "Member 'UHillbillyChainsawOverheatComponent::_heatDischargeRate' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawOverheatComponent, _heatDecayDelay) == 0x0006E0, "Member 'UHillbillyChainsawOverheatComponent::_heatDecayDelay' has a wrong offset!");

// Class TheHillbilly.HillbillyChainsawRevInteraction
// 0x0000 (0x0940 - 0x0940)
class UHillbillyChainsawRevInteraction final : public UChainsawRevInteraction
{
public:
	void OnChargeablePercentChange(class UChargeableComponent* ChargeableComponent, float TotalPercentComplete);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HillbillyChainsawRevInteraction">();
	}
	static class UHillbillyChainsawRevInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHillbillyChainsawRevInteraction>();
	}
};
static_assert(alignof(UHillbillyChainsawRevInteraction) == 0x000010, "Wrong alignment on UHillbillyChainsawRevInteraction");
static_assert(sizeof(UHillbillyChainsawRevInteraction) == 0x000940, "Wrong size on UHillbillyChainsawRevInteraction");

// Class TheHillbilly.HillbillyChainsawSubAnimInstance
// 0x0020 (0x06D0 - 0x06B0)
class UHillbillyChainsawSubAnimInstance final : public UBaseKillerAttackSubAnimInstance
{
public:
	bool                                          _isRevvingChainsaw;                                // 0x06B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isRevvingChainsawCancelled;                       // 0x06B1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChainsawSprinting;                              // 0x06B2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isWaitingForChainsaw;                             // 0x06B3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B4[0x1C];                                     // 0x06B4(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HillbillyChainsawSubAnimInstance">();
	}
	static class UHillbillyChainsawSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHillbillyChainsawSubAnimInstance>();
	}
};
static_assert(alignof(UHillbillyChainsawSubAnimInstance) == 0x000010, "Wrong alignment on UHillbillyChainsawSubAnimInstance");
static_assert(sizeof(UHillbillyChainsawSubAnimInstance) == 0x0006D0, "Wrong size on UHillbillyChainsawSubAnimInstance");
static_assert(offsetof(UHillbillyChainsawSubAnimInstance, _isRevvingChainsaw) == 0x0006B0, "Member 'UHillbillyChainsawSubAnimInstance::_isRevvingChainsaw' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawSubAnimInstance, _isRevvingChainsawCancelled) == 0x0006B1, "Member 'UHillbillyChainsawSubAnimInstance::_isRevvingChainsawCancelled' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawSubAnimInstance, _isChainsawSprinting) == 0x0006B2, "Member 'UHillbillyChainsawSubAnimInstance::_isChainsawSprinting' has a wrong offset!");
static_assert(offsetof(UHillbillyChainsawSubAnimInstance, _isWaitingForChainsaw) == 0x0006B3, "Member 'UHillbillyChainsawSubAnimInstance::_isWaitingForChainsaw' has a wrong offset!");

// Class TheHillbilly.HillbillyOverheatPresentationItemProgressComponent
// 0x0008 (0x00C8 - 0x00C0)
class UHillbillyOverheatPresentationItemProgressComponent final : public UPresentationItemProgressComponent
{
public:
	class UHillbillyChainsawOverheatComponent*    _hillbillyChainsawOverheatComponent;               // 0x00C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetHillbillyChainsawOverheatComponent(class UHillbillyChainsawOverheatComponent* HillbillyChainsawOverheatComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HillbillyOverheatPresentationItemProgressComponent">();
	}
	static class UHillbillyOverheatPresentationItemProgressComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHillbillyOverheatPresentationItemProgressComponent>();
	}
};
static_assert(alignof(UHillbillyOverheatPresentationItemProgressComponent) == 0x000008, "Wrong alignment on UHillbillyOverheatPresentationItemProgressComponent");
static_assert(sizeof(UHillbillyOverheatPresentationItemProgressComponent) == 0x0000C8, "Wrong size on UHillbillyOverheatPresentationItemProgressComponent");
static_assert(offsetof(UHillbillyOverheatPresentationItemProgressComponent, _hillbillyChainsawOverheatComponent) == 0x0000C0, "Member 'UHillbillyOverheatPresentationItemProgressComponent::_hillbillyChainsawOverheatComponent' has a wrong offset!");

// Class TheHillbilly.LightbornAuraRevealEffect
// 0x0000 (0x0408 - 0x0408)
class ULightbornAuraRevealEffect final : public UBaseLingeringStatusEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LightbornAuraRevealEffect">();
	}
	static class ULightbornAuraRevealEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightbornAuraRevealEffect>();
	}
};
static_assert(alignof(ULightbornAuraRevealEffect) == 0x000008, "Wrong alignment on ULightbornAuraRevealEffect");
static_assert(sizeof(ULightbornAuraRevealEffect) == 0x000408, "Wrong size on ULightbornAuraRevealEffect");

// Class TheHillbilly.LightbornBlindFailedIndicatorCondition
// 0x0060 (0x0150 - 0x00F0)
class ULightbornBlindFailedIndicatorCondition final : public UEventDrivenModifierCondition
{
public:
	float                                         _conditionReevaluationTimerDurationAfterFailedBlind; // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F4[0x5C];                                      // 0x00F4(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LightbornBlindFailedIndicatorCondition">();
	}
	static class ULightbornBlindFailedIndicatorCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightbornBlindFailedIndicatorCondition>();
	}
};
static_assert(alignof(ULightbornBlindFailedIndicatorCondition) == 0x000008, "Wrong alignment on ULightbornBlindFailedIndicatorCondition");
static_assert(sizeof(ULightbornBlindFailedIndicatorCondition) == 0x000150, "Wrong size on ULightbornBlindFailedIndicatorCondition");
static_assert(offsetof(ULightbornBlindFailedIndicatorCondition, _conditionReevaluationTimerDurationAfterFailedBlind) == 0x0000F0, "Member 'ULightbornBlindFailedIndicatorCondition::_conditionReevaluationTimerDurationAfterFailedBlind' has a wrong offset!");

}

