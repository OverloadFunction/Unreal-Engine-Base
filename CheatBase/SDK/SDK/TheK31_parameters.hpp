#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK31

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "Engine_structs.hpp"
#include "TheK31_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK::Params
{

// Function TheK31.K31PowerCosmeticHelper.Cosmetic_DoesRadarDetectAnySurvivorsUpdatedEvent
// 0x0001 (0x0001 - 0x0000)
struct K31PowerCosmeticHelper_Cosmetic_DoesRadarDetectAnySurvivorsUpdatedEvent final
{
public:
	bool                                          doesRadarDetectAnySurvivors;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31PowerCosmeticHelper_Cosmetic_DoesRadarDetectAnySurvivorsUpdatedEvent) == 0x000001, "Wrong alignment on K31PowerCosmeticHelper_Cosmetic_DoesRadarDetectAnySurvivorsUpdatedEvent");
static_assert(sizeof(K31PowerCosmeticHelper_Cosmetic_DoesRadarDetectAnySurvivorsUpdatedEvent) == 0x000001, "Wrong size on K31PowerCosmeticHelper_Cosmetic_DoesRadarDetectAnySurvivorsUpdatedEvent");
static_assert(offsetof(K31PowerCosmeticHelper_Cosmetic_DoesRadarDetectAnySurvivorsUpdatedEvent, doesRadarDetectAnySurvivors) == 0x000000, "Member 'K31PowerCosmeticHelper_Cosmetic_DoesRadarDetectAnySurvivorsUpdatedEvent::doesRadarDetectAnySurvivors' has a wrong offset!");

// Function TheK31.K31PowerCosmeticHelper.Cosmetic_IsOnPowerCooldownUpdatedEvent
// 0x0001 (0x0001 - 0x0000)
struct K31PowerCosmeticHelper_Cosmetic_IsOnPowerCooldownUpdatedEvent final
{
public:
	bool                                          isPowerOnCooldown;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31PowerCosmeticHelper_Cosmetic_IsOnPowerCooldownUpdatedEvent) == 0x000001, "Wrong alignment on K31PowerCosmeticHelper_Cosmetic_IsOnPowerCooldownUpdatedEvent");
static_assert(sizeof(K31PowerCosmeticHelper_Cosmetic_IsOnPowerCooldownUpdatedEvent) == 0x000001, "Wrong size on K31PowerCosmeticHelper_Cosmetic_IsOnPowerCooldownUpdatedEvent");
static_assert(offsetof(K31PowerCosmeticHelper_Cosmetic_IsOnPowerCooldownUpdatedEvent, isPowerOnCooldown) == 0x000000, "Member 'K31PowerCosmeticHelper_Cosmetic_IsOnPowerCooldownUpdatedEvent::isPowerOnCooldown' has a wrong offset!");

// Function TheK31.Addon_K31Power_20.Authority_OnGameEventReceived
// 0x0040 (0x0040 - 0x0000)
struct Addon_K31Power_20_Authority_OnGameEventReceived final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Addon_K31Power_20_Authority_OnGameEventReceived) == 0x000008, "Wrong alignment on Addon_K31Power_20_Authority_OnGameEventReceived");
static_assert(sizeof(Addon_K31Power_20_Authority_OnGameEventReceived) == 0x000040, "Wrong size on Addon_K31Power_20_Authority_OnGameEventReceived");
static_assert(offsetof(Addon_K31Power_20_Authority_OnGameEventReceived, GameplayTag) == 0x000000, "Member 'Addon_K31Power_20_Authority_OnGameEventReceived::GameplayTag' has a wrong offset!");
static_assert(offsetof(Addon_K31Power_20_Authority_OnGameEventReceived, GameEventData) == 0x000010, "Member 'Addon_K31Power_20_Authority_OnGameEventReceived::GameEventData' has a wrong offset!");

// Function TheK31.DroneRestrictedPlacementAreaStrategy.OnDroneAcquiredChanged
// 0x0001 (0x0001 - 0x0000)
struct DroneRestrictedPlacementAreaStrategy_OnDroneAcquiredChanged final
{
public:
	bool                                          acquired;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DroneRestrictedPlacementAreaStrategy_OnDroneAcquiredChanged) == 0x000001, "Wrong alignment on DroneRestrictedPlacementAreaStrategy_OnDroneAcquiredChanged");
static_assert(sizeof(DroneRestrictedPlacementAreaStrategy_OnDroneAcquiredChanged) == 0x000001, "Wrong size on DroneRestrictedPlacementAreaStrategy_OnDroneAcquiredChanged");
static_assert(offsetof(DroneRestrictedPlacementAreaStrategy_OnDroneAcquiredChanged, acquired) == 0x000000, "Member 'DroneRestrictedPlacementAreaStrategy_OnDroneAcquiredChanged::acquired' has a wrong offset!");

// Function TheK31.DroneRestrictedPlacementAreaStrategy.OnDroneEndPlay
// 0x0010 (0x0010 - 0x0000)
struct DroneRestrictedPlacementAreaStrategy_OnDroneEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DroneRestrictedPlacementAreaStrategy_OnDroneEndPlay) == 0x000008, "Wrong alignment on DroneRestrictedPlacementAreaStrategy_OnDroneEndPlay");
static_assert(sizeof(DroneRestrictedPlacementAreaStrategy_OnDroneEndPlay) == 0x000010, "Wrong size on DroneRestrictedPlacementAreaStrategy_OnDroneEndPlay");
static_assert(offsetof(DroneRestrictedPlacementAreaStrategy_OnDroneEndPlay, Actor) == 0x000000, "Member 'DroneRestrictedPlacementAreaStrategy_OnDroneEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(DroneRestrictedPlacementAreaStrategy_OnDroneEndPlay, EndPlayReason) == 0x000008, "Member 'DroneRestrictedPlacementAreaStrategy_OnDroneEndPlay::EndPlayReason' has a wrong offset!");

// Function TheK31.InspectK31DroneInteraction.OnChargeCompletedChanged
// 0x0018 (0x0018 - 0x0000)
struct InspectK31DroneInteraction_OnChargeCompletedChanged final
{
public:
	bool                                          COMPLETED;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         instigatorsForCompletion;                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectK31DroneInteraction_OnChargeCompletedChanged) == 0x000008, "Wrong alignment on InspectK31DroneInteraction_OnChargeCompletedChanged");
static_assert(sizeof(InspectK31DroneInteraction_OnChargeCompletedChanged) == 0x000018, "Wrong size on InspectK31DroneInteraction_OnChargeCompletedChanged");
static_assert(offsetof(InspectK31DroneInteraction_OnChargeCompletedChanged, COMPLETED) == 0x000000, "Member 'InspectK31DroneInteraction_OnChargeCompletedChanged::COMPLETED' has a wrong offset!");
static_assert(offsetof(InspectK31DroneInteraction_OnChargeCompletedChanged, instigatorsForCompletion) == 0x000008, "Member 'InspectK31DroneInteraction_OnChargeCompletedChanged::instigatorsForCompletion' has a wrong offset!");

// Function TheK31.InspectK31DroneInteraction.Server_SetIsPressingInput
// 0x0001 (0x0001 - 0x0000)
struct InspectK31DroneInteraction_Server_SetIsPressingInput final
{
public:
	bool                                          isPressing;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectK31DroneInteraction_Server_SetIsPressingInput) == 0x000001, "Wrong alignment on InspectK31DroneInteraction_Server_SetIsPressingInput");
static_assert(sizeof(InspectK31DroneInteraction_Server_SetIsPressingInput) == 0x000001, "Wrong size on InspectK31DroneInteraction_Server_SetIsPressingInput");
static_assert(offsetof(InspectK31DroneInteraction_Server_SetIsPressingInput, isPressing) == 0x000000, "Member 'InspectK31DroneInteraction_Server_SetIsPressingInput::isPressing' has a wrong offset!");

// Function TheK31.K31AnimInstance.OnCustomizationAnimationMappingIDChanged
// 0x0004 (0x0004 - 0x0000)
struct K31AnimInstance_OnCustomizationAnimationMappingIDChanged final
{
public:
	int32                                         animationMappingIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31AnimInstance_OnCustomizationAnimationMappingIDChanged) == 0x000004, "Wrong alignment on K31AnimInstance_OnCustomizationAnimationMappingIDChanged");
static_assert(sizeof(K31AnimInstance_OnCustomizationAnimationMappingIDChanged) == 0x000004, "Wrong size on K31AnimInstance_OnCustomizationAnimationMappingIDChanged");
static_assert(offsetof(K31AnimInstance_OnCustomizationAnimationMappingIDChanged, animationMappingIndex) == 0x000000, "Member 'K31AnimInstance_OnCustomizationAnimationMappingIDChanged::animationMappingIndex' has a wrong offset!");

// Function TheK31.K31AnimInstance.OnGameEventReceived
// 0x0040 (0x0040 - 0x0000)
struct K31AnimInstance_OnGameEventReceived final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31AnimInstance_OnGameEventReceived) == 0x000008, "Wrong alignment on K31AnimInstance_OnGameEventReceived");
static_assert(sizeof(K31AnimInstance_OnGameEventReceived) == 0x000040, "Wrong size on K31AnimInstance_OnGameEventReceived");
static_assert(offsetof(K31AnimInstance_OnGameEventReceived, GameplayTag) == 0x000000, "Member 'K31AnimInstance_OnGameEventReceived::GameplayTag' has a wrong offset!");
static_assert(offsetof(K31AnimInstance_OnGameEventReceived, GameEventData) == 0x000010, "Member 'K31AnimInstance_OnGameEventReceived::GameEventData' has a wrong offset!");

// Function TheK31.K31AnimInstance.GetCustoAnimTags
// 0x0010 (0x0010 - 0x0000)
struct K31AnimInstance_GetCustoAnimTags final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31AnimInstance_GetCustoAnimTags) == 0x000008, "Wrong alignment on K31AnimInstance_GetCustoAnimTags");
static_assert(sizeof(K31AnimInstance_GetCustoAnimTags) == 0x000010, "Wrong size on K31AnimInstance_GetCustoAnimTags");
static_assert(offsetof(K31AnimInstance_GetCustoAnimTags, ReturnValue) == 0x000000, "Member 'K31AnimInstance_GetCustoAnimTags::ReturnValue' has a wrong offset!");

// Function TheK31.K31AnimInstance.GetCustomizationMappingID
// 0x0004 (0x0004 - 0x0000)
struct K31AnimInstance_GetCustomizationMappingID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31AnimInstance_GetCustomizationMappingID) == 0x000004, "Wrong alignment on K31AnimInstance_GetCustomizationMappingID");
static_assert(sizeof(K31AnimInstance_GetCustomizationMappingID) == 0x000004, "Wrong size on K31AnimInstance_GetCustomizationMappingID");
static_assert(offsetof(K31AnimInstance_GetCustomizationMappingID, ReturnValue) == 0x000000, "Member 'K31AnimInstance_GetCustomizationMappingID::ReturnValue' has a wrong offset!");

// Function TheK31.K31ClawTrap.Cosmetic_OnAddedByDrone
// 0x0010 (0x0010 - 0x0000)
struct K31ClawTrap_Cosmetic_OnAddedByDrone final
{
public:
	class AK31Drone*                              originatingDrone;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         clawTrapCosmeticDelayDuration;                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K31ClawTrap_Cosmetic_OnAddedByDrone) == 0x000008, "Wrong alignment on K31ClawTrap_Cosmetic_OnAddedByDrone");
static_assert(sizeof(K31ClawTrap_Cosmetic_OnAddedByDrone) == 0x000010, "Wrong size on K31ClawTrap_Cosmetic_OnAddedByDrone");
static_assert(offsetof(K31ClawTrap_Cosmetic_OnAddedByDrone, originatingDrone) == 0x000000, "Member 'K31ClawTrap_Cosmetic_OnAddedByDrone::originatingDrone' has a wrong offset!");
static_assert(offsetof(K31ClawTrap_Cosmetic_OnAddedByDrone, clawTrapCosmeticDelayDuration) == 0x000008, "Member 'K31ClawTrap_Cosmetic_OnAddedByDrone::clawTrapCosmeticDelayDuration' has a wrong offset!");

// Function TheK31.K31ClawTrap.Cosmetic_OnBatteryChargeUpdated
// 0x0004 (0x0004 - 0x0000)
struct K31ClawTrap_Cosmetic_OnBatteryChargeUpdated final
{
public:
	float                                         newCharge;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31ClawTrap_Cosmetic_OnBatteryChargeUpdated) == 0x000004, "Wrong alignment on K31ClawTrap_Cosmetic_OnBatteryChargeUpdated");
static_assert(sizeof(K31ClawTrap_Cosmetic_OnBatteryChargeUpdated) == 0x000004, "Wrong size on K31ClawTrap_Cosmetic_OnBatteryChargeUpdated");
static_assert(offsetof(K31ClawTrap_Cosmetic_OnBatteryChargeUpdated, newCharge) == 0x000000, "Member 'K31ClawTrap_Cosmetic_OnBatteryChargeUpdated::newCharge' has a wrong offset!");

// Function TheK31.K31ClawTrap.Cosmetic_OnIsBroadcastingChanged
// 0x0001 (0x0001 - 0x0000)
struct K31ClawTrap_Cosmetic_OnIsBroadcastingChanged final
{
public:
	bool                                          isBroadcasting;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31ClawTrap_Cosmetic_OnIsBroadcastingChanged) == 0x000001, "Wrong alignment on K31ClawTrap_Cosmetic_OnIsBroadcastingChanged");
static_assert(sizeof(K31ClawTrap_Cosmetic_OnIsBroadcastingChanged) == 0x000001, "Wrong size on K31ClawTrap_Cosmetic_OnIsBroadcastingChanged");
static_assert(offsetof(K31ClawTrap_Cosmetic_OnIsBroadcastingChanged, isBroadcasting) == 0x000000, "Member 'K31ClawTrap_Cosmetic_OnIsBroadcastingChanged::isBroadcasting' has a wrong offset!");

// Function TheK31.K31ClawTrap.Cosmetic_OnTrapRemoved
// 0x0001 (0x0001 - 0x0000)
struct K31ClawTrap_Cosmetic_OnTrapRemoved final
{
public:
	bool                                          wasRemovedAutomatically;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31ClawTrap_Cosmetic_OnTrapRemoved) == 0x000001, "Wrong alignment on K31ClawTrap_Cosmetic_OnTrapRemoved");
static_assert(sizeof(K31ClawTrap_Cosmetic_OnTrapRemoved) == 0x000001, "Wrong size on K31ClawTrap_Cosmetic_OnTrapRemoved");
static_assert(offsetof(K31ClawTrap_Cosmetic_OnTrapRemoved, wasRemovedAutomatically) == 0x000000, "Member 'K31ClawTrap_Cosmetic_OnTrapRemoved::wasRemovedAutomatically' has a wrong offset!");

// Function TheK31.K31Drone.Cosmetic_OnIsHackableStateChanged
// 0x0001 (0x0001 - 0x0000)
struct K31Drone_Cosmetic_OnIsHackableStateChanged final
{
public:
	bool                                          IsHackable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31Drone_Cosmetic_OnIsHackableStateChanged) == 0x000001, "Wrong alignment on K31Drone_Cosmetic_OnIsHackableStateChanged");
static_assert(sizeof(K31Drone_Cosmetic_OnIsHackableStateChanged) == 0x000001, "Wrong size on K31Drone_Cosmetic_OnIsHackableStateChanged");
static_assert(offsetof(K31Drone_Cosmetic_OnIsHackableStateChanged, IsHackable) == 0x000000, "Member 'K31Drone_Cosmetic_OnIsHackableStateChanged::IsHackable' has a wrong offset!");

// Function TheK31.K31Drone.Cosmetic_OnRevertToScoutingCurrentChargeChanged
// 0x0004 (0x0004 - 0x0000)
struct K31Drone_Cosmetic_OnRevertToScoutingCurrentChargeChanged final
{
public:
	float                                         chargePercentage;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31Drone_Cosmetic_OnRevertToScoutingCurrentChargeChanged) == 0x000004, "Wrong alignment on K31Drone_Cosmetic_OnRevertToScoutingCurrentChargeChanged");
static_assert(sizeof(K31Drone_Cosmetic_OnRevertToScoutingCurrentChargeChanged) == 0x000004, "Wrong size on K31Drone_Cosmetic_OnRevertToScoutingCurrentChargeChanged");
static_assert(offsetof(K31Drone_Cosmetic_OnRevertToScoutingCurrentChargeChanged, chargePercentage) == 0x000000, "Member 'K31Drone_Cosmetic_OnRevertToScoutingCurrentChargeChanged::chargePercentage' has a wrong offset!");

// Function TheK31.K31Drone.OnAcquiredChanged
// 0x0001 (0x0001 - 0x0000)
struct K31Drone_OnAcquiredChanged final
{
public:
	bool                                          acquired;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31Drone_OnAcquiredChanged) == 0x000001, "Wrong alignment on K31Drone_OnAcquiredChanged");
static_assert(sizeof(K31Drone_OnAcquiredChanged) == 0x000001, "Wrong size on K31Drone_OnAcquiredChanged");
static_assert(offsetof(K31Drone_OnAcquiredChanged, acquired) == 0x000000, "Member 'K31Drone_OnAcquiredChanged::acquired' has a wrong offset!");

// Function TheK31.K31DroneActionProcessor.Client_ReceiveActionResponse
// 0x0020 (0x0020 - 0x0000)
struct K31DroneActionProcessor_Client_ReceiveActionResponse final
{
public:
	struct FK31DroneActionResponse                Response;                                          // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneActionProcessor_Client_ReceiveActionResponse) == 0x000008, "Wrong alignment on K31DroneActionProcessor_Client_ReceiveActionResponse");
static_assert(sizeof(K31DroneActionProcessor_Client_ReceiveActionResponse) == 0x000020, "Wrong size on K31DroneActionProcessor_Client_ReceiveActionResponse");
static_assert(offsetof(K31DroneActionProcessor_Client_ReceiveActionResponse, Response) == 0x000000, "Member 'K31DroneActionProcessor_Client_ReceiveActionResponse::Response' has a wrong offset!");

// Function TheK31.K31DroneActionProcessor.Server_RequestAction
// 0x0018 (0x0018 - 0x0000)
struct K31DroneActionProcessor_Server_RequestAction final
{
public:
	struct FK31DroneActionRequest                 Request;                                           // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneActionProcessor_Server_RequestAction) == 0x000008, "Wrong alignment on K31DroneActionProcessor_Server_RequestAction");
static_assert(sizeof(K31DroneActionProcessor_Server_RequestAction) == 0x000018, "Wrong size on K31DroneActionProcessor_Server_RequestAction");
static_assert(offsetof(K31DroneActionProcessor_Server_RequestAction, Request) == 0x000000, "Member 'K31DroneActionProcessor_Server_RequestAction::Request' has a wrong offset!");

// Function TheK31.K31DroneActiveState.GetRevertToScoutingCurrentCharge
// 0x0004 (0x0004 - 0x0000)
struct K31DroneActiveState_GetRevertToScoutingCurrentCharge final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneActiveState_GetRevertToScoutingCurrentCharge) == 0x000004, "Wrong alignment on K31DroneActiveState_GetRevertToScoutingCurrentCharge");
static_assert(sizeof(K31DroneActiveState_GetRevertToScoutingCurrentCharge) == 0x000004, "Wrong size on K31DroneActiveState_GetRevertToScoutingCurrentCharge");
static_assert(offsetof(K31DroneActiveState_GetRevertToScoutingCurrentCharge, ReturnValue) == 0x000000, "Member 'K31DroneActiveState_GetRevertToScoutingCurrentCharge::ReturnValue' has a wrong offset!");

// Function TheK31.K31DroneActiveState.GetRevertToScoutingMaxCharge
// 0x0004 (0x0004 - 0x0000)
struct K31DroneActiveState_GetRevertToScoutingMaxCharge final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneActiveState_GetRevertToScoutingMaxCharge) == 0x000004, "Wrong alignment on K31DroneActiveState_GetRevertToScoutingMaxCharge");
static_assert(sizeof(K31DroneActiveState_GetRevertToScoutingMaxCharge) == 0x000004, "Wrong size on K31DroneActiveState_GetRevertToScoutingMaxCharge");
static_assert(offsetof(K31DroneActiveState_GetRevertToScoutingMaxCharge, ReturnValue) == 0x000000, "Member 'K31DroneActiveState_GetRevertToScoutingMaxCharge::ReturnValue' has a wrong offset!");

// Function TheK31.K31DroneHackableAvoidanceSensor.Authority_OnKillerCollisionBegin
// 0x0110 (0x0110 - 0x0000)
struct K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin) == 0x000008, "Wrong alignment on K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin");
static_assert(sizeof(K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin) == 0x000110, "Wrong size on K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin, OverlappedComponent) == 0x000000, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin, OtherActor) == 0x000008, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin, OtherComp) == 0x000010, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin, OtherBodyIndex) == 0x000018, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin, bFromSweep) == 0x00001C, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin, SweepResult) == 0x000020, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionBegin::SweepResult' has a wrong offset!");

// Function TheK31.K31DroneHackableAvoidanceSensor.Authority_OnKillerCollisionEnd
// 0x0020 (0x0020 - 0x0000)
struct K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionEnd) == 0x000008, "Wrong alignment on K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionEnd");
static_assert(sizeof(K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionEnd) == 0x000020, "Wrong size on K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionEnd");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionEnd, OverlappedComponent) == 0x000000, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionEnd, OtherActor) == 0x000008, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionEnd, OtherComp) == 0x000010, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionEnd, OtherBodyIndex) == 0x000018, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnKillerCollisionEnd::OtherBodyIndex' has a wrong offset!");

// Function TheK31.K31DroneHackableAvoidanceSensor.Authority_OnSurvivorCollisionBegin
// 0x0110 (0x0110 - 0x0000)
struct K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin) == 0x000008, "Wrong alignment on K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin");
static_assert(sizeof(K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin) == 0x000110, "Wrong size on K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin, OverlappedComponent) == 0x000000, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin, OtherActor) == 0x000008, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin, OtherComp) == 0x000010, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin, OtherBodyIndex) == 0x000018, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin, bFromSweep) == 0x00001C, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin, SweepResult) == 0x000020, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionBegin::SweepResult' has a wrong offset!");

// Function TheK31.K31DroneHackableAvoidanceSensor.Authority_OnSurvivorCollisionEnd
// 0x0020 (0x0020 - 0x0000)
struct K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionEnd) == 0x000008, "Wrong alignment on K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionEnd");
static_assert(sizeof(K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionEnd) == 0x000020, "Wrong size on K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionEnd");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionEnd, OverlappedComponent) == 0x000000, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionEnd, OtherActor) == 0x000008, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionEnd, OtherComp) == 0x000010, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionEnd, OtherBodyIndex) == 0x000018, "Member 'K31DroneHackableAvoidanceSensor_Authority_OnSurvivorCollisionEnd::OtherBodyIndex' has a wrong offset!");

// Function TheK31.K31DroneHackableAvoidanceSensor.Init
// 0x0010 (0x0010 - 0x0000)
struct K31DroneHackableAvoidanceSensor_Init final
{
public:
	class UPrimitiveComponent*                    killerPrimitive;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    survivorPrimitive;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneHackableAvoidanceSensor_Init) == 0x000008, "Wrong alignment on K31DroneHackableAvoidanceSensor_Init");
static_assert(sizeof(K31DroneHackableAvoidanceSensor_Init) == 0x000010, "Wrong size on K31DroneHackableAvoidanceSensor_Init");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Init, killerPrimitive) == 0x000000, "Member 'K31DroneHackableAvoidanceSensor_Init::killerPrimitive' has a wrong offset!");
static_assert(offsetof(K31DroneHackableAvoidanceSensor_Init, survivorPrimitive) == 0x000008, "Member 'K31DroneHackableAvoidanceSensor_Init::survivorPrimitive' has a wrong offset!");

// Function TheK31.K31DroneHackableComponent.IsHackable
// 0x0001 (0x0001 - 0x0000)
struct K31DroneHackableComponent_IsHackable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneHackableComponent_IsHackable) == 0x000001, "Wrong alignment on K31DroneHackableComponent_IsHackable");
static_assert(sizeof(K31DroneHackableComponent_IsHackable) == 0x000001, "Wrong size on K31DroneHackableComponent_IsHackable");
static_assert(offsetof(K31DroneHackableComponent_IsHackable, ReturnValue) == 0x000000, "Member 'K31DroneHackableComponent_IsHackable::ReturnValue' has a wrong offset!");

// Function TheK31.K31DroneLaserController.Local_OnCrouchChanged
// 0x0001 (0x0001 - 0x0000)
struct K31DroneLaserController_Local_OnCrouchChanged final
{
public:
	bool                                          isCrouched;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneLaserController_Local_OnCrouchChanged) == 0x000001, "Wrong alignment on K31DroneLaserController_Local_OnCrouchChanged");
static_assert(sizeof(K31DroneLaserController_Local_OnCrouchChanged) == 0x000001, "Wrong size on K31DroneLaserController_Local_OnCrouchChanged");
static_assert(offsetof(K31DroneLaserController_Local_OnCrouchChanged, isCrouched) == 0x000000, "Member 'K31DroneLaserController_Local_OnCrouchChanged::isCrouched' has a wrong offset!");

// Function TheK31.K31DroneLaserController.Local_OnIdleChanged
// 0x0008 (0x0008 - 0x0000)
struct K31DroneLaserController_Local_OnIdleChanged final
{
public:
	bool                                          isIdle;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         idleStartTime;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneLaserController_Local_OnIdleChanged) == 0x000004, "Wrong alignment on K31DroneLaserController_Local_OnIdleChanged");
static_assert(sizeof(K31DroneLaserController_Local_OnIdleChanged) == 0x000008, "Wrong size on K31DroneLaserController_Local_OnIdleChanged");
static_assert(offsetof(K31DroneLaserController_Local_OnIdleChanged, isIdle) == 0x000000, "Member 'K31DroneLaserController_Local_OnIdleChanged::isIdle' has a wrong offset!");
static_assert(offsetof(K31DroneLaserController_Local_OnIdleChanged, idleStartTime) == 0x000004, "Member 'K31DroneLaserController_Local_OnIdleChanged::idleStartTime' has a wrong offset!");

// Function TheK31.K31DroneLaserScanActor.SetLaserVisibility
// 0x0001 (0x0001 - 0x0000)
struct K31DroneLaserScanActor_SetLaserVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneLaserScanActor_SetLaserVisibility) == 0x000001, "Wrong alignment on K31DroneLaserScanActor_SetLaserVisibility");
static_assert(sizeof(K31DroneLaserScanActor_SetLaserVisibility) == 0x000001, "Wrong size on K31DroneLaserScanActor_SetLaserVisibility");
static_assert(offsetof(K31DroneLaserScanActor_SetLaserVisibility, Visible) == 0x000000, "Member 'K31DroneLaserScanActor_SetLaserVisibility::Visible' has a wrong offset!");

// Function TheK31.K31DroneLaserScanActor.UpdateLaserScanMeshMaterial
// 0x0008 (0x0008 - 0x0000)
struct K31DroneLaserScanActor_UpdateLaserScanMeshMaterial final
{
public:
	class UMaterialInstance*                      newLaserScanMeshMaterial;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneLaserScanActor_UpdateLaserScanMeshMaterial) == 0x000008, "Wrong alignment on K31DroneLaserScanActor_UpdateLaserScanMeshMaterial");
static_assert(sizeof(K31DroneLaserScanActor_UpdateLaserScanMeshMaterial) == 0x000008, "Wrong size on K31DroneLaserScanActor_UpdateLaserScanMeshMaterial");
static_assert(offsetof(K31DroneLaserScanActor_UpdateLaserScanMeshMaterial, newLaserScanMeshMaterial) == 0x000000, "Member 'K31DroneLaserScanActor_UpdateLaserScanMeshMaterial::newLaserScanMeshMaterial' has a wrong offset!");

// Function TheK31.K31DroneMovementComponent.OnRep_DeployDatum
// 0x0048 (0x0048 - 0x0000)
struct K31DroneMovementComponent_OnRep_DeployDatum final
{
public:
	struct FDroneDeployDatum                      oldDeployDatum;                                    // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneMovementComponent_OnRep_DeployDatum) == 0x000008, "Wrong alignment on K31DroneMovementComponent_OnRep_DeployDatum");
static_assert(sizeof(K31DroneMovementComponent_OnRep_DeployDatum) == 0x000048, "Wrong size on K31DroneMovementComponent_OnRep_DeployDatum");
static_assert(offsetof(K31DroneMovementComponent_OnRep_DeployDatum, oldDeployDatum) == 0x000000, "Member 'K31DroneMovementComponent_OnRep_DeployDatum::oldDeployDatum' has a wrong offset!");

// Function TheK31.K31DroneMovementComponent.OnRep_ReplicatedMovement
// 0x0058 (0x0058 - 0x0000)
struct K31DroneMovementComponent_OnRep_ReplicatedMovement final
{
public:
	struct FDroneRepMovement                      oldRepMovement;                                    // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneMovementComponent_OnRep_ReplicatedMovement) == 0x000008, "Wrong alignment on K31DroneMovementComponent_OnRep_ReplicatedMovement");
static_assert(sizeof(K31DroneMovementComponent_OnRep_ReplicatedMovement) == 0x000058, "Wrong size on K31DroneMovementComponent_OnRep_ReplicatedMovement");
static_assert(offsetof(K31DroneMovementComponent_OnRep_ReplicatedMovement, oldRepMovement) == 0x000000, "Member 'K31DroneMovementComponent_OnRep_ReplicatedMovement::oldRepMovement' has a wrong offset!");

// Function TheK31.K31DroneMovementComponent.GetDistanceToTarget
// 0x0004 (0x0004 - 0x0000)
struct K31DroneMovementComponent_GetDistanceToTarget final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneMovementComponent_GetDistanceToTarget) == 0x000004, "Wrong alignment on K31DroneMovementComponent_GetDistanceToTarget");
static_assert(sizeof(K31DroneMovementComponent_GetDistanceToTarget) == 0x000004, "Wrong size on K31DroneMovementComponent_GetDistanceToTarget");
static_assert(offsetof(K31DroneMovementComponent_GetDistanceToTarget, ReturnValue) == 0x000000, "Member 'K31DroneMovementComponent_GetDistanceToTarget::ReturnValue' has a wrong offset!");

// Function TheK31.K31DroneMovementComponent.GetMovementMode
// 0x0001 (0x0001 - 0x0000)
struct K31DroneMovementComponent_GetMovementMode final
{
public:
	EK31DroneMovementMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneMovementComponent_GetMovementMode) == 0x000001, "Wrong alignment on K31DroneMovementComponent_GetMovementMode");
static_assert(sizeof(K31DroneMovementComponent_GetMovementMode) == 0x000001, "Wrong size on K31DroneMovementComponent_GetMovementMode");
static_assert(offsetof(K31DroneMovementComponent_GetMovementMode, ReturnValue) == 0x000000, "Member 'K31DroneMovementComponent_GetMovementMode::ReturnValue' has a wrong offset!");

// Function TheK31.K31DroneMovementComponent.GetTargetFlightHeight
// 0x0001 (0x0001 - 0x0000)
struct K31DroneMovementComponent_GetTargetFlightHeight final
{
public:
	EDroneFlyingHeight                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneMovementComponent_GetTargetFlightHeight) == 0x000001, "Wrong alignment on K31DroneMovementComponent_GetTargetFlightHeight");
static_assert(sizeof(K31DroneMovementComponent_GetTargetFlightHeight) == 0x000001, "Wrong size on K31DroneMovementComponent_GetTargetFlightHeight");
static_assert(offsetof(K31DroneMovementComponent_GetTargetFlightHeight, ReturnValue) == 0x000000, "Member 'K31DroneMovementComponent_GetTargetFlightHeight::ReturnValue' has a wrong offset!");

// Function TheK31.K31DroneMovementComponent.HasReachedDeployLocation
// 0x0001 (0x0001 - 0x0000)
struct K31DroneMovementComponent_HasReachedDeployLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneMovementComponent_HasReachedDeployLocation) == 0x000001, "Wrong alignment on K31DroneMovementComponent_HasReachedDeployLocation");
static_assert(sizeof(K31DroneMovementComponent_HasReachedDeployLocation) == 0x000001, "Wrong size on K31DroneMovementComponent_HasReachedDeployLocation");
static_assert(offsetof(K31DroneMovementComponent_HasReachedDeployLocation, ReturnValue) == 0x000000, "Member 'K31DroneMovementComponent_HasReachedDeployLocation::ReturnValue' has a wrong offset!");

// Function TheK31.K31DroneMovementComponent.IsMeshAttachedToCharacterForDeploy
// 0x0001 (0x0001 - 0x0000)
struct K31DroneMovementComponent_IsMeshAttachedToCharacterForDeploy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneMovementComponent_IsMeshAttachedToCharacterForDeploy) == 0x000001, "Wrong alignment on K31DroneMovementComponent_IsMeshAttachedToCharacterForDeploy");
static_assert(sizeof(K31DroneMovementComponent_IsMeshAttachedToCharacterForDeploy) == 0x000001, "Wrong size on K31DroneMovementComponent_IsMeshAttachedToCharacterForDeploy");
static_assert(offsetof(K31DroneMovementComponent_IsMeshAttachedToCharacterForDeploy, ReturnValue) == 0x000000, "Member 'K31DroneMovementComponent_IsMeshAttachedToCharacterForDeploy::ReturnValue' has a wrong offset!");

// Function TheK31.K31DroneScoutDetectionComponent.OnLaserActive
// 0x0010 (0x0010 - 0x0000)
struct K31DroneScoutDetectionComponent_OnLaserActive final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reset;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K31DroneScoutDetectionComponent_OnLaserActive) == 0x000008, "Wrong alignment on K31DroneScoutDetectionComponent_OnLaserActive");
static_assert(sizeof(K31DroneScoutDetectionComponent_OnLaserActive) == 0x000010, "Wrong size on K31DroneScoutDetectionComponent_OnLaserActive");
static_assert(offsetof(K31DroneScoutDetectionComponent_OnLaserActive, Component) == 0x000000, "Member 'K31DroneScoutDetectionComponent_OnLaserActive::Component' has a wrong offset!");
static_assert(offsetof(K31DroneScoutDetectionComponent_OnLaserActive, Reset) == 0x000008, "Member 'K31DroneScoutDetectionComponent_OnLaserActive::Reset' has a wrong offset!");

// Function TheK31.K31DroneScoutDetectionComponent.OnLaserDeactivate
// 0x0008 (0x0008 - 0x0000)
struct K31DroneScoutDetectionComponent_OnLaserDeactivate final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneScoutDetectionComponent_OnLaserDeactivate) == 0x000008, "Wrong alignment on K31DroneScoutDetectionComponent_OnLaserDeactivate");
static_assert(sizeof(K31DroneScoutDetectionComponent_OnLaserDeactivate) == 0x000008, "Wrong size on K31DroneScoutDetectionComponent_OnLaserDeactivate");
static_assert(offsetof(K31DroneScoutDetectionComponent_OnLaserDeactivate, Component) == 0x000000, "Member 'K31DroneScoutDetectionComponent_OnLaserDeactivate::Component' has a wrong offset!");

// Function TheK31.K31DroneStateController.GetCurrentStateID
// 0x0001 (0x0001 - 0x0000)
struct K31DroneStateController_GetCurrentStateID final
{
public:
	EK31DroneStateID                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneStateController_GetCurrentStateID) == 0x000001, "Wrong alignment on K31DroneStateController_GetCurrentStateID");
static_assert(sizeof(K31DroneStateController_GetCurrentStateID) == 0x000001, "Wrong size on K31DroneStateController_GetCurrentStateID");
static_assert(offsetof(K31DroneStateController_GetCurrentStateID, ReturnValue) == 0x000000, "Member 'K31DroneStateController_GetCurrentStateID::ReturnValue' has a wrong offset!");

// Function TheK31.K31DroneStateController.GetPreviousStateID
// 0x0001 (0x0001 - 0x0000)
struct K31DroneStateController_GetPreviousStateID final
{
public:
	EK31DroneStateID                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31DroneStateController_GetPreviousStateID) == 0x000001, "Wrong alignment on K31DroneStateController_GetPreviousStateID");
static_assert(sizeof(K31DroneStateController_GetPreviousStateID) == 0x000001, "Wrong size on K31DroneStateController_GetPreviousStateID");
static_assert(offsetof(K31DroneStateController_GetPreviousStateID, ReturnValue) == 0x000000, "Member 'K31DroneStateController_GetPreviousStateID::ReturnValue' has a wrong offset!");

// Function TheK31.K31MenuAnimInstance.OnCustomizationAnimationMappingIDChanged
// 0x0004 (0x0004 - 0x0000)
struct K31MenuAnimInstance_OnCustomizationAnimationMappingIDChanged final
{
public:
	int32                                         animationMappingIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31MenuAnimInstance_OnCustomizationAnimationMappingIDChanged) == 0x000004, "Wrong alignment on K31MenuAnimInstance_OnCustomizationAnimationMappingIDChanged");
static_assert(sizeof(K31MenuAnimInstance_OnCustomizationAnimationMappingIDChanged) == 0x000004, "Wrong size on K31MenuAnimInstance_OnCustomizationAnimationMappingIDChanged");
static_assert(offsetof(K31MenuAnimInstance_OnCustomizationAnimationMappingIDChanged, animationMappingIndex) == 0x000000, "Member 'K31MenuAnimInstance_OnCustomizationAnimationMappingIDChanged::animationMappingIndex' has a wrong offset!");

// Function TheK31.K31MenuAnimInstance.GetCustoAnimTags
// 0x0010 (0x0010 - 0x0000)
struct K31MenuAnimInstance_GetCustoAnimTags final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31MenuAnimInstance_GetCustoAnimTags) == 0x000008, "Wrong alignment on K31MenuAnimInstance_GetCustoAnimTags");
static_assert(sizeof(K31MenuAnimInstance_GetCustoAnimTags) == 0x000010, "Wrong size on K31MenuAnimInstance_GetCustoAnimTags");
static_assert(offsetof(K31MenuAnimInstance_GetCustoAnimTags, ReturnValue) == 0x000000, "Member 'K31MenuAnimInstance_GetCustoAnimTags::ReturnValue' has a wrong offset!");

// Function TheK31.K31MenuAnimInstance.GetCustomizationMappingID
// 0x0004 (0x0004 - 0x0000)
struct K31MenuAnimInstance_GetCustomizationMappingID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31MenuAnimInstance_GetCustomizationMappingID) == 0x000004, "Wrong alignment on K31MenuAnimInstance_GetCustomizationMappingID");
static_assert(sizeof(K31MenuAnimInstance_GetCustomizationMappingID) == 0x000004, "Wrong size on K31MenuAnimInstance_GetCustomizationMappingID");
static_assert(offsetof(K31MenuAnimInstance_GetCustomizationMappingID, ReturnValue) == 0x000000, "Member 'K31MenuAnimInstance_GetCustomizationMappingID::ReturnValue' has a wrong offset!");

// Function TheK31.K31P01.GetHasteEffectDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K31P01_GetHasteEffectDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31P01_GetHasteEffectDurationAtLevel) == 0x000004, "Wrong alignment on K31P01_GetHasteEffectDurationAtLevel");
static_assert(sizeof(K31P01_GetHasteEffectDurationAtLevel) == 0x000004, "Wrong size on K31P01_GetHasteEffectDurationAtLevel");
static_assert(offsetof(K31P01_GetHasteEffectDurationAtLevel, ReturnValue) == 0x000000, "Member 'K31P01_GetHasteEffectDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheK31.K31P01.GetHasteEffectMovementSpeedIncrease
// 0x0004 (0x0004 - 0x0000)
struct K31P01_GetHasteEffectMovementSpeedIncrease final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31P01_GetHasteEffectMovementSpeedIncrease) == 0x000004, "Wrong alignment on K31P01_GetHasteEffectMovementSpeedIncrease");
static_assert(sizeof(K31P01_GetHasteEffectMovementSpeedIncrease) == 0x000004, "Wrong size on K31P01_GetHasteEffectMovementSpeedIncrease");
static_assert(offsetof(K31P01_GetHasteEffectMovementSpeedIncrease, ReturnValue) == 0x000000, "Member 'K31P01_GetHasteEffectMovementSpeedIncrease::ReturnValue' has a wrong offset!");

// Function TheK31.K31P02.Multicast_MakeSurvivorsScream
// 0x0010 (0x0010 - 0x0000)
struct K31P02_Multicast_MakeSurvivorsScream final
{
public:
	TArray<class ASurvivor*>                      survivorsToScream;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31P02_Multicast_MakeSurvivorsScream) == 0x000008, "Wrong alignment on K31P02_Multicast_MakeSurvivorsScream");
static_assert(sizeof(K31P02_Multicast_MakeSurvivorsScream) == 0x000010, "Wrong size on K31P02_Multicast_MakeSurvivorsScream");
static_assert(offsetof(K31P02_Multicast_MakeSurvivorsScream, survivorsToScream) == 0x000000, "Member 'K31P02_Multicast_MakeSurvivorsScream::survivorsToScream' has a wrong offset!");

// Function TheK31.K31P02.GetScreamDistance
// 0x0004 (0x0004 - 0x0000)
struct K31P02_GetScreamDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31P02_GetScreamDistance) == 0x000004, "Wrong alignment on K31P02_GetScreamDistance");
static_assert(sizeof(K31P02_GetScreamDistance) == 0x000004, "Wrong size on K31P02_GetScreamDistance");
static_assert(offsetof(K31P02_GetScreamDistance, ReturnValue) == 0x000000, "Member 'K31P02_GetScreamDistance::ReturnValue' has a wrong offset!");

// Function TheK31.K31P02.GetScreamRevealDuration
// 0x0004 (0x0004 - 0x0000)
struct K31P02_GetScreamRevealDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31P02_GetScreamRevealDuration) == 0x000004, "Wrong alignment on K31P02_GetScreamRevealDuration");
static_assert(sizeof(K31P02_GetScreamRevealDuration) == 0x000004, "Wrong size on K31P02_GetScreamRevealDuration");
static_assert(offsetof(K31P02_GetScreamRevealDuration, ReturnValue) == 0x000000, "Member 'K31P02_GetScreamRevealDuration::ReturnValue' has a wrong offset!");

// Function TheK31.K31P03.GetHealPenaltyAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K31P03_GetHealPenaltyAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31P03_GetHealPenaltyAtLevel) == 0x000004, "Wrong alignment on K31P03_GetHealPenaltyAtLevel");
static_assert(sizeof(K31P03_GetHealPenaltyAtLevel) == 0x000004, "Wrong size on K31P03_GetHealPenaltyAtLevel");
static_assert(offsetof(K31P03_GetHealPenaltyAtLevel, ReturnValue) == 0x000000, "Member 'K31P03_GetHealPenaltyAtLevel::ReturnValue' has a wrong offset!");

// Function TheK31.K31P03.GetReduceHealingSpeedEffectSeconds
// 0x0004 (0x0004 - 0x0000)
struct K31P03_GetReduceHealingSpeedEffectSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31P03_GetReduceHealingSpeedEffectSeconds) == 0x000004, "Wrong alignment on K31P03_GetReduceHealingSpeedEffectSeconds");
static_assert(sizeof(K31P03_GetReduceHealingSpeedEffectSeconds) == 0x000004, "Wrong size on K31P03_GetReduceHealingSpeedEffectSeconds");
static_assert(offsetof(K31P03_GetReduceHealingSpeedEffectSeconds, ReturnValue) == 0x000000, "Member 'K31P03_GetReduceHealingSpeedEffectSeconds::ReturnValue' has a wrong offset!");

// Function TheK31.K31RadarAnimInstance.OnGameEventReceived
// 0x0040 (0x0040 - 0x0000)
struct K31RadarAnimInstance_OnGameEventReceived final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31RadarAnimInstance_OnGameEventReceived) == 0x000008, "Wrong alignment on K31RadarAnimInstance_OnGameEventReceived");
static_assert(sizeof(K31RadarAnimInstance_OnGameEventReceived) == 0x000040, "Wrong size on K31RadarAnimInstance_OnGameEventReceived");
static_assert(offsetof(K31RadarAnimInstance_OnGameEventReceived, GameplayTag) == 0x000000, "Member 'K31RadarAnimInstance_OnGameEventReceived::GameplayTag' has a wrong offset!");
static_assert(offsetof(K31RadarAnimInstance_OnGameEventReceived, GameEventData) == 0x000010, "Member 'K31RadarAnimInstance_OnGameEventReceived::GameEventData' has a wrong offset!");

// Function TheK31.K31Scanner.GetEncodedPoints
// 0x0010 (0x0010 - 0x0000)
struct K31Scanner_GetEncodedPoints final
{
public:
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31Scanner_GetEncodedPoints) == 0x000008, "Wrong alignment on K31Scanner_GetEncodedPoints");
static_assert(sizeof(K31Scanner_GetEncodedPoints) == 0x000010, "Wrong size on K31Scanner_GetEncodedPoints");
static_assert(offsetof(K31Scanner_GetEncodedPoints, ReturnValue) == 0x000000, "Member 'K31Scanner_GetEncodedPoints::ReturnValue' has a wrong offset!");

// Function TheK31.K31SurvivorClawTrapComponent.Authority_OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct K31SurvivorClawTrapComponent_Authority_OnDamageStateChanged final
{
public:
	EHealthState                                  oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealthState                                  newDamageState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31SurvivorClawTrapComponent_Authority_OnDamageStateChanged) == 0x000001, "Wrong alignment on K31SurvivorClawTrapComponent_Authority_OnDamageStateChanged");
static_assert(sizeof(K31SurvivorClawTrapComponent_Authority_OnDamageStateChanged) == 0x000002, "Wrong size on K31SurvivorClawTrapComponent_Authority_OnDamageStateChanged");
static_assert(offsetof(K31SurvivorClawTrapComponent_Authority_OnDamageStateChanged, oldDamageState) == 0x000000, "Member 'K31SurvivorClawTrapComponent_Authority_OnDamageStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(K31SurvivorClawTrapComponent_Authority_OnDamageStateChanged, newDamageState) == 0x000001, "Member 'K31SurvivorClawTrapComponent_Authority_OnDamageStateChanged::newDamageState' has a wrong offset!");

// Function TheK31.K31SurvivorClawTrapComponent.Multicast_ClawTrapAddedByDrone
// 0x0008 (0x0008 - 0x0000)
struct K31SurvivorClawTrapComponent_Multicast_ClawTrapAddedByDrone final
{
public:
	class AK31Drone*                              originatingDrone;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31SurvivorClawTrapComponent_Multicast_ClawTrapAddedByDrone) == 0x000008, "Wrong alignment on K31SurvivorClawTrapComponent_Multicast_ClawTrapAddedByDrone");
static_assert(sizeof(K31SurvivorClawTrapComponent_Multicast_ClawTrapAddedByDrone) == 0x000008, "Wrong size on K31SurvivorClawTrapComponent_Multicast_ClawTrapAddedByDrone");
static_assert(offsetof(K31SurvivorClawTrapComponent_Multicast_ClawTrapAddedByDrone, originatingDrone) == 0x000000, "Member 'K31SurvivorClawTrapComponent_Multicast_ClawTrapAddedByDrone::originatingDrone' has a wrong offset!");

// Function TheK31.K31SurvivorClawTrapComponent.OnRep_OriginatingPower
// 0x0008 (0x0008 - 0x0000)
struct K31SurvivorClawTrapComponent_OnRep_OriginatingPower final
{
public:
	class AK31Power*                              oldPower;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31SurvivorClawTrapComponent_OnRep_OriginatingPower) == 0x000008, "Wrong alignment on K31SurvivorClawTrapComponent_OnRep_OriginatingPower");
static_assert(sizeof(K31SurvivorClawTrapComponent_OnRep_OriginatingPower) == 0x000008, "Wrong size on K31SurvivorClawTrapComponent_OnRep_OriginatingPower");
static_assert(offsetof(K31SurvivorClawTrapComponent_OnRep_OriginatingPower, oldPower) == 0x000000, "Member 'K31SurvivorClawTrapComponent_OnRep_OriginatingPower::oldPower' has a wrong offset!");

// Function TheK31.K31SurvivorClawTrapComponent.OnSurvivorEscaped
// 0x0040 (0x0040 - 0x0000)
struct K31SurvivorClawTrapComponent_OnSurvivorEscaped final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31SurvivorClawTrapComponent_OnSurvivorEscaped) == 0x000008, "Wrong alignment on K31SurvivorClawTrapComponent_OnSurvivorEscaped");
static_assert(sizeof(K31SurvivorClawTrapComponent_OnSurvivorEscaped) == 0x000040, "Wrong size on K31SurvivorClawTrapComponent_OnSurvivorEscaped");
static_assert(offsetof(K31SurvivorClawTrapComponent_OnSurvivorEscaped, gameEventType) == 0x000000, "Member 'K31SurvivorClawTrapComponent_OnSurvivorEscaped::gameEventType' has a wrong offset!");
static_assert(offsetof(K31SurvivorClawTrapComponent_OnSurvivorEscaped, GameEventData) == 0x000010, "Member 'K31SurvivorClawTrapComponent_OnSurvivorEscaped::GameEventData' has a wrong offset!");

// Function TheK31.K31SurvivorClawTrapComponent.GetClawTrapCosmeticDelayDuration
// 0x0004 (0x0004 - 0x0000)
struct K31SurvivorClawTrapComponent_GetClawTrapCosmeticDelayDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31SurvivorClawTrapComponent_GetClawTrapCosmeticDelayDuration) == 0x000004, "Wrong alignment on K31SurvivorClawTrapComponent_GetClawTrapCosmeticDelayDuration");
static_assert(sizeof(K31SurvivorClawTrapComponent_GetClawTrapCosmeticDelayDuration) == 0x000004, "Wrong size on K31SurvivorClawTrapComponent_GetClawTrapCosmeticDelayDuration");
static_assert(offsetof(K31SurvivorClawTrapComponent_GetClawTrapCosmeticDelayDuration, ReturnValue) == 0x000000, "Member 'K31SurvivorClawTrapComponent_GetClawTrapCosmeticDelayDuration::ReturnValue' has a wrong offset!");

// Function TheK31.K31SurvivorCosmeticHelperActor.Cosmetic_OnDetectedByDrone
// 0x0010 (0x0010 - 0x0000)
struct K31SurvivorCosmeticHelperActor_Cosmetic_OnDetectedByDrone final
{
public:
	class AK31Drone*                              Drone;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOnCooldown;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K31SurvivorCosmeticHelperActor_Cosmetic_OnDetectedByDrone) == 0x000008, "Wrong alignment on K31SurvivorCosmeticHelperActor_Cosmetic_OnDetectedByDrone");
static_assert(sizeof(K31SurvivorCosmeticHelperActor_Cosmetic_OnDetectedByDrone) == 0x000010, "Wrong size on K31SurvivorCosmeticHelperActor_Cosmetic_OnDetectedByDrone");
static_assert(offsetof(K31SurvivorCosmeticHelperActor_Cosmetic_OnDetectedByDrone, Drone) == 0x000000, "Member 'K31SurvivorCosmeticHelperActor_Cosmetic_OnDetectedByDrone::Drone' has a wrong offset!");
static_assert(offsetof(K31SurvivorCosmeticHelperActor_Cosmetic_OnDetectedByDrone, IsOnCooldown) == 0x000008, "Member 'K31SurvivorCosmeticHelperActor_Cosmetic_OnDetectedByDrone::IsOnCooldown' has a wrong offset!");

// Function TheK31.K31SurvivorCosmeticHelperActor.Cosmetic_OnIsBroadcasting
// 0x0001 (0x0001 - 0x0000)
struct K31SurvivorCosmeticHelperActor_Cosmetic_OnIsBroadcasting final
{
public:
	bool                                          isBroadcasting;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsBroadcasting) == 0x000001, "Wrong alignment on K31SurvivorCosmeticHelperActor_Cosmetic_OnIsBroadcasting");
static_assert(sizeof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsBroadcasting) == 0x000001, "Wrong size on K31SurvivorCosmeticHelperActor_Cosmetic_OnIsBroadcasting");
static_assert(offsetof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsBroadcasting, isBroadcasting) == 0x000000, "Member 'K31SurvivorCosmeticHelperActor_Cosmetic_OnIsBroadcasting::isBroadcasting' has a wrong offset!");

// Function TheK31.K31SurvivorCosmeticHelperActor.Cosmetic_OnIsOverlappingActiveZoneChanged
// 0x0001 (0x0001 - 0x0000)
struct K31SurvivorCosmeticHelperActor_Cosmetic_OnIsOverlappingActiveZoneChanged final
{
public:
	bool                                          isOverlappingActiveZone;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsOverlappingActiveZoneChanged) == 0x000001, "Wrong alignment on K31SurvivorCosmeticHelperActor_Cosmetic_OnIsOverlappingActiveZoneChanged");
static_assert(sizeof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsOverlappingActiveZoneChanged) == 0x000001, "Wrong size on K31SurvivorCosmeticHelperActor_Cosmetic_OnIsOverlappingActiveZoneChanged");
static_assert(offsetof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsOverlappingActiveZoneChanged, isOverlappingActiveZone) == 0x000000, "Member 'K31SurvivorCosmeticHelperActor_Cosmetic_OnIsOverlappingActiveZoneChanged::isOverlappingActiveZone' has a wrong offset!");

// Function TheK31.K31SurvivorCosmeticHelperActor.Cosmetic_OnIsSurvivorDetectedAndVisibleOnScanner
// 0x0001 (0x0001 - 0x0000)
struct K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorDetectedAndVisibleOnScanner final
{
public:
	bool                                          isSurvivorDetectedAndVisibleOnScanner;             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorDetectedAndVisibleOnScanner) == 0x000001, "Wrong alignment on K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorDetectedAndVisibleOnScanner");
static_assert(sizeof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorDetectedAndVisibleOnScanner) == 0x000001, "Wrong size on K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorDetectedAndVisibleOnScanner");
static_assert(offsetof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorDetectedAndVisibleOnScanner, isSurvivorDetectedAndVisibleOnScanner) == 0x000000, "Member 'K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorDetectedAndVisibleOnScanner::isSurvivorDetectedAndVisibleOnScanner' has a wrong offset!");

// Function TheK31.K31SurvivorCosmeticHelperActor.Cosmetic_OnIsSurvivorImmuneToDetection
// 0x0008 (0x0008 - 0x0000)
struct K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorImmuneToDetection final
{
public:
	bool                                          isImmuneToDetection;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         numLockOns;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorImmuneToDetection) == 0x000004, "Wrong alignment on K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorImmuneToDetection");
static_assert(sizeof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorImmuneToDetection) == 0x000008, "Wrong size on K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorImmuneToDetection");
static_assert(offsetof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorImmuneToDetection, isImmuneToDetection) == 0x000000, "Member 'K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorImmuneToDetection::isImmuneToDetection' has a wrong offset!");
static_assert(offsetof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorImmuneToDetection, numLockOns) == 0x000004, "Member 'K31SurvivorCosmeticHelperActor_Cosmetic_OnIsSurvivorImmuneToDetection::numLockOns' has a wrong offset!");

// Function TheK31.K31SurvivorCosmeticHelperActor.Cosmetic_OnIsTrappedByClawTrap
// 0x0001 (0x0001 - 0x0000)
struct K31SurvivorCosmeticHelperActor_Cosmetic_OnIsTrappedByClawTrap final
{
public:
	bool                                          IsTrapped;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsTrappedByClawTrap) == 0x000001, "Wrong alignment on K31SurvivorCosmeticHelperActor_Cosmetic_OnIsTrappedByClawTrap");
static_assert(sizeof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsTrappedByClawTrap) == 0x000001, "Wrong size on K31SurvivorCosmeticHelperActor_Cosmetic_OnIsTrappedByClawTrap");
static_assert(offsetof(K31SurvivorCosmeticHelperActor_Cosmetic_OnIsTrappedByClawTrap, IsTrapped) == 0x000000, "Member 'K31SurvivorCosmeticHelperActor_Cosmetic_OnIsTrappedByClawTrap::IsTrapped' has a wrong offset!");

// Function TheK31.K31SurvivorCosmeticHelperActor.Cosmetic_UpdateLockOnProgress
// 0x0008 (0x0008 - 0x0000)
struct K31SurvivorCosmeticHelperActor_Cosmetic_UpdateLockOnProgress final
{
public:
	float                                         currentProgressPercent;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFullyLockedOn;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K31SurvivorCosmeticHelperActor_Cosmetic_UpdateLockOnProgress) == 0x000004, "Wrong alignment on K31SurvivorCosmeticHelperActor_Cosmetic_UpdateLockOnProgress");
static_assert(sizeof(K31SurvivorCosmeticHelperActor_Cosmetic_UpdateLockOnProgress) == 0x000008, "Wrong size on K31SurvivorCosmeticHelperActor_Cosmetic_UpdateLockOnProgress");
static_assert(offsetof(K31SurvivorCosmeticHelperActor_Cosmetic_UpdateLockOnProgress, currentProgressPercent) == 0x000000, "Member 'K31SurvivorCosmeticHelperActor_Cosmetic_UpdateLockOnProgress::currentProgressPercent' has a wrong offset!");
static_assert(offsetof(K31SurvivorCosmeticHelperActor_Cosmetic_UpdateLockOnProgress, IsFullyLockedOn) == 0x000004, "Member 'K31SurvivorCosmeticHelperActor_Cosmetic_UpdateLockOnProgress::IsFullyLockedOn' has a wrong offset!");

// Function TheK31.K31SurvivorDetection.Authority_OnChargeCompleted
// 0x0018 (0x0018 - 0x0000)
struct K31SurvivorDetection_Authority_OnChargeCompleted final
{
public:
	bool                                          COMPLETED;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         instigatorsForCompletion;                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31SurvivorDetection_Authority_OnChargeCompleted) == 0x000008, "Wrong alignment on K31SurvivorDetection_Authority_OnChargeCompleted");
static_assert(sizeof(K31SurvivorDetection_Authority_OnChargeCompleted) == 0x000018, "Wrong size on K31SurvivorDetection_Authority_OnChargeCompleted");
static_assert(offsetof(K31SurvivorDetection_Authority_OnChargeCompleted, COMPLETED) == 0x000000, "Member 'K31SurvivorDetection_Authority_OnChargeCompleted::COMPLETED' has a wrong offset!");
static_assert(offsetof(K31SurvivorDetection_Authority_OnChargeCompleted, instigatorsForCompletion) == 0x000008, "Member 'K31SurvivorDetection_Authority_OnChargeCompleted::instigatorsForCompletion' has a wrong offset!");

// Function TheK31.K31SurvivorDetection.Authority_OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct K31SurvivorDetection_Authority_OnDamageStateChanged final
{
public:
	EHealthState                                  oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealthState                                  newDamageState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31SurvivorDetection_Authority_OnDamageStateChanged) == 0x000001, "Wrong alignment on K31SurvivorDetection_Authority_OnDamageStateChanged");
static_assert(sizeof(K31SurvivorDetection_Authority_OnDamageStateChanged) == 0x000002, "Wrong size on K31SurvivorDetection_Authority_OnDamageStateChanged");
static_assert(offsetof(K31SurvivorDetection_Authority_OnDamageStateChanged, oldDamageState) == 0x000000, "Member 'K31SurvivorDetection_Authority_OnDamageStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(K31SurvivorDetection_Authority_OnDamageStateChanged, newDamageState) == 0x000001, "Member 'K31SurvivorDetection_Authority_OnDamageStateChanged::newDamageState' has a wrong offset!");

// Function TheK31.K31SurvivorDetection.OnRep_OriginatingPower
// 0x0008 (0x0008 - 0x0000)
struct K31SurvivorDetection_OnRep_OriginatingPower final
{
public:
	class AK31Power*                              oldPower;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31SurvivorDetection_OnRep_OriginatingPower) == 0x000008, "Wrong alignment on K31SurvivorDetection_OnRep_OriginatingPower");
static_assert(sizeof(K31SurvivorDetection_OnRep_OriginatingPower) == 0x000008, "Wrong size on K31SurvivorDetection_OnRep_OriginatingPower");
static_assert(offsetof(K31SurvivorDetection_OnRep_OriginatingPower, oldPower) == 0x000000, "Member 'K31SurvivorDetection_OnRep_OriginatingPower::oldPower' has a wrong offset!");

// Function TheK31.K31WeakPointScoreEmitter.Authority_OnDechargeBegin
// 0x0008 (0x0008 - 0x0000)
struct K31WeakPointScoreEmitter_Authority_OnDechargeBegin final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31WeakPointScoreEmitter_Authority_OnDechargeBegin) == 0x000008, "Wrong alignment on K31WeakPointScoreEmitter_Authority_OnDechargeBegin");
static_assert(sizeof(K31WeakPointScoreEmitter_Authority_OnDechargeBegin) == 0x000008, "Wrong size on K31WeakPointScoreEmitter_Authority_OnDechargeBegin");
static_assert(offsetof(K31WeakPointScoreEmitter_Authority_OnDechargeBegin, ChargeableComponent) == 0x000000, "Member 'K31WeakPointScoreEmitter_Authority_OnDechargeBegin::ChargeableComponent' has a wrong offset!");

// Function TheK31.K31WeakPointScoreEmitter.Authority_OnDechargeEnd
// 0x0008 (0x0008 - 0x0000)
struct K31WeakPointScoreEmitter_Authority_OnDechargeEnd final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K31WeakPointScoreEmitter_Authority_OnDechargeEnd) == 0x000008, "Wrong alignment on K31WeakPointScoreEmitter_Authority_OnDechargeEnd");
static_assert(sizeof(K31WeakPointScoreEmitter_Authority_OnDechargeEnd) == 0x000008, "Wrong size on K31WeakPointScoreEmitter_Authority_OnDechargeEnd");
static_assert(offsetof(K31WeakPointScoreEmitter_Authority_OnDechargeEnd, ChargeableComponent) == 0x000000, "Member 'K31WeakPointScoreEmitter_Authority_OnDechargeEnd::ChargeableComponent' has a wrong offset!");

// Function TheK31.SurvivorHackDroneInteraction.Authority_OnMinigameEnd
// 0x0010 (0x0010 - 0x0000)
struct SurvivorHackDroneInteraction_Authority_OnMinigameEnd final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDirectionalMinigameResult                    Result;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivorHackDroneInteraction_Authority_OnMinigameEnd) == 0x000008, "Wrong alignment on SurvivorHackDroneInteraction_Authority_OnMinigameEnd");
static_assert(sizeof(SurvivorHackDroneInteraction_Authority_OnMinigameEnd) == 0x000010, "Wrong size on SurvivorHackDroneInteraction_Authority_OnMinigameEnd");
static_assert(offsetof(SurvivorHackDroneInteraction_Authority_OnMinigameEnd, Survivor) == 0x000000, "Member 'SurvivorHackDroneInteraction_Authority_OnMinigameEnd::Survivor' has a wrong offset!");
static_assert(offsetof(SurvivorHackDroneInteraction_Authority_OnMinigameEnd, Result) == 0x000008, "Member 'SurvivorHackDroneInteraction_Authority_OnMinigameEnd::Result' has a wrong offset!");

// Function TheK31.SurvivorRemoveClawTrapInteraction.Authority_OnMinigameEnd
// 0x0010 (0x0010 - 0x0000)
struct SurvivorRemoveClawTrapInteraction_Authority_OnMinigameEnd final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDirectionalMinigameResult                    Result;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivorRemoveClawTrapInteraction_Authority_OnMinigameEnd) == 0x000008, "Wrong alignment on SurvivorRemoveClawTrapInteraction_Authority_OnMinigameEnd");
static_assert(sizeof(SurvivorRemoveClawTrapInteraction_Authority_OnMinigameEnd) == 0x000010, "Wrong size on SurvivorRemoveClawTrapInteraction_Authority_OnMinigameEnd");
static_assert(offsetof(SurvivorRemoveClawTrapInteraction_Authority_OnMinigameEnd, Survivor) == 0x000000, "Member 'SurvivorRemoveClawTrapInteraction_Authority_OnMinigameEnd::Survivor' has a wrong offset!");
static_assert(offsetof(SurvivorRemoveClawTrapInteraction_Authority_OnMinigameEnd, Result) == 0x000008, "Member 'SurvivorRemoveClawTrapInteraction_Authority_OnMinigameEnd::Result' has a wrong offset!");

}

