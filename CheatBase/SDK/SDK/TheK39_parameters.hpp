#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK39

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "TheK39_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DeadByDaylight_structs.hpp"


namespace SDK::Params
{

// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnPowerUpModeAdded
// 0x0008 (0x0008 - 0x0000)
struct K39KillerCosmeticHelperActor_Cosmetic_OnPowerUpModeAdded final
{
public:
	bool                                          inWithdrawal;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         withdrawalTime;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39KillerCosmeticHelperActor_Cosmetic_OnPowerUpModeAdded) == 0x000004, "Wrong alignment on K39KillerCosmeticHelperActor_Cosmetic_OnPowerUpModeAdded");
static_assert(sizeof(K39KillerCosmeticHelperActor_Cosmetic_OnPowerUpModeAdded) == 0x000008, "Wrong size on K39KillerCosmeticHelperActor_Cosmetic_OnPowerUpModeAdded");
static_assert(offsetof(K39KillerCosmeticHelperActor_Cosmetic_OnPowerUpModeAdded, inWithdrawal) == 0x000000, "Member 'K39KillerCosmeticHelperActor_Cosmetic_OnPowerUpModeAdded::inWithdrawal' has a wrong offset!");
static_assert(offsetof(K39KillerCosmeticHelperActor_Cosmetic_OnPowerUpModeAdded, withdrawalTime) == 0x000004, "Member 'K39KillerCosmeticHelperActor_Cosmetic_OnPowerUpModeAdded::withdrawalTime' has a wrong offset!");

// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnSurvivorRemovedInfected
// 0x0008 (0x0008 - 0x0000)
struct K39KillerCosmeticHelperActor_Cosmetic_OnSurvivorRemovedInfected final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39KillerCosmeticHelperActor_Cosmetic_OnSurvivorRemovedInfected) == 0x000008, "Wrong alignment on K39KillerCosmeticHelperActor_Cosmetic_OnSurvivorRemovedInfected");
static_assert(sizeof(K39KillerCosmeticHelperActor_Cosmetic_OnSurvivorRemovedInfected) == 0x000008, "Wrong size on K39KillerCosmeticHelperActor_Cosmetic_OnSurvivorRemovedInfected");
static_assert(offsetof(K39KillerCosmeticHelperActor_Cosmetic_OnSurvivorRemovedInfected, Survivor) == 0x000000, "Member 'K39KillerCosmeticHelperActor_Cosmetic_OnSurvivorRemovedInfected::Survivor' has a wrong offset!");

// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnTentacleAttached
// 0x0048 (0x0048 - 0x0000)
struct K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isNonDamaging;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PhysicalMaterial;                                  // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SurfaceNormal;                                     // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached) == 0x000008, "Wrong alignment on K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached");
static_assert(sizeof(K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached) == 0x000048, "Wrong size on K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached");
static_assert(offsetof(K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached, Survivor) == 0x000000, "Member 'K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached::Survivor' has a wrong offset!");
static_assert(offsetof(K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached, Location) == 0x000008, "Member 'K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached::Location' has a wrong offset!");
static_assert(offsetof(K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached, isNonDamaging) == 0x000020, "Member 'K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached::isNonDamaging' has a wrong offset!");
static_assert(offsetof(K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached, PhysicalMaterial) == 0x000028, "Member 'K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached, SurfaceNormal) == 0x000030, "Member 'K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached::SurfaceNormal' has a wrong offset!");

// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnTentacleLaunched
// 0x0001 (0x0001 - 0x0000)
struct K39KillerCosmeticHelperActor_Cosmetic_OnTentacleLaunched final
{
public:
	bool                                          isSuccess;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39KillerCosmeticHelperActor_Cosmetic_OnTentacleLaunched) == 0x000001, "Wrong alignment on K39KillerCosmeticHelperActor_Cosmetic_OnTentacleLaunched");
static_assert(sizeof(K39KillerCosmeticHelperActor_Cosmetic_OnTentacleLaunched) == 0x000001, "Wrong size on K39KillerCosmeticHelperActor_Cosmetic_OnTentacleLaunched");
static_assert(offsetof(K39KillerCosmeticHelperActor_Cosmetic_OnTentacleLaunched, isSuccess) == 0x000000, "Member 'K39KillerCosmeticHelperActor_Cosmetic_OnTentacleLaunched::isSuccess' has a wrong offset!");

// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnTentacleRetracting
// 0x0018 (0x0018 - 0x0000)
struct K39KillerCosmeticHelperActor_Cosmetic_OnTentacleRetracting final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39KillerCosmeticHelperActor_Cosmetic_OnTentacleRetracting) == 0x000008, "Wrong alignment on K39KillerCosmeticHelperActor_Cosmetic_OnTentacleRetracting");
static_assert(sizeof(K39KillerCosmeticHelperActor_Cosmetic_OnTentacleRetracting) == 0x000018, "Wrong size on K39KillerCosmeticHelperActor_Cosmetic_OnTentacleRetracting");
static_assert(offsetof(K39KillerCosmeticHelperActor_Cosmetic_OnTentacleRetracting, Location) == 0x000000, "Member 'K39KillerCosmeticHelperActor_Cosmetic_OnTentacleRetracting::Location' has a wrong offset!");

// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnVaultDamageSurvivor
// 0x0008 (0x0008 - 0x0000)
struct K39KillerCosmeticHelperActor_Cosmetic_OnVaultDamageSurvivor final
{
public:
	class ASurvivor*                              hitSurvivor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39KillerCosmeticHelperActor_Cosmetic_OnVaultDamageSurvivor) == 0x000008, "Wrong alignment on K39KillerCosmeticHelperActor_Cosmetic_OnVaultDamageSurvivor");
static_assert(sizeof(K39KillerCosmeticHelperActor_Cosmetic_OnVaultDamageSurvivor) == 0x000008, "Wrong size on K39KillerCosmeticHelperActor_Cosmetic_OnVaultDamageSurvivor");
static_assert(offsetof(K39KillerCosmeticHelperActor_Cosmetic_OnVaultDamageSurvivor, hitSurvivor) == 0x000000, "Member 'K39KillerCosmeticHelperActor_Cosmetic_OnVaultDamageSurvivor::hitSurvivor' has a wrong offset!");

// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnWithdrawalEnd
// 0x0001 (0x0001 - 0x0000)
struct K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalEnd final
{
public:
	bool                                          isInPowerupMode;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalEnd) == 0x000001, "Wrong alignment on K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalEnd");
static_assert(sizeof(K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalEnd) == 0x000001, "Wrong size on K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalEnd");
static_assert(offsetof(K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalEnd, isInPowerupMode) == 0x000000, "Member 'K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalEnd::isInPowerupMode' has a wrong offset!");

// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnWithdrawalStart
// 0x0004 (0x0004 - 0x0000)
struct K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalStart final
{
public:
	float                                         withdrawalTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalStart) == 0x000004, "Wrong alignment on K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalStart");
static_assert(sizeof(K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalStart) == 0x000004, "Wrong size on K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalStart");
static_assert(offsetof(K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalStart, withdrawalTime) == 0x000000, "Member 'K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalStart::withdrawalTime' has a wrong offset!");

// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_UpdateTentacle
// 0x0028 (0x0028 - 0x0000)
struct K39KillerCosmeticHelperActor_Cosmetic_UpdateTentacle final
{
public:
	struct FK39TentacleCosmeticSettings           Settings;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39KillerCosmeticHelperActor_Cosmetic_UpdateTentacle) == 0x000008, "Wrong alignment on K39KillerCosmeticHelperActor_Cosmetic_UpdateTentacle");
static_assert(sizeof(K39KillerCosmeticHelperActor_Cosmetic_UpdateTentacle) == 0x000028, "Wrong size on K39KillerCosmeticHelperActor_Cosmetic_UpdateTentacle");
static_assert(offsetof(K39KillerCosmeticHelperActor_Cosmetic_UpdateTentacle, Settings) == 0x000000, "Member 'K39KillerCosmeticHelperActor_Cosmetic_UpdateTentacle::Settings' has a wrong offset!");

// Function TheK39.K39KillerCosmeticHelperActor.GetTentaclesActor
// 0x0008 (0x0008 - 0x0000)
struct K39KillerCosmeticHelperActor_GetTentaclesActor final
{
public:
	class AK39TentaclesActor*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39KillerCosmeticHelperActor_GetTentaclesActor) == 0x000008, "Wrong alignment on K39KillerCosmeticHelperActor_GetTentaclesActor");
static_assert(sizeof(K39KillerCosmeticHelperActor_GetTentaclesActor) == 0x000008, "Wrong size on K39KillerCosmeticHelperActor_GetTentaclesActor");
static_assert(offsetof(K39KillerCosmeticHelperActor_GetTentaclesActor, ReturnValue) == 0x000000, "Member 'K39KillerCosmeticHelperActor_GetTentaclesActor::ReturnValue' has a wrong offset!");

// Function TheK39.K39P01.Client_UpdateHudIcon
// 0x0004 (0x0004 - 0x0000)
struct K39P01_Client_UpdateHudIcon final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39P01_Client_UpdateHudIcon) == 0x000004, "Wrong alignment on K39P01_Client_UpdateHudIcon");
static_assert(sizeof(K39P01_Client_UpdateHudIcon) == 0x000004, "Wrong size on K39P01_Client_UpdateHudIcon");
static_assert(offsetof(K39P01_Client_UpdateHudIcon, Percent) == 0x000000, "Member 'K39P01_Client_UpdateHudIcon::Percent' has a wrong offset!");

// Function TheK39.K39Power.GetTentaclesActor
// 0x0008 (0x0008 - 0x0000)
struct K39Power_GetTentaclesActor final
{
public:
	class AK39TentaclesActor*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39Power_GetTentaclesActor) == 0x000008, "Wrong alignment on K39Power_GetTentaclesActor");
static_assert(sizeof(K39Power_GetTentaclesActor) == 0x000008, "Wrong size on K39Power_GetTentaclesActor");
static_assert(offsetof(K39Power_GetTentaclesActor, ReturnValue) == 0x000000, "Member 'K39Power_GetTentaclesActor::ReturnValue' has a wrong offset!");

// Function TheK39.K39PowerAddon19.Multicast_SurvivorScream
// 0x0008 (0x0008 - 0x0000)
struct K39PowerAddon19_Multicast_SurvivorScream final
{
public:
	const class ASurvivor*                        Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39PowerAddon19_Multicast_SurvivorScream) == 0x000008, "Wrong alignment on K39PowerAddon19_Multicast_SurvivorScream");
static_assert(sizeof(K39PowerAddon19_Multicast_SurvivorScream) == 0x000008, "Wrong size on K39PowerAddon19_Multicast_SurvivorScream");
static_assert(offsetof(K39PowerAddon19_Multicast_SurvivorScream, Survivor) == 0x000000, "Member 'K39PowerAddon19_Multicast_SurvivorScream::Survivor' has a wrong offset!");

// Function TheK39.K39PowerAddon20.Multicast_DestroyPallet
// 0x0008 (0x0008 - 0x0000)
struct K39PowerAddon20_Multicast_DestroyPallet final
{
public:
	class APallet*                                Pallet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39PowerAddon20_Multicast_DestroyPallet) == 0x000008, "Wrong alignment on K39PowerAddon20_Multicast_DestroyPallet");
static_assert(sizeof(K39PowerAddon20_Multicast_DestroyPallet) == 0x000008, "Wrong size on K39PowerAddon20_Multicast_DestroyPallet");
static_assert(offsetof(K39PowerAddon20_Multicast_DestroyPallet, Pallet) == 0x000000, "Member 'K39PowerAddon20_Multicast_DestroyPallet::Pallet' has a wrong offset!");

// Function TheK39.K39SurvivorCosmeticHelperActor.Cosmetic_OnUpdateTargetingReticle
// 0x0040 (0x0040 - 0x0000)
struct K39SurvivorCosmeticHelperActor_Cosmetic_OnUpdateTargetingReticle final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASurvivor*                              targetedSurvivor;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNonDamagingSwing;                                // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SurfaceNormal;                                     // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39SurvivorCosmeticHelperActor_Cosmetic_OnUpdateTargetingReticle) == 0x000008, "Wrong alignment on K39SurvivorCosmeticHelperActor_Cosmetic_OnUpdateTargetingReticle");
static_assert(sizeof(K39SurvivorCosmeticHelperActor_Cosmetic_OnUpdateTargetingReticle) == 0x000040, "Wrong size on K39SurvivorCosmeticHelperActor_Cosmetic_OnUpdateTargetingReticle");
static_assert(offsetof(K39SurvivorCosmeticHelperActor_Cosmetic_OnUpdateTargetingReticle, Location) == 0x000000, "Member 'K39SurvivorCosmeticHelperActor_Cosmetic_OnUpdateTargetingReticle::Location' has a wrong offset!");
static_assert(offsetof(K39SurvivorCosmeticHelperActor_Cosmetic_OnUpdateTargetingReticle, targetedSurvivor) == 0x000018, "Member 'K39SurvivorCosmeticHelperActor_Cosmetic_OnUpdateTargetingReticle::targetedSurvivor' has a wrong offset!");
static_assert(offsetof(K39SurvivorCosmeticHelperActor_Cosmetic_OnUpdateTargetingReticle, IsNonDamagingSwing) == 0x000020, "Member 'K39SurvivorCosmeticHelperActor_Cosmetic_OnUpdateTargetingReticle::IsNonDamagingSwing' has a wrong offset!");
static_assert(offsetof(K39SurvivorCosmeticHelperActor_Cosmetic_OnUpdateTargetingReticle, SurfaceNormal) == 0x000028, "Member 'K39SurvivorCosmeticHelperActor_Cosmetic_OnUpdateTargetingReticle::SurfaceNormal' has a wrong offset!");

// Function TheK39.K39TentaclesActor.SetLongTentaclesVisibility
// 0x0001 (0x0001 - 0x0000)
struct K39TentaclesActor_SetLongTentaclesVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39TentaclesActor_SetLongTentaclesVisibility) == 0x000001, "Wrong alignment on K39TentaclesActor_SetLongTentaclesVisibility");
static_assert(sizeof(K39TentaclesActor_SetLongTentaclesVisibility) == 0x000001, "Wrong size on K39TentaclesActor_SetLongTentaclesVisibility");
static_assert(offsetof(K39TentaclesActor_SetLongTentaclesVisibility, IsVisible) == 0x000000, "Member 'K39TentaclesActor_SetLongTentaclesVisibility::IsVisible' has a wrong offset!");

// Function TheK39.K39TentaclesActor.GetLongTentaclesMesh
// 0x0008 (0x0008 - 0x0000)
struct K39TentaclesActor_GetLongTentaclesMesh final
{
public:
	class UDBDSkeletalMeshComponentBudgeted*      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39TentaclesActor_GetLongTentaclesMesh) == 0x000008, "Wrong alignment on K39TentaclesActor_GetLongTentaclesMesh");
static_assert(sizeof(K39TentaclesActor_GetLongTentaclesMesh) == 0x000008, "Wrong size on K39TentaclesActor_GetLongTentaclesMesh");
static_assert(offsetof(K39TentaclesActor_GetLongTentaclesMesh, ReturnValue) == 0x000000, "Member 'K39TentaclesActor_GetLongTentaclesMesh::ReturnValue' has a wrong offset!");

// Function TheK39.K39TentaclesActor.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct K39TentaclesActor_GetMesh final
{
public:
	class UDBDSkeletalMeshComponentBudgeted*      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39TentaclesActor_GetMesh) == 0x000008, "Wrong alignment on K39TentaclesActor_GetMesh");
static_assert(sizeof(K39TentaclesActor_GetMesh) == 0x000008, "Wrong size on K39TentaclesActor_GetMesh");
static_assert(offsetof(K39TentaclesActor_GetMesh, ReturnValue) == 0x000000, "Member 'K39TentaclesActor_GetMesh::ReturnValue' has a wrong offset!");

// Function TheK39.K39TentacleSwingAbility.OnStun
// 0x0040 (0x0040 - 0x0000)
struct K39TentacleSwingAbility_OnStun final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39TentacleSwingAbility_OnStun) == 0x000008, "Wrong alignment on K39TentacleSwingAbility_OnStun");
static_assert(sizeof(K39TentacleSwingAbility_OnStun) == 0x000040, "Wrong size on K39TentacleSwingAbility_OnStun");
static_assert(offsetof(K39TentacleSwingAbility_OnStun, GameplayTag) == 0x000000, "Member 'K39TentacleSwingAbility_OnStun::GameplayTag' has a wrong offset!");
static_assert(offsetof(K39TentacleSwingAbility_OnStun, GameEventData) == 0x000010, "Member 'K39TentacleSwingAbility_OnStun::GameEventData' has a wrong offset!");

// Function TheK39.K39TentacleSwingAbility.Server_CacheSwingData
// 0x0078 (0x0078 - 0x0000)
struct K39TentacleSwingAbility_Server_CacheSwingData final
{
public:
	struct FK39TentacleSwingData                  swingData;                                         // 0x0000(0x0070)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EK39TentacleSwingResult                       swingResult;                                       // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K39TentacleSwingAbility_Server_CacheSwingData) == 0x000008, "Wrong alignment on K39TentacleSwingAbility_Server_CacheSwingData");
static_assert(sizeof(K39TentacleSwingAbility_Server_CacheSwingData) == 0x000078, "Wrong size on K39TentacleSwingAbility_Server_CacheSwingData");
static_assert(offsetof(K39TentacleSwingAbility_Server_CacheSwingData, swingData) == 0x000000, "Member 'K39TentacleSwingAbility_Server_CacheSwingData::swingData' has a wrong offset!");
static_assert(offsetof(K39TentacleSwingAbility_Server_CacheSwingData, swingResult) == 0x000070, "Member 'K39TentacleSwingAbility_Server_CacheSwingData::swingResult' has a wrong offset!");

// Function TheK39.K39TentacleSwingSwingingState.OnSurvivorInOwnerRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct K39TentacleSwingSwingingState_OnSurvivorInOwnerRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39TentacleSwingSwingingState_OnSurvivorInOwnerRangeChanged) == 0x000001, "Wrong alignment on K39TentacleSwingSwingingState_OnSurvivorInOwnerRangeChanged");
static_assert(sizeof(K39TentacleSwingSwingingState_OnSurvivorInOwnerRangeChanged) == 0x000001, "Wrong size on K39TentacleSwingSwingingState_OnSurvivorInOwnerRangeChanged");
static_assert(offsetof(K39TentacleSwingSwingingState_OnSurvivorInOwnerRangeChanged, inRange) == 0x000000, "Member 'K39TentacleSwingSwingingState_OnSurvivorInOwnerRangeChanged::inRange' has a wrong offset!");

// Function TheK39.K39TentacleTargetIndicator.Cosmetic_OnReticleBufferChanged
// 0x0004 (0x0004 - 0x0000)
struct K39TentacleTargetIndicator_Cosmetic_OnReticleBufferChanged final
{
public:
	float                                         bufferPercent;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39TentacleTargetIndicator_Cosmetic_OnReticleBufferChanged) == 0x000004, "Wrong alignment on K39TentacleTargetIndicator_Cosmetic_OnReticleBufferChanged");
static_assert(sizeof(K39TentacleTargetIndicator_Cosmetic_OnReticleBufferChanged) == 0x000004, "Wrong size on K39TentacleTargetIndicator_Cosmetic_OnReticleBufferChanged");
static_assert(offsetof(K39TentacleTargetIndicator_Cosmetic_OnReticleBufferChanged, bufferPercent) == 0x000000, "Member 'K39TentacleTargetIndicator_Cosmetic_OnReticleBufferChanged::bufferPercent' has a wrong offset!");

// Function TheK39.K39TentacleTargetIndicator.Cosmetic_OnSettingsChanged
// 0x0070 (0x0070 - 0x0000)
struct K39TentacleTargetIndicator_Cosmetic_OnSettingsChanged final
{
public:
	struct FK39TentacleTargetIndicatorSettings    previousSettings;                                  // 0x0000(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FK39TentacleTargetIndicatorSettings    Settings;                                          // 0x0038(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39TentacleTargetIndicator_Cosmetic_OnSettingsChanged) == 0x000008, "Wrong alignment on K39TentacleTargetIndicator_Cosmetic_OnSettingsChanged");
static_assert(sizeof(K39TentacleTargetIndicator_Cosmetic_OnSettingsChanged) == 0x000070, "Wrong size on K39TentacleTargetIndicator_Cosmetic_OnSettingsChanged");
static_assert(offsetof(K39TentacleTargetIndicator_Cosmetic_OnSettingsChanged, previousSettings) == 0x000000, "Member 'K39TentacleTargetIndicator_Cosmetic_OnSettingsChanged::previousSettings' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetIndicator_Cosmetic_OnSettingsChanged, Settings) == 0x000038, "Member 'K39TentacleTargetIndicator_Cosmetic_OnSettingsChanged::Settings' has a wrong offset!");

// Function TheK39.K39TentacleTargetIndicator.Cosmetic_UpdateIndicatorStrength
// 0x0004 (0x0004 - 0x0000)
struct K39TentacleTargetIndicator_Cosmetic_UpdateIndicatorStrength final
{
public:
	float                                         distanceModifier;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39TentacleTargetIndicator_Cosmetic_UpdateIndicatorStrength) == 0x000004, "Wrong alignment on K39TentacleTargetIndicator_Cosmetic_UpdateIndicatorStrength");
static_assert(sizeof(K39TentacleTargetIndicator_Cosmetic_UpdateIndicatorStrength) == 0x000004, "Wrong size on K39TentacleTargetIndicator_Cosmetic_UpdateIndicatorStrength");
static_assert(offsetof(K39TentacleTargetIndicator_Cosmetic_UpdateIndicatorStrength, distanceModifier) == 0x000000, "Member 'K39TentacleTargetIndicator_Cosmetic_UpdateIndicatorStrength::distanceModifier' has a wrong offset!");

// Function TheK39.K39TentacleTargetIndicator.GetSettings
// 0x0038 (0x0038 - 0x0000)
struct K39TentacleTargetIndicator_GetSettings final
{
public:
	struct FK39TentacleTargetIndicatorSettings    ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39TentacleTargetIndicator_GetSettings) == 0x000008, "Wrong alignment on K39TentacleTargetIndicator_GetSettings");
static_assert(sizeof(K39TentacleTargetIndicator_GetSettings) == 0x000038, "Wrong size on K39TentacleTargetIndicator_GetSettings");
static_assert(offsetof(K39TentacleTargetIndicator_GetSettings, ReturnValue) == 0x000000, "Member 'K39TentacleTargetIndicator_GetSettings::ReturnValue' has a wrong offset!");

// Function TheK39.K39TentacleTargetingComponent.MakeGrabSurvivorSwingData
// 0x00C0 (0x00C0 - 0x0000)
struct K39TentacleTargetingComponent_MakeGrabSurvivorSwingData final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraDirection;                                   // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASurvivor*                              TargetSurvivor;                                    // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FK39TentacleSwingData                  ReturnValue;                                       // 0x0050(0x0070)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39TentacleTargetingComponent_MakeGrabSurvivorSwingData) == 0x000008, "Wrong alignment on K39TentacleTargetingComponent_MakeGrabSurvivorSwingData");
static_assert(sizeof(K39TentacleTargetingComponent_MakeGrabSurvivorSwingData) == 0x0000C0, "Wrong size on K39TentacleTargetingComponent_MakeGrabSurvivorSwingData");
static_assert(offsetof(K39TentacleTargetingComponent_MakeGrabSurvivorSwingData, HitLocation) == 0x000000, "Member 'K39TentacleTargetingComponent_MakeGrabSurvivorSwingData::HitLocation' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetingComponent_MakeGrabSurvivorSwingData, Destination) == 0x000018, "Member 'K39TentacleTargetingComponent_MakeGrabSurvivorSwingData::Destination' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetingComponent_MakeGrabSurvivorSwingData, CameraDirection) == 0x000030, "Member 'K39TentacleTargetingComponent_MakeGrabSurvivorSwingData::CameraDirection' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetingComponent_MakeGrabSurvivorSwingData, TargetSurvivor) == 0x000048, "Member 'K39TentacleTargetingComponent_MakeGrabSurvivorSwingData::TargetSurvivor' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetingComponent_MakeGrabSurvivorSwingData, ReturnValue) == 0x000050, "Member 'K39TentacleTargetingComponent_MakeGrabSurvivorSwingData::ReturnValue' has a wrong offset!");

// Function TheK39.K39TentacleTargetingComponent.MakeInvalidSurfaceSwingData
// 0x00B8 (0x00B8 - 0x0000)
struct K39TentacleTargetingComponent_MakeInvalidSurfaceSwingData final
{
public:
	struct FVector                                IndicatorLocation;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SurfaceNormal;                                     // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraDirection;                                   // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FK39TentacleSwingData                  ReturnValue;                                       // 0x0048(0x0070)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39TentacleTargetingComponent_MakeInvalidSurfaceSwingData) == 0x000008, "Wrong alignment on K39TentacleTargetingComponent_MakeInvalidSurfaceSwingData");
static_assert(sizeof(K39TentacleTargetingComponent_MakeInvalidSurfaceSwingData) == 0x0000B8, "Wrong size on K39TentacleTargetingComponent_MakeInvalidSurfaceSwingData");
static_assert(offsetof(K39TentacleTargetingComponent_MakeInvalidSurfaceSwingData, IndicatorLocation) == 0x000000, "Member 'K39TentacleTargetingComponent_MakeInvalidSurfaceSwingData::IndicatorLocation' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetingComponent_MakeInvalidSurfaceSwingData, SurfaceNormal) == 0x000018, "Member 'K39TentacleTargetingComponent_MakeInvalidSurfaceSwingData::SurfaceNormal' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetingComponent_MakeInvalidSurfaceSwingData, CameraDirection) == 0x000030, "Member 'K39TentacleTargetingComponent_MakeInvalidSurfaceSwingData::CameraDirection' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetingComponent_MakeInvalidSurfaceSwingData, ReturnValue) == 0x000048, "Member 'K39TentacleTargetingComponent_MakeInvalidSurfaceSwingData::ReturnValue' has a wrong offset!");

// Function TheK39.K39TentacleTargetingComponent.MakeInvalidSwingData
// 0x00A0 (0x00A0 - 0x0000)
struct K39TentacleTargetingComponent_MakeInvalidSwingData final
{
public:
	struct FVector                                IndicatorLocation;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraDirection;                                   // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FK39TentacleSwingData                  ReturnValue;                                       // 0x0030(0x0070)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39TentacleTargetingComponent_MakeInvalidSwingData) == 0x000008, "Wrong alignment on K39TentacleTargetingComponent_MakeInvalidSwingData");
static_assert(sizeof(K39TentacleTargetingComponent_MakeInvalidSwingData) == 0x0000A0, "Wrong size on K39TentacleTargetingComponent_MakeInvalidSwingData");
static_assert(offsetof(K39TentacleTargetingComponent_MakeInvalidSwingData, IndicatorLocation) == 0x000000, "Member 'K39TentacleTargetingComponent_MakeInvalidSwingData::IndicatorLocation' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetingComponent_MakeInvalidSwingData, CameraDirection) == 0x000018, "Member 'K39TentacleTargetingComponent_MakeInvalidSwingData::CameraDirection' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetingComponent_MakeInvalidSwingData, ReturnValue) == 0x000030, "Member 'K39TentacleTargetingComponent_MakeInvalidSwingData::ReturnValue' has a wrong offset!");

// Function TheK39.K39TentacleTargetingComponent.MakeValidSwingData
// 0x00D8 (0x00D8 - 0x0000)
struct K39TentacleTargetingComponent_MakeValidSwingData final
{
public:
	struct FVector                                Destination;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SurfaceNormal;                                     // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CollisionPoint;                                    // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraDirection;                                   // 0x0048(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysicalMaterial;                                  // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FK39TentacleSwingData                  ReturnValue;                                       // 0x0068(0x0070)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K39TentacleTargetingComponent_MakeValidSwingData) == 0x000008, "Wrong alignment on K39TentacleTargetingComponent_MakeValidSwingData");
static_assert(sizeof(K39TentacleTargetingComponent_MakeValidSwingData) == 0x0000D8, "Wrong size on K39TentacleTargetingComponent_MakeValidSwingData");
static_assert(offsetof(K39TentacleTargetingComponent_MakeValidSwingData, Destination) == 0x000000, "Member 'K39TentacleTargetingComponent_MakeValidSwingData::Destination' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetingComponent_MakeValidSwingData, SurfaceNormal) == 0x000018, "Member 'K39TentacleTargetingComponent_MakeValidSwingData::SurfaceNormal' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetingComponent_MakeValidSwingData, CollisionPoint) == 0x000030, "Member 'K39TentacleTargetingComponent_MakeValidSwingData::CollisionPoint' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetingComponent_MakeValidSwingData, CameraDirection) == 0x000048, "Member 'K39TentacleTargetingComponent_MakeValidSwingData::CameraDirection' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetingComponent_MakeValidSwingData, PhysicalMaterial) == 0x000060, "Member 'K39TentacleTargetingComponent_MakeValidSwingData::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(K39TentacleTargetingComponent_MakeValidSwingData, ReturnValue) == 0x000068, "Member 'K39TentacleTargetingComponent_MakeValidSwingData::ReturnValue' has a wrong offset!");

// Function TheK39.K39Utilities.IsSurvivorAbleToBeAffectedByPower
// 0x0018 (0x0018 - 0x0000)
struct K39Utilities_IsSurvivorAbleToBeAffectedByPower final
{
public:
	const class ASurvivor*                        Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AKiller*                          Killer;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K39Utilities_IsSurvivorAbleToBeAffectedByPower) == 0x000008, "Wrong alignment on K39Utilities_IsSurvivorAbleToBeAffectedByPower");
static_assert(sizeof(K39Utilities_IsSurvivorAbleToBeAffectedByPower) == 0x000018, "Wrong size on K39Utilities_IsSurvivorAbleToBeAffectedByPower");
static_assert(offsetof(K39Utilities_IsSurvivorAbleToBeAffectedByPower, Survivor) == 0x000000, "Member 'K39Utilities_IsSurvivorAbleToBeAffectedByPower::Survivor' has a wrong offset!");
static_assert(offsetof(K39Utilities_IsSurvivorAbleToBeAffectedByPower, Killer) == 0x000008, "Member 'K39Utilities_IsSurvivorAbleToBeAffectedByPower::Killer' has a wrong offset!");
static_assert(offsetof(K39Utilities_IsSurvivorAbleToBeAffectedByPower, ReturnValue) == 0x000010, "Member 'K39Utilities_IsSurvivorAbleToBeAffectedByPower::ReturnValue' has a wrong offset!");

// Function TheK39.K39VaultInteraction.Cosmetic_OnTentacleGrabDamage
// 0x0010 (0x0010 - 0x0000)
struct K39VaultInteraction_Cosmetic_OnTentacleGrabDamage final
{
public:
	class ASurvivor*                              hitSurvivor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isDowned;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K39VaultInteraction_Cosmetic_OnTentacleGrabDamage) == 0x000008, "Wrong alignment on K39VaultInteraction_Cosmetic_OnTentacleGrabDamage");
static_assert(sizeof(K39VaultInteraction_Cosmetic_OnTentacleGrabDamage) == 0x000010, "Wrong size on K39VaultInteraction_Cosmetic_OnTentacleGrabDamage");
static_assert(offsetof(K39VaultInteraction_Cosmetic_OnTentacleGrabDamage, hitSurvivor) == 0x000000, "Member 'K39VaultInteraction_Cosmetic_OnTentacleGrabDamage::hitSurvivor' has a wrong offset!");
static_assert(offsetof(K39VaultInteraction_Cosmetic_OnTentacleGrabDamage, isDowned) == 0x000008, "Member 'K39VaultInteraction_Cosmetic_OnTentacleGrabDamage::isDowned' has a wrong offset!");

// Function TheK39.K39VaultInteraction.Multicast_DamageWithTentacle
// 0x0018 (0x0018 - 0x0000)
struct K39VaultInteraction_Multicast_DamageWithTentacle final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASurvivor*                              hitSurvivor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isDowned;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K39VaultInteraction_Multicast_DamageWithTentacle) == 0x000008, "Wrong alignment on K39VaultInteraction_Multicast_DamageWithTentacle");
static_assert(sizeof(K39VaultInteraction_Multicast_DamageWithTentacle) == 0x000018, "Wrong size on K39VaultInteraction_Multicast_DamageWithTentacle");
static_assert(offsetof(K39VaultInteraction_Multicast_DamageWithTentacle, Player) == 0x000000, "Member 'K39VaultInteraction_Multicast_DamageWithTentacle::Player' has a wrong offset!");
static_assert(offsetof(K39VaultInteraction_Multicast_DamageWithTentacle, hitSurvivor) == 0x000008, "Member 'K39VaultInteraction_Multicast_DamageWithTentacle::hitSurvivor' has a wrong offset!");
static_assert(offsetof(K39VaultInteraction_Multicast_DamageWithTentacle, isDowned) == 0x000010, "Member 'K39VaultInteraction_Multicast_DamageWithTentacle::isDowned' has a wrong offset!");

}

