#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Calamari

#include "Basic.hpp"

#include "Calamari_classes.hpp"
#include "Calamari_parameters.hpp"


namespace SDK
{

// Function Calamari.SurvivalistTeamSprintBurstSkill.Cosmetic_SprintBurstActivatedOnPlayer
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USurvivalistTeamSprintBurstSkill::Cosmetic_SprintBurstActivatedOnPlayer(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalistTeamSprintBurstSkill", "Cosmetic_SprintBurstActivatedOnPlayer");

	Params::SurvivalistTeamSprintBurstSkill_Cosmetic_SprintBurstActivatedOnPlayer Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.SurvivalistTeamSprintBurstSkill.Multicast_SprintBurstActivated
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USurvivalistTeamSprintBurstSkill::Multicast_SprintBurstActivated(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalistTeamSprintBurstSkill", "Multicast_SprintBurstActivated");

	Params::SurvivalistTeamSprintBurstSkill_Multicast_SprintBurstActivated Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.SurvivorCalamariContaminationInteractionHandlerComponent.OnRep_UseOtherAttacherComponent
// (Final, Native, Private)

void USurvivorCalamariContaminationInteractionHandlerComponent::OnRep_UseOtherAttacherComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorCalamariContaminationInteractionHandlerComponent", "OnRep_UseOtherAttacherComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.SurvivorCalamariContaminationInteractionHandlerComponent.OnRep_UseSelfAttacherComponent
// (Final, Native, Private)

void USurvivorCalamariContaminationInteractionHandlerComponent::OnRep_UseSelfAttacherComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorCalamariContaminationInteractionHandlerComponent", "OnRep_UseSelfAttacherComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.BaseActivatableSkill.Authority_OnIntroCompleted
// (Final, Native, Private)

void UBaseActivatableSkill::Authority_OnIntroCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseActivatableSkill", "Authority_OnIntroCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.BaseActivatableSkill.OnRep_ChargeableTimer
// (Final, Native, Private, Const)

void UBaseActivatableSkill::OnRep_ChargeableTimer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseActivatableSkill", "OnRep_ChargeableTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.TacticianTeamSkill.Cosmetic_OnTacticianActivated
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UTacticianTeamSkill::Cosmetic_OnTacticianActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TacticianTeamSkill", "Cosmetic_OnTacticianActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Calamari.BaseHerb.Authority_OnPlayerInRangeChanged
// (Final, Native, Private)
// Parameters:
// const bool                              inRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABaseHerb::Authority_OnPlayerInRangeChanged(const bool inRange, class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseHerb", "Authority_OnPlayerInRangeChanged");

	Params::BaseHerb_Authority_OnPlayerInRangeChanged Parms{};

	Parms.inRange = inRange;
	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.BaseHerb.Cosmetic_OnHerbUse
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABaseHerb::Cosmetic_OnHerbUse(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseHerb", "Cosmetic_OnHerbUse");

	Params::BaseHerb_Cosmetic_OnHerbUse Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.BaseHerb.Cosmetic_OnPlayerInRangeChanged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              inRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ADBDPlayer*                 Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABaseHerb::Cosmetic_OnPlayerInRangeChanged(const bool inRange, const class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseHerb", "Cosmetic_OnPlayerInRangeChanged");

	Params::BaseHerb_Cosmetic_OnPlayerInRangeChanged Parms{};

	Parms.inRange = inRange;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.BaseHerb.Multicast_OnPlayerInRangeOfHerb
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// const bool                              inRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ADBDPlayer*                 Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABaseHerb::Multicast_OnPlayerInRangeOfHerb(const bool inRange, const class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseHerb", "Multicast_OnPlayerInRangeOfHerb");

	Params::BaseHerb_Multicast_OnPlayerInRangeOfHerb Parms{};

	Parms.inRange = inRange;
	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.BaseHerb.OnRep_PlayerUsedHerb
// (Final, Native, Private)

void ABaseHerb::OnRep_PlayerUsedHerb()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseHerb", "OnRep_PlayerUsedHerb");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.AssassinSurvivorCosmeticHelperActor.Cosmetic_OnSurvivorMarkChanged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsMarked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAssassinSurvivorCosmeticHelperActor::Cosmetic_OnSurvivorMarkChanged(bool IsMarked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssassinSurvivorCosmeticHelperActor", "Cosmetic_OnSurvivorMarkChanged");

	Params::AssassinSurvivorCosmeticHelperActor_Cosmetic_OnSurvivorMarkChanged Parms{};

	Parms.IsMarked = IsMarked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.CalamariCage.Cosmetic_OnGoingUpFinished
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              isAnticampRelocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASurvivor*                  cagedSurvivor                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACalamariCage::Cosmetic_OnGoingUpFinished(const bool isAnticampRelocation, const class ASurvivor* cagedSurvivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCage", "Cosmetic_OnGoingUpFinished");

	Params::CalamariCage_Cosmetic_OnGoingUpFinished Parms{};

	Parms.isAnticampRelocation = isAnticampRelocation;
	Parms.cagedSurvivor = cagedSurvivor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.CalamariCage.OnSurvivorDeath
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class ASurvivor*                  cagedSurvivor                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACalamariCage::OnSurvivorDeath(const class ASurvivor* cagedSurvivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCage", "OnSurvivorDeath");

	Params::CalamariCage_OnSurvivorDeath Parms{};

	Parms.cagedSurvivor = cagedSurvivor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.CalamariCageEntity.Authority_OnPickedUpEnded
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       picker                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACalamariCageEntity::Authority_OnPickedUpEnded(class ADBDPlayer* picker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCageEntity", "Authority_OnPickedUpEnded");

	Params::CalamariCageEntity_Authority_OnPickedUpEnded Parms{};

	Parms.picker = picker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.CalamariCageEntity.Cosmetic_OnEntityFinishedGoingUp
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    wasSentToCage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACalamariCageEntity::Cosmetic_OnEntityFinishedGoingUp(bool wasSentToCage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCageEntity", "Cosmetic_OnEntityFinishedGoingUp");

	Params::CalamariCageEntity_Cosmetic_OnEntityFinishedGoingUp Parms{};

	Parms.wasSentToCage = wasSentToCage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.CalamariCageEntity.Cosmetic_OnEntityHookCancelled
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// class ASurvivor*                        Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACalamariCageEntity::Cosmetic_OnEntityHookCancelled(class ASurvivor* Survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCageEntity", "Cosmetic_OnEntityHookCancelled");

	Params::CalamariCageEntity_Cosmetic_OnEntityHookCancelled Parms{};

	Parms.Survivor = Survivor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.CalamariCageEntity.Cosmetic_OnEntitySpawned
// (BlueprintCosmetic, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   portalLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACalamariCageEntity::Cosmetic_OnEntitySpawned(const struct FVector& portalLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCageEntity", "Cosmetic_OnEntitySpawned");

	Params::CalamariCageEntity_Cosmetic_OnEntitySpawned Parms{};

	Parms.portalLocation = std::move(portalLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.CalamariCageEntity.Cosmetic_OnSurvivorHooked
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void ACalamariCageEntity::Cosmetic_OnSurvivorHooked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCageEntity", "Cosmetic_OnSurvivorHooked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Calamari.CalamariCageEntity.Cosmetic_OnSurvivorSentToCage
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// class ASurvivor*                        cagedSurvivor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACalamariCageEntity::Cosmetic_OnSurvivorSentToCage(class ASurvivor* cagedSurvivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCageEntity", "Cosmetic_OnSurvivorSentToCage");

	Params::CalamariCageEntity_Cosmetic_OnSurvivorSentToCage Parms{};

	Parms.cagedSurvivor = cagedSurvivor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.CalamariCageEntity.Multicast_CancelHook
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void ACalamariCageEntity::Multicast_CancelHook()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCageEntity", "Multicast_CancelHook");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.CalamariCageEntity.Multicast_SpawnEntity
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class ASurvivor*                        Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AKiller*                          Killer                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             pickupDuration                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACalamariCageEntity::Multicast_SpawnEntity(class ASurvivor* Survivor, class AKiller* Killer, const float pickupDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCageEntity", "Multicast_SpawnEntity");

	Params::CalamariCageEntity_Multicast_SpawnEntity Parms{};

	Parms.Survivor = Survivor;
	Parms.Killer = Killer;
	Parms.pickupDuration = pickupDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.CalamariCageEntity.OnRep_SendToCagePickupDelayTimer
// (Final, Native, Private)

void ACalamariCageEntity::OnRep_SendToCagePickupDelayTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCageEntity", "OnRep_SendToCagePickupDelayTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.CalamariCageEntity.SetEntityVisibility
// (Final, Native, Protected, BlueprintCallable, Const)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACalamariCageEntity::SetEntityVisibility(bool IsVisible) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCageEntity", "SetEntityVisibility");

	Params::CalamariCageEntity_SetEntityVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.CalamariCageEntityComponent.Multicast_OnAuthorityFailedToAcquireCage
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ADBDPlayer*                       Killer                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCalamariCageEntityComponent::Multicast_OnAuthorityFailedToAcquireCage(class ADBDPlayer* Killer, class ADBDPlayer* Survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCageEntityComponent", "Multicast_OnAuthorityFailedToAcquireCage");

	Params::CalamariCageEntityComponent_Multicast_OnAuthorityFailedToAcquireCage Parms{};

	Parms.Killer = Killer;
	Parms.Survivor = Survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.CalamariCheatComponent.DBD_ClearClassAbilityCooldown
// (Final, Exec, Native, Public)

void UCalamariCheatComponent::DBD_ClearClassAbilityCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCheatComponent", "DBD_ClearClassAbilityCooldown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.CalamariCheatComponent.DBD_UnlockAllSkills
// (Final, Exec, Native, Public)

void UCalamariCheatComponent::DBD_UnlockAllSkills()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalamariCheatComponent", "DBD_UnlockAllSkills");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.GeneratorChargeSpeedCatchUpEffect.Authority_OnGeneratorActivated
// (Final, Native, Private)
// Parameters:
// bool                                    isAutoCompleted                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeneratorChargeSpeedCatchUpEffect::Authority_OnGeneratorActivated(bool isAutoCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GeneratorChargeSpeedCatchUpEffect", "Authority_OnGeneratorActivated");

	Params::GeneratorChargeSpeedCatchUpEffect_Authority_OnGeneratorActivated Parms{};

	Parms.isAutoCompleted = isAutoCompleted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.MeatShieldAbilityInteraction.Cosmetic_OnImpact
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMeatShieldAbilityInteraction::Cosmetic_OnImpact(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeatShieldAbilityInteraction", "Cosmetic_OnImpact");

	Params::MeatShieldAbilityInteraction_Cosmetic_OnImpact Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.MeatShieldAbilityInteraction.Multicast_StunActor
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class AActor*                           stunnableActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMeatShieldAbilityInteraction::Multicast_StunActor(class AActor* stunnableActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeatShieldAbilityInteraction", "Multicast_StunActor");

	Params::MeatShieldAbilityInteraction_Multicast_StunActor Parms{};

	Parms.stunnableActor = stunnableActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.MeatShieldAbilityInteraction.OnComponentHit
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMeatShieldAbilityInteraction::OnComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeatShieldAbilityInteraction", "OnComponentHit");

	Params::MeatShieldAbilityInteraction_OnComponentHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.MeatShieldAbilityInteraction.OnComponentOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMeatShieldAbilityInteraction::OnComponentOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeatShieldAbilityInteraction", "OnComponentOverlap");

	Params::MeatShieldAbilityInteraction_OnComponentOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.SurvivorClassCosmeticHelperActor.Cosmetic_OnSkillActivated
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void ASurvivorClassCosmeticHelperActor::Cosmetic_OnSkillActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorClassCosmeticHelperActor", "Cosmetic_OnSkillActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Calamari.SurvivorClassCosmeticHelperActor.Cosmetic_OnSkillActivationEnd
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void ASurvivorClassCosmeticHelperActor::Cosmetic_OnSkillActivationEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorClassCosmeticHelperActor", "Cosmetic_OnSkillActivationEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Calamari.SurvivorClassCosmeticHelperActor.Cosmetic_OnSurvivorCaged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void ASurvivorClassCosmeticHelperActor::Cosmetic_OnSurvivorCaged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorClassCosmeticHelperActor", "Cosmetic_OnSurvivorCaged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Calamari.SurvivorClassCosmeticHelperActor.Cosmetic_OnSurvivorDamageStateChanged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// EHealthState                            newState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASurvivorClassCosmeticHelperActor::Cosmetic_OnSurvivorDamageStateChanged(EHealthState newState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorClassCosmeticHelperActor", "Cosmetic_OnSurvivorDamageStateChanged");

	Params::SurvivorClassCosmeticHelperActor_Cosmetic_OnSurvivorDamageStateChanged Parms{};

	Parms.newState = newState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.SurvivorClassCosmeticHelperActor.Cosmetic_OnSurvivorUnhooked
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void ASurvivorClassCosmeticHelperActor::Cosmetic_OnSurvivorUnhooked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorClassCosmeticHelperActor", "Cosmetic_OnSurvivorUnhooked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Calamari.SurvivorClassCosmeticHelperActor.OnSurvivorDamageStateChanged
// (Final, Native, Private)
// Parameters:
// const EHealthState                      oldState                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EHealthState                      newState                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASurvivorClassCosmeticHelperActor::OnSurvivorDamageStateChanged(const EHealthState oldState, const EHealthState newState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorClassCosmeticHelperActor", "OnSurvivorDamageStateChanged");

	Params::SurvivorClassCosmeticHelperActor_OnSurvivorDamageStateChanged Parms{};

	Parms.oldState = oldState;
	Parms.newState = newState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.MedicSurvivorCosmeticHelperActor.Cosmetic_VitalityHealedPlayer
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       healedPlayer                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMedicSurvivorCosmeticHelperActor::Cosmetic_VitalityHealedPlayer(class ADBDPlayer* healedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicSurvivorCosmeticHelperActor", "Cosmetic_VitalityHealedPlayer");

	Params::MedicSurvivorCosmeticHelperActor_Cosmetic_VitalityHealedPlayer Parms{};

	Parms.healedPlayer = healedPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.MedicTeamSkill.Cosmetic_VitalityHealedPlayer
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       healedPlayer                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMedicTeamSkill::Cosmetic_VitalityHealedPlayer(class ADBDPlayer* healedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicTeamSkill", "Cosmetic_VitalityHealedPlayer");

	Params::MedicTeamSkill_Cosmetic_VitalityHealedPlayer Parms{};

	Parms.healedPlayer = healedPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.MedicTeamSkill.Cosmetic_VitalitySkillActivated
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UMedicTeamSkill::Cosmetic_VitalitySkillActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MedicTeamSkill", "Cosmetic_VitalitySkillActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Calamari.PhantomSightManager.Multicast_OnPlayerSeesPhantom
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ASurvivor*                        Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhantomSightManager::Multicast_OnPlayerSeesPhantom(class ASurvivor* Survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhantomSightManager", "Multicast_OnPlayerSeesPhantom");

	Params::PhantomSightManager_Multicast_OnPlayerSeesPhantom Parms{};

	Parms.Survivor = Survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.RevealGeneratorsClosestToEachOtherSkill.OnIntroCompleted
// (Final, Native, Private)

void URevealGeneratorsClosestToEachOtherSkill::OnIntroCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RevealGeneratorsClosestToEachOtherSkill", "OnIntroCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.RevealGeneratorsClosestToEachOtherSkill.OnRep_RevealedGenerators
// (Final, Native, Private)
// Parameters:
// const TArray<class AGenerator*>&        oldRevealedGenerators                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void URevealGeneratorsClosestToEachOtherSkill::OnRep_RevealedGenerators(const TArray<class AGenerator*>& oldRevealedGenerators)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RevealGeneratorsClosestToEachOtherSkill", "OnRep_RevealedGenerators");

	Params::RevealGeneratorsClosestToEachOtherSkill_OnRep_RevealedGenerators Parms{};

	Parms.oldRevealedGenerators = std::move(oldRevealedGenerators);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.ScoutAbilityInteraction.OnPalletBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UScoutAbilityInteraction::OnPalletBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoutAbilityInteraction", "OnPalletBeginOverlap");

	Params::ScoutAbilityInteraction_OnPalletBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.ScoutAbilityInteraction.OnPalletEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScoutAbilityInteraction::OnPalletEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoutAbilityInteraction", "OnPalletEndOverlap");

	Params::ScoutAbilityInteraction_OnPalletEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Calamari.ScoutSurvivorCosmeticHelperActor.Cosmetic_ScoutTeamSkillActivated
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class APallet*                          Pallet                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AScoutSurvivorCosmeticHelperActor::Cosmetic_ScoutTeamSkillActivated(class APallet* Pallet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoutSurvivorCosmeticHelperActor", "Cosmetic_ScoutTeamSkillActivated");

	Params::ScoutSurvivorCosmeticHelperActor_Cosmetic_ScoutTeamSkillActivated Parms{};

	Parms.Pallet = Pallet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Calamari.SendToCalamariCageInteraction.Cosmetic_BeginSendToCage
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ASurvivor*                        survivorBeingSent                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USendToCalamariCageInteraction::Cosmetic_BeginSendToCage(class ASurvivor* survivorBeingSent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SendToCalamariCageInteraction", "Cosmetic_BeginSendToCage");

	Params::SendToCalamariCageInteraction_Cosmetic_BeginSendToCage Parms{};

	Parms.survivorBeingSent = survivorBeingSent;

	UObject::ProcessEvent(Func, &Parms);
}

}

