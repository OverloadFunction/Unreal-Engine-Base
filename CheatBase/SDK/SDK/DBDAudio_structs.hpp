#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDAudio

#include "Basic.hpp"

#include "AkAudio_structs.hpp"


namespace SDK
{

// Enum DBDAudio.EDBDAudioLanguage
// NumValues: 0x0005
enum class EDBDAudioLanguage : uint8
{
	None                                     = 0,
	English                                  = 1,
	French                                   = 2,
	Japanese                                 = 3,
	EDBDAudioLanguage_MAX                    = 4,
};

// Enum DBDAudio.EDBDAudioStateGroup
// NumValues: 0x0006
enum class EDBDAudioStateGroup : uint8
{
	None                                     = 0,
	StreamerMode                             = 1,
	GameType                                 = 2,
	Weather                                  = 3,
	Theme                                    = 4,
	EDBDAudioStateGroup_MAX                  = 5,
};

// ScriptStruct DBDAudio.DBDAudioLanguageSetting
// 0x0018 (0x0018 - 0x0000)
struct FDBDAudioLanguageSetting final
{
public:
	EDBDAudioLanguage                             Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WwiseType;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDBDAudioLanguageSetting) == 0x000008, "Wrong alignment on FDBDAudioLanguageSetting");
static_assert(sizeof(FDBDAudioLanguageSetting) == 0x000018, "Wrong size on FDBDAudioLanguageSetting");
static_assert(offsetof(FDBDAudioLanguageSetting, Type) == 0x000000, "Member 'FDBDAudioLanguageSetting::Type' has a wrong offset!");
static_assert(offsetof(FDBDAudioLanguageSetting, WwiseType) == 0x000008, "Member 'FDBDAudioLanguageSetting::WwiseType' has a wrong offset!");

// ScriptStruct DBDAudio.AkSoundLoop
// 0x0028 (0x0028 - 0x0000)
struct FAkSoundLoop
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          _startEvent;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          _endEvent;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAkSoundLoop) == 0x000008, "Wrong alignment on FAkSoundLoop");
static_assert(sizeof(FAkSoundLoop) == 0x000028, "Wrong size on FAkSoundLoop");
static_assert(offsetof(FAkSoundLoop, _startEvent) == 0x000008, "Member 'FAkSoundLoop::_startEvent' has a wrong offset!");
static_assert(offsetof(FAkSoundLoop, _endEvent) == 0x000010, "Member 'FAkSoundLoop::_endEvent' has a wrong offset!");

// ScriptStruct DBDAudio.AudioEventReference
// 0x0040 (0x0040 - 0x0000)
struct FAudioEventReference final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           SoftPtr;                                           // 0x0000(0x0038)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          Event;                                             // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioEventReference) == 0x000008, "Wrong alignment on FAudioEventReference");
static_assert(sizeof(FAudioEventReference) == 0x000040, "Wrong size on FAudioEventReference");
static_assert(offsetof(FAudioEventReference, SoftPtr) == 0x000000, "Member 'FAudioEventReference::SoftPtr' has a wrong offset!");
static_assert(offsetof(FAudioEventReference, Event) == 0x000038, "Member 'FAudioEventReference::Event' has a wrong offset!");

// ScriptStruct DBDAudio.DBDAudioStateGroupSettings
// 0x0018 (0x0018 - 0x0000)
struct FDBDAudioStateGroupSettings final
{
public:
	EDBDAudioStateGroup                           Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WwiseType;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDBDAudioStateGroupSettings) == 0x000008, "Wrong alignment on FDBDAudioStateGroupSettings");
static_assert(sizeof(FDBDAudioStateGroupSettings) == 0x000018, "Wrong size on FDBDAudioStateGroupSettings");
static_assert(offsetof(FDBDAudioStateGroupSettings, Type) == 0x000000, "Member 'FDBDAudioStateGroupSettings::Type' has a wrong offset!");
static_assert(offsetof(FDBDAudioStateGroupSettings, WwiseType) == 0x000008, "Member 'FDBDAudioStateGroupSettings::WwiseType' has a wrong offset!");

// ScriptStruct DBDAudio.BankTrackingData
// 0x0038 (0x0038 - 0x0000)
struct FBankTrackingData final
{
public:
	class UAkAudioBank*                           Bank;                                              // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TDelegate<void(EAkResult Result)>>     OnLoadedCallbacks;                                 // 0x0008(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x20];                                      // 0x0018(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBankTrackingData) == 0x000008, "Wrong alignment on FBankTrackingData");
static_assert(sizeof(FBankTrackingData) == 0x000038, "Wrong size on FBankTrackingData");
static_assert(offsetof(FBankTrackingData, Bank) == 0x000000, "Member 'FBankTrackingData::Bank' has a wrong offset!");
static_assert(offsetof(FBankTrackingData, OnLoadedCallbacks) == 0x000008, "Member 'FBankTrackingData::OnLoadedCallbacks' has a wrong offset!");

}

