#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK38

#include "Basic.hpp"

#include "DataTableUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum TheK38.EK38DogDashAimStatus
// NumValues: 0x0005
enum class EK38DogDashAimStatus : uint8
{
	Unobstructed                             = 0,
	Obstructed                               = 1,
	LeapOverWindow                           = 2,
	LeapOverPallet                           = 3,
	EK38DogDashAimStatus_MAX                 = 4,
};

// Enum TheK38.EK38DogDashAimBlockerType
// NumValues: 0x0005
enum class EK38DogDashAimBlockerType : uint8
{
	None                                     = 0,
	Geometry                                 = 1,
	WindowVault                              = 2,
	PalletVault                              = 3,
	EK38DogDashAimBlockerType_MAX            = 4,
};

// Enum TheK38.EDogCompanionAbilityAimMode
// NumValues: 0x0003
enum class EDogCompanionAbilityAimMode : uint8
{
	Patrol                                   = 0,
	Dash                                     = 1,
	EDogCompanionAbilityAimMode_MAX          = 2,
};

// Enum TheK38.EK38FollowKillerSpots
// NumValues: 0x0006
enum class EK38FollowKillerSpots : uint8
{
	FOLLOW_KILLER_CENTER                     = 0,
	FOLLOW_KILLER_FRONT                      = 1,
	FOLLOW_KILLER_LEFT                       = 2,
	FOLLOW_KILLER_RIGHT                      = 3,
	FOLLOW_KILLER_BEHIND                     = 4,
	FOLLOW_KILLER_MAX                        = 5,
};

// Enum TheK38.EK38DogTeleportReasons
// NumValues: 0x000A
enum class EK38DogTeleportReasons : uint8
{
	DOG_TELEPORT_REASON_STUCK                = 0,
	DOG_TELEPORT_REASON_PASSAGE              = 1,
	DOG_TELEPORT_REASON_FALL_THROUGH_MAP     = 2,
	DOG_MANUALLY_HIDDEN_BY_GAME_EVENT        = 3,
	DOG_TELEPORT_REASON_INITIAL_SPAWN        = 4,
	DOG_IS_IN_PARADISE                       = 5,
	UNKNOWN                                  = 6,
	DOG_TELEPORT_REASON_MORI                 = 7,
	DOG_TELEPORT_DASH_CORRECTION             = 8,
	EK38DogTeleportReasons_MAX               = 9,
};

// ScriptStruct TheK38.DogDashAimingData
// 0x0014 (0x0014 - 0x0000)
struct FDogDashAimingData final
{
public:
	float                                         _timeStep;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _perchRadiusThreshold;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _maxSimulationStep;                                // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _maxTimeToSimulate;                                // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _allowedWindowVaultHeightDelta;                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDogDashAimingData) == 0x000004, "Wrong alignment on FDogDashAimingData");
static_assert(sizeof(FDogDashAimingData) == 0x000014, "Wrong size on FDogDashAimingData");
static_assert(offsetof(FDogDashAimingData, _timeStep) == 0x000000, "Member 'FDogDashAimingData::_timeStep' has a wrong offset!");
static_assert(offsetof(FDogDashAimingData, _perchRadiusThreshold) == 0x000004, "Member 'FDogDashAimingData::_perchRadiusThreshold' has a wrong offset!");
static_assert(offsetof(FDogDashAimingData, _maxSimulationStep) == 0x000008, "Member 'FDogDashAimingData::_maxSimulationStep' has a wrong offset!");
static_assert(offsetof(FDogDashAimingData, _maxTimeToSimulate) == 0x00000C, "Member 'FDogDashAimingData::_maxTimeToSimulate' has a wrong offset!");
static_assert(offsetof(FDogDashAimingData, _allowedWindowVaultHeightDelta) == 0x000010, "Member 'FDogDashAimingData::_allowedWindowVaultHeightDelta' has a wrong offset!");

// ScriptStruct TheK38.DogVaultingSetup
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FDogVaultingSetup final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDogVaultingSetup) == 0x000008, "Wrong alignment on FDogVaultingSetup");
static_assert(sizeof(FDogVaultingSetup) == 0x000060, "Wrong size on FDogVaultingSetup");

// ScriptStruct TheK38.K38DogMovementTunables
// 0x0400 (0x0400 - 0x0000)
struct alignas(0x08) FK38DogMovementTunables final
{
public:
	uint8                                         Pad_0[0x400];                                      // 0x0000(0x0400)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FK38DogMovementTunables) == 0x000008, "Wrong alignment on FK38DogMovementTunables");
static_assert(sizeof(FK38DogMovementTunables) == 0x000400, "Wrong size on FK38DogMovementTunables");

// ScriptStruct TheK38.K38SlipStreamData
// 0x0040 (0x0040 - 0x0000)
struct FK38SlipStreamData final
{
public:
	bool                                          _slipStreamEnabled;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _slipStreamPoints;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _slipStreamPercentage;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _maxSlipStreamPoints;                              // 0x0010(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	bool                                          _slipStreamBonusSpeedActive;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FK38SlipStreamData) == 0x000008, "Wrong alignment on FK38SlipStreamData");
static_assert(sizeof(FK38SlipStreamData) == 0x000040, "Wrong size on FK38SlipStreamData");
static_assert(offsetof(FK38SlipStreamData, _slipStreamEnabled) == 0x000000, "Member 'FK38SlipStreamData::_slipStreamEnabled' has a wrong offset!");
static_assert(offsetof(FK38SlipStreamData, _slipStreamPoints) == 0x000004, "Member 'FK38SlipStreamData::_slipStreamPoints' has a wrong offset!");
static_assert(offsetof(FK38SlipStreamData, _slipStreamPercentage) == 0x000008, "Member 'FK38SlipStreamData::_slipStreamPercentage' has a wrong offset!");
static_assert(offsetof(FK38SlipStreamData, _maxSlipStreamPoints) == 0x000010, "Member 'FK38SlipStreamData::_maxSlipStreamPoints' has a wrong offset!");
static_assert(offsetof(FK38SlipStreamData, _slipStreamBonusSpeedActive) == 0x000038, "Member 'FK38SlipStreamData::_slipStreamBonusSpeedActive' has a wrong offset!");

// ScriptStruct TheK38.K38DogMeshLinkerData
// 0x0078 (0x0078 - 0x0000)
struct FK38DogMeshLinkerData final
{
public:
	TSubclassOf<class AK38Dog>                    DogClass;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           DogMesh;                                           // 0x0008(0x0038)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       DogFaceAdditive;                                   // 0x0040(0x0038)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK38DogMeshLinkerData) == 0x000008, "Wrong alignment on FK38DogMeshLinkerData");
static_assert(sizeof(FK38DogMeshLinkerData) == 0x000078, "Wrong size on FK38DogMeshLinkerData");
static_assert(offsetof(FK38DogMeshLinkerData, DogClass) == 0x000000, "Member 'FK38DogMeshLinkerData::DogClass' has a wrong offset!");
static_assert(offsetof(FK38DogMeshLinkerData, DogMesh) == 0x000008, "Member 'FK38DogMeshLinkerData::DogMesh' has a wrong offset!");
static_assert(offsetof(FK38DogMeshLinkerData, DogFaceAdditive) == 0x000040, "Member 'FK38DogMeshLinkerData::DogFaceAdditive' has a wrong offset!");

// ScriptStruct TheK38.K38AimAssistObjectiveInfo
// 0x0028 (0x0028 - 0x0000)
struct FK38AimAssistObjectiveInfo final
{
public:
	class UClass*                                 _objectClass;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _snapOffset;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _indicatorFloatingHeight;                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FK38AimAssistObjectiveInfo) == 0x000008, "Wrong alignment on FK38AimAssistObjectiveInfo");
static_assert(sizeof(FK38AimAssistObjectiveInfo) == 0x000028, "Wrong size on FK38AimAssistObjectiveInfo");
static_assert(offsetof(FK38AimAssistObjectiveInfo, _objectClass) == 0x000000, "Member 'FK38AimAssistObjectiveInfo::_objectClass' has a wrong offset!");
static_assert(offsetof(FK38AimAssistObjectiveInfo, _snapOffset) == 0x000008, "Member 'FK38AimAssistObjectiveInfo::_snapOffset' has a wrong offset!");
static_assert(offsetof(FK38AimAssistObjectiveInfo, _indicatorFloatingHeight) == 0x000020, "Member 'FK38AimAssistObjectiveInfo::_indicatorFloatingHeight' has a wrong offset!");

// ScriptStruct TheK38.SurvivorRangeRevealed
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FSurvivorRangeRevealed final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSurvivorRangeRevealed) == 0x000008, "Wrong alignment on FSurvivorRangeRevealed");
static_assert(sizeof(FSurvivorRangeRevealed) == 0x000028, "Wrong size on FSurvivorRangeRevealed");

}

