#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SnowmanWinterEvent

#include "Basic.hpp"

#include "SnowmanWinterEvent_classes.hpp"
#include "SnowmanWinterEvent_parameters.hpp"


namespace SDK
{

// Function SnowmanWinterEvent.HideInSnowmanInteraction.Multicast_StartControllingSnowman
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHideInSnowmanInteraction::Multicast_StartControllingSnowman(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HideInSnowmanInteraction", "Multicast_StartControllingSnowman");

	Params::HideInSnowmanInteraction_Multicast_StartControllingSnowman Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.HideInSnowmanInteraction.Multicast_StopControllingSnowman
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHideInSnowmanInteraction::Multicast_StopControllingSnowman(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HideInSnowmanInteraction", "Multicast_StopControllingSnowman");

	Params::HideInSnowmanInteraction_Multicast_StopControllingSnowman Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.SnowballProjectile.Cosmetic_OnCollisionHit
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           hitActor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FImpactInfo&               ImpactInfo                                             (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASnowballProjectile::Cosmetic_OnCollisionHit(class AActor* hitActor, const struct FImpactInfo& ImpactInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowballProjectile", "Cosmetic_OnCollisionHit");

	Params::SnowballProjectile_Cosmetic_OnCollisionHit Parms{};

	Parms.hitActor = hitActor;
	Parms.ImpactInfo = std::move(ImpactInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.SnowballProjectile.Cosmetic_OnPlayerHit
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       hitPlayer                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FImpactInfo&               ImpactInfo                                             (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASnowballProjectile::Cosmetic_OnPlayerHit(class ADBDPlayer* hitPlayer, const struct FImpactInfo& ImpactInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowballProjectile", "Cosmetic_OnPlayerHit");

	Params::SnowballProjectile_Cosmetic_OnPlayerHit Parms{};

	Parms.hitPlayer = hitPlayer;
	Parms.ImpactInfo = std::move(ImpactInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.SnowballProjectile.Cosmetic_OnSnowballThrown
// (BlueprintCosmetic, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   launchDirection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   launchSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowballProjectile::Cosmetic_OnSnowballThrown(const struct FVector& launchDirection, float launchSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowballProjectile", "Cosmetic_OnSnowballThrown");

	Params::SnowballProjectile_Cosmetic_OnSnowballThrown Parms{};

	Parms.launchDirection = std::move(launchDirection);
	Parms.launchSpeed = launchSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.SnowballProjectile.OnCollisionComponentHit
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComponent                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASnowballProjectile::OnCollisionComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& NormalImpulse, const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowballProjectile", "OnCollisionComponentHit");

	Params::SnowballProjectile_OnCollisionComponentHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComponent = OtherComponent;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.SnowballProjectile.OnPlayerDetectorHit
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASnowballProjectile::OnPlayerDetectorHit(class UPrimitiveComponent* PrimitiveComponent, const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowballProjectile", "OnPlayerDetectorHit");

	Params::SnowballProjectile_OnPlayerDetectorHit Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.SnowmanBase.Cosmetic_SetSnowmanMaterialVariant
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             materialVariantIndex                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowmanBase::Cosmetic_SetSnowmanMaterialVariant(const int32 materialVariantIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowmanBase", "Cosmetic_SetSnowmanMaterialVariant");

	Params::SnowmanBase_Cosmetic_SetSnowmanMaterialVariant Parms{};

	Parms.materialVariantIndex = materialVariantIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.SnowmanBase.OnRep_IsAcquiredFromPool
// (Final, Native, Private)

void ASnowmanBase::OnRep_IsAcquiredFromPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowmanBase", "OnRep_IsAcquiredFromPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.SnowmanBase.OnRep_IsHidden
// (Final, Native, Private)

void ASnowmanBase::OnRep_IsHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowmanBase", "OnRep_IsHidden");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.SnowmanBase.OnRep_MaterialVariantIndex
// (Final, Native, Private)

void ASnowmanBase::OnRep_MaterialVariantIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowmanBase", "OnRep_MaterialVariantIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.SnowmanBase.OnRep_SpawnData
// (Final, Native, Private)

void ASnowmanBase::OnRep_SpawnData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowmanBase", "OnRep_SpawnData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.Authority_OnSnowmanHandOverlapBegin
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASnowman::Authority_OnSnowmanHandOverlapBegin(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Authority_OnSnowmanHandOverlapBegin");

	Params::Snowman_Authority_OnSnowmanHandOverlapBegin Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.Authority_OnSnowmanHandOverlapEnd
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Authority_OnSnowmanHandOverlapEnd(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Authority_OnSnowmanHandOverlapEnd");

	Params::Snowman_Authority_OnSnowmanHandOverlapEnd Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnAdditionalActorHidden
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           actorToHide                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Cosmetic_OnAdditionalActorHidden(class AActor* actorToHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnAdditionalActorHidden");

	Params::Snowman_Cosmetic_OnAdditionalActorHidden Parms{};

	Parms.actorToHide = actorToHide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForKiller
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AKiller*                          killerAttackingSnowman                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForKiller(class AKiller* killerAttackingSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForKiller");

	Params::Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForKiller Parms{};

	Parms.killerAttackingSnowman = killerAttackingSnowman;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForSurvivor
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ASurvivor*                        survivorUsingSnowman                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForSurvivor(class ASurvivor* survivorUsingSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForSurvivor");

	Params::Snowman_Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForSurvivor Parms{};

	Parms.survivorUsingSnowman = survivorUsingSnowman;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnKillerFinishTransitionOutOfSnowman
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// const class AKiller*                    Killer                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Cosmetic_OnKillerFinishTransitionOutOfSnowman(const class AKiller* Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnKillerFinishTransitionOutOfSnowman");

	Params::Snowman_Cosmetic_OnKillerFinishTransitionOutOfSnowman Parms{};

	Parms.Killer = Killer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanDestroyedByAttackWhileControlled
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ASurvivor*                        survivorUsingSnowman                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AKiller*                          killerAttackingSnowman                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Cosmetic_OnSnowmanDestroyedByAttackWhileControlled(class ASurvivor* survivorUsingSnowman, class AKiller* killerAttackingSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnSnowmanDestroyedByAttackWhileControlled");

	Params::Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileControlled Parms{};

	Parms.survivorUsingSnowman = survivorUsingSnowman;
	Parms.killerAttackingSnowman = killerAttackingSnowman;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanDestroyedByAttackWhileEmpty
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AKiller*                          killerAttackingSnowman                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Cosmetic_OnSnowmanDestroyedByAttackWhileEmpty(class AKiller* killerAttackingSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnSnowmanDestroyedByAttackWhileEmpty");

	Params::Snowman_Cosmetic_OnSnowmanDestroyedByAttackWhileEmpty Parms{};

	Parms.killerAttackingSnowman = killerAttackingSnowman;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanDestroyedByKillerAttackExit
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AKiller*                          killerUsingSnowman                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Cosmetic_OnSnowmanDestroyedByKillerAttackExit(class AKiller* killerUsingSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnSnowmanDestroyedByKillerAttackExit");

	Params::Snowman_Cosmetic_OnSnowmanDestroyedByKillerAttackExit Parms{};

	Parms.killerUsingSnowman = killerUsingSnowman;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanDestroyedByKillerCancelExit
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void ASnowman::Cosmetic_OnSnowmanDestroyedByKillerCancelExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnSnowmanDestroyedByKillerCancelExit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileControlled
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       playerUsingThisSnowman                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileControlled(class ADBDPlayer* playerUsingThisSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileControlled");

	Params::Snowman_Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileControlled Parms{};

	Parms.playerUsingThisSnowman = playerUsingThisSnowman;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileEmpty
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void ASnowman::Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileEmpty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileEmpty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanDestroyedBySurvivorRunExit
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ASurvivor*                        survivorUsingSnowman                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Cosmetic_OnSnowmanDestroyedBySurvivorRunExit(class ASurvivor* survivorUsingSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnSnowmanDestroyedBySurvivorRunExit");

	Params::Snowman_Cosmetic_OnSnowmanDestroyedBySurvivorRunExit Parms{};

	Parms.survivorUsingSnowman = survivorUsingSnowman;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanHighFive
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ASnowman*                         otherSnowman                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Cosmetic_OnSnowmanHighFive(class ASnowman* otherSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnSnowmanHighFive");

	Params::Snowman_Cosmetic_OnSnowmanHighFive Parms{};

	Parms.otherSnowman = otherSnowman;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanSpawned
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void ASnowman::Cosmetic_OnSnowmanSpawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnSnowmanSpawned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanStartBeingControlledByKiller
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AKiller*                          killerUsingSnowman                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Cosmetic_OnSnowmanStartBeingControlledByKiller(class AKiller* killerUsingSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnSnowmanStartBeingControlledByKiller");

	Params::Snowman_Cosmetic_OnSnowmanStartBeingControlledByKiller Parms{};

	Parms.killerUsingSnowman = killerUsingSnowman;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanStartBeingControlledBySurvivor
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ASurvivor*                        survivorUsingSnowman                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Cosmetic_OnSnowmanStartBeingControlledBySurvivor(class ASurvivor* survivorUsingSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnSnowmanStartBeingControlledBySurvivor");

	Params::Snowman_Cosmetic_OnSnowmanStartBeingControlledBySurvivor Parms{};

	Parms.survivorUsingSnowman = survivorUsingSnowman;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanStartBeingUsedByKiller
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AKiller*                          killerUsingSnowman                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Cosmetic_OnSnowmanStartBeingUsedByKiller(class AKiller* killerUsingSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnSnowmanStartBeingUsedByKiller");

	Params::Snowman_Cosmetic_OnSnowmanStartBeingUsedByKiller Parms{};

	Parms.killerUsingSnowman = killerUsingSnowman;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.Snowman.Cosmetic_OnSnowmanStartBeingUsedBySurvivor
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ASurvivor*                        survivorUsingSnowman                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Cosmetic_OnSnowmanStartBeingUsedBySurvivor(class ASurvivor* survivorUsingSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Cosmetic_OnSnowmanStartBeingUsedBySurvivor");

	Params::Snowman_Cosmetic_OnSnowmanStartBeingUsedBySurvivor Parms{};

	Parms.survivorUsingSnowman = survivorUsingSnowman;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.Snowman.Multicast_OnSnowmanStartBeingControlledByKiller
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class AKiller*                          killerUsingSnowman                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Multicast_OnSnowmanStartBeingControlledByKiller(class AKiller* killerUsingSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Multicast_OnSnowmanStartBeingControlledByKiller");

	Params::Snowman_Multicast_OnSnowmanStartBeingControlledByKiller Parms{};

	Parms.killerUsingSnowman = killerUsingSnowman;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.Multicast_OnSnowmanStartBeingControlledBySurvivor
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ASurvivor*                        survivorUsingSnowman                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Multicast_OnSnowmanStartBeingControlledBySurvivor(class ASurvivor* survivorUsingSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Multicast_OnSnowmanStartBeingControlledBySurvivor");

	Params::Snowman_Multicast_OnSnowmanStartBeingControlledBySurvivor Parms{};

	Parms.survivorUsingSnowman = survivorUsingSnowman;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.Multicast_OnSnowmanStartBeingUsedByKiller
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class AKiller*                          killerUsingSnowman                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Multicast_OnSnowmanStartBeingUsedByKiller(class AKiller* killerUsingSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Multicast_OnSnowmanStartBeingUsedByKiller");

	Params::Snowman_Multicast_OnSnowmanStartBeingUsedByKiller Parms{};

	Parms.killerUsingSnowman = killerUsingSnowman;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.Multicast_OnSnowmanStartBeingUsedBySurvivor
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ASurvivor*                        survivorUsingSnowman                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Multicast_OnSnowmanStartBeingUsedBySurvivor(class ASurvivor* survivorUsingSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Multicast_OnSnowmanStartBeingUsedBySurvivor");

	Params::Snowman_Multicast_OnSnowmanStartBeingUsedBySurvivor Parms{};

	Parms.survivorUsingSnowman = survivorUsingSnowman;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.Multicast_StartSnowmanDestruction
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// ESnowmanDestructionType                 snowmanDestructionType                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    unlockRequirementsSatisfiedForSurvivor                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    unlockRequirementsSatisfiedForKiller                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       playerInSnowman                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Multicast_StartSnowmanDestruction(ESnowmanDestructionType snowmanDestructionType, bool unlockRequirementsSatisfiedForSurvivor, bool unlockRequirementsSatisfiedForKiller, class ADBDPlayer* playerInSnowman)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Multicast_StartSnowmanDestruction");

	Params::Snowman_Multicast_StartSnowmanDestruction Parms{};

	Parms.snowmanDestructionType = snowmanDestructionType;
	Parms.unlockRequirementsSatisfiedForSurvivor = unlockRequirementsSatisfiedForSurvivor;
	Parms.unlockRequirementsSatisfiedForKiller = unlockRequirementsSatisfiedForKiller;
	Parms.playerInSnowman = playerInSnowman;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.OnFinishedPlaying
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FGameplayTag&              gameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameEventData&            GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ASnowman::OnFinishedPlaying(const struct FGameplayTag& gameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "OnFinishedPlaying");

	Params::Snowman_OnFinishedPlaying Parms{};

	Parms.gameEventType = std::move(gameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.OnRep_HighFiveFollower
// (Final, Native, Private)

void ASnowman::OnRep_HighFiveFollower()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "OnRep_HighFiveFollower");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.OnRep_IsMoving
// (Final, Native, Private)

void ASnowman::OnRep_IsMoving()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "OnRep_IsMoving");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.OnRep_PlayerUsingSnowman
// (Final, Native, Private)

void ASnowman::OnRep_PlayerUsingSnowman()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "OnRep_PlayerUsingSnowman");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.OnRep_SnowmanDestructionType
// (Final, Native, Private)

void ASnowman::OnRep_SnowmanDestructionType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "OnRep_SnowmanDestructionType");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.OnRep_SnowmanState
// (Final, Native, Private)

void ASnowman::OnRep_SnowmanState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "OnRep_SnowmanState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.OnTransitionBackToKillerFinished
// (Final, Native, Private)
// Parameters:
// const class AKiller*                    Killer                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::OnTransitionBackToKillerFinished(const class AKiller* Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "OnTransitionBackToKillerFinished");

	Params::Snowman_OnTransitionBackToKillerFinished Parms{};

	Parms.Killer = Killer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.Snowman.Multicast_DrawDebugCollisionCheck
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults, Const)
// Parameters:
// const struct FVector&                   BoxExtent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   debugLifetime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnowman::Multicast_DrawDebugCollisionCheck(const struct FVector& BoxExtent, float debugLifetime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Snowman", "Multicast_DrawDebugCollisionCheck");

	Params::Snowman_Multicast_DrawDebugCollisionCheck Parms{};

	Parms.BoxExtent = std::move(BoxExtent);
	Parms.debugLifetime = debugLifetime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.SnowmanAnimInstance.Cosmetic_OnSnowmanDestroyedEvent
// (BlueprintCosmetic, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESnowmanDestructionType                 snowmanDestructionType                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnowmanAnimInstance::Cosmetic_OnSnowmanDestroyedEvent(ESnowmanDestructionType snowmanDestructionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowmanAnimInstance", "Cosmetic_OnSnowmanDestroyedEvent");

	Params::SnowmanAnimInstance_Cosmetic_OnSnowmanDestroyedEvent Parms{};

	Parms.snowmanDestructionType = snowmanDestructionType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnowmanWinterEvent.SnowmanKillerPerspectiveChangeComponent.SetFirstPersonTargetData
// (Final, Native, Private)
// Parameters:
// const class AKiller*                    Killer                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnowmanKillerPerspectiveChangeComponent::SetFirstPersonTargetData(const class AKiller* Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowmanKillerPerspectiveChangeComponent", "SetFirstPersonTargetData");

	Params::SnowmanKillerPerspectiveChangeComponent_SetFirstPersonTargetData Parms{};

	Parms.Killer = Killer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.SnowmanSpawnPlacementStrategy.Authority_OnIntroCompletedOrLevelReadyToPlay
// (Final, Native, Private)

void USnowmanSpawnPlacementStrategy::Authority_OnIntroCompletedOrLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowmanSpawnPlacementStrategy", "Authority_OnIntroCompletedOrLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.SnowmanWinterEventComponent.DBD_Winter2021ForceRespawnAllSnowmen
// (Final, Exec, Native, Private)

void USnowmanWinterEventComponent::DBD_Winter2021ForceRespawnAllSnowmen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowmanWinterEventComponent", "DBD_Winter2021ForceRespawnAllSnowmen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.SnowmanWinterEventComponent.DBD_Winter2021RecalculateSpawnPoints
// (Final, Exec, Native, Private)

void USnowmanWinterEventComponent::DBD_Winter2021RecalculateSpawnPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowmanWinterEventComponent", "DBD_Winter2021RecalculateSpawnPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.SnowmanWinterEventComponent.DBD_Winter2021ShowSnowmenSpawnCollisionChecks
// (Final, Exec, Native, Private)
// Parameters:
// float                                   numberOfSeconds                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnowmanWinterEventComponent::DBD_Winter2021ShowSnowmenSpawnCollisionChecks(float numberOfSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowmanWinterEventComponent", "DBD_Winter2021ShowSnowmenSpawnCollisionChecks");

	Params::SnowmanWinterEventComponent_DBD_Winter2021ShowSnowmenSpawnCollisionChecks Parms{};

	Parms.numberOfSeconds = numberOfSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.SnowmanWinterEventComponent.DBD_Winter2021VisualizeCalculatedSpawnData
// (Final, Exec, Native, Private)
// Parameters:
// float                                   numberOfSeconds                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnowmanWinterEventComponent::DBD_Winter2021VisualizeCalculatedSpawnData(float numberOfSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnowmanWinterEventComponent", "DBD_Winter2021VisualizeCalculatedSpawnData");

	Params::SnowmanWinterEventComponent_DBD_Winter2021VisualizeCalculatedSpawnData Parms{};

	Parms.numberOfSeconds = numberOfSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.SurvivorHideInSnowmanInteraction.Authority_OnDamageStateChanged
// (Final, Native, Private)
// Parameters:
// EHealthState                            oldDamageState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHealthState                            currentDamageState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USurvivorHideInSnowmanInteraction::Authority_OnDamageStateChanged(EHealthState oldDamageState, EHealthState currentDamageState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorHideInSnowmanInteraction", "Authority_OnDamageStateChanged");

	Params::SurvivorHideInSnowmanInteraction_Authority_OnDamageStateChanged Parms{};

	Parms.oldDamageState = oldDamageState;
	Parms.currentDamageState = currentDamageState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnowmanWinterEvent.SurvivorHideInSnowmanInteraction.Cosmetic_OnSurvivorScreamFromExit
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       playerExiting                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USurvivorHideInSnowmanInteraction::Cosmetic_OnSurvivorScreamFromExit(class ADBDPlayer* playerExiting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorHideInSnowmanInteraction", "Cosmetic_OnSurvivorScreamFromExit");

	Params::SurvivorHideInSnowmanInteraction_Cosmetic_OnSurvivorScreamFromExit Parms{};

	Parms.playerExiting = playerExiting;

	UObject::ProcessEvent(Func, &Parms);
}

}

