#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheNightmare

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "DeadByDaylight_structs.hpp"


namespace SDK::Params
{

// Function TheNightmare.CharacterDreamworldComponent.GetLocallyObservedOrLocalCharacter
// 0x0010 (0x0010 - 0x0000)
struct CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter) == 0x000008, "Wrong alignment on CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter");
static_assert(sizeof(CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter) == 0x000010, "Wrong size on CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter");
static_assert(offsetof(CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter, WorldContextObject) == 0x000000, "Member 'CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter, ReturnValue) == 0x000008, "Member 'CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter::ReturnValue' has a wrong offset!");

// Function TheNightmare.CharacterDreamworldComponent.Authority_SetIsInDreamworld
// 0x0002 (0x0002 - 0x0000)
struct CharacterDreamworldComponent_Authority_SetIsInDreamworld final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isScripted;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_Authority_SetIsInDreamworld) == 0x000001, "Wrong alignment on CharacterDreamworldComponent_Authority_SetIsInDreamworld");
static_assert(sizeof(CharacterDreamworldComponent_Authority_SetIsInDreamworld) == 0x000002, "Wrong size on CharacterDreamworldComponent_Authority_SetIsInDreamworld");
static_assert(offsetof(CharacterDreamworldComponent_Authority_SetIsInDreamworld, NewValue) == 0x000000, "Member 'CharacterDreamworldComponent_Authority_SetIsInDreamworld::NewValue' has a wrong offset!");
static_assert(offsetof(CharacterDreamworldComponent_Authority_SetIsInDreamworld, isScripted) == 0x000001, "Member 'CharacterDreamworldComponent_Authority_SetIsInDreamworld::isScripted' has a wrong offset!");

// Function TheNightmare.CharacterDreamworldComponent.FireWakeUpScoreEvent
// 0x0008 (0x0008 - 0x0000)
struct CharacterDreamworldComponent_FireWakeUpScoreEvent final
{
public:
	class ADBDPlayer*                             Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_FireWakeUpScoreEvent) == 0x000008, "Wrong alignment on CharacterDreamworldComponent_FireWakeUpScoreEvent");
static_assert(sizeof(CharacterDreamworldComponent_FireWakeUpScoreEvent) == 0x000008, "Wrong size on CharacterDreamworldComponent_FireWakeUpScoreEvent");
static_assert(offsetof(CharacterDreamworldComponent_FireWakeUpScoreEvent, Instigator) == 0x000000, "Member 'CharacterDreamworldComponent_FireWakeUpScoreEvent::Instigator' has a wrong offset!");

// Function TheNightmare.CharacterDreamworldComponent.IsInDreamworld
// 0x0001 (0x0001 - 0x0000)
struct CharacterDreamworldComponent_IsInDreamworld final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_IsInDreamworld) == 0x000001, "Wrong alignment on CharacterDreamworldComponent_IsInDreamworld");
static_assert(sizeof(CharacterDreamworldComponent_IsInDreamworld) == 0x000001, "Wrong size on CharacterDreamworldComponent_IsInDreamworld");
static_assert(offsetof(CharacterDreamworldComponent_IsInDreamworld, ReturnValue) == 0x000000, "Member 'CharacterDreamworldComponent_IsInDreamworld::ReturnValue' has a wrong offset!");

// Function TheNightmare.CharacterDreamworldComponent.ShouldShowVignette
// 0x0001 (0x0001 - 0x0000)
struct CharacterDreamworldComponent_ShouldShowVignette final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_ShouldShowVignette) == 0x000001, "Wrong alignment on CharacterDreamworldComponent_ShouldShowVignette");
static_assert(sizeof(CharacterDreamworldComponent_ShouldShowVignette) == 0x000001, "Wrong size on CharacterDreamworldComponent_ShouldShowVignette");
static_assert(offsetof(CharacterDreamworldComponent_ShouldShowVignette, ReturnValue) == 0x000000, "Member 'CharacterDreamworldComponent_ShouldShowVignette::ReturnValue' has a wrong offset!");

// Function TheNightmare.SurvivorDreamworldComponent.Authority_HandleSkillCheckFailure
// 0x0010 (0x0010 - 0x0000)
struct SurvivorDreamworldComponent_Authority_HandleSkillCheckFailure final
{
public:
	bool                                          wakeUpEveryoneInteracting;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorDreamworldComponent_Authority_HandleSkillCheckFailure) == 0x000008, "Wrong alignment on SurvivorDreamworldComponent_Authority_HandleSkillCheckFailure");
static_assert(sizeof(SurvivorDreamworldComponent_Authority_HandleSkillCheckFailure) == 0x000010, "Wrong size on SurvivorDreamworldComponent_Authority_HandleSkillCheckFailure");
static_assert(offsetof(SurvivorDreamworldComponent_Authority_HandleSkillCheckFailure, wakeUpEveryoneInteracting) == 0x000000, "Member 'SurvivorDreamworldComponent_Authority_HandleSkillCheckFailure::wakeUpEveryoneInteracting' has a wrong offset!");
static_assert(offsetof(SurvivorDreamworldComponent_Authority_HandleSkillCheckFailure, Instigator) == 0x000008, "Member 'SurvivorDreamworldComponent_Authority_HandleSkillCheckFailure::Instigator' has a wrong offset!");

// Function TheNightmare.SurvivorDreamworldComponent.Authority_OnHealthStateChanged
// 0x0002 (0x0002 - 0x0000)
struct SurvivorDreamworldComponent_Authority_OnHealthStateChanged final
{
public:
	EHealthState                                  oldHealthState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealthState                                  newHealthState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorDreamworldComponent_Authority_OnHealthStateChanged) == 0x000001, "Wrong alignment on SurvivorDreamworldComponent_Authority_OnHealthStateChanged");
static_assert(sizeof(SurvivorDreamworldComponent_Authority_OnHealthStateChanged) == 0x000002, "Wrong size on SurvivorDreamworldComponent_Authority_OnHealthStateChanged");
static_assert(offsetof(SurvivorDreamworldComponent_Authority_OnHealthStateChanged, oldHealthState) == 0x000000, "Member 'SurvivorDreamworldComponent_Authority_OnHealthStateChanged::oldHealthState' has a wrong offset!");
static_assert(offsetof(SurvivorDreamworldComponent_Authority_OnHealthStateChanged, newHealthState) == 0x000001, "Member 'SurvivorDreamworldComponent_Authority_OnHealthStateChanged::newHealthState' has a wrong offset!");

// Function TheNightmare.SurvivorDreamworldComponent.Authority_WakeUpByOther
// 0x0008 (0x0008 - 0x0000)
struct SurvivorDreamworldComponent_Authority_WakeUpByOther final
{
public:
	class ADBDPlayer*                             Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorDreamworldComponent_Authority_WakeUpByOther) == 0x000008, "Wrong alignment on SurvivorDreamworldComponent_Authority_WakeUpByOther");
static_assert(sizeof(SurvivorDreamworldComponent_Authority_WakeUpByOther) == 0x000008, "Wrong size on SurvivorDreamworldComponent_Authority_WakeUpByOther");
static_assert(offsetof(SurvivorDreamworldComponent_Authority_WakeUpByOther, Instigator) == 0x000000, "Member 'SurvivorDreamworldComponent_Authority_WakeUpByOther::Instigator' has a wrong offset!");

// Function TheNightmare.SurvivorDreamworldComponent.HandleShowKillerChanged
// 0x0002 (0x0002 - 0x0000)
struct SurvivorDreamworldComponent_HandleShowKillerChanged final
{
public:
	bool                                          showKiller;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          instantly;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorDreamworldComponent_HandleShowKillerChanged) == 0x000001, "Wrong alignment on SurvivorDreamworldComponent_HandleShowKillerChanged");
static_assert(sizeof(SurvivorDreamworldComponent_HandleShowKillerChanged) == 0x000002, "Wrong size on SurvivorDreamworldComponent_HandleShowKillerChanged");
static_assert(offsetof(SurvivorDreamworldComponent_HandleShowKillerChanged, showKiller) == 0x000000, "Member 'SurvivorDreamworldComponent_HandleShowKillerChanged::showKiller' has a wrong offset!");
static_assert(offsetof(SurvivorDreamworldComponent_HandleShowKillerChanged, instantly) == 0x000001, "Member 'SurvivorDreamworldComponent_HandleShowKillerChanged::instantly' has a wrong offset!");

// Function TheNightmare.SurvivorDreamworldComponent.InitializeTunableValues
// 0x0008 (0x0008 - 0x0000)
struct SurvivorDreamworldComponent_InitializeTunableValues final
{
public:
	class AKiller*                                Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorDreamworldComponent_InitializeTunableValues) == 0x000008, "Wrong alignment on SurvivorDreamworldComponent_InitializeTunableValues");
static_assert(sizeof(SurvivorDreamworldComponent_InitializeTunableValues) == 0x000008, "Wrong size on SurvivorDreamworldComponent_InitializeTunableValues");
static_assert(offsetof(SurvivorDreamworldComponent_InitializeTunableValues, Killer) == 0x000000, "Member 'SurvivorDreamworldComponent_InitializeTunableValues::Killer' has a wrong offset!");

// Function TheNightmare.SurvivorDreamworldComponent.Local_SetShowKiller
// 0x0002 (0x0002 - 0x0000)
struct SurvivorDreamworldComponent_Local_SetShowKiller final
{
public:
	bool                                          showKiller;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          instantly;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorDreamworldComponent_Local_SetShowKiller) == 0x000001, "Wrong alignment on SurvivorDreamworldComponent_Local_SetShowKiller");
static_assert(sizeof(SurvivorDreamworldComponent_Local_SetShowKiller) == 0x000002, "Wrong size on SurvivorDreamworldComponent_Local_SetShowKiller");
static_assert(offsetof(SurvivorDreamworldComponent_Local_SetShowKiller, showKiller) == 0x000000, "Member 'SurvivorDreamworldComponent_Local_SetShowKiller::showKiller' has a wrong offset!");
static_assert(offsetof(SurvivorDreamworldComponent_Local_SetShowKiller, instantly) == 0x000001, "Member 'SurvivorDreamworldComponent_Local_SetShowKiller::instantly' has a wrong offset!");

// Function TheNightmare.SurvivorDreamworldComponent.SetScriptedKillerVisibility
// 0x0001 (0x0001 - 0x0000)
struct SurvivorDreamworldComponent_SetScriptedKillerVisibility final
{
public:
	bool                                          useScriptedKillerVisibility;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorDreamworldComponent_SetScriptedKillerVisibility) == 0x000001, "Wrong alignment on SurvivorDreamworldComponent_SetScriptedKillerVisibility");
static_assert(sizeof(SurvivorDreamworldComponent_SetScriptedKillerVisibility) == 0x000001, "Wrong size on SurvivorDreamworldComponent_SetScriptedKillerVisibility");
static_assert(offsetof(SurvivorDreamworldComponent_SetScriptedKillerVisibility, useScriptedKillerVisibility) == 0x000000, "Member 'SurvivorDreamworldComponent_SetScriptedKillerVisibility::useScriptedKillerVisibility' has a wrong offset!");

// Function TheNightmare.SurvivorDreamworldComponent.GetLinkedKiller
// 0x0008 (0x0008 - 0x0000)
struct SurvivorDreamworldComponent_GetLinkedKiller final
{
public:
	class AKiller*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorDreamworldComponent_GetLinkedKiller) == 0x000008, "Wrong alignment on SurvivorDreamworldComponent_GetLinkedKiller");
static_assert(sizeof(SurvivorDreamworldComponent_GetLinkedKiller) == 0x000008, "Wrong size on SurvivorDreamworldComponent_GetLinkedKiller");
static_assert(offsetof(SurvivorDreamworldComponent_GetLinkedKiller, ReturnValue) == 0x000000, "Member 'SurvivorDreamworldComponent_GetLinkedKiller::ReturnValue' has a wrong offset!");

// Function TheNightmare.WakerObject.Cosmetic_CooldownTimeElapsed
// 0x0004 (0x0004 - 0x0000)
struct WakerObject_Cosmetic_CooldownTimeElapsed final
{
public:
	float                                         timeElapsedPercent;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_Cosmetic_CooldownTimeElapsed) == 0x000004, "Wrong alignment on WakerObject_Cosmetic_CooldownTimeElapsed");
static_assert(sizeof(WakerObject_Cosmetic_CooldownTimeElapsed) == 0x000004, "Wrong size on WakerObject_Cosmetic_CooldownTimeElapsed");
static_assert(offsetof(WakerObject_Cosmetic_CooldownTimeElapsed, timeElapsedPercent) == 0x000000, "Member 'WakerObject_Cosmetic_CooldownTimeElapsed::timeElapsedPercent' has a wrong offset!");

// Function TheNightmare.WakerObject.Cosmetic_UpdateVisibility
// 0x0010 (0x0010 - 0x0000)
struct WakerObject_Cosmetic_UpdateVisibility final
{
public:
	const class ADBDPlayer*                       locallyObservedPlayer;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInDreamworld;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WakerObject_Cosmetic_UpdateVisibility) == 0x000008, "Wrong alignment on WakerObject_Cosmetic_UpdateVisibility");
static_assert(sizeof(WakerObject_Cosmetic_UpdateVisibility) == 0x000010, "Wrong size on WakerObject_Cosmetic_UpdateVisibility");
static_assert(offsetof(WakerObject_Cosmetic_UpdateVisibility, locallyObservedPlayer) == 0x000000, "Member 'WakerObject_Cosmetic_UpdateVisibility::locallyObservedPlayer' has a wrong offset!");
static_assert(offsetof(WakerObject_Cosmetic_UpdateVisibility, IsInDreamworld) == 0x000008, "Member 'WakerObject_Cosmetic_UpdateVisibility::IsInDreamworld' has a wrong offset!");

// Function TheNightmare.WakerObject.OnInteractionEntered
// 0x0008 (0x0008 - 0x0000)
struct WakerObject_OnInteractionEntered final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_OnInteractionEntered) == 0x000008, "Wrong alignment on WakerObject_OnInteractionEntered");
static_assert(sizeof(WakerObject_OnInteractionEntered) == 0x000008, "Wrong size on WakerObject_OnInteractionEntered");
static_assert(offsetof(WakerObject_OnInteractionEntered, Player) == 0x000000, "Member 'WakerObject_OnInteractionEntered::Player' has a wrong offset!");

// Function TheNightmare.WakerObject.GetChargeComplete
// 0x0001 (0x0001 - 0x0000)
struct WakerObject_GetChargeComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetChargeComplete) == 0x000001, "Wrong alignment on WakerObject_GetChargeComplete");
static_assert(sizeof(WakerObject_GetChargeComplete) == 0x000001, "Wrong size on WakerObject_GetChargeComplete");
static_assert(offsetof(WakerObject_GetChargeComplete, ReturnValue) == 0x000000, "Member 'WakerObject_GetChargeComplete::ReturnValue' has a wrong offset!");

// Function TheNightmare.WakerObject.GetInteractionPercentComplete
// 0x0004 (0x0004 - 0x0000)
struct WakerObject_GetInteractionPercentComplete final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetInteractionPercentComplete) == 0x000004, "Wrong alignment on WakerObject_GetInteractionPercentComplete");
static_assert(sizeof(WakerObject_GetInteractionPercentComplete) == 0x000004, "Wrong size on WakerObject_GetInteractionPercentComplete");
static_assert(offsetof(WakerObject_GetInteractionPercentComplete, ReturnValue) == 0x000000, "Member 'WakerObject_GetInteractionPercentComplete::ReturnValue' has a wrong offset!");

// Function TheNightmare.WakerObject.GetInteractorPrimitiveComponent
// 0x0008 (0x0008 - 0x0000)
struct WakerObject_GetInteractorPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetInteractorPrimitiveComponent) == 0x000008, "Wrong alignment on WakerObject_GetInteractorPrimitiveComponent");
static_assert(sizeof(WakerObject_GetInteractorPrimitiveComponent) == 0x000008, "Wrong size on WakerObject_GetInteractorPrimitiveComponent");
static_assert(offsetof(WakerObject_GetInteractorPrimitiveComponent, ReturnValue) == 0x000000, "Member 'WakerObject_GetInteractorPrimitiveComponent::ReturnValue' has a wrong offset!");

// Function TheNightmare.WakerObject.GetIsInteracting
// 0x0001 (0x0001 - 0x0000)
struct WakerObject_GetIsInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetIsInteracting) == 0x000001, "Wrong alignment on WakerObject_GetIsInteracting");
static_assert(sizeof(WakerObject_GetIsInteracting) == 0x000001, "Wrong size on WakerObject_GetIsInteracting");
static_assert(offsetof(WakerObject_GetIsInteracting, ReturnValue) == 0x000000, "Member 'WakerObject_GetIsInteracting::ReturnValue' has a wrong offset!");

// Function TheNightmare.WakerObject.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct WakerObject_GetMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetMesh) == 0x000008, "Wrong alignment on WakerObject_GetMesh");
static_assert(sizeof(WakerObject_GetMesh) == 0x000008, "Wrong size on WakerObject_GetMesh");
static_assert(offsetof(WakerObject_GetMesh, ReturnValue) == 0x000000, "Member 'WakerObject_GetMesh::ReturnValue' has a wrong offset!");

// Function TheNightmare.WakerObjectAnimInstance.GetWakerObject
// 0x0008 (0x0008 - 0x0000)
struct WakerObjectAnimInstance_GetWakerObject final
{
public:
	class AWakerObject*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObjectAnimInstance_GetWakerObject) == 0x000008, "Wrong alignment on WakerObjectAnimInstance_GetWakerObject");
static_assert(sizeof(WakerObjectAnimInstance_GetWakerObject) == 0x000008, "Wrong size on WakerObjectAnimInstance_GetWakerObject");
static_assert(offsetof(WakerObjectAnimInstance_GetWakerObject, ReturnValue) == 0x000000, "Member 'WakerObjectAnimInstance_GetWakerObject::ReturnValue' has a wrong offset!");

// Function TheNightmare.WakerObjectAnimInstance.GetWakerObjectCharge
// 0x0004 (0x0004 - 0x0000)
struct WakerObjectAnimInstance_GetWakerObjectCharge final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObjectAnimInstance_GetWakerObjectCharge) == 0x000004, "Wrong alignment on WakerObjectAnimInstance_GetWakerObjectCharge");
static_assert(sizeof(WakerObjectAnimInstance_GetWakerObjectCharge) == 0x000004, "Wrong size on WakerObjectAnimInstance_GetWakerObjectCharge");
static_assert(offsetof(WakerObjectAnimInstance_GetWakerObjectCharge, ReturnValue) == 0x000000, "Member 'WakerObjectAnimInstance_GetWakerObjectCharge::ReturnValue' has a wrong offset!");

// Function TheNightmare.WakerObjectAnimInstance.GetWakerObjectChargeComplete
// 0x0001 (0x0001 - 0x0000)
struct WakerObjectAnimInstance_GetWakerObjectChargeComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObjectAnimInstance_GetWakerObjectChargeComplete) == 0x000001, "Wrong alignment on WakerObjectAnimInstance_GetWakerObjectChargeComplete");
static_assert(sizeof(WakerObjectAnimInstance_GetWakerObjectChargeComplete) == 0x000001, "Wrong size on WakerObjectAnimInstance_GetWakerObjectChargeComplete");
static_assert(offsetof(WakerObjectAnimInstance_GetWakerObjectChargeComplete, ReturnValue) == 0x000000, "Member 'WakerObjectAnimInstance_GetWakerObjectChargeComplete::ReturnValue' has a wrong offset!");

// Function TheNightmare.WakerObjectAnimInstance.GetWakerObjectStarted
// 0x0001 (0x0001 - 0x0000)
struct WakerObjectAnimInstance_GetWakerObjectStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObjectAnimInstance_GetWakerObjectStarted) == 0x000001, "Wrong alignment on WakerObjectAnimInstance_GetWakerObjectStarted");
static_assert(sizeof(WakerObjectAnimInstance_GetWakerObjectStarted) == 0x000001, "Wrong size on WakerObjectAnimInstance_GetWakerObjectStarted");
static_assert(offsetof(WakerObjectAnimInstance_GetWakerObjectStarted, ReturnValue) == 0x000000, "Member 'WakerObjectAnimInstance_GetWakerObjectStarted::ReturnValue' has a wrong offset!");

// Function TheNightmare.BloodWarden.GetPerkLevelSpikeDurationsAtLevel
// 0x0004 (0x0004 - 0x0000)
struct BloodWarden_GetPerkLevelSpikeDurationsAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodWarden_GetPerkLevelSpikeDurationsAtLevel) == 0x000004, "Wrong alignment on BloodWarden_GetPerkLevelSpikeDurationsAtLevel");
static_assert(sizeof(BloodWarden_GetPerkLevelSpikeDurationsAtLevel) == 0x000004, "Wrong size on BloodWarden_GetPerkLevelSpikeDurationsAtLevel");
static_assert(offsetof(BloodWarden_GetPerkLevelSpikeDurationsAtLevel, ReturnValue) == 0x000000, "Member 'BloodWarden_GetPerkLevelSpikeDurationsAtLevel::ReturnValue' has a wrong offset!");

// Function TheNightmare.DreamPalletAbility.BP_Authority_RecycleDreamPallet
// 0x0008 (0x0008 - 0x0000)
struct DreamPalletAbility_BP_Authority_RecycleDreamPallet final
{
public:
	class APallet*                                Pallet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamPalletAbility_BP_Authority_RecycleDreamPallet) == 0x000008, "Wrong alignment on DreamPalletAbility_BP_Authority_RecycleDreamPallet");
static_assert(sizeof(DreamPalletAbility_BP_Authority_RecycleDreamPallet) == 0x000008, "Wrong size on DreamPalletAbility_BP_Authority_RecycleDreamPallet");
static_assert(offsetof(DreamPalletAbility_BP_Authority_RecycleDreamPallet, Pallet) == 0x000000, "Member 'DreamPalletAbility_BP_Authority_RecycleDreamPallet::Pallet' has a wrong offset!");

// Function TheNightmare.DreamPalletAbility.Server_SetTarget
// 0x0008 (0x0008 - 0x0000)
struct DreamPalletAbility_Server_SetTarget final
{
public:
	class UTargetableComponent*                   Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamPalletAbility_Server_SetTarget) == 0x000008, "Wrong alignment on DreamPalletAbility_Server_SetTarget");
static_assert(sizeof(DreamPalletAbility_Server_SetTarget) == 0x000008, "Wrong size on DreamPalletAbility_Server_SetTarget");
static_assert(offsetof(DreamPalletAbility_Server_SetTarget, Target) == 0x000000, "Member 'DreamPalletAbility_Server_SetTarget::Target' has a wrong offset!");

// Function TheNightmare.DreamPalletAbilityData.GetExplosionRadius
// 0x0004 (0x0004 - 0x0000)
struct DreamPalletAbilityData_GetExplosionRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamPalletAbilityData_GetExplosionRadius) == 0x000004, "Wrong alignment on DreamPalletAbilityData_GetExplosionRadius");
static_assert(sizeof(DreamPalletAbilityData_GetExplosionRadius) == 0x000004, "Wrong size on DreamPalletAbilityData_GetExplosionRadius");
static_assert(offsetof(DreamPalletAbilityData_GetExplosionRadius, ReturnValue) == 0x000000, "Member 'DreamPalletAbilityData_GetExplosionRadius::ReturnValue' has a wrong offset!");

// Function TheNightmare.DreamPalletCosmeticComponent.Cosmetic_UpdateSurvivorDistanceToPallet
// 0x0004 (0x0004 - 0x0000)
struct DreamPalletCosmeticComponent_Cosmetic_UpdateSurvivorDistanceToPallet final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamPalletCosmeticComponent_Cosmetic_UpdateSurvivorDistanceToPallet) == 0x000004, "Wrong alignment on DreamPalletCosmeticComponent_Cosmetic_UpdateSurvivorDistanceToPallet");
static_assert(sizeof(DreamPalletCosmeticComponent_Cosmetic_UpdateSurvivorDistanceToPallet) == 0x000004, "Wrong size on DreamPalletCosmeticComponent_Cosmetic_UpdateSurvivorDistanceToPallet");
static_assert(offsetof(DreamPalletCosmeticComponent_Cosmetic_UpdateSurvivorDistanceToPallet, Distance) == 0x000000, "Member 'DreamPalletCosmeticComponent_Cosmetic_UpdateSurvivorDistanceToPallet::Distance' has a wrong offset!");

// Function TheNightmare.DreamPalletCosmeticComponent.GetMaxCosmeticVisibilityDistance
// 0x0004 (0x0004 - 0x0000)
struct DreamPalletCosmeticComponent_GetMaxCosmeticVisibilityDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamPalletCosmeticComponent_GetMaxCosmeticVisibilityDistance) == 0x000004, "Wrong alignment on DreamPalletCosmeticComponent_GetMaxCosmeticVisibilityDistance");
static_assert(sizeof(DreamPalletCosmeticComponent_GetMaxCosmeticVisibilityDistance) == 0x000004, "Wrong size on DreamPalletCosmeticComponent_GetMaxCosmeticVisibilityDistance");
static_assert(offsetof(DreamPalletCosmeticComponent_GetMaxCosmeticVisibilityDistance, ReturnValue) == 0x000000, "Member 'DreamPalletCosmeticComponent_GetMaxCosmeticVisibilityDistance::ReturnValue' has a wrong offset!");

// Function TheNightmare.DreamProjectionInteractionDefinition.Cosmetic_OnTeleportChargeStarted
// 0x0008 (0x0008 - 0x0000)
struct DreamProjectionInteractionDefinition_Cosmetic_OnTeleportChargeStarted final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamProjectionInteractionDefinition_Cosmetic_OnTeleportChargeStarted) == 0x000008, "Wrong alignment on DreamProjectionInteractionDefinition_Cosmetic_OnTeleportChargeStarted");
static_assert(sizeof(DreamProjectionInteractionDefinition_Cosmetic_OnTeleportChargeStarted) == 0x000008, "Wrong size on DreamProjectionInteractionDefinition_Cosmetic_OnTeleportChargeStarted");
static_assert(offsetof(DreamProjectionInteractionDefinition_Cosmetic_OnTeleportChargeStarted, Player) == 0x000000, "Member 'DreamProjectionInteractionDefinition_Cosmetic_OnTeleportChargeStarted::Player' has a wrong offset!");

// Function TheNightmare.DreamProjectionInteractionDefinition.Cosmetic_OnTeleported
// 0x0080 (0x0080 - 0x0000)
struct DreamProjectionInteractionDefinition_Cosmetic_OnTeleported final
{
public:
	struct FTransform                             transformBeforeTeleport;                           // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                teleportLocation;                                  // 0x0060(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DreamProjectionInteractionDefinition_Cosmetic_OnTeleported) == 0x000010, "Wrong alignment on DreamProjectionInteractionDefinition_Cosmetic_OnTeleported");
static_assert(sizeof(DreamProjectionInteractionDefinition_Cosmetic_OnTeleported) == 0x000080, "Wrong size on DreamProjectionInteractionDefinition_Cosmetic_OnTeleported");
static_assert(offsetof(DreamProjectionInteractionDefinition_Cosmetic_OnTeleported, transformBeforeTeleport) == 0x000000, "Member 'DreamProjectionInteractionDefinition_Cosmetic_OnTeleported::transformBeforeTeleport' has a wrong offset!");
static_assert(offsetof(DreamProjectionInteractionDefinition_Cosmetic_OnTeleported, teleportLocation) == 0x000060, "Member 'DreamProjectionInteractionDefinition_Cosmetic_OnTeleported::teleportLocation' has a wrong offset!");

// Function TheNightmare.DreamProjectionInteractionDefinition.Cosmetic_OnTeleportLocationChosen
// 0x0070 (0x0070 - 0x0000)
struct DreamProjectionInteractionDefinition_Cosmetic_OnTeleportLocationChosen final
{
public:
	struct FTransform                             Location;                                          // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASurvivor*                        TargetSurvivor;                                    // 0x0060(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DreamProjectionInteractionDefinition_Cosmetic_OnTeleportLocationChosen) == 0x000010, "Wrong alignment on DreamProjectionInteractionDefinition_Cosmetic_OnTeleportLocationChosen");
static_assert(sizeof(DreamProjectionInteractionDefinition_Cosmetic_OnTeleportLocationChosen) == 0x000070, "Wrong size on DreamProjectionInteractionDefinition_Cosmetic_OnTeleportLocationChosen");
static_assert(offsetof(DreamProjectionInteractionDefinition_Cosmetic_OnTeleportLocationChosen, Location) == 0x000000, "Member 'DreamProjectionInteractionDefinition_Cosmetic_OnTeleportLocationChosen::Location' has a wrong offset!");
static_assert(offsetof(DreamProjectionInteractionDefinition_Cosmetic_OnTeleportLocationChosen, TargetSurvivor) == 0x000060, "Member 'DreamProjectionInteractionDefinition_Cosmetic_OnTeleportLocationChosen::TargetSurvivor' has a wrong offset!");

// Function TheNightmare.DreamProjectionInteractionDefinition.Cosmetic_ShowBloodSpurts
// 0x0008 (0x0008 - 0x0000)
struct DreamProjectionInteractionDefinition_Cosmetic_ShowBloodSpurts final
{
public:
	const class AGenerator*                       targetGenerator;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamProjectionInteractionDefinition_Cosmetic_ShowBloodSpurts) == 0x000008, "Wrong alignment on DreamProjectionInteractionDefinition_Cosmetic_ShowBloodSpurts");
static_assert(sizeof(DreamProjectionInteractionDefinition_Cosmetic_ShowBloodSpurts) == 0x000008, "Wrong size on DreamProjectionInteractionDefinition_Cosmetic_ShowBloodSpurts");
static_assert(offsetof(DreamProjectionInteractionDefinition_Cosmetic_ShowBloodSpurts, targetGenerator) == 0x000000, "Member 'DreamProjectionInteractionDefinition_Cosmetic_ShowBloodSpurts::targetGenerator' has a wrong offset!");

// Function TheNightmare.DreamProjectionInteractionDefinition.Multicast_OnTeleportLocationChosen
// 0x0070 (0x0070 - 0x0000)
struct DreamProjectionInteractionDefinition_Multicast_OnTeleportLocationChosen final
{
public:
	struct FTransform                             Location;                                          // 0x0000(0x0060)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetActor;                                       // 0x0060(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DreamProjectionInteractionDefinition_Multicast_OnTeleportLocationChosen) == 0x000010, "Wrong alignment on DreamProjectionInteractionDefinition_Multicast_OnTeleportLocationChosen");
static_assert(sizeof(DreamProjectionInteractionDefinition_Multicast_OnTeleportLocationChosen) == 0x000070, "Wrong size on DreamProjectionInteractionDefinition_Multicast_OnTeleportLocationChosen");
static_assert(offsetof(DreamProjectionInteractionDefinition_Multicast_OnTeleportLocationChosen, Location) == 0x000000, "Member 'DreamProjectionInteractionDefinition_Multicast_OnTeleportLocationChosen::Location' has a wrong offset!");
static_assert(offsetof(DreamProjectionInteractionDefinition_Multicast_OnTeleportLocationChosen, TargetActor) == 0x000060, "Member 'DreamProjectionInteractionDefinition_Multicast_OnTeleportLocationChosen::TargetActor' has a wrong offset!");

// Function TheNightmare.DreamProjectionInteractionDefinition.Multicast_TeleportPlayer
// 0x0030 (0x0030 - 0x0000)
struct DreamProjectionInteractionDefinition_Multicast_TeleportPlayer final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamProjectionInteractionDefinition_Multicast_TeleportPlayer) == 0x000008, "Wrong alignment on DreamProjectionInteractionDefinition_Multicast_TeleportPlayer");
static_assert(sizeof(DreamProjectionInteractionDefinition_Multicast_TeleportPlayer) == 0x000030, "Wrong size on DreamProjectionInteractionDefinition_Multicast_TeleportPlayer");
static_assert(offsetof(DreamProjectionInteractionDefinition_Multicast_TeleportPlayer, Location) == 0x000000, "Member 'DreamProjectionInteractionDefinition_Multicast_TeleportPlayer::Location' has a wrong offset!");
static_assert(offsetof(DreamProjectionInteractionDefinition_Multicast_TeleportPlayer, Rotation) == 0x000018, "Member 'DreamProjectionInteractionDefinition_Multicast_TeleportPlayer::Rotation' has a wrong offset!");

// Function TheNightmare.DreamProjectionInteractionDefinition.OnBloodSpurts
// 0x0008 (0x0008 - 0x0000)
struct DreamProjectionInteractionDefinition_OnBloodSpurts final
{
public:
	const class AGenerator*                       targetGenerator;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamProjectionInteractionDefinition_OnBloodSpurts) == 0x000008, "Wrong alignment on DreamProjectionInteractionDefinition_OnBloodSpurts");
static_assert(sizeof(DreamProjectionInteractionDefinition_OnBloodSpurts) == 0x000008, "Wrong size on DreamProjectionInteractionDefinition_OnBloodSpurts");
static_assert(offsetof(DreamProjectionInteractionDefinition_OnBloodSpurts, targetGenerator) == 0x000000, "Member 'DreamProjectionInteractionDefinition_OnBloodSpurts::targetGenerator' has a wrong offset!");

// Function TheNightmare.DreamProjectionInteractionDefinition.Server_SetTeleportTarget
// 0x0008 (0x0008 - 0x0000)
struct DreamProjectionInteractionDefinition_Server_SetTeleportTarget final
{
public:
	class UTargetableComponent*                   Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamProjectionInteractionDefinition_Server_SetTeleportTarget) == 0x000008, "Wrong alignment on DreamProjectionInteractionDefinition_Server_SetTeleportTarget");
static_assert(sizeof(DreamProjectionInteractionDefinition_Server_SetTeleportTarget) == 0x000008, "Wrong size on DreamProjectionInteractionDefinition_Server_SetTeleportTarget");
static_assert(offsetof(DreamProjectionInteractionDefinition_Server_SetTeleportTarget, Target) == 0x000000, "Member 'DreamProjectionInteractionDefinition_Server_SetTeleportTarget::Target' has a wrong offset!");

// Function TheNightmare.DreamProjectionInteractionDefinition.GetOwningPlayer
// 0x0008 (0x0008 - 0x0000)
struct DreamProjectionInteractionDefinition_GetOwningPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamProjectionInteractionDefinition_GetOwningPlayer) == 0x000008, "Wrong alignment on DreamProjectionInteractionDefinition_GetOwningPlayer");
static_assert(sizeof(DreamProjectionInteractionDefinition_GetOwningPlayer) == 0x000008, "Wrong size on DreamProjectionInteractionDefinition_GetOwningPlayer");
static_assert(offsetof(DreamProjectionInteractionDefinition_GetOwningPlayer, ReturnValue) == 0x000000, "Member 'DreamProjectionInteractionDefinition_GetOwningPlayer::ReturnValue' has a wrong offset!");

// Function TheNightmare.DreamProjectionInteractionDefinition.HasTeleportFailed
// 0x0001 (0x0001 - 0x0000)
struct DreamProjectionInteractionDefinition_HasTeleportFailed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamProjectionInteractionDefinition_HasTeleportFailed) == 0x000001, "Wrong alignment on DreamProjectionInteractionDefinition_HasTeleportFailed");
static_assert(sizeof(DreamProjectionInteractionDefinition_HasTeleportFailed) == 0x000001, "Wrong size on DreamProjectionInteractionDefinition_HasTeleportFailed");
static_assert(offsetof(DreamProjectionInteractionDefinition_HasTeleportFailed, ReturnValue) == 0x000000, "Member 'DreamProjectionInteractionDefinition_HasTeleportFailed::ReturnValue' has a wrong offset!");

// Function TheNightmare.DreamSnare.Authority_OnAcquiredChanged
// 0x0001 (0x0001 - 0x0000)
struct DreamSnare_Authority_OnAcquiredChanged final
{
public:
	bool                                          acquired;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamSnare_Authority_OnAcquiredChanged) == 0x000001, "Wrong alignment on DreamSnare_Authority_OnAcquiredChanged");
static_assert(sizeof(DreamSnare_Authority_OnAcquiredChanged) == 0x000001, "Wrong size on DreamSnare_Authority_OnAcquiredChanged");
static_assert(offsetof(DreamSnare_Authority_OnAcquiredChanged, acquired) == 0x000000, "Member 'DreamSnare_Authority_OnAcquiredChanged::acquired' has a wrong offset!");

// Function TheNightmare.DreamSnare.Cosmetic_OnSurvivorTriggerDreamTrap
// 0x0008 (0x0008 - 0x0000)
struct DreamSnare_Cosmetic_OnSurvivorTriggerDreamTrap final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamSnare_Cosmetic_OnSurvivorTriggerDreamTrap) == 0x000008, "Wrong alignment on DreamSnare_Cosmetic_OnSurvivorTriggerDreamTrap");
static_assert(sizeof(DreamSnare_Cosmetic_OnSurvivorTriggerDreamTrap) == 0x000008, "Wrong size on DreamSnare_Cosmetic_OnSurvivorTriggerDreamTrap");
static_assert(offsetof(DreamSnare_Cosmetic_OnSurvivorTriggerDreamTrap, Survivor) == 0x000000, "Member 'DreamSnare_Cosmetic_OnSurvivorTriggerDreamTrap::Survivor' has a wrong offset!");

// Function TheNightmare.DreamSnare.Multicast_OnSnareTriggered
// 0x0008 (0x0008 - 0x0000)
struct DreamSnare_Multicast_OnSnareTriggered final
{
public:
	class ASurvivor*                              survivorTriggering;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamSnare_Multicast_OnSnareTriggered) == 0x000008, "Wrong alignment on DreamSnare_Multicast_OnSnareTriggered");
static_assert(sizeof(DreamSnare_Multicast_OnSnareTriggered) == 0x000008, "Wrong size on DreamSnare_Multicast_OnSnareTriggered");
static_assert(offsetof(DreamSnare_Multicast_OnSnareTriggered, survivorTriggering) == 0x000000, "Member 'DreamSnare_Multicast_OnSnareTriggered::survivorTriggering' has a wrong offset!");

// Function TheNightmare.DreamSnare.IsSnareStatic
// 0x0001 (0x0001 - 0x0000)
struct DreamSnare_IsSnareStatic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamSnare_IsSnareStatic) == 0x000001, "Wrong alignment on DreamSnare_IsSnareStatic");
static_assert(sizeof(DreamSnare_IsSnareStatic) == 0x000001, "Wrong size on DreamSnare_IsSnareStatic");
static_assert(offsetof(DreamSnare_IsSnareStatic, ReturnValue) == 0x000000, "Member 'DreamSnare_IsSnareStatic::ReturnValue' has a wrong offset!");

// Function TheNightmare.DreamSnarePlacerComponent.Cosmetic_ActivateSnarePlacement
// 0x0001 (0x0001 - 0x0000)
struct DreamSnarePlacerComponent_Cosmetic_ActivateSnarePlacement final
{
public:
	bool                                          Activate_0;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamSnarePlacerComponent_Cosmetic_ActivateSnarePlacement) == 0x000001, "Wrong alignment on DreamSnarePlacerComponent_Cosmetic_ActivateSnarePlacement");
static_assert(sizeof(DreamSnarePlacerComponent_Cosmetic_ActivateSnarePlacement) == 0x000001, "Wrong size on DreamSnarePlacerComponent_Cosmetic_ActivateSnarePlacement");
static_assert(offsetof(DreamSnarePlacerComponent_Cosmetic_ActivateSnarePlacement, Activate_0) == 0x000000, "Member 'DreamSnarePlacerComponent_Cosmetic_ActivateSnarePlacement::Activate_0' has a wrong offset!");

// Function TheNightmare.DreamSnarePlacerComponent.Cosmetic_UpdateSnareIndicator
// 0x0060 (0x0060 - 0x0000)
struct DreamSnarePlacerComponent_Cosmetic_UpdateSnareIndicator final
{
public:
	struct FTransform                             NewTransform;                                      // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamSnarePlacerComponent_Cosmetic_UpdateSnareIndicator) == 0x000010, "Wrong alignment on DreamSnarePlacerComponent_Cosmetic_UpdateSnareIndicator");
static_assert(sizeof(DreamSnarePlacerComponent_Cosmetic_UpdateSnareIndicator) == 0x000060, "Wrong size on DreamSnarePlacerComponent_Cosmetic_UpdateSnareIndicator");
static_assert(offsetof(DreamSnarePlacerComponent_Cosmetic_UpdateSnareIndicator, NewTransform) == 0x000000, "Member 'DreamSnarePlacerComponent_Cosmetic_UpdateSnareIndicator::NewTransform' has a wrong offset!");

// Function TheNightmare.EscapeDreamInteraction.GetOwningWakerObject
// 0x0008 (0x0008 - 0x0000)
struct EscapeDreamInteraction_GetOwningWakerObject final
{
public:
	class AWakerObject*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDreamInteraction_GetOwningWakerObject) == 0x000008, "Wrong alignment on EscapeDreamInteraction_GetOwningWakerObject");
static_assert(sizeof(EscapeDreamInteraction_GetOwningWakerObject) == 0x000008, "Wrong size on EscapeDreamInteraction_GetOwningWakerObject");
static_assert(offsetof(EscapeDreamInteraction_GetOwningWakerObject, ReturnValue) == 0x000000, "Member 'EscapeDreamInteraction_GetOwningWakerObject::ReturnValue' has a wrong offset!");

// Function TheNightmare.ExplodeDreamPalletInteraction.Cosmetic_BeginExplodeDreamPallet
// 0x0010 (0x0010 - 0x0000)
struct ExplodeDreamPalletInteraction_Cosmetic_BeginExplodeDreamPallet final
{
public:
	class APallet*                                Pallet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         explosionRadius;                                   // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExplodeDreamPalletInteraction_Cosmetic_BeginExplodeDreamPallet) == 0x000008, "Wrong alignment on ExplodeDreamPalletInteraction_Cosmetic_BeginExplodeDreamPallet");
static_assert(sizeof(ExplodeDreamPalletInteraction_Cosmetic_BeginExplodeDreamPallet) == 0x000010, "Wrong size on ExplodeDreamPalletInteraction_Cosmetic_BeginExplodeDreamPallet");
static_assert(offsetof(ExplodeDreamPalletInteraction_Cosmetic_BeginExplodeDreamPallet, Pallet) == 0x000000, "Member 'ExplodeDreamPalletInteraction_Cosmetic_BeginExplodeDreamPallet::Pallet' has a wrong offset!");
static_assert(offsetof(ExplodeDreamPalletInteraction_Cosmetic_BeginExplodeDreamPallet, explosionRadius) == 0x000008, "Member 'ExplodeDreamPalletInteraction_Cosmetic_BeginExplodeDreamPallet::explosionRadius' has a wrong offset!");

// Function TheNightmare.ExplodeDreamPalletInteraction.Cosmetic_ExplodeDreamPallet
// 0x0008 (0x0008 - 0x0000)
struct ExplodeDreamPalletInteraction_Cosmetic_ExplodeDreamPallet final
{
public:
	class APallet*                                Pallet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExplodeDreamPalletInteraction_Cosmetic_ExplodeDreamPallet) == 0x000008, "Wrong alignment on ExplodeDreamPalletInteraction_Cosmetic_ExplodeDreamPallet");
static_assert(sizeof(ExplodeDreamPalletInteraction_Cosmetic_ExplodeDreamPallet) == 0x000008, "Wrong size on ExplodeDreamPalletInteraction_Cosmetic_ExplodeDreamPallet");
static_assert(offsetof(ExplodeDreamPalletInteraction_Cosmetic_ExplodeDreamPallet, Pallet) == 0x000000, "Member 'ExplodeDreamPalletInteraction_Cosmetic_ExplodeDreamPallet::Pallet' has a wrong offset!");

// Function TheNightmare.FireUp.GetSpeedBonusAtLevel
// 0x0004 (0x0004 - 0x0000)
struct FireUp_GetSpeedBonusAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireUp_GetSpeedBonusAtLevel) == 0x000004, "Wrong alignment on FireUp_GetSpeedBonusAtLevel");
static_assert(sizeof(FireUp_GetSpeedBonusAtLevel) == 0x000004, "Wrong size on FireUp_GetSpeedBonusAtLevel");
static_assert(offsetof(FireUp_GetSpeedBonusAtLevel, ReturnValue) == 0x000000, "Member 'FireUp_GetSpeedBonusAtLevel::ReturnValue' has a wrong offset!");

// Function TheNightmare.GeneratorDreamworldComponent.Cosmetic_OnPlayerFailSkillCheck
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDreamworldComponent_Cosmetic_OnPlayerFailSkillCheck final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDreamworldComponent_Cosmetic_OnPlayerFailSkillCheck) == 0x000008, "Wrong alignment on GeneratorDreamworldComponent_Cosmetic_OnPlayerFailSkillCheck");
static_assert(sizeof(GeneratorDreamworldComponent_Cosmetic_OnPlayerFailSkillCheck) == 0x000008, "Wrong size on GeneratorDreamworldComponent_Cosmetic_OnPlayerFailSkillCheck");
static_assert(offsetof(GeneratorDreamworldComponent_Cosmetic_OnPlayerFailSkillCheck, Player) == 0x000000, "Member 'GeneratorDreamworldComponent_Cosmetic_OnPlayerFailSkillCheck::Player' has a wrong offset!");

// Function TheNightmare.GeneratorDreamworldComponent.Cosmetic_SpawnBloodOnGenerator
// 0x0018 (0x0018 - 0x0000)
struct GeneratorDreamworldComponent_Cosmetic_SpawnBloodOnGenerator final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           socketNames;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDreamworldComponent_Cosmetic_SpawnBloodOnGenerator) == 0x000008, "Wrong alignment on GeneratorDreamworldComponent_Cosmetic_SpawnBloodOnGenerator");
static_assert(sizeof(GeneratorDreamworldComponent_Cosmetic_SpawnBloodOnGenerator) == 0x000018, "Wrong size on GeneratorDreamworldComponent_Cosmetic_SpawnBloodOnGenerator");
static_assert(offsetof(GeneratorDreamworldComponent_Cosmetic_SpawnBloodOnGenerator, Generator) == 0x000000, "Member 'GeneratorDreamworldComponent_Cosmetic_SpawnBloodOnGenerator::Generator' has a wrong offset!");
static_assert(offsetof(GeneratorDreamworldComponent_Cosmetic_SpawnBloodOnGenerator, socketNames) == 0x000008, "Member 'GeneratorDreamworldComponent_Cosmetic_SpawnBloodOnGenerator::socketNames' has a wrong offset!");

// Function TheNightmare.GeneratorDreamworldComponent.OnRepairSkillCheckFailed
// 0x0018 (0x0018 - 0x0000)
struct GeneratorDreamworldComponent_OnRepairSkillCheckFailed final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bonus;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerLoudNoise;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hadInput;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         Type;                                              // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChargeChange;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed) == 0x000008, "Wrong alignment on GeneratorDreamworldComponent_OnRepairSkillCheckFailed");
static_assert(sizeof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed) == 0x000018, "Wrong size on GeneratorDreamworldComponent_OnRepairSkillCheckFailed");
static_assert(offsetof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed, Success) == 0x000000, "Member 'GeneratorDreamworldComponent_OnRepairSkillCheckFailed::Success' has a wrong offset!");
static_assert(offsetof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed, Bonus) == 0x000001, "Member 'GeneratorDreamworldComponent_OnRepairSkillCheckFailed::Bonus' has a wrong offset!");
static_assert(offsetof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed, Player) == 0x000008, "Member 'GeneratorDreamworldComponent_OnRepairSkillCheckFailed::Player' has a wrong offset!");
static_assert(offsetof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed, TriggerLoudNoise) == 0x000010, "Member 'GeneratorDreamworldComponent_OnRepairSkillCheckFailed::TriggerLoudNoise' has a wrong offset!");
static_assert(offsetof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed, hadInput) == 0x000011, "Member 'GeneratorDreamworldComponent_OnRepairSkillCheckFailed::hadInput' has a wrong offset!");
static_assert(offsetof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed, Type) == 0x000012, "Member 'GeneratorDreamworldComponent_OnRepairSkillCheckFailed::Type' has a wrong offset!");
static_assert(offsetof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed, ChargeChange) == 0x000014, "Member 'GeneratorDreamworldComponent_OnRepairSkillCheckFailed::ChargeChange' has a wrong offset!");

// Function TheNightmare.NightmareCheatComponent.DBD_PutSurvivorToSleep
// 0x0010 (0x0010 - 0x0000)
struct NightmareCheatComponent_DBD_PutSurvivorToSleep final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NightmareCheatComponent_DBD_PutSurvivorToSleep) == 0x000008, "Wrong alignment on NightmareCheatComponent_DBD_PutSurvivorToSleep");
static_assert(sizeof(NightmareCheatComponent_DBD_PutSurvivorToSleep) == 0x000010, "Wrong size on NightmareCheatComponent_DBD_PutSurvivorToSleep");
static_assert(offsetof(NightmareCheatComponent_DBD_PutSurvivorToSleep, PlayerId) == 0x000000, "Member 'NightmareCheatComponent_DBD_PutSurvivorToSleep::PlayerId' has a wrong offset!");

// Function TheNightmare.NightmareCheatComponent.DBD_WakeUpSurvivor
// 0x0010 (0x0010 - 0x0000)
struct NightmareCheatComponent_DBD_WakeUpSurvivor final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NightmareCheatComponent_DBD_WakeUpSurvivor) == 0x000008, "Wrong alignment on NightmareCheatComponent_DBD_WakeUpSurvivor");
static_assert(sizeof(NightmareCheatComponent_DBD_WakeUpSurvivor) == 0x000010, "Wrong size on NightmareCheatComponent_DBD_WakeUpSurvivor");
static_assert(offsetof(NightmareCheatComponent_DBD_WakeUpSurvivor, PlayerId) == 0x000000, "Member 'NightmareCheatComponent_DBD_WakeUpSurvivor::PlayerId' has a wrong offset!");

// Function TheNightmare.NightmareSurvivorCosmeticHelperActor.Cosmetic_OnPlayerHitWithDreamAttack
// 0x0010 (0x0010 - 0x0000)
struct NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttack final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AKiller*                                Killer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttack) == 0x000008, "Wrong alignment on NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttack");
static_assert(sizeof(NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttack) == 0x000010, "Wrong size on NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttack");
static_assert(offsetof(NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttack, Survivor) == 0x000000, "Member 'NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttack::Survivor' has a wrong offset!");
static_assert(offsetof(NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttack, Killer) == 0x000008, "Member 'NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttack::Killer' has a wrong offset!");

// Function TheNightmare.NightmareSurvivorCosmeticHelperActor.Cosmetic_OnPlayerHitWithDreamAttackImmune
// 0x0010 (0x0010 - 0x0000)
struct NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttackImmune final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AKiller*                                Killer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttackImmune) == 0x000008, "Wrong alignment on NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttackImmune");
static_assert(sizeof(NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttackImmune) == 0x000010, "Wrong size on NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttackImmune");
static_assert(offsetof(NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttackImmune, Survivor) == 0x000000, "Member 'NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttackImmune::Survivor' has a wrong offset!");
static_assert(offsetof(NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttackImmune, Killer) == 0x000008, "Member 'NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerHitWithDreamAttackImmune::Killer' has a wrong offset!");

// Function TheNightmare.NightmareSurvivorCosmeticHelperActor.Cosmetic_OnPlayerInducedSleepWithDreamAttack
// 0x0010 (0x0010 - 0x0000)
struct NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerInducedSleepWithDreamAttack final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AKiller*                                Killer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerInducedSleepWithDreamAttack) == 0x000008, "Wrong alignment on NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerInducedSleepWithDreamAttack");
static_assert(sizeof(NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerInducedSleepWithDreamAttack) == 0x000010, "Wrong size on NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerInducedSleepWithDreamAttack");
static_assert(offsetof(NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerInducedSleepWithDreamAttack, Survivor) == 0x000000, "Member 'NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerInducedSleepWithDreamAttack::Survivor' has a wrong offset!");
static_assert(offsetof(NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerInducedSleepWithDreamAttack, Killer) == 0x000008, "Member 'NightmareSurvivorCosmeticHelperActor_Cosmetic_OnPlayerInducedSleepWithDreamAttack::Killer' has a wrong offset!");

// Function TheNightmare.NightmareSurvivorCosmeticHelperActor.Cosmetic_ShouldShowTeleportWarning
// 0x0001 (0x0001 - 0x0000)
struct NightmareSurvivorCosmeticHelperActor_Cosmetic_ShouldShowTeleportWarning final
{
public:
	bool                                          ShouldShow;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NightmareSurvivorCosmeticHelperActor_Cosmetic_ShouldShowTeleportWarning) == 0x000001, "Wrong alignment on NightmareSurvivorCosmeticHelperActor_Cosmetic_ShouldShowTeleportWarning");
static_assert(sizeof(NightmareSurvivorCosmeticHelperActor_Cosmetic_ShouldShowTeleportWarning) == 0x000001, "Wrong size on NightmareSurvivorCosmeticHelperActor_Cosmetic_ShouldShowTeleportWarning");
static_assert(offsetof(NightmareSurvivorCosmeticHelperActor_Cosmetic_ShouldShowTeleportWarning, ShouldShow) == 0x000000, "Member 'NightmareSurvivorCosmeticHelperActor_Cosmetic_ShouldShowTeleportWarning::ShouldShow' has a wrong offset!");

// Function TheNightmare.NightmareSurvivorCosmeticHelperActor.GetDreamworldComponent
// 0x0008 (0x0008 - 0x0000)
struct NightmareSurvivorCosmeticHelperActor_GetDreamworldComponent final
{
public:
	class USurvivorDreamworldComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NightmareSurvivorCosmeticHelperActor_GetDreamworldComponent) == 0x000008, "Wrong alignment on NightmareSurvivorCosmeticHelperActor_GetDreamworldComponent");
static_assert(sizeof(NightmareSurvivorCosmeticHelperActor_GetDreamworldComponent) == 0x000008, "Wrong size on NightmareSurvivorCosmeticHelperActor_GetDreamworldComponent");
static_assert(offsetof(NightmareSurvivorCosmeticHelperActor_GetDreamworldComponent, ReturnValue) == 0x000000, "Member 'NightmareSurvivorCosmeticHelperActor_GetDreamworldComponent::ReturnValue' has a wrong offset!");

// Function TheNightmare.PlaceDreamPalletInteraction.Cosmetic_DespawnOldDreamPallet
// 0x0008 (0x0008 - 0x0000)
struct PlaceDreamPalletInteraction_Cosmetic_DespawnOldDreamPallet final
{
public:
	class APallet*                                oldDreamPallet;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlaceDreamPalletInteraction_Cosmetic_DespawnOldDreamPallet) == 0x000008, "Wrong alignment on PlaceDreamPalletInteraction_Cosmetic_DespawnOldDreamPallet");
static_assert(sizeof(PlaceDreamPalletInteraction_Cosmetic_DespawnOldDreamPallet) == 0x000008, "Wrong size on PlaceDreamPalletInteraction_Cosmetic_DespawnOldDreamPallet");
static_assert(offsetof(PlaceDreamPalletInteraction_Cosmetic_DespawnOldDreamPallet, oldDreamPallet) == 0x000000, "Member 'PlaceDreamPalletInteraction_Cosmetic_DespawnOldDreamPallet::oldDreamPallet' has a wrong offset!");

// Function TheNightmare.RememberMe.DidLoseHealthState
// 0x0010 (0x0010 - 0x0000)
struct RememberMe_DidLoseHealthState final
{
public:
	const class AActor*                           DamagedActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         oldHealthStateCount;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RememberMe_DidLoseHealthState) == 0x000008, "Wrong alignment on RememberMe_DidLoseHealthState");
static_assert(sizeof(RememberMe_DidLoseHealthState) == 0x000010, "Wrong size on RememberMe_DidLoseHealthState");
static_assert(offsetof(RememberMe_DidLoseHealthState, DamagedActor) == 0x000000, "Member 'RememberMe_DidLoseHealthState::DamagedActor' has a wrong offset!");
static_assert(offsetof(RememberMe_DidLoseHealthState, oldHealthStateCount) == 0x000008, "Member 'RememberMe_DidLoseHealthState::oldHealthStateCount' has a wrong offset!");
static_assert(offsetof(RememberMe_DidLoseHealthState, ReturnValue) == 0x00000C, "Member 'RememberMe_DidLoseHealthState::ReturnValue' has a wrong offset!");

}

