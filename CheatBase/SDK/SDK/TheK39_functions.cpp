#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK39

#include "Basic.hpp"

#include "TheK39_classes.hpp"
#include "TheK39_parameters.hpp"


namespace SDK
{

// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnAdjustingAlmostComplete
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnAdjustingAlmostComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnAdjustingAlmostComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnAdjustingStateEntered
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnAdjustingStateEntered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnAdjustingStateEntered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnAdjustingTimeExpired
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnAdjustingTimeExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnAdjustingTimeExpired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnCancelChargeTentacleSwing
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnCancelChargeTentacleSwing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnCancelChargeTentacleSwing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnMoriStarted
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnMoriStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnMoriStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnMoriStopped
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnMoriStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnMoriStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnMovementStarted
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnMovementStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnMovementStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnMovementStopped
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnMovementStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnMovementStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnPowerCooldownEnded
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnPowerCooldownEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnPowerCooldownEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnPowerUpModeAdded
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    inWithdrawal                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   withdrawalTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK39KillerCosmeticHelperActor::Cosmetic_OnPowerUpModeAdded(bool inWithdrawal, float withdrawalTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnPowerUpModeAdded");

	Params::K39KillerCosmeticHelperActor_Cosmetic_OnPowerUpModeAdded Parms{};

	Parms.inWithdrawal = inWithdrawal;
	Parms.withdrawalTime = withdrawalTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnPowerUpModeRemoved
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnPowerUpModeRemoved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnPowerUpModeRemoved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnQuickTimeEventFailed
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnQuickTimeEventFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnQuickTimeEventFailed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnQuickTimeEventSucceded
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnQuickTimeEventSucceded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnQuickTimeEventSucceded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnStartChargeTentacleSwing
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnStartChargeTentacleSwing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnStartChargeTentacleSwing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnSurvivorRemovedInfected
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// class ASurvivor*                        Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK39KillerCosmeticHelperActor::Cosmetic_OnSurvivorRemovedInfected(class ASurvivor* Survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnSurvivorRemovedInfected");

	Params::K39KillerCosmeticHelperActor_Cosmetic_OnSurvivorRemovedInfected Parms{};

	Parms.Survivor = Survivor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnTentacleAttached
// (BlueprintCosmetic, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// class ASurvivor*                        Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isNonDamaging                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                PhysicalMaterial                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SurfaceNormal                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK39KillerCosmeticHelperActor::Cosmetic_OnTentacleAttached(class ASurvivor* Survivor, const struct FVector& Location, bool isNonDamaging, class UPhysicalMaterial* PhysicalMaterial, const struct FVector& SurfaceNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnTentacleAttached");

	Params::K39KillerCosmeticHelperActor_Cosmetic_OnTentacleAttached Parms{};

	Parms.Survivor = Survivor;
	Parms.Location = std::move(Location);
	Parms.isNonDamaging = isNonDamaging;
	Parms.PhysicalMaterial = PhysicalMaterial;
	Parms.SurfaceNormal = std::move(SurfaceNormal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnTentacleLaunched
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const bool                              isSuccess                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK39KillerCosmeticHelperActor::Cosmetic_OnTentacleLaunched(const bool isSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnTentacleLaunched");

	Params::K39KillerCosmeticHelperActor_Cosmetic_OnTentacleLaunched Parms{};

	Parms.isSuccess = isSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnTentacleRetracting
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK39KillerCosmeticHelperActor::Cosmetic_OnTentacleRetracting(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnTentacleRetracting");

	Params::K39KillerCosmeticHelperActor_Cosmetic_OnTentacleRetracting Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnTentacleSwingCancelled
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnTentacleSwingCancelled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnTentacleSwingCancelled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnTentacleSwingCharged
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnTentacleSwingCharged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnTentacleSwingCharged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnTentacleSwingEnded
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnTentacleSwingEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnTentacleSwingEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnTentacleSwingEndedHitCollision
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnTentacleSwingEndedHitCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnTentacleSwingEndedHitCollision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnVaultDamageSurvivor
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// class ASurvivor*                        hitSurvivor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK39KillerCosmeticHelperActor::Cosmetic_OnVaultDamageSurvivor(class ASurvivor* hitSurvivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnVaultDamageSurvivor");

	Params::K39KillerCosmeticHelperActor_Cosmetic_OnVaultDamageSurvivor Parms{};

	Parms.hitSurvivor = hitSurvivor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnWithdrawalEnd
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    isInPowerupMode                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK39KillerCosmeticHelperActor::Cosmetic_OnWithdrawalEnd(bool isInPowerupMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnWithdrawalEnd");

	Params::K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalEnd Parms{};

	Parms.isInPowerupMode = isInPowerupMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnWithdrawalPause
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnWithdrawalPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnWithdrawalPause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnWithdrawalStart
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// float                                   withdrawalTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK39KillerCosmeticHelperActor::Cosmetic_OnWithdrawalStart(float withdrawalTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnWithdrawalStart");

	Params::K39KillerCosmeticHelperActor_Cosmetic_OnWithdrawalStart Parms{};

	Parms.withdrawalTime = withdrawalTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_OnWithdrawalUnpause
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AK39KillerCosmeticHelperActor::Cosmetic_OnWithdrawalUnpause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_OnWithdrawalUnpause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39KillerCosmeticHelperActor.Cosmetic_UpdateTentacle
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FK39TentacleCosmeticSettings&Settings                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AK39KillerCosmeticHelperActor::Cosmetic_UpdateTentacle(const struct FK39TentacleCosmeticSettings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "Cosmetic_UpdateTentacle");

	Params::K39KillerCosmeticHelperActor_Cosmetic_UpdateTentacle Parms{};

	Parms.Settings = std::move(Settings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK39.K39KillerCosmeticHelperActor.GetTentaclesActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AK39TentaclesActor*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AK39TentaclesActor* AK39KillerCosmeticHelperActor::GetTentaclesActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerCosmeticHelperActor", "GetTentaclesActor");

	Params::K39KillerCosmeticHelperActor_GetTentaclesActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK39.K39ChargeTentacleSwingInteractionDefinition.OnRep_ReplicatedChargeableComponent
// (Final, Native, Private)

void UK39ChargeTentacleSwingInteractionDefinition::OnRep_ReplicatedChargeableComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39ChargeTentacleSwingInteractionDefinition", "OnRep_ReplicatedChargeableComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39CheatComponent.DBD_K39ActivatePowerupEffect
// (Final, Exec, Native, Public)

void UK39CheatComponent::DBD_K39ActivatePowerupEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39CheatComponent", "DBD_K39ActivatePowerupEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39KillerPowerupModeEffect.OnRep_PowerupStatus
// (Final, Native, Private)

void UK39KillerPowerupModeEffect::OnRep_PowerupStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39KillerPowerupModeEffect", "OnRep_PowerupStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39P01.Client_UpdateHudIcon
// (Final, Net, Native, Event, Private, NetClient, Const)
// Parameters:
// float                                   Percent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UK39P01::Client_UpdateHudIcon(float Percent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39P01", "Client_UpdateHudIcon");

	Params::K39P01_Client_UpdateHudIcon Parms{};

	Parms.Percent = Percent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39P01.OnRep_SurvivorBasicHitsCount
// (Final, Native, Private, Const)

void UK39P01::OnRep_SurvivorBasicHitsCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39P01", "OnRep_SurvivorBasicHitsCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39Power.GetTentaclesActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AK39TentaclesActor*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AK39TentaclesActor* AK39Power::GetTentaclesActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39Power", "GetTentaclesActor");

	Params::K39Power_GetTentaclesActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK39.K39PowerAddon19.Multicast_SurvivorScream
// (Net, NetReliable, Native, Event, NetMulticast, Protected, Const)
// Parameters:
// const class ASurvivor*                  Survivor                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UK39PowerAddon19::Multicast_SurvivorScream(const class ASurvivor* Survivor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39PowerAddon19", "Multicast_SurvivorScream");

	Params::K39PowerAddon19_Multicast_SurvivorScream Parms{};

	Parms.Survivor = Survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39PowerAddon20.Multicast_DestroyPallet
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class APallet*                          Pallet                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UK39PowerAddon20::Multicast_DestroyPallet(class APallet* Pallet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39PowerAddon20", "Multicast_DestroyPallet");

	Params::K39PowerAddon20_Multicast_DestroyPallet Parms{};

	Parms.Pallet = Pallet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39SurvivorCosmeticHelperActor.Cosmetic_OnInfectedAdded
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void AK39SurvivorCosmeticHelperActor::Cosmetic_OnInfectedAdded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39SurvivorCosmeticHelperActor", "Cosmetic_OnInfectedAdded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39SurvivorCosmeticHelperActor.Cosmetic_OnInfectedRemoved
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void AK39SurvivorCosmeticHelperActor::Cosmetic_OnInfectedRemoved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39SurvivorCosmeticHelperActor", "Cosmetic_OnInfectedRemoved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheK39.K39SurvivorCosmeticHelperActor.Cosmetic_OnUpdateTargetingReticle
// (BlueprintCosmetic, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASurvivor*                        targetedSurvivor                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              IsNonDamagingSwing                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SurfaceNormal                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK39SurvivorCosmeticHelperActor::Cosmetic_OnUpdateTargetingReticle(const struct FVector& Location, class ASurvivor* targetedSurvivor, const bool IsNonDamagingSwing, const struct FVector& SurfaceNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39SurvivorCosmeticHelperActor", "Cosmetic_OnUpdateTargetingReticle");

	Params::K39SurvivorCosmeticHelperActor_Cosmetic_OnUpdateTargetingReticle Parms{};

	Parms.Location = std::move(Location);
	Parms.targetedSurvivor = targetedSurvivor;
	Parms.IsNonDamagingSwing = IsNonDamagingSwing;
	Parms.SurfaceNormal = std::move(SurfaceNormal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK39.K39TentacleAnimInstance.OnIntroCompleted
// (Final, Native, Public)

void UK39TentacleAnimInstance::OnIntroCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentacleAnimInstance", "OnIntroCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39TentacleAnimInstance.OnLevelReadyToPlay
// (Final, Native, Public)

void UK39TentacleAnimInstance::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentacleAnimInstance", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39TentaclesActor.HandleOwningPlayerCustomizationsChanged
// (Final, Native, Protected)

void AK39TentaclesActor::HandleOwningPlayerCustomizationsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentaclesActor", "HandleOwningPlayerCustomizationsChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39TentaclesActor.SetLongTentaclesVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK39TentaclesActor::SetLongTentaclesVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentaclesActor", "SetLongTentaclesVisibility");

	Params::K39TentaclesActor_SetLongTentaclesVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39TentaclesActor.GetLongTentaclesMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDBDSkeletalMeshComponentBudgeted*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDBDSkeletalMeshComponentBudgeted* AK39TentaclesActor::GetLongTentaclesMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentaclesActor", "GetLongTentaclesMesh");

	Params::K39TentaclesActor_GetLongTentaclesMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK39.K39TentaclesActor.GetMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDBDSkeletalMeshComponentBudgeted*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDBDSkeletalMeshComponentBudgeted* AK39TentaclesActor::GetMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentaclesActor", "GetMesh");

	Params::K39TentaclesActor_GetMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK39.K39TentacleSwingAbility.OnRep_HasBegunQuickTimeEvent
// (Final, Native, Private)

void UK39TentacleSwingAbility::OnRep_HasBegunQuickTimeEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentacleSwingAbility", "OnRep_HasBegunQuickTimeEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39TentacleSwingAbility.OnStun
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FGameplayTag&              GameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameEventData&            GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UK39TentacleSwingAbility::OnStun(const struct FGameplayTag& GameplayTag, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentacleSwingAbility", "OnStun");

	Params::K39TentacleSwingAbility_OnStun Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39TentacleSwingAbility.Server_CacheSwingData
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// const struct FK39TentacleSwingData&     swingData                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// EK39TentacleSwingResult                 swingResult                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UK39TentacleSwingAbility::Server_CacheSwingData(const struct FK39TentacleSwingData& swingData, EK39TentacleSwingResult swingResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentacleSwingAbility", "Server_CacheSwingData");

	Params::K39TentacleSwingAbility_Server_CacheSwingData Parms{};

	Parms.swingData = std::move(swingData);
	Parms.swingResult = swingResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39TentacleSwingSwingingState.OnSurvivorInOwnerRangeChanged
// (Final, Native, Private)
// Parameters:
// const bool                              inRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UK39TentacleSwingSwingingState::OnSurvivorInOwnerRangeChanged(const bool inRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentacleSwingSwingingState", "OnSurvivorInOwnerRangeChanged");

	Params::K39TentacleSwingSwingingState_OnSurvivorInOwnerRangeChanged Parms{};

	Parms.inRange = inRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39TentacleTargetIndicator.Cosmetic_OnReticleBufferChanged
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// float                                   bufferPercent                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK39TentacleTargetIndicator::Cosmetic_OnReticleBufferChanged(float bufferPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentacleTargetIndicator", "Cosmetic_OnReticleBufferChanged");

	Params::K39TentacleTargetIndicator_Cosmetic_OnReticleBufferChanged Parms{};

	Parms.bufferPercent = bufferPercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK39.K39TentacleTargetIndicator.Cosmetic_OnSettingsChanged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// const struct FK39TentacleTargetIndicatorSettings&previousSettings                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FK39TentacleTargetIndicatorSettings&Settings                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AK39TentacleTargetIndicator::Cosmetic_OnSettingsChanged(const struct FK39TentacleTargetIndicatorSettings& previousSettings, const struct FK39TentacleTargetIndicatorSettings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentacleTargetIndicator", "Cosmetic_OnSettingsChanged");

	Params::K39TentacleTargetIndicator_Cosmetic_OnSettingsChanged Parms{};

	Parms.previousSettings = std::move(previousSettings);
	Parms.Settings = std::move(Settings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK39.K39TentacleTargetIndicator.Cosmetic_UpdateIndicatorStrength
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// float                                   distanceModifier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK39TentacleTargetIndicator::Cosmetic_UpdateIndicatorStrength(float distanceModifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentacleTargetIndicator", "Cosmetic_UpdateIndicatorStrength");

	Params::K39TentacleTargetIndicator_Cosmetic_UpdateIndicatorStrength Parms{};

	Parms.distanceModifier = distanceModifier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK39.K39TentacleTargetIndicator.GetSettings
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FK39TentacleTargetIndicatorSettingsReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FK39TentacleTargetIndicatorSettings AK39TentacleTargetIndicator::GetSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentacleTargetIndicator", "GetSettings");

	Params::K39TentacleTargetIndicator_GetSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK39.K39TentacleTargetingComponent.MakeGrabSurvivorSwingData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   HitLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Destination                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   CameraDirection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASurvivor**                       TargetSurvivor                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FK39TentacleSwingData            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FK39TentacleSwingData UK39TentacleTargetingComponent::MakeGrabSurvivorSwingData(const struct FVector& HitLocation, const struct FVector& Destination, const struct FVector& CameraDirection, class ASurvivor** TargetSurvivor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentacleTargetingComponent", "MakeGrabSurvivorSwingData");

	Params::K39TentacleTargetingComponent_MakeGrabSurvivorSwingData Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.Destination = std::move(Destination);
	Parms.CameraDirection = std::move(CameraDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TargetSurvivor != nullptr)
		*TargetSurvivor = Parms.TargetSurvivor;

	return Parms.ReturnValue;
}


// Function TheK39.K39TentacleTargetingComponent.MakeInvalidSurfaceSwingData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   IndicatorLocation                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SurfaceNormal                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   CameraDirection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FK39TentacleSwingData            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FK39TentacleSwingData UK39TentacleTargetingComponent::MakeInvalidSurfaceSwingData(const struct FVector& IndicatorLocation, const struct FVector& SurfaceNormal, const struct FVector& CameraDirection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentacleTargetingComponent", "MakeInvalidSurfaceSwingData");

	Params::K39TentacleTargetingComponent_MakeInvalidSurfaceSwingData Parms{};

	Parms.IndicatorLocation = std::move(IndicatorLocation);
	Parms.SurfaceNormal = std::move(SurfaceNormal);
	Parms.CameraDirection = std::move(CameraDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK39.K39TentacleTargetingComponent.MakeInvalidSwingData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   IndicatorLocation                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   CameraDirection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FK39TentacleSwingData            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FK39TentacleSwingData UK39TentacleTargetingComponent::MakeInvalidSwingData(const struct FVector& IndicatorLocation, const struct FVector& CameraDirection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentacleTargetingComponent", "MakeInvalidSwingData");

	Params::K39TentacleTargetingComponent_MakeInvalidSwingData Parms{};

	Parms.IndicatorLocation = std::move(IndicatorLocation);
	Parms.CameraDirection = std::move(CameraDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK39.K39TentacleTargetingComponent.MakeValidSwingData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   Destination                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SurfaceNormal                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   CollisionPoint                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   CameraDirection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                PhysicalMaterial                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FK39TentacleSwingData            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FK39TentacleSwingData UK39TentacleTargetingComponent::MakeValidSwingData(const struct FVector& Destination, const struct FVector& SurfaceNormal, const struct FVector& CollisionPoint, const struct FVector& CameraDirection, class UPhysicalMaterial* PhysicalMaterial) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39TentacleTargetingComponent", "MakeValidSwingData");

	Params::K39TentacleTargetingComponent_MakeValidSwingData Parms{};

	Parms.Destination = std::move(Destination);
	Parms.SurfaceNormal = std::move(SurfaceNormal);
	Parms.CollisionPoint = std::move(CollisionPoint);
	Parms.CameraDirection = std::move(CameraDirection);
	Parms.PhysicalMaterial = PhysicalMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK39.K39Utilities.IsSurvivorAbleToBeAffectedByPower
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class ASurvivor*                  Survivor                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AKiller*                    Killer                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UK39Utilities::IsSurvivorAbleToBeAffectedByPower(const class ASurvivor* Survivor, const class AKiller* Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("K39Utilities", "IsSurvivorAbleToBeAffectedByPower");

	Params::K39Utilities_IsSurvivorAbleToBeAffectedByPower Parms{};

	Parms.Survivor = Survivor;
	Parms.Killer = Killer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheK39.K39VaultInteraction.Cosmetic_OnTentacleGrabDamage
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ASurvivor*                        hitSurvivor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              isDowned                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UK39VaultInteraction::Cosmetic_OnTentacleGrabDamage(class ASurvivor* hitSurvivor, const bool isDowned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39VaultInteraction", "Cosmetic_OnTentacleGrabDamage");

	Params::K39VaultInteraction_Cosmetic_OnTentacleGrabDamage Parms{};

	Parms.hitSurvivor = hitSurvivor;
	Parms.isDowned = isDowned;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheK39.K39VaultInteraction.Multicast_DamageWithTentacle
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASurvivor*                        hitSurvivor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              isDowned                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UK39VaultInteraction::Multicast_DamageWithTentacle(class ADBDPlayer* Player, class ASurvivor* hitSurvivor, const bool isDowned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39VaultInteraction", "Multicast_DamageWithTentacle");

	Params::K39VaultInteraction_Multicast_DamageWithTentacle Parms{};

	Parms.Player = Player;
	Parms.hitSurvivor = hitSurvivor;
	Parms.isDowned = isDowned;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheK39.K39VaultInteraction.Multicast_WillHitSurvivor
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void UK39VaultInteraction::Multicast_WillHitSurvivor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K39VaultInteraction", "Multicast_WillHitSurvivor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

