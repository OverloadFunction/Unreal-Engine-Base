#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDAnimation

#include "Basic.hpp"

#include "DBDAnimation_classes.hpp"
#include "DBDAnimation_parameters.hpp"


namespace SDK
{

// Function DBDAnimation.DBDBaseAnimInstance.HasBeenNotified
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       AnimNotify                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDBDBaseAnimInstance::HasBeenNotified(const class FName AnimNotify) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDBaseAnimInstance", "HasBeenNotified");

	Params::DBDBaseAnimInstance_HasBeenNotified Parms{};

	Parms.AnimNotify = AnimNotify;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDAnimation.PlayerAnimInstance.OnIntroCompleted
// (Native, Protected)

void UPlayerAnimInstance::OnIntroCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerAnimInstance", "OnIntroCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.PlayerAnimInstance.OnLevelReadyToPlay
// (Final, Native, Protected)

void UPlayerAnimInstance::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerAnimInstance", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.PlayerAnimInstance.UnlinkAnimationLayer
// (Final, Native, Public, BlueprintCallable)

void UPlayerAnimInstance::UnlinkAnimationLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerAnimInstance", "UnlinkAnimationLayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.PlayerAnimInstance.GetOwningPlayer
// (Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class ADBDPlayer*                 ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class ADBDPlayer* UPlayerAnimInstance::GetOwningPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerAnimInstance", "GetOwningPlayer");

	Params::PlayerAnimInstance_GetOwningPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDAnimation.BaseSurvivorAnimInstance.GetOwningSurvivor
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class ASurvivor*                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class ASurvivor* UBaseSurvivorAnimInstance::GetOwningSurvivor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSurvivorAnimInstance", "GetOwningSurvivor");

	Params::BaseSurvivorAnimInstance_GetOwningSurvivor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDAnimation.BaseSurvivorAnimInstance.IsPlayingMontageByName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MontageID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseSurvivorAnimInstance::IsPlayingMontageByName(class FName MontageID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseSurvivorAnimInstance", "IsPlayingMontageByName");

	Params::BaseSurvivorAnimInstance_IsPlayingMontageByName Parms{};

	Parms.MontageID = MontageID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDAnimation.BaseKillerAnimInstance.DBD_ForceAnimPOV
// (Final, Exec, Native, Private)
// Parameters:
// const int32                             animPOV                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseKillerAnimInstance::DBD_ForceAnimPOV(const int32 animPOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseKillerAnimInstance", "DBD_ForceAnimPOV");

	Params::BaseKillerAnimInstance_DBD_ForceAnimPOV Parms{};

	Parms.animPOV = animPOV;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.BaseKillerAnimInstance.GetOwningKiller
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AKiller*                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class AKiller* UBaseKillerAnimInstance::GetOwningKiller() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseKillerAnimInstance", "GetOwningKiller");

	Params::BaseKillerAnimInstance_GetOwningKiller Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDAnimation.KillerAnimInstance.GetWeaponCustomizationId
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UKillerAnimInstance::GetWeaponCustomizationId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillerAnimInstance", "GetWeaponCustomizationId");

	Params::KillerAnimInstance_GetWeaponCustomizationId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDAnimation.BaseKillerAttackSubAnimInstance.GetOwningKiller
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AKiller*                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class AKiller* UBaseKillerAttackSubAnimInstance::GetOwningKiller() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseKillerAttackSubAnimInstance", "GetOwningKiller");

	Params::BaseKillerAttackSubAnimInstance_GetOwningKiller Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDAnimation.ArmIKSurvivorSubAnimInstance.ChangeMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EArmIkMode                        NewMode                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArmIKSurvivorSubAnimInstance::ChangeMode(const EArmIkMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArmIKSurvivorSubAnimInstance", "ChangeMode");

	Params::ArmIKSurvivorSubAnimInstance_ChangeMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.PalletAnimInstance.OnBeingDestroyedStarted
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPalletAnimInstance::OnBeingDestroyedStarted(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PalletAnimInstance", "OnBeingDestroyedStarted");

	Params::PalletAnimInstance_OnBeingDestroyedStarted Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.PalletAnimInstance.OnBeingDestroyedStopped
// (Final, Native, Private)

void UPalletAnimInstance::OnBeingDestroyedStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PalletAnimInstance", "OnBeingDestroyedStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.PalletAnimInstance.OnBeingPulledUpStarted
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPalletAnimInstance::OnBeingPulledUpStarted(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PalletAnimInstance", "OnBeingPulledUpStarted");

	Params::PalletAnimInstance_OnBeingPulledUpStarted Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.PalletAnimInstance.OnBeingPulledUpStopped
// (Final, Native, Private)

void UPalletAnimInstance::OnBeingPulledUpStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PalletAnimInstance", "OnBeingPulledUpStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.PalletAnimInstance.OnBeingRepairedStarted
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPalletAnimInstance::OnBeingRepairedStarted(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PalletAnimInstance", "OnBeingRepairedStarted");

	Params::PalletAnimInstance_OnBeingRepairedStarted Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.PalletAnimInstance.OnBeingRepairedStopped
// (Final, Native, Private)

void UPalletAnimInstance::OnBeingRepairedStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PalletAnimInstance", "OnBeingRepairedStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.BaseMenuAnimInstance.OnCustomizationChanged
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class FName>&              customizationArray                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBaseMenuAnimInstance::OnCustomizationChanged(const TArray<class FName>& customizationArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseMenuAnimInstance", "OnCustomizationChanged");

	Params::BaseMenuAnimInstance_OnCustomizationChanged Parms{};

	Parms.customizationArray = std::move(customizationArray);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDAnimation.BaseMenuAnimInstance.RotateMenuPlayerTowardsCamera
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   cameraLookAtOffset                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseMenuAnimInstance::RotateMenuPlayerTowardsCamera(const struct FVector& cameraLookAtOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseMenuAnimInstance", "RotateMenuPlayerTowardsCamera");

	Params::BaseMenuAnimInstance_RotateMenuPlayerTowardsCamera Parms{};

	Parms.cameraLookAtOffset = std::move(cameraLookAtOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.BaseMenuAnimInstance.GetCurrentMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGameFlowStep                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGameFlowStep UBaseMenuAnimInstance::GetCurrentMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseMenuAnimInstance", "GetCurrentMenu");

	Params::BaseMenuAnimInstance_GetCurrentMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDAnimation.BaseMenuAnimInstance.GetOwningMenuPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADBDMenuPlayer*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADBDMenuPlayer* UBaseMenuAnimInstance::GetOwningMenuPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseMenuAnimInstance", "GetOwningMenuPlayer");

	Params::BaseMenuAnimInstance_GetOwningMenuPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDAnimation.BaseMenuAnimInstance.IsInArchiveRift
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseMenuAnimInstance::IsInArchiveRift() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseMenuAnimInstance", "IsInArchiveRift");

	Params::BaseMenuAnimInstance_IsInArchiveRift Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDAnimation.LookAtKillerSubAnimInstance.GetBlendDuration
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULookAtKillerSubAnimInstance::GetBlendDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LookAtKillerSubAnimInstance", "GetBlendDuration");

	Params::LookAtKillerSubAnimInstance_GetBlendDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDAnimation.LookAtKillerSubAnimInstance.IsLookAtAllowed
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULookAtKillerSubAnimInstance::IsLookAtAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LookAtKillerSubAnimInstance", "IsLookAtAllowed");

	Params::LookAtKillerSubAnimInstance_IsLookAtAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDAnimation.ChestAnimInstance.OnBeingPriedOpenStarted
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChestAnimInstance::OnBeingPriedOpenStarted(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChestAnimInstance", "OnBeingPriedOpenStarted");

	Params::ChestAnimInstance_OnBeingPriedOpenStarted Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.ChestAnimInstance.OnBeingPriedOpenStopped
// (Final, Native, Private)

void UChestAnimInstance::OnBeingPriedOpenStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChestAnimInstance", "OnBeingPriedOpenStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.ChestAnimInstance.OnIsOpenedChanged
// (Final, Native, Private)
// Parameters:
// const bool                              isOpened                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChestAnimInstance::OnIsOpenedChanged(const bool isOpened)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChestAnimInstance", "OnIsOpenedChanged");

	Params::ChestAnimInstance_OnIsOpenedChanged Parms{};

	Parms.isOpened = isOpened;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.FireCrackerSurvivorSubAnimInstance.RemovedTags
// (Final, Native, Protected, BlueprintCallable)

void UFireCrackerSurvivorSubAnimInstance::RemovedTags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FireCrackerSurvivorSubAnimInstance", "RemovedTags");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.GeneratorAnimInstance.SetSkillCheckSuccess
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeneratorAnimInstance::SetSkillCheckSuccess(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GeneratorAnimInstance", "SetSkillCheckSuccess");

	Params::GeneratorAnimInstance_SetSkillCheckSuccess Parms{};

	Parms.Success = Success;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.HealSurvivorSubAnimInstance.OnHealerSkillCheckResponseAesthetic
// (Final, Native, Protected)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       healer                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHealSurvivorSubAnimInstance::OnHealerSkillCheckResponseAesthetic(bool Success, class ADBDPlayer* healer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HealSurvivorSubAnimInstance", "OnHealerSkillCheckResponseAesthetic");

	Params::HealSurvivorSubAnimInstance_OnHealerSkillCheckResponseAesthetic Parms{};

	Parms.Success = Success;
	Parms.healer = healer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.HealSurvivorSubAnimInstance.ResetHealerSkillCheckFailed
// (Final, Native, Protected, BlueprintCallable)

void UHealSurvivorSubAnimInstance::ResetHealerSkillCheckFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HealSurvivorSubAnimInstance", "ResetHealerSkillCheckFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.LookAtTargetKillerSubAnimInstance.OnChaseEnded
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   chaseTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULookAtTargetKillerSubAnimInstance::OnChaseEnded(class ADBDPlayer* Target, float chaseTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LookAtTargetKillerSubAnimInstance", "OnChaseEnded");

	Params::LookAtTargetKillerSubAnimInstance_OnChaseEnded Parms{};

	Parms.Target = Target;
	Parms.chaseTime = chaseTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.LookAtTargetKillerSubAnimInstance.OnChaseStarted
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULookAtTargetKillerSubAnimInstance::OnChaseStarted(class ADBDPlayer* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LookAtTargetKillerSubAnimInstance", "OnChaseStarted");

	Params::LookAtTargetKillerSubAnimInstance_OnChaseStarted Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.OnPlayerOverlapAnimInstance.OnActivePhaseDone
// (Final, Native, Public, BlueprintCallable)

void UOnPlayerOverlapAnimInstance::OnActivePhaseDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnPlayerOverlapAnimInstance", "OnActivePhaseDone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.OnPlayerOverlapAnimInstance.OnCollisionOverlapBegin
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UOnPlayerOverlapAnimInstance::OnCollisionOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnPlayerOverlapAnimInstance", "OnCollisionOverlapBegin");

	Params::OnPlayerOverlapAnimInstance_OnCollisionOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.OnPlayerOverlapAnimInstance.OnCollisionOverlapEnd
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOnPlayerOverlapAnimInstance::OnCollisionOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnPlayerOverlapAnimInstance", "OnCollisionOverlapEnd");

	Params::OnPlayerOverlapAnimInstance_OnCollisionOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.RepairGeneratorSurvivorSubAnimInstance.UpdatePostSkillCheckResponse
// (Final, Native, Protected, BlueprintCallable)

void URepairGeneratorSurvivorSubAnimInstance::UpdatePostSkillCheckResponse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RepairGeneratorSurvivorSubAnimInstance", "UpdatePostSkillCheckResponse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.ScreamSurvivorSubAnimInstance.ResetScreamTrigger
// (Final, Native, Protected, BlueprintCallable)

void UScreamSurvivorSubAnimInstance::ResetScreamTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScreamSurvivorSubAnimInstance", "ResetScreamTrigger");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.SkillCheckFailureTracker.OnSkillCheckFailed
// (Native, Protected, HasOutParams)
// Parameters:
// const struct FGameplayTag&              gameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameEventData&            GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ISkillCheckFailureTracker::OnSkillCheckFailed(const struct FGameplayTag& gameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SkillCheckFailureTracker", "OnSkillCheckFailed");

	Params::SkillCheckFailureTracker_OnSkillCheckFailed Parms{};

	Parms.gameEventType = std::move(gameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDAnimation.SkillCheckFailureTracker.ResetSkillCheckFailed
// (Native, Public, BlueprintCallable)

void ISkillCheckFailureTracker::ResetSkillCheckFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SkillCheckFailureTracker", "ResetSkillCheckFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

