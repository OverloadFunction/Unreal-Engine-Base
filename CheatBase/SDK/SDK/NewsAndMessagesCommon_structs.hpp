#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NewsAndMessagesCommon

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK
{

// Enum NewsAndMessagesCommon.ENewsAndMessagesSectionType
// NumValues: 0x0007
enum class ENewsAndMessagesSectionType : uint8
{
	None                                     = 0,
	Header                                   = 1,
	Text                                     = 2,
	Image                                    = 3,
	QRCode                                   = 4,
	ItemShowcase                             = 5,
	ENewsAndMessagesSectionType_MAX          = 6,
};

// Enum NewsAndMessagesCommon.ENewsAndMessagesShowcasedItemType
// NumValues: 0x0005
enum class ENewsAndMessagesShowcasedItemType : uint8
{
	Character                                = 0,
	Customization                            = 1,
	Outfit                                   = 2,
	Currency                                 = 3,
	ENewsAndMessagesShowcasedItemType_MAX    = 4,
};

// Enum NewsAndMessagesCommon.ENewsAndMessagesIconType
// NumValues: 0x0005
enum class ENewsAndMessagesIconType : uint8
{
	None                                     = 0,
	News                                     = 1,
	Message                                  = 2,
	Reward                                   = 3,
	ENewsAndMessagesIconType_MAX             = 4,
};

// ScriptStruct NewsAndMessagesCommon.NewsAndMessagesRuntimeShowcasedItem
// 0x0028 (0x0028 - 0x0000)
struct FNewsAndMessagesRuntimeShowcasedItem final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0020(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsAndMessagesRuntimeShowcasedItem) == 0x000008, "Wrong alignment on FNewsAndMessagesRuntimeShowcasedItem");
static_assert(sizeof(FNewsAndMessagesRuntimeShowcasedItem) == 0x000028, "Wrong size on FNewsAndMessagesRuntimeShowcasedItem");
static_assert(offsetof(FNewsAndMessagesRuntimeShowcasedItem, Type) == 0x000000, "Member 'FNewsAndMessagesRuntimeShowcasedItem::Type' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesRuntimeShowcasedItem, ID) == 0x000010, "Member 'FNewsAndMessagesRuntimeShowcasedItem::ID' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesRuntimeShowcasedItem, Amount) == 0x000020, "Member 'FNewsAndMessagesRuntimeShowcasedItem::Amount' has a wrong offset!");

// ScriptStruct NewsAndMessagesCommon.NewsAndMessagesShowcasedItem
// 0x0040 (0x0040 - 0x0000)
struct FNewsAndMessagesShowcasedItem final
{
public:
	ENewsAndMessagesShowcasedItemType             Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 customizationId;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutfitId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECurrencyType                                 currencyId;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewsAndMessagesShowcasedItem) == 0x000008, "Wrong alignment on FNewsAndMessagesShowcasedItem");
static_assert(sizeof(FNewsAndMessagesShowcasedItem) == 0x000040, "Wrong size on FNewsAndMessagesShowcasedItem");
static_assert(offsetof(FNewsAndMessagesShowcasedItem, Type) == 0x000000, "Member 'FNewsAndMessagesShowcasedItem::Type' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesShowcasedItem, CharacterId) == 0x000008, "Member 'FNewsAndMessagesShowcasedItem::CharacterId' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesShowcasedItem, customizationId) == 0x000018, "Member 'FNewsAndMessagesShowcasedItem::customizationId' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesShowcasedItem, OutfitId) == 0x000028, "Member 'FNewsAndMessagesShowcasedItem::OutfitId' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesShowcasedItem, currencyId) == 0x000038, "Member 'FNewsAndMessagesShowcasedItem::currencyId' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesShowcasedItem, Amount) == 0x00003C, "Member 'FNewsAndMessagesShowcasedItem::Amount' has a wrong offset!");

// ScriptStruct NewsAndMessagesCommon.NewsAndMessagesSection
// 0x0070 (0x0070 - 0x0000)
struct FNewsAndMessagesSection final
{
public:
	ENewsAndMessagesSectionType                   Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 QRCodeUri;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QRCodeIsApprovedOnSwitch;                          // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        Image;                                             // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNewsAndMessagesShowcasedItem>  ShowcasedItems;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewsAndMessagesSection) == 0x000008, "Wrong alignment on FNewsAndMessagesSection");
static_assert(sizeof(FNewsAndMessagesSection) == 0x000070, "Wrong size on FNewsAndMessagesSection");
static_assert(offsetof(FNewsAndMessagesSection, Type) == 0x000000, "Member 'FNewsAndMessagesSection::Type' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesSection, Text) == 0x000008, "Member 'FNewsAndMessagesSection::Text' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesSection, QRCodeUri) == 0x000020, "Member 'FNewsAndMessagesSection::QRCodeUri' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesSection, QRCodeIsApprovedOnSwitch) == 0x000030, "Member 'FNewsAndMessagesSection::QRCodeIsApprovedOnSwitch' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesSection, Image) == 0x000038, "Member 'FNewsAndMessagesSection::Image' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesSection, ShowcasedItems) == 0x000060, "Member 'FNewsAndMessagesSection::ShowcasedItems' has a wrong offset!");

// ScriptStruct NewsAndMessagesCommon.NewsAndMessagesImage
// 0x0030 (0x0030 - 0x0000)
struct FNewsAndMessagesImage final
{
public:
	class FString                                 Uri;                                               // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackagedPath;                                      // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentVersion;                                    // 0x0020(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewsAndMessagesImage) == 0x000008, "Wrong alignment on FNewsAndMessagesImage");
static_assert(sizeof(FNewsAndMessagesImage) == 0x000030, "Wrong size on FNewsAndMessagesImage");
static_assert(offsetof(FNewsAndMessagesImage, Uri) == 0x000000, "Member 'FNewsAndMessagesImage::Uri' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesImage, PackagedPath) == 0x000010, "Member 'FNewsAndMessagesImage::PackagedPath' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesImage, ContentVersion) == 0x000020, "Member 'FNewsAndMessagesImage::ContentVersion' has a wrong offset!");

// ScriptStruct NewsAndMessagesCommon.NewsAndMessagesRuntimeSection
// 0x0088 (0x0088 - 0x0000)
struct FNewsAndMessagesRuntimeSection final
{
public:
	ENewsAndMessagesSectionType                   Type;                                              // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0008(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Text_IsSet;                                        // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNewsAndMessagesImage                  Image;                                             // 0x0020(0x0030)(Transient, NativeAccessSpecifierPublic)
	bool                                          Image_IsSet;                                       // 0x0050(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNewsAndMessagesRuntimeShowcasedItem> Rewards;                                     // 0x0058(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          Rewards_IsSet;                                     // 0x0068(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QRCode;                                            // 0x0070(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QRCode_IsSet;                                      // 0x0080(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwitchKillSwitch;                                  // 0x0081(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwitchKillSwitch_IsSet;                            // 0x0082(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsAndMessagesRuntimeSection) == 0x000008, "Wrong alignment on FNewsAndMessagesRuntimeSection");
static_assert(sizeof(FNewsAndMessagesRuntimeSection) == 0x000088, "Wrong size on FNewsAndMessagesRuntimeSection");
static_assert(offsetof(FNewsAndMessagesRuntimeSection, Type) == 0x000000, "Member 'FNewsAndMessagesRuntimeSection::Type' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesRuntimeSection, Text) == 0x000008, "Member 'FNewsAndMessagesRuntimeSection::Text' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesRuntimeSection, Text_IsSet) == 0x000018, "Member 'FNewsAndMessagesRuntimeSection::Text_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesRuntimeSection, Image) == 0x000020, "Member 'FNewsAndMessagesRuntimeSection::Image' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesRuntimeSection, Image_IsSet) == 0x000050, "Member 'FNewsAndMessagesRuntimeSection::Image_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesRuntimeSection, Rewards) == 0x000058, "Member 'FNewsAndMessagesRuntimeSection::Rewards' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesRuntimeSection, Rewards_IsSet) == 0x000068, "Member 'FNewsAndMessagesRuntimeSection::Rewards_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesRuntimeSection, QRCode) == 0x000070, "Member 'FNewsAndMessagesRuntimeSection::QRCode' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesRuntimeSection, QRCode_IsSet) == 0x000080, "Member 'FNewsAndMessagesRuntimeSection::QRCode_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesRuntimeSection, SwitchKillSwitch) == 0x000081, "Member 'FNewsAndMessagesRuntimeSection::SwitchKillSwitch' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesRuntimeSection, SwitchKillSwitch_IsSet) == 0x000082, "Member 'FNewsAndMessagesRuntimeSection::SwitchKillSwitch_IsSet' has a wrong offset!");

// ScriptStruct NewsAndMessagesCommon.NewsAndMessagesCallToAction
// 0x0038 (0x0038 - 0x0000)
struct FNewsAndMessagesCallToAction final
{
public:
	class FString                                 Link;                                              // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraText;                                         // 0x0020(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExtraText_IsSet;                                   // 0x0030(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldPresentAsQRCode;                             // 0x0031(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QRCodeIsApprovedOnSwitch;                          // 0x0032(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsAndMessagesCallToAction) == 0x000008, "Wrong alignment on FNewsAndMessagesCallToAction");
static_assert(sizeof(FNewsAndMessagesCallToAction) == 0x000038, "Wrong size on FNewsAndMessagesCallToAction");
static_assert(offsetof(FNewsAndMessagesCallToAction, Link) == 0x000000, "Member 'FNewsAndMessagesCallToAction::Link' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesCallToAction, Text) == 0x000010, "Member 'FNewsAndMessagesCallToAction::Text' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesCallToAction, ExtraText) == 0x000020, "Member 'FNewsAndMessagesCallToAction::ExtraText' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesCallToAction, ExtraText_IsSet) == 0x000030, "Member 'FNewsAndMessagesCallToAction::ExtraText_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesCallToAction, ShouldPresentAsQRCode) == 0x000031, "Member 'FNewsAndMessagesCallToAction::ShouldPresentAsQRCode' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesCallToAction, QRCodeIsApprovedOnSwitch) == 0x000032, "Member 'FNewsAndMessagesCallToAction::QRCodeIsApprovedOnSwitch' has a wrong offset!");

// ScriptStruct NewsAndMessagesCommon.NewsAndMessagesBodyRuntimeData
// 0x0088 (0x0088 - 0x0000)
struct FNewsAndMessagesBodyRuntimeData final
{
public:
	TArray<struct FNewsAndMessagesRuntimeSection> Sections;                                          // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FNewsAndMessagesCallToAction           CallToAction;                                      // 0x0010(0x0038)(Transient, NativeAccessSpecifierPublic)
	bool                                          CallToAction_IsSet;                                // 0x0048(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNewsAndMessagesImage                  Image;                                             // 0x0050(0x0030)(Transient, NativeAccessSpecifierPublic)
	bool                                          Image_IsSet;                                       // 0x0080(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsAndMessagesBodyRuntimeData) == 0x000008, "Wrong alignment on FNewsAndMessagesBodyRuntimeData");
static_assert(sizeof(FNewsAndMessagesBodyRuntimeData) == 0x000088, "Wrong size on FNewsAndMessagesBodyRuntimeData");
static_assert(offsetof(FNewsAndMessagesBodyRuntimeData, Sections) == 0x000000, "Member 'FNewsAndMessagesBodyRuntimeData::Sections' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesBodyRuntimeData, CallToAction) == 0x000010, "Member 'FNewsAndMessagesBodyRuntimeData::CallToAction' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesBodyRuntimeData, CallToAction_IsSet) == 0x000048, "Member 'FNewsAndMessagesBodyRuntimeData::CallToAction_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesBodyRuntimeData, Image) == 0x000050, "Member 'FNewsAndMessagesBodyRuntimeData::Image' has a wrong offset!");
static_assert(offsetof(FNewsAndMessagesBodyRuntimeData, Image_IsSet) == 0x000080, "Member 'FNewsAndMessagesBodyRuntimeData::Image_IsSet' has a wrong offset!");

// ScriptStruct NewsAndMessagesCommon.NewsAndMessagesBodyData
// 0x0010 (0x0010 - 0x0000)
struct FNewsAndMessagesBodyData final
{
public:
	TArray<struct FNewsAndMessagesSection>        Sections;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewsAndMessagesBodyData) == 0x000008, "Wrong alignment on FNewsAndMessagesBodyData");
static_assert(sizeof(FNewsAndMessagesBodyData) == 0x000010, "Wrong size on FNewsAndMessagesBodyData");
static_assert(offsetof(FNewsAndMessagesBodyData, Sections) == 0x000000, "Member 'FNewsAndMessagesBodyData::Sections' has a wrong offset!");

}

