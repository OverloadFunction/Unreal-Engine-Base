#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SnowmanWinterEvent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DataTableUtilities_structs.hpp"


namespace SDK
{

// Enum SnowmanWinterEvent.ESnowmanState
// NumValues: 0x0006
enum class ESnowmanState : uint8
{
	Idle                                     = 0,
	WillEnterAfterSpawn                      = 1,
	BeingEntered                             = 2,
	Controlled                               = 3,
	Destroyed                                = 4,
	ESnowmanState_MAX                        = 5,
};

// Enum SnowmanWinterEvent.ESnowmanDestructionType
// NumValues: 0x000A
enum class ESnowmanDestructionType : uint8
{
	None                                     = 0,
	SurvivorRunExit                          = 1,
	KillerAttackExit                         = 2,
	KillerCancelExit                         = 3,
	KillerAttackWhileControlled              = 4,
	KillerAttackWhileEmpty                   = 5,
	NonDamagingAttackWhileControlled         = 6,
	NonDamagingAttackWhileEmpty              = 7,
	PlayerStunned                            = 8,
	ESnowmanDestructionType_MAX              = 9,
};

// ScriptStruct SnowmanWinterEvent.SnowmanSpawnData
// 0x0030 (0x0030 - 0x0000)
struct FSnowmanSpawnData final
{
public:
	struct FVector                                SpawnLocation;                                     // 0x0000(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0018(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnowmanSpawnData) == 0x000008, "Wrong alignment on FSnowmanSpawnData");
static_assert(sizeof(FSnowmanSpawnData) == 0x000030, "Wrong size on FSnowmanSpawnData");
static_assert(offsetof(FSnowmanSpawnData, SpawnLocation) == 0x000000, "Member 'FSnowmanSpawnData::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FSnowmanSpawnData, SpawnRotation) == 0x000018, "Member 'FSnowmanSpawnData::SpawnRotation' has a wrong offset!");

// ScriptStruct SnowmanWinterEvent.SnowmanVariant
// 0x00D8 (0x00D8 - 0x0000)
struct FSnowmanVariant final
{
public:
	struct FDBDTunableRowHandle                   MaxNumSpawnableInstances;                          // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDBDTunableRowHandle                   SimultaneousInstancesLimit;                        // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDBDTunableRowHandle                   PercentChanceSpawn;                                // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDBDTunableRowHandle                   RespawnLimit;                                      // 0x0078(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDBDTunableRowHandle                   MinNumInstancesAtStart;                            // 0x00A0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAuthoritativeActorPoolComponent*       Pool;                                              // 0x00C8(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnowmanVariant) == 0x000008, "Wrong alignment on FSnowmanVariant");
static_assert(sizeof(FSnowmanVariant) == 0x0000D8, "Wrong size on FSnowmanVariant");
static_assert(offsetof(FSnowmanVariant, MaxNumSpawnableInstances) == 0x000000, "Member 'FSnowmanVariant::MaxNumSpawnableInstances' has a wrong offset!");
static_assert(offsetof(FSnowmanVariant, SimultaneousInstancesLimit) == 0x000028, "Member 'FSnowmanVariant::SimultaneousInstancesLimit' has a wrong offset!");
static_assert(offsetof(FSnowmanVariant, PercentChanceSpawn) == 0x000050, "Member 'FSnowmanVariant::PercentChanceSpawn' has a wrong offset!");
static_assert(offsetof(FSnowmanVariant, RespawnLimit) == 0x000078, "Member 'FSnowmanVariant::RespawnLimit' has a wrong offset!");
static_assert(offsetof(FSnowmanVariant, MinNumInstancesAtStart) == 0x0000A0, "Member 'FSnowmanVariant::MinNumInstancesAtStart' has a wrong offset!");
static_assert(offsetof(FSnowmanVariant, Pool) == 0x0000C8, "Member 'FSnowmanVariant::Pool' has a wrong offset!");

// ScriptStruct SnowmanWinterEvent.SnowmanSpawnLocationData
// 0x0030 (0x0030 - 0x0000)
struct FSnowmanSpawnLocationData final
{
public:
	struct FVector                                OriginLocation;                                    // 0x0000(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        NavmeshLocations;                                  // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnowmanSpawnLocationData) == 0x000008, "Wrong alignment on FSnowmanSpawnLocationData");
static_assert(sizeof(FSnowmanSpawnLocationData) == 0x000030, "Wrong size on FSnowmanSpawnLocationData");
static_assert(offsetof(FSnowmanSpawnLocationData, OriginLocation) == 0x000000, "Member 'FSnowmanSpawnLocationData::OriginLocation' has a wrong offset!");
static_assert(offsetof(FSnowmanSpawnLocationData, NavmeshLocations) == 0x000018, "Member 'FSnowmanSpawnLocationData::NavmeshLocations' has a wrong offset!");

}

