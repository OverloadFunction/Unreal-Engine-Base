#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK36

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "TheK36_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimationUtilities_structs.hpp"


namespace SDK::Params
{

// Function TheK36.K36ArtifactPowerComponent.Cosmetic_ApplySmokeEffectOnLocker
// 0x0008 (0x0008 - 0x0000)
struct K36ArtifactPowerComponent_Cosmetic_ApplySmokeEffectOnLocker final
{
public:
	class ALocker*                                Locker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36ArtifactPowerComponent_Cosmetic_ApplySmokeEffectOnLocker) == 0x000008, "Wrong alignment on K36ArtifactPowerComponent_Cosmetic_ApplySmokeEffectOnLocker");
static_assert(sizeof(K36ArtifactPowerComponent_Cosmetic_ApplySmokeEffectOnLocker) == 0x000008, "Wrong size on K36ArtifactPowerComponent_Cosmetic_ApplySmokeEffectOnLocker");
static_assert(offsetof(K36ArtifactPowerComponent_Cosmetic_ApplySmokeEffectOnLocker, Locker) == 0x000000, "Member 'K36ArtifactPowerComponent_Cosmetic_ApplySmokeEffectOnLocker::Locker' has a wrong offset!");

// Function TheK36.K36ArtifactPowerComponent.Cosmetic_ApplySmokeVfxOnOpenedLocker
// 0x0010 (0x0010 - 0x0000)
struct K36ArtifactPowerComponent_Cosmetic_ApplySmokeVfxOnOpenedLocker final
{
public:
	class ALocker*                                Locker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerTeam                                   playerTeam;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K36ArtifactPowerComponent_Cosmetic_ApplySmokeVfxOnOpenedLocker) == 0x000008, "Wrong alignment on K36ArtifactPowerComponent_Cosmetic_ApplySmokeVfxOnOpenedLocker");
static_assert(sizeof(K36ArtifactPowerComponent_Cosmetic_ApplySmokeVfxOnOpenedLocker) == 0x000010, "Wrong size on K36ArtifactPowerComponent_Cosmetic_ApplySmokeVfxOnOpenedLocker");
static_assert(offsetof(K36ArtifactPowerComponent_Cosmetic_ApplySmokeVfxOnOpenedLocker, Locker) == 0x000000, "Member 'K36ArtifactPowerComponent_Cosmetic_ApplySmokeVfxOnOpenedLocker::Locker' has a wrong offset!");
static_assert(offsetof(K36ArtifactPowerComponent_Cosmetic_ApplySmokeVfxOnOpenedLocker, playerTeam) == 0x000008, "Member 'K36ArtifactPowerComponent_Cosmetic_ApplySmokeVfxOnOpenedLocker::playerTeam' has a wrong offset!");

// Function TheK36.K36ArtifactPowerComponent.OnSurvivorDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct K36ArtifactPowerComponent_OnSurvivorDamageStateChanged final
{
public:
	EHealthState                                  oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealthState                                  newDamageState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36ArtifactPowerComponent_OnSurvivorDamageStateChanged) == 0x000001, "Wrong alignment on K36ArtifactPowerComponent_OnSurvivorDamageStateChanged");
static_assert(sizeof(K36ArtifactPowerComponent_OnSurvivorDamageStateChanged) == 0x000002, "Wrong size on K36ArtifactPowerComponent_OnSurvivorDamageStateChanged");
static_assert(offsetof(K36ArtifactPowerComponent_OnSurvivorDamageStateChanged, oldDamageState) == 0x000000, "Member 'K36ArtifactPowerComponent_OnSurvivorDamageStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(K36ArtifactPowerComponent_OnSurvivorDamageStateChanged, newDamageState) == 0x000001, "Member 'K36ArtifactPowerComponent_OnSurvivorDamageStateChanged::newDamageState' has a wrong offset!");

// Function TheK36.K36ArtifactPowerComponent.GetOwningSurvivor
// 0x0008 (0x0008 - 0x0000)
struct K36ArtifactPowerComponent_GetOwningSurvivor final
{
public:
	class ASurvivor*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36ArtifactPowerComponent_GetOwningSurvivor) == 0x000008, "Wrong alignment on K36ArtifactPowerComponent_GetOwningSurvivor");
static_assert(sizeof(K36ArtifactPowerComponent_GetOwningSurvivor) == 0x000008, "Wrong size on K36ArtifactPowerComponent_GetOwningSurvivor");
static_assert(offsetof(K36ArtifactPowerComponent_GetOwningSurvivor, ReturnValue) == 0x000000, "Member 'K36ArtifactPowerComponent_GetOwningSurvivor::ReturnValue' has a wrong offset!");

// Function TheK36.K36ArtifactInvisibilityPowerComponent.Authority_OnSurvivorDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct K36ArtifactInvisibilityPowerComponent_Authority_OnSurvivorDamageStateChanged final
{
public:
	EHealthState                                  oldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealthState                                  newState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36ArtifactInvisibilityPowerComponent_Authority_OnSurvivorDamageStateChanged) == 0x000001, "Wrong alignment on K36ArtifactInvisibilityPowerComponent_Authority_OnSurvivorDamageStateChanged");
static_assert(sizeof(K36ArtifactInvisibilityPowerComponent_Authority_OnSurvivorDamageStateChanged) == 0x000002, "Wrong size on K36ArtifactInvisibilityPowerComponent_Authority_OnSurvivorDamageStateChanged");
static_assert(offsetof(K36ArtifactInvisibilityPowerComponent_Authority_OnSurvivorDamageStateChanged, oldState) == 0x000000, "Member 'K36ArtifactInvisibilityPowerComponent_Authority_OnSurvivorDamageStateChanged::oldState' has a wrong offset!");
static_assert(offsetof(K36ArtifactInvisibilityPowerComponent_Authority_OnSurvivorDamageStateChanged, newState) == 0x000001, "Member 'K36ArtifactInvisibilityPowerComponent_Authority_OnSurvivorDamageStateChanged::newState' has a wrong offset!");

// Function TheK36.K36ArtifactInvisibilityPowerComponent.Multi_TriggerLockerVFXEffects
// 0x0008 (0x0008 - 0x0000)
struct K36ArtifactInvisibilityPowerComponent_Multi_TriggerLockerVFXEffects final
{
public:
	class ALocker*                                Locker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36ArtifactInvisibilityPowerComponent_Multi_TriggerLockerVFXEffects) == 0x000008, "Wrong alignment on K36ArtifactInvisibilityPowerComponent_Multi_TriggerLockerVFXEffects");
static_assert(sizeof(K36ArtifactInvisibilityPowerComponent_Multi_TriggerLockerVFXEffects) == 0x000008, "Wrong size on K36ArtifactInvisibilityPowerComponent_Multi_TriggerLockerVFXEffects");
static_assert(offsetof(K36ArtifactInvisibilityPowerComponent_Multi_TriggerLockerVFXEffects, Locker) == 0x000000, "Member 'K36ArtifactInvisibilityPowerComponent_Multi_TriggerLockerVFXEffects::Locker' has a wrong offset!");

// Function TheK36.K36ArtifactTeleportationPowerComponent.Authority_OnPlayerFastEnteredLocker
// 0x0040 (0x0040 - 0x0000)
struct K36ArtifactTeleportationPowerComponent_Authority_OnPlayerFastEnteredLocker final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36ArtifactTeleportationPowerComponent_Authority_OnPlayerFastEnteredLocker) == 0x000008, "Wrong alignment on K36ArtifactTeleportationPowerComponent_Authority_OnPlayerFastEnteredLocker");
static_assert(sizeof(K36ArtifactTeleportationPowerComponent_Authority_OnPlayerFastEnteredLocker) == 0x000040, "Wrong size on K36ArtifactTeleportationPowerComponent_Authority_OnPlayerFastEnteredLocker");
static_assert(offsetof(K36ArtifactTeleportationPowerComponent_Authority_OnPlayerFastEnteredLocker, GameplayTag) == 0x000000, "Member 'K36ArtifactTeleportationPowerComponent_Authority_OnPlayerFastEnteredLocker::GameplayTag' has a wrong offset!");
static_assert(offsetof(K36ArtifactTeleportationPowerComponent_Authority_OnPlayerFastEnteredLocker, GameEventData) == 0x000010, "Member 'K36ArtifactTeleportationPowerComponent_Authority_OnPlayerFastEnteredLocker::GameEventData' has a wrong offset!");

// Function TheK36.K36ArtifactTeleportationPowerComponent.Multicast_TriggerExitFromLocker
// 0x0010 (0x0010 - 0x0000)
struct K36ArtifactTeleportationPowerComponent_Multicast_TriggerExitFromLocker final
{
public:
	class ALocker*                                initialLocker;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALocker*                                targetLocker;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36ArtifactTeleportationPowerComponent_Multicast_TriggerExitFromLocker) == 0x000008, "Wrong alignment on K36ArtifactTeleportationPowerComponent_Multicast_TriggerExitFromLocker");
static_assert(sizeof(K36ArtifactTeleportationPowerComponent_Multicast_TriggerExitFromLocker) == 0x000010, "Wrong size on K36ArtifactTeleportationPowerComponent_Multicast_TriggerExitFromLocker");
static_assert(offsetof(K36ArtifactTeleportationPowerComponent_Multicast_TriggerExitFromLocker, initialLocker) == 0x000000, "Member 'K36ArtifactTeleportationPowerComponent_Multicast_TriggerExitFromLocker::initialLocker' has a wrong offset!");
static_assert(offsetof(K36ArtifactTeleportationPowerComponent_Multicast_TriggerExitFromLocker, targetLocker) == 0x000008, "Member 'K36ArtifactTeleportationPowerComponent_Multicast_TriggerExitFromLocker::targetLocker' has a wrong offset!");

// Function TheK36.K36CheatComponent.DBD_K36EquipMagicItemOnLocalSurvivor
// 0x0030 (0x0030 - 0x0000)
struct K36CheatComponent_DBD_K36EquipMagicItemOnLocalSurvivor final
{
public:
	class FString                                 magicItemTypeName;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 spellCounterType;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 localPlayerId;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36CheatComponent_DBD_K36EquipMagicItemOnLocalSurvivor) == 0x000008, "Wrong alignment on K36CheatComponent_DBD_K36EquipMagicItemOnLocalSurvivor");
static_assert(sizeof(K36CheatComponent_DBD_K36EquipMagicItemOnLocalSurvivor) == 0x000030, "Wrong size on K36CheatComponent_DBD_K36EquipMagicItemOnLocalSurvivor");
static_assert(offsetof(K36CheatComponent_DBD_K36EquipMagicItemOnLocalSurvivor, magicItemTypeName) == 0x000000, "Member 'K36CheatComponent_DBD_K36EquipMagicItemOnLocalSurvivor::magicItemTypeName' has a wrong offset!");
static_assert(offsetof(K36CheatComponent_DBD_K36EquipMagicItemOnLocalSurvivor, spellCounterType) == 0x000010, "Member 'K36CheatComponent_DBD_K36EquipMagicItemOnLocalSurvivor::spellCounterType' has a wrong offset!");
static_assert(offsetof(K36CheatComponent_DBD_K36EquipMagicItemOnLocalSurvivor, localPlayerId) == 0x000020, "Member 'K36CheatComponent_DBD_K36EquipMagicItemOnLocalSurvivor::localPlayerId' has a wrong offset!");

// Function TheK36.K36CheatComponent.DBD_K36SelectSpell
// 0x0004 (0x0004 - 0x0000)
struct K36CheatComponent_DBD_K36SelectSpell final
{
public:
	int32                                         SpellSlot;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36CheatComponent_DBD_K36SelectSpell) == 0x000004, "Wrong alignment on K36CheatComponent_DBD_K36SelectSpell");
static_assert(sizeof(K36CheatComponent_DBD_K36SelectSpell) == 0x000004, "Wrong size on K36CheatComponent_DBD_K36SelectSpell");
static_assert(offsetof(K36CheatComponent_DBD_K36SelectSpell, SpellSlot) == 0x000000, "Member 'K36CheatComponent_DBD_K36SelectSpell::SpellSlot' has a wrong offset!");

// Function TheK36.K36CheatComponent.DBD_K36ShowSpectralEntityCollisions
// 0x0002 (0x0002 - 0x0000)
struct K36CheatComponent_DBD_K36ShowSpectralEntityCollisions final
{
public:
	bool                                          showCollisions;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          alsoShowNearMissCollisions;                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36CheatComponent_DBD_K36ShowSpectralEntityCollisions) == 0x000001, "Wrong alignment on K36CheatComponent_DBD_K36ShowSpectralEntityCollisions");
static_assert(sizeof(K36CheatComponent_DBD_K36ShowSpectralEntityCollisions) == 0x000002, "Wrong size on K36CheatComponent_DBD_K36ShowSpectralEntityCollisions");
static_assert(offsetof(K36CheatComponent_DBD_K36ShowSpectralEntityCollisions, showCollisions) == 0x000000, "Member 'K36CheatComponent_DBD_K36ShowSpectralEntityCollisions::showCollisions' has a wrong offset!");
static_assert(offsetof(K36CheatComponent_DBD_K36ShowSpectralEntityCollisions, alsoShowNearMissCollisions) == 0x000001, "Member 'K36CheatComponent_DBD_K36ShowSpectralEntityCollisions::alsoShowNearMissCollisions' has a wrong offset!");

// Function TheK36.K36CheatComponent.DBD_K36FillTreasureChestsWithLegendaryMagicItems
// 0x0010 (0x0010 - 0x0000)
struct K36CheatComponent_DBD_K36FillTreasureChestsWithLegendaryMagicItems final
{
public:
	class FString                                 magicItemClassName;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36CheatComponent_DBD_K36FillTreasureChestsWithLegendaryMagicItems) == 0x000008, "Wrong alignment on K36CheatComponent_DBD_K36FillTreasureChestsWithLegendaryMagicItems");
static_assert(sizeof(K36CheatComponent_DBD_K36FillTreasureChestsWithLegendaryMagicItems) == 0x000010, "Wrong size on K36CheatComponent_DBD_K36FillTreasureChestsWithLegendaryMagicItems");
static_assert(offsetof(K36CheatComponent_DBD_K36FillTreasureChestsWithLegendaryMagicItems, magicItemClassName) == 0x000000, "Member 'K36CheatComponent_DBD_K36FillTreasureChestsWithLegendaryMagicItems::magicItemClassName' has a wrong offset!");

// Function TheK36.K36CheatComponent.DBD_K36SetForcedDiceValueOnAllTreasureChests
// 0x0004 (0x0004 - 0x0000)
struct K36CheatComponent_DBD_K36SetForcedDiceValueOnAllTreasureChests final
{
public:
	int32                                         forcedRollValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36CheatComponent_DBD_K36SetForcedDiceValueOnAllTreasureChests) == 0x000004, "Wrong alignment on K36CheatComponent_DBD_K36SetForcedDiceValueOnAllTreasureChests");
static_assert(sizeof(K36CheatComponent_DBD_K36SetForcedDiceValueOnAllTreasureChests) == 0x000004, "Wrong size on K36CheatComponent_DBD_K36SetForcedDiceValueOnAllTreasureChests");
static_assert(offsetof(K36CheatComponent_DBD_K36SetForcedDiceValueOnAllTreasureChests, forcedRollValue) == 0x000000, "Member 'K36CheatComponent_DBD_K36SetForcedDiceValueOnAllTreasureChests::forcedRollValue' has a wrong offset!");

// Function TheK36.K36CheatComponent.DBD_K36SpawnEyeOfVecnaOnLocallyControlledSurvivor
// 0x0010 (0x0010 - 0x0000)
struct K36CheatComponent_DBD_K36SpawnEyeOfVecnaOnLocallyControlledSurvivor final
{
public:
	class FString                                 localPlayerId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36CheatComponent_DBD_K36SpawnEyeOfVecnaOnLocallyControlledSurvivor) == 0x000008, "Wrong alignment on K36CheatComponent_DBD_K36SpawnEyeOfVecnaOnLocallyControlledSurvivor");
static_assert(sizeof(K36CheatComponent_DBD_K36SpawnEyeOfVecnaOnLocallyControlledSurvivor) == 0x000010, "Wrong size on K36CheatComponent_DBD_K36SpawnEyeOfVecnaOnLocallyControlledSurvivor");
static_assert(offsetof(K36CheatComponent_DBD_K36SpawnEyeOfVecnaOnLocallyControlledSurvivor, localPlayerId) == 0x000000, "Member 'K36CheatComponent_DBD_K36SpawnEyeOfVecnaOnLocallyControlledSurvivor::localPlayerId' has a wrong offset!");

// Function TheK36.K36CheatComponent.DBD_K36SpawnHandOfVecnaOnLocallyControlledSurvivor
// 0x0010 (0x0010 - 0x0000)
struct K36CheatComponent_DBD_K36SpawnHandOfVecnaOnLocallyControlledSurvivor final
{
public:
	class FString                                 localPlayerId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36CheatComponent_DBD_K36SpawnHandOfVecnaOnLocallyControlledSurvivor) == 0x000008, "Wrong alignment on K36CheatComponent_DBD_K36SpawnHandOfVecnaOnLocallyControlledSurvivor");
static_assert(sizeof(K36CheatComponent_DBD_K36SpawnHandOfVecnaOnLocallyControlledSurvivor) == 0x000010, "Wrong size on K36CheatComponent_DBD_K36SpawnHandOfVecnaOnLocallyControlledSurvivor");
static_assert(offsetof(K36CheatComponent_DBD_K36SpawnHandOfVecnaOnLocallyControlledSurvivor, localPlayerId) == 0x000000, "Member 'K36CheatComponent_DBD_K36SpawnHandOfVecnaOnLocallyControlledSurvivor::localPlayerId' has a wrong offset!");

// Function TheK36.K36CheatComponent.DBD_K36TriggerDiceRollOnSurvivor
// 0x0004 (0x0004 - 0x0000)
struct K36CheatComponent_DBD_K36TriggerDiceRollOnSurvivor final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36CheatComponent_DBD_K36TriggerDiceRollOnSurvivor) == 0x000004, "Wrong alignment on K36CheatComponent_DBD_K36TriggerDiceRollOnSurvivor");
static_assert(sizeof(K36CheatComponent_DBD_K36TriggerDiceRollOnSurvivor) == 0x000004, "Wrong size on K36CheatComponent_DBD_K36TriggerDiceRollOnSurvivor");
static_assert(offsetof(K36CheatComponent_DBD_K36TriggerDiceRollOnSurvivor, Result) == 0x000000, "Member 'K36CheatComponent_DBD_K36TriggerDiceRollOnSurvivor::Result' has a wrong offset!");

// Function TheK36.K36D20Dice.Cosmetic_PlayDiceRoll
// 0x0008 (0x0008 - 0x0000)
struct K36D20Dice_Cosmetic_PlayDiceRoll final
{
public:
	int32                                         diceRollResult;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EK36DiceRollOutcome                           diceRollOutcome;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K36D20Dice_Cosmetic_PlayDiceRoll) == 0x000004, "Wrong alignment on K36D20Dice_Cosmetic_PlayDiceRoll");
static_assert(sizeof(K36D20Dice_Cosmetic_PlayDiceRoll) == 0x000008, "Wrong size on K36D20Dice_Cosmetic_PlayDiceRoll");
static_assert(offsetof(K36D20Dice_Cosmetic_PlayDiceRoll, diceRollResult) == 0x000000, "Member 'K36D20Dice_Cosmetic_PlayDiceRoll::diceRollResult' has a wrong offset!");
static_assert(offsetof(K36D20Dice_Cosmetic_PlayDiceRoll, diceRollOutcome) == 0x000004, "Member 'K36D20Dice_Cosmetic_PlayDiceRoll::diceRollOutcome' has a wrong offset!");

// Function TheK36.K36SpellInteraction.OnRep_SpellActivationData
// 0x0010 (0x0010 - 0x0000)
struct K36SpellInteraction_OnRep_SpellActivationData final
{
public:
	struct FK36SpellActivationData                previousActivationData;                            // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36SpellInteraction_OnRep_SpellActivationData) == 0x000008, "Wrong alignment on K36SpellInteraction_OnRep_SpellActivationData");
static_assert(sizeof(K36SpellInteraction_OnRep_SpellActivationData) == 0x000010, "Wrong size on K36SpellInteraction_OnRep_SpellActivationData");
static_assert(offsetof(K36SpellInteraction_OnRep_SpellActivationData, previousActivationData) == 0x000000, "Member 'K36SpellInteraction_OnRep_SpellActivationData::previousActivationData' has a wrong offset!");

// Function TheK36.K36SpellInteraction.Server_ActivateSpell
// 0x0010 (0x0010 - 0x0000)
struct K36SpellInteraction_Server_ActivateSpell final
{
public:
	class AKiller*                                Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                CustomObjectParameter;                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36SpellInteraction_Server_ActivateSpell) == 0x000008, "Wrong alignment on K36SpellInteraction_Server_ActivateSpell");
static_assert(sizeof(K36SpellInteraction_Server_ActivateSpell) == 0x000010, "Wrong size on K36SpellInteraction_Server_ActivateSpell");
static_assert(offsetof(K36SpellInteraction_Server_ActivateSpell, Killer) == 0x000000, "Member 'K36SpellInteraction_Server_ActivateSpell::Killer' has a wrong offset!");
static_assert(offsetof(K36SpellInteraction_Server_ActivateSpell, CustomObjectParameter) == 0x000008, "Member 'K36SpellInteraction_Server_ActivateSpell::CustomObjectParameter' has a wrong offset!");

// Function TheK36.K36DetectionSpellInteraction.Server_RequestSphereLaunch
// 0x0038 (0x0038 - 0x0000)
struct K36DetectionSpellInteraction_Server_RequestSphereLaunch final
{
public:
	class AKiller*                                Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                sphereLocation;                                    // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               launchDirection;                                   // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36DetectionSpellInteraction_Server_RequestSphereLaunch) == 0x000008, "Wrong alignment on K36DetectionSpellInteraction_Server_RequestSphereLaunch");
static_assert(sizeof(K36DetectionSpellInteraction_Server_RequestSphereLaunch) == 0x000038, "Wrong size on K36DetectionSpellInteraction_Server_RequestSphereLaunch");
static_assert(offsetof(K36DetectionSpellInteraction_Server_RequestSphereLaunch, Killer) == 0x000000, "Member 'K36DetectionSpellInteraction_Server_RequestSphereLaunch::Killer' has a wrong offset!");
static_assert(offsetof(K36DetectionSpellInteraction_Server_RequestSphereLaunch, sphereLocation) == 0x000008, "Member 'K36DetectionSpellInteraction_Server_RequestSphereLaunch::sphereLocation' has a wrong offset!");
static_assert(offsetof(K36DetectionSpellInteraction_Server_RequestSphereLaunch, launchDirection) == 0x000020, "Member 'K36DetectionSpellInteraction_Server_RequestSphereLaunch::launchDirection' has a wrong offset!");

// Function TheK36.K36DetectionSpellKillerInstinctStatusEffect.GetLingeringDuration
// 0x0004 (0x0004 - 0x0000)
struct K36DetectionSpellKillerInstinctStatusEffect_GetLingeringDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36DetectionSpellKillerInstinctStatusEffect_GetLingeringDuration) == 0x000004, "Wrong alignment on K36DetectionSpellKillerInstinctStatusEffect_GetLingeringDuration");
static_assert(sizeof(K36DetectionSpellKillerInstinctStatusEffect_GetLingeringDuration) == 0x000004, "Wrong size on K36DetectionSpellKillerInstinctStatusEffect_GetLingeringDuration");
static_assert(offsetof(K36DetectionSpellKillerInstinctStatusEffect_GetLingeringDuration, ReturnValue) == 0x000000, "Member 'K36DetectionSpellKillerInstinctStatusEffect_GetLingeringDuration::ReturnValue' has a wrong offset!");

// Function TheK36.K36DispellingSphere.Authority_OnSurvivorDetectionEnd
// 0x0020 (0x0020 - 0x0000)
struct K36DispellingSphere_Authority_OnSurvivorDetectionEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K36DispellingSphere_Authority_OnSurvivorDetectionEnd) == 0x000008, "Wrong alignment on K36DispellingSphere_Authority_OnSurvivorDetectionEnd");
static_assert(sizeof(K36DispellingSphere_Authority_OnSurvivorDetectionEnd) == 0x000020, "Wrong size on K36DispellingSphere_Authority_OnSurvivorDetectionEnd");
static_assert(offsetof(K36DispellingSphere_Authority_OnSurvivorDetectionEnd, OverlappedComponent) == 0x000000, "Member 'K36DispellingSphere_Authority_OnSurvivorDetectionEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(K36DispellingSphere_Authority_OnSurvivorDetectionEnd, OtherActor) == 0x000008, "Member 'K36DispellingSphere_Authority_OnSurvivorDetectionEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(K36DispellingSphere_Authority_OnSurvivorDetectionEnd, OtherComp) == 0x000010, "Member 'K36DispellingSphere_Authority_OnSurvivorDetectionEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(K36DispellingSphere_Authority_OnSurvivorDetectionEnd, OtherBodyIndex) == 0x000018, "Member 'K36DispellingSphere_Authority_OnSurvivorDetectionEnd::OtherBodyIndex' has a wrong offset!");

// Function TheK36.K36DispellingSphere.Authority_OnSurvivorDetectionStart
// 0x0110 (0x0110 - 0x0000)
struct K36DispellingSphere_Authority_OnSurvivorDetectionStart final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36DispellingSphere_Authority_OnSurvivorDetectionStart) == 0x000008, "Wrong alignment on K36DispellingSphere_Authority_OnSurvivorDetectionStart");
static_assert(sizeof(K36DispellingSphere_Authority_OnSurvivorDetectionStart) == 0x000110, "Wrong size on K36DispellingSphere_Authority_OnSurvivorDetectionStart");
static_assert(offsetof(K36DispellingSphere_Authority_OnSurvivorDetectionStart, HitComponent) == 0x000000, "Member 'K36DispellingSphere_Authority_OnSurvivorDetectionStart::HitComponent' has a wrong offset!");
static_assert(offsetof(K36DispellingSphere_Authority_OnSurvivorDetectionStart, OtherActor) == 0x000008, "Member 'K36DispellingSphere_Authority_OnSurvivorDetectionStart::OtherActor' has a wrong offset!");
static_assert(offsetof(K36DispellingSphere_Authority_OnSurvivorDetectionStart, OtherComp) == 0x000010, "Member 'K36DispellingSphere_Authority_OnSurvivorDetectionStart::OtherComp' has a wrong offset!");
static_assert(offsetof(K36DispellingSphere_Authority_OnSurvivorDetectionStart, OtherBodyIndex) == 0x000018, "Member 'K36DispellingSphere_Authority_OnSurvivorDetectionStart::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(K36DispellingSphere_Authority_OnSurvivorDetectionStart, bFromSweep) == 0x00001C, "Member 'K36DispellingSphere_Authority_OnSurvivorDetectionStart::bFromSweep' has a wrong offset!");
static_assert(offsetof(K36DispellingSphere_Authority_OnSurvivorDetectionStart, SweepResult) == 0x000020, "Member 'K36DispellingSphere_Authority_OnSurvivorDetectionStart::SweepResult' has a wrong offset!");

// Function TheK36.K36DispellingSphere.Cosmetic_OnStateChanged
// 0x0002 (0x0002 - 0x0000)
struct K36DispellingSphere_Cosmetic_OnStateChanged final
{
public:
	EK36DetectionSphereState                      newState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EK36DetectionSphereState                      previousState;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36DispellingSphere_Cosmetic_OnStateChanged) == 0x000001, "Wrong alignment on K36DispellingSphere_Cosmetic_OnStateChanged");
static_assert(sizeof(K36DispellingSphere_Cosmetic_OnStateChanged) == 0x000002, "Wrong size on K36DispellingSphere_Cosmetic_OnStateChanged");
static_assert(offsetof(K36DispellingSphere_Cosmetic_OnStateChanged, newState) == 0x000000, "Member 'K36DispellingSphere_Cosmetic_OnStateChanged::newState' has a wrong offset!");
static_assert(offsetof(K36DispellingSphere_Cosmetic_OnStateChanged, previousState) == 0x000001, "Member 'K36DispellingSphere_Cosmetic_OnStateChanged::previousState' has a wrong offset!");

// Function TheK36.K36DispellingSphere.Cosmetic_RadiusUpdated
// 0x0004 (0x0004 - 0x0000)
struct K36DispellingSphere_Cosmetic_RadiusUpdated final
{
public:
	float                                         newRadiusValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36DispellingSphere_Cosmetic_RadiusUpdated) == 0x000004, "Wrong alignment on K36DispellingSphere_Cosmetic_RadiusUpdated");
static_assert(sizeof(K36DispellingSphere_Cosmetic_RadiusUpdated) == 0x000004, "Wrong size on K36DispellingSphere_Cosmetic_RadiusUpdated");
static_assert(offsetof(K36DispellingSphere_Cosmetic_RadiusUpdated, newRadiusValue) == 0x000000, "Member 'K36DispellingSphere_Cosmetic_RadiusUpdated::newRadiusValue' has a wrong offset!");

// Function TheK36.K36DispellingSphere.Cosmetic_SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct K36DispellingSphere_Cosmetic_SetVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36DispellingSphere_Cosmetic_SetVisibility) == 0x000001, "Wrong alignment on K36DispellingSphere_Cosmetic_SetVisibility");
static_assert(sizeof(K36DispellingSphere_Cosmetic_SetVisibility) == 0x000001, "Wrong size on K36DispellingSphere_Cosmetic_SetVisibility");
static_assert(offsetof(K36DispellingSphere_Cosmetic_SetVisibility, IsVisible) == 0x000000, "Member 'K36DispellingSphere_Cosmetic_SetVisibility::IsVisible' has a wrong offset!");

// Function TheK36.K36DispellingSphere.OnRep_State
// 0x0001 (0x0001 - 0x0000)
struct K36DispellingSphere_OnRep_State final
{
public:
	EK36DetectionSphereState                      previousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36DispellingSphere_OnRep_State) == 0x000001, "Wrong alignment on K36DispellingSphere_OnRep_State");
static_assert(sizeof(K36DispellingSphere_OnRep_State) == 0x000001, "Wrong size on K36DispellingSphere_OnRep_State");
static_assert(offsetof(K36DispellingSphere_OnRep_State, previousState) == 0x000000, "Member 'K36DispellingSphere_OnRep_State::previousState' has a wrong offset!");

// Function TheK36.K36DispellingSphere.GetState
// 0x0001 (0x0001 - 0x0000)
struct K36DispellingSphere_GetState final
{
public:
	EK36DetectionSphereState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36DispellingSphere_GetState) == 0x000001, "Wrong alignment on K36DispellingSphere_GetState");
static_assert(sizeof(K36DispellingSphere_GetState) == 0x000001, "Wrong size on K36DispellingSphere_GetState");
static_assert(offsetof(K36DispellingSphere_GetState, ReturnValue) == 0x000000, "Member 'K36DispellingSphere_GetState::ReturnValue' has a wrong offset!");

// Function TheK36.K36DispellingSphere.GetVisibility
// 0x0001 (0x0001 - 0x0000)
struct K36DispellingSphere_GetVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36DispellingSphere_GetVisibility) == 0x000001, "Wrong alignment on K36DispellingSphere_GetVisibility");
static_assert(sizeof(K36DispellingSphere_GetVisibility) == 0x000001, "Wrong size on K36DispellingSphere_GetVisibility");
static_assert(offsetof(K36DispellingSphere_GetVisibility, ReturnValue) == 0x000000, "Member 'K36DispellingSphere_GetVisibility::ReturnValue' has a wrong offset!");

// Function TheK36.K36EscapeFromMimicChestInteraction.Authority_OnSurvivorDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct K36EscapeFromMimicChestInteraction_Authority_OnSurvivorDamageStateChanged final
{
public:
	EHealthState                                  oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealthState                                  newDamageState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36EscapeFromMimicChestInteraction_Authority_OnSurvivorDamageStateChanged) == 0x000001, "Wrong alignment on K36EscapeFromMimicChestInteraction_Authority_OnSurvivorDamageStateChanged");
static_assert(sizeof(K36EscapeFromMimicChestInteraction_Authority_OnSurvivorDamageStateChanged) == 0x000002, "Wrong size on K36EscapeFromMimicChestInteraction_Authority_OnSurvivorDamageStateChanged");
static_assert(offsetof(K36EscapeFromMimicChestInteraction_Authority_OnSurvivorDamageStateChanged, oldDamageState) == 0x000000, "Member 'K36EscapeFromMimicChestInteraction_Authority_OnSurvivorDamageStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(K36EscapeFromMimicChestInteraction_Authority_OnSurvivorDamageStateChanged, newDamageState) == 0x000001, "Member 'K36EscapeFromMimicChestInteraction_Authority_OnSurvivorDamageStateChanged::newDamageState' has a wrong offset!");

// Function TheK36.K36FlySpellInteraction.Server_StopFlying
// 0x0008 (0x0008 - 0x0000)
struct K36FlySpellInteraction_Server_StopFlying final
{
public:
	class AKiller*                                Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FlySpellInteraction_Server_StopFlying) == 0x000008, "Wrong alignment on K36FlySpellInteraction_Server_StopFlying");
static_assert(sizeof(K36FlySpellInteraction_Server_StopFlying) == 0x000008, "Wrong size on K36FlySpellInteraction_Server_StopFlying");
static_assert(offsetof(K36FlySpellInteraction_Server_StopFlying, Killer) == 0x000000, "Member 'K36FlySpellInteraction_Server_StopFlying::Killer' has a wrong offset!");

// Function TheK36.K36FOTDSpectralEntity.Authority_OnCollisionOverlapBegin
// 0x0110 (0x0110 - 0x0000)
struct K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin) == 0x000008, "Wrong alignment on K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin");
static_assert(sizeof(K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin) == 0x000110, "Wrong size on K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin");
static_assert(offsetof(K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin, OverlappedComp) == 0x000000, "Member 'K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin::OverlappedComp' has a wrong offset!");
static_assert(offsetof(K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin, OtherActor) == 0x000008, "Member 'K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin, OtherComp) == 0x000010, "Member 'K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin, fromSweep) == 0x00001C, "Member 'K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin::fromSweep' has a wrong offset!");
static_assert(offsetof(K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin, SweepResult) == 0x000020, "Member 'K36FOTDSpectralEntity_Authority_OnCollisionOverlapBegin::SweepResult' has a wrong offset!");

// Function TheK36.K36FOTDSpectralEntity.Authority_OnNearMissCollisionOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct K36FOTDSpectralEntity_Authority_OnNearMissCollisionOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K36FOTDSpectralEntity_Authority_OnNearMissCollisionOverlapEnd) == 0x000008, "Wrong alignment on K36FOTDSpectralEntity_Authority_OnNearMissCollisionOverlapEnd");
static_assert(sizeof(K36FOTDSpectralEntity_Authority_OnNearMissCollisionOverlapEnd) == 0x000020, "Wrong size on K36FOTDSpectralEntity_Authority_OnNearMissCollisionOverlapEnd");
static_assert(offsetof(K36FOTDSpectralEntity_Authority_OnNearMissCollisionOverlapEnd, OverlappedComponent) == 0x000000, "Member 'K36FOTDSpectralEntity_Authority_OnNearMissCollisionOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(K36FOTDSpectralEntity_Authority_OnNearMissCollisionOverlapEnd, OtherActor) == 0x000008, "Member 'K36FOTDSpectralEntity_Authority_OnNearMissCollisionOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(K36FOTDSpectralEntity_Authority_OnNearMissCollisionOverlapEnd, OtherComp) == 0x000010, "Member 'K36FOTDSpectralEntity_Authority_OnNearMissCollisionOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(K36FOTDSpectralEntity_Authority_OnNearMissCollisionOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'K36FOTDSpectralEntity_Authority_OnNearMissCollisionOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function TheK36.K36FOTDSpectralEntity.Cosmetic_OnHitSurvivor
// 0x0008 (0x0008 - 0x0000)
struct K36FOTDSpectralEntity_Cosmetic_OnHitSurvivor final
{
public:
	class ASurvivor*                              survivorHit;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FOTDSpectralEntity_Cosmetic_OnHitSurvivor) == 0x000008, "Wrong alignment on K36FOTDSpectralEntity_Cosmetic_OnHitSurvivor");
static_assert(sizeof(K36FOTDSpectralEntity_Cosmetic_OnHitSurvivor) == 0x000008, "Wrong size on K36FOTDSpectralEntity_Cosmetic_OnHitSurvivor");
static_assert(offsetof(K36FOTDSpectralEntity_Cosmetic_OnHitSurvivor, survivorHit) == 0x000000, "Member 'K36FOTDSpectralEntity_Cosmetic_OnHitSurvivor::survivorHit' has a wrong offset!");

// Function TheK36.K36FOTDSpectralEntity.Cosmetic_OnStateChanged
// 0x0008 (0x0008 - 0x0000)
struct K36FOTDSpectralEntity_Cosmetic_OnStateChanged final
{
public:
	EK36FOTDSpectralEntityState                   previousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EK36FOTDSpectralEntityState                   CurrentState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomParameter;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FOTDSpectralEntity_Cosmetic_OnStateChanged) == 0x000004, "Wrong alignment on K36FOTDSpectralEntity_Cosmetic_OnStateChanged");
static_assert(sizeof(K36FOTDSpectralEntity_Cosmetic_OnStateChanged) == 0x000008, "Wrong size on K36FOTDSpectralEntity_Cosmetic_OnStateChanged");
static_assert(offsetof(K36FOTDSpectralEntity_Cosmetic_OnStateChanged, previousState) == 0x000000, "Member 'K36FOTDSpectralEntity_Cosmetic_OnStateChanged::previousState' has a wrong offset!");
static_assert(offsetof(K36FOTDSpectralEntity_Cosmetic_OnStateChanged, CurrentState) == 0x000001, "Member 'K36FOTDSpectralEntity_Cosmetic_OnStateChanged::CurrentState' has a wrong offset!");
static_assert(offsetof(K36FOTDSpectralEntity_Cosmetic_OnStateChanged, CustomParameter) == 0x000004, "Member 'K36FOTDSpectralEntity_Cosmetic_OnStateChanged::CustomParameter' has a wrong offset!");

// Function TheK36.K36FOTDSpectralEntity.Multicast_SetLocationAndRotation
// 0x0030 (0x0030 - 0x0000)
struct K36FOTDSpectralEntity_Multicast_SetLocationAndRotation final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FOTDSpectralEntity_Multicast_SetLocationAndRotation) == 0x000008, "Wrong alignment on K36FOTDSpectralEntity_Multicast_SetLocationAndRotation");
static_assert(sizeof(K36FOTDSpectralEntity_Multicast_SetLocationAndRotation) == 0x000030, "Wrong size on K36FOTDSpectralEntity_Multicast_SetLocationAndRotation");
static_assert(offsetof(K36FOTDSpectralEntity_Multicast_SetLocationAndRotation, Position) == 0x000000, "Member 'K36FOTDSpectralEntity_Multicast_SetLocationAndRotation::Position' has a wrong offset!");
static_assert(offsetof(K36FOTDSpectralEntity_Multicast_SetLocationAndRotation, Rotation) == 0x000018, "Member 'K36FOTDSpectralEntity_Multicast_SetLocationAndRotation::Rotation' has a wrong offset!");

// Function TheK36.K36FOTDSpectralEntity.Multicast_TriggerHitSurvivorCosmetic
// 0x0008 (0x0008 - 0x0000)
struct K36FOTDSpectralEntity_Multicast_TriggerHitSurvivorCosmetic final
{
public:
	class ASurvivor*                              TargetSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FOTDSpectralEntity_Multicast_TriggerHitSurvivorCosmetic) == 0x000008, "Wrong alignment on K36FOTDSpectralEntity_Multicast_TriggerHitSurvivorCosmetic");
static_assert(sizeof(K36FOTDSpectralEntity_Multicast_TriggerHitSurvivorCosmetic) == 0x000008, "Wrong size on K36FOTDSpectralEntity_Multicast_TriggerHitSurvivorCosmetic");
static_assert(offsetof(K36FOTDSpectralEntity_Multicast_TriggerHitSurvivorCosmetic, TargetSurvivor) == 0x000000, "Member 'K36FOTDSpectralEntity_Multicast_TriggerHitSurvivorCosmetic::TargetSurvivor' has a wrong offset!");

// Function TheK36.K36FOTDSpectralEntity.OnRep_State
// 0x0001 (0x0001 - 0x0000)
struct K36FOTDSpectralEntity_OnRep_State final
{
public:
	EK36FOTDSpectralEntityState                   previousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FOTDSpectralEntity_OnRep_State) == 0x000001, "Wrong alignment on K36FOTDSpectralEntity_OnRep_State");
static_assert(sizeof(K36FOTDSpectralEntity_OnRep_State) == 0x000001, "Wrong size on K36FOTDSpectralEntity_OnRep_State");
static_assert(offsetof(K36FOTDSpectralEntity_OnRep_State, previousState) == 0x000000, "Member 'K36FOTDSpectralEntity_OnRep_State::previousState' has a wrong offset!");

// Function TheK36.K36FXInterface.Cosmetic_CreateSpellAtSpellSlotPosition
// 0x0010 (0x0010 - 0x0000)
struct K36FXInterface_Cosmetic_CreateSpellAtSpellSlotPosition final
{
public:
	EK36SpellSlot                                 selectedSpellSlot;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EK36SpellType                                 spellType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         menuVFXInstance;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FXInterface_Cosmetic_CreateSpellAtSpellSlotPosition) == 0x000008, "Wrong alignment on K36FXInterface_Cosmetic_CreateSpellAtSpellSlotPosition");
static_assert(sizeof(K36FXInterface_Cosmetic_CreateSpellAtSpellSlotPosition) == 0x000010, "Wrong size on K36FXInterface_Cosmetic_CreateSpellAtSpellSlotPosition");
static_assert(offsetof(K36FXInterface_Cosmetic_CreateSpellAtSpellSlotPosition, selectedSpellSlot) == 0x000000, "Member 'K36FXInterface_Cosmetic_CreateSpellAtSpellSlotPosition::selectedSpellSlot' has a wrong offset!");
static_assert(offsetof(K36FXInterface_Cosmetic_CreateSpellAtSpellSlotPosition, spellType) == 0x000001, "Member 'K36FXInterface_Cosmetic_CreateSpellAtSpellSlotPosition::spellType' has a wrong offset!");
static_assert(offsetof(K36FXInterface_Cosmetic_CreateSpellAtSpellSlotPosition, menuVFXInstance) == 0x000008, "Member 'K36FXInterface_Cosmetic_CreateSpellAtSpellSlotPosition::menuVFXInstance' has a wrong offset!");

// Function TheK36.K36FXInterface.Cosmetic_OnFOVChanged
// 0x0004 (0x0004 - 0x0000)
struct K36FXInterface_Cosmetic_OnFOVChanged final
{
public:
	float                                         NewFOV;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FXInterface_Cosmetic_OnFOVChanged) == 0x000004, "Wrong alignment on K36FXInterface_Cosmetic_OnFOVChanged");
static_assert(sizeof(K36FXInterface_Cosmetic_OnFOVChanged) == 0x000004, "Wrong size on K36FXInterface_Cosmetic_OnFOVChanged");
static_assert(offsetof(K36FXInterface_Cosmetic_OnFOVChanged, NewFOV) == 0x000000, "Member 'K36FXInterface_Cosmetic_OnFOVChanged::NewFOV' has a wrong offset!");

// Function TheK36.K36FXInterface.Cosmetic_OnSpellCooldownEnded
// 0x0001 (0x0001 - 0x0000)
struct K36FXInterface_Cosmetic_OnSpellCooldownEnded final
{
public:
	EK36SpellType                                 spellType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FXInterface_Cosmetic_OnSpellCooldownEnded) == 0x000001, "Wrong alignment on K36FXInterface_Cosmetic_OnSpellCooldownEnded");
static_assert(sizeof(K36FXInterface_Cosmetic_OnSpellCooldownEnded) == 0x000001, "Wrong size on K36FXInterface_Cosmetic_OnSpellCooldownEnded");
static_assert(offsetof(K36FXInterface_Cosmetic_OnSpellCooldownEnded, spellType) == 0x000000, "Member 'K36FXInterface_Cosmetic_OnSpellCooldownEnded::spellType' has a wrong offset!");

// Function TheK36.K36FXInterface.Cosmetic_OnSpellCooldownStarted
// 0x0001 (0x0001 - 0x0000)
struct K36FXInterface_Cosmetic_OnSpellCooldownStarted final
{
public:
	EK36SpellType                                 spellType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FXInterface_Cosmetic_OnSpellCooldownStarted) == 0x000001, "Wrong alignment on K36FXInterface_Cosmetic_OnSpellCooldownStarted");
static_assert(sizeof(K36FXInterface_Cosmetic_OnSpellCooldownStarted) == 0x000001, "Wrong size on K36FXInterface_Cosmetic_OnSpellCooldownStarted");
static_assert(offsetof(K36FXInterface_Cosmetic_OnSpellCooldownStarted, spellType) == 0x000000, "Member 'K36FXInterface_Cosmetic_OnSpellCooldownStarted::spellType' has a wrong offset!");

// Function TheK36.K36FXInterface.Cosmetic_OnSpellEnded
// 0x0001 (0x0001 - 0x0000)
struct K36FXInterface_Cosmetic_OnSpellEnded final
{
public:
	EK36SpellType                                 spellType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FXInterface_Cosmetic_OnSpellEnded) == 0x000001, "Wrong alignment on K36FXInterface_Cosmetic_OnSpellEnded");
static_assert(sizeof(K36FXInterface_Cosmetic_OnSpellEnded) == 0x000001, "Wrong size on K36FXInterface_Cosmetic_OnSpellEnded");
static_assert(offsetof(K36FXInterface_Cosmetic_OnSpellEnded, spellType) == 0x000000, "Member 'K36FXInterface_Cosmetic_OnSpellEnded::spellType' has a wrong offset!");

// Function TheK36.K36FXInterface.Cosmetic_SetSelectedSpell
// 0x0001 (0x0001 - 0x0000)
struct K36FXInterface_Cosmetic_SetSelectedSpell final
{
public:
	EK36SpellType                                 spellType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FXInterface_Cosmetic_SetSelectedSpell) == 0x000001, "Wrong alignment on K36FXInterface_Cosmetic_SetSelectedSpell");
static_assert(sizeof(K36FXInterface_Cosmetic_SetSelectedSpell) == 0x000001, "Wrong size on K36FXInterface_Cosmetic_SetSelectedSpell");
static_assert(offsetof(K36FXInterface_Cosmetic_SetSelectedSpell, spellType) == 0x000000, "Member 'K36FXInterface_Cosmetic_SetSelectedSpell::spellType' has a wrong offset!");

// Function TheK36.K36FXInterface.Cosmetic_SetSpellMenuVisibility
// 0x0001 (0x0001 - 0x0000)
struct K36FXInterface_Cosmetic_SetSpellMenuVisibility final
{
public:
	bool                                          isSpellMenuVisible;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FXInterface_Cosmetic_SetSpellMenuVisibility) == 0x000001, "Wrong alignment on K36FXInterface_Cosmetic_SetSpellMenuVisibility");
static_assert(sizeof(K36FXInterface_Cosmetic_SetSpellMenuVisibility) == 0x000001, "Wrong size on K36FXInterface_Cosmetic_SetSpellMenuVisibility");
static_assert(offsetof(K36FXInterface_Cosmetic_SetSpellMenuVisibility, isSpellMenuVisible) == 0x000000, "Member 'K36FXInterface_Cosmetic_SetSpellMenuVisibility::isSpellMenuVisible' has a wrong offset!");

// Function TheK36.K36FXInterface.Cosmetic_SetSpellVignetteVisibility
// 0x0001 (0x0001 - 0x0000)
struct K36FXInterface_Cosmetic_SetSpellVignetteVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FXInterface_Cosmetic_SetSpellVignetteVisibility) == 0x000001, "Wrong alignment on K36FXInterface_Cosmetic_SetSpellVignetteVisibility");
static_assert(sizeof(K36FXInterface_Cosmetic_SetSpellVignetteVisibility) == 0x000001, "Wrong size on K36FXInterface_Cosmetic_SetSpellVignetteVisibility");
static_assert(offsetof(K36FXInterface_Cosmetic_SetSpellVignetteVisibility, IsVisible) == 0x000000, "Member 'K36FXInterface_Cosmetic_SetSpellVignetteVisibility::IsVisible' has a wrong offset!");

// Function TheK36.K36FXInterface.Cosmetic_SpellActivated
// 0x0001 (0x0001 - 0x0000)
struct K36FXInterface_Cosmetic_SpellActivated final
{
public:
	EK36SpellType                                 spellType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FXInterface_Cosmetic_SpellActivated) == 0x000001, "Wrong alignment on K36FXInterface_Cosmetic_SpellActivated");
static_assert(sizeof(K36FXInterface_Cosmetic_SpellActivated) == 0x000001, "Wrong size on K36FXInterface_Cosmetic_SpellActivated");
static_assert(offsetof(K36FXInterface_Cosmetic_SpellActivated, spellType) == 0x000000, "Member 'K36FXInterface_Cosmetic_SpellActivated::spellType' has a wrong offset!");

// Function TheK36.K36FXInterface.Cosmetic_SpellCancelled
// 0x0001 (0x0001 - 0x0000)
struct K36FXInterface_Cosmetic_SpellCancelled final
{
public:
	EK36SpellType                                 spellType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FXInterface_Cosmetic_SpellCancelled) == 0x000001, "Wrong alignment on K36FXInterface_Cosmetic_SpellCancelled");
static_assert(sizeof(K36FXInterface_Cosmetic_SpellCancelled) == 0x000001, "Wrong size on K36FXInterface_Cosmetic_SpellCancelled");
static_assert(offsetof(K36FXInterface_Cosmetic_SpellCancelled, spellType) == 0x000000, "Member 'K36FXInterface_Cosmetic_SpellCancelled::spellType' has a wrong offset!");

// Function TheK36.K36FXInterface.Cosmetic_SpellChargeCompleted
// 0x0001 (0x0001 - 0x0000)
struct K36FXInterface_Cosmetic_SpellChargeCompleted final
{
public:
	EK36SpellType                                 spellType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FXInterface_Cosmetic_SpellChargeCompleted) == 0x000001, "Wrong alignment on K36FXInterface_Cosmetic_SpellChargeCompleted");
static_assert(sizeof(K36FXInterface_Cosmetic_SpellChargeCompleted) == 0x000001, "Wrong size on K36FXInterface_Cosmetic_SpellChargeCompleted");
static_assert(offsetof(K36FXInterface_Cosmetic_SpellChargeCompleted, spellType) == 0x000000, "Member 'K36FXInterface_Cosmetic_SpellChargeCompleted::spellType' has a wrong offset!");

// Function TheK36.K36FXInterface.Cosmetic_SpellChargeStart
// 0x0001 (0x0001 - 0x0000)
struct K36FXInterface_Cosmetic_SpellChargeStart final
{
public:
	EK36SpellType                                 spellType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FXInterface_Cosmetic_SpellChargeStart) == 0x000001, "Wrong alignment on K36FXInterface_Cosmetic_SpellChargeStart");
static_assert(sizeof(K36FXInterface_Cosmetic_SpellChargeStart) == 0x000001, "Wrong size on K36FXInterface_Cosmetic_SpellChargeStart");
static_assert(offsetof(K36FXInterface_Cosmetic_SpellChargeStart, spellType) == 0x000000, "Member 'K36FXInterface_Cosmetic_SpellChargeStart::spellType' has a wrong offset!");

// Function TheK36.K36FXInterface.Cosmetic_TriggerSpellAudioSFX
// 0x0008 (0x0008 - 0x0000)
struct K36FXInterface_Cosmetic_TriggerSpellAudioSFX final
{
public:
	class UAkAudioEvent*                          spellCastAkEvent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FXInterface_Cosmetic_TriggerSpellAudioSFX) == 0x000008, "Wrong alignment on K36FXInterface_Cosmetic_TriggerSpellAudioSFX");
static_assert(sizeof(K36FXInterface_Cosmetic_TriggerSpellAudioSFX) == 0x000008, "Wrong size on K36FXInterface_Cosmetic_TriggerSpellAudioSFX");
static_assert(offsetof(K36FXInterface_Cosmetic_TriggerSpellAudioSFX, spellCastAkEvent) == 0x000000, "Member 'K36FXInterface_Cosmetic_TriggerSpellAudioSFX::spellCastAkEvent' has a wrong offset!");

// Function TheK36.K36FXInterface.Cosmetic_UpdateSpellCooldownCompletionPercentage
// 0x0008 (0x0008 - 0x0000)
struct K36FXInterface_Cosmetic_UpdateSpellCooldownCompletionPercentage final
{
public:
	EK36SpellType                                 spellType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         cooldownPercentage;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36FXInterface_Cosmetic_UpdateSpellCooldownCompletionPercentage) == 0x000004, "Wrong alignment on K36FXInterface_Cosmetic_UpdateSpellCooldownCompletionPercentage");
static_assert(sizeof(K36FXInterface_Cosmetic_UpdateSpellCooldownCompletionPercentage) == 0x000008, "Wrong size on K36FXInterface_Cosmetic_UpdateSpellCooldownCompletionPercentage");
static_assert(offsetof(K36FXInterface_Cosmetic_UpdateSpellCooldownCompletionPercentage, spellType) == 0x000000, "Member 'K36FXInterface_Cosmetic_UpdateSpellCooldownCompletionPercentage::spellType' has a wrong offset!");
static_assert(offsetof(K36FXInterface_Cosmetic_UpdateSpellCooldownCompletionPercentage, cooldownPercentage) == 0x000004, "Member 'K36FXInterface_Cosmetic_UpdateSpellCooldownCompletionPercentage::cooldownPercentage' has a wrong offset!");

// Function TheK36.K36MageHand.Cosmetic_OnStateChanged
// 0x000C (0x000C - 0x0000)
struct K36MageHand_Cosmetic_OnStateChanged final
{
public:
	struct FGameplayTag                           newStateID;                                        // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MageHand_Cosmetic_OnStateChanged) == 0x000004, "Wrong alignment on K36MageHand_Cosmetic_OnStateChanged");
static_assert(sizeof(K36MageHand_Cosmetic_OnStateChanged) == 0x00000C, "Wrong size on K36MageHand_Cosmetic_OnStateChanged");
static_assert(offsetof(K36MageHand_Cosmetic_OnStateChanged, newStateID) == 0x000000, "Member 'K36MageHand_Cosmetic_OnStateChanged::newStateID' has a wrong offset!");

// Function TheK36.K36MageHand.OnRep_TargetPallet
// 0x0008 (0x0008 - 0x0000)
struct K36MageHand_OnRep_TargetPallet final
{
public:
	class APallet*                                previousPallet;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MageHand_OnRep_TargetPallet) == 0x000008, "Wrong alignment on K36MageHand_OnRep_TargetPallet");
static_assert(sizeof(K36MageHand_OnRep_TargetPallet) == 0x000008, "Wrong size on K36MageHand_OnRep_TargetPallet");
static_assert(offsetof(K36MageHand_OnRep_TargetPallet, previousPallet) == 0x000000, "Member 'K36MageHand_OnRep_TargetPallet::previousPallet' has a wrong offset!");

// Function TheK36.K36MageHandPalletSelectionComponent.Cosmetic_ActivateHighlightOnPallet
// 0x0008 (0x0008 - 0x0000)
struct K36MageHandPalletSelectionComponent_Cosmetic_ActivateHighlightOnPallet final
{
public:
	class APallet*                                Pallet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MageHandPalletSelectionComponent_Cosmetic_ActivateHighlightOnPallet) == 0x000008, "Wrong alignment on K36MageHandPalletSelectionComponent_Cosmetic_ActivateHighlightOnPallet");
static_assert(sizeof(K36MageHandPalletSelectionComponent_Cosmetic_ActivateHighlightOnPallet) == 0x000008, "Wrong size on K36MageHandPalletSelectionComponent_Cosmetic_ActivateHighlightOnPallet");
static_assert(offsetof(K36MageHandPalletSelectionComponent_Cosmetic_ActivateHighlightOnPallet, Pallet) == 0x000000, "Member 'K36MageHandPalletSelectionComponent_Cosmetic_ActivateHighlightOnPallet::Pallet' has a wrong offset!");

// Function TheK36.K36MageHandPalletSelectionComponent.Cosmetic_DeactivateHighlightOnPallet
// 0x0008 (0x0008 - 0x0000)
struct K36MageHandPalletSelectionComponent_Cosmetic_DeactivateHighlightOnPallet final
{
public:
	class APallet*                                targetPallet;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MageHandPalletSelectionComponent_Cosmetic_DeactivateHighlightOnPallet) == 0x000008, "Wrong alignment on K36MageHandPalletSelectionComponent_Cosmetic_DeactivateHighlightOnPallet");
static_assert(sizeof(K36MageHandPalletSelectionComponent_Cosmetic_DeactivateHighlightOnPallet) == 0x000008, "Wrong size on K36MageHandPalletSelectionComponent_Cosmetic_DeactivateHighlightOnPallet");
static_assert(offsetof(K36MageHandPalletSelectionComponent_Cosmetic_DeactivateHighlightOnPallet, targetPallet) == 0x000000, "Member 'K36MageHandPalletSelectionComponent_Cosmetic_DeactivateHighlightOnPallet::targetPallet' has a wrong offset!");

// Function TheK36.K36MageHandSurvivorPalletSelectionVFX.Cosmetic_SethighlightActivationState
// 0x0001 (0x0001 - 0x0000)
struct K36MageHandSurvivorPalletSelectionVFX_Cosmetic_SethighlightActivationState final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MageHandSurvivorPalletSelectionVFX_Cosmetic_SethighlightActivationState) == 0x000001, "Wrong alignment on K36MageHandSurvivorPalletSelectionVFX_Cosmetic_SethighlightActivationState");
static_assert(sizeof(K36MageHandSurvivorPalletSelectionVFX_Cosmetic_SethighlightActivationState) == 0x000001, "Wrong size on K36MageHandSurvivorPalletSelectionVFX_Cosmetic_SethighlightActivationState");
static_assert(offsetof(K36MageHandSurvivorPalletSelectionVFX_Cosmetic_SethighlightActivationState, IsActive) == 0x000000, "Member 'K36MageHandSurvivorPalletSelectionVFX_Cosmetic_SethighlightActivationState::IsActive' has a wrong offset!");

// Function TheK36.K36MageHandSurvivorPalletSelectionVFX.GetTargetPallet
// 0x0008 (0x0008 - 0x0000)
struct K36MageHandSurvivorPalletSelectionVFX_GetTargetPallet final
{
public:
	class APallet*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MageHandSurvivorPalletSelectionVFX_GetTargetPallet) == 0x000008, "Wrong alignment on K36MageHandSurvivorPalletSelectionVFX_GetTargetPallet");
static_assert(sizeof(K36MageHandSurvivorPalletSelectionVFX_GetTargetPallet) == 0x000008, "Wrong size on K36MageHandSurvivorPalletSelectionVFX_GetTargetPallet");
static_assert(offsetof(K36MageHandSurvivorPalletSelectionVFX_GetTargetPallet, ReturnValue) == 0x000000, "Member 'K36MageHandSurvivorPalletSelectionVFX_GetTargetPallet::ReturnValue' has a wrong offset!");

// Function TheK36.K36MagicItem.Cosmetic_OnCollectingPlayerLocallyObservedChanged
// 0x0010 (0x0010 - 0x0000)
struct K36MagicItem_Cosmetic_OnCollectingPlayerLocallyObservedChanged final
{
public:
	class ADBDPlayer*                             collector;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocallyObserved;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K36MagicItem_Cosmetic_OnCollectingPlayerLocallyObservedChanged) == 0x000008, "Wrong alignment on K36MagicItem_Cosmetic_OnCollectingPlayerLocallyObservedChanged");
static_assert(sizeof(K36MagicItem_Cosmetic_OnCollectingPlayerLocallyObservedChanged) == 0x000010, "Wrong size on K36MagicItem_Cosmetic_OnCollectingPlayerLocallyObservedChanged");
static_assert(offsetof(K36MagicItem_Cosmetic_OnCollectingPlayerLocallyObservedChanged, collector) == 0x000000, "Member 'K36MagicItem_Cosmetic_OnCollectingPlayerLocallyObservedChanged::collector' has a wrong offset!");
static_assert(offsetof(K36MagicItem_Cosmetic_OnCollectingPlayerLocallyObservedChanged, IsLocallyObserved) == 0x000008, "Member 'K36MagicItem_Cosmetic_OnCollectingPlayerLocallyObservedChanged::IsLocallyObserved' has a wrong offset!");

// Function TheK36.K36MagicItem.Cosmetic_OnMagicItemCollected
// 0x0010 (0x0010 - 0x0000)
struct K36MagicItem_Cosmetic_OnMagicItemCollected final
{
public:
	class UNiagaraSystem*                         playerAttachedNiagaraSystem;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             newCollectingPlayer;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MagicItem_Cosmetic_OnMagicItemCollected) == 0x000008, "Wrong alignment on K36MagicItem_Cosmetic_OnMagicItemCollected");
static_assert(sizeof(K36MagicItem_Cosmetic_OnMagicItemCollected) == 0x000010, "Wrong size on K36MagicItem_Cosmetic_OnMagicItemCollected");
static_assert(offsetof(K36MagicItem_Cosmetic_OnMagicItemCollected, playerAttachedNiagaraSystem) == 0x000000, "Member 'K36MagicItem_Cosmetic_OnMagicItemCollected::playerAttachedNiagaraSystem' has a wrong offset!");
static_assert(offsetof(K36MagicItem_Cosmetic_OnMagicItemCollected, newCollectingPlayer) == 0x000008, "Member 'K36MagicItem_Cosmetic_OnMagicItemCollected::newCollectingPlayer' has a wrong offset!");

// Function TheK36.K36MagicItem.Cosmetic_OnSpellCounterActiveStateChanged
// 0x0001 (0x0001 - 0x0000)
struct K36MagicItem_Cosmetic_OnSpellCounterActiveStateChanged final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MagicItem_Cosmetic_OnSpellCounterActiveStateChanged) == 0x000001, "Wrong alignment on K36MagicItem_Cosmetic_OnSpellCounterActiveStateChanged");
static_assert(sizeof(K36MagicItem_Cosmetic_OnSpellCounterActiveStateChanged) == 0x000001, "Wrong size on K36MagicItem_Cosmetic_OnSpellCounterActiveStateChanged");
static_assert(offsetof(K36MagicItem_Cosmetic_OnSpellCounterActiveStateChanged, IsActive) == 0x000000, "Member 'K36MagicItem_Cosmetic_OnSpellCounterActiveStateChanged::IsActive' has a wrong offset!");

// Function TheK36.K36MagicItem.Cosmetic_SetMagicItemVisibility
// 0x0010 (0x0010 - 0x0000)
struct K36MagicItem_Cosmetic_SetMagicItemVisibility final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          shouldKillerVfxBeVisible;                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          shouldSurvivorVfxBeVisible;                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isInstant;                                         // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K36MagicItem_Cosmetic_SetMagicItemVisibility) == 0x000008, "Wrong alignment on K36MagicItem_Cosmetic_SetMagicItemVisibility");
static_assert(sizeof(K36MagicItem_Cosmetic_SetMagicItemVisibility) == 0x000010, "Wrong size on K36MagicItem_Cosmetic_SetMagicItemVisibility");
static_assert(offsetof(K36MagicItem_Cosmetic_SetMagicItemVisibility, Player) == 0x000000, "Member 'K36MagicItem_Cosmetic_SetMagicItemVisibility::Player' has a wrong offset!");
static_assert(offsetof(K36MagicItem_Cosmetic_SetMagicItemVisibility, shouldKillerVfxBeVisible) == 0x000008, "Member 'K36MagicItem_Cosmetic_SetMagicItemVisibility::shouldKillerVfxBeVisible' has a wrong offset!");
static_assert(offsetof(K36MagicItem_Cosmetic_SetMagicItemVisibility, shouldSurvivorVfxBeVisible) == 0x000009, "Member 'K36MagicItem_Cosmetic_SetMagicItemVisibility::shouldSurvivorVfxBeVisible' has a wrong offset!");
static_assert(offsetof(K36MagicItem_Cosmetic_SetMagicItemVisibility, isInstant) == 0x00000A, "Member 'K36MagicItem_Cosmetic_SetMagicItemVisibility::isInstant' has a wrong offset!");

// Function TheK36.K36MagicItem.OnRep_ImposedStatusEffect
// 0x0008 (0x0008 - 0x0000)
struct K36MagicItem_OnRep_ImposedStatusEffect final
{
public:
	class UK36SpellCounterStatusEffect*           previouslyImposedEffect;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MagicItem_OnRep_ImposedStatusEffect) == 0x000008, "Wrong alignment on K36MagicItem_OnRep_ImposedStatusEffect");
static_assert(sizeof(K36MagicItem_OnRep_ImposedStatusEffect) == 0x000008, "Wrong size on K36MagicItem_OnRep_ImposedStatusEffect");
static_assert(offsetof(K36MagicItem_OnRep_ImposedStatusEffect, previouslyImposedEffect) == 0x000000, "Member 'K36MagicItem_OnRep_ImposedStatusEffect::previouslyImposedEffect' has a wrong offset!");

// Function TheK36.K36MagicItem.GetMagicItemType
// 0x0001 (0x0001 - 0x0000)
struct K36MagicItem_GetMagicItemType final
{
public:
	EK36MagicItemType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MagicItem_GetMagicItemType) == 0x000001, "Wrong alignment on K36MagicItem_GetMagicItemType");
static_assert(sizeof(K36MagicItem_GetMagicItemType) == 0x000001, "Wrong size on K36MagicItem_GetMagicItemType");
static_assert(offsetof(K36MagicItem_GetMagicItemType, ReturnValue) == 0x000000, "Member 'K36MagicItem_GetMagicItemType::ReturnValue' has a wrong offset!");

// Function TheK36.K36MagicItem.GetSpellCounterData
// 0x0008 (0x0008 - 0x0000)
struct K36MagicItem_GetSpellCounterData final
{
public:
	class UK36SpellCounterData*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MagicItem_GetSpellCounterData) == 0x000008, "Wrong alignment on K36MagicItem_GetSpellCounterData");
static_assert(sizeof(K36MagicItem_GetSpellCounterData) == 0x000008, "Wrong size on K36MagicItem_GetSpellCounterData");
static_assert(offsetof(K36MagicItem_GetSpellCounterData, ReturnValue) == 0x000000, "Member 'K36MagicItem_GetSpellCounterData::ReturnValue' has a wrong offset!");

// Function TheK36.K36MagicItemArtifact.Cosmetic_OnMagicArtifactMergedWithPlayer
// 0x0008 (0x0008 - 0x0000)
struct K36MagicItemArtifact_Cosmetic_OnMagicArtifactMergedWithPlayer final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MagicItemArtifact_Cosmetic_OnMagicArtifactMergedWithPlayer) == 0x000008, "Wrong alignment on K36MagicItemArtifact_Cosmetic_OnMagicArtifactMergedWithPlayer");
static_assert(sizeof(K36MagicItemArtifact_Cosmetic_OnMagicArtifactMergedWithPlayer) == 0x000008, "Wrong size on K36MagicItemArtifact_Cosmetic_OnMagicArtifactMergedWithPlayer");
static_assert(offsetof(K36MagicItemArtifact_Cosmetic_OnMagicArtifactMergedWithPlayer, Survivor) == 0x000000, "Member 'K36MagicItemArtifact_Cosmetic_OnMagicArtifactMergedWithPlayer::Survivor' has a wrong offset!");

// Function TheK36.K36MagicItemArtifact.Cosmetic_UpdateIsArtifactPowerAvailable
// 0x0001 (0x0001 - 0x0000)
struct K36MagicItemArtifact_Cosmetic_UpdateIsArtifactPowerAvailable final
{
public:
	bool                                          IsAvailable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MagicItemArtifact_Cosmetic_UpdateIsArtifactPowerAvailable) == 0x000001, "Wrong alignment on K36MagicItemArtifact_Cosmetic_UpdateIsArtifactPowerAvailable");
static_assert(sizeof(K36MagicItemArtifact_Cosmetic_UpdateIsArtifactPowerAvailable) == 0x000001, "Wrong size on K36MagicItemArtifact_Cosmetic_UpdateIsArtifactPowerAvailable");
static_assert(offsetof(K36MagicItemArtifact_Cosmetic_UpdateIsArtifactPowerAvailable, IsAvailable) == 0x000000, "Member 'K36MagicItemArtifact_Cosmetic_UpdateIsArtifactPowerAvailable::IsAvailable' has a wrong offset!");

// Function TheK36.K36MagicItemArtifact.OnSurvivorDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct K36MagicItemArtifact_OnSurvivorDamageStateChanged final
{
public:
	EHealthState                                  oldHealthState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealthState                                  newHealthState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MagicItemArtifact_OnSurvivorDamageStateChanged) == 0x000001, "Wrong alignment on K36MagicItemArtifact_OnSurvivorDamageStateChanged");
static_assert(sizeof(K36MagicItemArtifact_OnSurvivorDamageStateChanged) == 0x000002, "Wrong size on K36MagicItemArtifact_OnSurvivorDamageStateChanged");
static_assert(offsetof(K36MagicItemArtifact_OnSurvivorDamageStateChanged, oldHealthState) == 0x000000, "Member 'K36MagicItemArtifact_OnSurvivorDamageStateChanged::oldHealthState' has a wrong offset!");
static_assert(offsetof(K36MagicItemArtifact_OnSurvivorDamageStateChanged, newHealthState) == 0x000001, "Member 'K36MagicItemArtifact_OnSurvivorDamageStateChanged::newHealthState' has a wrong offset!");

// Function TheK36.K36MagicItemArtifact.HasBeenAssimilated
// 0x0001 (0x0001 - 0x0000)
struct K36MagicItemArtifact_HasBeenAssimilated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36MagicItemArtifact_HasBeenAssimilated) == 0x000001, "Wrong alignment on K36MagicItemArtifact_HasBeenAssimilated");
static_assert(sizeof(K36MagicItemArtifact_HasBeenAssimilated) == 0x000001, "Wrong size on K36MagicItemArtifact_HasBeenAssimilated");
static_assert(offsetof(K36MagicItemArtifact_HasBeenAssimilated, ReturnValue) == 0x000000, "Member 'K36MagicItemArtifact_HasBeenAssimilated::ReturnValue' has a wrong offset!");

// Function TheK36.K36MoriSurvivorSkeleton.OnMontageStarted
// 0x0028 (0x0028 - 0x0000)
struct K36MoriSurvivorSkeleton_OnMontageStarted final
{
public:
	struct FAnimationMontageDescriptor            animMontageID;                                     // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K36MoriSurvivorSkeleton_OnMontageStarted) == 0x000008, "Wrong alignment on K36MoriSurvivorSkeleton_OnMontageStarted");
static_assert(sizeof(K36MoriSurvivorSkeleton_OnMontageStarted) == 0x000028, "Wrong size on K36MoriSurvivorSkeleton_OnMontageStarted");
static_assert(offsetof(K36MoriSurvivorSkeleton_OnMontageStarted, animMontageID) == 0x000000, "Member 'K36MoriSurvivorSkeleton_OnMontageStarted::animMontageID' has a wrong offset!");
static_assert(offsetof(K36MoriSurvivorSkeleton_OnMontageStarted, PlayRate) == 0x000020, "Member 'K36MoriSurvivorSkeleton_OnMontageStarted::PlayRate' has a wrong offset!");

// Function TheK36.K36OpenTreasureChestInteraction.Multicast_TriggerEscapeMimicInteraction
// 0x0008 (0x0008 - 0x0000)
struct K36OpenTreasureChestInteraction_Multicast_TriggerEscapeMimicInteraction final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36OpenTreasureChestInteraction_Multicast_TriggerEscapeMimicInteraction) == 0x000008, "Wrong alignment on K36OpenTreasureChestInteraction_Multicast_TriggerEscapeMimicInteraction");
static_assert(sizeof(K36OpenTreasureChestInteraction_Multicast_TriggerEscapeMimicInteraction) == 0x000008, "Wrong size on K36OpenTreasureChestInteraction_Multicast_TriggerEscapeMimicInteraction");
static_assert(offsetof(K36OpenTreasureChestInteraction_Multicast_TriggerEscapeMimicInteraction, Survivor) == 0x000000, "Member 'K36OpenTreasureChestInteraction_Multicast_TriggerEscapeMimicInteraction::Survivor' has a wrong offset!");

// Function TheK36.K36P01.GetK36P01ObliviousStatusEffectDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K36P01_GetK36P01ObliviousStatusEffectDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36P01_GetK36P01ObliviousStatusEffectDurationAtLevel) == 0x000004, "Wrong alignment on K36P01_GetK36P01ObliviousStatusEffectDurationAtLevel");
static_assert(sizeof(K36P01_GetK36P01ObliviousStatusEffectDurationAtLevel) == 0x000004, "Wrong size on K36P01_GetK36P01ObliviousStatusEffectDurationAtLevel");
static_assert(offsetof(K36P01_GetK36P01ObliviousStatusEffectDurationAtLevel, ReturnValue) == 0x000000, "Member 'K36P01_GetK36P01ObliviousStatusEffectDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheK36.K36P02.GetExhaustedDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K36P02_GetExhaustedDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36P02_GetExhaustedDurationAtLevel) == 0x000004, "Wrong alignment on K36P02_GetExhaustedDurationAtLevel");
static_assert(sizeof(K36P02_GetExhaustedDurationAtLevel) == 0x000004, "Wrong size on K36P02_GetExhaustedDurationAtLevel");
static_assert(offsetof(K36P02_GetExhaustedDurationAtLevel, ReturnValue) == 0x000000, "Member 'K36P02_GetExhaustedDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheK36.K36P03.GetVaultSpeedIncreasesAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K36P03_GetVaultSpeedIncreasesAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36P03_GetVaultSpeedIncreasesAtLevel) == 0x000004, "Wrong alignment on K36P03_GetVaultSpeedIncreasesAtLevel");
static_assert(sizeof(K36P03_GetVaultSpeedIncreasesAtLevel) == 0x000004, "Wrong size on K36P03_GetVaultSpeedIncreasesAtLevel");
static_assert(offsetof(K36P03_GetVaultSpeedIncreasesAtLevel, ReturnValue) == 0x000000, "Member 'K36P03_GetVaultSpeedIncreasesAtLevel::ReturnValue' has a wrong offset!");

// Function TheK36.K36PalletFlyCollisionHandlerComponent.OnComponentEndOverlapWithKiller
// 0x0020 (0x0020 - 0x0000)
struct K36PalletFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K36PalletFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller) == 0x000008, "Wrong alignment on K36PalletFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller");
static_assert(sizeof(K36PalletFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller) == 0x000020, "Wrong size on K36PalletFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller");
static_assert(offsetof(K36PalletFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller, OverlappedComponent) == 0x000000, "Member 'K36PalletFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(K36PalletFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller, OtherActor) == 0x000008, "Member 'K36PalletFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller::OtherActor' has a wrong offset!");
static_assert(offsetof(K36PalletFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller, OtherComp) == 0x000010, "Member 'K36PalletFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller::OtherComp' has a wrong offset!");
static_assert(offsetof(K36PalletFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller, OtherBodyIndex) == 0x000018, "Member 'K36PalletFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller::OtherBodyIndex' has a wrong offset!");

// Function TheK36.K36SpellManagerComponent.Server_SetSelectedSpellSlot
// 0x0001 (0x0001 - 0x0000)
struct K36SpellManagerComponent_Server_SetSelectedSpellSlot final
{
public:
	EK36SpellSlot                                 selectedSpellSlot;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36SpellManagerComponent_Server_SetSelectedSpellSlot) == 0x000001, "Wrong alignment on K36SpellManagerComponent_Server_SetSelectedSpellSlot");
static_assert(sizeof(K36SpellManagerComponent_Server_SetSelectedSpellSlot) == 0x000001, "Wrong size on K36SpellManagerComponent_Server_SetSelectedSpellSlot");
static_assert(offsetof(K36SpellManagerComponent_Server_SetSelectedSpellSlot, selectedSpellSlot) == 0x000000, "Member 'K36SpellManagerComponent_Server_SetSelectedSpellSlot::selectedSpellSlot' has a wrong offset!");

// Function TheK36.K36SpellManagerComponent.Server_SetSelectedSpellSlot_Unreliable
// 0x0001 (0x0001 - 0x0000)
struct K36SpellManagerComponent_Server_SetSelectedSpellSlot_Unreliable final
{
public:
	EK36SpellSlot                                 selectedSpellSlot;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36SpellManagerComponent_Server_SetSelectedSpellSlot_Unreliable) == 0x000001, "Wrong alignment on K36SpellManagerComponent_Server_SetSelectedSpellSlot_Unreliable");
static_assert(sizeof(K36SpellManagerComponent_Server_SetSelectedSpellSlot_Unreliable) == 0x000001, "Wrong size on K36SpellManagerComponent_Server_SetSelectedSpellSlot_Unreliable");
static_assert(offsetof(K36SpellManagerComponent_Server_SetSelectedSpellSlot_Unreliable, selectedSpellSlot) == 0x000000, "Member 'K36SpellManagerComponent_Server_SetSelectedSpellSlot_Unreliable::selectedSpellSlot' has a wrong offset!");

// Function TheK36.K36Spikes.Cosmetic_SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct K36Spikes_Cosmetic_SetVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36Spikes_Cosmetic_SetVisibility) == 0x000001, "Wrong alignment on K36Spikes_Cosmetic_SetVisibility");
static_assert(sizeof(K36Spikes_Cosmetic_SetVisibility) == 0x000001, "Wrong size on K36Spikes_Cosmetic_SetVisibility");
static_assert(offsetof(K36Spikes_Cosmetic_SetVisibility, IsVisible) == 0x000000, "Member 'K36Spikes_Cosmetic_SetVisibility::IsVisible' has a wrong offset!");

// Function TheK36.K36Spikes.SetSpikesVisibility
// 0x0002 (0x0002 - 0x0000)
struct K36Spikes_SetSpikesVisibility final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Forced;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36Spikes_SetSpikesVisibility) == 0x000001, "Wrong alignment on K36Spikes_SetSpikesVisibility");
static_assert(sizeof(K36Spikes_SetSpikesVisibility) == 0x000002, "Wrong size on K36Spikes_SetSpikesVisibility");
static_assert(offsetof(K36Spikes_SetSpikesVisibility, Visibility) == 0x000000, "Member 'K36Spikes_SetSpikesVisibility::Visibility' has a wrong offset!");
static_assert(offsetof(K36Spikes_SetSpikesVisibility, Forced) == 0x000001, "Member 'K36Spikes_SetSpikesVisibility::Forced' has a wrong offset!");

// Function TheK36.K36Spikes.GetSpikesEventType
// 0x0001 (0x0001 - 0x0000)
struct K36Spikes_GetSpikesEventType final
{
public:
	EK36SpikesEventType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36Spikes_GetSpikesEventType) == 0x000001, "Wrong alignment on K36Spikes_GetSpikesEventType");
static_assert(sizeof(K36Spikes_GetSpikesEventType) == 0x000001, "Wrong size on K36Spikes_GetSpikesEventType");
static_assert(offsetof(K36Spikes_GetSpikesEventType, ReturnValue) == 0x000000, "Member 'K36Spikes_GetSpikesEventType::ReturnValue' has a wrong offset!");

// Function TheK36.K36SurvivorCosmeticHelperActor.Cosmetic_OnMergeWithEyeArtifact
// 0x0008 (0x0008 - 0x0000)
struct K36SurvivorCosmeticHelperActor_Cosmetic_OnMergeWithEyeArtifact final
{
public:
	class AK36MagicItemArtifact*                  Artifact;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36SurvivorCosmeticHelperActor_Cosmetic_OnMergeWithEyeArtifact) == 0x000008, "Wrong alignment on K36SurvivorCosmeticHelperActor_Cosmetic_OnMergeWithEyeArtifact");
static_assert(sizeof(K36SurvivorCosmeticHelperActor_Cosmetic_OnMergeWithEyeArtifact) == 0x000008, "Wrong size on K36SurvivorCosmeticHelperActor_Cosmetic_OnMergeWithEyeArtifact");
static_assert(offsetof(K36SurvivorCosmeticHelperActor_Cosmetic_OnMergeWithEyeArtifact, Artifact) == 0x000000, "Member 'K36SurvivorCosmeticHelperActor_Cosmetic_OnMergeWithEyeArtifact::Artifact' has a wrong offset!");

// Function TheK36.K36SurvivorCosmeticHelperActor.Cosmetic_OnMergeWithHandArtifact
// 0x0008 (0x0008 - 0x0000)
struct K36SurvivorCosmeticHelperActor_Cosmetic_OnMergeWithHandArtifact final
{
public:
	class AK36MagicItemArtifact*                  Artifact;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36SurvivorCosmeticHelperActor_Cosmetic_OnMergeWithHandArtifact) == 0x000008, "Wrong alignment on K36SurvivorCosmeticHelperActor_Cosmetic_OnMergeWithHandArtifact");
static_assert(sizeof(K36SurvivorCosmeticHelperActor_Cosmetic_OnMergeWithHandArtifact) == 0x000008, "Wrong size on K36SurvivorCosmeticHelperActor_Cosmetic_OnMergeWithHandArtifact");
static_assert(offsetof(K36SurvivorCosmeticHelperActor_Cosmetic_OnMergeWithHandArtifact, Artifact) == 0x000000, "Member 'K36SurvivorCosmeticHelperActor_Cosmetic_OnMergeWithHandArtifact::Artifact' has a wrong offset!");

// Function TheK36.K36SurvivorCosmeticHelperActor.Cosmetic_OnSurvivorIsInvisibleChanged
// 0x0002 (0x0002 - 0x0000)
struct K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorIsInvisibleChanged final
{
public:
	bool                                          isInvisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isObservingKiller;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorIsInvisibleChanged) == 0x000001, "Wrong alignment on K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorIsInvisibleChanged");
static_assert(sizeof(K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorIsInvisibleChanged) == 0x000002, "Wrong size on K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorIsInvisibleChanged");
static_assert(offsetof(K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorIsInvisibleChanged, isInvisible) == 0x000000, "Member 'K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorIsInvisibleChanged::isInvisible' has a wrong offset!");
static_assert(offsetof(K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorIsInvisibleChanged, isObservingKiller) == 0x000001, "Member 'K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorIsInvisibleChanged::isObservingKiller' has a wrong offset!");

// Function TheK36.K36SurvivorCosmeticHelperActor.Cosmetic_OnSurvivorTeleportTriggered
// 0x0010 (0x0010 - 0x0000)
struct K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorTeleportTriggered final
{
public:
	class ALocker*                                startLocker;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALocker*                                endLocker;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorTeleportTriggered) == 0x000008, "Wrong alignment on K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorTeleportTriggered");
static_assert(sizeof(K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorTeleportTriggered) == 0x000010, "Wrong size on K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorTeleportTriggered");
static_assert(offsetof(K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorTeleportTriggered, startLocker) == 0x000000, "Member 'K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorTeleportTriggered::startLocker' has a wrong offset!");
static_assert(offsetof(K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorTeleportTriggered, endLocker) == 0x000008, "Member 'K36SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorTeleportTriggered::endLocker' has a wrong offset!");

// Function TheK36.K36SurvivorCosmeticHelperActor.GetBoneInitialLocation
// 0x0028 (0x0028 - 0x0000)
struct K36SurvivorCosmeticHelperActor_GetBoneInitialLocation final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36SurvivorCosmeticHelperActor_GetBoneInitialLocation) == 0x000008, "Wrong alignment on K36SurvivorCosmeticHelperActor_GetBoneInitialLocation");
static_assert(sizeof(K36SurvivorCosmeticHelperActor_GetBoneInitialLocation) == 0x000028, "Wrong size on K36SurvivorCosmeticHelperActor_GetBoneInitialLocation");
static_assert(offsetof(K36SurvivorCosmeticHelperActor_GetBoneInitialLocation, BoneName) == 0x000000, "Member 'K36SurvivorCosmeticHelperActor_GetBoneInitialLocation::BoneName' has a wrong offset!");
static_assert(offsetof(K36SurvivorCosmeticHelperActor_GetBoneInitialLocation, ReturnValue) == 0x000010, "Member 'K36SurvivorCosmeticHelperActor_GetBoneInitialLocation::ReturnValue' has a wrong offset!");

// Function TheK36.K36SurvivorCosmeticHelperActor.OnSurvivorDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct K36SurvivorCosmeticHelperActor_OnSurvivorDamageStateChanged final
{
public:
	EHealthState                                  oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealthState                                  newDamageState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36SurvivorCosmeticHelperActor_OnSurvivorDamageStateChanged) == 0x000001, "Wrong alignment on K36SurvivorCosmeticHelperActor_OnSurvivorDamageStateChanged");
static_assert(sizeof(K36SurvivorCosmeticHelperActor_OnSurvivorDamageStateChanged) == 0x000002, "Wrong size on K36SurvivorCosmeticHelperActor_OnSurvivorDamageStateChanged");
static_assert(offsetof(K36SurvivorCosmeticHelperActor_OnSurvivorDamageStateChanged, oldDamageState) == 0x000000, "Member 'K36SurvivorCosmeticHelperActor_OnSurvivorDamageStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(K36SurvivorCosmeticHelperActor_OnSurvivorDamageStateChanged, newDamageState) == 0x000001, "Member 'K36SurvivorCosmeticHelperActor_OnSurvivorDamageStateChanged::newDamageState' has a wrong offset!");

// Function TheK36.K36TreasureChest.Cosmetic_OnDiceRollTriggered
// 0x0008 (0x0008 - 0x0000)
struct K36TreasureChest_Cosmetic_OnDiceRollTriggered final
{
public:
	class ADBDPlayer*                             rollingPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36TreasureChest_Cosmetic_OnDiceRollTriggered) == 0x000008, "Wrong alignment on K36TreasureChest_Cosmetic_OnDiceRollTriggered");
static_assert(sizeof(K36TreasureChest_Cosmetic_OnDiceRollTriggered) == 0x000008, "Wrong size on K36TreasureChest_Cosmetic_OnDiceRollTriggered");
static_assert(offsetof(K36TreasureChest_Cosmetic_OnDiceRollTriggered, rollingPlayer) == 0x000000, "Member 'K36TreasureChest_Cosmetic_OnDiceRollTriggered::rollingPlayer' has a wrong offset!");

// Function TheK36.K36TreasureChest.Cosmetic_OnTreasureChestStateChanged
// 0x0002 (0x0002 - 0x0000)
struct K36TreasureChest_Cosmetic_OnTreasureChestStateChanged final
{
public:
	EK36TreasureChestState                        previousTreasureChestState;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EK36TreasureChestState                        newTreasureChestState;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36TreasureChest_Cosmetic_OnTreasureChestStateChanged) == 0x000001, "Wrong alignment on K36TreasureChest_Cosmetic_OnTreasureChestStateChanged");
static_assert(sizeof(K36TreasureChest_Cosmetic_OnTreasureChestStateChanged) == 0x000002, "Wrong size on K36TreasureChest_Cosmetic_OnTreasureChestStateChanged");
static_assert(offsetof(K36TreasureChest_Cosmetic_OnTreasureChestStateChanged, previousTreasureChestState) == 0x000000, "Member 'K36TreasureChest_Cosmetic_OnTreasureChestStateChanged::previousTreasureChestState' has a wrong offset!");
static_assert(offsetof(K36TreasureChest_Cosmetic_OnTreasureChestStateChanged, newTreasureChestState) == 0x000001, "Member 'K36TreasureChest_Cosmetic_OnTreasureChestStateChanged::newTreasureChestState' has a wrong offset!");

// Function TheK36.K36TreasureChest.Cosmetic_UpdateIsSurvivorTrappedFX
// 0x0001 (0x0001 - 0x0000)
struct K36TreasureChest_Cosmetic_UpdateIsSurvivorTrappedFX final
{
public:
	bool                                          isSurvivorTrapped;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36TreasureChest_Cosmetic_UpdateIsSurvivorTrappedFX) == 0x000001, "Wrong alignment on K36TreasureChest_Cosmetic_UpdateIsSurvivorTrappedFX");
static_assert(sizeof(K36TreasureChest_Cosmetic_UpdateIsSurvivorTrappedFX) == 0x000001, "Wrong size on K36TreasureChest_Cosmetic_UpdateIsSurvivorTrappedFX");
static_assert(offsetof(K36TreasureChest_Cosmetic_UpdateIsSurvivorTrappedFX, isSurvivorTrapped) == 0x000000, "Member 'K36TreasureChest_Cosmetic_UpdateIsSurvivorTrappedFX::isSurvivorTrapped' has a wrong offset!");

// Function TheK36.K36TreasureChest.Cosmetic_UpdateTreasureChestOpenVFX
// 0x0008 (0x0008 - 0x0000)
struct K36TreasureChest_Cosmetic_UpdateTreasureChestOpenVFX final
{
public:
	class UNiagaraSystem*                         newItemChestRevealNiagaraSystem;                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36TreasureChest_Cosmetic_UpdateTreasureChestOpenVFX) == 0x000008, "Wrong alignment on K36TreasureChest_Cosmetic_UpdateTreasureChestOpenVFX");
static_assert(sizeof(K36TreasureChest_Cosmetic_UpdateTreasureChestOpenVFX) == 0x000008, "Wrong size on K36TreasureChest_Cosmetic_UpdateTreasureChestOpenVFX");
static_assert(offsetof(K36TreasureChest_Cosmetic_UpdateTreasureChestOpenVFX, newItemChestRevealNiagaraSystem) == 0x000000, "Member 'K36TreasureChest_Cosmetic_UpdateTreasureChestOpenVFX::newItemChestRevealNiagaraSystem' has a wrong offset!");

// Function TheK36.K36TreasureChest.Cosmetic_UpdateTreasureChestResetState
// 0x0004 (0x0004 - 0x0000)
struct K36TreasureChest_Cosmetic_UpdateTreasureChestResetState final
{
public:
	float                                         resetElapsedTimePercent;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36TreasureChest_Cosmetic_UpdateTreasureChestResetState) == 0x000004, "Wrong alignment on K36TreasureChest_Cosmetic_UpdateTreasureChestResetState");
static_assert(sizeof(K36TreasureChest_Cosmetic_UpdateTreasureChestResetState) == 0x000004, "Wrong size on K36TreasureChest_Cosmetic_UpdateTreasureChestResetState");
static_assert(offsetof(K36TreasureChest_Cosmetic_UpdateTreasureChestResetState, resetElapsedTimePercent) == 0x000000, "Member 'K36TreasureChest_Cosmetic_UpdateTreasureChestResetState::resetElapsedTimePercent' has a wrong offset!");

// Function TheK36.K36TreasureChest.Multicast_TriggerDiceRoll
// 0x0010 (0x0010 - 0x0000)
struct K36TreasureChest_Multicast_TriggerDiceRoll final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         diceRollValue;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K36TreasureChest_Multicast_TriggerDiceRoll) == 0x000008, "Wrong alignment on K36TreasureChest_Multicast_TriggerDiceRoll");
static_assert(sizeof(K36TreasureChest_Multicast_TriggerDiceRoll) == 0x000010, "Wrong size on K36TreasureChest_Multicast_TriggerDiceRoll");
static_assert(offsetof(K36TreasureChest_Multicast_TriggerDiceRoll, Survivor) == 0x000000, "Member 'K36TreasureChest_Multicast_TriggerDiceRoll::Survivor' has a wrong offset!");
static_assert(offsetof(K36TreasureChest_Multicast_TriggerDiceRoll, diceRollValue) == 0x000008, "Member 'K36TreasureChest_Multicast_TriggerDiceRoll::diceRollValue' has a wrong offset!");

// Function TheK36.K36TreasureChest.OnRep_TrappedSurvivor
// 0x0008 (0x0008 - 0x0000)
struct K36TreasureChest_OnRep_TrappedSurvivor final
{
public:
	class ASurvivor*                              previousTrappedSurvivor;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36TreasureChest_OnRep_TrappedSurvivor) == 0x000008, "Wrong alignment on K36TreasureChest_OnRep_TrappedSurvivor");
static_assert(sizeof(K36TreasureChest_OnRep_TrappedSurvivor) == 0x000008, "Wrong size on K36TreasureChest_OnRep_TrappedSurvivor");
static_assert(offsetof(K36TreasureChest_OnRep_TrappedSurvivor, previousTrappedSurvivor) == 0x000000, "Member 'K36TreasureChest_OnRep_TrappedSurvivor::previousTrappedSurvivor' has a wrong offset!");

// Function TheK36.K36TreasureChest.OnRep_TreasureChestState
// 0x0001 (0x0001 - 0x0000)
struct K36TreasureChest_OnRep_TreasureChestState final
{
public:
	EK36TreasureChestState                        previousChestState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36TreasureChest_OnRep_TreasureChestState) == 0x000001, "Wrong alignment on K36TreasureChest_OnRep_TreasureChestState");
static_assert(sizeof(K36TreasureChest_OnRep_TreasureChestState) == 0x000001, "Wrong size on K36TreasureChest_OnRep_TreasureChestState");
static_assert(offsetof(K36TreasureChest_OnRep_TreasureChestState, previousChestState) == 0x000000, "Member 'K36TreasureChest_OnRep_TreasureChestState::previousChestState' has a wrong offset!");

// Function TheK36.K36TreasureChest.GetTreasureChestState
// 0x0001 (0x0001 - 0x0000)
struct K36TreasureChest_GetTreasureChestState final
{
public:
	EK36TreasureChestState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36TreasureChest_GetTreasureChestState) == 0x000001, "Wrong alignment on K36TreasureChest_GetTreasureChestState");
static_assert(sizeof(K36TreasureChest_GetTreasureChestState) == 0x000001, "Wrong size on K36TreasureChest_GetTreasureChestState");
static_assert(offsetof(K36TreasureChest_GetTreasureChestState, ReturnValue) == 0x000000, "Member 'K36TreasureChest_GetTreasureChestState::ReturnValue' has a wrong offset!");

// Function TheK36.K36Utilities.GetArtifactsOnSurvivor
// 0x0018 (0x0018 - 0x0000)
struct K36Utilities_GetArtifactsOnSurvivor final
{
public:
	const class ASurvivor*                        Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AK36MagicItemArtifact*>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36Utilities_GetArtifactsOnSurvivor) == 0x000008, "Wrong alignment on K36Utilities_GetArtifactsOnSurvivor");
static_assert(sizeof(K36Utilities_GetArtifactsOnSurvivor) == 0x000018, "Wrong size on K36Utilities_GetArtifactsOnSurvivor");
static_assert(offsetof(K36Utilities_GetArtifactsOnSurvivor, Survivor) == 0x000000, "Member 'K36Utilities_GetArtifactsOnSurvivor::Survivor' has a wrong offset!");
static_assert(offsetof(K36Utilities_GetArtifactsOnSurvivor, ReturnValue) == 0x000008, "Member 'K36Utilities_GetArtifactsOnSurvivor::ReturnValue' has a wrong offset!");

// Function TheK36.K36Utilities.GetDnDManagerComponent
// 0x0010 (0x0010 - 0x0000)
struct K36Utilities_GetDnDManagerComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UK36DnDManagerComponent*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36Utilities_GetDnDManagerComponent) == 0x000008, "Wrong alignment on K36Utilities_GetDnDManagerComponent");
static_assert(sizeof(K36Utilities_GetDnDManagerComponent) == 0x000010, "Wrong size on K36Utilities_GetDnDManagerComponent");
static_assert(offsetof(K36Utilities_GetDnDManagerComponent, WorldContextObject) == 0x000000, "Member 'K36Utilities_GetDnDManagerComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(K36Utilities_GetDnDManagerComponent, ReturnValue) == 0x000008, "Member 'K36Utilities_GetDnDManagerComponent::ReturnValue' has a wrong offset!");

// Function TheK36.K36Utilities.GetK36Power
// 0x0010 (0x0010 - 0x0000)
struct K36Utilities_GetK36Power final
{
public:
	const class AKiller*                          Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK36Power*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36Utilities_GetK36Power) == 0x000008, "Wrong alignment on K36Utilities_GetK36Power");
static_assert(sizeof(K36Utilities_GetK36Power) == 0x000010, "Wrong size on K36Utilities_GetK36Power");
static_assert(offsetof(K36Utilities_GetK36Power, Killer) == 0x000000, "Member 'K36Utilities_GetK36Power::Killer' has a wrong offset!");
static_assert(offsetof(K36Utilities_GetK36Power, ReturnValue) == 0x000008, "Member 'K36Utilities_GetK36Power::ReturnValue' has a wrong offset!");

// Function TheK36.K36Utilities.GetK36SpellManagerComponent
// 0x0010 (0x0010 - 0x0000)
struct K36Utilities_GetK36SpellManagerComponent final
{
public:
	const class AKiller*                          Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UK36SpellManagerComponent*              ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36Utilities_GetK36SpellManagerComponent) == 0x000008, "Wrong alignment on K36Utilities_GetK36SpellManagerComponent");
static_assert(sizeof(K36Utilities_GetK36SpellManagerComponent) == 0x000010, "Wrong size on K36Utilities_GetK36SpellManagerComponent");
static_assert(offsetof(K36Utilities_GetK36SpellManagerComponent, Killer) == 0x000000, "Member 'K36Utilities_GetK36SpellManagerComponent::Killer' has a wrong offset!");
static_assert(offsetof(K36Utilities_GetK36SpellManagerComponent, ReturnValue) == 0x000008, "Member 'K36Utilities_GetK36SpellManagerComponent::ReturnValue' has a wrong offset!");

// Function TheK36.K36Utilities.GetSelectSpellInteraction
// 0x0010 (0x0010 - 0x0000)
struct K36Utilities_GetSelectSpellInteraction final
{
public:
	const class AKiller*                          Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UK36SelectSpellInteraction*             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36Utilities_GetSelectSpellInteraction) == 0x000008, "Wrong alignment on K36Utilities_GetSelectSpellInteraction");
static_assert(sizeof(K36Utilities_GetSelectSpellInteraction) == 0x000010, "Wrong size on K36Utilities_GetSelectSpellInteraction");
static_assert(offsetof(K36Utilities_GetSelectSpellInteraction, Killer) == 0x000000, "Member 'K36Utilities_GetSelectSpellInteraction::Killer' has a wrong offset!");
static_assert(offsetof(K36Utilities_GetSelectSpellInteraction, ReturnValue) == 0x000008, "Member 'K36Utilities_GetSelectSpellInteraction::ReturnValue' has a wrong offset!");

// Function TheK36.K36Utilities.GetSpellTrajectoryPreviewer
// 0x0010 (0x0010 - 0x0000)
struct K36Utilities_GetSpellTrajectoryPreviewer final
{
public:
	const class AKiller*                          Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK36SpellTrajectoryPreviewer*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36Utilities_GetSpellTrajectoryPreviewer) == 0x000008, "Wrong alignment on K36Utilities_GetSpellTrajectoryPreviewer");
static_assert(sizeof(K36Utilities_GetSpellTrajectoryPreviewer) == 0x000010, "Wrong size on K36Utilities_GetSpellTrajectoryPreviewer");
static_assert(offsetof(K36Utilities_GetSpellTrajectoryPreviewer, Killer) == 0x000000, "Member 'K36Utilities_GetSpellTrajectoryPreviewer::Killer' has a wrong offset!");
static_assert(offsetof(K36Utilities_GetSpellTrajectoryPreviewer, ReturnValue) == 0x000008, "Member 'K36Utilities_GetSpellTrajectoryPreviewer::ReturnValue' has a wrong offset!");

// Function TheK36.K36Utilities.GetSpikes
// 0x0010 (0x0010 - 0x0000)
struct K36Utilities_GetSpikes final
{
public:
	const class AKiller*                          Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK36Spikes*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K36Utilities_GetSpikes) == 0x000008, "Wrong alignment on K36Utilities_GetSpikes");
static_assert(sizeof(K36Utilities_GetSpikes) == 0x000010, "Wrong size on K36Utilities_GetSpikes");
static_assert(offsetof(K36Utilities_GetSpikes, Killer) == 0x000000, "Member 'K36Utilities_GetSpikes::Killer' has a wrong offset!");
static_assert(offsetof(K36Utilities_GetSpikes, ReturnValue) == 0x000008, "Member 'K36Utilities_GetSpikes::ReturnValue' has a wrong offset!");

// Function TheK36.K36WindowFlyCollisionHandlerComponent.OnComponentEndOverlapWithKiller
// 0x0020 (0x0020 - 0x0000)
struct K36WindowFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K36WindowFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller) == 0x000008, "Wrong alignment on K36WindowFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller");
static_assert(sizeof(K36WindowFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller) == 0x000020, "Wrong size on K36WindowFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller");
static_assert(offsetof(K36WindowFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller, OverlappedComponent) == 0x000000, "Member 'K36WindowFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(K36WindowFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller, OtherActor) == 0x000008, "Member 'K36WindowFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller::OtherActor' has a wrong offset!");
static_assert(offsetof(K36WindowFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller, OtherComp) == 0x000010, "Member 'K36WindowFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller::OtherComp' has a wrong offset!");
static_assert(offsetof(K36WindowFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller, OtherBodyIndex) == 0x000018, "Member 'K36WindowFlyCollisionHandlerComponent_OnComponentEndOverlapWithKiller::OtherBodyIndex' has a wrong offset!");

// Function TheK36.OwningPlayerInDroppedNotSpecialSurvivorCollectableRange.OnItemDestroyed
// 0x0008 (0x0008 - 0x0000)
struct OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnItemDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnItemDestroyed) == 0x000008, "Wrong alignment on OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnItemDestroyed");
static_assert(sizeof(OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnItemDestroyed) == 0x000008, "Wrong size on OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnItemDestroyed");
static_assert(offsetof(OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnItemDestroyed, DestroyedActor) == 0x000000, "Member 'OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnItemDestroyed::DestroyedActor' has a wrong offset!");

// Function TheK36.OwningPlayerInDroppedNotSpecialSurvivorCollectableRange.OnItemStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnItemStateChanged final
{
public:
	ECollectableState                             State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnItemStateChanged) == 0x000001, "Wrong alignment on OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnItemStateChanged");
static_assert(sizeof(OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnItemStateChanged) == 0x000001, "Wrong size on OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnItemStateChanged");
static_assert(offsetof(OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnItemStateChanged, State) == 0x000000, "Member 'OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnItemStateChanged::State' has a wrong offset!");

// Function TheK36.OwningPlayerInDroppedNotSpecialSurvivorCollectableRange.OnSurvivorItemDropped
// 0x0040 (0x0040 - 0x0000)
struct OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemDropped final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemDropped) == 0x000008, "Wrong alignment on OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemDropped");
static_assert(sizeof(OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemDropped) == 0x000040, "Wrong size on OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemDropped");
static_assert(offsetof(OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemDropped, GameplayTag) == 0x000000, "Member 'OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemDropped::GameplayTag' has a wrong offset!");
static_assert(offsetof(OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemDropped, GameEventData) == 0x000010, "Member 'OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemDropped::GameEventData' has a wrong offset!");

// Function TheK36.OwningPlayerInDroppedNotSpecialSurvivorCollectableRange.OnSurvivorItemPicked
// 0x0040 (0x0040 - 0x0000)
struct OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemPicked final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemPicked) == 0x000008, "Wrong alignment on OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemPicked");
static_assert(sizeof(OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemPicked) == 0x000040, "Wrong size on OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemPicked");
static_assert(offsetof(OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemPicked, GameplayTag) == 0x000000, "Member 'OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemPicked::GameplayTag' has a wrong offset!");
static_assert(offsetof(OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemPicked, GameEventData) == 0x000010, "Member 'OwningPlayerInDroppedNotSpecialSurvivorCollectableRange_OnSurvivorItemPicked::GameEventData' has a wrong offset!");

}

