#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BaseK39TentaclesActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TheK39_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BaseK39TentaclesActor.BP_BaseK39TentaclesActor_C
// 0x0060 (0x0460 - 0x0400)
class ABP_BaseK39TentaclesActor_C : public AK39TentaclesActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0400(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           AkComponent;                                       // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_K39_PowerRedMist_01;                            // 0x0410(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_K39_PowerRedMist_02;                            // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_K39_PowerRedMist_03;                            // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_K39_PowerRedMist_04;                            // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_K39_PowerRedMist_05;                            // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_K39_PowerRedMist_06;                            // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_K39_PowerRedMist_07;                            // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_K39_PowerRedMist_08;                            // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              NS_K39_PowerUp_Mist;                               // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void EventUpdateTentaclesParametersValues(double Viens____Overlay____Visibility, double Viens____Blood_Vessel_Emission_Scale, double Regular_Pulse_Emission_Scale, double Animation____Pulsating_Noise_Scale, double Vertex_Deformation____Pulse_Scale, double Viens____Normal_Scale);
	void ExecuteUbergraph_BP_BaseK39TentaclesActor(int32 EntryPoint);
	void FX_DissolveTentacles();
	void FX_DissolveTentacles_Fail_FPV();
	void FX_DissolveTentacles_Success_FPV();
	void FX_HidePowerParticles();
	void FX_HideTentacles();
	void FX_K39_BloodSplatter_PP();
	void FX_K39_ErraticMoment_PP();
	void FX_K39_SpawnRibCage();
	void FX_ShowTentacles();
	void OnColorBlindSettingsChange(EColorVisionDeficiency ColorBlindMode, int32 ColorblindIntensity);
	void ReceiveBeginPlay();
	void Set_Colorblind_Settings(EColorVisionDeficiency Color_Blind_Mode);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BaseK39TentaclesActor_C">();
	}
	static class ABP_BaseK39TentaclesActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BaseK39TentaclesActor_C>();
	}
};
static_assert(alignof(ABP_BaseK39TentaclesActor_C) == 0x000008, "Wrong alignment on ABP_BaseK39TentaclesActor_C");
static_assert(sizeof(ABP_BaseK39TentaclesActor_C) == 0x000460, "Wrong size on ABP_BaseK39TentaclesActor_C");
static_assert(offsetof(ABP_BaseK39TentaclesActor_C, UberGraphFrame) == 0x000400, "Member 'ABP_BaseK39TentaclesActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BaseK39TentaclesActor_C, AkComponent) == 0x000408, "Member 'ABP_BaseK39TentaclesActor_C::AkComponent' has a wrong offset!");
static_assert(offsetof(ABP_BaseK39TentaclesActor_C, NS_K39_PowerRedMist_01) == 0x000410, "Member 'ABP_BaseK39TentaclesActor_C::NS_K39_PowerRedMist_01' has a wrong offset!");
static_assert(offsetof(ABP_BaseK39TentaclesActor_C, NS_K39_PowerRedMist_02) == 0x000418, "Member 'ABP_BaseK39TentaclesActor_C::NS_K39_PowerRedMist_02' has a wrong offset!");
static_assert(offsetof(ABP_BaseK39TentaclesActor_C, NS_K39_PowerRedMist_03) == 0x000420, "Member 'ABP_BaseK39TentaclesActor_C::NS_K39_PowerRedMist_03' has a wrong offset!");
static_assert(offsetof(ABP_BaseK39TentaclesActor_C, NS_K39_PowerRedMist_04) == 0x000428, "Member 'ABP_BaseK39TentaclesActor_C::NS_K39_PowerRedMist_04' has a wrong offset!");
static_assert(offsetof(ABP_BaseK39TentaclesActor_C, NS_K39_PowerRedMist_05) == 0x000430, "Member 'ABP_BaseK39TentaclesActor_C::NS_K39_PowerRedMist_05' has a wrong offset!");
static_assert(offsetof(ABP_BaseK39TentaclesActor_C, NS_K39_PowerRedMist_06) == 0x000438, "Member 'ABP_BaseK39TentaclesActor_C::NS_K39_PowerRedMist_06' has a wrong offset!");
static_assert(offsetof(ABP_BaseK39TentaclesActor_C, NS_K39_PowerRedMist_07) == 0x000440, "Member 'ABP_BaseK39TentaclesActor_C::NS_K39_PowerRedMist_07' has a wrong offset!");
static_assert(offsetof(ABP_BaseK39TentaclesActor_C, NS_K39_PowerRedMist_08) == 0x000448, "Member 'ABP_BaseK39TentaclesActor_C::NS_K39_PowerRedMist_08' has a wrong offset!");
static_assert(offsetof(ABP_BaseK39TentaclesActor_C, NS_K39_PowerUp_Mist) == 0x000450, "Member 'ABP_BaseK39TentaclesActor_C::NS_K39_PowerUp_Mist' has a wrong offset!");

}

