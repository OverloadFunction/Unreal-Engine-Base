#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDProceduralCamera

#include "Basic.hpp"

#include "DBDProceduralCamera_structs.hpp"
#include "Engine_classes.hpp"
#include "DeadByDaylight_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class DBDProceduralCamera.ProceduralCameraSolver
// 0x0000 (0x0030 - 0x0030)
class UProceduralCameraSolver final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralCameraSolver">();
	}
	static class UProceduralCameraSolver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProceduralCameraSolver>();
	}
};
static_assert(alignof(UProceduralCameraSolver) == 0x000008, "Wrong alignment on UProceduralCameraSolver");
static_assert(sizeof(UProceduralCameraSolver) == 0x000030, "Wrong size on UProceduralCameraSolver");

// Class DBDProceduralCamera.CameraShotType
// 0x0028 (0x02C8 - 0x02A0)
class ACameraShotType final : public AActor
{
public:
	bool                                          bIsCameraRotationFixed;                            // 0x02A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumDistanceFromCamera;                         // 0x02A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaximumDistanceFromCamera;                         // 0x02A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HorizontalAngleFreedom;                            // 0x02AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VerticalAngleFreedom;                              // 0x02B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMotionType                                   CameraMotionType;                                  // 0x02B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B5[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KeyPoseNumber;                                     // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       CameraTrack;                                       // 0x02C0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraShotType">();
	}
	static class ACameraShotType* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACameraShotType>();
	}
};
static_assert(alignof(ACameraShotType) == 0x000008, "Wrong alignment on ACameraShotType");
static_assert(sizeof(ACameraShotType) == 0x0002C8, "Wrong size on ACameraShotType");
static_assert(offsetof(ACameraShotType, bIsCameraRotationFixed) == 0x0002A0, "Member 'ACameraShotType::bIsCameraRotationFixed' has a wrong offset!");
static_assert(offsetof(ACameraShotType, MinimumDistanceFromCamera) == 0x0002A4, "Member 'ACameraShotType::MinimumDistanceFromCamera' has a wrong offset!");
static_assert(offsetof(ACameraShotType, MaximumDistanceFromCamera) == 0x0002A8, "Member 'ACameraShotType::MaximumDistanceFromCamera' has a wrong offset!");
static_assert(offsetof(ACameraShotType, HorizontalAngleFreedom) == 0x0002AC, "Member 'ACameraShotType::HorizontalAngleFreedom' has a wrong offset!");
static_assert(offsetof(ACameraShotType, VerticalAngleFreedom) == 0x0002B0, "Member 'ACameraShotType::VerticalAngleFreedom' has a wrong offset!");
static_assert(offsetof(ACameraShotType, CameraMotionType) == 0x0002B4, "Member 'ACameraShotType::CameraMotionType' has a wrong offset!");
static_assert(offsetof(ACameraShotType, KeyPoseNumber) == 0x0002B8, "Member 'ACameraShotType::KeyPoseNumber' has a wrong offset!");
static_assert(offsetof(ACameraShotType, CameraTrack) == 0x0002C0, "Member 'ACameraShotType::CameraTrack' has a wrong offset!");

// Class DBDProceduralCamera.PCCameraSequencesConfig
// 0x0090 (0x00D8 - 0x0048)
class UPCCameraSequencesConfig final : public UDBDPrimaryDataAsset
{
public:
	float                                         CameraSequenceTotalLengthTime;                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UProceduralCameraSequenceData> DefaultCameraSequence;                       // 0x0050(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UPCCharacterSequenceOverride>> CharacterCameraSequenceOverrides; // 0x0088(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	class UProceduralCameraSequenceData* GetSequence(class FName CharacterId, const TArray<class FName>& OutfitsID) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCCameraSequencesConfig">();
	}
	static class UPCCameraSequencesConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCCameraSequencesConfig>();
	}
};
static_assert(alignof(UPCCameraSequencesConfig) == 0x000008, "Wrong alignment on UPCCameraSequencesConfig");
static_assert(sizeof(UPCCameraSequencesConfig) == 0x0000D8, "Wrong size on UPCCameraSequencesConfig");
static_assert(offsetof(UPCCameraSequencesConfig, CameraSequenceTotalLengthTime) == 0x000048, "Member 'UPCCameraSequencesConfig::CameraSequenceTotalLengthTime' has a wrong offset!");
static_assert(offsetof(UPCCameraSequencesConfig, DefaultCameraSequence) == 0x000050, "Member 'UPCCameraSequencesConfig::DefaultCameraSequence' has a wrong offset!");
static_assert(offsetof(UPCCameraSequencesConfig, CharacterCameraSequenceOverrides) == 0x000088, "Member 'UPCCameraSequencesConfig::CharacterCameraSequenceOverrides' has a wrong offset!");

// Class DBDProceduralCamera.PCCharacterSequenceOverride
// 0x0088 (0x00D0 - 0x0048)
class UPCCharacterSequenceOverride final : public UDBDPrimaryDataAsset
{
public:
	TSoftObjectPtr<class UProceduralCameraSequenceData> DefaultCharacterIntroCameraSequence;         // 0x0048(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UProceduralCameraSequenceData>> OutfitSequenceOverride;   // 0x0080(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	class UProceduralCameraSequenceData* GetSequence(const TArray<class FName>& OutfitsID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCCharacterSequenceOverride">();
	}
	static class UPCCharacterSequenceOverride* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCCharacterSequenceOverride>();
	}
};
static_assert(alignof(UPCCharacterSequenceOverride) == 0x000008, "Wrong alignment on UPCCharacterSequenceOverride");
static_assert(sizeof(UPCCharacterSequenceOverride) == 0x0000D0, "Wrong size on UPCCharacterSequenceOverride");
static_assert(offsetof(UPCCharacterSequenceOverride, DefaultCharacterIntroCameraSequence) == 0x000048, "Member 'UPCCharacterSequenceOverride::DefaultCharacterIntroCameraSequence' has a wrong offset!");
static_assert(offsetof(UPCCharacterSequenceOverride, OutfitSequenceOverride) == 0x000080, "Member 'UPCCharacterSequenceOverride::OutfitSequenceOverride' has a wrong offset!");

// Class DBDProceduralCamera.ProceduralCameraComponent
// 0x0060 (0x0118 - 0x00B8)
class UProceduralCameraComponent final : public UActorComponent
{
public:
	TSoftObjectPtr<class UPCCameraSequencesConfig> _cameraSequencesConfig;                           // 0x00B8(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelSequenceActor*                    _levelSequenceActor;                               // 0x00F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ACineCameraActor>        _cineCameraActor;                                  // 0x0108(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _targetActor;                                      // 0x0110(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void CreateCameraIntroSequence();
	void DebugFunction();

	void ClearLevelSequence(const struct FGuid& CameraGuid) const;
	class UCameraComponent* GetCameraComponent() const;
	class ACineCameraActor* GetSpawnedCameraActor() const;
	class AActor* GetTargetActor() const;
	class ADBDPlayer* GetTargetPlayer() const;
	void LaunchCameraIntroSequence() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralCameraComponent">();
	}
	static class UProceduralCameraComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProceduralCameraComponent>();
	}
};
static_assert(alignof(UProceduralCameraComponent) == 0x000008, "Wrong alignment on UProceduralCameraComponent");
static_assert(sizeof(UProceduralCameraComponent) == 0x000118, "Wrong size on UProceduralCameraComponent");
static_assert(offsetof(UProceduralCameraComponent, _cameraSequencesConfig) == 0x0000B8, "Member 'UProceduralCameraComponent::_cameraSequencesConfig' has a wrong offset!");
static_assert(offsetof(UProceduralCameraComponent, _levelSequenceActor) == 0x0000F0, "Member 'UProceduralCameraComponent::_levelSequenceActor' has a wrong offset!");
static_assert(offsetof(UProceduralCameraComponent, _cineCameraActor) == 0x000108, "Member 'UProceduralCameraComponent::_cineCameraActor' has a wrong offset!");
static_assert(offsetof(UProceduralCameraComponent, _targetActor) == 0x000110, "Member 'UProceduralCameraComponent::_targetActor' has a wrong offset!");

// Class DBDProceduralCamera.ProceduralCameraRaD
// 0x0050 (0x0378 - 0x0328)
class AProceduralCameraRaD final : public APawn
{
public:
	class UCameraComponent*                       CameraComp;                                        // 0x0328(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 TargetActor;                                       // 0x0330(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FCameraShot>                    Shots;                                             // 0x0338(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         MaximumCinematicLengthWanted;                      // 0x0348(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CinematicTotalLength;                              // 0x034C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x28];                                     // 0x0350(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginCinematic();
	void ComputeTrackObstructionScore(struct FCameraShot* CameraShot);
	void OnCameraTransition(float TransitionDuration, float BeginAt);
	void PlayCinematic();
	void SelectTracks();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralCameraRaD">();
	}
	static class AProceduralCameraRaD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProceduralCameraRaD>();
	}
};
static_assert(alignof(AProceduralCameraRaD) == 0x000008, "Wrong alignment on AProceduralCameraRaD");
static_assert(sizeof(AProceduralCameraRaD) == 0x000378, "Wrong size on AProceduralCameraRaD");
static_assert(offsetof(AProceduralCameraRaD, CameraComp) == 0x000328, "Member 'AProceduralCameraRaD::CameraComp' has a wrong offset!");
static_assert(offsetof(AProceduralCameraRaD, TargetActor) == 0x000330, "Member 'AProceduralCameraRaD::TargetActor' has a wrong offset!");
static_assert(offsetof(AProceduralCameraRaD, Shots) == 0x000338, "Member 'AProceduralCameraRaD::Shots' has a wrong offset!");
static_assert(offsetof(AProceduralCameraRaD, MaximumCinematicLengthWanted) == 0x000348, "Member 'AProceduralCameraRaD::MaximumCinematicLengthWanted' has a wrong offset!");
static_assert(offsetof(AProceduralCameraRaD, CinematicTotalLength) == 0x00034C, "Member 'AProceduralCameraRaD::CinematicTotalLength' has a wrong offset!");

// Class DBDProceduralCamera.ProceduralCameraSequenceData
// 0x0050 (0x0098 - 0x0048)
class UProceduralCameraSequenceData final : public UDBDPrimaryDataAsset
{
public:
	TMap<TSoftObjectPtr<class UProceduralCameraShotData>, int32> _rankedShots;                       // 0x0048(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralCameraSequenceData">();
	}
	static class UProceduralCameraSequenceData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProceduralCameraSequenceData>();
	}
};
static_assert(alignof(UProceduralCameraSequenceData) == 0x000008, "Wrong alignment on UProceduralCameraSequenceData");
static_assert(sizeof(UProceduralCameraSequenceData) == 0x000098, "Wrong size on UProceduralCameraSequenceData");
static_assert(offsetof(UProceduralCameraSequenceData, _rankedShots) == 0x000048, "Member 'UProceduralCameraSequenceData::_rankedShots' has a wrong offset!");

// Class DBDProceduralCamera.ProceduralCameraShotData
// 0x0048 (0x0090 - 0x0048)
class UProceduralCameraShotData final : public UDBDPrimaryDataAsset
{
public:
	TSoftObjectPtr<class ULevelSequence>          LevelSequence;                                     // 0x0048(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApparitionProbability;                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionThreshold;                                // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralCameraShotData">();
	}
	static class UProceduralCameraShotData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProceduralCameraShotData>();
	}
};
static_assert(alignof(UProceduralCameraShotData) == 0x000008, "Wrong alignment on UProceduralCameraShotData");
static_assert(sizeof(UProceduralCameraShotData) == 0x000090, "Wrong size on UProceduralCameraShotData");
static_assert(offsetof(UProceduralCameraShotData, LevelSequence) == 0x000048, "Member 'UProceduralCameraShotData::LevelSequence' has a wrong offset!");
static_assert(offsetof(UProceduralCameraShotData, ApparitionProbability) == 0x000080, "Member 'UProceduralCameraShotData::ApparitionProbability' has a wrong offset!");
static_assert(offsetof(UProceduralCameraShotData, OcclusionThreshold) == 0x000084, "Member 'UProceduralCameraShotData::OcclusionThreshold' has a wrong offset!");

}

