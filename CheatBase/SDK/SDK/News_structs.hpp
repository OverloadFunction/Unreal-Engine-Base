#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: News

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "NewsAndMessagesCommon_structs.hpp"
#include "DataTableUtilities_structs.hpp"


namespace SDK
{

// ScriptStruct News.NewsCallToActionData
// 0x0048 (0x0048 - 0x0000)
struct FNewsCallToActionData final
{
public:
	class FString                                 Link;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ExtraText;                                         // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          ShouldPresentAsQRCode;                             // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QRCodeIsApprovedOnSwitch;                          // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsCallToActionData) == 0x000008, "Wrong alignment on FNewsCallToActionData");
static_assert(sizeof(FNewsCallToActionData) == 0x000048, "Wrong size on FNewsCallToActionData");
static_assert(offsetof(FNewsCallToActionData, Link) == 0x000000, "Member 'FNewsCallToActionData::Link' has a wrong offset!");
static_assert(offsetof(FNewsCallToActionData, Text) == 0x000010, "Member 'FNewsCallToActionData::Text' has a wrong offset!");
static_assert(offsetof(FNewsCallToActionData, ExtraText) == 0x000028, "Member 'FNewsCallToActionData::ExtraText' has a wrong offset!");
static_assert(offsetof(FNewsCallToActionData, ShouldPresentAsQRCode) == 0x000040, "Member 'FNewsCallToActionData::ShouldPresentAsQRCode' has a wrong offset!");
static_assert(offsetof(FNewsCallToActionData, QRCodeIsApprovedOnSwitch) == 0x000041, "Member 'FNewsCallToActionData::QRCodeIsApprovedOnSwitch' has a wrong offset!");

// ScriptStruct News.NewsEditorData
// 0x0128 (0x0140 - 0x0018)
struct FNewsEditorData final : public FDBDTableRowBaseWithId
{
public:
	class FText                                   Title;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Image;                                             // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNewsAndMessagesSection>        Sections;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	double                                        SortOrder;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StartDate;                                         // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InclusionVersion;                                  // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSticky;                                          // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPopup;                                           // 0x0091(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasEventId;                                        // 0x0092(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x1];                                       // 0x0093(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   eventID;                                           // 0x0094(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasCallToAction;                                   // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNewsCallToActionData                  CallToAction;                                      // 0x00A8(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<class FString>                           SegmentationTags;                                  // 0x00F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewsEditorData) == 0x000008, "Wrong alignment on FNewsEditorData");
static_assert(sizeof(FNewsEditorData) == 0x000140, "Wrong size on FNewsEditorData");
static_assert(offsetof(FNewsEditorData, Title) == 0x000018, "Member 'FNewsEditorData::Title' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, Image) == 0x000030, "Member 'FNewsEditorData::Image' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, Sections) == 0x000058, "Member 'FNewsEditorData::Sections' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, SortOrder) == 0x000068, "Member 'FNewsEditorData::SortOrder' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, StartDate) == 0x000070, "Member 'FNewsEditorData::StartDate' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, EndDate) == 0x000078, "Member 'FNewsEditorData::EndDate' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, InclusionVersion) == 0x000080, "Member 'FNewsEditorData::InclusionVersion' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, IsSticky) == 0x000090, "Member 'FNewsEditorData::IsSticky' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, IsPopup) == 0x000091, "Member 'FNewsEditorData::IsPopup' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, HasEventId) == 0x000092, "Member 'FNewsEditorData::HasEventId' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, eventID) == 0x000094, "Member 'FNewsEditorData::eventID' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, HasCallToAction) == 0x0000A0, "Member 'FNewsEditorData::HasCallToAction' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, CallToAction) == 0x0000A8, "Member 'FNewsEditorData::CallToAction' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, SegmentationTags) == 0x0000F0, "Member 'FNewsEditorData::SegmentationTags' has a wrong offset!");

// ScriptStruct News.NewsS3Image
// 0x0048 (0x0048 - 0x0000)
struct FNewsS3Image final
{
public:
	class FString                                 Uri;                                               // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Uri_IsSet;                                         // 0x0010(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PackagedPath;                                      // 0x0018(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PackagedPath_IsSet;                                // 0x0028(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContentVersion;                                    // 0x0030(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContentVersion_IsSet;                              // 0x0040(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsS3Image) == 0x000008, "Wrong alignment on FNewsS3Image");
static_assert(sizeof(FNewsS3Image) == 0x000048, "Wrong size on FNewsS3Image");
static_assert(offsetof(FNewsS3Image, Uri) == 0x000000, "Member 'FNewsS3Image::Uri' has a wrong offset!");
static_assert(offsetof(FNewsS3Image, Uri_IsSet) == 0x000010, "Member 'FNewsS3Image::Uri_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsS3Image, PackagedPath) == 0x000018, "Member 'FNewsS3Image::PackagedPath' has a wrong offset!");
static_assert(offsetof(FNewsS3Image, PackagedPath_IsSet) == 0x000028, "Member 'FNewsS3Image::PackagedPath_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsS3Image, ContentVersion) == 0x000030, "Member 'FNewsS3Image::ContentVersion' has a wrong offset!");
static_assert(offsetof(FNewsS3Image, ContentVersion_IsSet) == 0x000040, "Member 'FNewsS3Image::ContentVersion_IsSet' has a wrong offset!");

// ScriptStruct News.NewsS3Content
// 0x00A0 (0x00A0 - 0x0000)
struct FNewsS3Content final
{
public:
	ENewsAndMessagesSectionType                   Type;                                              // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0008(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Text_IsSet;                                        // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNewsS3Image                           Image;                                             // 0x0020(0x0048)(Transient, NativeAccessSpecifierPublic)
	bool                                          Image_IsSet;                                       // 0x0068(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNewsAndMessagesRuntimeShowcasedItem> ShowcasedItem;                               // 0x0070(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          ShowcasedItem_IsSet;                               // 0x0080(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QRCode;                                            // 0x0088(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QRCode_IsSet;                                      // 0x0098(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwitchKillSwitch;                                  // 0x0099(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwitchKillSwitch_IsSet;                            // 0x009A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B[0x5];                                       // 0x009B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsS3Content) == 0x000008, "Wrong alignment on FNewsS3Content");
static_assert(sizeof(FNewsS3Content) == 0x0000A0, "Wrong size on FNewsS3Content");
static_assert(offsetof(FNewsS3Content, Type) == 0x000000, "Member 'FNewsS3Content::Type' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, Text) == 0x000008, "Member 'FNewsS3Content::Text' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, Text_IsSet) == 0x000018, "Member 'FNewsS3Content::Text_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, Image) == 0x000020, "Member 'FNewsS3Content::Image' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, Image_IsSet) == 0x000068, "Member 'FNewsS3Content::Image_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, ShowcasedItem) == 0x000070, "Member 'FNewsS3Content::ShowcasedItem' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, ShowcasedItem_IsSet) == 0x000080, "Member 'FNewsS3Content::ShowcasedItem_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, QRCode) == 0x000088, "Member 'FNewsS3Content::QRCode' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, QRCode_IsSet) == 0x000098, "Member 'FNewsS3Content::QRCode_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, SwitchKillSwitch) == 0x000099, "Member 'FNewsS3Content::SwitchKillSwitch' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, SwitchKillSwitch_IsSet) == 0x00009A, "Member 'FNewsS3Content::SwitchKillSwitch_IsSet' has a wrong offset!");

// ScriptStruct News.NewsRuntimeMetadata
// 0x0014 (0x0014 - 0x0000)
struct FNewsRuntimeMetadata final
{
public:
	class FName                                   eventID;                                           // 0x0000(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EventId_IsSet;                                     // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPopup;                                           // 0x000D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPopup_IsSet;                                     // 0x000E(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSticky;                                          // 0x000F(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSticky_IsSet;                                    // 0x0010(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsRuntimeMetadata) == 0x000004, "Wrong alignment on FNewsRuntimeMetadata");
static_assert(sizeof(FNewsRuntimeMetadata) == 0x000014, "Wrong size on FNewsRuntimeMetadata");
static_assert(offsetof(FNewsRuntimeMetadata, eventID) == 0x000000, "Member 'FNewsRuntimeMetadata::eventID' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeMetadata, EventId_IsSet) == 0x00000C, "Member 'FNewsRuntimeMetadata::EventId_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeMetadata, IsPopup) == 0x00000D, "Member 'FNewsRuntimeMetadata::IsPopup' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeMetadata, IsPopup_IsSet) == 0x00000E, "Member 'FNewsRuntimeMetadata::IsPopup_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeMetadata, IsSticky) == 0x00000F, "Member 'FNewsRuntimeMetadata::IsSticky' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeMetadata, IsSticky_IsSet) == 0x000010, "Member 'FNewsRuntimeMetadata::IsSticky_IsSet' has a wrong offset!");

// ScriptStruct News.NewsS3Data
// 0x00A8 (0x00A8 - 0x0000)
struct FNewsS3Data final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNewsS3Content>                 Content;                                           // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FNewsAndMessagesCallToAction           CallToAction;                                      // 0x0030(0x0038)(NativeAccessSpecifierPublic)
	bool                                          CallToAction_IsSet;                                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNewsAndMessagesImage                  Image;                                             // 0x0070(0x0030)(NativeAccessSpecifierPublic)
	bool                                          Image_IsSet;                                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsS3Data) == 0x000008, "Wrong alignment on FNewsS3Data");
static_assert(sizeof(FNewsS3Data) == 0x0000A8, "Wrong size on FNewsS3Data");
static_assert(offsetof(FNewsS3Data, ID) == 0x000000, "Member 'FNewsS3Data::ID' has a wrong offset!");
static_assert(offsetof(FNewsS3Data, Title) == 0x000010, "Member 'FNewsS3Data::Title' has a wrong offset!");
static_assert(offsetof(FNewsS3Data, Content) == 0x000020, "Member 'FNewsS3Data::Content' has a wrong offset!");
static_assert(offsetof(FNewsS3Data, CallToAction) == 0x000030, "Member 'FNewsS3Data::CallToAction' has a wrong offset!");
static_assert(offsetof(FNewsS3Data, CallToAction_IsSet) == 0x000068, "Member 'FNewsS3Data::CallToAction_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsS3Data, Image) == 0x000070, "Member 'FNewsS3Data::Image' has a wrong offset!");
static_assert(offsetof(FNewsS3Data, Image_IsSet) == 0x0000A0, "Member 'FNewsS3Data::Image_IsSet' has a wrong offset!");

// ScriptStruct News.NewsRuntimeData
// 0x0110 (0x0110 - 0x0000)
struct FNewsRuntimeData final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNewsAndMessagesImage>          ImageList;                                         // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class FString                                 ContentHash;                                       // 0x0020(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventID;                                           // 0x0030(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0040(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0050(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNewsAndMessagesBodyRuntimeData        Body;                                              // 0x0060(0x0088)(Transient, NativeAccessSpecifierPublic)
	bool                                          IsSticky;                                          // 0x00E8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPopup;                                           // 0x00E9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x00EA(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB[0x5];                                       // 0x00EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartDate;                                         // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x00F8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SortWeight;                                        // 0x0100(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsRuntimeData) == 0x000008, "Wrong alignment on FNewsRuntimeData");
static_assert(sizeof(FNewsRuntimeData) == 0x000110, "Wrong size on FNewsRuntimeData");
static_assert(offsetof(FNewsRuntimeData, ID) == 0x000000, "Member 'FNewsRuntimeData::ID' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, ImageList) == 0x000010, "Member 'FNewsRuntimeData::ImageList' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, ContentHash) == 0x000020, "Member 'FNewsRuntimeData::ContentHash' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, eventID) == 0x000030, "Member 'FNewsRuntimeData::eventID' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, Title) == 0x000040, "Member 'FNewsRuntimeData::Title' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, URL) == 0x000050, "Member 'FNewsRuntimeData::URL' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, Body) == 0x000060, "Member 'FNewsRuntimeData::Body' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, IsSticky) == 0x0000E8, "Member 'FNewsRuntimeData::IsSticky' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, IsPopup) == 0x0000E9, "Member 'FNewsRuntimeData::IsPopup' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, IsNew) == 0x0000EA, "Member 'FNewsRuntimeData::IsNew' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, StartDate) == 0x0000F0, "Member 'FNewsRuntimeData::StartDate' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, EndDate) == 0x0000F8, "Member 'FNewsRuntimeData::EndDate' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, SortWeight) == 0x000100, "Member 'FNewsRuntimeData::SortWeight' has a wrong offset!");

// ScriptStruct News.ReadNewsRecords
// 0x0010 (0x0010 - 0x0000)
struct FReadNewsRecords final
{
public:
	TArray<class FString>                         Ids;                                               // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReadNewsRecords) == 0x000008, "Wrong alignment on FReadNewsRecords");
static_assert(sizeof(FReadNewsRecords) == 0x000010, "Wrong size on FReadNewsRecords");
static_assert(offsetof(FReadNewsRecords, Ids) == 0x000000, "Member 'FReadNewsRecords::Ids' has a wrong offset!");

}

