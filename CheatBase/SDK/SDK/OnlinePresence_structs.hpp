#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OnlinePresence

#include "Basic.hpp"


namespace SDK
{

// Enum OnlinePresence.ERichPresenceStatus
// NumValues: 0x0008
enum class ERichPresenceStatus : uint8
{
	Offline                                  = 0,
	Connected                                = 1,
	InMenus                                  = 2,
	InPartyLobby                             = 3,
	InPartyLobbyLocal                        = 4,
	InOnlineLobby                            = 5,
	InMatch                                  = 6,
	ERichPresenceStatus_MAX                  = 7,
};

// Enum OnlinePresence.ERichPresenceUserType
// NumValues: 0x0003
enum class ERichPresenceUserType : uint8
{
	Player                                   = 0,
	Server                                   = 1,
	ERichPresenceUserType_MAX                = 2,
};

// ScriptStruct OnlinePresence.SegmentedCatalogItemCategory
// 0x0058 (0x0058 - 0x0000)
struct FSegmentedCatalogItemCategory final
{
public:
	TSet<class FName>                             Items;                                             // 0x0000(0x0050)(Transient, NativeAccessSpecifierPublic)
	double                                        Ttl;                                               // 0x0050(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSegmentedCatalogItemCategory) == 0x000008, "Wrong alignment on FSegmentedCatalogItemCategory");
static_assert(sizeof(FSegmentedCatalogItemCategory) == 0x000058, "Wrong size on FSegmentedCatalogItemCategory");
static_assert(offsetof(FSegmentedCatalogItemCategory, Items) == 0x000000, "Member 'FSegmentedCatalogItemCategory::Items' has a wrong offset!");
static_assert(offsetof(FSegmentedCatalogItemCategory, Ttl) == 0x000050, "Member 'FSegmentedCatalogItemCategory::Ttl' has a wrong offset!");

// ScriptStruct OnlinePresence.SegmentedCatalogItems
// 0x0420 (0x0420 - 0x0000)
struct FSegmentedCatalogItems final
{
public:
	struct FSegmentedCatalogItemCategory          Pack;                                              // 0x0000(0x0058)(Transient, NativeAccessSpecifierPublic)
	struct FSegmentedCatalogItemCategory          CurrencyPack;                                      // 0x0058(0x0058)(Transient, NativeAccessSpecifierPublic)
	struct FSegmentedCatalogItemCategory          Character;                                         // 0x00B0(0x0058)(Transient, NativeAccessSpecifierPublic)
	struct FSegmentedCatalogItemCategory          Shrine;                                            // 0x0108(0x0058)(Transient, NativeAccessSpecifierPublic)
	struct FSegmentedCatalogItemCategory          Item;                                              // 0x0160(0x0058)(Transient, NativeAccessSpecifierPublic)
	struct FSegmentedCatalogItemCategory          Outfit;                                            // 0x01B8(0x0058)(Transient, NativeAccessSpecifierPublic)
	struct FSegmentedCatalogItemCategory          Statuette;                                         // 0x0210(0x0058)(Transient, NativeAccessSpecifierPublic)
	struct FSegmentedCatalogItemCategory          Entitlement;                                       // 0x0268(0x0058)(Transient, NativeAccessSpecifierPublic)
	struct FSegmentedCatalogItemCategory          PromoPack;                                         // 0x02C0(0x0058)(Transient, NativeAccessSpecifierPublic)
	struct FSegmentedCatalogItemCategory          PremiumItemPack;                                   // 0x0318(0x0058)(Transient, NativeAccessSpecifierPublic)
	struct FSegmentedCatalogItemCategory          NonRenewableSubscription;                          // 0x0370(0x0058)(Transient, NativeAccessSpecifierPublic)
	struct FSegmentedCatalogItemCategory          SpecialPack;                                       // 0x03C8(0x0058)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSegmentedCatalogItems) == 0x000008, "Wrong alignment on FSegmentedCatalogItems");
static_assert(sizeof(FSegmentedCatalogItems) == 0x000420, "Wrong size on FSegmentedCatalogItems");
static_assert(offsetof(FSegmentedCatalogItems, Pack) == 0x000000, "Member 'FSegmentedCatalogItems::Pack' has a wrong offset!");
static_assert(offsetof(FSegmentedCatalogItems, CurrencyPack) == 0x000058, "Member 'FSegmentedCatalogItems::CurrencyPack' has a wrong offset!");
static_assert(offsetof(FSegmentedCatalogItems, Character) == 0x0000B0, "Member 'FSegmentedCatalogItems::Character' has a wrong offset!");
static_assert(offsetof(FSegmentedCatalogItems, Shrine) == 0x000108, "Member 'FSegmentedCatalogItems::Shrine' has a wrong offset!");
static_assert(offsetof(FSegmentedCatalogItems, Item) == 0x000160, "Member 'FSegmentedCatalogItems::Item' has a wrong offset!");
static_assert(offsetof(FSegmentedCatalogItems, Outfit) == 0x0001B8, "Member 'FSegmentedCatalogItems::Outfit' has a wrong offset!");
static_assert(offsetof(FSegmentedCatalogItems, Statuette) == 0x000210, "Member 'FSegmentedCatalogItems::Statuette' has a wrong offset!");
static_assert(offsetof(FSegmentedCatalogItems, Entitlement) == 0x000268, "Member 'FSegmentedCatalogItems::Entitlement' has a wrong offset!");
static_assert(offsetof(FSegmentedCatalogItems, PromoPack) == 0x0002C0, "Member 'FSegmentedCatalogItems::PromoPack' has a wrong offset!");
static_assert(offsetof(FSegmentedCatalogItems, PremiumItemPack) == 0x000318, "Member 'FSegmentedCatalogItems::PremiumItemPack' has a wrong offset!");
static_assert(offsetof(FSegmentedCatalogItems, NonRenewableSubscription) == 0x000370, "Member 'FSegmentedCatalogItems::NonRenewableSubscription' has a wrong offset!");
static_assert(offsetof(FSegmentedCatalogItems, SpecialPack) == 0x0003C8, "Member 'FSegmentedCatalogItems::SpecialPack' has a wrong offset!");

}

