#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK40

#include "Basic.hpp"

#include "AnimationUtilities_structs.hpp"
#include "Projectile_structs.hpp"
#include "NetworkUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK::Params
{

// Function TheK40.K40SecuritySystemAbilityKillerCosmeticHelperActor.Cosmetic_OnRevealChanged
// 0x0001 (0x0001 - 0x0000)
struct K40SecuritySystemAbilityKillerCosmeticHelperActor_Cosmetic_OnRevealChanged final
{
public:
	bool                                          IsRevealed;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecuritySystemAbilityKillerCosmeticHelperActor_Cosmetic_OnRevealChanged) == 0x000001, "Wrong alignment on K40SecuritySystemAbilityKillerCosmeticHelperActor_Cosmetic_OnRevealChanged");
static_assert(sizeof(K40SecuritySystemAbilityKillerCosmeticHelperActor_Cosmetic_OnRevealChanged) == 0x000001, "Wrong size on K40SecuritySystemAbilityKillerCosmeticHelperActor_Cosmetic_OnRevealChanged");
static_assert(offsetof(K40SecuritySystemAbilityKillerCosmeticHelperActor_Cosmetic_OnRevealChanged, IsRevealed) == 0x000000, "Member 'K40SecuritySystemAbilityKillerCosmeticHelperActor_Cosmetic_OnRevealChanged::IsRevealed' has a wrong offset!");

// Function TheK40.K40SecuritySystemAbilityKillerCosmeticHelperActor.Cosmetic_OnRevealProgressChanged
// 0x0004 (0x0004 - 0x0000)
struct K40SecuritySystemAbilityKillerCosmeticHelperActor_Cosmetic_OnRevealProgressChanged final
{
public:
	float                                         revealProgress;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecuritySystemAbilityKillerCosmeticHelperActor_Cosmetic_OnRevealProgressChanged) == 0x000004, "Wrong alignment on K40SecuritySystemAbilityKillerCosmeticHelperActor_Cosmetic_OnRevealProgressChanged");
static_assert(sizeof(K40SecuritySystemAbilityKillerCosmeticHelperActor_Cosmetic_OnRevealProgressChanged) == 0x000004, "Wrong size on K40SecuritySystemAbilityKillerCosmeticHelperActor_Cosmetic_OnRevealProgressChanged");
static_assert(offsetof(K40SecuritySystemAbilityKillerCosmeticHelperActor_Cosmetic_OnRevealProgressChanged, revealProgress) == 0x000000, "Member 'K40SecuritySystemAbilityKillerCosmeticHelperActor_Cosmetic_OnRevealProgressChanged::revealProgress' has a wrong offset!");

// Function TheK40.K40SecuritySystemAbilityKillerCosmeticHelperActor.GetInteractingSecurityDoor
// 0x0008 (0x0008 - 0x0000)
struct K40SecuritySystemAbilityKillerCosmeticHelperActor_GetInteractingSecurityDoor final
{
public:
	class AK40SecurityDoor*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecuritySystemAbilityKillerCosmeticHelperActor_GetInteractingSecurityDoor) == 0x000008, "Wrong alignment on K40SecuritySystemAbilityKillerCosmeticHelperActor_GetInteractingSecurityDoor");
static_assert(sizeof(K40SecuritySystemAbilityKillerCosmeticHelperActor_GetInteractingSecurityDoor) == 0x000008, "Wrong size on K40SecuritySystemAbilityKillerCosmeticHelperActor_GetInteractingSecurityDoor");
static_assert(offsetof(K40SecuritySystemAbilityKillerCosmeticHelperActor_GetInteractingSecurityDoor, ReturnValue) == 0x000000, "Member 'K40SecuritySystemAbilityKillerCosmeticHelperActor_GetInteractingSecurityDoor::ReturnValue' has a wrong offset!");

// Function TheK40.K40EnvironmentAttachedProjectile.Cosmetic_OnAoERemovalWarningStart
// 0x0004 (0x0004 - 0x0000)
struct K40EnvironmentAttachedProjectile_Cosmetic_OnAoERemovalWarningStart final
{
public:
	float                                         WarningDuration;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40EnvironmentAttachedProjectile_Cosmetic_OnAoERemovalWarningStart) == 0x000004, "Wrong alignment on K40EnvironmentAttachedProjectile_Cosmetic_OnAoERemovalWarningStart");
static_assert(sizeof(K40EnvironmentAttachedProjectile_Cosmetic_OnAoERemovalWarningStart) == 0x000004, "Wrong size on K40EnvironmentAttachedProjectile_Cosmetic_OnAoERemovalWarningStart");
static_assert(offsetof(K40EnvironmentAttachedProjectile_Cosmetic_OnAoERemovalWarningStart, WarningDuration) == 0x000000, "Member 'K40EnvironmentAttachedProjectile_Cosmetic_OnAoERemovalWarningStart::WarningDuration' has a wrong offset!");

// Function TheK40.K40EnvironmentAttachedProjectile.Cosmetic_OnAOESizeChanged
// 0x0004 (0x0004 - 0x0000)
struct K40EnvironmentAttachedProjectile_Cosmetic_OnAOESizeChanged final
{
public:
	float                                         currentAOESize;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40EnvironmentAttachedProjectile_Cosmetic_OnAOESizeChanged) == 0x000004, "Wrong alignment on K40EnvironmentAttachedProjectile_Cosmetic_OnAOESizeChanged");
static_assert(sizeof(K40EnvironmentAttachedProjectile_Cosmetic_OnAOESizeChanged) == 0x000004, "Wrong size on K40EnvironmentAttachedProjectile_Cosmetic_OnAOESizeChanged");
static_assert(offsetof(K40EnvironmentAttachedProjectile_Cosmetic_OnAOESizeChanged, currentAOESize) == 0x000000, "Member 'K40EnvironmentAttachedProjectile_Cosmetic_OnAOESizeChanged::currentAOESize' has a wrong offset!");

// Function TheK40.K40EnvironmentAttachedProjectile.Cosmetic_OnSpawned
// 0x0060 (0x0060 - 0x0000)
struct K40EnvironmentAttachedProjectile_Cosmetic_OnSpawned final
{
public:
	struct FImpactInfo                            ImpactInfo;                                        // 0x0000(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                launchDirection;                                   // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40EnvironmentAttachedProjectile_Cosmetic_OnSpawned) == 0x000008, "Wrong alignment on K40EnvironmentAttachedProjectile_Cosmetic_OnSpawned");
static_assert(sizeof(K40EnvironmentAttachedProjectile_Cosmetic_OnSpawned) == 0x000060, "Wrong size on K40EnvironmentAttachedProjectile_Cosmetic_OnSpawned");
static_assert(offsetof(K40EnvironmentAttachedProjectile_Cosmetic_OnSpawned, ImpactInfo) == 0x000000, "Member 'K40EnvironmentAttachedProjectile_Cosmetic_OnSpawned::ImpactInfo' has a wrong offset!");
static_assert(offsetof(K40EnvironmentAttachedProjectile_Cosmetic_OnSpawned, launchDirection) == 0x000048, "Member 'K40EnvironmentAttachedProjectile_Cosmetic_OnSpawned::launchDirection' has a wrong offset!");

// Function TheK40.K40EnvironmentAttachedProjectile.GetAOEExpansionDuration
// 0x0004 (0x0004 - 0x0000)
struct K40EnvironmentAttachedProjectile_GetAOEExpansionDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40EnvironmentAttachedProjectile_GetAOEExpansionDuration) == 0x000004, "Wrong alignment on K40EnvironmentAttachedProjectile_GetAOEExpansionDuration");
static_assert(sizeof(K40EnvironmentAttachedProjectile_GetAOEExpansionDuration) == 0x000004, "Wrong size on K40EnvironmentAttachedProjectile_GetAOEExpansionDuration");
static_assert(offsetof(K40EnvironmentAttachedProjectile_GetAOEExpansionDuration, ReturnValue) == 0x000000, "Member 'K40EnvironmentAttachedProjectile_GetAOEExpansionDuration::ReturnValue' has a wrong offset!");

// Function TheK40.K40EnvironmentAttachedProjectile.GetAOEShrinkingDuration
// 0x0004 (0x0004 - 0x0000)
struct K40EnvironmentAttachedProjectile_GetAOEShrinkingDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40EnvironmentAttachedProjectile_GetAOEShrinkingDuration) == 0x000004, "Wrong alignment on K40EnvironmentAttachedProjectile_GetAOEShrinkingDuration");
static_assert(sizeof(K40EnvironmentAttachedProjectile_GetAOEShrinkingDuration) == 0x000004, "Wrong size on K40EnvironmentAttachedProjectile_GetAOEShrinkingDuration");
static_assert(offsetof(K40EnvironmentAttachedProjectile_GetAOEShrinkingDuration, ReturnValue) == 0x000000, "Member 'K40EnvironmentAttachedProjectile_GetAOEShrinkingDuration::ReturnValue' has a wrong offset!");

// Function TheK40.K40EnvironmentAttachedProjectile.GetFinalAoERadius
// 0x0004 (0x0004 - 0x0000)
struct K40EnvironmentAttachedProjectile_GetFinalAoERadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40EnvironmentAttachedProjectile_GetFinalAoERadius) == 0x000004, "Wrong alignment on K40EnvironmentAttachedProjectile_GetFinalAoERadius");
static_assert(sizeof(K40EnvironmentAttachedProjectile_GetFinalAoERadius) == 0x000004, "Wrong size on K40EnvironmentAttachedProjectile_GetFinalAoERadius");
static_assert(offsetof(K40EnvironmentAttachedProjectile_GetFinalAoERadius, ReturnValue) == 0x000000, "Member 'K40EnvironmentAttachedProjectile_GetFinalAoERadius::ReturnValue' has a wrong offset!");

// Function TheK40.K40EnvironmentAttachedProjectile.GetInitialAoERadius
// 0x0004 (0x0004 - 0x0000)
struct K40EnvironmentAttachedProjectile_GetInitialAoERadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40EnvironmentAttachedProjectile_GetInitialAoERadius) == 0x000004, "Wrong alignment on K40EnvironmentAttachedProjectile_GetInitialAoERadius");
static_assert(sizeof(K40EnvironmentAttachedProjectile_GetInitialAoERadius) == 0x000004, "Wrong size on K40EnvironmentAttachedProjectile_GetInitialAoERadius");
static_assert(offsetof(K40EnvironmentAttachedProjectile_GetInitialAoERadius, ReturnValue) == 0x000000, "Member 'K40EnvironmentAttachedProjectile_GetInitialAoERadius::ReturnValue' has a wrong offset!");

// Function TheK40.K40EnvironmentAttachedProjectile.IsActive
// 0x0001 (0x0001 - 0x0000)
struct K40EnvironmentAttachedProjectile_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40EnvironmentAttachedProjectile_IsActive) == 0x000001, "Wrong alignment on K40EnvironmentAttachedProjectile_IsActive");
static_assert(sizeof(K40EnvironmentAttachedProjectile_IsActive) == 0x000001, "Wrong size on K40EnvironmentAttachedProjectile_IsActive");
static_assert(offsetof(K40EnvironmentAttachedProjectile_IsActive, ReturnValue) == 0x000000, "Member 'K40EnvironmentAttachedProjectile_IsActive::ReturnValue' has a wrong offset!");

// Function TheK40.K40KillerRevealComponent.OnAuthorityPercentChanged
// 0x0010 (0x0010 - 0x0000)
struct K40KillerRevealComponent_OnAuthorityPercentChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40KillerRevealComponent_OnAuthorityPercentChanged) == 0x000008, "Wrong alignment on K40KillerRevealComponent_OnAuthorityPercentChanged");
static_assert(sizeof(K40KillerRevealComponent_OnAuthorityPercentChanged) == 0x000010, "Wrong size on K40KillerRevealComponent_OnAuthorityPercentChanged");
static_assert(offsetof(K40KillerRevealComponent_OnAuthorityPercentChanged, ChargeableComponent) == 0x000000, "Member 'K40KillerRevealComponent_OnAuthorityPercentChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(K40KillerRevealComponent_OnAuthorityPercentChanged, PercentCompletionChange) == 0x000008, "Member 'K40KillerRevealComponent_OnAuthorityPercentChanged::PercentCompletionChange' has a wrong offset!");
static_assert(offsetof(K40KillerRevealComponent_OnAuthorityPercentChanged, TotalPercentComplete) == 0x00000C, "Member 'K40KillerRevealComponent_OnAuthorityPercentChanged::TotalPercentComplete' has a wrong offset!");

// Function TheK40.K40KillerRevealComponent.OnCosmeticPercentChanged
// 0x0010 (0x0010 - 0x0000)
struct K40KillerRevealComponent_OnCosmeticPercentChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K40KillerRevealComponent_OnCosmeticPercentChanged) == 0x000008, "Wrong alignment on K40KillerRevealComponent_OnCosmeticPercentChanged");
static_assert(sizeof(K40KillerRevealComponent_OnCosmeticPercentChanged) == 0x000010, "Wrong size on K40KillerRevealComponent_OnCosmeticPercentChanged");
static_assert(offsetof(K40KillerRevealComponent_OnCosmeticPercentChanged, ChargeableComponent) == 0x000000, "Member 'K40KillerRevealComponent_OnCosmeticPercentChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(K40KillerRevealComponent_OnCosmeticPercentChanged, TotalPercentComplete) == 0x000008, "Member 'K40KillerRevealComponent_OnCosmeticPercentChanged::TotalPercentComplete' has a wrong offset!");

// Function TheK40.K40P02.Authority_OnIsInTerrorRadiusChanged
// 0x0010 (0x0010 - 0x0000)
struct K40P02_Authority_OnIsInTerrorRadiusChanged final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInTerrorRadius;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K40P02_Authority_OnIsInTerrorRadiusChanged) == 0x000008, "Wrong alignment on K40P02_Authority_OnIsInTerrorRadiusChanged");
static_assert(sizeof(K40P02_Authority_OnIsInTerrorRadiusChanged) == 0x000010, "Wrong size on K40P02_Authority_OnIsInTerrorRadiusChanged");
static_assert(offsetof(K40P02_Authority_OnIsInTerrorRadiusChanged, Survivor) == 0x000000, "Member 'K40P02_Authority_OnIsInTerrorRadiusChanged::Survivor' has a wrong offset!");
static_assert(offsetof(K40P02_Authority_OnIsInTerrorRadiusChanged, IsInTerrorRadius) == 0x000008, "Member 'K40P02_Authority_OnIsInTerrorRadiusChanged::IsInTerrorRadius' has a wrong offset!");

// Function TheK40.K40P02.Multicast_SurvivorScream
// 0x0008 (0x0008 - 0x0000)
struct K40P02_Multicast_SurvivorScream final
{
public:
	const class UScreamComponent*                 ScreamComponent;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40P02_Multicast_SurvivorScream) == 0x000008, "Wrong alignment on K40P02_Multicast_SurvivorScream");
static_assert(sizeof(K40P02_Multicast_SurvivorScream) == 0x000008, "Wrong size on K40P02_Multicast_SurvivorScream");
static_assert(offsetof(K40P02_Multicast_SurvivorScream, ScreamComponent) == 0x000000, "Member 'K40P02_Multicast_SurvivorScream::ScreamComponent' has a wrong offset!");

// Function TheK40.K40P03.Authority_AdjustExitGateChargeableRegressionRate
// 0x0010 (0x0010 - 0x0000)
struct K40P03_Authority_AdjustExitGateChargeableRegressionRate final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40P03_Authority_AdjustExitGateChargeableRegressionRate) == 0x000008, "Wrong alignment on K40P03_Authority_AdjustExitGateChargeableRegressionRate");
static_assert(sizeof(K40P03_Authority_AdjustExitGateChargeableRegressionRate) == 0x000010, "Wrong size on K40P03_Authority_AdjustExitGateChargeableRegressionRate");
static_assert(offsetof(K40P03_Authority_AdjustExitGateChargeableRegressionRate, ChargeableComponent) == 0x000000, "Member 'K40P03_Authority_AdjustExitGateChargeableRegressionRate::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(K40P03_Authority_AdjustExitGateChargeableRegressionRate, PercentCompletionChange) == 0x000008, "Member 'K40P03_Authority_AdjustExitGateChargeableRegressionRate::PercentCompletionChange' has a wrong offset!");
static_assert(offsetof(K40P03_Authority_AdjustExitGateChargeableRegressionRate, TotalPercentComplete) == 0x00000C, "Member 'K40P03_Authority_AdjustExitGateChargeableRegressionRate::TotalPercentComplete' has a wrong offset!");

// Function TheK40.K40Projectile.NearMissOverlapBegin
// 0x0110 (0x0110 - 0x0000)
struct K40Projectile_NearMissOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40Projectile_NearMissOverlapBegin) == 0x000008, "Wrong alignment on K40Projectile_NearMissOverlapBegin");
static_assert(sizeof(K40Projectile_NearMissOverlapBegin) == 0x000110, "Wrong size on K40Projectile_NearMissOverlapBegin");
static_assert(offsetof(K40Projectile_NearMissOverlapBegin, OverlappedComponent) == 0x000000, "Member 'K40Projectile_NearMissOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(K40Projectile_NearMissOverlapBegin, OtherActor) == 0x000008, "Member 'K40Projectile_NearMissOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(K40Projectile_NearMissOverlapBegin, OtherComp) == 0x000010, "Member 'K40Projectile_NearMissOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(K40Projectile_NearMissOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'K40Projectile_NearMissOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(K40Projectile_NearMissOverlapBegin, bFromSweep) == 0x00001C, "Member 'K40Projectile_NearMissOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(K40Projectile_NearMissOverlapBegin, SweepResult) == 0x000020, "Member 'K40Projectile_NearMissOverlapBegin::SweepResult' has a wrong offset!");

// Function TheK40.K40Projectile.NearMissOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct K40Projectile_NearMissOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K40Projectile_NearMissOverlapEnd) == 0x000008, "Wrong alignment on K40Projectile_NearMissOverlapEnd");
static_assert(sizeof(K40Projectile_NearMissOverlapEnd) == 0x000020, "Wrong size on K40Projectile_NearMissOverlapEnd");
static_assert(offsetof(K40Projectile_NearMissOverlapEnd, OverlappedComponent) == 0x000000, "Member 'K40Projectile_NearMissOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(K40Projectile_NearMissOverlapEnd, OtherActor) == 0x000008, "Member 'K40Projectile_NearMissOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(K40Projectile_NearMissOverlapEnd, OtherComp) == 0x000010, "Member 'K40Projectile_NearMissOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(K40Projectile_NearMissOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'K40Projectile_NearMissOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function TheK40.K40Projectile.GetLastLaunchInfo
// 0x0038 (0x0038 - 0x0000)
struct K40Projectile_GetLastLaunchInfo final
{
public:
	struct FLaunchInfo                            ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40Projectile_GetLastLaunchInfo) == 0x000008, "Wrong alignment on K40Projectile_GetLastLaunchInfo");
static_assert(sizeof(K40Projectile_GetLastLaunchInfo) == 0x000038, "Wrong size on K40Projectile_GetLastLaunchInfo");
static_assert(offsetof(K40Projectile_GetLastLaunchInfo, ReturnValue) == 0x000000, "Member 'K40Projectile_GetLastLaunchInfo::ReturnValue' has a wrong offset!");

// Function TheK40.K40ProjectileAbility.Multicast_Cheat_UseProjectileTeleportThroughDoor
// 0x0001 (0x0001 - 0x0000)
struct K40ProjectileAbility_Multicast_Cheat_UseProjectileTeleportThroughDoor final
{
public:
	bool                                          isUsingProjectileTeleportThroughDoor;              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40ProjectileAbility_Multicast_Cheat_UseProjectileTeleportThroughDoor) == 0x000001, "Wrong alignment on K40ProjectileAbility_Multicast_Cheat_UseProjectileTeleportThroughDoor");
static_assert(sizeof(K40ProjectileAbility_Multicast_Cheat_UseProjectileTeleportThroughDoor) == 0x000001, "Wrong size on K40ProjectileAbility_Multicast_Cheat_UseProjectileTeleportThroughDoor");
static_assert(offsetof(K40ProjectileAbility_Multicast_Cheat_UseProjectileTeleportThroughDoor, isUsingProjectileTeleportThroughDoor) == 0x000000, "Member 'K40ProjectileAbility_Multicast_Cheat_UseProjectileTeleportThroughDoor::isUsingProjectileTeleportThroughDoor' has a wrong offset!");

// Function TheK40.K40ProjectileAbility.Multicast_Cheat_UseProjectileTerrorRadius
// 0x0001 (0x0001 - 0x0000)
struct K40ProjectileAbility_Multicast_Cheat_UseProjectileTerrorRadius final
{
public:
	bool                                          isUsingProjectileTerrorRadius;                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40ProjectileAbility_Multicast_Cheat_UseProjectileTerrorRadius) == 0x000001, "Wrong alignment on K40ProjectileAbility_Multicast_Cheat_UseProjectileTerrorRadius");
static_assert(sizeof(K40ProjectileAbility_Multicast_Cheat_UseProjectileTerrorRadius) == 0x000001, "Wrong size on K40ProjectileAbility_Multicast_Cheat_UseProjectileTerrorRadius");
static_assert(offsetof(K40ProjectileAbility_Multicast_Cheat_UseProjectileTerrorRadius, isUsingProjectileTerrorRadius) == 0x000000, "Member 'K40ProjectileAbility_Multicast_Cheat_UseProjectileTerrorRadius::isUsingProjectileTerrorRadius' has a wrong offset!");

// Function TheK40.K40ProjectileAbility.OnRep_AttachedProjectileActor
// 0x0008 (0x0008 - 0x0000)
struct K40ProjectileAbility_OnRep_AttachedProjectileActor final
{
public:
	class AActor*                                 oldActorWithAttachedProjectile;                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40ProjectileAbility_OnRep_AttachedProjectileActor) == 0x000008, "Wrong alignment on K40ProjectileAbility_OnRep_AttachedProjectileActor");
static_assert(sizeof(K40ProjectileAbility_OnRep_AttachedProjectileActor) == 0x000008, "Wrong size on K40ProjectileAbility_OnRep_AttachedProjectileActor");
static_assert(offsetof(K40ProjectileAbility_OnRep_AttachedProjectileActor, oldActorWithAttachedProjectile) == 0x000000, "Member 'K40ProjectileAbility_OnRep_AttachedProjectileActor::oldActorWithAttachedProjectile' has a wrong offset!");

// Function TheK40.K40ProjectileAbilityKillerCosmeticHelperActor.Cosmetic_IsProjectileGrabbing
// 0x0001 (0x0001 - 0x0000)
struct K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_IsProjectileGrabbing final
{
public:
	bool                                          isProjectileGrabbing;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_IsProjectileGrabbing) == 0x000001, "Wrong alignment on K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_IsProjectileGrabbing");
static_assert(sizeof(K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_IsProjectileGrabbing) == 0x000001, "Wrong size on K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_IsProjectileGrabbing");
static_assert(offsetof(K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_IsProjectileGrabbing, isProjectileGrabbing) == 0x000000, "Member 'K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_IsProjectileGrabbing::isProjectileGrabbing' has a wrong offset!");

// Function TheK40.K40ProjectileAbilityKillerCosmeticHelperActor.Cosmetic_OnAxeGrabAvailable_Start
// 0x0008 (0x0008 - 0x0000)
struct K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_OnAxeGrabAvailable_Start final
{
public:
	class ASurvivor*                              attachedProjectileSurvivor;                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_OnAxeGrabAvailable_Start) == 0x000008, "Wrong alignment on K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_OnAxeGrabAvailable_Start");
static_assert(sizeof(K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_OnAxeGrabAvailable_Start) == 0x000008, "Wrong size on K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_OnAxeGrabAvailable_Start");
static_assert(offsetof(K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_OnAxeGrabAvailable_Start, attachedProjectileSurvivor) == 0x000000, "Member 'K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_OnAxeGrabAvailable_Start::attachedProjectileSurvivor' has a wrong offset!");

// Function TheK40.K40ProjectileAbilityKillerCosmeticHelperActor.Cosmetic_OnAxeGrabAvailable_Stop
// 0x0008 (0x0008 - 0x0000)
struct K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_OnAxeGrabAvailable_Stop final
{
public:
	class ASurvivor*                              attachedProjectileSurvivor;                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_OnAxeGrabAvailable_Stop) == 0x000008, "Wrong alignment on K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_OnAxeGrabAvailable_Stop");
static_assert(sizeof(K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_OnAxeGrabAvailable_Stop) == 0x000008, "Wrong size on K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_OnAxeGrabAvailable_Stop");
static_assert(offsetof(K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_OnAxeGrabAvailable_Stop, attachedProjectileSurvivor) == 0x000000, "Member 'K40ProjectileAbilityKillerCosmeticHelperActor_Cosmetic_OnAxeGrabAvailable_Stop::attachedProjectileSurvivor' has a wrong offset!");

// Function TheK40.K40ProjectileAbilitySurvivorCosmeticHelperActor.Cosmetic_IsBeingProjectileGrabbed
// 0x0001 (0x0001 - 0x0000)
struct K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_IsBeingProjectileGrabbed final
{
public:
	bool                                          isBeingProjectileGrabbed;                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_IsBeingProjectileGrabbed) == 0x000001, "Wrong alignment on K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_IsBeingProjectileGrabbed");
static_assert(sizeof(K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_IsBeingProjectileGrabbed) == 0x000001, "Wrong size on K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_IsBeingProjectileGrabbed");
static_assert(offsetof(K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_IsBeingProjectileGrabbed, isBeingProjectileGrabbed) == 0x000000, "Member 'K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_IsBeingProjectileGrabbed::isBeingProjectileGrabbed' has a wrong offset!");

// Function TheK40.K40ProjectileAbilitySurvivorCosmeticHelperActor.Cosmetic_OnProjectileAttachmentChanged
// 0x0001 (0x0001 - 0x0000)
struct K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_OnProjectileAttachmentChanged final
{
public:
	bool                                          IsAttached;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_OnProjectileAttachmentChanged) == 0x000001, "Wrong alignment on K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_OnProjectileAttachmentChanged");
static_assert(sizeof(K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_OnProjectileAttachmentChanged) == 0x000001, "Wrong size on K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_OnProjectileAttachmentChanged");
static_assert(offsetof(K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_OnProjectileAttachmentChanged, IsAttached) == 0x000000, "Member 'K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_OnProjectileAttachmentChanged::IsAttached' has a wrong offset!");

// Function TheK40.K40ProjectileAbilitySurvivorCosmeticHelperActor.Cosmetic_OnSurvivorHidingChanged
// 0x0001 (0x0001 - 0x0000)
struct K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_OnSurvivorHidingChanged final
{
public:
	bool                                          IsHiding;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_OnSurvivorHidingChanged) == 0x000001, "Wrong alignment on K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_OnSurvivorHidingChanged");
static_assert(sizeof(K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_OnSurvivorHidingChanged) == 0x000001, "Wrong size on K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_OnSurvivorHidingChanged");
static_assert(offsetof(K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_OnSurvivorHidingChanged, IsHiding) == 0x000000, "Member 'K40ProjectileAbilitySurvivorCosmeticHelperActor_Cosmetic_OnSurvivorHidingChanged::IsHiding' has a wrong offset!");

// Function TheK40.K40SecurityCamera.Cosmetic_OnCameraStateChanged
// 0x0001 (0x0001 - 0x0000)
struct K40SecurityCamera_Cosmetic_OnCameraStateChanged final
{
public:
	bool                                          IsAvailable;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCamera_Cosmetic_OnCameraStateChanged) == 0x000001, "Wrong alignment on K40SecurityCamera_Cosmetic_OnCameraStateChanged");
static_assert(sizeof(K40SecurityCamera_Cosmetic_OnCameraStateChanged) == 0x000001, "Wrong size on K40SecurityCamera_Cosmetic_OnCameraStateChanged");
static_assert(offsetof(K40SecurityCamera_Cosmetic_OnCameraStateChanged, IsAvailable) == 0x000000, "Member 'K40SecurityCamera_Cosmetic_OnCameraStateChanged::IsAvailable' has a wrong offset!");

// Function TheK40.K40SecurityCamera.Cosmetic_SelectCameraForTeleport
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCamera_Cosmetic_SelectCameraForTeleport final
{
public:
	class ADBDPlayer*                             viewingPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCamera_Cosmetic_SelectCameraForTeleport) == 0x000008, "Wrong alignment on K40SecurityCamera_Cosmetic_SelectCameraForTeleport");
static_assert(sizeof(K40SecurityCamera_Cosmetic_SelectCameraForTeleport) == 0x000008, "Wrong size on K40SecurityCamera_Cosmetic_SelectCameraForTeleport");
static_assert(offsetof(K40SecurityCamera_Cosmetic_SelectCameraForTeleport, viewingPlayer) == 0x000000, "Member 'K40SecurityCamera_Cosmetic_SelectCameraForTeleport::viewingPlayer' has a wrong offset!");

// Function TheK40.K40SecurityCamera.Cosmetic_SwitchViewedCamera
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCamera_Cosmetic_SwitchViewedCamera final
{
public:
	class ADBDPlayer*                             viewingPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCamera_Cosmetic_SwitchViewedCamera) == 0x000008, "Wrong alignment on K40SecurityCamera_Cosmetic_SwitchViewedCamera");
static_assert(sizeof(K40SecurityCamera_Cosmetic_SwitchViewedCamera) == 0x000008, "Wrong size on K40SecurityCamera_Cosmetic_SwitchViewedCamera");
static_assert(offsetof(K40SecurityCamera_Cosmetic_SwitchViewedCamera, viewingPlayer) == 0x000000, "Member 'K40SecurityCamera_Cosmetic_SwitchViewedCamera::viewingPlayer' has a wrong offset!");

// Function TheK40.K40SecurityCamera.GetCurrentlyControllingPlayer
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCamera_GetCurrentlyControllingPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCamera_GetCurrentlyControllingPlayer) == 0x000008, "Wrong alignment on K40SecurityCamera_GetCurrentlyControllingPlayer");
static_assert(sizeof(K40SecurityCamera_GetCurrentlyControllingPlayer) == 0x000008, "Wrong size on K40SecurityCamera_GetCurrentlyControllingPlayer");
static_assert(offsetof(K40SecurityCamera_GetCurrentlyControllingPlayer, ReturnValue) == 0x000000, "Member 'K40SecurityCamera_GetCurrentlyControllingPlayer::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityCameraInteraction.OnRep_CurrentlyViewCamera
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCameraInteraction_OnRep_CurrentlyViewCamera final
{
public:
	TWeakObjectPtr<class AK40SecurityCamera>      oldViewedCamera;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCameraInteraction_OnRep_CurrentlyViewCamera) == 0x000004, "Wrong alignment on K40SecurityCameraInteraction_OnRep_CurrentlyViewCamera");
static_assert(sizeof(K40SecurityCameraInteraction_OnRep_CurrentlyViewCamera) == 0x000008, "Wrong size on K40SecurityCameraInteraction_OnRep_CurrentlyViewCamera");
static_assert(offsetof(K40SecurityCameraInteraction_OnRep_CurrentlyViewCamera, oldViewedCamera) == 0x000000, "Member 'K40SecurityCameraInteraction_OnRep_CurrentlyViewCamera::oldViewedCamera' has a wrong offset!");

// Function TheK40.K40SecurityCameraKillerRevealComponent.OnControllingPlayerChanged
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCameraKillerRevealComponent_OnControllingPlayerChanged final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCameraKillerRevealComponent_OnControllingPlayerChanged) == 0x000008, "Wrong alignment on K40SecurityCameraKillerRevealComponent_OnControllingPlayerChanged");
static_assert(sizeof(K40SecurityCameraKillerRevealComponent_OnControllingPlayerChanged) == 0x000008, "Wrong size on K40SecurityCameraKillerRevealComponent_OnControllingPlayerChanged");
static_assert(offsetof(K40SecurityCameraKillerRevealComponent_OnControllingPlayerChanged, Player) == 0x000000, "Member 'K40SecurityCameraKillerRevealComponent_OnControllingPlayerChanged::Player' has a wrong offset!");

// Function TheK40.K40SecurityCameraKillerRevealComponent.OnRep_IsRevealingKiller
// 0x0001 (0x0001 - 0x0000)
struct K40SecurityCameraKillerRevealComponent_OnRep_IsRevealingKiller final
{
public:
	bool                                          oldIsRevealingKiller;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCameraKillerRevealComponent_OnRep_IsRevealingKiller) == 0x000001, "Wrong alignment on K40SecurityCameraKillerRevealComponent_OnRep_IsRevealingKiller");
static_assert(sizeof(K40SecurityCameraKillerRevealComponent_OnRep_IsRevealingKiller) == 0x000001, "Wrong size on K40SecurityCameraKillerRevealComponent_OnRep_IsRevealingKiller");
static_assert(offsetof(K40SecurityCameraKillerRevealComponent_OnRep_IsRevealingKiller, oldIsRevealingKiller) == 0x000000, "Member 'K40SecurityCameraKillerRevealComponent_OnRep_IsRevealingKiller::oldIsRevealingKiller' has a wrong offset!");

// Function TheK40.K40SecurityCameraSurvivorComponent.Server_OnCameraDirectionInputPressed
// 0x0001 (0x0001 - 0x0000)
struct K40SecurityCameraSurvivorComponent_Server_OnCameraDirectionInputPressed final
{
public:
	EDirectionalInputKey                          directionalInput;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCameraSurvivorComponent_Server_OnCameraDirectionInputPressed) == 0x000001, "Wrong alignment on K40SecurityCameraSurvivorComponent_Server_OnCameraDirectionInputPressed");
static_assert(sizeof(K40SecurityCameraSurvivorComponent_Server_OnCameraDirectionInputPressed) == 0x000001, "Wrong size on K40SecurityCameraSurvivorComponent_Server_OnCameraDirectionInputPressed");
static_assert(offsetof(K40SecurityCameraSurvivorComponent_Server_OnCameraDirectionInputPressed, directionalInput) == 0x000000, "Member 'K40SecurityCameraSurvivorComponent_Server_OnCameraDirectionInputPressed::directionalInput' has a wrong offset!");

// Function TheK40.K40SecurityCameraSurvivorComponent.Server_SetCameraActorRotation
// 0x0018 (0x0018 - 0x0000)
struct K40SecurityCameraSurvivorComponent_Server_SetCameraActorRotation final
{
public:
	struct FYawAndPitchRotator_NetQuantize16      newActorRotation;                                  // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCameraSurvivorComponent_Server_SetCameraActorRotation) == 0x000008, "Wrong alignment on K40SecurityCameraSurvivorComponent_Server_SetCameraActorRotation");
static_assert(sizeof(K40SecurityCameraSurvivorComponent_Server_SetCameraActorRotation) == 0x000018, "Wrong size on K40SecurityCameraSurvivorComponent_Server_SetCameraActorRotation");
static_assert(offsetof(K40SecurityCameraSurvivorComponent_Server_SetCameraActorRotation, newActorRotation) == 0x000000, "Member 'K40SecurityCameraSurvivorComponent_Server_SetCameraActorRotation::newActorRotation' has a wrong offset!");

// Function TheK40.K40SecurityCameraSurvivorComponent.Server_SetCameraToTargetByDoorID
// 0x0001 (0x0001 - 0x0000)
struct K40SecurityCameraSurvivorComponent_Server_SetCameraToTargetByDoorID final
{
public:
	uint8                                         doorID;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCameraSurvivorComponent_Server_SetCameraToTargetByDoorID) == 0x000001, "Wrong alignment on K40SecurityCameraSurvivorComponent_Server_SetCameraToTargetByDoorID");
static_assert(sizeof(K40SecurityCameraSurvivorComponent_Server_SetCameraToTargetByDoorID) == 0x000001, "Wrong size on K40SecurityCameraSurvivorComponent_Server_SetCameraToTargetByDoorID");
static_assert(offsetof(K40SecurityCameraSurvivorComponent_Server_SetCameraToTargetByDoorID, doorID) == 0x000000, "Member 'K40SecurityCameraSurvivorComponent_Server_SetCameraToTargetByDoorID::doorID' has a wrong offset!");

// Function TheK40.K40SecurityCorridor.StartCorridorSequence
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCorridor_StartCorridorSequence final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCorridor_StartCorridorSequence) == 0x000008, "Wrong alignment on K40SecurityCorridor_StartCorridorSequence");
static_assert(sizeof(K40SecurityCorridor_StartCorridorSequence) == 0x000008, "Wrong size on K40SecurityCorridor_StartCorridorSequence");
static_assert(offsetof(K40SecurityCorridor_StartCorridorSequence, Survivor) == 0x000000, "Member 'K40SecurityCorridor_StartCorridorSequence::Survivor' has a wrong offset!");

// Function TheK40.K40SecurityCorridor.StartKillerCorridorSequence
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCorridor_StartKillerCorridorSequence final
{
public:
	class AKiller*                                Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCorridor_StartKillerCorridorSequence) == 0x000008, "Wrong alignment on K40SecurityCorridor_StartKillerCorridorSequence");
static_assert(sizeof(K40SecurityCorridor_StartKillerCorridorSequence) == 0x000008, "Wrong size on K40SecurityCorridor_StartKillerCorridorSequence");
static_assert(offsetof(K40SecurityCorridor_StartKillerCorridorSequence, Killer) == 0x000000, "Member 'K40SecurityCorridor_StartKillerCorridorSequence::Killer' has a wrong offset!");

// Function TheK40.K40SecurityCorridor.GetSurvivorCameraDolly
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCorridor_GetSurvivorCameraDolly final
{
public:
	class AK40SecurityCorridorSurvivorCameraDolly* ReturnValue;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCorridor_GetSurvivorCameraDolly) == 0x000008, "Wrong alignment on K40SecurityCorridor_GetSurvivorCameraDolly");
static_assert(sizeof(K40SecurityCorridor_GetSurvivorCameraDolly) == 0x000008, "Wrong size on K40SecurityCorridor_GetSurvivorCameraDolly");
static_assert(offsetof(K40SecurityCorridor_GetSurvivorCameraDolly, ReturnValue) == 0x000000, "Member 'K40SecurityCorridor_GetSurvivorCameraDolly::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityCorridor.IsCorridorSequencePlaying
// 0x0001 (0x0001 - 0x0000)
struct K40SecurityCorridor_IsCorridorSequencePlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCorridor_IsCorridorSequencePlaying) == 0x000001, "Wrong alignment on K40SecurityCorridor_IsCorridorSequencePlaying");
static_assert(sizeof(K40SecurityCorridor_IsCorridorSequencePlaying) == 0x000001, "Wrong size on K40SecurityCorridor_IsCorridorSequencePlaying");
static_assert(offsetof(K40SecurityCorridor_IsCorridorSequencePlaying, ReturnValue) == 0x000000, "Member 'K40SecurityCorridor_IsCorridorSequencePlaying::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityCorridor.IsJumpscarePlaying
// 0x0001 (0x0001 - 0x0000)
struct K40SecurityCorridor_IsJumpscarePlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCorridor_IsJumpscarePlaying) == 0x000001, "Wrong alignment on K40SecurityCorridor_IsJumpscarePlaying");
static_assert(sizeof(K40SecurityCorridor_IsJumpscarePlaying) == 0x000001, "Wrong size on K40SecurityCorridor_IsJumpscarePlaying");
static_assert(offsetof(K40SecurityCorridor_IsJumpscarePlaying, ReturnValue) == 0x000000, "Member 'K40SecurityCorridor_IsJumpscarePlaying::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityCorridorCameraDolly.StartCorridorSequence
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCorridorCameraDolly_StartCorridorSequence final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCorridorCameraDolly_StartCorridorSequence) == 0x000008, "Wrong alignment on K40SecurityCorridorCameraDolly_StartCorridorSequence");
static_assert(sizeof(K40SecurityCorridorCameraDolly_StartCorridorSequence) == 0x000008, "Wrong size on K40SecurityCorridorCameraDolly_StartCorridorSequence");
static_assert(offsetof(K40SecurityCorridorCameraDolly_StartCorridorSequence, Player) == 0x000000, "Member 'K40SecurityCorridorCameraDolly_StartCorridorSequence::Player' has a wrong offset!");

// Function TheK40.K40SecurityCorridorCameraDolly.GetKillerHusk
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCorridorCameraDolly_GetKillerHusk final
{
public:
	class AK40SecurityCorridorHusk*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCorridorCameraDolly_GetKillerHusk) == 0x000008, "Wrong alignment on K40SecurityCorridorCameraDolly_GetKillerHusk");
static_assert(sizeof(K40SecurityCorridorCameraDolly_GetKillerHusk) == 0x000008, "Wrong size on K40SecurityCorridorCameraDolly_GetKillerHusk");
static_assert(offsetof(K40SecurityCorridorCameraDolly_GetKillerHusk, ReturnValue) == 0x000000, "Member 'K40SecurityCorridorCameraDolly_GetKillerHusk::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityCorridorHusk.GetHuskAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCorridorHusk_GetHuskAudioComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCorridorHusk_GetHuskAudioComponent) == 0x000008, "Wrong alignment on K40SecurityCorridorHusk_GetHuskAudioComponent");
static_assert(sizeof(K40SecurityCorridorHusk_GetHuskAudioComponent) == 0x000008, "Wrong size on K40SecurityCorridorHusk_GetHuskAudioComponent");
static_assert(offsetof(K40SecurityCorridorHusk_GetHuskAudioComponent, ReturnValue) == 0x000000, "Member 'K40SecurityCorridorHusk_GetHuskAudioComponent::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityCorridorHusk.PlayMontage
// 0x0030 (0x0030 - 0x0000)
struct K40SecurityCorridorHusk_PlayMontage final
{
public:
	struct FAnimationMontageDescriptor            animMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFollower;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCorridorHusk_PlayMontage) == 0x000008, "Wrong alignment on K40SecurityCorridorHusk_PlayMontage");
static_assert(sizeof(K40SecurityCorridorHusk_PlayMontage) == 0x000030, "Wrong size on K40SecurityCorridorHusk_PlayMontage");
static_assert(offsetof(K40SecurityCorridorHusk_PlayMontage, animMontageID) == 0x000000, "Member 'K40SecurityCorridorHusk_PlayMontage::animMontageID' has a wrong offset!");
static_assert(offsetof(K40SecurityCorridorHusk_PlayMontage, PlayRate) == 0x000020, "Member 'K40SecurityCorridorHusk_PlayMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(K40SecurityCorridorHusk_PlayMontage, isFollower) == 0x000024, "Member 'K40SecurityCorridorHusk_PlayMontage::isFollower' has a wrong offset!");
static_assert(offsetof(K40SecurityCorridorHusk_PlayMontage, ReturnValue) == 0x000028, "Member 'K40SecurityCorridorHusk_PlayMontage::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityCorridorHusk.GetKillerCustomizedAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCorridorHusk_GetKillerCustomizedAudioComponent final
{
public:
	class UCustomizedAudioComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCorridorHusk_GetKillerCustomizedAudioComponent) == 0x000008, "Wrong alignment on K40SecurityCorridorHusk_GetKillerCustomizedAudioComponent");
static_assert(sizeof(K40SecurityCorridorHusk_GetKillerCustomizedAudioComponent) == 0x000008, "Wrong size on K40SecurityCorridorHusk_GetKillerCustomizedAudioComponent");
static_assert(offsetof(K40SecurityCorridorHusk_GetKillerCustomizedAudioComponent, ReturnValue) == 0x000000, "Member 'K40SecurityCorridorHusk_GetKillerCustomizedAudioComponent::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityCorridorHusk.GetSurvivorCustomizedAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCorridorHusk_GetSurvivorCustomizedAudioComponent final
{
public:
	class UCustomizedAudioComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCorridorHusk_GetSurvivorCustomizedAudioComponent) == 0x000008, "Wrong alignment on K40SecurityCorridorHusk_GetSurvivorCustomizedAudioComponent");
static_assert(sizeof(K40SecurityCorridorHusk_GetSurvivorCustomizedAudioComponent) == 0x000008, "Wrong size on K40SecurityCorridorHusk_GetSurvivorCustomizedAudioComponent");
static_assert(offsetof(K40SecurityCorridorHusk_GetSurvivorCustomizedAudioComponent, ReturnValue) == 0x000000, "Member 'K40SecurityCorridorHusk_GetSurvivorCustomizedAudioComponent::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityCorridorKillerCameraDolly.Cosmetic_OnSurvivorHuskCreated
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCorridorKillerCameraDolly_Cosmetic_OnSurvivorHuskCreated final
{
public:
	class AK40SecurityCorridorHusk*               survivorHusk;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCorridorKillerCameraDolly_Cosmetic_OnSurvivorHuskCreated) == 0x000008, "Wrong alignment on K40SecurityCorridorKillerCameraDolly_Cosmetic_OnSurvivorHuskCreated");
static_assert(sizeof(K40SecurityCorridorKillerCameraDolly_Cosmetic_OnSurvivorHuskCreated) == 0x000008, "Wrong size on K40SecurityCorridorKillerCameraDolly_Cosmetic_OnSurvivorHuskCreated");
static_assert(offsetof(K40SecurityCorridorKillerCameraDolly_Cosmetic_OnSurvivorHuskCreated, survivorHusk) == 0x000000, "Member 'K40SecurityCorridorKillerCameraDolly_Cosmetic_OnSurvivorHuskCreated::survivorHusk' has a wrong offset!");

// Function TheK40.K40SecurityCorridorKillerCameraDolly.GetSurvivorHusk
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityCorridorKillerCameraDolly_GetSurvivorHusk final
{
public:
	class AK40SecurityCorridorHusk*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityCorridorKillerCameraDolly_GetSurvivorHusk) == 0x000008, "Wrong alignment on K40SecurityCorridorKillerCameraDolly_GetSurvivorHusk");
static_assert(sizeof(K40SecurityCorridorKillerCameraDolly_GetSurvivorHusk) == 0x000008, "Wrong size on K40SecurityCorridorKillerCameraDolly_GetSurvivorHusk");
static_assert(offsetof(K40SecurityCorridorKillerCameraDolly_GetSurvivorHusk, ReturnValue) == 0x000000, "Member 'K40SecurityCorridorKillerCameraDolly_GetSurvivorHusk::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityDoor.Cosmetic_OnBatteryPowerPercentageChanged
// 0x0004 (0x0004 - 0x0000)
struct K40SecurityDoor_Cosmetic_OnBatteryPowerPercentageChanged final
{
public:
	float                                         batteryPowerPercentage;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_Cosmetic_OnBatteryPowerPercentageChanged) == 0x000004, "Wrong alignment on K40SecurityDoor_Cosmetic_OnBatteryPowerPercentageChanged");
static_assert(sizeof(K40SecurityDoor_Cosmetic_OnBatteryPowerPercentageChanged) == 0x000004, "Wrong size on K40SecurityDoor_Cosmetic_OnBatteryPowerPercentageChanged");
static_assert(offsetof(K40SecurityDoor_Cosmetic_OnBatteryPowerPercentageChanged, batteryPowerPercentage) == 0x000000, "Member 'K40SecurityDoor_Cosmetic_OnBatteryPowerPercentageChanged::batteryPowerPercentage' has a wrong offset!");

// Function TheK40.K40SecurityDoor.Cosmetic_OnConnectedDoorChanged
// 0x0004 (0x0004 - 0x0000)
struct K40SecurityDoor_Cosmetic_OnConnectedDoorChanged final
{
public:
	int32                                         connectedDoorId;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_Cosmetic_OnConnectedDoorChanged) == 0x000004, "Wrong alignment on K40SecurityDoor_Cosmetic_OnConnectedDoorChanged");
static_assert(sizeof(K40SecurityDoor_Cosmetic_OnConnectedDoorChanged) == 0x000004, "Wrong size on K40SecurityDoor_Cosmetic_OnConnectedDoorChanged");
static_assert(offsetof(K40SecurityDoor_Cosmetic_OnConnectedDoorChanged, connectedDoorId) == 0x000000, "Member 'K40SecurityDoor_Cosmetic_OnConnectedDoorChanged::connectedDoorId' has a wrong offset!");

// Function TheK40.K40SecurityDoor.Cosmetic_OnIsInUseChanged
// 0x0001 (0x0001 - 0x0000)
struct K40SecurityDoor_Cosmetic_OnIsInUseChanged final
{
public:
	bool                                          IsInUse_0;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_Cosmetic_OnIsInUseChanged) == 0x000001, "Wrong alignment on K40SecurityDoor_Cosmetic_OnIsInUseChanged");
static_assert(sizeof(K40SecurityDoor_Cosmetic_OnIsInUseChanged) == 0x000001, "Wrong size on K40SecurityDoor_Cosmetic_OnIsInUseChanged");
static_assert(offsetof(K40SecurityDoor_Cosmetic_OnIsInUseChanged, IsInUse_0) == 0x000000, "Member 'K40SecurityDoor_Cosmetic_OnIsInUseChanged::IsInUse_0' has a wrong offset!");

// Function TheK40.K40SecurityDoor.Cosmetic_OnKillerEnteringStart
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_Cosmetic_OnKillerEnteringStart final
{
public:
	class AKiller*                                Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_Cosmetic_OnKillerEnteringStart) == 0x000008, "Wrong alignment on K40SecurityDoor_Cosmetic_OnKillerEnteringStart");
static_assert(sizeof(K40SecurityDoor_Cosmetic_OnKillerEnteringStart) == 0x000008, "Wrong size on K40SecurityDoor_Cosmetic_OnKillerEnteringStart");
static_assert(offsetof(K40SecurityDoor_Cosmetic_OnKillerEnteringStart, Killer) == 0x000000, "Member 'K40SecurityDoor_Cosmetic_OnKillerEnteringStart::Killer' has a wrong offset!");

// Function TheK40.K40SecurityDoor.Cosmetic_OnKillerEnteringStop
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_Cosmetic_OnKillerEnteringStop final
{
public:
	class AKiller*                                Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_Cosmetic_OnKillerEnteringStop) == 0x000008, "Wrong alignment on K40SecurityDoor_Cosmetic_OnKillerEnteringStop");
static_assert(sizeof(K40SecurityDoor_Cosmetic_OnKillerEnteringStop) == 0x000008, "Wrong size on K40SecurityDoor_Cosmetic_OnKillerEnteringStop");
static_assert(offsetof(K40SecurityDoor_Cosmetic_OnKillerEnteringStop, Killer) == 0x000000, "Member 'K40SecurityDoor_Cosmetic_OnKillerEnteringStop::Killer' has a wrong offset!");

// Function TheK40.K40SecurityDoor.Cosmetic_OnKillerExitingStart
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_Cosmetic_OnKillerExitingStart final
{
public:
	class AKiller*                                Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_Cosmetic_OnKillerExitingStart) == 0x000008, "Wrong alignment on K40SecurityDoor_Cosmetic_OnKillerExitingStart");
static_assert(sizeof(K40SecurityDoor_Cosmetic_OnKillerExitingStart) == 0x000008, "Wrong size on K40SecurityDoor_Cosmetic_OnKillerExitingStart");
static_assert(offsetof(K40SecurityDoor_Cosmetic_OnKillerExitingStart, Killer) == 0x000000, "Member 'K40SecurityDoor_Cosmetic_OnKillerExitingStart::Killer' has a wrong offset!");

// Function TheK40.K40SecurityDoor.Cosmetic_OnKillerExitingStop
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_Cosmetic_OnKillerExitingStop final
{
public:
	class AKiller*                                Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_Cosmetic_OnKillerExitingStop) == 0x000008, "Wrong alignment on K40SecurityDoor_Cosmetic_OnKillerExitingStop");
static_assert(sizeof(K40SecurityDoor_Cosmetic_OnKillerExitingStop) == 0x000008, "Wrong size on K40SecurityDoor_Cosmetic_OnKillerExitingStop");
static_assert(offsetof(K40SecurityDoor_Cosmetic_OnKillerExitingStop, Killer) == 0x000000, "Member 'K40SecurityDoor_Cosmetic_OnKillerExitingStop::Killer' has a wrong offset!");

// Function TheK40.K40SecurityDoor.Cosmetic_OnSurvivorEnteringStart
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_Cosmetic_OnSurvivorEnteringStart final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_Cosmetic_OnSurvivorEnteringStart) == 0x000008, "Wrong alignment on K40SecurityDoor_Cosmetic_OnSurvivorEnteringStart");
static_assert(sizeof(K40SecurityDoor_Cosmetic_OnSurvivorEnteringStart) == 0x000008, "Wrong size on K40SecurityDoor_Cosmetic_OnSurvivorEnteringStart");
static_assert(offsetof(K40SecurityDoor_Cosmetic_OnSurvivorEnteringStart, Survivor) == 0x000000, "Member 'K40SecurityDoor_Cosmetic_OnSurvivorEnteringStart::Survivor' has a wrong offset!");

// Function TheK40.K40SecurityDoor.Cosmetic_OnSurvivorEnteringStop
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_Cosmetic_OnSurvivorEnteringStop final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_Cosmetic_OnSurvivorEnteringStop) == 0x000008, "Wrong alignment on K40SecurityDoor_Cosmetic_OnSurvivorEnteringStop");
static_assert(sizeof(K40SecurityDoor_Cosmetic_OnSurvivorEnteringStop) == 0x000008, "Wrong size on K40SecurityDoor_Cosmetic_OnSurvivorEnteringStop");
static_assert(offsetof(K40SecurityDoor_Cosmetic_OnSurvivorEnteringStop, Survivor) == 0x000000, "Member 'K40SecurityDoor_Cosmetic_OnSurvivorEnteringStop::Survivor' has a wrong offset!");

// Function TheK40.K40SecurityDoor.Cosmetic_OnSurvivorExitingStart
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_Cosmetic_OnSurvivorExitingStart final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_Cosmetic_OnSurvivorExitingStart) == 0x000008, "Wrong alignment on K40SecurityDoor_Cosmetic_OnSurvivorExitingStart");
static_assert(sizeof(K40SecurityDoor_Cosmetic_OnSurvivorExitingStart) == 0x000008, "Wrong size on K40SecurityDoor_Cosmetic_OnSurvivorExitingStart");
static_assert(offsetof(K40SecurityDoor_Cosmetic_OnSurvivorExitingStart, Survivor) == 0x000000, "Member 'K40SecurityDoor_Cosmetic_OnSurvivorExitingStart::Survivor' has a wrong offset!");

// Function TheK40.K40SecurityDoor.Cosmetic_OnSurvivorExitingStop
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_Cosmetic_OnSurvivorExitingStop final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_Cosmetic_OnSurvivorExitingStop) == 0x000008, "Wrong alignment on K40SecurityDoor_Cosmetic_OnSurvivorExitingStop");
static_assert(sizeof(K40SecurityDoor_Cosmetic_OnSurvivorExitingStop) == 0x000008, "Wrong size on K40SecurityDoor_Cosmetic_OnSurvivorExitingStop");
static_assert(offsetof(K40SecurityDoor_Cosmetic_OnSurvivorExitingStop, Survivor) == 0x000000, "Member 'K40SecurityDoor_Cosmetic_OnSurvivorExitingStop::Survivor' has a wrong offset!");

// Function TheK40.K40SecurityDoor.Cosmetic_OnSurvivorUsingCameraPanelStart
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_Cosmetic_OnSurvivorUsingCameraPanelStart final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_Cosmetic_OnSurvivorUsingCameraPanelStart) == 0x000008, "Wrong alignment on K40SecurityDoor_Cosmetic_OnSurvivorUsingCameraPanelStart");
static_assert(sizeof(K40SecurityDoor_Cosmetic_OnSurvivorUsingCameraPanelStart) == 0x000008, "Wrong size on K40SecurityDoor_Cosmetic_OnSurvivorUsingCameraPanelStart");
static_assert(offsetof(K40SecurityDoor_Cosmetic_OnSurvivorUsingCameraPanelStart, Survivor) == 0x000000, "Member 'K40SecurityDoor_Cosmetic_OnSurvivorUsingCameraPanelStart::Survivor' has a wrong offset!");

// Function TheK40.K40SecurityDoor.Cosmetic_OnSurvivorUsingCameraPanelStop
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_Cosmetic_OnSurvivorUsingCameraPanelStop final
{
public:
	class ASurvivor*                              Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_Cosmetic_OnSurvivorUsingCameraPanelStop) == 0x000008, "Wrong alignment on K40SecurityDoor_Cosmetic_OnSurvivorUsingCameraPanelStop");
static_assert(sizeof(K40SecurityDoor_Cosmetic_OnSurvivorUsingCameraPanelStop) == 0x000008, "Wrong size on K40SecurityDoor_Cosmetic_OnSurvivorUsingCameraPanelStop");
static_assert(offsetof(K40SecurityDoor_Cosmetic_OnSurvivorUsingCameraPanelStop, Survivor) == 0x000000, "Member 'K40SecurityDoor_Cosmetic_OnSurvivorUsingCameraPanelStop::Survivor' has a wrong offset!");

// Function TheK40.K40SecurityDoor.Cosmetic_SetNumberVisibility
// 0x0001 (0x0001 - 0x0000)
struct K40SecurityDoor_Cosmetic_SetNumberVisibility final
{
public:
	bool                                          isKillerTargeting;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_Cosmetic_SetNumberVisibility) == 0x000001, "Wrong alignment on K40SecurityDoor_Cosmetic_SetNumberVisibility");
static_assert(sizeof(K40SecurityDoor_Cosmetic_SetNumberVisibility) == 0x000001, "Wrong size on K40SecurityDoor_Cosmetic_SetNumberVisibility");
static_assert(offsetof(K40SecurityDoor_Cosmetic_SetNumberVisibility, isKillerTargeting) == 0x000000, "Member 'K40SecurityDoor_Cosmetic_SetNumberVisibility::isKillerTargeting' has a wrong offset!");

// Function TheK40.K40SecurityDoor.GetBatteryPower
// 0x0004 (0x0004 - 0x0000)
struct K40SecurityDoor_GetBatteryPower final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_GetBatteryPower) == 0x000004, "Wrong alignment on K40SecurityDoor_GetBatteryPower");
static_assert(sizeof(K40SecurityDoor_GetBatteryPower) == 0x000004, "Wrong size on K40SecurityDoor_GetBatteryPower");
static_assert(offsetof(K40SecurityDoor_GetBatteryPower, ReturnValue) == 0x000000, "Member 'K40SecurityDoor_GetBatteryPower::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityDoor.GetSecurityCamera
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_GetSecurityCamera final
{
public:
	class AK40SecurityCamera*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_GetSecurityCamera) == 0x000008, "Wrong alignment on K40SecurityDoor_GetSecurityCamera");
static_assert(sizeof(K40SecurityDoor_GetSecurityCamera) == 0x000008, "Wrong size on K40SecurityDoor_GetSecurityCamera");
static_assert(offsetof(K40SecurityDoor_GetSecurityCamera, ReturnValue) == 0x000000, "Member 'K40SecurityDoor_GetSecurityCamera::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityDoor.OnRep_ConnectedDoor
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_OnRep_ConnectedDoor final
{
public:
	TWeakObjectPtr<class AK40SecurityDoor>        oldConnectedDoor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_OnRep_ConnectedDoor) == 0x000004, "Wrong alignment on K40SecurityDoor_OnRep_ConnectedDoor");
static_assert(sizeof(K40SecurityDoor_OnRep_ConnectedDoor) == 0x000008, "Wrong size on K40SecurityDoor_OnRep_ConnectedDoor");
static_assert(offsetof(K40SecurityDoor_OnRep_ConnectedDoor, oldConnectedDoor) == 0x000000, "Member 'K40SecurityDoor_OnRep_ConnectedDoor::oldConnectedDoor' has a wrong offset!");

// Function TheK40.K40SecurityDoor.GetConnectedDoor
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_GetConnectedDoor final
{
public:
	class AK40SecurityDoor*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_GetConnectedDoor) == 0x000008, "Wrong alignment on K40SecurityDoor_GetConnectedDoor");
static_assert(sizeof(K40SecurityDoor_GetConnectedDoor) == 0x000008, "Wrong size on K40SecurityDoor_GetConnectedDoor");
static_assert(offsetof(K40SecurityDoor_GetConnectedDoor, ReturnValue) == 0x000000, "Member 'K40SecurityDoor_GetConnectedDoor::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityDoor.GetCurrentlyInteractingKiller
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_GetCurrentlyInteractingKiller final
{
public:
	class AKiller*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_GetCurrentlyInteractingKiller) == 0x000008, "Wrong alignment on K40SecurityDoor_GetCurrentlyInteractingKiller");
static_assert(sizeof(K40SecurityDoor_GetCurrentlyInteractingKiller) == 0x000008, "Wrong size on K40SecurityDoor_GetCurrentlyInteractingKiller");
static_assert(offsetof(K40SecurityDoor_GetCurrentlyInteractingKiller, ReturnValue) == 0x000000, "Member 'K40SecurityDoor_GetCurrentlyInteractingKiller::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityDoor.GetCurrentlyInteractingSurvivor
// 0x0008 (0x0008 - 0x0000)
struct K40SecurityDoor_GetCurrentlyInteractingSurvivor final
{
public:
	class ASurvivor*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_GetCurrentlyInteractingSurvivor) == 0x000008, "Wrong alignment on K40SecurityDoor_GetCurrentlyInteractingSurvivor");
static_assert(sizeof(K40SecurityDoor_GetCurrentlyInteractingSurvivor) == 0x000008, "Wrong size on K40SecurityDoor_GetCurrentlyInteractingSurvivor");
static_assert(offsetof(K40SecurityDoor_GetCurrentlyInteractingSurvivor, ReturnValue) == 0x000000, "Member 'K40SecurityDoor_GetCurrentlyInteractingSurvivor::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityDoor.GetDoorNumberID
// 0x0004 (0x0004 - 0x0000)
struct K40SecurityDoor_GetDoorNumberID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_GetDoorNumberID) == 0x000004, "Wrong alignment on K40SecurityDoor_GetDoorNumberID");
static_assert(sizeof(K40SecurityDoor_GetDoorNumberID) == 0x000004, "Wrong size on K40SecurityDoor_GetDoorNumberID");
static_assert(offsetof(K40SecurityDoor_GetDoorNumberID, ReturnValue) == 0x000000, "Member 'K40SecurityDoor_GetDoorNumberID::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityDoor.IsInUse
// 0x0001 (0x0001 - 0x0000)
struct K40SecurityDoor_IsInUse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_IsInUse) == 0x000001, "Wrong alignment on K40SecurityDoor_IsInUse");
static_assert(sizeof(K40SecurityDoor_IsInUse) == 0x000001, "Wrong size on K40SecurityDoor_IsInUse");
static_assert(offsetof(K40SecurityDoor_IsInUse, ReturnValue) == 0x000000, "Member 'K40SecurityDoor_IsInUse::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecurityDoor.IsPoweredDown
// 0x0001 (0x0001 - 0x0000)
struct K40SecurityDoor_IsPoweredDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecurityDoor_IsPoweredDown) == 0x000001, "Wrong alignment on K40SecurityDoor_IsPoweredDown");
static_assert(sizeof(K40SecurityDoor_IsPoweredDown) == 0x000001, "Wrong size on K40SecurityDoor_IsPoweredDown");
static_assert(offsetof(K40SecurityDoor_IsPoweredDown, ReturnValue) == 0x000000, "Member 'K40SecurityDoor_IsPoweredDown::ReturnValue' has a wrong offset!");

// Function TheK40.K40SecuritySystemAbility.Authority_OnBatteryPowerChargeChanged
// 0x0010 (0x0010 - 0x0000)
struct K40SecuritySystemAbility_Authority_OnBatteryPowerChargeChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecuritySystemAbility_Authority_OnBatteryPowerChargeChanged) == 0x000008, "Wrong alignment on K40SecuritySystemAbility_Authority_OnBatteryPowerChargeChanged");
static_assert(sizeof(K40SecuritySystemAbility_Authority_OnBatteryPowerChargeChanged) == 0x000010, "Wrong size on K40SecuritySystemAbility_Authority_OnBatteryPowerChargeChanged");
static_assert(offsetof(K40SecuritySystemAbility_Authority_OnBatteryPowerChargeChanged, ChargeableComponent) == 0x000000, "Member 'K40SecuritySystemAbility_Authority_OnBatteryPowerChargeChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(K40SecuritySystemAbility_Authority_OnBatteryPowerChargeChanged, PercentCompletionChange) == 0x000008, "Member 'K40SecuritySystemAbility_Authority_OnBatteryPowerChargeChanged::PercentCompletionChange' has a wrong offset!");
static_assert(offsetof(K40SecuritySystemAbility_Authority_OnBatteryPowerChargeChanged, TotalPercentComplete) == 0x00000C, "Member 'K40SecuritySystemAbility_Authority_OnBatteryPowerChargeChanged::TotalPercentComplete' has a wrong offset!");

// Function TheK40.K40SecuritySystemAbility.Authority_OnBatteryPowerCompletionStateChanged
// 0x0018 (0x0018 - 0x0000)
struct K40SecuritySystemAbility_Authority_OnBatteryPowerCompletionStateChanged final
{
public:
	bool                                          COMPLETED;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         instigatorsForCompletion;                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecuritySystemAbility_Authority_OnBatteryPowerCompletionStateChanged) == 0x000008, "Wrong alignment on K40SecuritySystemAbility_Authority_OnBatteryPowerCompletionStateChanged");
static_assert(sizeof(K40SecuritySystemAbility_Authority_OnBatteryPowerCompletionStateChanged) == 0x000018, "Wrong size on K40SecuritySystemAbility_Authority_OnBatteryPowerCompletionStateChanged");
static_assert(offsetof(K40SecuritySystemAbility_Authority_OnBatteryPowerCompletionStateChanged, COMPLETED) == 0x000000, "Member 'K40SecuritySystemAbility_Authority_OnBatteryPowerCompletionStateChanged::COMPLETED' has a wrong offset!");
static_assert(offsetof(K40SecuritySystemAbility_Authority_OnBatteryPowerCompletionStateChanged, instigatorsForCompletion) == 0x000008, "Member 'K40SecuritySystemAbility_Authority_OnBatteryPowerCompletionStateChanged::instigatorsForCompletion' has a wrong offset!");

// Function TheK40.K40SecuritySystemAbility.Cosmetic_OnBatteryPowerChargeChanged
// 0x0010 (0x0010 - 0x0000)
struct K40SecuritySystemAbility_Cosmetic_OnBatteryPowerChargeChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K40SecuritySystemAbility_Cosmetic_OnBatteryPowerChargeChanged) == 0x000008, "Wrong alignment on K40SecuritySystemAbility_Cosmetic_OnBatteryPowerChargeChanged");
static_assert(sizeof(K40SecuritySystemAbility_Cosmetic_OnBatteryPowerChargeChanged) == 0x000010, "Wrong size on K40SecuritySystemAbility_Cosmetic_OnBatteryPowerChargeChanged");
static_assert(offsetof(K40SecuritySystemAbility_Cosmetic_OnBatteryPowerChargeChanged, ChargeableComponent) == 0x000000, "Member 'K40SecuritySystemAbility_Cosmetic_OnBatteryPowerChargeChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(K40SecuritySystemAbility_Cosmetic_OnBatteryPowerChargeChanged, TotalPercentComplete) == 0x000008, "Member 'K40SecuritySystemAbility_Cosmetic_OnBatteryPowerChargeChanged::TotalPercentComplete' has a wrong offset!");

// Function TheK40.K40SecuritySystemAbilitySurvivorCosmeticHelperActor.ChangePlayerVisibility
// 0x0001 (0x0001 - 0x0000)
struct K40SecuritySystemAbilitySurvivorCosmeticHelperActor_ChangePlayerVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_ChangePlayerVisibility) == 0x000001, "Wrong alignment on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_ChangePlayerVisibility");
static_assert(sizeof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_ChangePlayerVisibility) == 0x000001, "Wrong size on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_ChangePlayerVisibility");
static_assert(offsetof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_ChangePlayerVisibility, IsVisible) == 0x000000, "Member 'K40SecuritySystemAbilitySurvivorCosmeticHelperActor_ChangePlayerVisibility::IsVisible' has a wrong offset!");

// Function TheK40.K40SecuritySystemAbilitySurvivorCosmeticHelperActor.Cosmetic_EnteringSecurityDoorStart
// 0x0008 (0x0008 - 0x0000)
struct K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnteringSecurityDoorStart final
{
public:
	class AK40SecurityDoor*                       door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnteringSecurityDoorStart) == 0x000008, "Wrong alignment on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnteringSecurityDoorStart");
static_assert(sizeof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnteringSecurityDoorStart) == 0x000008, "Wrong size on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnteringSecurityDoorStart");
static_assert(offsetof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnteringSecurityDoorStart, door) == 0x000000, "Member 'K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnteringSecurityDoorStart::door' has a wrong offset!");

// Function TheK40.K40SecuritySystemAbilitySurvivorCosmeticHelperActor.Cosmetic_EnteringSecurityDoorStop
// 0x0008 (0x0008 - 0x0000)
struct K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnteringSecurityDoorStop final
{
public:
	class AK40SecurityDoor*                       door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnteringSecurityDoorStop) == 0x000008, "Wrong alignment on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnteringSecurityDoorStop");
static_assert(sizeof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnteringSecurityDoorStop) == 0x000008, "Wrong size on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnteringSecurityDoorStop");
static_assert(offsetof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnteringSecurityDoorStop, door) == 0x000000, "Member 'K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnteringSecurityDoorStop::door' has a wrong offset!");

// Function TheK40.K40SecuritySystemAbilitySurvivorCosmeticHelperActor.Cosmetic_EnterSecurityDoorFailure
// 0x0008 (0x0008 - 0x0000)
struct K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnterSecurityDoorFailure final
{
public:
	class AK40SecurityDoor*                       door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnterSecurityDoorFailure) == 0x000008, "Wrong alignment on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnterSecurityDoorFailure");
static_assert(sizeof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnterSecurityDoorFailure) == 0x000008, "Wrong size on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnterSecurityDoorFailure");
static_assert(offsetof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnterSecurityDoorFailure, door) == 0x000000, "Member 'K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_EnterSecurityDoorFailure::door' has a wrong offset!");

// Function TheK40.K40SecuritySystemAbilitySurvivorCosmeticHelperActor.Cosmetic_ExitingSecurityDoorStart
// 0x0008 (0x0008 - 0x0000)
struct K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_ExitingSecurityDoorStart final
{
public:
	class AK40SecurityDoor*                       door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_ExitingSecurityDoorStart) == 0x000008, "Wrong alignment on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_ExitingSecurityDoorStart");
static_assert(sizeof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_ExitingSecurityDoorStart) == 0x000008, "Wrong size on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_ExitingSecurityDoorStart");
static_assert(offsetof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_ExitingSecurityDoorStart, door) == 0x000000, "Member 'K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_ExitingSecurityDoorStart::door' has a wrong offset!");

// Function TheK40.K40SecuritySystemAbilitySurvivorCosmeticHelperActor.Cosmetic_ExitingSecurityDoorStop
// 0x0008 (0x0008 - 0x0000)
struct K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_ExitingSecurityDoorStop final
{
public:
	class AK40SecurityDoor*                       door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_ExitingSecurityDoorStop) == 0x000008, "Wrong alignment on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_ExitingSecurityDoorStop");
static_assert(sizeof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_ExitingSecurityDoorStop) == 0x000008, "Wrong size on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_ExitingSecurityDoorStop");
static_assert(offsetof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_ExitingSecurityDoorStop, door) == 0x000000, "Member 'K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_ExitingSecurityDoorStop::door' has a wrong offset!");

// Function TheK40.K40SecuritySystemAbilitySurvivorCosmeticHelperActor.Cosmetic_GrabSurvivorDuringEnterSecurityDoor
// 0x0008 (0x0008 - 0x0000)
struct K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_GrabSurvivorDuringEnterSecurityDoor final
{
public:
	class AK40SecurityDoor*                       door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_GrabSurvivorDuringEnterSecurityDoor) == 0x000008, "Wrong alignment on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_GrabSurvivorDuringEnterSecurityDoor");
static_assert(sizeof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_GrabSurvivorDuringEnterSecurityDoor) == 0x000008, "Wrong size on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_GrabSurvivorDuringEnterSecurityDoor");
static_assert(offsetof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_GrabSurvivorDuringEnterSecurityDoor, door) == 0x000000, "Member 'K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_GrabSurvivorDuringEnterSecurityDoor::door' has a wrong offset!");

// Function TheK40.K40SecuritySystemAbilitySurvivorCosmeticHelperActor.Cosmetic_OnBatteryPercentChanged
// 0x0004 (0x0004 - 0x0000)
struct K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_OnBatteryPercentChanged final
{
public:
	float                                         batteryPercent;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_OnBatteryPercentChanged) == 0x000004, "Wrong alignment on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_OnBatteryPercentChanged");
static_assert(sizeof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_OnBatteryPercentChanged) == 0x000004, "Wrong size on K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_OnBatteryPercentChanged");
static_assert(offsetof(K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_OnBatteryPercentChanged, batteryPercent) == 0x000000, "Member 'K40SecuritySystemAbilitySurvivorCosmeticHelperActor_Cosmetic_OnBatteryPercentChanged::batteryPercent' has a wrong offset!");

}

