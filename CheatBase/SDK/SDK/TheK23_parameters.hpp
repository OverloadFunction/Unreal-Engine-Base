#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK23

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Projectile_structs.hpp"


namespace SDK::Params
{

// Function TheK23.K23SurvivorCosmeticHelperActor.Cosmetic_K23CamperHitByKnife
// 0x0004 (0x0004 - 0x0000)
struct K23SurvivorCosmeticHelperActor_Cosmetic_K23CamperHitByKnife final
{
public:
	float                                         lacerationPercentage;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K23SurvivorCosmeticHelperActor_Cosmetic_K23CamperHitByKnife) == 0x000004, "Wrong alignment on K23SurvivorCosmeticHelperActor_Cosmetic_K23CamperHitByKnife");
static_assert(sizeof(K23SurvivorCosmeticHelperActor_Cosmetic_K23CamperHitByKnife) == 0x000004, "Wrong size on K23SurvivorCosmeticHelperActor_Cosmetic_K23CamperHitByKnife");
static_assert(offsetof(K23SurvivorCosmeticHelperActor_Cosmetic_K23CamperHitByKnife, lacerationPercentage) == 0x000000, "Member 'K23SurvivorCosmeticHelperActor_Cosmetic_K23CamperHitByKnife::lacerationPercentage' has a wrong offset!");

// Function TheK23.KnifeProjectile.BP_CosmeticOnAddonExplosion
// 0x0030 (0x0030 - 0x0000)
struct KnifeProjectile_BP_CosmeticOnAddonExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnifeProjectile_BP_CosmeticOnAddonExplosion) == 0x000008, "Wrong alignment on KnifeProjectile_BP_CosmeticOnAddonExplosion");
static_assert(sizeof(KnifeProjectile_BP_CosmeticOnAddonExplosion) == 0x000030, "Wrong size on KnifeProjectile_BP_CosmeticOnAddonExplosion");
static_assert(offsetof(KnifeProjectile_BP_CosmeticOnAddonExplosion, Location) == 0x000000, "Member 'KnifeProjectile_BP_CosmeticOnAddonExplosion::Location' has a wrong offset!");
static_assert(offsetof(KnifeProjectile_BP_CosmeticOnAddonExplosion, Normal) == 0x000018, "Member 'KnifeProjectile_BP_CosmeticOnAddonExplosion::Normal' has a wrong offset!");

// Function TheK23.KnifeProjectile.BP_OnLaunchCosmetic
// 0x0040 (0x0040 - 0x0000)
struct KnifeProjectile_BP_OnLaunchCosmetic final
{
public:
	struct FLaunchInfo                            LaunchInfo;                                        // 0x0000(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          hasImpactOnLaunch;                                 // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KnifeProjectile_BP_OnLaunchCosmetic) == 0x000008, "Wrong alignment on KnifeProjectile_BP_OnLaunchCosmetic");
static_assert(sizeof(KnifeProjectile_BP_OnLaunchCosmetic) == 0x000040, "Wrong size on KnifeProjectile_BP_OnLaunchCosmetic");
static_assert(offsetof(KnifeProjectile_BP_OnLaunchCosmetic, LaunchInfo) == 0x000000, "Member 'KnifeProjectile_BP_OnLaunchCosmetic::LaunchInfo' has a wrong offset!");
static_assert(offsetof(KnifeProjectile_BP_OnLaunchCosmetic, hasImpactOnLaunch) == 0x000038, "Member 'KnifeProjectile_BP_OnLaunchCosmetic::hasImpactOnLaunch' has a wrong offset!");

// Function TheK23.KnifeProjectile.BP_SetKnifeActive
// 0x0001 (0x0001 - 0x0000)
struct KnifeProjectile_BP_SetKnifeActive final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnifeProjectile_BP_SetKnifeActive) == 0x000001, "Wrong alignment on KnifeProjectile_BP_SetKnifeActive");
static_assert(sizeof(KnifeProjectile_BP_SetKnifeActive) == 0x000001, "Wrong size on KnifeProjectile_BP_SetKnifeActive");
static_assert(offsetof(KnifeProjectile_BP_SetKnifeActive, Active) == 0x000000, "Member 'KnifeProjectile_BP_SetKnifeActive::Active' has a wrong offset!");

// Function TheK23.KnifeProjectile.OnProjectileBounce
// 0x0108 (0x0108 - 0x0000)
struct KnifeProjectile_OnProjectileBounce final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x00F0(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnifeProjectile_OnProjectileBounce) == 0x000008, "Wrong alignment on KnifeProjectile_OnProjectileBounce");
static_assert(sizeof(KnifeProjectile_OnProjectileBounce) == 0x000108, "Wrong size on KnifeProjectile_OnProjectileBounce");
static_assert(offsetof(KnifeProjectile_OnProjectileBounce, ImpactResult) == 0x000000, "Member 'KnifeProjectile_OnProjectileBounce::ImpactResult' has a wrong offset!");
static_assert(offsetof(KnifeProjectile_OnProjectileBounce, ImpactVelocity) == 0x0000F0, "Member 'KnifeProjectile_OnProjectileBounce::ImpactVelocity' has a wrong offset!");

// Function TheK23.KnifeProjectile.OnWorldColliderHit
// 0x0120 (0x0120 - 0x0000)
struct KnifeProjectile_OnWorldColliderHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnifeProjectile_OnWorldColliderHit) == 0x000008, "Wrong alignment on KnifeProjectile_OnWorldColliderHit");
static_assert(sizeof(KnifeProjectile_OnWorldColliderHit) == 0x000120, "Wrong size on KnifeProjectile_OnWorldColliderHit");
static_assert(offsetof(KnifeProjectile_OnWorldColliderHit, HitComponent) == 0x000000, "Member 'KnifeProjectile_OnWorldColliderHit::HitComponent' has a wrong offset!");
static_assert(offsetof(KnifeProjectile_OnWorldColliderHit, OtherActor) == 0x000008, "Member 'KnifeProjectile_OnWorldColliderHit::OtherActor' has a wrong offset!");
static_assert(offsetof(KnifeProjectile_OnWorldColliderHit, OtherComp) == 0x000010, "Member 'KnifeProjectile_OnWorldColliderHit::OtherComp' has a wrong offset!");
static_assert(offsetof(KnifeProjectile_OnWorldColliderHit, NormalImpulse) == 0x000018, "Member 'KnifeProjectile_OnWorldColliderHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(KnifeProjectile_OnWorldColliderHit, Hit) == 0x000030, "Member 'KnifeProjectile_OnWorldColliderHit::Hit' has a wrong offset!");

// Function TheK23.KnifeProjectile.SetKnifeAcquired
// 0x0001 (0x0001 - 0x0000)
struct KnifeProjectile_SetKnifeAcquired final
{
public:
	bool                                          acquired;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnifeProjectile_SetKnifeAcquired) == 0x000001, "Wrong alignment on KnifeProjectile_SetKnifeAcquired");
static_assert(sizeof(KnifeProjectile_SetKnifeAcquired) == 0x000001, "Wrong size on KnifeProjectile_SetKnifeAcquired");
static_assert(offsetof(KnifeProjectile_SetKnifeAcquired, acquired) == 0x000000, "Member 'KnifeProjectile_SetKnifeAcquired::acquired' has a wrong offset!");

// Function TheK23.KnifeProjectile.GetAddonExplosionRadius
// 0x0004 (0x0004 - 0x0000)
struct KnifeProjectile_GetAddonExplosionRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnifeProjectile_GetAddonExplosionRadius) == 0x000004, "Wrong alignment on KnifeProjectile_GetAddonExplosionRadius");
static_assert(sizeof(KnifeProjectile_GetAddonExplosionRadius) == 0x000004, "Wrong size on KnifeProjectile_GetAddonExplosionRadius");
static_assert(offsetof(KnifeProjectile_GetAddonExplosionRadius, ReturnValue) == 0x000000, "Member 'KnifeProjectile_GetAddonExplosionRadius::ReturnValue' has a wrong offset!");

// Function TheK23.KnifeProjectile.KnifeCanPierceCampers
// 0x0001 (0x0001 - 0x0000)
struct KnifeProjectile_KnifeCanPierceCampers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnifeProjectile_KnifeCanPierceCampers) == 0x000001, "Wrong alignment on KnifeProjectile_KnifeCanPierceCampers");
static_assert(sizeof(KnifeProjectile_KnifeCanPierceCampers) == 0x000001, "Wrong size on KnifeProjectile_KnifeCanPierceCampers");
static_assert(offsetof(KnifeProjectile_KnifeCanPierceCampers, ReturnValue) == 0x000000, "Member 'KnifeProjectile_KnifeCanPierceCampers::ReturnValue' has a wrong offset!");

// Function TheK23.KnifeProjectile.ShouldPlayRicochetSound
// 0x0001 (0x0001 - 0x0000)
struct KnifeProjectile_ShouldPlayRicochetSound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnifeProjectile_ShouldPlayRicochetSound) == 0x000001, "Wrong alignment on KnifeProjectile_ShouldPlayRicochetSound");
static_assert(sizeof(KnifeProjectile_ShouldPlayRicochetSound) == 0x000001, "Wrong size on KnifeProjectile_ShouldPlayRicochetSound");
static_assert(offsetof(KnifeProjectile_ShouldPlayRicochetSound, ReturnValue) == 0x000000, "Member 'KnifeProjectile_ShouldPlayRicochetSound::ReturnValue' has a wrong offset!");

// Function TheK23.KnifeProjectile.WasLaunchedDuringSuperMode
// 0x0001 (0x0001 - 0x0000)
struct KnifeProjectile_WasLaunchedDuringSuperMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnifeProjectile_WasLaunchedDuringSuperMode) == 0x000001, "Wrong alignment on KnifeProjectile_WasLaunchedDuringSuperMode");
static_assert(sizeof(KnifeProjectile_WasLaunchedDuringSuperMode) == 0x000001, "Wrong size on KnifeProjectile_WasLaunchedDuringSuperMode");
static_assert(offsetof(KnifeProjectile_WasLaunchedDuringSuperMode, ReturnValue) == 0x000000, "Member 'KnifeProjectile_WasLaunchedDuringSuperMode::ReturnValue' has a wrong offset!");

// Function TheK23.KnifeRack.OnReloadEnded
// 0x0008 (0x0008 - 0x0000)
struct KnifeRack_OnReloadEnded final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnifeRack_OnReloadEnded) == 0x000008, "Wrong alignment on KnifeRack_OnReloadEnded");
static_assert(sizeof(KnifeRack_OnReloadEnded) == 0x000008, "Wrong size on KnifeRack_OnReloadEnded");
static_assert(offsetof(KnifeRack_OnReloadEnded, Player) == 0x000000, "Member 'KnifeRack_OnReloadEnded::Player' has a wrong offset!");

// Function TheK23.KnifeRack.OnReloadMontageStarted
// 0x0010 (0x0010 - 0x0000)
struct KnifeRack_OnReloadMontageStarted final
{
public:
	float                                         actionSpeedMultiplier;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnifeRack_OnReloadMontageStarted) == 0x000008, "Wrong alignment on KnifeRack_OnReloadMontageStarted");
static_assert(sizeof(KnifeRack_OnReloadMontageStarted) == 0x000010, "Wrong size on KnifeRack_OnReloadMontageStarted");
static_assert(offsetof(KnifeRack_OnReloadMontageStarted, actionSpeedMultiplier) == 0x000000, "Member 'KnifeRack_OnReloadMontageStarted::actionSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(KnifeRack_OnReloadMontageStarted, Player) == 0x000008, "Member 'KnifeRack_OnReloadMontageStarted::Player' has a wrong offset!");

// Function TheK23.KnivesLauncher.GetLocallyPredictedAmmo
// 0x0004 (0x0004 - 0x0000)
struct KnivesLauncher_GetLocallyPredictedAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnivesLauncher_GetLocallyPredictedAmmo) == 0x000004, "Wrong alignment on KnivesLauncher_GetLocallyPredictedAmmo");
static_assert(sizeof(KnivesLauncher_GetLocallyPredictedAmmo) == 0x000004, "Wrong size on KnivesLauncher_GetLocallyPredictedAmmo");
static_assert(offsetof(KnivesLauncher_GetLocallyPredictedAmmo, ReturnValue) == 0x000000, "Member 'KnivesLauncher_GetLocallyPredictedAmmo::ReturnValue' has a wrong offset!");

// Function TheK23.KnivesLauncher.GetPower
// 0x0008 (0x0008 - 0x0000)
struct KnivesLauncher_GetPower final
{
public:
	class AThrowingKnives*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnivesLauncher_GetPower) == 0x000008, "Wrong alignment on KnivesLauncher_GetPower");
static_assert(sizeof(KnivesLauncher_GetPower) == 0x000008, "Wrong size on KnivesLauncher_GetPower");
static_assert(offsetof(KnivesLauncher_GetPower, ReturnValue) == 0x000000, "Member 'KnivesLauncher_GetPower::ReturnValue' has a wrong offset!");

// Function TheK23.LacerationComponent.Cosmetic_OnKnifeHit
// 0x0030 (0x0030 - 0x0000)
struct LacerationComponent_Cosmetic_OnKnifeHit final
{
public:
	float                                         lacerationPercent;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AKiller*                                owningKiller;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isDangerous;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          causedDamage;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CausedKO;                                          // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ImpactNormal;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LacerationComponent_Cosmetic_OnKnifeHit) == 0x000008, "Wrong alignment on LacerationComponent_Cosmetic_OnKnifeHit");
static_assert(sizeof(LacerationComponent_Cosmetic_OnKnifeHit) == 0x000030, "Wrong size on LacerationComponent_Cosmetic_OnKnifeHit");
static_assert(offsetof(LacerationComponent_Cosmetic_OnKnifeHit, lacerationPercent) == 0x000000, "Member 'LacerationComponent_Cosmetic_OnKnifeHit::lacerationPercent' has a wrong offset!");
static_assert(offsetof(LacerationComponent_Cosmetic_OnKnifeHit, owningKiller) == 0x000008, "Member 'LacerationComponent_Cosmetic_OnKnifeHit::owningKiller' has a wrong offset!");
static_assert(offsetof(LacerationComponent_Cosmetic_OnKnifeHit, isDangerous) == 0x000010, "Member 'LacerationComponent_Cosmetic_OnKnifeHit::isDangerous' has a wrong offset!");
static_assert(offsetof(LacerationComponent_Cosmetic_OnKnifeHit, causedDamage) == 0x000011, "Member 'LacerationComponent_Cosmetic_OnKnifeHit::causedDamage' has a wrong offset!");
static_assert(offsetof(LacerationComponent_Cosmetic_OnKnifeHit, CausedKO) == 0x000012, "Member 'LacerationComponent_Cosmetic_OnKnifeHit::CausedKO' has a wrong offset!");
static_assert(offsetof(LacerationComponent_Cosmetic_OnKnifeHit, ImpactNormal) == 0x000018, "Member 'LacerationComponent_Cosmetic_OnKnifeHit::ImpactNormal' has a wrong offset!");

// Function TheK23.LacerationComponent.Multicast_KnifeHit
// 0x0048 (0x0048 - 0x0000)
struct LacerationComponent_Multicast_KnifeHit final
{
public:
	float                                         newLaceration;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AKiller*                                owningKiller;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          causedDamage;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CausedKO;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                impactLocation;                                    // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactNormal;                                      // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LacerationComponent_Multicast_KnifeHit) == 0x000008, "Wrong alignment on LacerationComponent_Multicast_KnifeHit");
static_assert(sizeof(LacerationComponent_Multicast_KnifeHit) == 0x000048, "Wrong size on LacerationComponent_Multicast_KnifeHit");
static_assert(offsetof(LacerationComponent_Multicast_KnifeHit, newLaceration) == 0x000000, "Member 'LacerationComponent_Multicast_KnifeHit::newLaceration' has a wrong offset!");
static_assert(offsetof(LacerationComponent_Multicast_KnifeHit, owningKiller) == 0x000008, "Member 'LacerationComponent_Multicast_KnifeHit::owningKiller' has a wrong offset!");
static_assert(offsetof(LacerationComponent_Multicast_KnifeHit, causedDamage) == 0x000010, "Member 'LacerationComponent_Multicast_KnifeHit::causedDamage' has a wrong offset!");
static_assert(offsetof(LacerationComponent_Multicast_KnifeHit, CausedKO) == 0x000011, "Member 'LacerationComponent_Multicast_KnifeHit::CausedKO' has a wrong offset!");
static_assert(offsetof(LacerationComponent_Multicast_KnifeHit, impactLocation) == 0x000018, "Member 'LacerationComponent_Multicast_KnifeHit::impactLocation' has a wrong offset!");
static_assert(offsetof(LacerationComponent_Multicast_KnifeHit, ImpactNormal) == 0x000030, "Member 'LacerationComponent_Multicast_KnifeHit::ImpactNormal' has a wrong offset!");

// Function TheK23.LacerationComponent.OnRepLaceration
// 0x0004 (0x0004 - 0x0000)
struct LacerationComponent_OnRepLaceration final
{
public:
	float                                         oldLaceration;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LacerationComponent_OnRepLaceration) == 0x000004, "Wrong alignment on LacerationComponent_OnRepLaceration");
static_assert(sizeof(LacerationComponent_OnRepLaceration) == 0x000004, "Wrong size on LacerationComponent_OnRepLaceration");
static_assert(offsetof(LacerationComponent_OnRepLaceration, oldLaceration) == 0x000000, "Member 'LacerationComponent_OnRepLaceration::oldLaceration' has a wrong offset!");

// Function TheK23.NoWayOut.Multicast_TriggerLoudNoise
// 0x0010 (0x0010 - 0x0000)
struct NoWayOut_Multicast_TriggerLoudNoise final
{
public:
	class ADBDPlayer*                             Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEscapeDoor*                            EscapeDoor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoWayOut_Multicast_TriggerLoudNoise) == 0x000008, "Wrong alignment on NoWayOut_Multicast_TriggerLoudNoise");
static_assert(sizeof(NoWayOut_Multicast_TriggerLoudNoise) == 0x000010, "Wrong size on NoWayOut_Multicast_TriggerLoudNoise");
static_assert(offsetof(NoWayOut_Multicast_TriggerLoudNoise, Instigator) == 0x000000, "Member 'NoWayOut_Multicast_TriggerLoudNoise::Instigator' has a wrong offset!");
static_assert(offsetof(NoWayOut_Multicast_TriggerLoudNoise, EscapeDoor) == 0x000008, "Member 'NoWayOut_Multicast_TriggerLoudNoise::EscapeDoor' has a wrong offset!");

// Function TheK23.NoWayOut.GetExitGatePanelBlockBaseDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct NoWayOut_GetExitGatePanelBlockBaseDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoWayOut_GetExitGatePanelBlockBaseDurationAtLevel) == 0x000004, "Wrong alignment on NoWayOut_GetExitGatePanelBlockBaseDurationAtLevel");
static_assert(sizeof(NoWayOut_GetExitGatePanelBlockBaseDurationAtLevel) == 0x000004, "Wrong size on NoWayOut_GetExitGatePanelBlockBaseDurationAtLevel");
static_assert(offsetof(NoWayOut_GetExitGatePanelBlockBaseDurationAtLevel, ReturnValue) == 0x000000, "Member 'NoWayOut_GetExitGatePanelBlockBaseDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheK23.NoWayOut.GetExitGatePanelBlockDurationPerTokenAtLevel
// 0x0004 (0x0004 - 0x0000)
struct NoWayOut_GetExitGatePanelBlockDurationPerTokenAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoWayOut_GetExitGatePanelBlockDurationPerTokenAtLevel) == 0x000004, "Wrong alignment on NoWayOut_GetExitGatePanelBlockDurationPerTokenAtLevel");
static_assert(sizeof(NoWayOut_GetExitGatePanelBlockDurationPerTokenAtLevel) == 0x000004, "Wrong size on NoWayOut_GetExitGatePanelBlockDurationPerTokenAtLevel");
static_assert(offsetof(NoWayOut_GetExitGatePanelBlockDurationPerTokenAtLevel, ReturnValue) == 0x000000, "Member 'NoWayOut_GetExitGatePanelBlockDurationPerTokenAtLevel::ReturnValue' has a wrong offset!");

// Function TheK23.Starstruck.GetExposedEffectDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Starstruck_GetExposedEffectDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Starstruck_GetExposedEffectDurationAtLevel) == 0x000004, "Wrong alignment on Starstruck_GetExposedEffectDurationAtLevel");
static_assert(sizeof(Starstruck_GetExposedEffectDurationAtLevel) == 0x000004, "Wrong size on Starstruck_GetExposedEffectDurationAtLevel");
static_assert(offsetof(Starstruck_GetExposedEffectDurationAtLevel, ReturnValue) == 0x000000, "Member 'Starstruck_GetExposedEffectDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheK23.Starstruck.GetPerkCooldownDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Starstruck_GetPerkCooldownDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Starstruck_GetPerkCooldownDurationAtLevel) == 0x000004, "Wrong alignment on Starstruck_GetPerkCooldownDurationAtLevel");
static_assert(sizeof(Starstruck_GetPerkCooldownDurationAtLevel) == 0x000004, "Wrong size on Starstruck_GetPerkCooldownDurationAtLevel");
static_assert(offsetof(Starstruck_GetPerkCooldownDurationAtLevel, ReturnValue) == 0x000000, "Member 'Starstruck_GetPerkCooldownDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheK23.ThrowingKnives.Cosmetic_OnComboFinished
// 0x0001 (0x0001 - 0x0000)
struct ThrowingKnives_Cosmetic_OnComboFinished final
{
public:
	bool                                          isSRankCombo;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowingKnives_Cosmetic_OnComboFinished) == 0x000001, "Wrong alignment on ThrowingKnives_Cosmetic_OnComboFinished");
static_assert(sizeof(ThrowingKnives_Cosmetic_OnComboFinished) == 0x000001, "Wrong size on ThrowingKnives_Cosmetic_OnComboFinished");
static_assert(offsetof(ThrowingKnives_Cosmetic_OnComboFinished, isSRankCombo) == 0x000000, "Member 'ThrowingKnives_Cosmetic_OnComboFinished::isSRankCombo' has a wrong offset!");

// Function TheK23.ThrowingKnives.Cosmetic_OnComboScoreChanged
// 0x0004 (0x0004 - 0x0000)
struct ThrowingKnives_Cosmetic_OnComboScoreChanged final
{
public:
	float                                         scoreNormalizedForAudio;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowingKnives_Cosmetic_OnComboScoreChanged) == 0x000004, "Wrong alignment on ThrowingKnives_Cosmetic_OnComboScoreChanged");
static_assert(sizeof(ThrowingKnives_Cosmetic_OnComboScoreChanged) == 0x000004, "Wrong size on ThrowingKnives_Cosmetic_OnComboScoreChanged");
static_assert(offsetof(ThrowingKnives_Cosmetic_OnComboScoreChanged, scoreNormalizedForAudio) == 0x000000, "Member 'ThrowingKnives_Cosmetic_OnComboScoreChanged::scoreNormalizedForAudio' has a wrong offset!");

// Function TheK23.ThrowingKnives.OnItemUsedStateChanged
// 0x0001 (0x0001 - 0x0000)
struct ThrowingKnives_OnItemUsedStateChanged final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowingKnives_OnItemUsedStateChanged) == 0x000001, "Wrong alignment on ThrowingKnives_OnItemUsedStateChanged");
static_assert(sizeof(ThrowingKnives_OnItemUsedStateChanged) == 0x000001, "Wrong size on ThrowingKnives_OnItemUsedStateChanged");
static_assert(offsetof(ThrowingKnives_OnItemUsedStateChanged, Pressed) == 0x000000, "Member 'ThrowingKnives_OnItemUsedStateChanged::Pressed' has a wrong offset!");

// Function TheK23.ThrowingKnives.GetLauncher
// 0x0008 (0x0008 - 0x0000)
struct ThrowingKnives_GetLauncher final
{
public:
	class UKnivesLauncher*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowingKnives_GetLauncher) == 0x000008, "Wrong alignment on ThrowingKnives_GetLauncher");
static_assert(sizeof(ThrowingKnives_GetLauncher) == 0x000008, "Wrong size on ThrowingKnives_GetLauncher");
static_assert(offsetof(ThrowingKnives_GetLauncher, ReturnValue) == 0x000000, "Member 'ThrowingKnives_GetLauncher::ReturnValue' has a wrong offset!");

// Function TheK23.ThrowingKnives.GetSlasher
// 0x0008 (0x0008 - 0x0000)
struct ThrowingKnives_GetSlasher final
{
public:
	class AKiller*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowingKnives_GetSlasher) == 0x000008, "Wrong alignment on ThrowingKnives_GetSlasher");
static_assert(sizeof(ThrowingKnives_GetSlasher) == 0x000008, "Wrong size on ThrowingKnives_GetSlasher");
static_assert(offsetof(ThrowingKnives_GetSlasher, ReturnValue) == 0x000000, "Member 'ThrowingKnives_GetSlasher::ReturnValue' has a wrong offset!");

// Function TheK23.TricksterCharacterVFXInterface.SetIsInCooldown
// 0x0001 (0x0001 - 0x0000)
struct TricksterCharacterVFXInterface_SetIsInCooldown final
{
public:
	bool                                          isInCooldown;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TricksterCharacterVFXInterface_SetIsInCooldown) == 0x000001, "Wrong alignment on TricksterCharacterVFXInterface_SetIsInCooldown");
static_assert(sizeof(TricksterCharacterVFXInterface_SetIsInCooldown) == 0x000001, "Wrong size on TricksterCharacterVFXInterface_SetIsInCooldown");
static_assert(offsetof(TricksterCharacterVFXInterface_SetIsInCooldown, isInCooldown) == 0x000000, "Member 'TricksterCharacterVFXInterface_SetIsInCooldown::isInCooldown' has a wrong offset!");

// Function TheK23.TricksterCharacterVFXInterface.SetIsSuperModeReady
// 0x0001 (0x0001 - 0x0000)
struct TricksterCharacterVFXInterface_SetIsSuperModeReady final
{
public:
	bool                                          isSuperModeReady;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TricksterCharacterVFXInterface_SetIsSuperModeReady) == 0x000001, "Wrong alignment on TricksterCharacterVFXInterface_SetIsSuperModeReady");
static_assert(sizeof(TricksterCharacterVFXInterface_SetIsSuperModeReady) == 0x000001, "Wrong size on TricksterCharacterVFXInterface_SetIsSuperModeReady");
static_assert(offsetof(TricksterCharacterVFXInterface_SetIsSuperModeReady, isSuperModeReady) == 0x000000, "Member 'TricksterCharacterVFXInterface_SetIsSuperModeReady::isSuperModeReady' has a wrong offset!");

// Function TheK23.TricksterCharacterVFXInterface.SetKnivesVisibility
// 0x0002 (0x0002 - 0x0000)
struct TricksterCharacterVFXInterface_SetKnivesVisibility final
{
public:
	bool                                          leftKnife;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          rightKnife;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TricksterCharacterVFXInterface_SetKnivesVisibility) == 0x000001, "Wrong alignment on TricksterCharacterVFXInterface_SetKnivesVisibility");
static_assert(sizeof(TricksterCharacterVFXInterface_SetKnivesVisibility) == 0x000002, "Wrong size on TricksterCharacterVFXInterface_SetKnivesVisibility");
static_assert(offsetof(TricksterCharacterVFXInterface_SetKnivesVisibility, leftKnife) == 0x000000, "Member 'TricksterCharacterVFXInterface_SetKnivesVisibility::leftKnife' has a wrong offset!");
static_assert(offsetof(TricksterCharacterVFXInterface_SetKnivesVisibility, rightKnife) == 0x000001, "Member 'TricksterCharacterVFXInterface_SetKnivesVisibility::rightKnife' has a wrong offset!");

// Function TheK23.TricksterCharacterVFXInterface.SetSuperModeActive
// 0x0001 (0x0001 - 0x0000)
struct TricksterCharacterVFXInterface_SetSuperModeActive final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TricksterCharacterVFXInterface_SetSuperModeActive) == 0x000001, "Wrong alignment on TricksterCharacterVFXInterface_SetSuperModeActive");
static_assert(sizeof(TricksterCharacterVFXInterface_SetSuperModeActive) == 0x000001, "Wrong size on TricksterCharacterVFXInterface_SetSuperModeActive");
static_assert(offsetof(TricksterCharacterVFXInterface_SetSuperModeActive, Active) == 0x000000, "Member 'TricksterCharacterVFXInterface_SetSuperModeActive::Active' has a wrong offset!");

}

