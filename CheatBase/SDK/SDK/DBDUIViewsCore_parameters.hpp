#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewsCore

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "DBDUIViewsCore_structs.hpp"
#include "Slate_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "DBDInput_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "NewsAndMessagesCommon_structs.hpp"
#include "RemoteContentCache_structs.hpp"


namespace SDK::Params
{

// Function DBDUIViewsCore.CoreBaseUserWidget.OnControlModeChangedBP
// 0x0001 (0x0001 - 0x0000)
struct CoreBaseUserWidget_OnControlModeChangedBP final
{
public:
	EControlMode                                  controlMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseUserWidget_OnControlModeChangedBP) == 0x000001, "Wrong alignment on CoreBaseUserWidget_OnControlModeChangedBP");
static_assert(sizeof(CoreBaseUserWidget_OnControlModeChangedBP) == 0x000001, "Wrong size on CoreBaseUserWidget_OnControlModeChangedBP");
static_assert(offsetof(CoreBaseUserWidget_OnControlModeChangedBP, controlMode) == 0x000000, "Member 'CoreBaseUserWidget_OnControlModeChangedBP::controlMode' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseUserWidget.PlayAnimationByName
// 0x0020 (0x0020 - 0x0000)
struct CoreBaseUserWidget_PlayAnimationByName final
{
public:
	class FName                                   animName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         starttime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         loopcount;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreBaseUserWidget_PlayAnimationByName) == 0x000004, "Wrong alignment on CoreBaseUserWidget_PlayAnimationByName");
static_assert(sizeof(CoreBaseUserWidget_PlayAnimationByName) == 0x000020, "Wrong size on CoreBaseUserWidget_PlayAnimationByName");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByName, animName) == 0x000000, "Member 'CoreBaseUserWidget_PlayAnimationByName::animName' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByName, starttime) == 0x00000C, "Member 'CoreBaseUserWidget_PlayAnimationByName::starttime' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByName, loopcount) == 0x000010, "Member 'CoreBaseUserWidget_PlayAnimationByName::loopcount' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByName, PlayMode) == 0x000014, "Member 'CoreBaseUserWidget_PlayAnimationByName::PlayMode' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByName, PlaybackSpeed) == 0x000018, "Member 'CoreBaseUserWidget_PlayAnimationByName::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByName, ReturnValue) == 0x00001C, "Member 'CoreBaseUserWidget_PlayAnimationByName::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseUserWidget.PlayAnimationByNameWithFinishedDelegate
// 0x0038 (0x0038 - 0x0000)
struct CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate final
{
public:
	class FName                                   animName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             animationFinishedDelegate;                         // 0x000C(0x0014)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         starttime;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         loopcount;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UWidgetAnimation*                 ReturnValue;                                       // 0x0030(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate) == 0x000008, "Wrong alignment on CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate");
static_assert(sizeof(CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate) == 0x000038, "Wrong size on CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate, animName) == 0x000000, "Member 'CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate::animName' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate, animationFinishedDelegate) == 0x00000C, "Member 'CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate::animationFinishedDelegate' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate, starttime) == 0x000020, "Member 'CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate::starttime' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate, loopcount) == 0x000024, "Member 'CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate::loopcount' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate, PlayMode) == 0x000028, "Member 'CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate::PlayMode' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate, PlaybackSpeed) == 0x00002C, "Member 'CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate, ReturnValue) == 0x000030, "Member 'CoreBaseUserWidget_PlayAnimationByNameWithFinishedDelegate::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseUserWidget.StopAnimationByName
// 0x0010 (0x0010 - 0x0000)
struct CoreBaseUserWidget_StopAnimationByName final
{
public:
	class FName                                   animName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreBaseUserWidget_StopAnimationByName) == 0x000004, "Wrong alignment on CoreBaseUserWidget_StopAnimationByName");
static_assert(sizeof(CoreBaseUserWidget_StopAnimationByName) == 0x000010, "Wrong size on CoreBaseUserWidget_StopAnimationByName");
static_assert(offsetof(CoreBaseUserWidget_StopAnimationByName, animName) == 0x000000, "Member 'CoreBaseUserWidget_StopAnimationByName::animName' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_StopAnimationByName, ReturnValue) == 0x00000C, "Member 'CoreBaseUserWidget_StopAnimationByName::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseUserWidget.UpdateScale
// 0x0004 (0x0004 - 0x0000)
struct CoreBaseUserWidget_UpdateScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseUserWidget_UpdateScale) == 0x000004, "Wrong alignment on CoreBaseUserWidget_UpdateScale");
static_assert(sizeof(CoreBaseUserWidget_UpdateScale) == 0x000004, "Wrong size on CoreBaseUserWidget_UpdateScale");
static_assert(offsetof(CoreBaseUserWidget_UpdateScale, Scale) == 0x000000, "Member 'CoreBaseUserWidget_UpdateScale::Scale' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseUserWidget.GetAnimationByName
// 0x0018 (0x0018 - 0x0000)
struct CoreBaseUserWidget_GetAnimationByName final
{
public:
	class FName                                   animName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseUserWidget_GetAnimationByName) == 0x000008, "Wrong alignment on CoreBaseUserWidget_GetAnimationByName");
static_assert(sizeof(CoreBaseUserWidget_GetAnimationByName) == 0x000018, "Wrong size on CoreBaseUserWidget_GetAnimationByName");
static_assert(offsetof(CoreBaseUserWidget_GetAnimationByName, animName) == 0x000000, "Member 'CoreBaseUserWidget_GetAnimationByName::animName' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_GetAnimationByName, ReturnValue) == 0x000010, "Member 'CoreBaseUserWidget_GetAnimationByName::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingButtonHolderWidget.GetStepId
// 0x0010 (0x0010 - 0x0000)
struct CoreOnboardingButtonHolderWidget_GetStepId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingButtonHolderWidget_GetStepId) == 0x000008, "Wrong alignment on CoreOnboardingButtonHolderWidget_GetStepId");
static_assert(sizeof(CoreOnboardingButtonHolderWidget_GetStepId) == 0x000010, "Wrong size on CoreOnboardingButtonHolderWidget_GetStepId");
static_assert(offsetof(CoreOnboardingButtonHolderWidget_GetStepId, ReturnValue) == 0x000000, "Member 'CoreOnboardingButtonHolderWidget_GetStepId::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingButtonHolderWidget.OnClickedTutorialButton
// 0x0008 (0x0008 - 0x0000)
struct CoreOnboardingButtonHolderWidget_OnClickedTutorialButton final
{
public:
	class UCoreButtonWidget*                      clickedTutorialButton;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingButtonHolderWidget_OnClickedTutorialButton) == 0x000008, "Wrong alignment on CoreOnboardingButtonHolderWidget_OnClickedTutorialButton");
static_assert(sizeof(CoreOnboardingButtonHolderWidget_OnClickedTutorialButton) == 0x000008, "Wrong size on CoreOnboardingButtonHolderWidget_OnClickedTutorialButton");
static_assert(offsetof(CoreOnboardingButtonHolderWidget_OnClickedTutorialButton, clickedTutorialButton) == 0x000000, "Member 'CoreOnboardingButtonHolderWidget_OnClickedTutorialButton::clickedTutorialButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.FadeInAnimation_Implementation
// 0x0008 (0x0008 - 0x0000)
struct CoreBinkVideoPlayerWidget_FadeInAnimation_Implementation final
{
public:
	float                                         FadeInDuration;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBinkVideoPlayerWidget_FadeInAnimation_Implementation) == 0x000004, "Wrong alignment on CoreBinkVideoPlayerWidget_FadeInAnimation_Implementation");
static_assert(sizeof(CoreBinkVideoPlayerWidget_FadeInAnimation_Implementation) == 0x000008, "Wrong size on CoreBinkVideoPlayerWidget_FadeInAnimation_Implementation");
static_assert(offsetof(CoreBinkVideoPlayerWidget_FadeInAnimation_Implementation, FadeInDuration) == 0x000000, "Member 'CoreBinkVideoPlayerWidget_FadeInAnimation_Implementation::FadeInDuration' has a wrong offset!");
static_assert(offsetof(CoreBinkVideoPlayerWidget_FadeInAnimation_Implementation, Delay) == 0x000004, "Member 'CoreBinkVideoPlayerWidget_FadeInAnimation_Implementation::Delay' has a wrong offset!");

// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.FadeOutAnimation_Implementation
// 0x0008 (0x0008 - 0x0000)
struct CoreBinkVideoPlayerWidget_FadeOutAnimation_Implementation final
{
public:
	float                                         FadeOutDuration;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBinkVideoPlayerWidget_FadeOutAnimation_Implementation) == 0x000004, "Wrong alignment on CoreBinkVideoPlayerWidget_FadeOutAnimation_Implementation");
static_assert(sizeof(CoreBinkVideoPlayerWidget_FadeOutAnimation_Implementation) == 0x000008, "Wrong size on CoreBinkVideoPlayerWidget_FadeOutAnimation_Implementation");
static_assert(offsetof(CoreBinkVideoPlayerWidget_FadeOutAnimation_Implementation, FadeOutDuration) == 0x000000, "Member 'CoreBinkVideoPlayerWidget_FadeOutAnimation_Implementation::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(CoreBinkVideoPlayerWidget_FadeOutAnimation_Implementation, Delay) == 0x000004, "Member 'CoreBinkVideoPlayerWidget_FadeOutAnimation_Implementation::Delay' has a wrong offset!");

// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnFadeInAnimationComplete
// 0x0008 (0x0008 - 0x0000)
struct CoreBinkVideoPlayerWidget_OnFadeInAnimationComplete final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBinkVideoPlayerWidget_OnFadeInAnimationComplete) == 0x000008, "Wrong alignment on CoreBinkVideoPlayerWidget_OnFadeInAnimationComplete");
static_assert(sizeof(CoreBinkVideoPlayerWidget_OnFadeInAnimationComplete) == 0x000008, "Wrong size on CoreBinkVideoPlayerWidget_OnFadeInAnimationComplete");
static_assert(offsetof(CoreBinkVideoPlayerWidget_OnFadeInAnimationComplete, tween) == 0x000000, "Member 'CoreBinkVideoPlayerWidget_OnFadeInAnimationComplete::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnFadeOutAnimationComplete
// 0x0008 (0x0008 - 0x0000)
struct CoreBinkVideoPlayerWidget_OnFadeOutAnimationComplete final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBinkVideoPlayerWidget_OnFadeOutAnimationComplete) == 0x000008, "Wrong alignment on CoreBinkVideoPlayerWidget_OnFadeOutAnimationComplete");
static_assert(sizeof(CoreBinkVideoPlayerWidget_OnFadeOutAnimationComplete) == 0x000008, "Wrong size on CoreBinkVideoPlayerWidget_OnFadeOutAnimationComplete");
static_assert(offsetof(CoreBinkVideoPlayerWidget_OnFadeOutAnimationComplete, tween) == 0x000000, "Member 'CoreBinkVideoPlayerWidget_OnFadeOutAnimationComplete::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnMediaOpened
// 0x0010 (0x0010 - 0x0000)
struct CoreBinkVideoPlayerWidget_OnMediaOpened final
{
public:
	class FString                                 OpenedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBinkVideoPlayerWidget_OnMediaOpened) == 0x000008, "Wrong alignment on CoreBinkVideoPlayerWidget_OnMediaOpened");
static_assert(sizeof(CoreBinkVideoPlayerWidget_OnMediaOpened) == 0x000010, "Wrong size on CoreBinkVideoPlayerWidget_OnMediaOpened");
static_assert(offsetof(CoreBinkVideoPlayerWidget_OnMediaOpened, OpenedUrl) == 0x000000, "Member 'CoreBinkVideoPlayerWidget_OnMediaOpened::OpenedUrl' has a wrong offset!");

// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.OnSubtitlesChanged
// 0x0010 (0x0010 - 0x0000)
struct CoreBinkVideoPlayerWidget_OnSubtitlesChanged final
{
public:
	TArray<class FString>                         subtitlesText;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBinkVideoPlayerWidget_OnSubtitlesChanged) == 0x000008, "Wrong alignment on CoreBinkVideoPlayerWidget_OnSubtitlesChanged");
static_assert(sizeof(CoreBinkVideoPlayerWidget_OnSubtitlesChanged) == 0x000010, "Wrong size on CoreBinkVideoPlayerWidget_OnSubtitlesChanged");
static_assert(offsetof(CoreBinkVideoPlayerWidget_OnSubtitlesChanged, subtitlesText) == 0x000000, "Member 'CoreBinkVideoPlayerWidget_OnSubtitlesChanged::subtitlesText' has a wrong offset!");

// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.SetSize_Implementation
// 0x0010 (0x0010 - 0x0000)
struct CoreBinkVideoPlayerWidget_SetSize_Implementation final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBinkVideoPlayerWidget_SetSize_Implementation) == 0x000008, "Wrong alignment on CoreBinkVideoPlayerWidget_SetSize_Implementation");
static_assert(sizeof(CoreBinkVideoPlayerWidget_SetSize_Implementation) == 0x000010, "Wrong size on CoreBinkVideoPlayerWidget_SetSize_Implementation");
static_assert(offsetof(CoreBinkVideoPlayerWidget_SetSize_Implementation, Size) == 0x000000, "Member 'CoreBinkVideoPlayerWidget_SetSize_Implementation::Size' has a wrong offset!");

// Function DBDUIViewsCore.CoreBasePopupWidget.Show
// 0x0008 (0x0008 - 0x0000)
struct CoreBasePopupWidget_Show final
{
public:
	class UBasePopupViewData*                     Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBasePopupWidget_Show) == 0x000008, "Wrong alignment on CoreBasePopupWidget_Show");
static_assert(sizeof(CoreBasePopupWidget_Show) == 0x000008, "Wrong size on CoreBasePopupWidget_Show");
static_assert(offsetof(CoreBasePopupWidget_Show, Data) == 0x000000, "Member 'CoreBasePopupWidget_Show::Data' has a wrong offset!");

// Function DBDUIViewsCore.TooltipWidget.GetPriority
// 0x0001 (0x0001 - 0x0000)
struct TooltipWidget_GetPriority final
{
public:
	ETooltipPriority                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TooltipWidget_GetPriority) == 0x000001, "Wrong alignment on TooltipWidget_GetPriority");
static_assert(sizeof(TooltipWidget_GetPriority) == 0x000001, "Wrong size on TooltipWidget_GetPriority");
static_assert(offsetof(TooltipWidget_GetPriority, ReturnValue) == 0x000000, "Member 'TooltipWidget_GetPriority::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.ArchiveCompendiumTooltipWidget.SetTooltipData
// 0x0078 (0x0078 - 0x0000)
struct ArchiveCompendiumTooltipWidget_SetTooltipData final
{
public:
	struct FCompendiumButtonData                  tooltipViewData;                                   // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveCompendiumTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on ArchiveCompendiumTooltipWidget_SetTooltipData");
static_assert(sizeof(ArchiveCompendiumTooltipWidget_SetTooltipData) == 0x000078, "Wrong size on ArchiveCompendiumTooltipWidget_SetTooltipData");
static_assert(offsetof(ArchiveCompendiumTooltipWidget_SetTooltipData, tooltipViewData) == 0x000000, "Member 'ArchiveCompendiumTooltipWidget_SetTooltipData::tooltipViewData' has a wrong offset!");

// Function DBDUIViewsCore.ArchiveNodeTooltipWidget.SetNodeType
// 0x0001 (0x0001 - 0x0000)
struct ArchiveNodeTooltipWidget_SetNodeType final
{
public:
	EArchiveNodeType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveNodeTooltipWidget_SetNodeType) == 0x000001, "Wrong alignment on ArchiveNodeTooltipWidget_SetNodeType");
static_assert(sizeof(ArchiveNodeTooltipWidget_SetNodeType) == 0x000001, "Wrong size on ArchiveNodeTooltipWidget_SetNodeType");
static_assert(offsetof(ArchiveNodeTooltipWidget_SetNodeType, Type) == 0x000000, "Member 'ArchiveNodeTooltipWidget_SetNodeType::Type' has a wrong offset!");

// Function DBDUIViewsCore.ArchiveNodeTooltipWidget.SetTooltipData
// 0x00B8 (0x00B8 - 0x0000)
struct ArchiveNodeTooltipWidget_SetTooltipData final
{
public:
	struct FArchiveNodeViewData                   NodeViewData;                                      // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveNodeTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on ArchiveNodeTooltipWidget_SetTooltipData");
static_assert(sizeof(ArchiveNodeTooltipWidget_SetTooltipData) == 0x0000B8, "Wrong size on ArchiveNodeTooltipWidget_SetTooltipData");
static_assert(offsetof(ArchiveNodeTooltipWidget_SetTooltipData, NodeViewData) == 0x000000, "Member 'ArchiveNodeTooltipWidget_SetTooltipData::NodeViewData' has a wrong offset!");

// Function DBDUIViewsCore.ArchivePassTooltipWidget.SetTooltipData
// 0x0098 (0x0098 - 0x0000)
struct ArchivePassTooltipWidget_SetTooltipData final
{
public:
	struct FArchivePassTooltipViewData            Data;                                              // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchivePassTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on ArchivePassTooltipWidget_SetTooltipData");
static_assert(sizeof(ArchivePassTooltipWidget_SetTooltipData) == 0x000098, "Wrong size on ArchivePassTooltipWidget_SetTooltipData");
static_assert(offsetof(ArchivePassTooltipWidget_SetTooltipData, Data) == 0x000000, "Member 'ArchivePassTooltipWidget_SetTooltipData::Data' has a wrong offset!");

// Function DBDUIViewsCore.AspectRatioBox.SetAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct AspectRatioBox_SetAspectRatio final
{
public:
	float                                         inAspectRatio;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AspectRatioBox_SetAspectRatio) == 0x000004, "Wrong alignment on AspectRatioBox_SetAspectRatio");
static_assert(sizeof(AspectRatioBox_SetAspectRatio) == 0x000004, "Wrong size on AspectRatioBox_SetAspectRatio");
static_assert(offsetof(AspectRatioBox_SetAspectRatio, inAspectRatio) == 0x000000, "Member 'AspectRatioBox_SetAspectRatio::inAspectRatio' has a wrong offset!");

// Function DBDUIViewsCore.AspectRatioBoxSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct AspectRatioBoxSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          inHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AspectRatioBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on AspectRatioBoxSlot_SetHorizontalAlignment");
static_assert(sizeof(AspectRatioBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on AspectRatioBoxSlot_SetHorizontalAlignment");
static_assert(offsetof(AspectRatioBoxSlot_SetHorizontalAlignment, inHorizontalAlignment) == 0x000000, "Member 'AspectRatioBoxSlot_SetHorizontalAlignment::inHorizontalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.AspectRatioBoxSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct AspectRatioBoxSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AspectRatioBoxSlot_SetPadding) == 0x000004, "Wrong alignment on AspectRatioBoxSlot_SetPadding");
static_assert(sizeof(AspectRatioBoxSlot_SetPadding) == 0x000010, "Wrong size on AspectRatioBoxSlot_SetPadding");
static_assert(offsetof(AspectRatioBoxSlot_SetPadding, InPadding) == 0x000000, "Member 'AspectRatioBoxSlot_SetPadding::InPadding' has a wrong offset!");

// Function DBDUIViewsCore.AspectRatioBoxSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct AspectRatioBoxSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            inVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AspectRatioBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on AspectRatioBoxSlot_SetVerticalAlignment");
static_assert(sizeof(AspectRatioBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong size on AspectRatioBoxSlot_SetVerticalAlignment");
static_assert(offsetof(AspectRatioBoxSlot_SetVerticalAlignment, inVerticalAlignment) == 0x000000, "Member 'AspectRatioBoxSlot_SetVerticalAlignment::inVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.BaseFilterWidget.OnPlayerClick
// 0x0080 (0x0080 - 0x0000)
struct BaseFilterWidget_OnPlayerClick final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseFilterWidget_OnPlayerClick) == 0x000008, "Wrong alignment on BaseFilterWidget_OnPlayerClick");
static_assert(sizeof(BaseFilterWidget_OnPlayerClick) == 0x000080, "Wrong size on BaseFilterWidget_OnPlayerClick");
static_assert(offsetof(BaseFilterWidget_OnPlayerClick, PointerEvent) == 0x000000, "Member 'BaseFilterWidget_OnPlayerClick::PointerEvent' has a wrong offset!");

// Function DBDUIViewsCore.BaseFilterWidget.OnWidgetVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct BaseFilterWidget_OnWidgetVisibilityChanged final
{
public:
	ESlateVisibility                              newVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseFilterWidget_OnWidgetVisibilityChanged) == 0x000001, "Wrong alignment on BaseFilterWidget_OnWidgetVisibilityChanged");
static_assert(sizeof(BaseFilterWidget_OnWidgetVisibilityChanged) == 0x000001, "Wrong size on BaseFilterWidget_OnWidgetVisibilityChanged");
static_assert(offsetof(BaseFilterWidget_OnWidgetVisibilityChanged, newVisibility) == 0x000000, "Member 'BaseFilterWidget_OnWidgetVisibilityChanged::newVisibility' has a wrong offset!");

// Function DBDUIViewsCore.BloodpointBonusLabelWidget.SetData
// 0x0030 (0x0030 - 0x0000)
struct BloodpointBonusLabelWidget_SetData final
{
public:
	struct FBloodpointBonus                       ViewData;                                          // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodpointBonusLabelWidget_SetData) == 0x000008, "Wrong alignment on BloodpointBonusLabelWidget_SetData");
static_assert(sizeof(BloodpointBonusLabelWidget_SetData) == 0x000030, "Wrong size on BloodpointBonusLabelWidget_SetData");
static_assert(offsetof(BloodpointBonusLabelWidget_SetData, ViewData) == 0x000000, "Member 'BloodpointBonusLabelWidget_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.BloodpointBonusTooltip.SetTooltipData
// 0x0028 (0x0028 - 0x0000)
struct BloodpointBonusTooltip_SetTooltipData final
{
public:
	struct FBloodpointBonusTooltipViewData        ViewData;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodpointBonusTooltip_SetTooltipData) == 0x000008, "Wrong alignment on BloodpointBonusTooltip_SetTooltipData");
static_assert(sizeof(BloodpointBonusTooltip_SetTooltipData) == 0x000028, "Wrong size on BloodpointBonusTooltip_SetTooltipData");
static_assert(offsetof(BloodpointBonusTooltip_SetTooltipData, ViewData) == 0x000000, "Member 'BloodpointBonusTooltip_SetTooltipData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.BotLoadoutWidget.OnDropDownListSelectedOptionChanged
// 0x0090 (0x0090 - 0x0000)
struct BotLoadoutWidget_OnDropDownListSelectedOptionChanged final
{
public:
	struct FTabWidgetData                         buttonData;                                        // 0x0000(0x0090)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BotLoadoutWidget_OnDropDownListSelectedOptionChanged) == 0x000008, "Wrong alignment on BotLoadoutWidget_OnDropDownListSelectedOptionChanged");
static_assert(sizeof(BotLoadoutWidget_OnDropDownListSelectedOptionChanged) == 0x000090, "Wrong size on BotLoadoutWidget_OnDropDownListSelectedOptionChanged");
static_assert(offsetof(BotLoadoutWidget_OnDropDownListSelectedOptionChanged, buttonData) == 0x000000, "Member 'BotLoadoutWidget_OnDropDownListSelectedOptionChanged::buttonData' has a wrong offset!");

// Function DBDUIViewsCore.BotLoadoutWidget.OnDropdownSelected
// 0x0001 (0x0001 - 0x0000)
struct BotLoadoutWidget_OnDropdownSelected final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BotLoadoutWidget_OnDropdownSelected) == 0x000001, "Wrong alignment on BotLoadoutWidget_OnDropdownSelected");
static_assert(sizeof(BotLoadoutWidget_OnDropdownSelected) == 0x000001, "Wrong size on BotLoadoutWidget_OnDropdownSelected");
static_assert(offsetof(BotLoadoutWidget_OnDropdownSelected, InVisibility) == 0x000000, "Member 'BotLoadoutWidget_OnDropdownSelected::InVisibility' has a wrong offset!");

// Function DBDUIViewsCore.BotLoadoutWidget.OnPresetClicked
// 0x0004 (0x0004 - 0x0000)
struct BotLoadoutWidget_OnPresetClicked final
{
public:
	int32                                         SelectedPresetId;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BotLoadoutWidget_OnPresetClicked) == 0x000004, "Wrong alignment on BotLoadoutWidget_OnPresetClicked");
static_assert(sizeof(BotLoadoutWidget_OnPresetClicked) == 0x000004, "Wrong size on BotLoadoutWidget_OnPresetClicked");
static_assert(offsetof(BotLoadoutWidget_OnPresetClicked, SelectedPresetId) == 0x000000, "Member 'BotLoadoutWidget_OnPresetClicked::SelectedPresetId' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContentWidget.StopFadeInTweening
// 0x0004 (0x0004 - 0x0000)
struct CoreTabContentWidget_StopFadeInTweening final
{
public:
	float                                         opacityValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabContentWidget_StopFadeInTweening) == 0x000004, "Wrong alignment on CoreTabContentWidget_StopFadeInTweening");
static_assert(sizeof(CoreTabContentWidget_StopFadeInTweening) == 0x000004, "Wrong size on CoreTabContentWidget_StopFadeInTweening");
static_assert(offsetof(CoreTabContentWidget_StopFadeInTweening, opacityValue) == 0x000000, "Member 'CoreTabContentWidget_StopFadeInTweening::opacityValue' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuChallengeSetWidget.OnChallengeSetTabSelected
// 0x0008 (0x0008 - 0x0000)
struct ChallengesMenuChallengeSetWidget_OnChallengeSetTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuChallengeSetWidget_OnChallengeSetTabSelected) == 0x000008, "Wrong alignment on ChallengesMenuChallengeSetWidget_OnChallengeSetTabSelected");
static_assert(sizeof(ChallengesMenuChallengeSetWidget_OnChallengeSetTabSelected) == 0x000008, "Wrong size on ChallengesMenuChallengeSetWidget_OnChallengeSetTabSelected");
static_assert(offsetof(ChallengesMenuChallengeSetWidget_OnChallengeSetTabSelected, selectedButton) == 0x000000, "Member 'ChallengesMenuChallengeSetWidget_OnChallengeSetTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuChallengeSetWidget.GetSkinData
// 0x0098 (0x0098 - 0x0000)
struct ChallengesMenuChallengeSetWidget_GetSkinData final
{
public:
	struct FChallengeSkinUIData                   ReturnValue;                                       // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuChallengeSetWidget_GetSkinData) == 0x000008, "Wrong alignment on ChallengesMenuChallengeSetWidget_GetSkinData");
static_assert(sizeof(ChallengesMenuChallengeSetWidget_GetSkinData) == 0x000098, "Wrong size on ChallengesMenuChallengeSetWidget_GetSkinData");
static_assert(offsetof(ChallengesMenuChallengeSetWidget_GetSkinData, ReturnValue) == 0x000000, "Member 'ChallengesMenuChallengeSetWidget_GetSkinData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRewardTrackTierItem.OnRewardClicked
// 0x0008 (0x0008 - 0x0000)
struct ChallengesMenuRewardTrackTierItem_OnRewardClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRewardTrackTierItem_OnRewardClicked) == 0x000008, "Wrong alignment on ChallengesMenuRewardTrackTierItem_OnRewardClicked");
static_assert(sizeof(ChallengesMenuRewardTrackTierItem_OnRewardClicked) == 0x000008, "Wrong size on ChallengesMenuRewardTrackTierItem_OnRewardClicked");
static_assert(offsetof(ChallengesMenuRewardTrackTierItem_OnRewardClicked, Button) == 0x000000, "Member 'ChallengesMenuRewardTrackTierItem_OnRewardClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRewardTrackTierItem.SetGenericData
// 0x0028 (0x0028 - 0x0000)
struct ChallengesMenuRewardTrackTierItem_SetGenericData final
{
public:
	struct FChallengeSetRewardTrackTierInfoViewData Data;                                            // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRewardTrackTierItem_SetGenericData) == 0x000008, "Wrong alignment on ChallengesMenuRewardTrackTierItem_SetGenericData");
static_assert(sizeof(ChallengesMenuRewardTrackTierItem_SetGenericData) == 0x000028, "Wrong size on ChallengesMenuRewardTrackTierItem_SetGenericData");
static_assert(offsetof(ChallengesMenuRewardTrackTierItem_SetGenericData, Data) == 0x000000, "Member 'ChallengesMenuRewardTrackTierItem_SetGenericData::Data' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRewardTrackTierItem.SetLockedState
// 0x0001 (0x0001 - 0x0000)
struct ChallengesMenuRewardTrackTierItem_SetLockedState final
{
public:
	bool                                          IsLocked;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRewardTrackTierItem_SetLockedState) == 0x000001, "Wrong alignment on ChallengesMenuRewardTrackTierItem_SetLockedState");
static_assert(sizeof(ChallengesMenuRewardTrackTierItem_SetLockedState) == 0x000001, "Wrong size on ChallengesMenuRewardTrackTierItem_SetLockedState");
static_assert(offsetof(ChallengesMenuRewardTrackTierItem_SetLockedState, IsLocked) == 0x000000, "Member 'ChallengesMenuRewardTrackTierItem_SetLockedState::IsLocked' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRewardTrackWidget.DisplayPage
// 0x0008 (0x0008 - 0x0000)
struct ChallengesMenuRewardTrackWidget_DisplayPage final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRewardTrackWidget_DisplayPage) == 0x000008, "Wrong alignment on ChallengesMenuRewardTrackWidget_DisplayPage");
static_assert(sizeof(ChallengesMenuRewardTrackWidget_DisplayPage) == 0x000008, "Wrong size on ChallengesMenuRewardTrackWidget_DisplayPage");
static_assert(offsetof(ChallengesMenuRewardTrackWidget_DisplayPage, tween) == 0x000000, "Member 'ChallengesMenuRewardTrackWidget_DisplayPage::tween' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRewardTrackWidget.OnRewardItemClicked
// 0x0018 (0x0018 - 0x0000)
struct ChallengesMenuRewardTrackWidget_OnRewardItemClicked final
{
public:
	int32                                         tier;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreButtonWidget*                      Button;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChallengesMenuRewardTrackWidget_OnRewardItemClicked) == 0x000008, "Wrong alignment on ChallengesMenuRewardTrackWidget_OnRewardItemClicked");
static_assert(sizeof(ChallengesMenuRewardTrackWidget_OnRewardItemClicked) == 0x000018, "Wrong size on ChallengesMenuRewardTrackWidget_OnRewardItemClicked");
static_assert(offsetof(ChallengesMenuRewardTrackWidget_OnRewardItemClicked, tier) == 0x000000, "Member 'ChallengesMenuRewardTrackWidget_OnRewardItemClicked::tier' has a wrong offset!");
static_assert(offsetof(ChallengesMenuRewardTrackWidget_OnRewardItemClicked, Button) == 0x000008, "Member 'ChallengesMenuRewardTrackWidget_OnRewardItemClicked::Button' has a wrong offset!");
static_assert(offsetof(ChallengesMenuRewardTrackWidget_OnRewardItemClicked, Index_0) == 0x000010, "Member 'ChallengesMenuRewardTrackWidget_OnRewardItemClicked::Index_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.OnAlignmentChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_OnAlignmentChanged final
{
public:
	ETextJustify                                  newAlignment;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_OnAlignmentChanged) == 0x000001, "Wrong alignment on CoreButtonWidget_OnAlignmentChanged");
static_assert(sizeof(CoreButtonWidget_OnAlignmentChanged) == 0x000001, "Wrong size on CoreButtonWidget_OnAlignmentChanged");
static_assert(offsetof(CoreButtonWidget_OnAlignmentChanged, newAlignment) == 0x000000, "Member 'CoreButtonWidget_OnAlignmentChanged::newAlignment' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.OnButtonVisibilityChanged
// 0x0002 (0x0002 - 0x0000)
struct CoreButtonWidget_OnButtonVisibilityChanged final
{
public:
	EButtonWidgetVisibility                       previousVisibility;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonWidgetVisibility                       newVisibility;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_OnButtonVisibilityChanged) == 0x000001, "Wrong alignment on CoreButtonWidget_OnButtonVisibilityChanged");
static_assert(sizeof(CoreButtonWidget_OnButtonVisibilityChanged) == 0x000002, "Wrong size on CoreButtonWidget_OnButtonVisibilityChanged");
static_assert(offsetof(CoreButtonWidget_OnButtonVisibilityChanged, previousVisibility) == 0x000000, "Member 'CoreButtonWidget_OnButtonVisibilityChanged::previousVisibility' has a wrong offset!");
static_assert(offsetof(CoreButtonWidget_OnButtonVisibilityChanged, newVisibility) == 0x000001, "Member 'CoreButtonWidget_OnButtonVisibilityChanged::newVisibility' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.OnChargingTick
// 0x0004 (0x0004 - 0x0000)
struct CoreButtonWidget_OnChargingTick final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_OnChargingTick) == 0x000004, "Wrong alignment on CoreButtonWidget_OnChargingTick");
static_assert(sizeof(CoreButtonWidget_OnChargingTick) == 0x000004, "Wrong size on CoreButtonWidget_OnChargingTick");
static_assert(offsetof(CoreButtonWidget_OnChargingTick, Progress) == 0x000000, "Member 'CoreButtonWidget_OnChargingTick::Progress' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.OnClickableChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_OnClickableChanged final
{
public:
	bool                                          IsClickable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_OnClickableChanged) == 0x000001, "Wrong alignment on CoreButtonWidget_OnClickableChanged");
static_assert(sizeof(CoreButtonWidget_OnClickableChanged) == 0x000001, "Wrong size on CoreButtonWidget_OnClickableChanged");
static_assert(offsetof(CoreButtonWidget_OnClickableChanged, IsClickable) == 0x000000, "Member 'CoreButtonWidget_OnClickableChanged::IsClickable' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.OnEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_OnEnabledChanged final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_OnEnabledChanged) == 0x000001, "Wrong alignment on CoreButtonWidget_OnEnabledChanged");
static_assert(sizeof(CoreButtonWidget_OnEnabledChanged) == 0x000001, "Wrong size on CoreButtonWidget_OnEnabledChanged");
static_assert(offsetof(CoreButtonWidget_OnEnabledChanged, IsEnabled) == 0x000000, "Member 'CoreButtonWidget_OnEnabledChanged::IsEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetAdditionalIcon
// 0x0038 (0x0038 - 0x0000)
struct CoreButtonWidget_SetAdditionalIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              iconTexture;                                       // 0x0000(0x0038)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetAdditionalIcon) == 0x000008, "Wrong alignment on CoreButtonWidget_SetAdditionalIcon");
static_assert(sizeof(CoreButtonWidget_SetAdditionalIcon) == 0x000038, "Wrong size on CoreButtonWidget_SetAdditionalIcon");
static_assert(offsetof(CoreButtonWidget_SetAdditionalIcon, iconTexture) == 0x000000, "Member 'CoreButtonWidget_SetAdditionalIcon::iconTexture' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetAlignment
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetAlignment final
{
public:
	ETextJustify                                  newAlignment;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetAlignment) == 0x000001, "Wrong alignment on CoreButtonWidget_SetAlignment");
static_assert(sizeof(CoreButtonWidget_SetAlignment) == 0x000001, "Wrong size on CoreButtonWidget_SetAlignment");
static_assert(offsetof(CoreButtonWidget_SetAlignment, newAlignment) == 0x000000, "Member 'CoreButtonWidget_SetAlignment::newAlignment' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetBackground
// 0x0038 (0x0038 - 0x0000)
struct CoreButtonWidget_SetBackground final
{
public:
	TSoftObjectPtr<class UMaterialInstance>       backgroundMaterial;                                // 0x0000(0x0038)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetBackground) == 0x000008, "Wrong alignment on CoreButtonWidget_SetBackground");
static_assert(sizeof(CoreButtonWidget_SetBackground) == 0x000038, "Wrong size on CoreButtonWidget_SetBackground");
static_assert(offsetof(CoreButtonWidget_SetBackground, backgroundMaterial) == 0x000000, "Member 'CoreButtonWidget_SetBackground::backgroundMaterial' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetChargeable
// 0x0018 (0x0018 - 0x0000)
struct CoreButtonWidget_SetChargeable final
{
public:
	bool                                          isChargeable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            holdingAnimCurve;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreButtonWidget_SetChargeable) == 0x000008, "Wrong alignment on CoreButtonWidget_SetChargeable");
static_assert(sizeof(CoreButtonWidget_SetChargeable) == 0x000018, "Wrong size on CoreButtonWidget_SetChargeable");
static_assert(offsetof(CoreButtonWidget_SetChargeable, isChargeable) == 0x000000, "Member 'CoreButtonWidget_SetChargeable::isChargeable' has a wrong offset!");
static_assert(offsetof(CoreButtonWidget_SetChargeable, holdingAnimCurve) == 0x000008, "Member 'CoreButtonWidget_SetChargeable::holdingAnimCurve' has a wrong offset!");
static_assert(offsetof(CoreButtonWidget_SetChargeable, Duration) == 0x000010, "Member 'CoreButtonWidget_SetChargeable::Duration' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetClickable
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetClickable final
{
public:
	bool                                          IsClickable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetClickable) == 0x000001, "Wrong alignment on CoreButtonWidget_SetClickable");
static_assert(sizeof(CoreButtonWidget_SetClickable) == 0x000001, "Wrong size on CoreButtonWidget_SetClickable");
static_assert(offsetof(CoreButtonWidget_SetClickable, IsClickable) == 0x000000, "Member 'CoreButtonWidget_SetClickable::IsClickable' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetEnabled) == 0x000001, "Wrong alignment on CoreButtonWidget_SetEnabled");
static_assert(sizeof(CoreButtonWidget_SetEnabled) == 0x000001, "Wrong size on CoreButtonWidget_SetEnabled");
static_assert(offsetof(CoreButtonWidget_SetEnabled, IsEnabled) == 0x000000, "Member 'CoreButtonWidget_SetEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetHoldable
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetHoldable final
{
public:
	bool                                          isHoldable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetHoldable) == 0x000001, "Wrong alignment on CoreButtonWidget_SetHoldable");
static_assert(sizeof(CoreButtonWidget_SetHoldable) == 0x000001, "Wrong size on CoreButtonWidget_SetHoldable");
static_assert(offsetof(CoreButtonWidget_SetHoldable, isHoldable) == 0x000000, "Member 'CoreButtonWidget_SetHoldable::isHoldable' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetHoverable
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetHoverable final
{
public:
	bool                                          isHoverable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetHoverable) == 0x000001, "Wrong alignment on CoreButtonWidget_SetHoverable");
static_assert(sizeof(CoreButtonWidget_SetHoverable) == 0x000001, "Wrong size on CoreButtonWidget_SetHoverable");
static_assert(offsetof(CoreButtonWidget_SetHoverable, isHoverable) == 0x000000, "Member 'CoreButtonWidget_SetHoverable::isHoverable' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct CoreButtonWidget_SetLabel final
{
public:
	class FText                                   label;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetLabel) == 0x000008, "Wrong alignment on CoreButtonWidget_SetLabel");
static_assert(sizeof(CoreButtonWidget_SetLabel) == 0x000018, "Wrong size on CoreButtonWidget_SetLabel");
static_assert(offsetof(CoreButtonWidget_SetLabel, label) == 0x000000, "Member 'CoreButtonWidget_SetLabel::label' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetPressable
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetPressable final
{
public:
	bool                                          isPressable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetPressable) == 0x000001, "Wrong alignment on CoreButtonWidget_SetPressable");
static_assert(sizeof(CoreButtonWidget_SetPressable) == 0x000001, "Wrong size on CoreButtonWidget_SetPressable");
static_assert(offsetof(CoreButtonWidget_SetPressable, isPressable) == 0x000000, "Member 'CoreButtonWidget_SetPressable::isPressable' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetRepeatable
// 0x0010 (0x0010 - 0x0000)
struct CoreButtonWidget_SetRepeatable final
{
public:
	bool                                          isRepeatable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            repetitionDelayCurve;                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetRepeatable) == 0x000008, "Wrong alignment on CoreButtonWidget_SetRepeatable");
static_assert(sizeof(CoreButtonWidget_SetRepeatable) == 0x000010, "Wrong size on CoreButtonWidget_SetRepeatable");
static_assert(offsetof(CoreButtonWidget_SetRepeatable, isRepeatable) == 0x000000, "Member 'CoreButtonWidget_SetRepeatable::isRepeatable' has a wrong offset!");
static_assert(offsetof(CoreButtonWidget_SetRepeatable, repetitionDelayCurve) == 0x000008, "Member 'CoreButtonWidget_SetRepeatable::repetitionDelayCurve' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetVisible final
{
public:
	EButtonWidgetVisibility                       Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetVisible) == 0x000001, "Wrong alignment on CoreButtonWidget_SetVisible");
static_assert(sizeof(CoreButtonWidget_SetVisible) == 0x000001, "Wrong size on CoreButtonWidget_SetVisible");
static_assert(offsetof(CoreButtonWidget_SetVisible, Visible) == 0x000000, "Member 'CoreButtonWidget_SetVisible::Visible' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.UpdateLockedFeatureVisuals
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_UpdateLockedFeatureVisuals final
{
public:
	bool                                          IsLockedFeature;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_UpdateLockedFeatureVisuals) == 0x000001, "Wrong alignment on CoreButtonWidget_UpdateLockedFeatureVisuals");
static_assert(sizeof(CoreButtonWidget_UpdateLockedFeatureVisuals) == 0x000001, "Wrong size on CoreButtonWidget_UpdateLockedFeatureVisuals");
static_assert(offsetof(CoreButtonWidget_UpdateLockedFeatureVisuals, IsLockedFeature) == 0x000000, "Member 'CoreButtonWidget_UpdateLockedFeatureVisuals::IsLockedFeature' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.GetHitzonePaintSpaceGeometry
// 0x0038 (0x0038 - 0x0000)
struct CoreButtonWidget_GetHitzonePaintSpaceGeometry final
{
public:
	struct FGeometry                              ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_GetHitzonePaintSpaceGeometry) == 0x000004, "Wrong alignment on CoreButtonWidget_GetHitzonePaintSpaceGeometry");
static_assert(sizeof(CoreButtonWidget_GetHitzonePaintSpaceGeometry) == 0x000038, "Wrong size on CoreButtonWidget_GetHitzonePaintSpaceGeometry");
static_assert(offsetof(CoreButtonWidget_GetHitzonePaintSpaceGeometry, ReturnValue) == 0x000000, "Member 'CoreButtonWidget_GetHitzonePaintSpaceGeometry::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.HasValidLockedFeatureData
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_HasValidLockedFeatureData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_HasValidLockedFeatureData) == 0x000001, "Wrong alignment on CoreButtonWidget_HasValidLockedFeatureData");
static_assert(sizeof(CoreButtonWidget_HasValidLockedFeatureData) == 0x000001, "Wrong size on CoreButtonWidget_HasValidLockedFeatureData");
static_assert(offsetof(CoreButtonWidget_HasValidLockedFeatureData, ReturnValue) == 0x000000, "Member 'CoreButtonWidget_HasValidLockedFeatureData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.IsClickable
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_IsClickable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_IsClickable) == 0x000001, "Wrong alignment on CoreButtonWidget_IsClickable");
static_assert(sizeof(CoreButtonWidget_IsClickable) == 0x000001, "Wrong size on CoreButtonWidget_IsClickable");
static_assert(offsetof(CoreButtonWidget_IsClickable, ReturnValue) == 0x000000, "Member 'CoreButtonWidget_IsClickable::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_IsEnabled) == 0x000001, "Wrong alignment on CoreButtonWidget_IsEnabled");
static_assert(sizeof(CoreButtonWidget_IsEnabled) == 0x000001, "Wrong size on CoreButtonWidget_IsEnabled");
static_assert(offsetof(CoreButtonWidget_IsEnabled, ReturnValue) == 0x000000, "Member 'CoreButtonWidget_IsEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.IsPressed
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_IsPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_IsPressed) == 0x000001, "Wrong alignment on CoreButtonWidget_IsPressed");
static_assert(sizeof(CoreButtonWidget_IsPressed) == 0x000001, "Wrong size on CoreButtonWidget_IsPressed");
static_assert(offsetof(CoreButtonWidget_IsPressed, ReturnValue) == 0x000000, "Member 'CoreButtonWidget_IsPressed::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRiftButtonWidget.SetBackgroundVisuals
// 0x0002 (0x0002 - 0x0000)
struct ChallengesMenuRiftButtonWidget_SetBackgroundVisuals final
{
public:
	bool                                          isPremiumPass;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETierType                                     tier;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRiftButtonWidget_SetBackgroundVisuals) == 0x000001, "Wrong alignment on ChallengesMenuRiftButtonWidget_SetBackgroundVisuals");
static_assert(sizeof(ChallengesMenuRiftButtonWidget_SetBackgroundVisuals) == 0x000002, "Wrong size on ChallengesMenuRiftButtonWidget_SetBackgroundVisuals");
static_assert(offsetof(ChallengesMenuRiftButtonWidget_SetBackgroundVisuals, isPremiumPass) == 0x000000, "Member 'ChallengesMenuRiftButtonWidget_SetBackgroundVisuals::isPremiumPass' has a wrong offset!");
static_assert(offsetof(ChallengesMenuRiftButtonWidget_SetBackgroundVisuals, tier) == 0x000001, "Member 'ChallengesMenuRiftButtonWidget_SetBackgroundVisuals::tier' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRiftButtonWidget.SetLockedVisuals
// 0x0001 (0x0001 - 0x0000)
struct ChallengesMenuRiftButtonWidget_SetLockedVisuals final
{
public:
	bool                                          IsLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRiftButtonWidget_SetLockedVisuals) == 0x000001, "Wrong alignment on ChallengesMenuRiftButtonWidget_SetLockedVisuals");
static_assert(sizeof(ChallengesMenuRiftButtonWidget_SetLockedVisuals) == 0x000001, "Wrong size on ChallengesMenuRiftButtonWidget_SetLockedVisuals");
static_assert(offsetof(ChallengesMenuRiftButtonWidget_SetLockedVisuals, IsLocked) == 0x000000, "Member 'ChallengesMenuRiftButtonWidget_SetLockedVisuals::IsLocked' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRiftButtonWidget.SetRiftPassTrackIcon
// 0x0001 (0x0001 - 0x0000)
struct ChallengesMenuRiftButtonWidget_SetRiftPassTrackIcon final
{
public:
	bool                                          isPremiumPass;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRiftButtonWidget_SetRiftPassTrackIcon) == 0x000001, "Wrong alignment on ChallengesMenuRiftButtonWidget_SetRiftPassTrackIcon");
static_assert(sizeof(ChallengesMenuRiftButtonWidget_SetRiftPassTrackIcon) == 0x000001, "Wrong size on ChallengesMenuRiftButtonWidget_SetRiftPassTrackIcon");
static_assert(offsetof(ChallengesMenuRiftButtonWidget_SetRiftPassTrackIcon, isPremiumPass) == 0x000000, "Member 'ChallengesMenuRiftButtonWidget_SetRiftPassTrackIcon::isPremiumPass' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRiftButtonWidget.SetRiftProgressionColor
// 0x0001 (0x0001 - 0x0000)
struct ChallengesMenuRiftButtonWidget_SetRiftProgressionColor final
{
public:
	ETierType                                     tier;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRiftButtonWidget_SetRiftProgressionColor) == 0x000001, "Wrong alignment on ChallengesMenuRiftButtonWidget_SetRiftProgressionColor");
static_assert(sizeof(ChallengesMenuRiftButtonWidget_SetRiftProgressionColor) == 0x000001, "Wrong size on ChallengesMenuRiftButtonWidget_SetRiftProgressionColor");
static_assert(offsetof(ChallengesMenuRiftButtonWidget_SetRiftProgressionColor, tier) == 0x000000, "Member 'ChallengesMenuRiftButtonWidget_SetRiftProgressionColor::tier' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRiftButtonWidget.SetRiftProgressionImage
// 0x0004 (0x0004 - 0x0000)
struct ChallengesMenuRiftButtonWidget_SetRiftProgressionImage final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRiftButtonWidget_SetRiftProgressionImage) == 0x000004, "Wrong alignment on ChallengesMenuRiftButtonWidget_SetRiftProgressionImage");
static_assert(sizeof(ChallengesMenuRiftButtonWidget_SetRiftProgressionImage) == 0x000004, "Wrong size on ChallengesMenuRiftButtonWidget_SetRiftProgressionImage");
static_assert(offsetof(ChallengesMenuRiftButtonWidget_SetRiftProgressionImage, Percentage) == 0x000000, "Member 'ChallengesMenuRiftButtonWidget_SetRiftProgressionImage::Percentage' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.OnChallengeCardClicked
// 0x0008 (0x0008 - 0x0000)
struct ChallengesMenuRitualsWidget_OnChallengeCardClicked final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRitualsWidget_OnChallengeCardClicked) == 0x000008, "Wrong alignment on ChallengesMenuRitualsWidget_OnChallengeCardClicked");
static_assert(sizeof(ChallengesMenuRitualsWidget_OnChallengeCardClicked) == 0x000008, "Wrong size on ChallengesMenuRitualsWidget_OnChallengeCardClicked");
static_assert(offsetof(ChallengesMenuRitualsWidget_OnChallengeCardClicked, targetButton) == 0x000000, "Member 'ChallengesMenuRitualsWidget_OnChallengeCardClicked::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.OnChallengeCardHovered
// 0x0008 (0x0008 - 0x0000)
struct ChallengesMenuRitualsWidget_OnChallengeCardHovered final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRitualsWidget_OnChallengeCardHovered) == 0x000008, "Wrong alignment on ChallengesMenuRitualsWidget_OnChallengeCardHovered");
static_assert(sizeof(ChallengesMenuRitualsWidget_OnChallengeCardHovered) == 0x000008, "Wrong size on ChallengesMenuRitualsWidget_OnChallengeCardHovered");
static_assert(offsetof(ChallengesMenuRitualsWidget_OnChallengeCardHovered, targetButton) == 0x000000, "Member 'ChallengesMenuRitualsWidget_OnChallengeCardHovered::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.OnChallengeCardUnhovered
// 0x0008 (0x0008 - 0x0000)
struct ChallengesMenuRitualsWidget_OnChallengeCardUnhovered final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRitualsWidget_OnChallengeCardUnhovered) == 0x000008, "Wrong alignment on ChallengesMenuRitualsWidget_OnChallengeCardUnhovered");
static_assert(sizeof(ChallengesMenuRitualsWidget_OnChallengeCardUnhovered) == 0x000008, "Wrong size on ChallengesMenuRitualsWidget_OnChallengeCardUnhovered");
static_assert(offsetof(ChallengesMenuRitualsWidget_OnChallengeCardUnhovered, targetButton) == 0x000000, "Member 'ChallengesMenuRitualsWidget_OnChallengeCardUnhovered::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.OnFiltersButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct ChallengesMenuRitualsWidget_OnFiltersButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRitualsWidget_OnFiltersButtonClicked) == 0x000008, "Wrong alignment on ChallengesMenuRitualsWidget_OnFiltersButtonClicked");
static_assert(sizeof(ChallengesMenuRitualsWidget_OnFiltersButtonClicked) == 0x000008, "Wrong size on ChallengesMenuRitualsWidget_OnFiltersButtonClicked");
static_assert(offsetof(ChallengesMenuRitualsWidget_OnFiltersButtonClicked, buttonTarget) == 0x000000, "Member 'ChallengesMenuRitualsWidget_OnFiltersButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.ChallengesMenuRitualsWidget.ScrollToSelectedItem
// 0x000C (0x000C - 0x0000)
struct ChallengesMenuRitualsWidget_ScrollToSelectedItem final
{
public:
	class FName                                   selectedItemId;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRitualsWidget_ScrollToSelectedItem) == 0x000004, "Wrong alignment on ChallengesMenuRitualsWidget_ScrollToSelectedItem");
static_assert(sizeof(ChallengesMenuRitualsWidget_ScrollToSelectedItem) == 0x00000C, "Wrong size on ChallengesMenuRitualsWidget_ScrollToSelectedItem");
static_assert(offsetof(ChallengesMenuRitualsWidget_ScrollToSelectedItem, selectedItemId) == 0x000000, "Member 'ChallengesMenuRitualsWidget_ScrollToSelectedItem::selectedItemId' has a wrong offset!");

// Function DBDUIViewsCore.CharacterTooltipWidget.SetLevel
// 0x0004 (0x0004 - 0x0000)
struct CharacterTooltipWidget_SetLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterTooltipWidget_SetLevel) == 0x000004, "Wrong alignment on CharacterTooltipWidget_SetLevel");
static_assert(sizeof(CharacterTooltipWidget_SetLevel) == 0x000004, "Wrong size on CharacterTooltipWidget_SetLevel");
static_assert(offsetof(CharacterTooltipWidget_SetLevel, Level) == 0x000000, "Member 'CharacterTooltipWidget_SetLevel::Level' has a wrong offset!");

// Function DBDUIViewsCore.CharacterTooltipWidget.SetLockDetails
// 0x00C0 (0x00C0 - 0x0000)
struct CharacterTooltipWidget_SetLockDetails final
{
public:
	struct FCharacterTooltipViewData              CharacterViewData;                                 // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterTooltipWidget_SetLockDetails) == 0x000008, "Wrong alignment on CharacterTooltipWidget_SetLockDetails");
static_assert(sizeof(CharacterTooltipWidget_SetLockDetails) == 0x0000C0, "Wrong size on CharacterTooltipWidget_SetLockDetails");
static_assert(offsetof(CharacterTooltipWidget_SetLockDetails, CharacterViewData) == 0x000000, "Member 'CharacterTooltipWidget_SetLockDetails::CharacterViewData' has a wrong offset!");

// Function DBDUIViewsCore.CharacterTooltipWidget.SetTooltipData
// 0x00C0 (0x00C0 - 0x0000)
struct CharacterTooltipWidget_SetTooltipData final
{
public:
	struct FCharacterTooltipViewData              CharacterViewData;                                 // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on CharacterTooltipWidget_SetTooltipData");
static_assert(sizeof(CharacterTooltipWidget_SetTooltipData) == 0x0000C0, "Wrong size on CharacterTooltipWidget_SetTooltipData");
static_assert(offsetof(CharacterTooltipWidget_SetTooltipData, CharacterViewData) == 0x000000, "Member 'CharacterTooltipWidget_SetTooltipData::CharacterViewData' has a wrong offset!");

// Function DBDUIViewsCore.CharacterTooltipWidget.SetTrialCharacterDetails
// 0x00C0 (0x00C0 - 0x0000)
struct CharacterTooltipWidget_SetTrialCharacterDetails final
{
public:
	struct FCharacterTooltipViewData              CharacterViewData;                                 // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterTooltipWidget_SetTrialCharacterDetails) == 0x000008, "Wrong alignment on CharacterTooltipWidget_SetTrialCharacterDetails");
static_assert(sizeof(CharacterTooltipWidget_SetTrialCharacterDetails) == 0x0000C0, "Wrong size on CharacterTooltipWidget_SetTrialCharacterDetails");
static_assert(offsetof(CharacterTooltipWidget_SetTrialCharacterDetails, CharacterViewData) == 0x000000, "Member 'CharacterTooltipWidget_SetTrialCharacterDetails::CharacterViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseHudWidget.ShouldPlayFocusAnimation
// 0x0001 (0x0001 - 0x0000)
struct CoreBaseHudWidget_ShouldPlayFocusAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseHudWidget_ShouldPlayFocusAnimation) == 0x000001, "Wrong alignment on CoreBaseHudWidget_ShouldPlayFocusAnimation");
static_assert(sizeof(CoreBaseHudWidget_ShouldPlayFocusAnimation) == 0x000001, "Wrong size on CoreBaseHudWidget_ShouldPlayFocusAnimation");
static_assert(offsetof(CoreBaseHudWidget_ShouldPlayFocusAnimation, ReturnValue) == 0x000000, "Member 'CoreBaseHudWidget_ShouldPlayFocusAnimation::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetActiveState
// 0x0001 (0x0001 - 0x0000)
struct CoreBaseLoadoutPartWidget_SetActiveState final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseLoadoutPartWidget_SetActiveState) == 0x000001, "Wrong alignment on CoreBaseLoadoutPartWidget_SetActiveState");
static_assert(sizeof(CoreBaseLoadoutPartWidget_SetActiveState) == 0x000001, "Wrong size on CoreBaseLoadoutPartWidget_SetActiveState");
static_assert(offsetof(CoreBaseLoadoutPartWidget_SetActiveState, IsActive) == 0x000000, "Member 'CoreBaseLoadoutPartWidget_SetActiveState::IsActive' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutPartIcon
// 0x0038 (0x0038 - 0x0000)
struct CoreBaseLoadoutPartWidget_SetLoadoutPartIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0000(0x0038)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseLoadoutPartWidget_SetLoadoutPartIcon) == 0x000008, "Wrong alignment on CoreBaseLoadoutPartWidget_SetLoadoutPartIcon");
static_assert(sizeof(CoreBaseLoadoutPartWidget_SetLoadoutPartIcon) == 0x000038, "Wrong size on CoreBaseLoadoutPartWidget_SetLoadoutPartIcon");
static_assert(offsetof(CoreBaseLoadoutPartWidget_SetLoadoutPartIcon, Icon) == 0x000000, "Member 'CoreBaseLoadoutPartWidget_SetLoadoutPartIcon::Icon' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutPartRarity
// 0x0002 (0x0002 - 0x0000)
struct CoreBaseLoadoutPartWidget_SetLoadoutPartRarity final
{
public:
	EItemRarity                                   Rarity;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemSourceTag                                ItemSourceTags;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseLoadoutPartWidget_SetLoadoutPartRarity) == 0x000001, "Wrong alignment on CoreBaseLoadoutPartWidget_SetLoadoutPartRarity");
static_assert(sizeof(CoreBaseLoadoutPartWidget_SetLoadoutPartRarity) == 0x000002, "Wrong size on CoreBaseLoadoutPartWidget_SetLoadoutPartRarity");
static_assert(offsetof(CoreBaseLoadoutPartWidget_SetLoadoutPartRarity, Rarity) == 0x000000, "Member 'CoreBaseLoadoutPartWidget_SetLoadoutPartRarity::Rarity' has a wrong offset!");
static_assert(offsetof(CoreBaseLoadoutPartWidget_SetLoadoutPartRarity, ItemSourceTags) == 0x000001, "Member 'CoreBaseLoadoutPartWidget_SetLoadoutPartRarity::ItemSourceTags' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutStackCount
// 0x0004 (0x0004 - 0x0000)
struct CoreBaseLoadoutPartWidget_SetLoadoutStackCount final
{
public:
	int32                                         StackCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseLoadoutPartWidget_SetLoadoutStackCount) == 0x000004, "Wrong alignment on CoreBaseLoadoutPartWidget_SetLoadoutStackCount");
static_assert(sizeof(CoreBaseLoadoutPartWidget_SetLoadoutStackCount) == 0x000004, "Wrong size on CoreBaseLoadoutPartWidget_SetLoadoutStackCount");
static_assert(offsetof(CoreBaseLoadoutPartWidget_SetLoadoutStackCount, StackCount) == 0x000000, "Member 'CoreBaseLoadoutPartWidget_SetLoadoutStackCount::StackCount' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetStatusEffect
// 0x0001 (0x0001 - 0x0000)
struct CoreBaseLoadoutPartWidget_SetStatusEffect final
{
public:
	EStatusEffectType                             StatusEffectType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseLoadoutPartWidget_SetStatusEffect) == 0x000001, "Wrong alignment on CoreBaseLoadoutPartWidget_SetStatusEffect");
static_assert(sizeof(CoreBaseLoadoutPartWidget_SetStatusEffect) == 0x000001, "Wrong size on CoreBaseLoadoutPartWidget_SetStatusEffect");
static_assert(offsetof(CoreBaseLoadoutPartWidget_SetStatusEffect, StatusEffectType) == 0x000000, "Member 'CoreBaseLoadoutPartWidget_SetStatusEffect::StatusEffectType' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutTooltipWidget.SetKillSwitchWarning
// 0x0020 (0x0020 - 0x0000)
struct LoadoutTooltipWidget_SetKillSwitchWarning final
{
public:
	EDisabledItemOption                           disabledType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisabledMessage;                                   // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutTooltipWidget_SetKillSwitchWarning) == 0x000008, "Wrong alignment on LoadoutTooltipWidget_SetKillSwitchWarning");
static_assert(sizeof(LoadoutTooltipWidget_SetKillSwitchWarning) == 0x000020, "Wrong size on LoadoutTooltipWidget_SetKillSwitchWarning");
static_assert(offsetof(LoadoutTooltipWidget_SetKillSwitchWarning, disabledType) == 0x000000, "Member 'LoadoutTooltipWidget_SetKillSwitchWarning::disabledType' has a wrong offset!");
static_assert(offsetof(LoadoutTooltipWidget_SetKillSwitchWarning, DisabledMessage) == 0x000008, "Member 'LoadoutTooltipWidget_SetKillSwitchWarning::DisabledMessage' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutTooltipWidget.SetTooltipData
// 0x00F8 (0x00F8 - 0x0000)
struct LoadoutTooltipWidget_SetTooltipData final
{
public:
	struct FLoadoutTooltipData                    tooltipViewData;                                   // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on LoadoutTooltipWidget_SetTooltipData");
static_assert(sizeof(LoadoutTooltipWidget_SetTooltipData) == 0x0000F8, "Wrong size on LoadoutTooltipWidget_SetTooltipData");
static_assert(offsetof(LoadoutTooltipWidget_SetTooltipData, tooltipViewData) == 0x000000, "Member 'LoadoutTooltipWidget_SetTooltipData::tooltipViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreAlertsWidget.AddElementsToSequence
// 0x0070 (0x0070 - 0x0000)
struct CoreAlertsWidget_AddElementsToSequence final
{
public:
	struct FAlertsViewData                        AlertsViewData;                                    // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAlertsWidget_AddElementsToSequence) == 0x000008, "Wrong alignment on CoreAlertsWidget_AddElementsToSequence");
static_assert(sizeof(CoreAlertsWidget_AddElementsToSequence) == 0x000070, "Wrong size on CoreAlertsWidget_AddElementsToSequence");
static_assert(offsetof(CoreAlertsWidget_AddElementsToSequence, AlertsViewData) == 0x000000, "Member 'CoreAlertsWidget_AddElementsToSequence::AlertsViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreAlertsWidget.OnRewardHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreAlertsWidget_OnRewardHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAlertsWidget_OnRewardHovered) == 0x000008, "Wrong alignment on CoreAlertsWidget_OnRewardHovered");
static_assert(sizeof(CoreAlertsWidget_OnRewardHovered) == 0x000008, "Wrong size on CoreAlertsWidget_OnRewardHovered");
static_assert(offsetof(CoreAlertsWidget_OnRewardHovered, buttonTarget) == 0x000000, "Member 'CoreAlertsWidget_OnRewardHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreAlertsWidget.OnRewardUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreAlertsWidget_OnRewardUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAlertsWidget_OnRewardUnhovered) == 0x000008, "Wrong alignment on CoreAlertsWidget_OnRewardUnhovered");
static_assert(sizeof(CoreAlertsWidget_OnRewardUnhovered) == 0x000008, "Wrong size on CoreAlertsWidget_OnRewardUnhovered");
static_assert(offsetof(CoreAlertsWidget_OnRewardUnhovered, buttonTarget) == 0x000000, "Member 'CoreAlertsWidget_OnRewardUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreAlertsWidget.PlayDisplayRewardSound
// 0x0590 (0x0590 - 0x0000)
struct CoreAlertsWidget_PlayDisplayRewardSound final
{
public:
	struct FRewardWrapperViewData                 RewardData;                                        // 0x0000(0x0590)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAlertsWidget_PlayDisplayRewardSound) == 0x000008, "Wrong alignment on CoreAlertsWidget_PlayDisplayRewardSound");
static_assert(sizeof(CoreAlertsWidget_PlayDisplayRewardSound) == 0x000590, "Wrong size on CoreAlertsWidget_PlayDisplayRewardSound");
static_assert(offsetof(CoreAlertsWidget_PlayDisplayRewardSound, RewardData) == 0x000000, "Member 'CoreAlertsWidget_PlayDisplayRewardSound::RewardData' has a wrong offset!");

// Function DBDUIViewsCore.CoreAlertsWidget.PlayNextChallengesCompletedSequenceAnimation
// 0x0010 (0x0010 - 0x0000)
struct CoreAlertsWidget_PlayNextChallengesCompletedSequenceAnimation final
{
public:
	TArray<struct FCompletedChallengeViewData>    challengesCompleted;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAlertsWidget_PlayNextChallengesCompletedSequenceAnimation) == 0x000008, "Wrong alignment on CoreAlertsWidget_PlayNextChallengesCompletedSequenceAnimation");
static_assert(sizeof(CoreAlertsWidget_PlayNextChallengesCompletedSequenceAnimation) == 0x000010, "Wrong size on CoreAlertsWidget_PlayNextChallengesCompletedSequenceAnimation");
static_assert(offsetof(CoreAlertsWidget_PlayNextChallengesCompletedSequenceAnimation, challengesCompleted) == 0x000000, "Member 'CoreAlertsWidget_PlayNextChallengesCompletedSequenceAnimation::challengesCompleted' has a wrong offset!");

// Function DBDUIViewsCore.CoreAlertsWidget.PlayNextRewardsSequenceAnimation
// 0x0020 (0x0020 - 0x0000)
struct CoreAlertsWidget_PlayNextRewardsSequenceAnimation final
{
public:
	TArray<struct FRewardWrapperViewData>         Rewards;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 eventFrameLabel;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAlertsWidget_PlayNextRewardsSequenceAnimation) == 0x000008, "Wrong alignment on CoreAlertsWidget_PlayNextRewardsSequenceAnimation");
static_assert(sizeof(CoreAlertsWidget_PlayNextRewardsSequenceAnimation) == 0x000020, "Wrong size on CoreAlertsWidget_PlayNextRewardsSequenceAnimation");
static_assert(offsetof(CoreAlertsWidget_PlayNextRewardsSequenceAnimation, Rewards) == 0x000000, "Member 'CoreAlertsWidget_PlayNextRewardsSequenceAnimation::Rewards' has a wrong offset!");
static_assert(offsetof(CoreAlertsWidget_PlayNextRewardsSequenceAnimation, eventFrameLabel) == 0x000010, "Member 'CoreAlertsWidget_PlayNextRewardsSequenceAnimation::eventFrameLabel' has a wrong offset!");

// Function DBDUIViewsCore.CoreAlertsWidget.PlayNextRiftTierUpSequenceAnimation
// 0x0038 (0x0038 - 0x0000)
struct CoreAlertsWidget_PlayNextRiftTierUpSequenceAnimation final
{
public:
	TArray<struct FRiftTierUpViewData>            riftTierUpData;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 eventFrameLabel;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   riftTierUpText;                                    // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAlertsWidget_PlayNextRiftTierUpSequenceAnimation) == 0x000008, "Wrong alignment on CoreAlertsWidget_PlayNextRiftTierUpSequenceAnimation");
static_assert(sizeof(CoreAlertsWidget_PlayNextRiftTierUpSequenceAnimation) == 0x000038, "Wrong size on CoreAlertsWidget_PlayNextRiftTierUpSequenceAnimation");
static_assert(offsetof(CoreAlertsWidget_PlayNextRiftTierUpSequenceAnimation, riftTierUpData) == 0x000000, "Member 'CoreAlertsWidget_PlayNextRiftTierUpSequenceAnimation::riftTierUpData' has a wrong offset!");
static_assert(offsetof(CoreAlertsWidget_PlayNextRiftTierUpSequenceAnimation, eventFrameLabel) == 0x000010, "Member 'CoreAlertsWidget_PlayNextRiftTierUpSequenceAnimation::eventFrameLabel' has a wrong offset!");
static_assert(offsetof(CoreAlertsWidget_PlayNextRiftTierUpSequenceAnimation, riftTierUpText) == 0x000020, "Member 'CoreAlertsWidget_PlayNextRiftTierUpSequenceAnimation::riftTierUpText' has a wrong offset!");

// Function DBDUIViewsCore.CoreAlertsWidget.PlayProgressBarSoundEffect
// 0x0004 (0x0004 - 0x0000)
struct CoreAlertsWidget_PlayProgressBarSoundEffect final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAlertsWidget_PlayProgressBarSoundEffect) == 0x000004, "Wrong alignment on CoreAlertsWidget_PlayProgressBarSoundEffect");
static_assert(sizeof(CoreAlertsWidget_PlayProgressBarSoundEffect) == 0x000004, "Wrong size on CoreAlertsWidget_PlayProgressBarSoundEffect");
static_assert(offsetof(CoreAlertsWidget_PlayProgressBarSoundEffect, Duration) == 0x000000, "Member 'CoreAlertsWidget_PlayProgressBarSoundEffect::Duration' has a wrong offset!");

// Function DBDUIViewsCore.CoreAlertsWidget.PlaySoundEffect
// 0x0008 (0x0008 - 0x0000)
struct CoreAlertsWidget_PlaySoundEffect final
{
public:
	class UAkAudioEvent*                          soundFx;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAlertsWidget_PlaySoundEffect) == 0x000008, "Wrong alignment on CoreAlertsWidget_PlaySoundEffect");
static_assert(sizeof(CoreAlertsWidget_PlaySoundEffect) == 0x000008, "Wrong size on CoreAlertsWidget_PlaySoundEffect");
static_assert(offsetof(CoreAlertsWidget_PlaySoundEffect, soundFx) == 0x000000, "Member 'CoreAlertsWidget_PlaySoundEffect::soundFx' has a wrong offset!");

// Function DBDUIViewsCore.CoreAlertsWidget.RegisterRewardEvents
// 0x0008 (0x0008 - 0x0000)
struct CoreAlertsWidget_RegisterRewardEvents final
{
public:
	class UCoreRewardWidget*                      rewardWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAlertsWidget_RegisterRewardEvents) == 0x000008, "Wrong alignment on CoreAlertsWidget_RegisterRewardEvents");
static_assert(sizeof(CoreAlertsWidget_RegisterRewardEvents) == 0x000008, "Wrong size on CoreAlertsWidget_RegisterRewardEvents");
static_assert(offsetof(CoreAlertsWidget_RegisterRewardEvents, rewardWidget) == 0x000000, "Member 'CoreAlertsWidget_RegisterRewardEvents::rewardWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreAlertsWidget.SetCanSkipSequence
// 0x0001 (0x0001 - 0x0000)
struct CoreAlertsWidget_SetCanSkipSequence final
{
public:
	bool                                          canSkipSequence;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAlertsWidget_SetCanSkipSequence) == 0x000001, "Wrong alignment on CoreAlertsWidget_SetCanSkipSequence");
static_assert(sizeof(CoreAlertsWidget_SetCanSkipSequence) == 0x000001, "Wrong size on CoreAlertsWidget_SetCanSkipSequence");
static_assert(offsetof(CoreAlertsWidget_SetCanSkipSequence, canSkipSequence) == 0x000000, "Member 'CoreAlertsWidget_SetCanSkipSequence::canSkipSequence' has a wrong offset!");

// Function DBDUIViewsCore.CoreAlertsWidget.GetChallengeSetIcon
// 0x0048 (0x0048 - 0x0000)
struct CoreAlertsWidget_GetChallengeSetIcon final
{
public:
	class FString                                 eventFrameLabel;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0010(0x0038)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAlertsWidget_GetChallengeSetIcon) == 0x000008, "Wrong alignment on CoreAlertsWidget_GetChallengeSetIcon");
static_assert(sizeof(CoreAlertsWidget_GetChallengeSetIcon) == 0x000048, "Wrong size on CoreAlertsWidget_GetChallengeSetIcon");
static_assert(offsetof(CoreAlertsWidget_GetChallengeSetIcon, eventFrameLabel) == 0x000000, "Member 'CoreAlertsWidget_GetChallengeSetIcon::eventFrameLabel' has a wrong offset!");
static_assert(offsetof(CoreAlertsWidget_GetChallengeSetIcon, ReturnValue) == 0x000010, "Member 'CoreAlertsWidget_GetChallengeSetIcon::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreAlertsWidget.GetDisplayRewardSound
// 0x0598 (0x0598 - 0x0000)
struct CoreAlertsWidget_GetDisplayRewardSound final
{
public:
	struct FRewardWrapperViewData                 RewardData;                                        // 0x0000(0x0590)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0590(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAlertsWidget_GetDisplayRewardSound) == 0x000008, "Wrong alignment on CoreAlertsWidget_GetDisplayRewardSound");
static_assert(sizeof(CoreAlertsWidget_GetDisplayRewardSound) == 0x000598, "Wrong size on CoreAlertsWidget_GetDisplayRewardSound");
static_assert(offsetof(CoreAlertsWidget_GetDisplayRewardSound, RewardData) == 0x000000, "Member 'CoreAlertsWidget_GetDisplayRewardSound::RewardData' has a wrong offset!");
static_assert(offsetof(CoreAlertsWidget_GetDisplayRewardSound, ReturnValue) == 0x000590, "Member 'CoreAlertsWidget_GetDisplayRewardSound::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreAlertsWidget.IsChallengeCompleted
// 0x0C80 (0x0C80 - 0x0000)
struct CoreAlertsWidget_IsChallengeCompleted final
{
public:
	struct FChallengeViewData                     challenge;                                         // 0x0000(0x0C78)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0C78(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C79[0x7];                                      // 0x0C79(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreAlertsWidget_IsChallengeCompleted) == 0x000008, "Wrong alignment on CoreAlertsWidget_IsChallengeCompleted");
static_assert(sizeof(CoreAlertsWidget_IsChallengeCompleted) == 0x000C80, "Wrong size on CoreAlertsWidget_IsChallengeCompleted");
static_assert(offsetof(CoreAlertsWidget_IsChallengeCompleted, challenge) == 0x000000, "Member 'CoreAlertsWidget_IsChallengeCompleted::challenge' has a wrong offset!");
static_assert(offsetof(CoreAlertsWidget_IsChallengeCompleted, ReturnValue) == 0x000C78, "Member 'CoreAlertsWidget_IsChallengeCompleted::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.FriendSearchPopupWidget.OnFriendClicked
// 0x0008 (0x0008 - 0x0000)
struct FriendSearchPopupWidget_OnFriendClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendSearchPopupWidget_OnFriendClicked) == 0x000008, "Wrong alignment on FriendSearchPopupWidget_OnFriendClicked");
static_assert(sizeof(FriendSearchPopupWidget_OnFriendClicked) == 0x000008, "Wrong size on FriendSearchPopupWidget_OnFriendClicked");
static_assert(offsetof(FriendSearchPopupWidget_OnFriendClicked, buttonTarget) == 0x000000, "Member 'FriendSearchPopupWidget_OnFriendClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreSelectableButtonWidget.OnSelectedChanged
// 0x0002 (0x0002 - 0x0000)
struct CoreSelectableButtonWidget_OnSelectedChanged final
{
public:
	bool                                          IsSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          withAnimation;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSelectableButtonWidget_OnSelectedChanged) == 0x000001, "Wrong alignment on CoreSelectableButtonWidget_OnSelectedChanged");
static_assert(sizeof(CoreSelectableButtonWidget_OnSelectedChanged) == 0x000002, "Wrong size on CoreSelectableButtonWidget_OnSelectedChanged");
static_assert(offsetof(CoreSelectableButtonWidget_OnSelectedChanged, IsSelected) == 0x000000, "Member 'CoreSelectableButtonWidget_OnSelectedChanged::IsSelected' has a wrong offset!");
static_assert(offsetof(CoreSelectableButtonWidget_OnSelectedChanged, withAnimation) == 0x000001, "Member 'CoreSelectableButtonWidget_OnSelectedChanged::withAnimation' has a wrong offset!");

// Function DBDUIViewsCore.CoreSelectableButtonWidget.SetSelectable
// 0x0001 (0x0001 - 0x0000)
struct CoreSelectableButtonWidget_SetSelectable final
{
public:
	bool                                          IsSelectable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSelectableButtonWidget_SetSelectable) == 0x000001, "Wrong alignment on CoreSelectableButtonWidget_SetSelectable");
static_assert(sizeof(CoreSelectableButtonWidget_SetSelectable) == 0x000001, "Wrong size on CoreSelectableButtonWidget_SetSelectable");
static_assert(offsetof(CoreSelectableButtonWidget_SetSelectable, IsSelectable) == 0x000000, "Member 'CoreSelectableButtonWidget_SetSelectable::IsSelectable' has a wrong offset!");

// Function DBDUIViewsCore.CoreSelectableButtonWidget.SetSelected
// 0x0002 (0x0002 - 0x0000)
struct CoreSelectableButtonWidget_SetSelected final
{
public:
	bool                                          IsSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          performAction;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSelectableButtonWidget_SetSelected) == 0x000001, "Wrong alignment on CoreSelectableButtonWidget_SetSelected");
static_assert(sizeof(CoreSelectableButtonWidget_SetSelected) == 0x000002, "Wrong size on CoreSelectableButtonWidget_SetSelected");
static_assert(offsetof(CoreSelectableButtonWidget_SetSelected, IsSelected) == 0x000000, "Member 'CoreSelectableButtonWidget_SetSelected::IsSelected' has a wrong offset!");
static_assert(offsetof(CoreSelectableButtonWidget_SetSelected, performAction) == 0x000001, "Member 'CoreSelectableButtonWidget_SetSelected::performAction' has a wrong offset!");

// Function DBDUIViewsCore.CoreSelectableButtonWidget.UpdateBackgroundSkin
// 0x0008 (0x0008 - 0x0000)
struct CoreSelectableButtonWidget_UpdateBackgroundSkin final
{
public:
	class UMaterialInterface*                     skinMaterial;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSelectableButtonWidget_UpdateBackgroundSkin) == 0x000008, "Wrong alignment on CoreSelectableButtonWidget_UpdateBackgroundSkin");
static_assert(sizeof(CoreSelectableButtonWidget_UpdateBackgroundSkin) == 0x000008, "Wrong size on CoreSelectableButtonWidget_UpdateBackgroundSkin");
static_assert(offsetof(CoreSelectableButtonWidget_UpdateBackgroundSkin, skinMaterial) == 0x000000, "Member 'CoreSelectableButtonWidget_UpdateBackgroundSkin::skinMaterial' has a wrong offset!");

// Function DBDUIViewsCore.CoreSelectableButtonWidget.IsSelectable
// 0x0001 (0x0001 - 0x0000)
struct CoreSelectableButtonWidget_IsSelectable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSelectableButtonWidget_IsSelectable) == 0x000001, "Wrong alignment on CoreSelectableButtonWidget_IsSelectable");
static_assert(sizeof(CoreSelectableButtonWidget_IsSelectable) == 0x000001, "Wrong size on CoreSelectableButtonWidget_IsSelectable");
static_assert(offsetof(CoreSelectableButtonWidget_IsSelectable, ReturnValue) == 0x000000, "Member 'CoreSelectableButtonWidget_IsSelectable::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreSelectableButtonWidget.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct CoreSelectableButtonWidget_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSelectableButtonWidget_IsSelected) == 0x000001, "Wrong alignment on CoreSelectableButtonWidget_IsSelected");
static_assert(sizeof(CoreSelectableButtonWidget_IsSelected) == 0x000001, "Wrong size on CoreSelectableButtonWidget_IsSelected");
static_assert(offsetof(CoreSelectableButtonWidget_IsSelected, ReturnValue) == 0x000000, "Member 'CoreSelectableButtonWidget_IsSelected::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.Init
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_Init final
{
public:
	EPlayerRole                                   Role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_Init) == 0x000001, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_Init");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_Init) == 0x000001, "Wrong size on CoreArchiveChallengeReminderSlotWidget_Init");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_Init, Role) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_Init::Role' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetData
// 0x00D0 (0x00D0 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_SetData final
{
public:
	struct FArchiveChallengeReminderViewData      Data;                                              // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_SetData) == 0x000008, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_SetData");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_SetData) == 0x0000D0, "Wrong size on CoreArchiveChallengeReminderSlotWidget_SetData");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_SetData, Data) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetQuestNodeHoverEffect
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect final
{
public:
	bool                                          IsHovered_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect) == 0x000001, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect) == 0x000001, "Wrong size on CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect, IsHovered_0) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect::IsHovered_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetSlotSelectorState
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState final
{
public:
	bool                                          isSelectorOpen;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState) == 0x000001, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState) == 0x000001, "Wrong size on CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState, isSelectorOpen) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState::isSelectorOpen' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SwapChallenge
// 0x00D0 (0x00D0 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_SwapChallenge final
{
public:
	struct FArchiveChallengeReminderViewData      Data;                                              // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_SwapChallenge) == 0x000008, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_SwapChallenge");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_SwapChallenge) == 0x0000D0, "Wrong size on CoreArchiveChallengeReminderSlotWidget_SwapChallenge");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_SwapChallenge, Data) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_SwapChallenge::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateActiveState
// 0x0002 (0x0002 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_UpdateActiveState final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayAnimation_0;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_UpdateActiveState) == 0x000001, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_UpdateActiveState");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_UpdateActiveState) == 0x000002, "Wrong size on CoreArchiveChallengeReminderSlotWidget_UpdateActiveState");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_UpdateActiveState, IsActive) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_UpdateActiveState::IsActive' has a wrong offset!");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_UpdateActiveState, PlayAnimation_0) == 0x000001, "Member 'CoreArchiveChallengeReminderSlotWidget_UpdateActiveState::PlayAnimation_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateProgressBar
// 0x0004 (0x0004 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar) == 0x000004, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar) == 0x000004, "Wrong size on CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar, Progress) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar::Progress' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateVisualState
// 0x00D0 (0x00D0 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_UpdateVisualState final
{
public:
	struct FArchiveChallengeReminderViewData      Data;                                              // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_UpdateVisualState) == 0x000008, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_UpdateVisualState");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_UpdateVisualState) == 0x0000D0, "Wrong size on CoreArchiveChallengeReminderSlotWidget_UpdateVisualState");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_UpdateVisualState, Data) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_UpdateVisualState::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.GetTomeId
// 0x0010 (0x0010 - 0x0000)
struct CoreArchiveCompendiumButtonWidget_GetTomeId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveCompendiumButtonWidget_GetTomeId) == 0x000008, "Wrong alignment on CoreArchiveCompendiumButtonWidget_GetTomeId");
static_assert(sizeof(CoreArchiveCompendiumButtonWidget_GetTomeId) == 0x000010, "Wrong size on CoreArchiveCompendiumButtonWidget_GetTomeId");
static_assert(offsetof(CoreArchiveCompendiumButtonWidget_GetTomeId, ReturnValue) == 0x000000, "Member 'CoreArchiveCompendiumButtonWidget_GetTomeId::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetButtonData
// 0x0078 (0x0078 - 0x0000)
struct CoreArchiveCompendiumButtonWidget_SetButtonData final
{
public:
	struct FCompendiumButtonData                  buttonData;                                        // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveCompendiumButtonWidget_SetButtonData) == 0x000008, "Wrong alignment on CoreArchiveCompendiumButtonWidget_SetButtonData");
static_assert(sizeof(CoreArchiveCompendiumButtonWidget_SetButtonData) == 0x000078, "Wrong size on CoreArchiveCompendiumButtonWidget_SetButtonData");
static_assert(offsetof(CoreArchiveCompendiumButtonWidget_SetButtonData, buttonData) == 0x000000, "Member 'CoreArchiveCompendiumButtonWidget_SetButtonData::buttonData' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetButtonVisual
// 0x0078 (0x0078 - 0x0000)
struct CoreArchiveCompendiumButtonWidget_SetButtonVisual final
{
public:
	struct FCompendiumButtonData                  buttonData;                                        // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveCompendiumButtonWidget_SetButtonVisual) == 0x000008, "Wrong alignment on CoreArchiveCompendiumButtonWidget_SetButtonVisual");
static_assert(sizeof(CoreArchiveCompendiumButtonWidget_SetButtonVisual) == 0x000078, "Wrong size on CoreArchiveCompendiumButtonWidget_SetButtonVisual");
static_assert(offsetof(CoreArchiveCompendiumButtonWidget_SetButtonVisual, buttonData) == 0x000000, "Member 'CoreArchiveCompendiumButtonWidget_SetButtonVisual::buttonData' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetGhostStory
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveCompendiumButtonWidget_SetGhostStory final
{
public:
	bool                                          isGhostStory;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveCompendiumButtonWidget_SetGhostStory) == 0x000001, "Wrong alignment on CoreArchiveCompendiumButtonWidget_SetGhostStory");
static_assert(sizeof(CoreArchiveCompendiumButtonWidget_SetGhostStory) == 0x000001, "Wrong size on CoreArchiveCompendiumButtonWidget_SetGhostStory");
static_assert(offsetof(CoreArchiveCompendiumButtonWidget_SetGhostStory, isGhostStory) == 0x000000, "Member 'CoreArchiveCompendiumButtonWidget_SetGhostStory::isGhostStory' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetLevelProgressionVisual
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual final
{
public:
	int32                                         buttonLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArchivesStoryLevelStatus                     levelStatus;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual) == 0x000004, "Wrong alignment on CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual");
static_assert(sizeof(CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual) == 0x000008, "Wrong size on CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual");
static_assert(offsetof(CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual, buttonLevel) == 0x000000, "Member 'CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual::buttonLevel' has a wrong offset!");
static_assert(offsetof(CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual, levelStatus) == 0x000004, "Member 'CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual::levelStatus' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.CreateAndAddButtonToGrid
// 0x0010 (0x0010 - 0x0000)
struct CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreArchiveCompendiumButtonWidget*     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid) == 0x000008, "Wrong alignment on CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid");
static_assert(sizeof(CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid) == 0x000010, "Wrong size on CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid");
static_assert(offsetof(CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid, Index_0) == 0x000000, "Member 'CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid::Index_0' has a wrong offset!");
static_assert(offsetof(CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid, ReturnValue) == 0x000008, "Member 'CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.CreateGhostStories
// 0x0004 (0x0004 - 0x0000)
struct CoreArchiveCompendiumWidget_CreateGhostStories final
{
public:
	int32                                         currentStoryNum;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveCompendiumWidget_CreateGhostStories) == 0x000004, "Wrong alignment on CoreArchiveCompendiumWidget_CreateGhostStories");
static_assert(sizeof(CoreArchiveCompendiumWidget_CreateGhostStories) == 0x000004, "Wrong size on CoreArchiveCompendiumWidget_CreateGhostStories");
static_assert(offsetof(CoreArchiveCompendiumWidget_CreateGhostStories, currentStoryNum) == 0x000000, "Member 'CoreArchiveCompendiumWidget_CreateGhostStories::currentStoryNum' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.OnPastStoryClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveCompendiumWidget_OnPastStoryClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveCompendiumWidget_OnPastStoryClicked) == 0x000008, "Wrong alignment on CoreArchiveCompendiumWidget_OnPastStoryClicked");
static_assert(sizeof(CoreArchiveCompendiumWidget_OnPastStoryClicked) == 0x000008, "Wrong size on CoreArchiveCompendiumWidget_OnPastStoryClicked");
static_assert(offsetof(CoreArchiveCompendiumWidget_OnPastStoryClicked, Button) == 0x000000, "Member 'CoreArchiveCompendiumWidget_OnPastStoryClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.SetGridSlot
// 0x0010 (0x0010 - 0x0000)
struct CoreArchiveCompendiumWidget_SetGridSlot final
{
public:
	class UGridSlot*                              GridSlot;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveCompendiumWidget_SetGridSlot) == 0x000008, "Wrong alignment on CoreArchiveCompendiumWidget_SetGridSlot");
static_assert(sizeof(CoreArchiveCompendiumWidget_SetGridSlot) == 0x000010, "Wrong size on CoreArchiveCompendiumWidget_SetGridSlot");
static_assert(offsetof(CoreArchiveCompendiumWidget_SetGridSlot, GridSlot) == 0x000000, "Member 'CoreArchiveCompendiumWidget_SetGridSlot::GridSlot' has a wrong offset!");
static_assert(offsetof(CoreArchiveCompendiumWidget_SetGridSlot, Index_0) == 0x000008, "Member 'CoreArchiveCompendiumWidget_SetGridSlot::Index_0' has a wrong offset!");

// Function DBDUIViewsCore.LabelTooltipWidget.SetTooltipData
// 0x0018 (0x0018 - 0x0000)
struct LabelTooltipWidget_SetTooltipData final
{
public:
	class FText                                   labelText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LabelTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on LabelTooltipWidget_SetTooltipData");
static_assert(sizeof(LabelTooltipWidget_SetTooltipData) == 0x000018, "Wrong size on LabelTooltipWidget_SetTooltipData");
static_assert(offsetof(LabelTooltipWidget_SetTooltipData, labelText) == 0x000000, "Member 'LabelTooltipWidget_SetTooltipData::labelText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.OnVoiceOverAutoPlay
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay final
{
public:
	bool                                          autoplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay) == 0x000001, "Wrong alignment on CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay");
static_assert(sizeof(CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay) == 0x000001, "Wrong size on CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay, autoplay) == 0x000000, "Member 'CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay::autoplay' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetData
// 0x0080 (0x0080 - 0x0000)
struct CoreArchiveJournalImageViewerWidget_SetData final
{
public:
	struct FArchivesVignetteEntryViewData         Data;                                              // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          hasTitle;                                          // 0x0078(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasDescription;                                    // 0x0079(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveJournalImageViewerWidget_SetData) == 0x000008, "Wrong alignment on CoreArchiveJournalImageViewerWidget_SetData");
static_assert(sizeof(CoreArchiveJournalImageViewerWidget_SetData) == 0x000080, "Wrong size on CoreArchiveJournalImageViewerWidget_SetData");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetData, Data) == 0x000000, "Member 'CoreArchiveJournalImageViewerWidget_SetData::Data' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetData, hasTitle) == 0x000078, "Member 'CoreArchiveJournalImageViewerWidget_SetData::hasTitle' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetData, hasDescription) == 0x000079, "Member 'CoreArchiveJournalImageViewerWidget_SetData::hasDescription' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetScrollData
// 0x0018 (0x0018 - 0x0000)
struct CoreArchiveJournalImageViewerWidget_SetScrollData final
{
public:
	class FText                                   journalEntryScrollPromptText;                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalImageViewerWidget_SetScrollData) == 0x000008, "Wrong alignment on CoreArchiveJournalImageViewerWidget_SetScrollData");
static_assert(sizeof(CoreArchiveJournalImageViewerWidget_SetScrollData) == 0x000018, "Wrong size on CoreArchiveJournalImageViewerWidget_SetScrollData");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetScrollData, journalEntryScrollPromptText) == 0x000000, "Member 'CoreArchiveJournalImageViewerWidget_SetScrollData::journalEntryScrollPromptText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetTextVisibilityInputText
// 0x0030 (0x0030 - 0x0000)
struct CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText final
{
public:
	class FText                                   displayText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   hideText;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText) == 0x000008, "Wrong alignment on CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText");
static_assert(sizeof(CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText) == 0x000030, "Wrong size on CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText, displayText) == 0x000000, "Member 'CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText::displayText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText, hideText) == 0x000018, "Member 'CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText::hideText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetVoiceOverText
// 0x0048 (0x0048 - 0x0000)
struct CoreArchiveJournalImageViewerWidget_SetVoiceOverText final
{
public:
	class FText                                   playVoiceOverText;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   stopVoiceOverText;                                 // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   autoplayVoiceOverText;                             // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalImageViewerWidget_SetVoiceOverText) == 0x000008, "Wrong alignment on CoreArchiveJournalImageViewerWidget_SetVoiceOverText");
static_assert(sizeof(CoreArchiveJournalImageViewerWidget_SetVoiceOverText) == 0x000048, "Wrong size on CoreArchiveJournalImageViewerWidget_SetVoiceOverText");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetVoiceOverText, playVoiceOverText) == 0x000000, "Member 'CoreArchiveJournalImageViewerWidget_SetVoiceOverText::playVoiceOverText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetVoiceOverText, stopVoiceOverText) == 0x000018, "Member 'CoreArchiveJournalImageViewerWidget_SetVoiceOverText::stopVoiceOverText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetVoiceOverText, autoplayVoiceOverText) == 0x000030, "Member 'CoreArchiveJournalImageViewerWidget_SetVoiceOverText::autoplayVoiceOverText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.InitializeArrow
// 0x0010 (0x0010 - 0x0000)
struct CoreArchiveJournalWidget_InitializeArrow final
{
public:
	class UCoreInputSwitcherWidget*               arrowWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveJournalWidget_InitializeArrow) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_InitializeArrow");
static_assert(sizeof(CoreArchiveJournalWidget_InitializeArrow) == 0x000010, "Wrong size on CoreArchiveJournalWidget_InitializeArrow");
static_assert(offsetof(CoreArchiveJournalWidget_InitializeArrow, arrowWidget) == 0x000000, "Member 'CoreArchiveJournalWidget_InitializeArrow::arrowWidget' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_InitializeArrow, Active) == 0x000008, "Member 'CoreArchiveJournalWidget_InitializeArrow::Active' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnRewardImageLoaded
// 0x0078 (0x0078 - 0x0000)
struct CoreArchiveJournalWidget_OnRewardImageLoaded final
{
public:
	TSoftObjectPtr<class UTexture2D>              LoadedTexture;                                     // 0x0000(0x0038)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TitleText;                                         // 0x0040(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   descriptionText;                                   // 0x0058(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         textureOffset;                                     // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveJournalWidget_OnRewardImageLoaded) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_OnRewardImageLoaded");
static_assert(sizeof(CoreArchiveJournalWidget_OnRewardImageLoaded) == 0x000078, "Wrong size on CoreArchiveJournalWidget_OnRewardImageLoaded");
static_assert(offsetof(CoreArchiveJournalWidget_OnRewardImageLoaded, LoadedTexture) == 0x000000, "Member 'CoreArchiveJournalWidget_OnRewardImageLoaded::LoadedTexture' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_OnRewardImageLoaded, Success) == 0x000038, "Member 'CoreArchiveJournalWidget_OnRewardImageLoaded::Success' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_OnRewardImageLoaded, TitleText) == 0x000040, "Member 'CoreArchiveJournalWidget_OnRewardImageLoaded::TitleText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_OnRewardImageLoaded, descriptionText) == 0x000058, "Member 'CoreArchiveJournalWidget_OnRewardImageLoaded::descriptionText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_OnRewardImageLoaded, textureOffset) == 0x000070, "Member 'CoreArchiveJournalWidget_OnRewardImageLoaded::textureOffset' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteButtonSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveJournalWidget_OnVignetteButtonSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_OnVignetteButtonSelected) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_OnVignetteButtonSelected");
static_assert(sizeof(CoreArchiveJournalWidget_OnVignetteButtonSelected) == 0x000008, "Wrong size on CoreArchiveJournalWidget_OnVignetteButtonSelected");
static_assert(offsetof(CoreArchiveJournalWidget_OnVignetteButtonSelected, selectedButton) == 0x000000, "Member 'CoreArchiveJournalWidget_OnVignetteButtonSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteCinematicSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveJournalWidget_OnVignetteCinematicSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_OnVignetteCinematicSelected) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_OnVignetteCinematicSelected");
static_assert(sizeof(CoreArchiveJournalWidget_OnVignetteCinematicSelected) == 0x000008, "Wrong size on CoreArchiveJournalWidget_OnVignetteCinematicSelected");
static_assert(offsetof(CoreArchiveJournalWidget_OnVignetteCinematicSelected, selectedButton) == 0x000000, "Member 'CoreArchiveJournalWidget_OnVignetteCinematicSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteEntrySelected
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveJournalWidget_OnVignetteEntrySelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_OnVignetteEntrySelected) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_OnVignetteEntrySelected");
static_assert(sizeof(CoreArchiveJournalWidget_OnVignetteEntrySelected) == 0x000008, "Wrong size on CoreArchiveJournalWidget_OnVignetteEntrySelected");
static_assert(offsetof(CoreArchiveJournalWidget_OnVignetteEntrySelected, selectedButton) == 0x000000, "Member 'CoreArchiveJournalWidget_OnVignetteEntrySelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVoiceOverAutoPlay
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveJournalWidget_OnVoiceOverAutoPlay final
{
public:
	bool                                          autoplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_OnVoiceOverAutoPlay) == 0x000001, "Wrong alignment on CoreArchiveJournalWidget_OnVoiceOverAutoPlay");
static_assert(sizeof(CoreArchiveJournalWidget_OnVoiceOverAutoPlay) == 0x000001, "Wrong size on CoreArchiveJournalWidget_OnVoiceOverAutoPlay");
static_assert(offsetof(CoreArchiveJournalWidget_OnVoiceOverAutoPlay, autoplay) == 0x000000, "Member 'CoreArchiveJournalWidget_OnVoiceOverAutoPlay::autoplay' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetBottomFogOffset
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveJournalWidget_SetBottomFogOffset final
{
public:
	bool                                          HasAudio;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_SetBottomFogOffset) == 0x000001, "Wrong alignment on CoreArchiveJournalWidget_SetBottomFogOffset");
static_assert(sizeof(CoreArchiveJournalWidget_SetBottomFogOffset) == 0x000001, "Wrong size on CoreArchiveJournalWidget_SetBottomFogOffset");
static_assert(offsetof(CoreArchiveJournalWidget_SetBottomFogOffset, HasAudio) == 0x000000, "Member 'CoreArchiveJournalWidget_SetBottomFogOffset::HasAudio' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetEntryImage
// 0x0070 (0x0070 - 0x0000)
struct CoreArchiveJournalWidget_SetEntryImage final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   descriptionText;                                   // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RewardImage;                                       // 0x0030(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         textureOffset;                                     // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveJournalWidget_SetEntryImage) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_SetEntryImage");
static_assert(sizeof(CoreArchiveJournalWidget_SetEntryImage) == 0x000070, "Wrong size on CoreArchiveJournalWidget_SetEntryImage");
static_assert(offsetof(CoreArchiveJournalWidget_SetEntryImage, TitleText) == 0x000000, "Member 'CoreArchiveJournalWidget_SetEntryImage::TitleText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetEntryImage, descriptionText) == 0x000018, "Member 'CoreArchiveJournalWidget_SetEntryImage::descriptionText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetEntryImage, RewardImage) == 0x000030, "Member 'CoreArchiveJournalWidget_SetEntryImage::RewardImage' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetEntryImage, textureOffset) == 0x000068, "Member 'CoreArchiveJournalWidget_SetEntryImage::textureOffset' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetEntryText
// 0x0030 (0x0030 - 0x0000)
struct CoreArchiveJournalWidget_SetEntryText final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   descriptionText;                                   // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_SetEntryText) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_SetEntryText");
static_assert(sizeof(CoreArchiveJournalWidget_SetEntryText) == 0x000030, "Wrong size on CoreArchiveJournalWidget_SetEntryText");
static_assert(offsetof(CoreArchiveJournalWidget_SetEntryText, TitleText) == 0x000000, "Member 'CoreArchiveJournalWidget_SetEntryText::TitleText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetEntryText, descriptionText) == 0x000018, "Member 'CoreArchiveJournalWidget_SetEntryText::descriptionText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetTopFogOffset
// 0x0002 (0x0002 - 0x0000)
struct CoreArchiveJournalWidget_SetTopFogOffset final
{
public:
	bool                                          hasTitle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasDescription;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_SetTopFogOffset) == 0x000001, "Wrong alignment on CoreArchiveJournalWidget_SetTopFogOffset");
static_assert(sizeof(CoreArchiveJournalWidget_SetTopFogOffset) == 0x000002, "Wrong size on CoreArchiveJournalWidget_SetTopFogOffset");
static_assert(offsetof(CoreArchiveJournalWidget_SetTopFogOffset, hasTitle) == 0x000000, "Member 'CoreArchiveJournalWidget_SetTopFogOffset::hasTitle' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetTopFogOffset, hasDescription) == 0x000001, "Member 'CoreArchiveJournalWidget_SetTopFogOffset::hasDescription' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVignetteText
// 0x0030 (0x0030 - 0x0000)
struct CoreArchiveJournalWidget_SetVignetteText final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   SubtitleText;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_SetVignetteText) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_SetVignetteText");
static_assert(sizeof(CoreArchiveJournalWidget_SetVignetteText) == 0x000030, "Wrong size on CoreArchiveJournalWidget_SetVignetteText");
static_assert(offsetof(CoreArchiveJournalWidget_SetVignetteText, TitleText) == 0x000000, "Member 'CoreArchiveJournalWidget_SetVignetteText::TitleText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetVignetteText, SubtitleText) == 0x000018, "Member 'CoreArchiveJournalWidget_SetVignetteText::SubtitleText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVoiceOverButtonsVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility) == 0x000001, "Wrong alignment on CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility");
static_assert(sizeof(CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility) == 0x000001, "Wrong size on CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility");
static_assert(offsetof(CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility, IsVisible_0) == 0x000000, "Member 'CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVoiceOverText
// 0x0048 (0x0048 - 0x0000)
struct CoreArchiveJournalWidget_SetVoiceOverText final
{
public:
	class FText                                   playVoiceOverText;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   stopVoiceOverText;                                 // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   autoplayVoiceOverText;                             // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_SetVoiceOverText) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_SetVoiceOverText");
static_assert(sizeof(CoreArchiveJournalWidget_SetVoiceOverText) == 0x000048, "Wrong size on CoreArchiveJournalWidget_SetVoiceOverText");
static_assert(offsetof(CoreArchiveJournalWidget_SetVoiceOverText, playVoiceOverText) == 0x000000, "Member 'CoreArchiveJournalWidget_SetVoiceOverText::playVoiceOverText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetVoiceOverText, stopVoiceOverText) == 0x000018, "Member 'CoreArchiveJournalWidget_SetVoiceOverText::stopVoiceOverText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetVoiceOverText, autoplayVoiceOverText) == 0x000030, "Member 'CoreArchiveJournalWidget_SetVoiceOverText::autoplayVoiceOverText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveLevelProgressionWidget.OnStoryLevelSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveLevelProgressionWidget_OnStoryLevelSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveLevelProgressionWidget_OnStoryLevelSelected) == 0x000008, "Wrong alignment on CoreArchiveLevelProgressionWidget_OnStoryLevelSelected");
static_assert(sizeof(CoreArchiveLevelProgressionWidget_OnStoryLevelSelected) == 0x000008, "Wrong size on CoreArchiveLevelProgressionWidget_OnStoryLevelSelected");
static_assert(offsetof(CoreArchiveLevelProgressionWidget_OnStoryLevelSelected, selectedButton) == 0x000000, "Member 'CoreArchiveLevelProgressionWidget_OnStoryLevelSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CorePrestigeTooltipWidget.SetTooltipData
// 0x0008 (0x0008 - 0x0000)
struct CorePrestigeTooltipWidget_SetTooltipData final
{
public:
	struct FPrestigeViewData                      Data;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePrestigeTooltipWidget_SetTooltipData) == 0x000004, "Wrong alignment on CorePrestigeTooltipWidget_SetTooltipData");
static_assert(sizeof(CorePrestigeTooltipWidget_SetTooltipData) == 0x000008, "Wrong size on CorePrestigeTooltipWidget_SetTooltipData");
static_assert(offsetof(CorePrestigeTooltipWidget_SetTooltipData, Data) == 0x000000, "Member 'CorePrestigeTooltipWidget_SetTooltipData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveObjectiveWidget.SetData
// 0x0028 (0x0028 - 0x0000)
struct CoreArchiveObjectiveWidget_SetData final
{
public:
	struct FArchiveNodeObjectiveViewData          objectiveData;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveObjectiveWidget_SetData) == 0x000008, "Wrong alignment on CoreArchiveObjectiveWidget_SetData");
static_assert(sizeof(CoreArchiveObjectiveWidget_SetData) == 0x000028, "Wrong size on CoreArchiveObjectiveWidget_SetData");
static_assert(offsetof(CoreArchiveObjectiveWidget_SetData, objectiveData) == 0x000000, "Member 'CoreArchiveObjectiveWidget_SetData::objectiveData' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchivePassBannerWidget.SetData
// 0x0158 (0x0158 - 0x0000)
struct CoreArchivePassBannerWidget_SetData final
{
public:
	struct FStoreArchivePassViewData              Data;                                              // 0x0000(0x0158)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchivePassBannerWidget_SetData) == 0x000008, "Wrong alignment on CoreArchivePassBannerWidget_SetData");
static_assert(sizeof(CoreArchivePassBannerWidget_SetData) == 0x000158, "Wrong size on CoreArchivePassBannerWidget_SetData");
static_assert(offsetof(CoreArchivePassBannerWidget_SetData, Data) == 0x000000, "Member 'CoreArchivePassBannerWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyLoadoutWidget.OnPresetClicked
// 0x0004 (0x0004 - 0x0000)
struct CoreLobbyLoadoutWidget_OnPresetClicked final
{
public:
	int32                                         SelectedPresetId;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyLoadoutWidget_OnPresetClicked) == 0x000004, "Wrong alignment on CoreLobbyLoadoutWidget_OnPresetClicked");
static_assert(sizeof(CoreLobbyLoadoutWidget_OnPresetClicked) == 0x000004, "Wrong size on CoreLobbyLoadoutWidget_OnPresetClicked");
static_assert(offsetof(CoreLobbyLoadoutWidget_OnPresetClicked, SelectedPresetId) == 0x000000, "Member 'CoreLobbyLoadoutWidget_OnPresetClicked::SelectedPresetId' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchivePassPurchasePopupWidget.OnPurchaseBundleClicked
// 0x0001 (0x0001 - 0x0000)
struct CoreArchivePassPurchasePopupWidget_OnPurchaseBundleClicked final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchivePassPurchasePopupWidget_OnPurchaseBundleClicked) == 0x000001, "Wrong alignment on CoreArchivePassPurchasePopupWidget_OnPurchaseBundleClicked");
static_assert(sizeof(CoreArchivePassPurchasePopupWidget_OnPurchaseBundleClicked) == 0x000001, "Wrong size on CoreArchivePassPurchasePopupWidget_OnPurchaseBundleClicked");
static_assert(offsetof(CoreArchivePassPurchasePopupWidget_OnPurchaseBundleClicked, currencyType) == 0x000000, "Member 'CoreArchivePassPurchasePopupWidget_OnPurchaseBundleClicked::currencyType' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchivePassPurchasePopupWidget.OnPurchaseClicked
// 0x0001 (0x0001 - 0x0000)
struct CoreArchivePassPurchasePopupWidget_OnPurchaseClicked final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchivePassPurchasePopupWidget_OnPurchaseClicked) == 0x000001, "Wrong alignment on CoreArchivePassPurchasePopupWidget_OnPurchaseClicked");
static_assert(sizeof(CoreArchivePassPurchasePopupWidget_OnPurchaseClicked) == 0x000001, "Wrong size on CoreArchivePassPurchasePopupWidget_OnPurchaseClicked");
static_assert(offsetof(CoreArchivePassPurchasePopupWidget_OnPurchaseClicked, currencyType) == 0x000000, "Member 'CoreArchivePassPurchasePopupWidget_OnPurchaseClicked::currencyType' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.BindToNode
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestMapWidget_BindToNode final
{
public:
	class UCoreArchiveQuestNodeWidget*            Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_BindToNode) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_BindToNode");
static_assert(sizeof(CoreArchiveQuestMapWidget_BindToNode) == 0x000008, "Wrong size on CoreArchiveQuestMapWidget_BindToNode");
static_assert(offsetof(CoreArchiveQuestMapWidget_BindToNode, Node) == 0x000000, "Member 'CoreArchiveQuestMapWidget_BindToNode::Node' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.BindToPath
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestMapWidget_BindToPath final
{
public:
	class UCoreArchiveQuestPathWidget*            Path;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_BindToPath) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_BindToPath");
static_assert(sizeof(CoreArchiveQuestMapWidget_BindToPath) == 0x000008, "Wrong size on CoreArchiveQuestMapWidget_BindToPath");
static_assert(offsetof(CoreArchiveQuestMapWidget_BindToPath, Path) == 0x000000, "Member 'CoreArchiveQuestMapWidget_BindToPath::Path' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestMapWidget_OnNodeClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_OnNodeClicked) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_OnNodeClicked");
static_assert(sizeof(CoreArchiveQuestMapWidget_OnNodeClicked) == 0x000008, "Wrong size on CoreArchiveQuestMapWidget_OnNodeClicked");
static_assert(offsetof(CoreArchiveQuestMapWidget_OnNodeClicked, buttonTarget) == 0x000000, "Member 'CoreArchiveQuestMapWidget_OnNodeClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestMapWidget_OnNodeHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_OnNodeHovered) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_OnNodeHovered");
static_assert(sizeof(CoreArchiveQuestMapWidget_OnNodeHovered) == 0x000008, "Wrong size on CoreArchiveQuestMapWidget_OnNodeHovered");
static_assert(offsetof(CoreArchiveQuestMapWidget_OnNodeHovered, buttonTarget) == 0x000000, "Member 'CoreArchiveQuestMapWidget_OnNodeHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestMapWidget_OnNodeUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_OnNodeUnhovered) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_OnNodeUnhovered");
static_assert(sizeof(CoreArchiveQuestMapWidget_OnNodeUnhovered) == 0x000008, "Wrong size on CoreArchiveQuestMapWidget_OnNodeUnhovered");
static_assert(offsetof(CoreArchiveQuestMapWidget_OnNodeUnhovered, buttonTarget) == 0x000000, "Member 'CoreArchiveQuestMapWidget_OnNodeUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.SetupNode
// 0x00F8 (0x00F8 - 0x0000)
struct CoreArchiveQuestMapWidget_SetupNode final
{
public:
	struct FArchiveNodeGraphViewData              NodeData;                                          // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_SetupNode) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_SetupNode");
static_assert(sizeof(CoreArchiveQuestMapWidget_SetupNode) == 0x0000F8, "Wrong size on CoreArchiveQuestMapWidget_SetupNode");
static_assert(offsetof(CoreArchiveQuestMapWidget_SetupNode, NodeData) == 0x000000, "Member 'CoreArchiveQuestMapWidget_SetupNode::NodeData' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.SetupPath
// 0x0040 (0x0040 - 0x0000)
struct CoreArchiveQuestMapWidget_SetupPath final
{
public:
	struct FArchiveMapPathViewData                PathData;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_SetupPath) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_SetupPath");
static_assert(sizeof(CoreArchiveQuestMapWidget_SetupPath) == 0x000040, "Wrong size on CoreArchiveQuestMapWidget_SetupPath");
static_assert(offsetof(CoreArchiveQuestMapWidget_SetupPath, PathData) == 0x000000, "Member 'CoreArchiveQuestMapWidget_SetupPath::PathData' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.UnbindFromNode
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestMapWidget_UnbindFromNode final
{
public:
	class UCoreArchiveQuestNodeWidget*            Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_UnbindFromNode) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_UnbindFromNode");
static_assert(sizeof(CoreArchiveQuestMapWidget_UnbindFromNode) == 0x000008, "Wrong size on CoreArchiveQuestMapWidget_UnbindFromNode");
static_assert(offsetof(CoreArchiveQuestMapWidget_UnbindFromNode, Node) == 0x000000, "Member 'CoreArchiveQuestMapWidget_UnbindFromNode::Node' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.UnbindFromPath
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestMapWidget_UnbindFromPath final
{
public:
	class UCoreArchiveQuestPathWidget*            Path;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_UnbindFromPath) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_UnbindFromPath");
static_assert(sizeof(CoreArchiveQuestMapWidget_UnbindFromPath) == 0x000008, "Wrong size on CoreArchiveQuestMapWidget_UnbindFromPath");
static_assert(offsetof(CoreArchiveQuestMapWidget_UnbindFromPath, Path) == 0x000000, "Member 'CoreArchiveQuestMapWidget_UnbindFromPath::Path' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.OnButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreButtonSelector_OnButtonClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_OnButtonClicked) == 0x000008, "Wrong alignment on CoreButtonSelector_OnButtonClicked");
static_assert(sizeof(CoreButtonSelector_OnButtonClicked) == 0x000008, "Wrong size on CoreButtonSelector_OnButtonClicked");
static_assert(offsetof(CoreButtonSelector_OnButtonClicked, Button) == 0x000000, "Member 'CoreButtonSelector_OnButtonClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.OnButtonSelectedAgain
// 0x0008 (0x0008 - 0x0000)
struct CoreButtonSelector_OnButtonSelectedAgain final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_OnButtonSelectedAgain) == 0x000008, "Wrong alignment on CoreButtonSelector_OnButtonSelectedAgain");
static_assert(sizeof(CoreButtonSelector_OnButtonSelectedAgain) == 0x000008, "Wrong size on CoreButtonSelector_OnButtonSelectedAgain");
static_assert(offsetof(CoreButtonSelector_OnButtonSelectedAgain, selectedButton) == 0x000000, "Member 'CoreButtonSelector_OnButtonSelectedAgain::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.OnButtonSelectedChanged
// 0x0010 (0x0010 - 0x0000)
struct CoreButtonSelector_OnButtonSelectedChanged final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreButtonSelector_OnButtonSelectedChanged) == 0x000008, "Wrong alignment on CoreButtonSelector_OnButtonSelectedChanged");
static_assert(sizeof(CoreButtonSelector_OnButtonSelectedChanged) == 0x000010, "Wrong size on CoreButtonSelector_OnButtonSelectedChanged");
static_assert(offsetof(CoreButtonSelector_OnButtonSelectedChanged, selectedButton) == 0x000000, "Member 'CoreButtonSelector_OnButtonSelectedChanged::selectedButton' has a wrong offset!");
static_assert(offsetof(CoreButtonSelector_OnButtonSelectedChanged, IsSelected) == 0x000008, "Member 'CoreButtonSelector_OnButtonSelectedChanged::IsSelected' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.Select
// 0x0010 (0x0010 - 0x0000)
struct CoreButtonSelector_Select final
{
public:
	class UCoreSelectableButtonWidget*            buttonToSelect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          performAction;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreButtonSelector_Select) == 0x000008, "Wrong alignment on CoreButtonSelector_Select");
static_assert(sizeof(CoreButtonSelector_Select) == 0x000010, "Wrong size on CoreButtonSelector_Select");
static_assert(offsetof(CoreButtonSelector_Select, buttonToSelect) == 0x000000, "Member 'CoreButtonSelector_Select::buttonToSelect' has a wrong offset!");
static_assert(offsetof(CoreButtonSelector_Select, performAction) == 0x000008, "Member 'CoreButtonSelector_Select::performAction' has a wrong offset!");
static_assert(offsetof(CoreButtonSelector_Select, ReturnValue) == 0x000009, "Member 'CoreButtonSelector_Select::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.SelectAtIndex
// 0x0008 (0x0008 - 0x0000)
struct CoreButtonSelector_SelectAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          performAction;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreButtonSelector_SelectAtIndex) == 0x000004, "Wrong alignment on CoreButtonSelector_SelectAtIndex");
static_assert(sizeof(CoreButtonSelector_SelectAtIndex) == 0x000008, "Wrong size on CoreButtonSelector_SelectAtIndex");
static_assert(offsetof(CoreButtonSelector_SelectAtIndex, Index_0) == 0x000000, "Member 'CoreButtonSelector_SelectAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(CoreButtonSelector_SelectAtIndex, performAction) == 0x000004, "Member 'CoreButtonSelector_SelectAtIndex::performAction' has a wrong offset!");
static_assert(offsetof(CoreButtonSelector_SelectAtIndex, ReturnValue) == 0x000005, "Member 'CoreButtonSelector_SelectAtIndex::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.SelectNext
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonSelector_SelectNext final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_SelectNext) == 0x000001, "Wrong alignment on CoreButtonSelector_SelectNext");
static_assert(sizeof(CoreButtonSelector_SelectNext) == 0x000001, "Wrong size on CoreButtonSelector_SelectNext");
static_assert(offsetof(CoreButtonSelector_SelectNext, ReturnValue) == 0x000000, "Member 'CoreButtonSelector_SelectNext::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.SelectPrevious
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonSelector_SelectPrevious final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_SelectPrevious) == 0x000001, "Wrong alignment on CoreButtonSelector_SelectPrevious");
static_assert(sizeof(CoreButtonSelector_SelectPrevious) == 0x000001, "Wrong size on CoreButtonSelector_SelectPrevious");
static_assert(offsetof(CoreButtonSelector_SelectPrevious, ReturnValue) == 0x000000, "Member 'CoreButtonSelector_SelectPrevious::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.SetAllEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonSelector_SetAllEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_SetAllEnabled) == 0x000001, "Wrong alignment on CoreButtonSelector_SetAllEnabled");
static_assert(sizeof(CoreButtonSelector_SetAllEnabled) == 0x000001, "Wrong size on CoreButtonSelector_SetAllEnabled");
static_assert(offsetof(CoreButtonSelector_SetAllEnabled, Enabled) == 0x000000, "Member 'CoreButtonSelector_SetAllEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.SetInputsEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonSelector_SetInputsEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_SetInputsEnabled) == 0x000001, "Wrong alignment on CoreButtonSelector_SetInputsEnabled");
static_assert(sizeof(CoreButtonSelector_SetInputsEnabled) == 0x000001, "Wrong size on CoreButtonSelector_SetInputsEnabled");
static_assert(offsetof(CoreButtonSelector_SetInputsEnabled, Enabled) == 0x000000, "Member 'CoreButtonSelector_SetInputsEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.UnselectCurrent
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonSelector_UnselectCurrent final
{
public:
	bool                                          performAction;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_UnselectCurrent) == 0x000001, "Wrong alignment on CoreButtonSelector_UnselectCurrent");
static_assert(sizeof(CoreButtonSelector_UnselectCurrent) == 0x000001, "Wrong size on CoreButtonSelector_UnselectCurrent");
static_assert(offsetof(CoreButtonSelector_UnselectCurrent, performAction) == 0x000000, "Member 'CoreButtonSelector_UnselectCurrent::performAction' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.GetInputsEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonSelector_GetInputsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_GetInputsEnabled) == 0x000001, "Wrong alignment on CoreButtonSelector_GetInputsEnabled");
static_assert(sizeof(CoreButtonSelector_GetInputsEnabled) == 0x000001, "Wrong size on CoreButtonSelector_GetInputsEnabled");
static_assert(offsetof(CoreButtonSelector_GetInputsEnabled, ReturnValue) == 0x000000, "Member 'CoreButtonSelector_GetInputsEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.HasSelection
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonSelector_HasSelection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_HasSelection) == 0x000001, "Wrong alignment on CoreButtonSelector_HasSelection");
static_assert(sizeof(CoreButtonSelector_HasSelection) == 0x000001, "Wrong size on CoreButtonSelector_HasSelection");
static_assert(offsetof(CoreButtonSelector_HasSelection, ReturnValue) == 0x000000, "Member 'CoreButtonSelector_HasSelection::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePresetContainerWidget.BroadcastSelectedPreset
// 0x0008 (0x0008 - 0x0000)
struct CorePresetContainerWidget_BroadcastSelectedPreset final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresetContainerWidget_BroadcastSelectedPreset) == 0x000008, "Wrong alignment on CorePresetContainerWidget_BroadcastSelectedPreset");
static_assert(sizeof(CorePresetContainerWidget_BroadcastSelectedPreset) == 0x000008, "Wrong size on CorePresetContainerWidget_BroadcastSelectedPreset");
static_assert(offsetof(CorePresetContainerWidget_BroadcastSelectedPreset, selectedButton) == 0x000000, "Member 'CorePresetContainerWidget_BroadcastSelectedPreset::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CorePresetContainerWidget.SetPresetData
// 0x0018 (0x0018 - 0x0000)
struct CorePresetContainerWidget_SetPresetData final
{
public:
	TArray<int32>                                 presetData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         selectedPreset;                                    // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePresetContainerWidget_SetPresetData) == 0x000008, "Wrong alignment on CorePresetContainerWidget_SetPresetData");
static_assert(sizeof(CorePresetContainerWidget_SetPresetData) == 0x000018, "Wrong size on CorePresetContainerWidget_SetPresetData");
static_assert(offsetof(CorePresetContainerWidget_SetPresetData, presetData) == 0x000000, "Member 'CorePresetContainerWidget_SetPresetData::presetData' has a wrong offset!");
static_assert(offsetof(CorePresetContainerWidget_SetPresetData, selectedPreset) == 0x000010, "Member 'CorePresetContainerWidget_SetPresetData::selectedPreset' has a wrong offset!");

// Function DBDUIViewsCore.CorePresetContainerWidget.GetSelectedPreset
// 0x0008 (0x0008 - 0x0000)
struct CorePresetContainerWidget_GetSelectedPreset final
{
public:
	class UCorePresetWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresetContainerWidget_GetSelectedPreset) == 0x000008, "Wrong alignment on CorePresetContainerWidget_GetSelectedPreset");
static_assert(sizeof(CorePresetContainerWidget_GetSelectedPreset) == 0x000008, "Wrong size on CorePresetContainerWidget_GetSelectedPreset");
static_assert(offsetof(CorePresetContainerWidget_GetSelectedPreset, ReturnValue) == 0x000000, "Member 'CorePresetContainerWidget_GetSelectedPreset::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.HandleStatusChange
// 0x0002 (0x0002 - 0x0000)
struct CoreArchiveQuestNodeWidget_HandleStatusChange final
{
public:
	EStoryNodeState                               prevStatus;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStoryNodeState                               currentStatus;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_HandleStatusChange) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_HandleStatusChange");
static_assert(sizeof(CoreArchiveQuestNodeWidget_HandleStatusChange) == 0x000002, "Wrong size on CoreArchiveQuestNodeWidget_HandleStatusChange");
static_assert(offsetof(CoreArchiveQuestNodeWidget_HandleStatusChange, prevStatus) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_HandleStatusChange::prevStatus' has a wrong offset!");
static_assert(offsetof(CoreArchiveQuestNodeWidget_HandleStatusChange, currentStatus) == 0x000001, "Member 'CoreArchiveQuestNodeWidget_HandleStatusChange::currentStatus' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.InitNode
// 0x00D0 (0x00D0 - 0x0000)
struct CoreArchiveQuestNodeWidget_InitNode final
{
public:
	class FName                                   NodeId;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArchiveNodeViewData                   Data;                                              // 0x0010(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isChallengeReminderNode;                           // 0x00C8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveQuestNodeWidget_InitNode) == 0x000008, "Wrong alignment on CoreArchiveQuestNodeWidget_InitNode");
static_assert(sizeof(CoreArchiveQuestNodeWidget_InitNode) == 0x0000D0, "Wrong size on CoreArchiveQuestNodeWidget_InitNode");
static_assert(offsetof(CoreArchiveQuestNodeWidget_InitNode, NodeId) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_InitNode::NodeId' has a wrong offset!");
static_assert(offsetof(CoreArchiveQuestNodeWidget_InitNode, Data) == 0x000010, "Member 'CoreArchiveQuestNodeWidget_InitNode::Data' has a wrong offset!");
static_assert(offsetof(CoreArchiveQuestNodeWidget_InitNode, isChallengeReminderNode) == 0x0000C8, "Member 'CoreArchiveQuestNodeWidget_InitNode::isChallengeReminderNode' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.OnStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestNodeWidget_OnStatusChanged final
{
public:
	ENodeStatusChange                             nodeStatusChange;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_OnStatusChanged) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_OnStatusChanged");
static_assert(sizeof(CoreArchiveQuestNodeWidget_OnStatusChanged) == 0x000001, "Wrong size on CoreArchiveQuestNodeWidget_OnStatusChanged");
static_assert(offsetof(CoreArchiveQuestNodeWidget_OnStatusChanged, nodeStatusChange) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_OnStatusChanged::nodeStatusChange' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.SetCurrencyRewardBackground
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestNodeWidget_SetCurrencyRewardBackground final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_SetCurrencyRewardBackground) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_SetCurrencyRewardBackground");
static_assert(sizeof(CoreArchiveQuestNodeWidget_SetCurrencyRewardBackground) == 0x000001, "Wrong size on CoreArchiveQuestNodeWidget_SetCurrencyRewardBackground");
static_assert(offsetof(CoreArchiveQuestNodeWidget_SetCurrencyRewardBackground, currencyType) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_SetCurrencyRewardBackground::currencyType' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.SetCustomizationRewardRarity
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestNodeWidget_SetCustomizationRewardRarity final
{
public:
	EItemRarity                                   Rarity;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_SetCustomizationRewardRarity) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_SetCustomizationRewardRarity");
static_assert(sizeof(CoreArchiveQuestNodeWidget_SetCustomizationRewardRarity) == 0x000001, "Wrong size on CoreArchiveQuestNodeWidget_SetCustomizationRewardRarity");
static_assert(offsetof(CoreArchiveQuestNodeWidget_SetCustomizationRewardRarity, Rarity) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_SetCustomizationRewardRarity::Rarity' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.SetIcon
// 0x0040 (0x0040 - 0x0000)
struct CoreArchiveQuestNodeWidget_SetIcon final
{
public:
	bool                                          isReward;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              iconTexture;                                       // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_SetIcon) == 0x000008, "Wrong alignment on CoreArchiveQuestNodeWidget_SetIcon");
static_assert(sizeof(CoreArchiveQuestNodeWidget_SetIcon) == 0x000040, "Wrong size on CoreArchiveQuestNodeWidget_SetIcon");
static_assert(offsetof(CoreArchiveQuestNodeWidget_SetIcon, isReward) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_SetIcon::isReward' has a wrong offset!");
static_assert(offsetof(CoreArchiveQuestNodeWidget_SetIcon, iconTexture) == 0x000008, "Member 'CoreArchiveQuestNodeWidget_SetIcon::iconTexture' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.UpdateNode
// 0x00B8 (0x00B8 - 0x0000)
struct CoreArchiveQuestNodeWidget_UpdateNode final
{
public:
	struct FArchiveNodeViewData                   Data;                                              // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_UpdateNode) == 0x000008, "Wrong alignment on CoreArchiveQuestNodeWidget_UpdateNode");
static_assert(sizeof(CoreArchiveQuestNodeWidget_UpdateNode) == 0x0000B8, "Wrong size on CoreArchiveQuestNodeWidget_UpdateNode");
static_assert(offsetof(CoreArchiveQuestNodeWidget_UpdateNode, Data) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_UpdateNode::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.UpdateStoryIndicatorOpacity
// 0x0002 (0x0002 - 0x0000)
struct CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity final
{
public:
	bool                                          IsImageReward;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCompleted;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity");
static_assert(sizeof(CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity) == 0x000002, "Wrong size on CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity");
static_assert(offsetof(CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity, IsImageReward) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity::IsImageReward' has a wrong offset!");
static_assert(offsetof(CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity, IsCompleted) == 0x000001, "Member 'CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity::IsCompleted' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.IsSelectableNode
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestNodeWidget_IsSelectableNode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_IsSelectableNode) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_IsSelectableNode");
static_assert(sizeof(CoreArchiveQuestNodeWidget_IsSelectableNode) == 0x000001, "Wrong size on CoreArchiveQuestNodeWidget_IsSelectableNode");
static_assert(offsetof(CoreArchiveQuestNodeWidget_IsSelectableNode, ReturnValue) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_IsSelectableNode::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.IsValidNode
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestNodeWidget_IsValidNode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_IsValidNode) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_IsValidNode");
static_assert(sizeof(CoreArchiveQuestNodeWidget_IsValidNode) == 0x000001, "Wrong size on CoreArchiveQuestNodeWidget_IsValidNode");
static_assert(offsetof(CoreArchiveQuestNodeWidget_IsValidNode, ReturnValue) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_IsValidNode::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.NeedsChallengeReminderHoverAnimation
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation");
static_assert(sizeof(CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation) == 0x000001, "Wrong size on CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation");
static_assert(offsetof(CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation, ReturnValue) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.InitPath
// 0x0040 (0x0040 - 0x0000)
struct CoreArchiveQuestPathWidget_InitPath final
{
public:
	struct FArchiveMapPathViewData                Data;                                              // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestPathWidget_InitPath) == 0x000008, "Wrong alignment on CoreArchiveQuestPathWidget_InitPath");
static_assert(sizeof(CoreArchiveQuestPathWidget_InitPath) == 0x000040, "Wrong size on CoreArchiveQuestPathWidget_InitPath");
static_assert(offsetof(CoreArchiveQuestPathWidget_InitPath, Data) == 0x000000, "Member 'CoreArchiveQuestPathWidget_InitPath::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.SetVisualState
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestPathWidget_SetVisualState final
{
public:
	EArchivePathStatus                            pathStatus;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestPathWidget_SetVisualState) == 0x000001, "Wrong alignment on CoreArchiveQuestPathWidget_SetVisualState");
static_assert(sizeof(CoreArchiveQuestPathWidget_SetVisualState) == 0x000001, "Wrong size on CoreArchiveQuestPathWidget_SetVisualState");
static_assert(offsetof(CoreArchiveQuestPathWidget_SetVisualState, pathStatus) == 0x000000, "Member 'CoreArchiveQuestPathWidget_SetVisualState::pathStatus' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.UpdatePath
// 0x0040 (0x0040 - 0x0000)
struct CoreArchiveQuestPathWidget_UpdatePath final
{
public:
	struct FArchiveMapPathViewData                Data;                                              // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestPathWidget_UpdatePath) == 0x000008, "Wrong alignment on CoreArchiveQuestPathWidget_UpdatePath");
static_assert(sizeof(CoreArchiveQuestPathWidget_UpdatePath) == 0x000040, "Wrong size on CoreArchiveQuestPathWidget_UpdatePath");
static_assert(offsetof(CoreArchiveQuestPathWidget_UpdatePath, Data) == 0x000000, "Member 'CoreArchiveQuestPathWidget_UpdatePath::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadoutWidget.CreateInventoryGrid
// 0x0018 (0x0018 - 0x0000)
struct CoreLoadoutWidget_CreateInventoryGrid final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreMenuLoadoutPartWidget> currentLoadoutClass;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreMenuLoadoutPartWidget*             ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLoadoutWidget_CreateInventoryGrid) == 0x000008, "Wrong alignment on CoreLoadoutWidget_CreateInventoryGrid");
static_assert(sizeof(CoreLoadoutWidget_CreateInventoryGrid) == 0x000018, "Wrong size on CoreLoadoutWidget_CreateInventoryGrid");
static_assert(offsetof(CoreLoadoutWidget_CreateInventoryGrid, Index_0) == 0x000000, "Member 'CoreLoadoutWidget_CreateInventoryGrid::Index_0' has a wrong offset!");
static_assert(offsetof(CoreLoadoutWidget_CreateInventoryGrid, currentLoadoutClass) == 0x000008, "Member 'CoreLoadoutWidget_CreateInventoryGrid::currentLoadoutClass' has a wrong offset!");
static_assert(offsetof(CoreLoadoutWidget_CreateInventoryGrid, ReturnValue) == 0x000010, "Member 'CoreLoadoutWidget_CreateInventoryGrid::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadoutWidget.OnInventoryItemClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreLoadoutWidget_OnInventoryItemClicked final
{
public:
	class UCoreButtonWidget*                      itemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLoadoutWidget_OnInventoryItemClicked) == 0x000008, "Wrong alignment on CoreLoadoutWidget_OnInventoryItemClicked");
static_assert(sizeof(CoreLoadoutWidget_OnInventoryItemClicked) == 0x000008, "Wrong size on CoreLoadoutWidget_OnInventoryItemClicked");
static_assert(offsetof(CoreLoadoutWidget_OnInventoryItemClicked, itemWidget) == 0x000000, "Member 'CoreLoadoutWidget_OnInventoryItemClicked::itemWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadoutWidget.OnInventoryItemHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreLoadoutWidget_OnInventoryItemHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLoadoutWidget_OnInventoryItemHovered) == 0x000008, "Wrong alignment on CoreLoadoutWidget_OnInventoryItemHovered");
static_assert(sizeof(CoreLoadoutWidget_OnInventoryItemHovered) == 0x000008, "Wrong size on CoreLoadoutWidget_OnInventoryItemHovered");
static_assert(offsetof(CoreLoadoutWidget_OnInventoryItemHovered, buttonTarget) == 0x000000, "Member 'CoreLoadoutWidget_OnInventoryItemHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadoutWidget.OnInventoryItemUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreLoadoutWidget_OnInventoryItemUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLoadoutWidget_OnInventoryItemUnhovered) == 0x000008, "Wrong alignment on CoreLoadoutWidget_OnInventoryItemUnhovered");
static_assert(sizeof(CoreLoadoutWidget_OnInventoryItemUnhovered) == 0x000008, "Wrong size on CoreLoadoutWidget_OnInventoryItemUnhovered");
static_assert(offsetof(CoreLoadoutWidget_OnInventoryItemUnhovered, buttonTarget) == 0x000000, "Member 'CoreLoadoutWidget_OnInventoryItemUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadoutWidget.OnPaginationSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreLoadoutWidget_OnPaginationSelected final
{
public:
	int32                                         CurrentPage;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isUpdate;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLoadoutWidget_OnPaginationSelected) == 0x000004, "Wrong alignment on CoreLoadoutWidget_OnPaginationSelected");
static_assert(sizeof(CoreLoadoutWidget_OnPaginationSelected) == 0x000008, "Wrong size on CoreLoadoutWidget_OnPaginationSelected");
static_assert(offsetof(CoreLoadoutWidget_OnPaginationSelected, CurrentPage) == 0x000000, "Member 'CoreLoadoutWidget_OnPaginationSelected::CurrentPage' has a wrong offset!");
static_assert(offsetof(CoreLoadoutWidget_OnPaginationSelected, isUpdate) == 0x000004, "Member 'CoreLoadoutWidget_OnPaginationSelected::isUpdate' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadoutWidget.OnSlotClicked
// 0x0001 (0x0001 - 0x0000)
struct CoreLoadoutWidget_OnSlotClicked final
{
public:
	ELoadoutSlot                                  clickedLoadoutSlot;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLoadoutWidget_OnSlotClicked) == 0x000001, "Wrong alignment on CoreLoadoutWidget_OnSlotClicked");
static_assert(sizeof(CoreLoadoutWidget_OnSlotClicked) == 0x000001, "Wrong size on CoreLoadoutWidget_OnSlotClicked");
static_assert(offsetof(CoreLoadoutWidget_OnSlotClicked, clickedLoadoutSlot) == 0x000000, "Member 'CoreLoadoutWidget_OnSlotClicked::clickedLoadoutSlot' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadoutWidget.PlayPaginationOutAnimation
// 0x0001 (0x0001 - 0x0000)
struct CoreLoadoutWidget_PlayPaginationOutAnimation final
{
public:
	bool                                          isNextPage;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLoadoutWidget_PlayPaginationOutAnimation) == 0x000001, "Wrong alignment on CoreLoadoutWidget_PlayPaginationOutAnimation");
static_assert(sizeof(CoreLoadoutWidget_PlayPaginationOutAnimation) == 0x000001, "Wrong size on CoreLoadoutWidget_PlayPaginationOutAnimation");
static_assert(offsetof(CoreLoadoutWidget_PlayPaginationOutAnimation, isNextPage) == 0x000000, "Member 'CoreLoadoutWidget_PlayPaginationOutAnimation::isNextPage' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadoutWidget.StopPaginationAnimation
// 0x0004 (0x0004 - 0x0000)
struct CoreLoadoutWidget_StopPaginationAnimation final
{
public:
	float                                         inventoryElementsOpacity;                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLoadoutWidget_StopPaginationAnimation) == 0x000004, "Wrong alignment on CoreLoadoutWidget_StopPaginationAnimation");
static_assert(sizeof(CoreLoadoutWidget_StopPaginationAnimation) == 0x000004, "Wrong size on CoreLoadoutWidget_StopPaginationAnimation");
static_assert(offsetof(CoreLoadoutWidget_StopPaginationAnimation, inventoryElementsOpacity) == 0x000000, "Member 'CoreLoadoutWidget_StopPaginationAnimation::inventoryElementsOpacity' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadoutWidget.UpdateInventoryStatus
// 0x000C (0x000C - 0x0000)
struct CoreLoadoutWidget_UpdateInventoryStatus final
{
public:
	ELoadoutInventoryDisabledReason               InventoryDisabledReason;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         numberOfPages;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLoadoutWidget_UpdateInventoryStatus) == 0x000004, "Wrong alignment on CoreLoadoutWidget_UpdateInventoryStatus");
static_assert(sizeof(CoreLoadoutWidget_UpdateInventoryStatus) == 0x00000C, "Wrong size on CoreLoadoutWidget_UpdateInventoryStatus");
static_assert(offsetof(CoreLoadoutWidget_UpdateInventoryStatus, InventoryDisabledReason) == 0x000000, "Member 'CoreLoadoutWidget_UpdateInventoryStatus::InventoryDisabledReason' has a wrong offset!");
static_assert(offsetof(CoreLoadoutWidget_UpdateInventoryStatus, numberOfPages) == 0x000004, "Member 'CoreLoadoutWidget_UpdateInventoryStatus::numberOfPages' has a wrong offset!");
static_assert(offsetof(CoreLoadoutWidget_UpdateInventoryStatus, ReturnValue) == 0x000008, "Member 'CoreLoadoutWidget_UpdateInventoryStatus::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadoutWidget.IsLayoutSectionEnabled
// 0x0008 (0x0008 - 0x0000)
struct CoreLoadoutWidget_IsLayoutSectionEnabled final
{
public:
	int32                                         loadoutLayoutMask;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLoadoutWidget_IsLayoutSectionEnabled) == 0x000004, "Wrong alignment on CoreLoadoutWidget_IsLayoutSectionEnabled");
static_assert(sizeof(CoreLoadoutWidget_IsLayoutSectionEnabled) == 0x000008, "Wrong size on CoreLoadoutWidget_IsLayoutSectionEnabled");
static_assert(offsetof(CoreLoadoutWidget_IsLayoutSectionEnabled, loadoutLayoutMask) == 0x000000, "Member 'CoreLoadoutWidget_IsLayoutSectionEnabled::loadoutLayoutMask' has a wrong offset!");
static_assert(offsetof(CoreLoadoutWidget_IsLayoutSectionEnabled, ReturnValue) == 0x000004, "Member 'CoreLoadoutWidget_IsLayoutSectionEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftTierItem.OnRewardClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveRiftTierItem_OnRewardClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftTierItem_OnRewardClicked) == 0x000008, "Wrong alignment on CoreArchiveRiftTierItem_OnRewardClicked");
static_assert(sizeof(CoreArchiveRiftTierItem_OnRewardClicked) == 0x000008, "Wrong size on CoreArchiveRiftTierItem_OnRewardClicked");
static_assert(offsetof(CoreArchiveRiftTierItem_OnRewardClicked, Button) == 0x000000, "Member 'CoreArchiveRiftTierItem_OnRewardClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftTierItem.PlayUnlockanimation
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveRiftTierItem_PlayUnlockanimation final
{
public:
	bool                                          IsPremiumUnlocked;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftTierItem_PlayUnlockanimation) == 0x000004, "Wrong alignment on CoreArchiveRiftTierItem_PlayUnlockanimation");
static_assert(sizeof(CoreArchiveRiftTierItem_PlayUnlockanimation) == 0x000008, "Wrong size on CoreArchiveRiftTierItem_PlayUnlockanimation");
static_assert(offsetof(CoreArchiveRiftTierItem_PlayUnlockanimation, IsPremiumUnlocked) == 0x000000, "Member 'CoreArchiveRiftTierItem_PlayUnlockanimation::IsPremiumUnlocked' has a wrong offset!");
static_assert(offsetof(CoreArchiveRiftTierItem_PlayUnlockanimation, Delay) == 0x000004, "Member 'CoreArchiveRiftTierItem_PlayUnlockanimation::Delay' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftTierItem.SetGenericData
// 0x0030 (0x0030 - 0x0000)
struct CoreArchiveRiftTierItem_SetGenericData final
{
public:
	struct FArchiveRiftTierRewardsViewData        Data;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftTierItem_SetGenericData) == 0x000008, "Wrong alignment on CoreArchiveRiftTierItem_SetGenericData");
static_assert(sizeof(CoreArchiveRiftTierItem_SetGenericData) == 0x000030, "Wrong size on CoreArchiveRiftTierItem_SetGenericData");
static_assert(offsetof(CoreArchiveRiftTierItem_SetGenericData, Data) == 0x000000, "Member 'CoreArchiveRiftTierItem_SetGenericData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftTierItem.SetLockedState
// 0x0002 (0x0002 - 0x0000)
struct CoreArchiveRiftTierItem_SetLockedState final
{
public:
	bool                                          IsLocked;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasPremium;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftTierItem_SetLockedState) == 0x000001, "Wrong alignment on CoreArchiveRiftTierItem_SetLockedState");
static_assert(sizeof(CoreArchiveRiftTierItem_SetLockedState) == 0x000002, "Wrong size on CoreArchiveRiftTierItem_SetLockedState");
static_assert(offsetof(CoreArchiveRiftTierItem_SetLockedState, IsLocked) == 0x000000, "Member 'CoreArchiveRiftTierItem_SetLockedState::IsLocked' has a wrong offset!");
static_assert(offsetof(CoreArchiveRiftTierItem_SetLockedState, hasPremium) == 0x000001, "Member 'CoreArchiveRiftTierItem_SetLockedState::hasPremium' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.GetButton
// 0x0010 (0x0010 - 0x0000)
struct CoreMainMenuWidget_GetButton final
{
public:
	EMainMenuButtonType                           Button;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreBaseUserWidget*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_GetButton) == 0x000008, "Wrong alignment on CoreMainMenuWidget_GetButton");
static_assert(sizeof(CoreMainMenuWidget_GetButton) == 0x000010, "Wrong size on CoreMainMenuWidget_GetButton");
static_assert(offsetof(CoreMainMenuWidget_GetButton, Button) == 0x000000, "Member 'CoreMainMenuWidget_GetButton::Button' has a wrong offset!");
static_assert(offsetof(CoreMainMenuWidget_GetButton, Index_0) == 0x000004, "Member 'CoreMainMenuWidget_GetButton::Index_0' has a wrong offset!");
static_assert(offsetof(CoreMainMenuWidget_GetButton, ReturnValue) == 0x000008, "Member 'CoreMainMenuWidget_GetButton::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnArchivesButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnArchivesButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnArchivesButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnArchivesButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnArchivesButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnArchivesButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnArchivesButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnArchivesButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnChallengesButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnChallengesButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnChallengesButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnChallengesButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnChallengesButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnChallengesButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnChallengesButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnChallengesButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnCreditsButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnCreditsButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnCreditsButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnCreditsButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnCreditsButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnCreditsButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnCreditsButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnCreditsButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnEventButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnEventButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnEventButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnEventButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnEventButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnEventButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnEventButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnEventButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnExitButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnExitButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnExitButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnExitButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnExitButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnExitButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnExitButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnExitButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnFriendsButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnFriendsButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnFriendsButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnFriendsButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnFriendsButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnFriendsButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnFriendsButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnFriendsButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnInboxButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnInboxButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnInboxButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnInboxButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnInboxButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnInboxButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnInboxButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnInboxButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnPlayButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnPlayButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnPlayButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnPlayButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnPlayButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnPlayButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnPlayButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayCustomButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnPlayCustomButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnPlayCustomButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnPlayCustomButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnPlayCustomButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnPlayCustomButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnPlayCustomButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnPlayCustomButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayKillerButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnPlayKillerButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnPlayKillerButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnPlayKillerButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnPlayKillerButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnPlayKillerButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnPlayKillerButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnPlayKillerButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayLimitedTimeEventButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnPlayLimitedTimeEventButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnPlayLimitedTimeEventButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnPlayLimitedTimeEventButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnPlayLimitedTimeEventButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnPlayLimitedTimeEventButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnPlayLimitedTimeEventButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnPlayLimitedTimeEventButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayLimitedTimeEventKillerButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnPlayLimitedTimeEventKillerButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnPlayLimitedTimeEventKillerButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnPlayLimitedTimeEventKillerButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnPlayLimitedTimeEventKillerButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnPlayLimitedTimeEventKillerButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnPlayLimitedTimeEventKillerButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnPlayLimitedTimeEventKillerButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlayLimitedTimeEventSurvivorButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnPlayLimitedTimeEventSurvivorButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnPlayLimitedTimeEventSurvivorButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnPlayLimitedTimeEventSurvivorButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnPlayLimitedTimeEventSurvivorButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnPlayLimitedTimeEventSurvivorButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnPlayLimitedTimeEventSurvivorButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnPlayLimitedTimeEventSurvivorButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnPlaySurvivorButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnPlaySurvivorButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnPlaySurvivorButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnPlaySurvivorButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnPlaySurvivorButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnPlaySurvivorButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnPlaySurvivorButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnPlaySurvivorButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnRiftButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnRiftButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnRiftButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnRiftButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnRiftButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnRiftButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnRiftButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnRiftButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnSettingsButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnSettingsButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnSettingsButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnSettingsButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnSettingsButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnSettingsButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnSettingsButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnSettingsButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnStoreButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnStoreButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnStoreButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnStoreButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnStoreButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnStoreButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnStoreButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnStoreButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.OnTutorialButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuWidget_OnTutorialButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_OnTutorialButtonClicked) == 0x000008, "Wrong alignment on CoreMainMenuWidget_OnTutorialButtonClicked");
static_assert(sizeof(CoreMainMenuWidget_OnTutorialButtonClicked) == 0x000008, "Wrong size on CoreMainMenuWidget_OnTutorialButtonClicked");
static_assert(offsetof(CoreMainMenuWidget_OnTutorialButtonClicked, Target) == 0x000000, "Member 'CoreMainMenuWidget_OnTutorialButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.ShowLimitedTimeEventSubMenu
// 0x0001 (0x0001 - 0x0000)
struct CoreMainMenuWidget_ShowLimitedTimeEventSubMenu final
{
public:
	bool                                          Open;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_ShowLimitedTimeEventSubMenu) == 0x000001, "Wrong alignment on CoreMainMenuWidget_ShowLimitedTimeEventSubMenu");
static_assert(sizeof(CoreMainMenuWidget_ShowLimitedTimeEventSubMenu) == 0x000001, "Wrong size on CoreMainMenuWidget_ShowLimitedTimeEventSubMenu");
static_assert(offsetof(CoreMainMenuWidget_ShowLimitedTimeEventSubMenu, Open) == 0x000000, "Member 'CoreMainMenuWidget_ShowLimitedTimeEventSubMenu::Open' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.ShowPlaySubMenu
// 0x0001 (0x0001 - 0x0000)
struct CoreMainMenuWidget_ShowPlaySubMenu final
{
public:
	bool                                          Open;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_ShowPlaySubMenu) == 0x000001, "Wrong alignment on CoreMainMenuWidget_ShowPlaySubMenu");
static_assert(sizeof(CoreMainMenuWidget_ShowPlaySubMenu) == 0x000001, "Wrong size on CoreMainMenuWidget_ShowPlaySubMenu");
static_assert(offsetof(CoreMainMenuWidget_ShowPlaySubMenu, Open) == 0x000000, "Member 'CoreMainMenuWidget_ShowPlaySubMenu::Open' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.ShowUiTakeover
// 0x0001 (0x0001 - 0x0000)
struct CoreMainMenuWidget_ShowUiTakeover final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_ShowUiTakeover) == 0x000001, "Wrong alignment on CoreMainMenuWidget_ShowUiTakeover");
static_assert(sizeof(CoreMainMenuWidget_ShowUiTakeover) == 0x000001, "Wrong size on CoreMainMenuWidget_ShowUiTakeover");
static_assert(offsetof(CoreMainMenuWidget_ShowUiTakeover, Show) == 0x000000, "Member 'CoreMainMenuWidget_ShowUiTakeover::Show' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuWidget.HasActiveLTE
// 0x0001 (0x0001 - 0x0000)
struct CoreMainMenuWidget_HasActiveLTE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuWidget_HasActiveLTE) == 0x000001, "Wrong alignment on CoreMainMenuWidget_HasActiveLTE");
static_assert(sizeof(CoreMainMenuWidget_HasActiveLTE) == 0x000001, "Wrong size on CoreMainMenuWidget_HasActiveLTE");
static_assert(offsetof(CoreMainMenuWidget_HasActiveLTE, ReturnValue) == 0x000000, "Member 'CoreMainMenuWidget_HasActiveLTE::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchivesWidget.OnChallengeReminderClick
// 0x0008 (0x0008 - 0x0000)
struct CoreArchivesWidget_OnChallengeReminderClick final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchivesWidget_OnChallengeReminderClick) == 0x000008, "Wrong alignment on CoreArchivesWidget_OnChallengeReminderClick");
static_assert(sizeof(CoreArchivesWidget_OnChallengeReminderClick) == 0x000008, "Wrong size on CoreArchivesWidget_OnChallengeReminderClick");
static_assert(offsetof(CoreArchivesWidget_OnChallengeReminderClick, Button) == 0x000000, "Member 'CoreArchivesWidget_OnChallengeReminderClick::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchivesWidget.OnInfoButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreArchivesWidget_OnInfoButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchivesWidget_OnInfoButtonClicked) == 0x000008, "Wrong alignment on CoreArchivesWidget_OnInfoButtonClicked");
static_assert(sizeof(CoreArchivesWidget_OnInfoButtonClicked) == 0x000008, "Wrong size on CoreArchivesWidget_OnInfoButtonClicked");
static_assert(offsetof(CoreArchivesWidget_OnInfoButtonClicked, buttonTarget) == 0x000000, "Member 'CoreArchivesWidget_OnInfoButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchivesWidget.OnSettingsButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreArchivesWidget_OnSettingsButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchivesWidget_OnSettingsButtonClicked) == 0x000008, "Wrong alignment on CoreArchivesWidget_OnSettingsButtonClicked");
static_assert(sizeof(CoreArchivesWidget_OnSettingsButtonClicked) == 0x000008, "Wrong size on CoreArchivesWidget_OnSettingsButtonClicked");
static_assert(offsetof(CoreArchivesWidget_OnSettingsButtonClicked, buttonTarget) == 0x000000, "Member 'CoreArchivesWidget_OnSettingsButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchivesWidget.OnSlotSelected
// 0x0001 (0x0001 - 0x0000)
struct CoreArchivesWidget_OnSlotSelected final
{
public:
	EPlayerRole                                   Role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchivesWidget_OnSlotSelected) == 0x000001, "Wrong alignment on CoreArchivesWidget_OnSlotSelected");
static_assert(sizeof(CoreArchivesWidget_OnSlotSelected) == 0x000001, "Wrong size on CoreArchivesWidget_OnSlotSelected");
static_assert(offsetof(CoreArchivesWidget_OnSlotSelected, Role) == 0x000000, "Member 'CoreArchivesWidget_OnSlotSelected::Role' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchivesWidget.SetScrollData
// 0x0030 (0x0030 - 0x0000)
struct CoreArchivesWidget_SetScrollData final
{
public:
	class FText                                   vignetteListScrollPromptText;                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   journalEntryScrollPromptText;                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchivesWidget_SetScrollData) == 0x000008, "Wrong alignment on CoreArchivesWidget_SetScrollData");
static_assert(sizeof(CoreArchivesWidget_SetScrollData) == 0x000030, "Wrong size on CoreArchivesWidget_SetScrollData");
static_assert(offsetof(CoreArchivesWidget_SetScrollData, vignetteListScrollPromptText) == 0x000000, "Member 'CoreArchivesWidget_SetScrollData::vignetteListScrollPromptText' has a wrong offset!");
static_assert(offsetof(CoreArchivesWidget_SetScrollData, journalEntryScrollPromptText) == 0x000018, "Member 'CoreArchivesWidget_SetScrollData::journalEntryScrollPromptText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchivesWidget.SetSubtitle
// 0x0018 (0x0018 - 0x0000)
struct CoreArchivesWidget_SetSubtitle final
{
public:
	class FText                                   subtitle;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchivesWidget_SetSubtitle) == 0x000008, "Wrong alignment on CoreArchivesWidget_SetSubtitle");
static_assert(sizeof(CoreArchivesWidget_SetSubtitle) == 0x000018, "Wrong size on CoreArchivesWidget_SetSubtitle");
static_assert(offsetof(CoreArchivesWidget_SetSubtitle, subtitle) == 0x000000, "Member 'CoreArchivesWidget_SetSubtitle::subtitle' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.OnPurchaseClicked
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveTierPurchasePopupWidget_OnPurchaseClicked final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveTierPurchasePopupWidget_OnPurchaseClicked) == 0x000001, "Wrong alignment on CoreArchiveTierPurchasePopupWidget_OnPurchaseClicked");
static_assert(sizeof(CoreArchiveTierPurchasePopupWidget_OnPurchaseClicked) == 0x000001, "Wrong size on CoreArchiveTierPurchasePopupWidget_OnPurchaseClicked");
static_assert(offsetof(CoreArchiveTierPurchasePopupWidget_OnPurchaseClicked, currencyType) == 0x000000, "Member 'CoreArchiveTierPurchasePopupWidget_OnPurchaseClicked::currencyType' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.SetVisualData
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveTierPurchasePopupWidget_SetVisualData final
{
public:
	const class UArchiveTierPurchasePopupViewData* ViewData;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveTierPurchasePopupWidget_SetVisualData) == 0x000008, "Wrong alignment on CoreArchiveTierPurchasePopupWidget_SetVisualData");
static_assert(sizeof(CoreArchiveTierPurchasePopupWidget_SetVisualData) == 0x000008, "Wrong size on CoreArchiveTierPurchasePopupWidget_SetVisualData");
static_assert(offsetof(CoreArchiveTierPurchasePopupWidget_SetVisualData, ViewData) == 0x000000, "Member 'CoreArchiveTierPurchasePopupWidget_SetVisualData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbySidePanelButton.OnButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbySidePanelButton_OnButtonHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbySidePanelButton_OnButtonHovered) == 0x000008, "Wrong alignment on CoreLobbySidePanelButton_OnButtonHovered");
static_assert(sizeof(CoreLobbySidePanelButton_OnButtonHovered) == 0x000008, "Wrong size on CoreLobbySidePanelButton_OnButtonHovered");
static_assert(offsetof(CoreLobbySidePanelButton_OnButtonHovered, buttonTarget) == 0x000000, "Member 'CoreLobbySidePanelButton_OnButtonHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbySidePanelButton.OnButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbySidePanelButton_OnButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbySidePanelButton_OnButtonUnhovered) == 0x000008, "Wrong alignment on CoreLobbySidePanelButton_OnButtonUnhovered");
static_assert(sizeof(CoreLobbySidePanelButton_OnButtonUnhovered) == 0x000008, "Wrong size on CoreLobbySidePanelButton_OnButtonUnhovered");
static_assert(offsetof(CoreLobbySidePanelButton_OnButtonUnhovered, buttonTarget) == 0x000000, "Member 'CoreLobbySidePanelButton_OnButtonUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbySidePanelButton.SetDecoration
// 0x0010 (0x0010 - 0x0000)
struct CoreLobbySidePanelButton_SetDecoration final
{
public:
	class FString                                 decorationId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbySidePanelButton_SetDecoration) == 0x000008, "Wrong alignment on CoreLobbySidePanelButton_SetDecoration");
static_assert(sizeof(CoreLobbySidePanelButton_SetDecoration) == 0x000010, "Wrong size on CoreLobbySidePanelButton_SetDecoration");
static_assert(offsetof(CoreLobbySidePanelButton_SetDecoration, decorationId) == 0x000000, "Member 'CoreLobbySidePanelButton_SetDecoration::decorationId' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbySidePanelButton.SetIcon
// 0x0010 (0x0010 - 0x0000)
struct CoreLobbySidePanelButton_SetIcon final
{
public:
	class FString                                 eventBannerId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbySidePanelButton_SetIcon) == 0x000008, "Wrong alignment on CoreLobbySidePanelButton_SetIcon");
static_assert(sizeof(CoreLobbySidePanelButton_SetIcon) == 0x000010, "Wrong size on CoreLobbySidePanelButton_SetIcon");
static_assert(offsetof(CoreLobbySidePanelButton_SetIcon, eventBannerId) == 0x000000, "Member 'CoreLobbySidePanelButton_SetIcon::eventBannerId' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbySidePanelButton.IsDisabledButInteractable
// 0x0001 (0x0001 - 0x0000)
struct CoreLobbySidePanelButton_IsDisabledButInteractable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbySidePanelButton_IsDisabledButInteractable) == 0x000001, "Wrong alignment on CoreLobbySidePanelButton_IsDisabledButInteractable");
static_assert(sizeof(CoreLobbySidePanelButton_IsDisabledButInteractable) == 0x000001, "Wrong size on CoreLobbySidePanelButton_IsDisabledButInteractable");
static_assert(offsetof(CoreLobbySidePanelButton_IsDisabledButInteractable, ReturnValue) == 0x000000, "Member 'CoreLobbySidePanelButton_IsDisabledButInteractable::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveTomeWidget.OnMenuTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveTomeWidget_OnMenuTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveTomeWidget_OnMenuTabSelected) == 0x000008, "Wrong alignment on CoreArchiveTomeWidget_OnMenuTabSelected");
static_assert(sizeof(CoreArchiveTomeWidget_OnMenuTabSelected) == 0x000008, "Wrong size on CoreArchiveTomeWidget_OnMenuTabSelected");
static_assert(offsetof(CoreArchiveTomeWidget_OnMenuTabSelected, selectedButton) == 0x000000, "Member 'CoreArchiveTomeWidget_OnMenuTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseLoadoutSectionWidget.HideTooltip
// 0x0008 (0x0008 - 0x0000)
struct CoreBaseLoadoutSectionWidget_HideTooltip final
{
public:
	class UCoreButtonWidget*                      unhoveredSlotWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseLoadoutSectionWidget_HideTooltip) == 0x000008, "Wrong alignment on CoreBaseLoadoutSectionWidget_HideTooltip");
static_assert(sizeof(CoreBaseLoadoutSectionWidget_HideTooltip) == 0x000008, "Wrong size on CoreBaseLoadoutSectionWidget_HideTooltip");
static_assert(offsetof(CoreBaseLoadoutSectionWidget_HideTooltip, unhoveredSlotWidget) == 0x000000, "Member 'CoreBaseLoadoutSectionWidget_HideTooltip::unhoveredSlotWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseLoadoutSectionWidget.OnSlotClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreBaseLoadoutSectionWidget_OnSlotClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseLoadoutSectionWidget_OnSlotClicked) == 0x000008, "Wrong alignment on CoreBaseLoadoutSectionWidget_OnSlotClicked");
static_assert(sizeof(CoreBaseLoadoutSectionWidget_OnSlotClicked) == 0x000008, "Wrong size on CoreBaseLoadoutSectionWidget_OnSlotClicked");
static_assert(offsetof(CoreBaseLoadoutSectionWidget_OnSlotClicked, Button) == 0x000000, "Member 'CoreBaseLoadoutSectionWidget_OnSlotClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseLoadoutSectionWidget.ShowTooltip
// 0x0008 (0x0008 - 0x0000)
struct CoreBaseLoadoutSectionWidget_ShowTooltip final
{
public:
	class UCoreButtonWidget*                      hoveredSlotWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseLoadoutSectionWidget_ShowTooltip) == 0x000008, "Wrong alignment on CoreBaseLoadoutSectionWidget_ShowTooltip");
static_assert(sizeof(CoreBaseLoadoutSectionWidget_ShowTooltip) == 0x000008, "Wrong size on CoreBaseLoadoutSectionWidget_ShowTooltip");
static_assert(offsetof(CoreBaseLoadoutSectionWidget_ShowTooltip, hoveredSlotWidget) == 0x000000, "Member 'CoreBaseLoadoutSectionWidget_ShowTooltip::hoveredSlotWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.Init
// 0x0010 (0x0010 - 0x0000)
struct CoreTabContainerWidget_Init final
{
public:
	TArray<struct FTabWidgetData>                 tabsData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabContainerWidget_Init) == 0x000008, "Wrong alignment on CoreTabContainerWidget_Init");
static_assert(sizeof(CoreTabContainerWidget_Init) == 0x000010, "Wrong size on CoreTabContainerWidget_Init");
static_assert(offsetof(CoreTabContainerWidget_Init, tabsData) == 0x000000, "Member 'CoreTabContainerWidget_Init::tabsData' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.OnTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreTabContainerWidget_OnTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabContainerWidget_OnTabSelected) == 0x000008, "Wrong alignment on CoreTabContainerWidget_OnTabSelected");
static_assert(sizeof(CoreTabContainerWidget_OnTabSelected) == 0x000008, "Wrong size on CoreTabContainerWidget_OnTabSelected");
static_assert(offsetof(CoreTabContainerWidget_OnTabSelected, selectedButton) == 0x000000, "Member 'CoreTabContainerWidget_OnTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.SelectNextOrPreviousTab
// 0x0001 (0x0001 - 0x0000)
struct CoreTabContainerWidget_SelectNextOrPreviousTab final
{
public:
	bool                                          isSelectingNextTab;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabContainerWidget_SelectNextOrPreviousTab) == 0x000001, "Wrong alignment on CoreTabContainerWidget_SelectNextOrPreviousTab");
static_assert(sizeof(CoreTabContainerWidget_SelectNextOrPreviousTab) == 0x000001, "Wrong size on CoreTabContainerWidget_SelectNextOrPreviousTab");
static_assert(offsetof(CoreTabContainerWidget_SelectNextOrPreviousTab, isSelectingNextTab) == 0x000000, "Member 'CoreTabContainerWidget_SelectNextOrPreviousTab::isSelectingNextTab' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.SetNotificationVisibility
// 0x0008 (0x0008 - 0x0000)
struct CoreTabContainerWidget_SetNotificationVisibility final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasNotification;                                   // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTabContainerWidget_SetNotificationVisibility) == 0x000004, "Wrong alignment on CoreTabContainerWidget_SetNotificationVisibility");
static_assert(sizeof(CoreTabContainerWidget_SetNotificationVisibility) == 0x000008, "Wrong size on CoreTabContainerWidget_SetNotificationVisibility");
static_assert(offsetof(CoreTabContainerWidget_SetNotificationVisibility, Key) == 0x000000, "Member 'CoreTabContainerWidget_SetNotificationVisibility::Key' has a wrong offset!");
static_assert(offsetof(CoreTabContainerWidget_SetNotificationVisibility, HasNotification) == 0x000004, "Member 'CoreTabContainerWidget_SetNotificationVisibility::HasNotification' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.SetTabEnabled
// 0x0008 (0x0008 - 0x0000)
struct CoreTabContainerWidget_SetTabEnabled final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTabContainerWidget_SetTabEnabled) == 0x000004, "Wrong alignment on CoreTabContainerWidget_SetTabEnabled");
static_assert(sizeof(CoreTabContainerWidget_SetTabEnabled) == 0x000008, "Wrong size on CoreTabContainerWidget_SetTabEnabled");
static_assert(offsetof(CoreTabContainerWidget_SetTabEnabled, Key) == 0x000000, "Member 'CoreTabContainerWidget_SetTabEnabled::Key' has a wrong offset!");
static_assert(offsetof(CoreTabContainerWidget_SetTabEnabled, Enabled) == 0x000004, "Member 'CoreTabContainerWidget_SetTabEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.SetTabVisible
// 0x0008 (0x0008 - 0x0000)
struct CoreTabContainerWidget_SetTabVisible final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTabContainerWidget_SetTabVisible) == 0x000004, "Wrong alignment on CoreTabContainerWidget_SetTabVisible");
static_assert(sizeof(CoreTabContainerWidget_SetTabVisible) == 0x000008, "Wrong size on CoreTabContainerWidget_SetTabVisible");
static_assert(offsetof(CoreTabContainerWidget_SetTabVisible, Key) == 0x000000, "Member 'CoreTabContainerWidget_SetTabVisible::Key' has a wrong offset!");
static_assert(offsetof(CoreTabContainerWidget_SetTabVisible, Visible) == 0x000004, "Member 'CoreTabContainerWidget_SetTabVisible::Visible' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.SetUseControllerTabSwitching
// 0x0001 (0x0001 - 0x0000)
struct CoreTabContainerWidget_SetUseControllerTabSwitching final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabContainerWidget_SetUseControllerTabSwitching) == 0x000001, "Wrong alignment on CoreTabContainerWidget_SetUseControllerTabSwitching");
static_assert(sizeof(CoreTabContainerWidget_SetUseControllerTabSwitching) == 0x000001, "Wrong size on CoreTabContainerWidget_SetUseControllerTabSwitching");
static_assert(offsetof(CoreTabContainerWidget_SetUseControllerTabSwitching, Enabled) == 0x000000, "Member 'CoreTabContainerWidget_SetUseControllerTabSwitching::Enabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.UpdateBackgroundSkin
// 0x0010 (0x0010 - 0x0000)
struct CoreTabContainerWidget_UpdateBackgroundSkin final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     skinMaterial;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabContainerWidget_UpdateBackgroundSkin) == 0x000008, "Wrong alignment on CoreTabContainerWidget_UpdateBackgroundSkin");
static_assert(sizeof(CoreTabContainerWidget_UpdateBackgroundSkin) == 0x000010, "Wrong size on CoreTabContainerWidget_UpdateBackgroundSkin");
static_assert(offsetof(CoreTabContainerWidget_UpdateBackgroundSkin, Key) == 0x000000, "Member 'CoreTabContainerWidget_UpdateBackgroundSkin::Key' has a wrong offset!");
static_assert(offsetof(CoreTabContainerWidget_UpdateBackgroundSkin, skinMaterial) == 0x000008, "Member 'CoreTabContainerWidget_UpdateBackgroundSkin::skinMaterial' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.GetTab
// 0x0010 (0x0010 - 0x0000)
struct CoreTabContainerWidget_GetTab final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreTabWidget*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabContainerWidget_GetTab) == 0x000008, "Wrong alignment on CoreTabContainerWidget_GetTab");
static_assert(sizeof(CoreTabContainerWidget_GetTab) == 0x000010, "Wrong size on CoreTabContainerWidget_GetTab");
static_assert(offsetof(CoreTabContainerWidget_GetTab, Key) == 0x000000, "Member 'CoreTabContainerWidget_GetTab::Key' has a wrong offset!");
static_assert(offsetof(CoreTabContainerWidget_GetTab, ReturnValue) == 0x000008, "Member 'CoreTabContainerWidget_GetTab::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.GetTabIndex
// 0x0008 (0x0008 - 0x0000)
struct CoreTabContainerWidget_GetTabIndex final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabContainerWidget_GetTabIndex) == 0x000004, "Wrong alignment on CoreTabContainerWidget_GetTabIndex");
static_assert(sizeof(CoreTabContainerWidget_GetTabIndex) == 0x000008, "Wrong size on CoreTabContainerWidget_GetTabIndex");
static_assert(offsetof(CoreTabContainerWidget_GetTabIndex, Key) == 0x000000, "Member 'CoreTabContainerWidget_GetTabIndex::Key' has a wrong offset!");
static_assert(offsetof(CoreTabContainerWidget_GetTabIndex, ReturnValue) == 0x000004, "Member 'CoreTabContainerWidget_GetTabIndex::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreLockedOverlayWidget.SetIsLocked
// 0x0002 (0x0002 - 0x0000)
struct CoreLockedOverlayWidget_SetIsLocked final
{
public:
	bool                                          IsLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useAnimation;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLockedOverlayWidget_SetIsLocked) == 0x000001, "Wrong alignment on CoreLockedOverlayWidget_SetIsLocked");
static_assert(sizeof(CoreLockedOverlayWidget_SetIsLocked) == 0x000002, "Wrong size on CoreLockedOverlayWidget_SetIsLocked");
static_assert(offsetof(CoreLockedOverlayWidget_SetIsLocked, IsLocked) == 0x000000, "Member 'CoreLockedOverlayWidget_SetIsLocked::IsLocked' has a wrong offset!");
static_assert(offsetof(CoreLockedOverlayWidget_SetIsLocked, useAnimation) == 0x000001, "Member 'CoreLockedOverlayWidget_SetIsLocked::useAnimation' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabWidget.HasLabelTooltip
// 0x0001 (0x0001 - 0x0000)
struct CoreTabWidget_HasLabelTooltip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabWidget_HasLabelTooltip) == 0x000001, "Wrong alignment on CoreTabWidget_HasLabelTooltip");
static_assert(sizeof(CoreTabWidget_HasLabelTooltip) == 0x000001, "Wrong size on CoreTabWidget_HasLabelTooltip");
static_assert(offsetof(CoreTabWidget_HasLabelTooltip, ReturnValue) == 0x000000, "Member 'CoreTabWidget_HasLabelTooltip::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabWidget.SetIconSoftTexture
// 0x0048 (0x0048 - 0x0000)
struct CoreTabWidget_SetIconSoftTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              iconTexture;                                       // 0x0000(0x0038)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              forcedIconSize;                                    // 0x0038(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabWidget_SetIconSoftTexture) == 0x000008, "Wrong alignment on CoreTabWidget_SetIconSoftTexture");
static_assert(sizeof(CoreTabWidget_SetIconSoftTexture) == 0x000048, "Wrong size on CoreTabWidget_SetIconSoftTexture");
static_assert(offsetof(CoreTabWidget_SetIconSoftTexture, iconTexture) == 0x000000, "Member 'CoreTabWidget_SetIconSoftTexture::iconTexture' has a wrong offset!");
static_assert(offsetof(CoreTabWidget_SetIconSoftTexture, forcedIconSize) == 0x000038, "Member 'CoreTabWidget_SetIconSoftTexture::forcedIconSize' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabWidget.SetIconTexture
// 0x0018 (0x0018 - 0x0000)
struct CoreTabWidget_SetIconTexture final
{
public:
	class UTexture2D*                             iconTexture;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              forcedIconSize;                                    // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabWidget_SetIconTexture) == 0x000008, "Wrong alignment on CoreTabWidget_SetIconTexture");
static_assert(sizeof(CoreTabWidget_SetIconTexture) == 0x000018, "Wrong size on CoreTabWidget_SetIconTexture");
static_assert(offsetof(CoreTabWidget_SetIconTexture, iconTexture) == 0x000000, "Member 'CoreTabWidget_SetIconTexture::iconTexture' has a wrong offset!");
static_assert(offsetof(CoreTabWidget_SetIconTexture, forcedIconSize) == 0x000008, "Member 'CoreTabWidget_SetIconTexture::forcedIconSize' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabWidget.SetNotificationVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreTabWidget_SetNotificationVisibility final
{
public:
	bool                                          HasNotification;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabWidget_SetNotificationVisibility) == 0x000001, "Wrong alignment on CoreTabWidget_SetNotificationVisibility");
static_assert(sizeof(CoreTabWidget_SetNotificationVisibility) == 0x000001, "Wrong size on CoreTabWidget_SetNotificationVisibility");
static_assert(offsetof(CoreTabWidget_SetNotificationVisibility, HasNotification) == 0x000000, "Member 'CoreTabWidget_SetNotificationVisibility::HasNotification' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabWidget.GetKey
// 0x0004 (0x0004 - 0x0000)
struct CoreTabWidget_GetKey final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabWidget_GetKey) == 0x000004, "Wrong alignment on CoreTabWidget_GetKey");
static_assert(sizeof(CoreTabWidget_GetKey) == 0x000004, "Wrong size on CoreTabWidget_GetKey");
static_assert(offsetof(CoreTabWidget_GetKey, ReturnValue) == 0x000000, "Member 'CoreTabWidget_GetKey::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabWidget.GetTabText
// 0x0018 (0x0018 - 0x0000)
struct CoreTabWidget_GetTabText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabWidget_GetTabText) == 0x000008, "Wrong alignment on CoreTabWidget_GetTabText");
static_assert(sizeof(CoreTabWidget_GetTabText) == 0x000018, "Wrong size on CoreTabWidget_GetTabText");
static_assert(offsetof(CoreTabWidget_GetTabText, ReturnValue) == 0x000000, "Member 'CoreTabWidget_GetTabText::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetData
// 0x0060 (0x0060 - 0x0000)
struct CoreArchiveVignetteButtonWidget_SetData final
{
public:
	struct FArchivesVignetteViewData              vignetteDataList;                                  // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveVignetteButtonWidget_SetData) == 0x000008, "Wrong alignment on CoreArchiveVignetteButtonWidget_SetData");
static_assert(sizeof(CoreArchiveVignetteButtonWidget_SetData) == 0x000060, "Wrong size on CoreArchiveVignetteButtonWidget_SetData");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetData, vignetteDataList) == 0x000000, "Member 'CoreArchiveVignetteButtonWidget_SetData::vignetteDataList' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetVignetteRead
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveVignetteButtonWidget_SetVignetteRead final
{
public:
	bool                                          IsRead;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveVignetteButtonWidget_SetVignetteRead) == 0x000001, "Wrong alignment on CoreArchiveVignetteButtonWidget_SetVignetteRead");
static_assert(sizeof(CoreArchiveVignetteButtonWidget_SetVignetteRead) == 0x000001, "Wrong size on CoreArchiveVignetteButtonWidget_SetVignetteRead");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVignetteRead, IsRead) == 0x000000, "Member 'CoreArchiveVignetteButtonWidget_SetVignetteRead::IsRead' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetVisualData
// 0x0078 (0x0078 - 0x0000)
struct CoreArchiveVignetteButtonWidget_SetVisualData final
{
public:
	class FText                                   vignetteTitle;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   vignetteSubtitle;                                  // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   vignetteProgressText;                              // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          displayProgress;                                   // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         vignetteProgress;                                  // 0x004C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isUnread;                                          // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   unreadIndicatorText;                               // 0x0058(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          showCinematics;                                    // 0x0070(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          lockCinematics;                                    // 0x0071(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveVignetteButtonWidget_SetVisualData) == 0x000008, "Wrong alignment on CoreArchiveVignetteButtonWidget_SetVisualData");
static_assert(sizeof(CoreArchiveVignetteButtonWidget_SetVisualData) == 0x000078, "Wrong size on CoreArchiveVignetteButtonWidget_SetVisualData");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, vignetteTitle) == 0x000000, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::vignetteTitle' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, vignetteSubtitle) == 0x000018, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::vignetteSubtitle' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, vignetteProgressText) == 0x000030, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::vignetteProgressText' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, displayProgress) == 0x000048, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::displayProgress' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, vignetteProgress) == 0x00004C, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::vignetteProgress' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, isUnread) == 0x000050, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::isUnread' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, unreadIndicatorText) == 0x000058, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::unreadIndicatorText' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, showCinematics) == 0x000070, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::showCinematics' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, lockCinematics) == 0x000071, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::lockCinematics' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetAvailabilityVisuals
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuLoadoutPartWidget_SetAvailabilityVisuals final
{
public:
	bool                                          IsAvailable;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_SetAvailabilityVisuals) == 0x000001, "Wrong alignment on CoreMenuLoadoutPartWidget_SetAvailabilityVisuals");
static_assert(sizeof(CoreMenuLoadoutPartWidget_SetAvailabilityVisuals) == 0x000001, "Wrong size on CoreMenuLoadoutPartWidget_SetAvailabilityVisuals");
static_assert(offsetof(CoreMenuLoadoutPartWidget_SetAvailabilityVisuals, IsAvailable) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_SetAvailabilityVisuals::IsAvailable' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetDisplayLocation
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuLoadoutPartWidget_SetDisplayLocation final
{
public:
	ELoadoutSlotDisplayLocation                   displayLocation;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_SetDisplayLocation) == 0x000001, "Wrong alignment on CoreMenuLoadoutPartWidget_SetDisplayLocation");
static_assert(sizeof(CoreMenuLoadoutPartWidget_SetDisplayLocation) == 0x000001, "Wrong size on CoreMenuLoadoutPartWidget_SetDisplayLocation");
static_assert(offsetof(CoreMenuLoadoutPartWidget_SetDisplayLocation, displayLocation) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_SetDisplayLocation::displayLocation' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetInventoryData
// 0x0008 (0x0008 - 0x0000)
struct CoreMenuLoadoutPartWidget_SetInventoryData final
{
public:
	const class UMenuLoadoutPartViewData*         Data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_SetInventoryData) == 0x000008, "Wrong alignment on CoreMenuLoadoutPartWidget_SetInventoryData");
static_assert(sizeof(CoreMenuLoadoutPartWidget_SetInventoryData) == 0x000008, "Wrong size on CoreMenuLoadoutPartWidget_SetInventoryData");
static_assert(offsetof(CoreMenuLoadoutPartWidget_SetInventoryData, Data) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_SetInventoryData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetLoadoutPartData
// 0x0008 (0x0008 - 0x0000)
struct CoreMenuLoadoutPartWidget_SetLoadoutPartData final
{
public:
	const class UMenuLoadoutPartViewData*         Data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_SetLoadoutPartData) == 0x000008, "Wrong alignment on CoreMenuLoadoutPartWidget_SetLoadoutPartData");
static_assert(sizeof(CoreMenuLoadoutPartWidget_SetLoadoutPartData) == 0x000008, "Wrong size on CoreMenuLoadoutPartWidget_SetLoadoutPartData");
static_assert(offsetof(CoreMenuLoadoutPartWidget_SetLoadoutPartData, Data) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_SetLoadoutPartData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetPlusSignVisibilityWhenEmpty
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuLoadoutPartWidget_SetPlusSignVisibilityWhenEmpty final
{
public:
	bool                                          showPlusSignWhenEmpty;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_SetPlusSignVisibilityWhenEmpty) == 0x000001, "Wrong alignment on CoreMenuLoadoutPartWidget_SetPlusSignVisibilityWhenEmpty");
static_assert(sizeof(CoreMenuLoadoutPartWidget_SetPlusSignVisibilityWhenEmpty) == 0x000001, "Wrong size on CoreMenuLoadoutPartWidget_SetPlusSignVisibilityWhenEmpty");
static_assert(offsetof(CoreMenuLoadoutPartWidget_SetPlusSignVisibilityWhenEmpty, showPlusSignWhenEmpty) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_SetPlusSignVisibilityWhenEmpty::showPlusSignWhenEmpty' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetSelectedState
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuLoadoutPartWidget_SetSelectedState final
{
public:
	bool                                          selectedState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_SetSelectedState) == 0x000001, "Wrong alignment on CoreMenuLoadoutPartWidget_SetSelectedState");
static_assert(sizeof(CoreMenuLoadoutPartWidget_SetSelectedState) == 0x000001, "Wrong size on CoreMenuLoadoutPartWidget_SetSelectedState");
static_assert(offsetof(CoreMenuLoadoutPartWidget_SetSelectedState, selectedState) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_SetSelectedState::selectedState' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetBeginnerModeTooltipText
// 0x0018 (0x0018 - 0x0000)
struct CoreMenuLoadoutPartWidget_GetBeginnerModeTooltipText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_GetBeginnerModeTooltipText) == 0x000008, "Wrong alignment on CoreMenuLoadoutPartWidget_GetBeginnerModeTooltipText");
static_assert(sizeof(CoreMenuLoadoutPartWidget_GetBeginnerModeTooltipText) == 0x000018, "Wrong size on CoreMenuLoadoutPartWidget_GetBeginnerModeTooltipText");
static_assert(offsetof(CoreMenuLoadoutPartWidget_GetBeginnerModeTooltipText, ReturnValue) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_GetBeginnerModeTooltipText::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetLoadoutPartCanBeSelected
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuLoadoutPartWidget_GetLoadoutPartCanBeSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_GetLoadoutPartCanBeSelected) == 0x000001, "Wrong alignment on CoreMenuLoadoutPartWidget_GetLoadoutPartCanBeSelected");
static_assert(sizeof(CoreMenuLoadoutPartWidget_GetLoadoutPartCanBeSelected) == 0x000001, "Wrong size on CoreMenuLoadoutPartWidget_GetLoadoutPartCanBeSelected");
static_assert(offsetof(CoreMenuLoadoutPartWidget_GetLoadoutPartCanBeSelected, ReturnValue) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_GetLoadoutPartCanBeSelected::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetLoadoutPartData
// 0x0008 (0x0008 - 0x0000)
struct CoreMenuLoadoutPartWidget_GetLoadoutPartData final
{
public:
	const class UMenuLoadoutPartViewData*         ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_GetLoadoutPartData) == 0x000008, "Wrong alignment on CoreMenuLoadoutPartWidget_GetLoadoutPartData");
static_assert(sizeof(CoreMenuLoadoutPartWidget_GetLoadoutPartData) == 0x000008, "Wrong size on CoreMenuLoadoutPartWidget_GetLoadoutPartData");
static_assert(offsetof(CoreMenuLoadoutPartWidget_GetLoadoutPartData, ReturnValue) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_GetLoadoutPartData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetSelectedState
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuLoadoutPartWidget_GetSelectedState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_GetSelectedState) == 0x000001, "Wrong alignment on CoreMenuLoadoutPartWidget_GetSelectedState");
static_assert(sizeof(CoreMenuLoadoutPartWidget_GetSelectedState) == 0x000001, "Wrong size on CoreMenuLoadoutPartWidget_GetSelectedState");
static_assert(offsetof(CoreMenuLoadoutPartWidget_GetSelectedState, ReturnValue) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_GetSelectedState::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetTooltipData
// 0x00F8 (0x00F8 - 0x0000)
struct CoreMenuLoadoutPartWidget_GetTooltipData final
{
public:
	struct FLoadoutTooltipData                    ReturnValue;                                       // 0x0000(0x00F8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_GetTooltipData) == 0x000008, "Wrong alignment on CoreMenuLoadoutPartWidget_GetTooltipData");
static_assert(sizeof(CoreMenuLoadoutPartWidget_GetTooltipData) == 0x0000F8, "Wrong size on CoreMenuLoadoutPartWidget_GetTooltipData");
static_assert(offsetof(CoreMenuLoadoutPartWidget_GetTooltipData, ReturnValue) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_GetTooltipData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetWidgetItemId
// 0x000C (0x000C - 0x0000)
struct CoreMenuLoadoutPartWidget_GetWidgetItemId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_GetWidgetItemId) == 0x000004, "Wrong alignment on CoreMenuLoadoutPartWidget_GetWidgetItemId");
static_assert(sizeof(CoreMenuLoadoutPartWidget_GetWidgetItemId) == 0x00000C, "Wrong size on CoreMenuLoadoutPartWidget_GetWidgetItemId");
static_assert(offsetof(CoreMenuLoadoutPartWidget_GetWidgetItemId, ReturnValue) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_GetWidgetItemId::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetWidgetLockedState
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuLoadoutPartWidget_GetWidgetLockedState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_GetWidgetLockedState) == 0x000001, "Wrong alignment on CoreMenuLoadoutPartWidget_GetWidgetLockedState");
static_assert(sizeof(CoreMenuLoadoutPartWidget_GetWidgetLockedState) == 0x000001, "Wrong size on CoreMenuLoadoutPartWidget_GetWidgetLockedState");
static_assert(offsetof(CoreMenuLoadoutPartWidget_GetWidgetLockedState, ReturnValue) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_GetWidgetLockedState::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.ShouldShowAvailabilityVisuals
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuLoadoutPartWidget_ShouldShowAvailabilityVisuals final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_ShouldShowAvailabilityVisuals) == 0x000001, "Wrong alignment on CoreMenuLoadoutPartWidget_ShouldShowAvailabilityVisuals");
static_assert(sizeof(CoreMenuLoadoutPartWidget_ShouldShowAvailabilityVisuals) == 0x000001, "Wrong size on CoreMenuLoadoutPartWidget_ShouldShowAvailabilityVisuals");
static_assert(offsetof(CoreMenuLoadoutPartWidget_ShouldShowAvailabilityVisuals, ReturnValue) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_ShouldShowAvailabilityVisuals::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteCinematicButton.SetIsForceDisabled
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveVignetteCinematicButton_SetIsForceDisabled final
{
public:
	bool                                          isForceDisabled_0;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveVignetteCinematicButton_SetIsForceDisabled) == 0x000001, "Wrong alignment on CoreArchiveVignetteCinematicButton_SetIsForceDisabled");
static_assert(sizeof(CoreArchiveVignetteCinematicButton_SetIsForceDisabled) == 0x000001, "Wrong size on CoreArchiveVignetteCinematicButton_SetIsForceDisabled");
static_assert(offsetof(CoreArchiveVignetteCinematicButton_SetIsForceDisabled, isForceDisabled_0) == 0x000000, "Member 'CoreArchiveVignetteCinematicButton_SetIsForceDisabled::isForceDisabled_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreMatchmakingReadyMarkerWidget.SetNumberOfMarkers
// 0x0004 (0x0004 - 0x0000)
struct CoreMatchmakingReadyMarkerWidget_SetNumberOfMarkers final
{
public:
	int32                                         numberOfMarkers;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMatchmakingReadyMarkerWidget_SetNumberOfMarkers) == 0x000004, "Wrong alignment on CoreMatchmakingReadyMarkerWidget_SetNumberOfMarkers");
static_assert(sizeof(CoreMatchmakingReadyMarkerWidget_SetNumberOfMarkers) == 0x000004, "Wrong size on CoreMatchmakingReadyMarkerWidget_SetNumberOfMarkers");
static_assert(offsetof(CoreMatchmakingReadyMarkerWidget_SetNumberOfMarkers, numberOfMarkers) == 0x000000, "Member 'CoreMatchmakingReadyMarkerWidget_SetNumberOfMarkers::numberOfMarkers' has a wrong offset!");

// Function DBDUIViewsCore.CoreMatchmakingReadyMarkerWidget.SetReadyStatus
// 0x0018 (0x0018 - 0x0000)
struct CoreMatchmakingReadyMarkerWidget_SetReadyStatus final
{
public:
	struct FMatchmakingReadyStatusViewData        status;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMatchmakingReadyMarkerWidget_SetReadyStatus) == 0x000008, "Wrong alignment on CoreMatchmakingReadyMarkerWidget_SetReadyStatus");
static_assert(sizeof(CoreMatchmakingReadyMarkerWidget_SetReadyStatus) == 0x000018, "Wrong size on CoreMatchmakingReadyMarkerWidget_SetReadyStatus");
static_assert(offsetof(CoreMatchmakingReadyMarkerWidget_SetReadyStatus, status) == 0x000000, "Member 'CoreMatchmakingReadyMarkerWidget_SetReadyStatus::status' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveVignetteEntryButtonWidget_SetData final
{
public:
	int32                                         entryNumber;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRead;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isImage;                                           // 0x0005(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveVignetteEntryButtonWidget_SetData) == 0x000004, "Wrong alignment on CoreArchiveVignetteEntryButtonWidget_SetData");
static_assert(sizeof(CoreArchiveVignetteEntryButtonWidget_SetData) == 0x000008, "Wrong size on CoreArchiveVignetteEntryButtonWidget_SetData");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_SetData, entryNumber) == 0x000000, "Member 'CoreArchiveVignetteEntryButtonWidget_SetData::entryNumber' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_SetData, IsRead) == 0x000004, "Member 'CoreArchiveVignetteEntryButtonWidget_SetData::IsRead' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_SetData, isImage) == 0x000005, "Member 'CoreArchiveVignetteEntryButtonWidget_SetData::isImage' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.SetVisualData
// 0x0028 (0x0028 - 0x0000)
struct CoreArchiveVignetteEntryButtonWidget_SetVisualData final
{
public:
	int32                                         entryNumber;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRead;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   unreadIndicatorText;                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isImage;                                           // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveVignetteEntryButtonWidget_SetVisualData) == 0x000008, "Wrong alignment on CoreArchiveVignetteEntryButtonWidget_SetVisualData");
static_assert(sizeof(CoreArchiveVignetteEntryButtonWidget_SetVisualData) == 0x000028, "Wrong size on CoreArchiveVignetteEntryButtonWidget_SetVisualData");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_SetVisualData, entryNumber) == 0x000000, "Member 'CoreArchiveVignetteEntryButtonWidget_SetVisualData::entryNumber' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_SetVisualData, IsRead) == 0x000004, "Member 'CoreArchiveVignetteEntryButtonWidget_SetVisualData::IsRead' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_SetVisualData, unreadIndicatorText) == 0x000008, "Member 'CoreArchiveVignetteEntryButtonWidget_SetVisualData::unreadIndicatorText' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_SetVisualData, isImage) == 0x000020, "Member 'CoreArchiveVignetteEntryButtonWidget_SetVisualData::isImage' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.GetEntryNumber
// 0x0004 (0x0004 - 0x0000)
struct CoreArchiveVignetteEntryButtonWidget_GetEntryNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveVignetteEntryButtonWidget_GetEntryNumber) == 0x000004, "Wrong alignment on CoreArchiveVignetteEntryButtonWidget_GetEntryNumber");
static_assert(sizeof(CoreArchiveVignetteEntryButtonWidget_GetEntryNumber) == 0x000004, "Wrong size on CoreArchiveVignetteEntryButtonWidget_GetEntryNumber");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_GetEntryNumber, ReturnValue) == 0x000000, "Member 'CoreArchiveVignetteEntryButtonWidget_GetEntryNumber::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteEntryContainerWidget.OnUnlockComplete
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete) == 0x000008, "Wrong alignment on CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete");
static_assert(sizeof(CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete) == 0x000008, "Wrong size on CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete");
static_assert(offsetof(CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete, tween) == 0x000000, "Member 'CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteEntryContainerWidget.OnUnlockProgress
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress) == 0x000008, "Wrong alignment on CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress");
static_assert(sizeof(CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress) == 0x000008, "Wrong size on CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress");
static_assert(offsetof(CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress, tween) == 0x000000, "Member 'CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyTitleWidget.OnBloodPointBulkSpendingButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonHovered) == 0x000008, "Wrong alignment on CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonHovered");
static_assert(sizeof(CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonHovered) == 0x000008, "Wrong size on CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonHovered");
static_assert(offsetof(CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonHovered, buttonTarget) == 0x000000, "Member 'CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyTitleWidget.OnBloodPointBulkSpendingButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonUnhovered) == 0x000008, "Wrong alignment on CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonUnhovered");
static_assert(sizeof(CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonUnhovered) == 0x000008, "Wrong size on CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonUnhovered");
static_assert(offsetof(CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonUnhovered, buttonTarget) == 0x000000, "Member 'CoreLobbyTitleWidget_OnBloodPointBulkSpendingButtonUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyTitleWidget.OnFadeInAnimationComplete
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyTitleWidget_OnFadeInAnimationComplete final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyTitleWidget_OnFadeInAnimationComplete) == 0x000008, "Wrong alignment on CoreLobbyTitleWidget_OnFadeInAnimationComplete");
static_assert(sizeof(CoreLobbyTitleWidget_OnFadeInAnimationComplete) == 0x000008, "Wrong size on CoreLobbyTitleWidget_OnFadeInAnimationComplete");
static_assert(offsetof(CoreLobbyTitleWidget_OnFadeInAnimationComplete, tween) == 0x000000, "Member 'CoreLobbyTitleWidget_OnFadeInAnimationComplete::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyTitleWidget.OnFadeOutAnimationComplete
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyTitleWidget_OnFadeOutAnimationComplete final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyTitleWidget_OnFadeOutAnimationComplete) == 0x000008, "Wrong alignment on CoreLobbyTitleWidget_OnFadeOutAnimationComplete");
static_assert(sizeof(CoreLobbyTitleWidget_OnFadeOutAnimationComplete) == 0x000008, "Wrong size on CoreLobbyTitleWidget_OnFadeOutAnimationComplete");
static_assert(offsetof(CoreLobbyTitleWidget_OnFadeOutAnimationComplete, tween) == 0x000000, "Member 'CoreLobbyTitleWidget_OnFadeOutAnimationComplete::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyTitleWidget.OnPrestigeHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyTitleWidget_OnPrestigeHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyTitleWidget_OnPrestigeHovered) == 0x000008, "Wrong alignment on CoreLobbyTitleWidget_OnPrestigeHovered");
static_assert(sizeof(CoreLobbyTitleWidget_OnPrestigeHovered) == 0x000008, "Wrong size on CoreLobbyTitleWidget_OnPrestigeHovered");
static_assert(offsetof(CoreLobbyTitleWidget_OnPrestigeHovered, buttonTarget) == 0x000000, "Member 'CoreLobbyTitleWidget_OnPrestigeHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyTitleWidget.OnPrestigeUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyTitleWidget_OnPrestigeUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyTitleWidget_OnPrestigeUnhovered) == 0x000008, "Wrong alignment on CoreLobbyTitleWidget_OnPrestigeUnhovered");
static_assert(sizeof(CoreLobbyTitleWidget_OnPrestigeUnhovered) == 0x000008, "Wrong size on CoreLobbyTitleWidget_OnPrestigeUnhovered");
static_assert(offsetof(CoreLobbyTitleWidget_OnPrestigeUnhovered, buttonTarget) == 0x000000, "Member 'CoreLobbyTitleWidget_OnPrestigeUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyTitleWidget.PlayLevelUpAnimation
// 0x0001 (0x0001 - 0x0000)
struct CoreLobbyTitleWidget_PlayLevelUpAnimation final
{
public:
	bool                                          isPrestigeUp;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyTitleWidget_PlayLevelUpAnimation) == 0x000001, "Wrong alignment on CoreLobbyTitleWidget_PlayLevelUpAnimation");
static_assert(sizeof(CoreLobbyTitleWidget_PlayLevelUpAnimation) == 0x000001, "Wrong size on CoreLobbyTitleWidget_PlayLevelUpAnimation");
static_assert(offsetof(CoreLobbyTitleWidget_PlayLevelUpAnimation, isPrestigeUp) == 0x000000, "Member 'CoreLobbyTitleWidget_PlayLevelUpAnimation::isPrestigeUp' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyTitleWidget.SetData
// 0x0068 (0x0068 - 0x0000)
struct CoreLobbyTitleWidget_SetData final
{
public:
	struct FLobbyTitleViewData                    LobbyTitleViewData;                                // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyTitleWidget_SetData) == 0x000008, "Wrong alignment on CoreLobbyTitleWidget_SetData");
static_assert(sizeof(CoreLobbyTitleWidget_SetData) == 0x000068, "Wrong size on CoreLobbyTitleWidget_SetData");
static_assert(offsetof(CoreLobbyTitleWidget_SetData, LobbyTitleViewData) == 0x000000, "Member 'CoreLobbyTitleWidget_SetData::LobbyTitleViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreAuricCellsBundleWidget.OnBuyButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreAuricCellsBundleWidget_OnBuyButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuricCellsBundleWidget_OnBuyButtonClicked) == 0x000008, "Wrong alignment on CoreAuricCellsBundleWidget_OnBuyButtonClicked");
static_assert(sizeof(CoreAuricCellsBundleWidget_OnBuyButtonClicked) == 0x000008, "Wrong size on CoreAuricCellsBundleWidget_OnBuyButtonClicked");
static_assert(offsetof(CoreAuricCellsBundleWidget_OnBuyButtonClicked, buttonTarget) == 0x000000, "Member 'CoreAuricCellsBundleWidget_OnBuyButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreAuricCellsBundleWidget.SetData
// 0x0098 (0x0098 - 0x0000)
struct CoreAuricCellsBundleWidget_SetData final
{
public:
	struct FAuricCellsBundleViewData              BundleData;                                        // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuricCellsBundleWidget_SetData) == 0x000008, "Wrong alignment on CoreAuricCellsBundleWidget_SetData");
static_assert(sizeof(CoreAuricCellsBundleWidget_SetData) == 0x000098, "Wrong size on CoreAuricCellsBundleWidget_SetData");
static_assert(offsetof(CoreAuricCellsBundleWidget_SetData, BundleData) == 0x000000, "Member 'CoreAuricCellsBundleWidget_SetData::BundleData' has a wrong offset!");

// Function DBDUIViewsCore.CoreAuricCellsBundleWidget.SetRewardHighlight
// 0x0001 (0x0001 - 0x0000)
struct CoreAuricCellsBundleWidget_SetRewardHighlight final
{
public:
	bool                                          rewardHighlight;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuricCellsBundleWidget_SetRewardHighlight) == 0x000001, "Wrong alignment on CoreAuricCellsBundleWidget_SetRewardHighlight");
static_assert(sizeof(CoreAuricCellsBundleWidget_SetRewardHighlight) == 0x000001, "Wrong size on CoreAuricCellsBundleWidget_SetRewardHighlight");
static_assert(offsetof(CoreAuricCellsBundleWidget_SetRewardHighlight, rewardHighlight) == 0x000000, "Member 'CoreAuricCellsBundleWidget_SetRewardHighlight::rewardHighlight' has a wrong offset!");

// Function DBDUIViewsCore.CoreAuricCellsContainerWidget.OnBuyAction
// 0x000C (0x000C - 0x0000)
struct CoreAuricCellsContainerWidget_OnBuyAction final
{
public:
	class FName                                   bundleId;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuricCellsContainerWidget_OnBuyAction) == 0x000004, "Wrong alignment on CoreAuricCellsContainerWidget_OnBuyAction");
static_assert(sizeof(CoreAuricCellsContainerWidget_OnBuyAction) == 0x00000C, "Wrong size on CoreAuricCellsContainerWidget_OnBuyAction");
static_assert(offsetof(CoreAuricCellsContainerWidget_OnBuyAction, bundleId) == 0x000000, "Member 'CoreAuricCellsContainerWidget_OnBuyAction::bundleId' has a wrong offset!");

// Function DBDUIViewsCore.CoreAuricCellsContainerWidget.SetData
// 0x0010 (0x0010 - 0x0000)
struct CoreAuricCellsContainerWidget_SetData final
{
public:
	TArray<struct FAuricCellsBundleViewData>      bundlesData;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuricCellsContainerWidget_SetData) == 0x000008, "Wrong alignment on CoreAuricCellsContainerWidget_SetData");
static_assert(sizeof(CoreAuricCellsContainerWidget_SetData) == 0x000010, "Wrong size on CoreAuricCellsContainerWidget_SetData");
static_assert(offsetof(CoreAuricCellsContainerWidget_SetData, bundlesData) == 0x000000, "Member 'CoreAuricCellsContainerWidget_SetData::bundlesData' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuAddonWidget.GetAddonInventoryScale
// 0x0004 (0x0004 - 0x0000)
struct CoreMenuAddonWidget_GetAddonInventoryScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuAddonWidget_GetAddonInventoryScale) == 0x000004, "Wrong alignment on CoreMenuAddonWidget_GetAddonInventoryScale");
static_assert(sizeof(CoreMenuAddonWidget_GetAddonInventoryScale) == 0x000004, "Wrong size on CoreMenuAddonWidget_GetAddonInventoryScale");
static_assert(offsetof(CoreMenuAddonWidget_GetAddonInventoryScale, ReturnValue) == 0x000000, "Member 'CoreMenuAddonWidget_GetAddonInventoryScale::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreAuricCellsWidget.OnBuyAction
// 0x000C (0x000C - 0x0000)
struct CoreAuricCellsWidget_OnBuyAction final
{
public:
	class FName                                   bundleId;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreAuricCellsWidget_OnBuyAction) == 0x000004, "Wrong alignment on CoreAuricCellsWidget_OnBuyAction");
static_assert(sizeof(CoreAuricCellsWidget_OnBuyAction) == 0x00000C, "Wrong size on CoreAuricCellsWidget_OnBuyAction");
static_assert(offsetof(CoreAuricCellsWidget_OnBuyAction, bundleId) == 0x000000, "Member 'CoreAuricCellsWidget_OnBuyAction::bundleId' has a wrong offset!");

// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnConfirmButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonHovered) == 0x000008, "Wrong alignment on CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonHovered");
static_assert(sizeof(CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonHovered) == 0x000008, "Wrong size on CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonHovered");
static_assert(offsetof(CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonHovered, buttonTarget) == 0x000000, "Member 'CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnConfirmButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonUnhovered) == 0x000008, "Wrong alignment on CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonUnhovered");
static_assert(sizeof(CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonUnhovered) == 0x000008, "Wrong size on CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonUnhovered");
static_assert(offsetof(CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonUnhovered, buttonTarget) == 0x000000, "Member 'CoreBloodPointBulkSpendingPopupWidget_OnConfirmButtonUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnConfirmClicked
// 0x0001 (0x0001 - 0x0000)
struct CoreBloodPointBulkSpendingPopupWidget_OnConfirmClicked final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBloodPointBulkSpendingPopupWidget_OnConfirmClicked) == 0x000001, "Wrong alignment on CoreBloodPointBulkSpendingPopupWidget_OnConfirmClicked");
static_assert(sizeof(CoreBloodPointBulkSpendingPopupWidget_OnConfirmClicked) == 0x000001, "Wrong size on CoreBloodPointBulkSpendingPopupWidget_OnConfirmClicked");
static_assert(offsetof(CoreBloodPointBulkSpendingPopupWidget_OnConfirmClicked, currencyType) == 0x000000, "Member 'CoreBloodPointBulkSpendingPopupWidget_OnConfirmClicked::currencyType' has a wrong offset!");

// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnInputButtonPressed
// 0x0008 (0x0008 - 0x0000)
struct CoreBloodPointBulkSpendingPopupWidget_OnInputButtonPressed final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBloodPointBulkSpendingPopupWidget_OnInputButtonPressed) == 0x000008, "Wrong alignment on CoreBloodPointBulkSpendingPopupWidget_OnInputButtonPressed");
static_assert(sizeof(CoreBloodPointBulkSpendingPopupWidget_OnInputButtonPressed) == 0x000008, "Wrong size on CoreBloodPointBulkSpendingPopupWidget_OnInputButtonPressed");
static_assert(offsetof(CoreBloodPointBulkSpendingPopupWidget_OnInputButtonPressed, buttonTarget) == 0x000000, "Member 'CoreBloodPointBulkSpendingPopupWidget_OnInputButtonPressed::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnInputButtonReleased
// 0x0008 (0x0008 - 0x0000)
struct CoreBloodPointBulkSpendingPopupWidget_OnInputButtonReleased final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBloodPointBulkSpendingPopupWidget_OnInputButtonReleased) == 0x000008, "Wrong alignment on CoreBloodPointBulkSpendingPopupWidget_OnInputButtonReleased");
static_assert(sizeof(CoreBloodPointBulkSpendingPopupWidget_OnInputButtonReleased) == 0x000008, "Wrong size on CoreBloodPointBulkSpendingPopupWidget_OnInputButtonReleased");
static_assert(offsetof(CoreBloodPointBulkSpendingPopupWidget_OnInputButtonReleased, buttonTarget) == 0x000000, "Member 'CoreBloodPointBulkSpendingPopupWidget_OnInputButtonReleased::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnValueChanged
// 0x0018 (0x0018 - 0x0000)
struct CoreBloodPointBulkSpendingPopupWidget_OnValueChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBloodPointBulkSpendingPopupWidget_OnValueChanged) == 0x000008, "Wrong alignment on CoreBloodPointBulkSpendingPopupWidget_OnValueChanged");
static_assert(sizeof(CoreBloodPointBulkSpendingPopupWidget_OnValueChanged) == 0x000018, "Wrong size on CoreBloodPointBulkSpendingPopupWidget_OnValueChanged");
static_assert(offsetof(CoreBloodPointBulkSpendingPopupWidget_OnValueChanged, InText) == 0x000000, "Member 'CoreBloodPointBulkSpendingPopupWidget_OnValueChanged::InText' has a wrong offset!");

// Function DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget.OnValueCommitted
// 0x0020 (0x0020 - 0x0000)
struct CoreBloodPointBulkSpendingPopupWidget_OnValueCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   inCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreBloodPointBulkSpendingPopupWidget_OnValueCommitted) == 0x000008, "Wrong alignment on CoreBloodPointBulkSpendingPopupWidget_OnValueCommitted");
static_assert(sizeof(CoreBloodPointBulkSpendingPopupWidget_OnValueCommitted) == 0x000020, "Wrong size on CoreBloodPointBulkSpendingPopupWidget_OnValueCommitted");
static_assert(offsetof(CoreBloodPointBulkSpendingPopupWidget_OnValueCommitted, InText) == 0x000000, "Member 'CoreBloodPointBulkSpendingPopupWidget_OnValueCommitted::InText' has a wrong offset!");
static_assert(offsetof(CoreBloodPointBulkSpendingPopupWidget_OnValueCommitted, inCommitType) == 0x000018, "Member 'CoreBloodPointBulkSpendingPopupWidget_OnValueCommitted::inCommitType' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuPerkWidget.SetMenuPerkLevel
// 0x0004 (0x0004 - 0x0000)
struct CoreMenuPerkWidget_SetMenuPerkLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuPerkWidget_SetMenuPerkLevel) == 0x000004, "Wrong alignment on CoreMenuPerkWidget_SetMenuPerkLevel");
static_assert(sizeof(CoreMenuPerkWidget_SetMenuPerkLevel) == 0x000004, "Wrong size on CoreMenuPerkWidget_SetMenuPerkLevel");
static_assert(offsetof(CoreMenuPerkWidget_SetMenuPerkLevel, Level) == 0x000000, "Member 'CoreMenuPerkWidget_SetMenuPerkLevel::Level' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuPerkWidget.SetPerkLocked
// 0x0004 (0x0004 - 0x0000)
struct CoreMenuPerkWidget_SetPerkLocked final
{
public:
	int32                                         perkUnlockLevel;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuPerkWidget_SetPerkLocked) == 0x000004, "Wrong alignment on CoreMenuPerkWidget_SetPerkLocked");
static_assert(sizeof(CoreMenuPerkWidget_SetPerkLocked) == 0x000004, "Wrong size on CoreMenuPerkWidget_SetPerkLocked");
static_assert(offsetof(CoreMenuPerkWidget_SetPerkLocked, perkUnlockLevel) == 0x000000, "Member 'CoreMenuPerkWidget_SetPerkLocked::perkUnlockLevel' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeCardListWidget.OnIsScrollableChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreChallengeCardListWidget_OnIsScrollableChanged final
{
public:
	bool                                          IsScrollable;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeCardListWidget_OnIsScrollableChanged) == 0x000001, "Wrong alignment on CoreChallengeCardListWidget_OnIsScrollableChanged");
static_assert(sizeof(CoreChallengeCardListWidget_OnIsScrollableChanged) == 0x000001, "Wrong size on CoreChallengeCardListWidget_OnIsScrollableChanged");
static_assert(offsetof(CoreChallengeCardListWidget_OnIsScrollableChanged, IsScrollable) == 0x000000, "Member 'CoreChallengeCardListWidget_OnIsScrollableChanged::IsScrollable' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeCardListWidget.SetVisuals
// 0x0001 (0x0001 - 0x0000)
struct CoreChallengeCardListWidget_SetVisuals final
{
public:
	bool                                          IsEmpty;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeCardListWidget_SetVisuals) == 0x000001, "Wrong alignment on CoreChallengeCardListWidget_SetVisuals");
static_assert(sizeof(CoreChallengeCardListWidget_SetVisuals) == 0x000001, "Wrong size on CoreChallengeCardListWidget_SetVisuals");
static_assert(offsetof(CoreChallengeCardListWidget_SetVisuals, IsEmpty) == 0x000000, "Member 'CoreChallengeCardListWidget_SetVisuals::IsEmpty' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeCardWidget.OnRewardHoveredCallback
// 0x0008 (0x0008 - 0x0000)
struct CoreChallengeCardWidget_OnRewardHoveredCallback final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeCardWidget_OnRewardHoveredCallback) == 0x000008, "Wrong alignment on CoreChallengeCardWidget_OnRewardHoveredCallback");
static_assert(sizeof(CoreChallengeCardWidget_OnRewardHoveredCallback) == 0x000008, "Wrong size on CoreChallengeCardWidget_OnRewardHoveredCallback");
static_assert(offsetof(CoreChallengeCardWidget_OnRewardHoveredCallback, targetButton) == 0x000000, "Member 'CoreChallengeCardWidget_OnRewardHoveredCallback::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeCardWidget.OnRewardUnhoveredCallback
// 0x0008 (0x0008 - 0x0000)
struct CoreChallengeCardWidget_OnRewardUnhoveredCallback final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeCardWidget_OnRewardUnhoveredCallback) == 0x000008, "Wrong alignment on CoreChallengeCardWidget_OnRewardUnhoveredCallback");
static_assert(sizeof(CoreChallengeCardWidget_OnRewardUnhoveredCallback) == 0x000008, "Wrong size on CoreChallengeCardWidget_OnRewardUnhoveredCallback");
static_assert(offsetof(CoreChallengeCardWidget_OnRewardUnhoveredCallback, targetButton) == 0x000000, "Member 'CoreChallengeCardWidget_OnRewardUnhoveredCallback::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeCardWidget.UpdateHeaderBackground
// 0x0001 (0x0001 - 0x0000)
struct CoreChallengeCardWidget_UpdateHeaderBackground final
{
public:
	EPlayerRole                                   Role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeCardWidget_UpdateHeaderBackground) == 0x000001, "Wrong alignment on CoreChallengeCardWidget_UpdateHeaderBackground");
static_assert(sizeof(CoreChallengeCardWidget_UpdateHeaderBackground) == 0x000001, "Wrong size on CoreChallengeCardWidget_UpdateHeaderBackground");
static_assert(offsetof(CoreChallengeCardWidget_UpdateHeaderBackground, Role) == 0x000000, "Member 'CoreChallengeCardWidget_UpdateHeaderBackground::Role' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeCardWidget.UpdateVisuals
// 0x0002 (0x0002 - 0x0000)
struct CoreChallengeCardWidget_UpdateVisuals final
{
public:
	bool                                          IsCompleted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHovered_0;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeCardWidget_UpdateVisuals) == 0x000001, "Wrong alignment on CoreChallengeCardWidget_UpdateVisuals");
static_assert(sizeof(CoreChallengeCardWidget_UpdateVisuals) == 0x000002, "Wrong size on CoreChallengeCardWidget_UpdateVisuals");
static_assert(offsetof(CoreChallengeCardWidget_UpdateVisuals, IsCompleted) == 0x000000, "Member 'CoreChallengeCardWidget_UpdateVisuals::IsCompleted' has a wrong offset!");
static_assert(offsetof(CoreChallengeCardWidget_UpdateVisuals, IsHovered_0) == 0x000001, "Member 'CoreChallengeCardWidget_UpdateVisuals::IsHovered_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeCardWidget.GetLabelTooltipText
// 0x0018 (0x0018 - 0x0000)
struct CoreChallengeCardWidget_GetLabelTooltipText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeCardWidget_GetLabelTooltipText) == 0x000008, "Wrong alignment on CoreChallengeCardWidget_GetLabelTooltipText");
static_assert(sizeof(CoreChallengeCardWidget_GetLabelTooltipText) == 0x000018, "Wrong size on CoreChallengeCardWidget_GetLabelTooltipText");
static_assert(offsetof(CoreChallengeCardWidget_GetLabelTooltipText, ReturnValue) == 0x000000, "Member 'CoreChallengeCardWidget_GetLabelTooltipText::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeCardWidget.IsChallengeCompleted
// 0x0001 (0x0001 - 0x0000)
struct CoreChallengeCardWidget_IsChallengeCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeCardWidget_IsChallengeCompleted) == 0x000001, "Wrong alignment on CoreChallengeCardWidget_IsChallengeCompleted");
static_assert(sizeof(CoreChallengeCardWidget_IsChallengeCompleted) == 0x000001, "Wrong size on CoreChallengeCardWidget_IsChallengeCompleted");
static_assert(offsetof(CoreChallengeCardWidget_IsChallengeCompleted, ReturnValue) == 0x000000, "Member 'CoreChallengeCardWidget_IsChallengeCompleted::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeFilterWidget.OnClearFiltersClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreChallengeFilterWidget_OnClearFiltersClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeFilterWidget_OnClearFiltersClicked) == 0x000008, "Wrong alignment on CoreChallengeFilterWidget_OnClearFiltersClicked");
static_assert(sizeof(CoreChallengeFilterWidget_OnClearFiltersClicked) == 0x000008, "Wrong size on CoreChallengeFilterWidget_OnClearFiltersClicked");
static_assert(offsetof(CoreChallengeFilterWidget_OnClearFiltersClicked, buttonTarget) == 0x000000, "Member 'CoreChallengeFilterWidget_OnClearFiltersClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeFilterWidget.OnSortingChanged
// 0x0004 (0x0004 - 0x0000)
struct CoreChallengeFilterWidget_OnSortingChanged final
{
public:
	ESortingOption                                sorting;                                           // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESortingOrder                                 Order;                                             // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreChallengeFilterWidget_OnSortingChanged) == 0x000002, "Wrong alignment on CoreChallengeFilterWidget_OnSortingChanged");
static_assert(sizeof(CoreChallengeFilterWidget_OnSortingChanged) == 0x000004, "Wrong size on CoreChallengeFilterWidget_OnSortingChanged");
static_assert(offsetof(CoreChallengeFilterWidget_OnSortingChanged, sorting) == 0x000000, "Member 'CoreChallengeFilterWidget_OnSortingChanged::sorting' has a wrong offset!");
static_assert(offsetof(CoreChallengeFilterWidget_OnSortingChanged, Order) == 0x000002, "Member 'CoreChallengeFilterWidget_OnSortingChanged::Order' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeIconWidget.SetChallengeData
// 0x0C78 (0x0C78 - 0x0000)
struct CoreChallengeIconWidget_SetChallengeData final
{
public:
	struct FChallengeViewData                     ChallengeData;                                     // 0x0000(0x0C78)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeIconWidget_SetChallengeData) == 0x000008, "Wrong alignment on CoreChallengeIconWidget_SetChallengeData");
static_assert(sizeof(CoreChallengeIconWidget_SetChallengeData) == 0x000C78, "Wrong size on CoreChallengeIconWidget_SetChallengeData");
static_assert(offsetof(CoreChallengeIconWidget_SetChallengeData, ChallengeData) == 0x000000, "Member 'CoreChallengeIconWidget_SetChallengeData::ChallengeData' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeIconWidget.SetDefaultVisuals
// 0x0001 (0x0001 - 0x0000)
struct CoreChallengeIconWidget_SetDefaultVisuals final
{
public:
	EPlayerRole                                   Role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeIconWidget_SetDefaultVisuals) == 0x000001, "Wrong alignment on CoreChallengeIconWidget_SetDefaultVisuals");
static_assert(sizeof(CoreChallengeIconWidget_SetDefaultVisuals) == 0x000001, "Wrong size on CoreChallengeIconWidget_SetDefaultVisuals");
static_assert(offsetof(CoreChallengeIconWidget_SetDefaultVisuals, Role) == 0x000000, "Member 'CoreChallengeIconWidget_SetDefaultVisuals::Role' has a wrong offset!");

// Function DBDUIViewsCore.CoreExpandableListWidget.SetExpandable
// 0x0001 (0x0001 - 0x0000)
struct CoreExpandableListWidget_SetExpandable final
{
public:
	bool                                          IsExpandable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreExpandableListWidget_SetExpandable) == 0x000001, "Wrong alignment on CoreExpandableListWidget_SetExpandable");
static_assert(sizeof(CoreExpandableListWidget_SetExpandable) == 0x000001, "Wrong size on CoreExpandableListWidget_SetExpandable");
static_assert(offsetof(CoreExpandableListWidget_SetExpandable, IsExpandable) == 0x000000, "Member 'CoreExpandableListWidget_SetExpandable::IsExpandable' has a wrong offset!");

// Function DBDUIViewsCore.CoreExpandableListWidget.SetExpanded
// 0x0001 (0x0001 - 0x0000)
struct CoreExpandableListWidget_SetExpanded final
{
public:
	bool                                          shouldBeExpanded;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreExpandableListWidget_SetExpanded) == 0x000001, "Wrong alignment on CoreExpandableListWidget_SetExpanded");
static_assert(sizeof(CoreExpandableListWidget_SetExpanded) == 0x000001, "Wrong size on CoreExpandableListWidget_SetExpanded");
static_assert(offsetof(CoreExpandableListWidget_SetExpanded, shouldBeExpanded) == 0x000000, "Member 'CoreExpandableListWidget_SetExpanded::shouldBeExpanded' has a wrong offset!");

// Function DBDUIViewsCore.CoreExpandableListWidget.SetInitialVisuals
// 0x0001 (0x0001 - 0x0000)
struct CoreExpandableListWidget_SetInitialVisuals final
{
public:
	bool                                          IsExpanded;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreExpandableListWidget_SetInitialVisuals) == 0x000001, "Wrong alignment on CoreExpandableListWidget_SetInitialVisuals");
static_assert(sizeof(CoreExpandableListWidget_SetInitialVisuals) == 0x000001, "Wrong size on CoreExpandableListWidget_SetInitialVisuals");
static_assert(offsetof(CoreExpandableListWidget_SetInitialVisuals, IsExpanded) == 0x000000, "Member 'CoreExpandableListWidget_SetInitialVisuals::IsExpanded' has a wrong offset!");

// Function DBDUIViewsCore.CoreExpandableListWidget.IsExpandable
// 0x0001 (0x0001 - 0x0000)
struct CoreExpandableListWidget_IsExpandable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreExpandableListWidget_IsExpandable) == 0x000001, "Wrong alignment on CoreExpandableListWidget_IsExpandable");
static_assert(sizeof(CoreExpandableListWidget_IsExpandable) == 0x000001, "Wrong size on CoreExpandableListWidget_IsExpandable");
static_assert(offsetof(CoreExpandableListWidget_IsExpandable, ReturnValue) == 0x000000, "Member 'CoreExpandableListWidget_IsExpandable::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreExpandableListWidget.IsExpanded
// 0x0001 (0x0001 - 0x0000)
struct CoreExpandableListWidget_IsExpanded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreExpandableListWidget_IsExpanded) == 0x000001, "Wrong alignment on CoreExpandableListWidget_IsExpanded");
static_assert(sizeof(CoreExpandableListWidget_IsExpanded) == 0x000001, "Wrong size on CoreExpandableListWidget_IsExpanded");
static_assert(offsetof(CoreExpandableListWidget_IsExpanded, ReturnValue) == 0x000000, "Member 'CoreExpandableListWidget_IsExpanded::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeMenuSubListWidget.IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct CoreChallengeMenuSubListWidget_IsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeMenuSubListWidget_IsCompleted) == 0x000001, "Wrong alignment on CoreChallengeMenuSubListWidget_IsCompleted");
static_assert(sizeof(CoreChallengeMenuSubListWidget_IsCompleted) == 0x000001, "Wrong size on CoreChallengeMenuSubListWidget_IsCompleted");
static_assert(offsetof(CoreChallengeMenuSubListWidget_IsCompleted, ReturnValue) == 0x000000, "Member 'CoreChallengeMenuSubListWidget_IsCompleted::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeProgressBarWidget.SetChallengeData
// 0x0040 (0x0040 - 0x0000)
struct CoreChallengeProgressBarWidget_SetChallengeData final
{
public:
	class FText                                   descriptionText;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         progressFraction;                                  // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ProgressText;                                      // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         titleCharacterLimit;                               // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreChallengeProgressBarWidget_SetChallengeData) == 0x000008, "Wrong alignment on CoreChallengeProgressBarWidget_SetChallengeData");
static_assert(sizeof(CoreChallengeProgressBarWidget_SetChallengeData) == 0x000040, "Wrong size on CoreChallengeProgressBarWidget_SetChallengeData");
static_assert(offsetof(CoreChallengeProgressBarWidget_SetChallengeData, descriptionText) == 0x000000, "Member 'CoreChallengeProgressBarWidget_SetChallengeData::descriptionText' has a wrong offset!");
static_assert(offsetof(CoreChallengeProgressBarWidget_SetChallengeData, progressFraction) == 0x000018, "Member 'CoreChallengeProgressBarWidget_SetChallengeData::progressFraction' has a wrong offset!");
static_assert(offsetof(CoreChallengeProgressBarWidget_SetChallengeData, ProgressText) == 0x000020, "Member 'CoreChallengeProgressBarWidget_SetChallengeData::ProgressText' has a wrong offset!");
static_assert(offsetof(CoreChallengeProgressBarWidget_SetChallengeData, titleCharacterLimit) == 0x000038, "Member 'CoreChallengeProgressBarWidget_SetChallengeData::titleCharacterLimit' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeSetItemWidget.SetChallengeSetData
// 0x0270 (0x0270 - 0x0000)
struct CoreChallengeSetItemWidget_SetChallengeSetData final
{
public:
	struct FChallengeSetMenuViewData              ViewData;                                          // 0x0000(0x01D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FChallengeSkinUIData                   challengeSkinData;                                 // 0x01D8(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeSetItemWidget_SetChallengeSetData) == 0x000008, "Wrong alignment on CoreChallengeSetItemWidget_SetChallengeSetData");
static_assert(sizeof(CoreChallengeSetItemWidget_SetChallengeSetData) == 0x000270, "Wrong size on CoreChallengeSetItemWidget_SetChallengeSetData");
static_assert(offsetof(CoreChallengeSetItemWidget_SetChallengeSetData, ViewData) == 0x000000, "Member 'CoreChallengeSetItemWidget_SetChallengeSetData::ViewData' has a wrong offset!");
static_assert(offsetof(CoreChallengeSetItemWidget_SetChallengeSetData, challengeSkinData) == 0x0001D8, "Member 'CoreChallengeSetItemWidget_SetChallengeSetData::challengeSkinData' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeSetItemWidget.SetColorBackground
// 0x0008 (0x0008 - 0x0000)
struct CoreChallengeSetItemWidget_SetColorBackground final
{
public:
	class UColorTripleDataAsset*                  Color;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeSetItemWidget_SetColorBackground) == 0x000008, "Wrong alignment on CoreChallengeSetItemWidget_SetColorBackground");
static_assert(sizeof(CoreChallengeSetItemWidget_SetColorBackground) == 0x000008, "Wrong size on CoreChallengeSetItemWidget_SetColorBackground");
static_assert(offsetof(CoreChallengeSetItemWidget_SetColorBackground, Color) == 0x000000, "Member 'CoreChallengeSetItemWidget_SetColorBackground::Color' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeSetItemWidget.SetExpiredStateVisuals
// 0x0001 (0x0001 - 0x0000)
struct CoreChallengeSetItemWidget_SetExpiredStateVisuals final
{
public:
	bool                                          isExpired;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeSetItemWidget_SetExpiredStateVisuals) == 0x000001, "Wrong alignment on CoreChallengeSetItemWidget_SetExpiredStateVisuals");
static_assert(sizeof(CoreChallengeSetItemWidget_SetExpiredStateVisuals) == 0x000001, "Wrong size on CoreChallengeSetItemWidget_SetExpiredStateVisuals");
static_assert(offsetof(CoreChallengeSetItemWidget_SetExpiredStateVisuals, isExpired) == 0x000000, "Member 'CoreChallengeSetItemWidget_SetExpiredStateVisuals::isExpired' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeSetListWidget.OnItemSelected
// 0x0010 (0x0010 - 0x0000)
struct CoreChallengeSetListWidget_OnItemSelected final
{
public:
	class UCoreSelectableButtonWidget*            Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreChallengeSetListWidget_OnItemSelected) == 0x000008, "Wrong alignment on CoreChallengeSetListWidget_OnItemSelected");
static_assert(sizeof(CoreChallengeSetListWidget_OnItemSelected) == 0x000010, "Wrong size on CoreChallengeSetListWidget_OnItemSelected");
static_assert(offsetof(CoreChallengeSetListWidget_OnItemSelected, Button) == 0x000000, "Member 'CoreChallengeSetListWidget_OnItemSelected::Button' has a wrong offset!");
static_assert(offsetof(CoreChallengeSetListWidget_OnItemSelected, IsSelected) == 0x000008, "Member 'CoreChallengeSetListWidget_OnItemSelected::IsSelected' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeSetListWidget.SetChallengeSetData
// 0x0018 (0x0018 - 0x0000)
struct CoreChallengeSetListWidget_SetChallengeSetData final
{
public:
	TArray<struct FChallengeSetMenuViewData>      challengeSetArray;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UDataTable*                             eventSkinDataTable;                                // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeSetListWidget_SetChallengeSetData) == 0x000008, "Wrong alignment on CoreChallengeSetListWidget_SetChallengeSetData");
static_assert(sizeof(CoreChallengeSetListWidget_SetChallengeSetData) == 0x000018, "Wrong size on CoreChallengeSetListWidget_SetChallengeSetData");
static_assert(offsetof(CoreChallengeSetListWidget_SetChallengeSetData, challengeSetArray) == 0x000000, "Member 'CoreChallengeSetListWidget_SetChallengeSetData::challengeSetArray' has a wrong offset!");
static_assert(offsetof(CoreChallengeSetListWidget_SetChallengeSetData, eventSkinDataTable) == 0x000010, "Member 'CoreChallengeSetListWidget_SetChallengeSetData::eventSkinDataTable' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnChallengeSetSelected
// 0x0020 (0x0020 - 0x0000)
struct CoreChallengesMenuWidget_OnChallengeSetSelected final
{
public:
	class FString                                 ChallengeSetId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 eventFrameLabel;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengesMenuWidget_OnChallengeSetSelected) == 0x000008, "Wrong alignment on CoreChallengesMenuWidget_OnChallengeSetSelected");
static_assert(sizeof(CoreChallengesMenuWidget_OnChallengeSetSelected) == 0x000020, "Wrong size on CoreChallengesMenuWidget_OnChallengeSetSelected");
static_assert(offsetof(CoreChallengesMenuWidget_OnChallengeSetSelected, ChallengeSetId) == 0x000000, "Member 'CoreChallengesMenuWidget_OnChallengeSetSelected::ChallengeSetId' has a wrong offset!");
static_assert(offsetof(CoreChallengesMenuWidget_OnChallengeSetSelected, eventFrameLabel) == 0x000010, "Member 'CoreChallengesMenuWidget_OnChallengeSetSelected::eventFrameLabel' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnInfoButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreChallengesMenuWidget_OnInfoButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengesMenuWidget_OnInfoButtonClicked) == 0x000008, "Wrong alignment on CoreChallengesMenuWidget_OnInfoButtonClicked");
static_assert(sizeof(CoreChallengesMenuWidget_OnInfoButtonClicked) == 0x000008, "Wrong size on CoreChallengesMenuWidget_OnInfoButtonClicked");
static_assert(offsetof(CoreChallengesMenuWidget_OnInfoButtonClicked, buttonTarget) == 0x000000, "Member 'CoreChallengesMenuWidget_OnInfoButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnMenuTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreChallengesMenuWidget_OnMenuTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengesMenuWidget_OnMenuTabSelected) == 0x000008, "Wrong alignment on CoreChallengesMenuWidget_OnMenuTabSelected");
static_assert(sizeof(CoreChallengesMenuWidget_OnMenuTabSelected) == 0x000008, "Wrong size on CoreChallengesMenuWidget_OnMenuTabSelected");
static_assert(offsetof(CoreChallengesMenuWidget_OnMenuTabSelected, selectedButton) == 0x000000, "Member 'CoreChallengesMenuWidget_OnMenuTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnRiftButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreChallengesMenuWidget_OnRiftButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengesMenuWidget_OnRiftButtonClicked) == 0x000008, "Wrong alignment on CoreChallengesMenuWidget_OnRiftButtonClicked");
static_assert(sizeof(CoreChallengesMenuWidget_OnRiftButtonClicked) == 0x000008, "Wrong size on CoreChallengesMenuWidget_OnRiftButtonClicked");
static_assert(offsetof(CoreChallengesMenuWidget_OnRiftButtonClicked, buttonTarget) == 0x000000, "Member 'CoreChallengesMenuWidget_OnRiftButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengesMenuWidget.OnSettingsButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreChallengesMenuWidget_OnSettingsButtonClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengesMenuWidget_OnSettingsButtonClicked) == 0x000008, "Wrong alignment on CoreChallengesMenuWidget_OnSettingsButtonClicked");
static_assert(sizeof(CoreChallengesMenuWidget_OnSettingsButtonClicked) == 0x000008, "Wrong size on CoreChallengesMenuWidget_OnSettingsButtonClicked");
static_assert(offsetof(CoreChallengesMenuWidget_OnSettingsButtonClicked, Button) == 0x000000, "Member 'CoreChallengesMenuWidget_OnSettingsButtonClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengesMenuWidget.SetUiTakeoverVisuals
// 0x0001 (0x0001 - 0x0000)
struct CoreChallengesMenuWidget_SetUiTakeoverVisuals final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengesMenuWidget_SetUiTakeoverVisuals) == 0x000001, "Wrong alignment on CoreChallengesMenuWidget_SetUiTakeoverVisuals");
static_assert(sizeof(CoreChallengesMenuWidget_SetUiTakeoverVisuals) == 0x000001, "Wrong size on CoreChallengesMenuWidget_SetUiTakeoverVisuals");
static_assert(offsetof(CoreChallengesMenuWidget_SetUiTakeoverVisuals, IsActive) == 0x000000, "Member 'CoreChallengesMenuWidget_SetUiTakeoverVisuals::IsActive' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengesMenuWidget.UpdateChallengeMenuVisuals
// 0x0098 (0x0098 - 0x0000)
struct CoreChallengesMenuWidget_UpdateChallengeMenuVisuals final
{
public:
	struct FChallengeSkinUIData                   challengeSkinData;                                 // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengesMenuWidget_UpdateChallengeMenuVisuals) == 0x000008, "Wrong alignment on CoreChallengesMenuWidget_UpdateChallengeMenuVisuals");
static_assert(sizeof(CoreChallengesMenuWidget_UpdateChallengeMenuVisuals) == 0x000098, "Wrong size on CoreChallengesMenuWidget_UpdateChallengeMenuVisuals");
static_assert(offsetof(CoreChallengesMenuWidget_UpdateChallengeMenuVisuals, challengeSkinData) == 0x000000, "Member 'CoreChallengesMenuWidget_UpdateChallengeMenuVisuals::challengeSkinData' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeTrackerContainerWidget.OnWidgetClosingDone
// 0x0008 (0x0008 - 0x0000)
struct CoreChallengeTrackerContainerWidget_OnWidgetClosingDone final
{
public:
	class UCoreChallengeTrackerWidget*            trackerWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeTrackerContainerWidget_OnWidgetClosingDone) == 0x000008, "Wrong alignment on CoreChallengeTrackerContainerWidget_OnWidgetClosingDone");
static_assert(sizeof(CoreChallengeTrackerContainerWidget_OnWidgetClosingDone) == 0x000008, "Wrong size on CoreChallengeTrackerContainerWidget_OnWidgetClosingDone");
static_assert(offsetof(CoreChallengeTrackerContainerWidget_OnWidgetClosingDone, trackerWidget) == 0x000000, "Member 'CoreChallengeTrackerContainerWidget_OnWidgetClosingDone::trackerWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeTrackerContainerWidget.OnWidgetOpeningDone
// 0x0008 (0x0008 - 0x0000)
struct CoreChallengeTrackerContainerWidget_OnWidgetOpeningDone final
{
public:
	class UCoreChallengeTrackerWidget*            trackerWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeTrackerContainerWidget_OnWidgetOpeningDone) == 0x000008, "Wrong alignment on CoreChallengeTrackerContainerWidget_OnWidgetOpeningDone");
static_assert(sizeof(CoreChallengeTrackerContainerWidget_OnWidgetOpeningDone) == 0x000008, "Wrong size on CoreChallengeTrackerContainerWidget_OnWidgetOpeningDone");
static_assert(offsetof(CoreChallengeTrackerContainerWidget_OnWidgetOpeningDone, trackerWidget) == 0x000000, "Member 'CoreChallengeTrackerContainerWidget_OnWidgetOpeningDone::trackerWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeTrackerContainerWidget.OnWidgetProgressingDone
// 0x0008 (0x0008 - 0x0000)
struct CoreChallengeTrackerContainerWidget_OnWidgetProgressingDone final
{
public:
	class UCoreChallengeTrackerWidget*            trackerWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeTrackerContainerWidget_OnWidgetProgressingDone) == 0x000008, "Wrong alignment on CoreChallengeTrackerContainerWidget_OnWidgetProgressingDone");
static_assert(sizeof(CoreChallengeTrackerContainerWidget_OnWidgetProgressingDone) == 0x000008, "Wrong size on CoreChallengeTrackerContainerWidget_OnWidgetProgressingDone");
static_assert(offsetof(CoreChallengeTrackerContainerWidget_OnWidgetProgressingDone, trackerWidget) == 0x000000, "Member 'CoreChallengeTrackerContainerWidget_OnWidgetProgressingDone::trackerWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreChallengeTrackerWidget.GetChallengeSetIcon
// 0x0048 (0x0048 - 0x0000)
struct CoreChallengeTrackerWidget_GetChallengeSetIcon final
{
public:
	class FString                                 eventFrameLabel;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0010(0x0038)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChallengeTrackerWidget_GetChallengeSetIcon) == 0x000008, "Wrong alignment on CoreChallengeTrackerWidget_GetChallengeSetIcon");
static_assert(sizeof(CoreChallengeTrackerWidget_GetChallengeSetIcon) == 0x000048, "Wrong size on CoreChallengeTrackerWidget_GetChallengeSetIcon");
static_assert(offsetof(CoreChallengeTrackerWidget_GetChallengeSetIcon, eventFrameLabel) == 0x000000, "Member 'CoreChallengeTrackerWidget_GetChallengeSetIcon::eventFrameLabel' has a wrong offset!");
static_assert(offsetof(CoreChallengeTrackerWidget_GetChallengeSetIcon, ReturnValue) == 0x000010, "Member 'CoreChallengeTrackerWidget_GetChallengeSetIcon::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreCharacterPerksWidget.HideTooltip
// 0x0008 (0x0008 - 0x0000)
struct CoreCharacterPerksWidget_HideTooltip final
{
public:
	class UCoreButtonWidget*                      unhoveredSlotWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCharacterPerksWidget_HideTooltip) == 0x000008, "Wrong alignment on CoreCharacterPerksWidget_HideTooltip");
static_assert(sizeof(CoreCharacterPerksWidget_HideTooltip) == 0x000008, "Wrong size on CoreCharacterPerksWidget_HideTooltip");
static_assert(offsetof(CoreCharacterPerksWidget_HideTooltip, unhoveredSlotWidget) == 0x000000, "Member 'CoreCharacterPerksWidget_HideTooltip::unhoveredSlotWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreCharacterPerksWidget.SetData
// 0x0028 (0x0028 - 0x0000)
struct CoreCharacterPerksWidget_SetData final
{
public:
	TArray<class UMenuPerkViewData*>              CharacterUniquePerksViewData;                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMenuPowerViewData*                     KillerPowerViewData;                               // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          keepKillerPowerSizeWhenNotVisible;                 // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreCharacterPerksWidget_SetData) == 0x000008, "Wrong alignment on CoreCharacterPerksWidget_SetData");
static_assert(sizeof(CoreCharacterPerksWidget_SetData) == 0x000028, "Wrong size on CoreCharacterPerksWidget_SetData");
static_assert(offsetof(CoreCharacterPerksWidget_SetData, CharacterUniquePerksViewData) == 0x000000, "Member 'CoreCharacterPerksWidget_SetData::CharacterUniquePerksViewData' has a wrong offset!");
static_assert(offsetof(CoreCharacterPerksWidget_SetData, Role) == 0x000010, "Member 'CoreCharacterPerksWidget_SetData::Role' has a wrong offset!");
static_assert(offsetof(CoreCharacterPerksWidget_SetData, KillerPowerViewData) == 0x000018, "Member 'CoreCharacterPerksWidget_SetData::KillerPowerViewData' has a wrong offset!");
static_assert(offsetof(CoreCharacterPerksWidget_SetData, keepKillerPowerSizeWhenNotVisible) == 0x000020, "Member 'CoreCharacterPerksWidget_SetData::keepKillerPowerSizeWhenNotVisible' has a wrong offset!");

// Function DBDUIViewsCore.CoreCharacterPerksWidget.SetPerkData
// 0x0010 (0x0010 - 0x0000)
struct CoreCharacterPerksWidget_SetPerkData final
{
public:
	class UCoreMenuPerkWidget*                    perkWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMenuPerkViewData*                      PerkViewData;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCharacterPerksWidget_SetPerkData) == 0x000008, "Wrong alignment on CoreCharacterPerksWidget_SetPerkData");
static_assert(sizeof(CoreCharacterPerksWidget_SetPerkData) == 0x000010, "Wrong size on CoreCharacterPerksWidget_SetPerkData");
static_assert(offsetof(CoreCharacterPerksWidget_SetPerkData, perkWidget) == 0x000000, "Member 'CoreCharacterPerksWidget_SetPerkData::perkWidget' has a wrong offset!");
static_assert(offsetof(CoreCharacterPerksWidget_SetPerkData, PerkViewData) == 0x000008, "Member 'CoreCharacterPerksWidget_SetPerkData::PerkViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreCharacterPerksWidget.ShowTooltip
// 0x0008 (0x0008 - 0x0000)
struct CoreCharacterPerksWidget_ShowTooltip final
{
public:
	class UCoreButtonWidget*                      hoveredSlotWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCharacterPerksWidget_ShowTooltip) == 0x000008, "Wrong alignment on CoreCharacterPerksWidget_ShowTooltip");
static_assert(sizeof(CoreCharacterPerksWidget_ShowTooltip) == 0x000008, "Wrong size on CoreCharacterPerksWidget_ShowTooltip");
static_assert(offsetof(CoreCharacterPerksWidget_ShowTooltip, hoveredSlotWidget) == 0x000000, "Member 'CoreCharacterPerksWidget_ShowTooltip::hoveredSlotWidget' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerProfileWidget.OnPlayerCardButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CorePlayerProfileWidget_OnPlayerCardButtonHovered final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerProfileWidget_OnPlayerCardButtonHovered) == 0x000008, "Wrong alignment on CorePlayerProfileWidget_OnPlayerCardButtonHovered");
static_assert(sizeof(CorePlayerProfileWidget_OnPlayerCardButtonHovered) == 0x000008, "Wrong size on CorePlayerProfileWidget_OnPlayerCardButtonHovered");
static_assert(offsetof(CorePlayerProfileWidget_OnPlayerCardButtonHovered, Button) == 0x000000, "Member 'CorePlayerProfileWidget_OnPlayerCardButtonHovered::Button' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerProfileWidget.OnPlayerCardButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CorePlayerProfileWidget_OnPlayerCardButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerProfileWidget_OnPlayerCardButtonUnhovered) == 0x000008, "Wrong alignment on CorePlayerProfileWidget_OnPlayerCardButtonUnhovered");
static_assert(sizeof(CorePlayerProfileWidget_OnPlayerCardButtonUnhovered) == 0x000008, "Wrong size on CorePlayerProfileWidget_OnPlayerCardButtonUnhovered");
static_assert(offsetof(CorePlayerProfileWidget_OnPlayerCardButtonUnhovered, Button) == 0x000000, "Member 'CorePlayerProfileWidget_OnPlayerCardButtonUnhovered::Button' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerProfileWidget.OnPlayerProfileClicked
// 0x0008 (0x0008 - 0x0000)
struct CorePlayerProfileWidget_OnPlayerProfileClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerProfileWidget_OnPlayerProfileClicked) == 0x000008, "Wrong alignment on CorePlayerProfileWidget_OnPlayerProfileClicked");
static_assert(sizeof(CorePlayerProfileWidget_OnPlayerProfileClicked) == 0x000008, "Wrong size on CorePlayerProfileWidget_OnPlayerProfileClicked");
static_assert(offsetof(CorePlayerProfileWidget_OnPlayerProfileClicked, Button) == 0x000000, "Member 'CorePlayerProfileWidget_OnPlayerProfileClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerProfileWidget.SetBadgeBannerData
// 0x0158 (0x0158 - 0x0000)
struct CorePlayerProfileWidget_SetBadgeBannerData final
{
public:
	struct FPlayerCardViewData                    Badge;                                             // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPlayerCardViewData                    Banner;                                            // 0x00A8(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          showBanner;                                        // 0x0150(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerProfileWidget_SetBadgeBannerData) == 0x000008, "Wrong alignment on CorePlayerProfileWidget_SetBadgeBannerData");
static_assert(sizeof(CorePlayerProfileWidget_SetBadgeBannerData) == 0x000158, "Wrong size on CorePlayerProfileWidget_SetBadgeBannerData");
static_assert(offsetof(CorePlayerProfileWidget_SetBadgeBannerData, Badge) == 0x000000, "Member 'CorePlayerProfileWidget_SetBadgeBannerData::Badge' has a wrong offset!");
static_assert(offsetof(CorePlayerProfileWidget_SetBadgeBannerData, Banner) == 0x0000A8, "Member 'CorePlayerProfileWidget_SetBadgeBannerData::Banner' has a wrong offset!");
static_assert(offsetof(CorePlayerProfileWidget_SetBadgeBannerData, showBanner) == 0x000150, "Member 'CorePlayerProfileWidget_SetBadgeBannerData::showBanner' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerProfileWidget.SetPlayerCardAnimation
// 0x0001 (0x0001 - 0x0000)
struct CorePlayerProfileWidget_SetPlayerCardAnimation final
{
public:
	bool                                          IsAnimationPlaying_0;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerProfileWidget_SetPlayerCardAnimation) == 0x000001, "Wrong alignment on CorePlayerProfileWidget_SetPlayerCardAnimation");
static_assert(sizeof(CorePlayerProfileWidget_SetPlayerCardAnimation) == 0x000001, "Wrong size on CorePlayerProfileWidget_SetPlayerCardAnimation");
static_assert(offsetof(CorePlayerProfileWidget_SetPlayerCardAnimation, IsAnimationPlaying_0) == 0x000000, "Member 'CorePlayerProfileWidget_SetPlayerCardAnimation::IsAnimationPlaying_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWidget.BindHoverBorder
// 0x0001 (0x0001 - 0x0000)
struct CoreRewardWidget_BindHoverBorder final
{
public:
	bool                                          bind;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWidget_BindHoverBorder) == 0x000001, "Wrong alignment on CoreRewardWidget_BindHoverBorder");
static_assert(sizeof(CoreRewardWidget_BindHoverBorder) == 0x000001, "Wrong size on CoreRewardWidget_BindHoverBorder");
static_assert(offsetof(CoreRewardWidget_BindHoverBorder, bind) == 0x000000, "Member 'CoreRewardWidget_BindHoverBorder::bind' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWidget.OnButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreRewardWidget_OnButtonHovered final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWidget_OnButtonHovered) == 0x000008, "Wrong alignment on CoreRewardWidget_OnButtonHovered");
static_assert(sizeof(CoreRewardWidget_OnButtonHovered) == 0x000008, "Wrong size on CoreRewardWidget_OnButtonHovered");
static_assert(offsetof(CoreRewardWidget_OnButtonHovered, targetButton) == 0x000000, "Member 'CoreRewardWidget_OnButtonHovered::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWidget.OnButtonSelectedChanged
// 0x0010 (0x0010 - 0x0000)
struct CoreRewardWidget_OnButtonSelectedChanged final
{
public:
	class UCoreSelectableButtonWidget*            targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected_0;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreRewardWidget_OnButtonSelectedChanged) == 0x000008, "Wrong alignment on CoreRewardWidget_OnButtonSelectedChanged");
static_assert(sizeof(CoreRewardWidget_OnButtonSelectedChanged) == 0x000010, "Wrong size on CoreRewardWidget_OnButtonSelectedChanged");
static_assert(offsetof(CoreRewardWidget_OnButtonSelectedChanged, targetButton) == 0x000000, "Member 'CoreRewardWidget_OnButtonSelectedChanged::targetButton' has a wrong offset!");
static_assert(offsetof(CoreRewardWidget_OnButtonSelectedChanged, IsSelected_0) == 0x000008, "Member 'CoreRewardWidget_OnButtonSelectedChanged::IsSelected_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWidget.OnButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreRewardWidget_OnButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWidget_OnButtonUnhovered) == 0x000008, "Wrong alignment on CoreRewardWidget_OnButtonUnhovered");
static_assert(sizeof(CoreRewardWidget_OnButtonUnhovered) == 0x000008, "Wrong size on CoreRewardWidget_OnButtonUnhovered");
static_assert(offsetof(CoreRewardWidget_OnButtonUnhovered, targetButton) == 0x000000, "Member 'CoreRewardWidget_OnButtonUnhovered::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWidget.SetIsLocked
// 0x0002 (0x0002 - 0x0000)
struct CoreRewardWidget_SetIsLocked final
{
public:
	bool                                          IsLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useAnimation;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWidget_SetIsLocked) == 0x000001, "Wrong alignment on CoreRewardWidget_SetIsLocked");
static_assert(sizeof(CoreRewardWidget_SetIsLocked) == 0x000002, "Wrong size on CoreRewardWidget_SetIsLocked");
static_assert(offsetof(CoreRewardWidget_SetIsLocked, IsLocked) == 0x000000, "Member 'CoreRewardWidget_SetIsLocked::IsLocked' has a wrong offset!");
static_assert(offsetof(CoreRewardWidget_SetIsLocked, useAnimation) == 0x000001, "Member 'CoreRewardWidget_SetIsLocked::useAnimation' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWidget.SetRewardData
// 0x0070 (0x0070 - 0x0000)
struct CoreRewardWidget_SetRewardData final
{
public:
	struct FRewardViewData                        RewardData;                                        // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWidget_SetRewardData) == 0x000008, "Wrong alignment on CoreRewardWidget_SetRewardData");
static_assert(sizeof(CoreRewardWidget_SetRewardData) == 0x000070, "Wrong size on CoreRewardWidget_SetRewardData");
static_assert(offsetof(CoreRewardWidget_SetRewardData, RewardData) == 0x000000, "Member 'CoreRewardWidget_SetRewardData::RewardData' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWidget.SetRewardScale
// 0x0004 (0x0004 - 0x0000)
struct CoreRewardWidget_SetRewardScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWidget_SetRewardScale) == 0x000004, "Wrong alignment on CoreRewardWidget_SetRewardScale");
static_assert(sizeof(CoreRewardWidget_SetRewardScale) == 0x000004, "Wrong size on CoreRewardWidget_SetRewardScale");
static_assert(offsetof(CoreRewardWidget_SetRewardScale, Scale) == 0x000000, "Member 'CoreRewardWidget_SetRewardScale::Scale' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWidget.SetTooltipAlignment
// 0x0001 (0x0001 - 0x0000)
struct CoreRewardWidget_SetTooltipAlignment final
{
public:
	ETooltipHorizontalAlignment                   Alignment;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWidget_SetTooltipAlignment) == 0x000001, "Wrong alignment on CoreRewardWidget_SetTooltipAlignment");
static_assert(sizeof(CoreRewardWidget_SetTooltipAlignment) == 0x000001, "Wrong size on CoreRewardWidget_SetTooltipAlignment");
static_assert(offsetof(CoreRewardWidget_SetTooltipAlignment, Alignment) == 0x000000, "Member 'CoreRewardWidget_SetTooltipAlignment::Alignment' has a wrong offset!");

// Function DBDUIViewsCore.CoreCharacterRewardWidget.SetCharacterRewardData
// 0x0148 (0x0148 - 0x0000)
struct CoreCharacterRewardWidget_SetCharacterRewardData final
{
public:
	struct FCharacterRewardViewData               CharacterRewardViewData;                           // 0x0000(0x0148)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCharacterRewardWidget_SetCharacterRewardData) == 0x000008, "Wrong alignment on CoreCharacterRewardWidget_SetCharacterRewardData");
static_assert(sizeof(CoreCharacterRewardWidget_SetCharacterRewardData) == 0x000148, "Wrong size on CoreCharacterRewardWidget_SetCharacterRewardData");
static_assert(offsetof(CoreCharacterRewardWidget_SetCharacterRewardData, CharacterRewardViewData) == 0x000000, "Member 'CoreCharacterRewardWidget_SetCharacterRewardData::CharacterRewardViewData' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerCardAnimationWidget.SetMaterialAnimated
// 0x0001 (0x0001 - 0x0000)
struct CorePlayerCardAnimationWidget_SetMaterialAnimated final
{
public:
	bool                                          IsAnimated;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerCardAnimationWidget_SetMaterialAnimated) == 0x000001, "Wrong alignment on CorePlayerCardAnimationWidget_SetMaterialAnimated");
static_assert(sizeof(CorePlayerCardAnimationWidget_SetMaterialAnimated) == 0x000001, "Wrong size on CorePlayerCardAnimationWidget_SetMaterialAnimated");
static_assert(offsetof(CorePlayerCardAnimationWidget_SetMaterialAnimated, IsAnimated) == 0x000000, "Member 'CorePlayerCardAnimationWidget_SetMaterialAnimated::IsAnimated' has a wrong offset!");

// Function DBDUIViewsCore.CoreChatMessageWidget.SetPlayerMessage
// 0x0028 (0x0028 - 0x0000)
struct CoreChatMessageWidget_SetPlayerMessage final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChatMessageWidget_SetPlayerMessage) == 0x000008, "Wrong alignment on CoreChatMessageWidget_SetPlayerMessage");
static_assert(sizeof(CoreChatMessageWidget_SetPlayerMessage) == 0x000028, "Wrong size on CoreChatMessageWidget_SetPlayerMessage");
static_assert(offsetof(CoreChatMessageWidget_SetPlayerMessage, PlayerIndex) == 0x000000, "Member 'CoreChatMessageWidget_SetPlayerMessage::PlayerIndex' has a wrong offset!");
static_assert(offsetof(CoreChatMessageWidget_SetPlayerMessage, PlayerName) == 0x000008, "Member 'CoreChatMessageWidget_SetPlayerMessage::PlayerName' has a wrong offset!");
static_assert(offsetof(CoreChatMessageWidget_SetPlayerMessage, Message) == 0x000018, "Member 'CoreChatMessageWidget_SetPlayerMessage::Message' has a wrong offset!");

// Function DBDUIViewsCore.CoreChatMessageWidget.SetSystemMessage
// 0x0010 (0x0010 - 0x0000)
struct CoreChatMessageWidget_SetSystemMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChatMessageWidget_SetSystemMessage) == 0x000008, "Wrong alignment on CoreChatMessageWidget_SetSystemMessage");
static_assert(sizeof(CoreChatMessageWidget_SetSystemMessage) == 0x000010, "Wrong size on CoreChatMessageWidget_SetSystemMessage");
static_assert(offsetof(CoreChatMessageWidget_SetSystemMessage, Message) == 0x000000, "Member 'CoreChatMessageWidget_SetSystemMessage::Message' has a wrong offset!");

// Function DBDUIViewsCore.CoreChatMessageWidget.SetSystemWarningMessage
// 0x0010 (0x0010 - 0x0000)
struct CoreChatMessageWidget_SetSystemWarningMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChatMessageWidget_SetSystemWarningMessage) == 0x000008, "Wrong alignment on CoreChatMessageWidget_SetSystemWarningMessage");
static_assert(sizeof(CoreChatMessageWidget_SetSystemWarningMessage) == 0x000010, "Wrong size on CoreChatMessageWidget_SetSystemWarningMessage");
static_assert(offsetof(CoreChatMessageWidget_SetSystemWarningMessage, Message) == 0x000000, "Member 'CoreChatMessageWidget_SetSystemWarningMessage::Message' has a wrong offset!");

// Function DBDUIViewsCore.CoreChatWidget.OnCollapseClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreChatWidget_OnCollapseClicked final
{
public:
	class UCoreButtonWidget*                      CoreButtonWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChatWidget_OnCollapseClicked) == 0x000008, "Wrong alignment on CoreChatWidget_OnCollapseClicked");
static_assert(sizeof(CoreChatWidget_OnCollapseClicked) == 0x000008, "Wrong size on CoreChatWidget_OnCollapseClicked");
static_assert(offsetof(CoreChatWidget_OnCollapseClicked, CoreButtonWidget) == 0x000000, "Member 'CoreChatWidget_OnCollapseClicked::CoreButtonWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreChatWidget.OnExpandClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreChatWidget_OnExpandClicked final
{
public:
	class UCoreButtonWidget*                      CoreButtonWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChatWidget_OnExpandClicked) == 0x000008, "Wrong alignment on CoreChatWidget_OnExpandClicked");
static_assert(sizeof(CoreChatWidget_OnExpandClicked) == 0x000008, "Wrong size on CoreChatWidget_OnExpandClicked");
static_assert(offsetof(CoreChatWidget_OnExpandClicked, CoreButtonWidget) == 0x000000, "Member 'CoreChatWidget_OnExpandClicked::CoreButtonWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreChatWidget.OnIsScrollableChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreChatWidget_OnIsScrollableChanged final
{
public:
	bool                                          IsScrollable;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreChatWidget_OnIsScrollableChanged) == 0x000001, "Wrong alignment on CoreChatWidget_OnIsScrollableChanged");
static_assert(sizeof(CoreChatWidget_OnIsScrollableChanged) == 0x000001, "Wrong size on CoreChatWidget_OnIsScrollableChanged");
static_assert(offsetof(CoreChatWidget_OnIsScrollableChanged, IsScrollable) == 0x000000, "Member 'CoreChatWidget_OnIsScrollableChanged::IsScrollable' has a wrong offset!");

// Function DBDUIViewsCore.CoreChatWidget.OnTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct CoreChatWidget_OnTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreChatWidget_OnTextCommitted) == 0x000008, "Wrong alignment on CoreChatWidget_OnTextCommitted");
static_assert(sizeof(CoreChatWidget_OnTextCommitted) == 0x000020, "Wrong size on CoreChatWidget_OnTextCommitted");
static_assert(offsetof(CoreChatWidget_OnTextCommitted, Text) == 0x000000, "Member 'CoreChatWidget_OnTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(CoreChatWidget_OnTextCommitted, CommitMethod) == 0x000018, "Member 'CoreChatWidget_OnTextCommitted::CommitMethod' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.SetTutorialDescription
// 0x0020 (0x0020 - 0x0000)
struct CoreOnboardingTutorialPanelWidget_SetTutorialDescription final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isWarning;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreOnboardingTutorialPanelWidget_SetTutorialDescription) == 0x000008, "Wrong alignment on CoreOnboardingTutorialPanelWidget_SetTutorialDescription");
static_assert(sizeof(CoreOnboardingTutorialPanelWidget_SetTutorialDescription) == 0x000020, "Wrong size on CoreOnboardingTutorialPanelWidget_SetTutorialDescription");
static_assert(offsetof(CoreOnboardingTutorialPanelWidget_SetTutorialDescription, Description) == 0x000000, "Member 'CoreOnboardingTutorialPanelWidget_SetTutorialDescription::Description' has a wrong offset!");
static_assert(offsetof(CoreOnboardingTutorialPanelWidget_SetTutorialDescription, isWarning) == 0x000018, "Member 'CoreOnboardingTutorialPanelWidget_SetTutorialDescription::isWarning' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.SetTutorialSeparators
// 0x0010 (0x0010 - 0x0000)
struct CoreOnboardingTutorialPanelWidget_SetTutorialSeparators final
{
public:
	class FString                                 completedStepId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialPanelWidget_SetTutorialSeparators) == 0x000008, "Wrong alignment on CoreOnboardingTutorialPanelWidget_SetTutorialSeparators");
static_assert(sizeof(CoreOnboardingTutorialPanelWidget_SetTutorialSeparators) == 0x000010, "Wrong size on CoreOnboardingTutorialPanelWidget_SetTutorialSeparators");
static_assert(offsetof(CoreOnboardingTutorialPanelWidget_SetTutorialSeparators, completedStepId) == 0x000000, "Member 'CoreOnboardingTutorialPanelWidget_SetTutorialSeparators::completedStepId' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.TryBroadcastSelectedTutorial
// 0x0008 (0x0008 - 0x0000)
struct CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial) == 0x000008, "Wrong alignment on CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial");
static_assert(sizeof(CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial) == 0x000008, "Wrong size on CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial");
static_assert(offsetof(CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial, buttonTarget) == 0x000000, "Member 'CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreCreditsWidget.OnScrollEnd
// 0x0008 (0x0008 - 0x0000)
struct CoreCreditsWidget_OnScrollEnd final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCreditsWidget_OnScrollEnd) == 0x000008, "Wrong alignment on CoreCreditsWidget_OnScrollEnd");
static_assert(sizeof(CoreCreditsWidget_OnScrollEnd) == 0x000008, "Wrong size on CoreCreditsWidget_OnScrollEnd");
static_assert(offsetof(CoreCreditsWidget_OnScrollEnd, tween) == 0x000000, "Member 'CoreCreditsWidget_OnScrollEnd::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerButtonWidget.SetKeyOverride
// 0x0020 (0x0020 - 0x0000)
struct CoreKeyListenerButtonWidget_SetKeyOverride final
{
public:
	struct FKey                                   keyOverride;                                       // 0x0000(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerButtonWidget_SetKeyOverride) == 0x000008, "Wrong alignment on CoreKeyListenerButtonWidget_SetKeyOverride");
static_assert(sizeof(CoreKeyListenerButtonWidget_SetKeyOverride) == 0x000020, "Wrong size on CoreKeyListenerButtonWidget_SetKeyOverride");
static_assert(offsetof(CoreKeyListenerButtonWidget_SetKeyOverride, keyOverride) == 0x000000, "Member 'CoreKeyListenerButtonWidget_SetKeyOverride::keyOverride' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerButtonWidget.SetUIAction
// 0x0001 (0x0001 - 0x0000)
struct CoreKeyListenerButtonWidget_SetUIAction final
{
public:
	EUIActionType                                 ActionType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerButtonWidget_SetUIAction) == 0x000001, "Wrong alignment on CoreKeyListenerButtonWidget_SetUIAction");
static_assert(sizeof(CoreKeyListenerButtonWidget_SetUIAction) == 0x000001, "Wrong size on CoreKeyListenerButtonWidget_SetUIAction");
static_assert(offsetof(CoreKeyListenerButtonWidget_SetUIAction, ActionType) == 0x000000, "Member 'CoreKeyListenerButtonWidget_SetUIAction::ActionType' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerLevelWidget.SetData
// 0x0018 (0x0018 - 0x0000)
struct CorePlayerLevelWidget_SetData final
{
public:
	struct FPlayerLevelViewData                   ViewData;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerLevelWidget_SetData) == 0x000004, "Wrong alignment on CorePlayerLevelWidget_SetData");
static_assert(sizeof(CorePlayerLevelWidget_SetData) == 0x000018, "Wrong size on CorePlayerLevelWidget_SetData");
static_assert(offsetof(CorePlayerLevelWidget_SetData, ViewData) == 0x000000, "Member 'CorePlayerLevelWidget_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyButtonWidget.OnCurrencyButtonPressed
// 0x0008 (0x0008 - 0x0000)
struct CoreCurrencyButtonWidget_OnCurrencyButtonPressed final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyButtonWidget_OnCurrencyButtonPressed) == 0x000008, "Wrong alignment on CoreCurrencyButtonWidget_OnCurrencyButtonPressed");
static_assert(sizeof(CoreCurrencyButtonWidget_OnCurrencyButtonPressed) == 0x000008, "Wrong size on CoreCurrencyButtonWidget_OnCurrencyButtonPressed");
static_assert(offsetof(CoreCurrencyButtonWidget_OnCurrencyButtonPressed, Button) == 0x000000, "Member 'CoreCurrencyButtonWidget_OnCurrencyButtonPressed::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyButtonWidget.SetCurrencyData
// 0x0050 (0x0050 - 0x0000)
struct CoreCurrencyButtonWidget_SetCurrencyData final
{
public:
	struct FPriceTagViewData                      CurrencyData;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyButtonWidget_SetCurrencyData) == 0x000008, "Wrong alignment on CoreCurrencyButtonWidget_SetCurrencyData");
static_assert(sizeof(CoreCurrencyButtonWidget_SetCurrencyData) == 0x000050, "Wrong size on CoreCurrencyButtonWidget_SetCurrencyData");
static_assert(offsetof(CoreCurrencyButtonWidget_SetCurrencyData, CurrencyData) == 0x000000, "Member 'CoreCurrencyButtonWidget_SetCurrencyData::CurrencyData' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyButtonWidget.SetModalEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreCurrencyButtonWidget_SetModalEnabled final
{
public:
	bool                                          IsEnabled_0;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyButtonWidget_SetModalEnabled) == 0x000001, "Wrong alignment on CoreCurrencyButtonWidget_SetModalEnabled");
static_assert(sizeof(CoreCurrencyButtonWidget_SetModalEnabled) == 0x000001, "Wrong size on CoreCurrencyButtonWidget_SetModalEnabled");
static_assert(offsetof(CoreCurrencyButtonWidget_SetModalEnabled, IsEnabled_0) == 0x000000, "Member 'CoreCurrencyButtonWidget_SetModalEnabled::IsEnabled_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyButtonWidget.GetCurrencyType
// 0x0001 (0x0001 - 0x0000)
struct CoreCurrencyButtonWidget_GetCurrencyType final
{
public:
	ECurrencyType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyButtonWidget_GetCurrencyType) == 0x000001, "Wrong alignment on CoreCurrencyButtonWidget_GetCurrencyType");
static_assert(sizeof(CoreCurrencyButtonWidget_GetCurrencyType) == 0x000001, "Wrong size on CoreCurrencyButtonWidget_GetCurrencyType");
static_assert(offsetof(CoreCurrencyButtonWidget_GetCurrencyType, ReturnValue) == 0x000000, "Member 'CoreCurrencyButtonWidget_GetCurrencyType::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyButtonWidget.SetBackgroundVisible
// 0x0001 (0x0001 - 0x0000)
struct CoreCurrencyButtonWidget_SetBackgroundVisible final
{
public:
	bool                                          ShowBackground;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyButtonWidget_SetBackgroundVisible) == 0x000001, "Wrong alignment on CoreCurrencyButtonWidget_SetBackgroundVisible");
static_assert(sizeof(CoreCurrencyButtonWidget_SetBackgroundVisible) == 0x000001, "Wrong size on CoreCurrencyButtonWidget_SetBackgroundVisible");
static_assert(offsetof(CoreCurrencyButtonWidget_SetBackgroundVisible, ShowBackground) == 0x000000, "Member 'CoreCurrencyButtonWidget_SetBackgroundVisible::ShowBackground' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyExpirationLabelWidget.SetData
// 0x0020 (0x0020 - 0x0000)
struct CoreCurrencyExpirationLabelWidget_SetData final
{
public:
	struct FCurrencyExpirationLabelViewData       ViewData;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyExpirationLabelWidget_SetData) == 0x000008, "Wrong alignment on CoreCurrencyExpirationLabelWidget_SetData");
static_assert(sizeof(CoreCurrencyExpirationLabelWidget_SetData) == 0x000020, "Wrong size on CoreCurrencyExpirationLabelWidget_SetData");
static_assert(offsetof(CoreCurrencyExpirationLabelWidget_SetData, ViewData) == 0x000000, "Member 'CoreCurrencyExpirationLabelWidget_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CorePowerBundleWidget.SetActiveState
// 0x0001 (0x0001 - 0x0000)
struct CorePowerBundleWidget_SetActiveState final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePowerBundleWidget_SetActiveState) == 0x000001, "Wrong alignment on CorePowerBundleWidget_SetActiveState");
static_assert(sizeof(CorePowerBundleWidget_SetActiveState) == 0x000001, "Wrong size on CorePowerBundleWidget_SetActiveState");
static_assert(offsetof(CorePowerBundleWidget_SetActiveState, IsActive) == 0x000000, "Member 'CorePowerBundleWidget_SetActiveState::IsActive' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyForTooltipsWidget.SetData
// 0x01B8 (0x01B8 - 0x0000)
struct CoreCurrencyForTooltipsWidget_SetData final
{
public:
	struct FCurrencyProgressionRewardViewData     currencyRewardViewData;                            // 0x0000(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyForTooltipsWidget_SetData) == 0x000008, "Wrong alignment on CoreCurrencyForTooltipsWidget_SetData");
static_assert(sizeof(CoreCurrencyForTooltipsWidget_SetData) == 0x0001B8, "Wrong size on CoreCurrencyForTooltipsWidget_SetData");
static_assert(offsetof(CoreCurrencyForTooltipsWidget_SetData, currencyRewardViewData) == 0x000000, "Member 'CoreCurrencyForTooltipsWidget_SetData::currencyRewardViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.OnAlignmentChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreKeyListenerInputPromptWidget_OnAlignmentChanged final
{
public:
	ETextJustify                                  newAlignment;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_OnAlignmentChanged) == 0x000001, "Wrong alignment on CoreKeyListenerInputPromptWidget_OnAlignmentChanged");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_OnAlignmentChanged) == 0x000001, "Wrong size on CoreKeyListenerInputPromptWidget_OnAlignmentChanged");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_OnAlignmentChanged, newAlignment) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_OnAlignmentChanged::newAlignment' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.OnChargingTick
// 0x0004 (0x0004 - 0x0000)
struct CoreKeyListenerInputPromptWidget_OnChargingTick final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_OnChargingTick) == 0x000004, "Wrong alignment on CoreKeyListenerInputPromptWidget_OnChargingTick");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_OnChargingTick) == 0x000004, "Wrong size on CoreKeyListenerInputPromptWidget_OnChargingTick");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_OnChargingTick, Progress) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_OnChargingTick::Progress' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.OnEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreKeyListenerInputPromptWidget_OnEnabledChanged final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_OnEnabledChanged) == 0x000001, "Wrong alignment on CoreKeyListenerInputPromptWidget_OnEnabledChanged");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_OnEnabledChanged) == 0x000001, "Wrong size on CoreKeyListenerInputPromptWidget_OnEnabledChanged");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_OnEnabledChanged, IsEnabled) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_OnEnabledChanged::IsEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetAdditionalIcon
// 0x0038 (0x0038 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetAdditionalIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              iconTexture;                                       // 0x0000(0x0038)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetAdditionalIcon) == 0x000008, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetAdditionalIcon");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetAdditionalIcon) == 0x000038, "Wrong size on CoreKeyListenerInputPromptWidget_SetAdditionalIcon");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetAdditionalIcon, iconTexture) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetAdditionalIcon::iconTexture' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetAlignment
// 0x0001 (0x0001 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetAlignment final
{
public:
	ETextJustify                                  newAlignment;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetAlignment) == 0x000001, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetAlignment");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetAlignment) == 0x000001, "Wrong size on CoreKeyListenerInputPromptWidget_SetAlignment");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetAlignment, newAlignment) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetAlignment::newAlignment' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetBetaFeatureOverlayVisible
// 0x0001 (0x0001 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetBetaFeatureOverlayVisible final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetBetaFeatureOverlayVisible) == 0x000001, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetBetaFeatureOverlayVisible");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetBetaFeatureOverlayVisible) == 0x000001, "Wrong size on CoreKeyListenerInputPromptWidget_SetBetaFeatureOverlayVisible");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetBetaFeatureOverlayVisible, IsVisible_0) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetBetaFeatureOverlayVisible::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetChargeable
// 0x0018 (0x0018 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetChargeable final
{
public:
	bool                                          isChargeable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            holdingAnimCurve;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetChargeable) == 0x000008, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetChargeable");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetChargeable) == 0x000018, "Wrong size on CoreKeyListenerInputPromptWidget_SetChargeable");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetChargeable, isChargeable) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetChargeable::isChargeable' has a wrong offset!");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetChargeable, holdingAnimCurve) == 0x000008, "Member 'CoreKeyListenerInputPromptWidget_SetChargeable::holdingAnimCurve' has a wrong offset!");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetChargeable, Duration) == 0x000010, "Member 'CoreKeyListenerInputPromptWidget_SetChargeable::Duration' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetEnabled) == 0x000001, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetEnabled");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetEnabled) == 0x000001, "Wrong size on CoreKeyListenerInputPromptWidget_SetEnabled");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetEnabled, IsEnabled) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetKeyOverride
// 0x0020 (0x0020 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetKeyOverride final
{
public:
	struct FKey                                   keyOverride;                                       // 0x0000(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetKeyOverride) == 0x000008, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetKeyOverride");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetKeyOverride) == 0x000020, "Wrong size on CoreKeyListenerInputPromptWidget_SetKeyOverride");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetKeyOverride, keyOverride) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetKeyOverride::keyOverride' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetLabel final
{
public:
	class FText                                   label;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetLabel) == 0x000008, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetLabel");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetLabel) == 0x000018, "Wrong size on CoreKeyListenerInputPromptWidget_SetLabel");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetLabel, label) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetLabel::label' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetRepeatable
// 0x0010 (0x0010 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetRepeatable final
{
public:
	bool                                          isRepeatable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            repetitionDelayCurve;                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetRepeatable) == 0x000008, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetRepeatable");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetRepeatable) == 0x000010, "Wrong size on CoreKeyListenerInputPromptWidget_SetRepeatable");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetRepeatable, isRepeatable) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetRepeatable::isRepeatable' has a wrong offset!");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetRepeatable, repetitionDelayCurve) == 0x000008, "Member 'CoreKeyListenerInputPromptWidget_SetRepeatable::repetitionDelayCurve' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetUIAction
// 0x0001 (0x0001 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetUIAction final
{
public:
	EUIActionType                                 ActionType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetUIAction) == 0x000001, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetUIAction");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetUIAction) == 0x000001, "Wrong size on CoreKeyListenerInputPromptWidget_SetUIAction");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetUIAction, ActionType) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetUIAction::ActionType' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.IsCharging
// 0x0001 (0x0001 - 0x0000)
struct CoreKeyListenerInputPromptWidget_IsCharging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_IsCharging) == 0x000001, "Wrong alignment on CoreKeyListenerInputPromptWidget_IsCharging");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_IsCharging) == 0x000001, "Wrong size on CoreKeyListenerInputPromptWidget_IsCharging");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_IsCharging, ReturnValue) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_IsCharging::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreKeyListenerInputPromptWidget_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_IsEnabled) == 0x000001, "Wrong alignment on CoreKeyListenerInputPromptWidget_IsEnabled");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_IsEnabled) == 0x000001, "Wrong size on CoreKeyListenerInputPromptWidget_IsEnabled");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_IsEnabled, ReturnValue) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_IsEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerSocialOptionButtonWidget.SetData
// 0x0048 (0x0048 - 0x0000)
struct CorePlayerSocialOptionButtonWidget_SetData final
{
public:
	struct FPlayerSocialOptionViewData            Data;                                              // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerSocialOptionButtonWidget_SetData) == 0x000008, "Wrong alignment on CorePlayerSocialOptionButtonWidget_SetData");
static_assert(sizeof(CorePlayerSocialOptionButtonWidget_SetData) == 0x000048, "Wrong size on CorePlayerSocialOptionButtonWidget_SetData");
static_assert(offsetof(CorePlayerSocialOptionButtonWidget_SetData, Data) == 0x000000, "Member 'CorePlayerSocialOptionButtonWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyInputPromptWidget.SetCurrencyData
// 0x0050 (0x0050 - 0x0000)
struct CoreCurrencyInputPromptWidget_SetCurrencyData final
{
public:
	struct FPriceTagViewData                      CurrencyData;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyInputPromptWidget_SetCurrencyData) == 0x000008, "Wrong alignment on CoreCurrencyInputPromptWidget_SetCurrencyData");
static_assert(sizeof(CoreCurrencyInputPromptWidget_SetCurrencyData) == 0x000050, "Wrong size on CoreCurrencyInputPromptWidget_SetCurrencyData");
static_assert(offsetof(CoreCurrencyInputPromptWidget_SetCurrencyData, CurrencyData) == 0x000000, "Member 'CoreCurrencyInputPromptWidget_SetCurrencyData::CurrencyData' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyInputPromptWidget.SetModalEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreCurrencyInputPromptWidget_SetModalEnabled final
{
public:
	bool                                          IsEnabled_0;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyInputPromptWidget_SetModalEnabled) == 0x000001, "Wrong alignment on CoreCurrencyInputPromptWidget_SetModalEnabled");
static_assert(sizeof(CoreCurrencyInputPromptWidget_SetModalEnabled) == 0x000001, "Wrong size on CoreCurrencyInputPromptWidget_SetModalEnabled");
static_assert(offsetof(CoreCurrencyInputPromptWidget_SetModalEnabled, IsEnabled_0) == 0x000000, "Member 'CoreCurrencyInputPromptWidget_SetModalEnabled::IsEnabled_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyInputPromptWidget.GetCurrencyType
// 0x0001 (0x0001 - 0x0000)
struct CoreCurrencyInputPromptWidget_GetCurrencyType final
{
public:
	ECurrencyType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyInputPromptWidget_GetCurrencyType) == 0x000001, "Wrong alignment on CoreCurrencyInputPromptWidget_GetCurrencyType");
static_assert(sizeof(CoreCurrencyInputPromptWidget_GetCurrencyType) == 0x000001, "Wrong size on CoreCurrencyInputPromptWidget_GetCurrencyType");
static_assert(offsetof(CoreCurrencyInputPromptWidget_GetCurrencyType, ReturnValue) == 0x000000, "Member 'CoreCurrencyInputPromptWidget_GetCurrencyType::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyInputPromptWidget.SetBackgroundVisible
// 0x0001 (0x0001 - 0x0000)
struct CoreCurrencyInputPromptWidget_SetBackgroundVisible final
{
public:
	bool                                          ShowBackground;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyInputPromptWidget_SetBackgroundVisible) == 0x000001, "Wrong alignment on CoreCurrencyInputPromptWidget_SetBackgroundVisible");
static_assert(sizeof(CoreCurrencyInputPromptWidget_SetBackgroundVisible) == 0x000001, "Wrong size on CoreCurrencyInputPromptWidget_SetBackgroundVisible");
static_assert(offsetof(CoreCurrencyInputPromptWidget_SetBackgroundVisible, ShowBackground) == 0x000000, "Member 'CoreCurrencyInputPromptWidget_SetBackgroundVisible::ShowBackground' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.OnAlignmentChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreInputSwitcherWidget_OnAlignmentChanged final
{
public:
	ETextJustify                                  newAlignment;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_OnAlignmentChanged) == 0x000001, "Wrong alignment on CoreInputSwitcherWidget_OnAlignmentChanged");
static_assert(sizeof(CoreInputSwitcherWidget_OnAlignmentChanged) == 0x000001, "Wrong size on CoreInputSwitcherWidget_OnAlignmentChanged");
static_assert(offsetof(CoreInputSwitcherWidget_OnAlignmentChanged, newAlignment) == 0x000000, "Member 'CoreInputSwitcherWidget_OnAlignmentChanged::newAlignment' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.OnButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreInputSwitcherWidget_OnButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_OnButtonClicked) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_OnButtonClicked");
static_assert(sizeof(CoreInputSwitcherWidget_OnButtonClicked) == 0x000008, "Wrong size on CoreInputSwitcherWidget_OnButtonClicked");
static_assert(offsetof(CoreInputSwitcherWidget_OnButtonClicked, Target) == 0x000000, "Member 'CoreInputSwitcherWidget_OnButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetAdditionalIcon
// 0x0038 (0x0038 - 0x0000)
struct CoreInputSwitcherWidget_SetAdditionalIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              iconTexture;                                       // 0x0000(0x0038)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetAdditionalIcon) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_SetAdditionalIcon");
static_assert(sizeof(CoreInputSwitcherWidget_SetAdditionalIcon) == 0x000038, "Wrong size on CoreInputSwitcherWidget_SetAdditionalIcon");
static_assert(offsetof(CoreInputSwitcherWidget_SetAdditionalIcon, iconTexture) == 0x000000, "Member 'CoreInputSwitcherWidget_SetAdditionalIcon::iconTexture' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetAlignment
// 0x0001 (0x0001 - 0x0000)
struct CoreInputSwitcherWidget_SetAlignment final
{
public:
	ETextJustify                                  newAlignment;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetAlignment) == 0x000001, "Wrong alignment on CoreInputSwitcherWidget_SetAlignment");
static_assert(sizeof(CoreInputSwitcherWidget_SetAlignment) == 0x000001, "Wrong size on CoreInputSwitcherWidget_SetAlignment");
static_assert(offsetof(CoreInputSwitcherWidget_SetAlignment, newAlignment) == 0x000000, "Member 'CoreInputSwitcherWidget_SetAlignment::newAlignment' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetBackground
// 0x0038 (0x0038 - 0x0000)
struct CoreInputSwitcherWidget_SetBackground final
{
public:
	TSoftObjectPtr<class UMaterialInstance>       backgroundMaterial;                                // 0x0000(0x0038)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetBackground) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_SetBackground");
static_assert(sizeof(CoreInputSwitcherWidget_SetBackground) == 0x000038, "Wrong size on CoreInputSwitcherWidget_SetBackground");
static_assert(offsetof(CoreInputSwitcherWidget_SetBackground, backgroundMaterial) == 0x000000, "Member 'CoreInputSwitcherWidget_SetBackground::backgroundMaterial' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetChargeable
// 0x0018 (0x0018 - 0x0000)
struct CoreInputSwitcherWidget_SetChargeable final
{
public:
	bool                                          isChargeable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            holdingAnimCurve;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreInputSwitcherWidget_SetChargeable) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_SetChargeable");
static_assert(sizeof(CoreInputSwitcherWidget_SetChargeable) == 0x000018, "Wrong size on CoreInputSwitcherWidget_SetChargeable");
static_assert(offsetof(CoreInputSwitcherWidget_SetChargeable, isChargeable) == 0x000000, "Member 'CoreInputSwitcherWidget_SetChargeable::isChargeable' has a wrong offset!");
static_assert(offsetof(CoreInputSwitcherWidget_SetChargeable, holdingAnimCurve) == 0x000008, "Member 'CoreInputSwitcherWidget_SetChargeable::holdingAnimCurve' has a wrong offset!");
static_assert(offsetof(CoreInputSwitcherWidget_SetChargeable, Duration) == 0x000010, "Member 'CoreInputSwitcherWidget_SetChargeable::Duration' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreInputSwitcherWidget_SetEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetEnabled) == 0x000001, "Wrong alignment on CoreInputSwitcherWidget_SetEnabled");
static_assert(sizeof(CoreInputSwitcherWidget_SetEnabled) == 0x000001, "Wrong size on CoreInputSwitcherWidget_SetEnabled");
static_assert(offsetof(CoreInputSwitcherWidget_SetEnabled, IsEnabled) == 0x000000, "Member 'CoreInputSwitcherWidget_SetEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetKeyOverride
// 0x0020 (0x0020 - 0x0000)
struct CoreInputSwitcherWidget_SetKeyOverride final
{
public:
	struct FKey                                   keyOverride;                                       // 0x0000(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetKeyOverride) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_SetKeyOverride");
static_assert(sizeof(CoreInputSwitcherWidget_SetKeyOverride) == 0x000020, "Wrong size on CoreInputSwitcherWidget_SetKeyOverride");
static_assert(offsetof(CoreInputSwitcherWidget_SetKeyOverride, keyOverride) == 0x000000, "Member 'CoreInputSwitcherWidget_SetKeyOverride::keyOverride' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct CoreInputSwitcherWidget_SetLabel final
{
public:
	class FText                                   label;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetLabel) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_SetLabel");
static_assert(sizeof(CoreInputSwitcherWidget_SetLabel) == 0x000018, "Wrong size on CoreInputSwitcherWidget_SetLabel");
static_assert(offsetof(CoreInputSwitcherWidget_SetLabel, label) == 0x000000, "Member 'CoreInputSwitcherWidget_SetLabel::label' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetRepeatable
// 0x0010 (0x0010 - 0x0000)
struct CoreInputSwitcherWidget_SetRepeatable final
{
public:
	bool                                          isRepeatable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            repetitionDelayCurve;                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetRepeatable) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_SetRepeatable");
static_assert(sizeof(CoreInputSwitcherWidget_SetRepeatable) == 0x000010, "Wrong size on CoreInputSwitcherWidget_SetRepeatable");
static_assert(offsetof(CoreInputSwitcherWidget_SetRepeatable, isRepeatable) == 0x000000, "Member 'CoreInputSwitcherWidget_SetRepeatable::isRepeatable' has a wrong offset!");
static_assert(offsetof(CoreInputSwitcherWidget_SetRepeatable, repetitionDelayCurve) == 0x000008, "Member 'CoreInputSwitcherWidget_SetRepeatable::repetitionDelayCurve' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetUIAction
// 0x0001 (0x0001 - 0x0000)
struct CoreInputSwitcherWidget_SetUIAction final
{
public:
	EUIActionType                                 ActionType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetUIAction) == 0x000001, "Wrong alignment on CoreInputSwitcherWidget_SetUIAction");
static_assert(sizeof(CoreInputSwitcherWidget_SetUIAction) == 0x000001, "Wrong size on CoreInputSwitcherWidget_SetUIAction");
static_assert(offsetof(CoreInputSwitcherWidget_SetUIAction, ActionType) == 0x000000, "Member 'CoreInputSwitcherWidget_SetUIAction::ActionType' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.GetButton
// 0x0008 (0x0008 - 0x0000)
struct CoreInputSwitcherWidget_GetButton final
{
public:
	class UCoreButtonWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_GetButton) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_GetButton");
static_assert(sizeof(CoreInputSwitcherWidget_GetButton) == 0x000008, "Wrong size on CoreInputSwitcherWidget_GetButton");
static_assert(offsetof(CoreInputSwitcherWidget_GetButton, ReturnValue) == 0x000000, "Member 'CoreInputSwitcherWidget_GetButton::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.GetEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreInputSwitcherWidget_GetEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_GetEnabled) == 0x000001, "Wrong alignment on CoreInputSwitcherWidget_GetEnabled");
static_assert(sizeof(CoreInputSwitcherWidget_GetEnabled) == 0x000001, "Wrong size on CoreInputSwitcherWidget_GetEnabled");
static_assert(offsetof(CoreInputSwitcherWidget_GetEnabled, ReturnValue) == 0x000000, "Member 'CoreInputSwitcherWidget_GetEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.GetInputPrompt
// 0x0008 (0x0008 - 0x0000)
struct CoreInputSwitcherWidget_GetInputPrompt final
{
public:
	class UCoreKeyListenerInputPromptWidget*      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_GetInputPrompt) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_GetInputPrompt");
static_assert(sizeof(CoreInputSwitcherWidget_GetInputPrompt) == 0x000008, "Wrong size on CoreInputSwitcherWidget_GetInputPrompt");
static_assert(offsetof(CoreInputSwitcherWidget_GetInputPrompt, ReturnValue) == 0x000000, "Member 'CoreInputSwitcherWidget_GetInputPrompt::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerExpGaugeWidget.Add
// 0x0004 (0x0004 - 0x0000)
struct CorePlayerExpGaugeWidget_Add final
{
public:
	int32                                         bonusXp;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerExpGaugeWidget_Add) == 0x000004, "Wrong alignment on CorePlayerExpGaugeWidget_Add");
static_assert(sizeof(CorePlayerExpGaugeWidget_Add) == 0x000004, "Wrong size on CorePlayerExpGaugeWidget_Add");
static_assert(offsetof(CorePlayerExpGaugeWidget_Add, bonusXp) == 0x000000, "Member 'CorePlayerExpGaugeWidget_Add::bonusXp' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerExpGaugeWidget.OnUpdateComplete
// 0x0008 (0x0008 - 0x0000)
struct CorePlayerExpGaugeWidget_OnUpdateComplete final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerExpGaugeWidget_OnUpdateComplete) == 0x000008, "Wrong alignment on CorePlayerExpGaugeWidget_OnUpdateComplete");
static_assert(sizeof(CorePlayerExpGaugeWidget_OnUpdateComplete) == 0x000008, "Wrong size on CorePlayerExpGaugeWidget_OnUpdateComplete");
static_assert(offsetof(CorePlayerExpGaugeWidget_OnUpdateComplete, tween) == 0x000000, "Member 'CorePlayerExpGaugeWidget_OnUpdateComplete::tween' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerExpGaugeWidget.OnUpdateProgress
// 0x0008 (0x0008 - 0x0000)
struct CorePlayerExpGaugeWidget_OnUpdateProgress final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerExpGaugeWidget_OnUpdateProgress) == 0x000008, "Wrong alignment on CorePlayerExpGaugeWidget_OnUpdateProgress");
static_assert(sizeof(CorePlayerExpGaugeWidget_OnUpdateProgress) == 0x000008, "Wrong size on CorePlayerExpGaugeWidget_OnUpdateProgress");
static_assert(offsetof(CorePlayerExpGaugeWidget_OnUpdateProgress, tween) == 0x000000, "Member 'CorePlayerExpGaugeWidget_OnUpdateProgress::tween' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerExpGaugeWidget.SetViewData
// 0x0018 (0x0018 - 0x0000)
struct CorePlayerExpGaugeWidget_SetViewData final
{
public:
	struct FPlayerLevelViewData                   playerViewData;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerExpGaugeWidget_SetViewData) == 0x000004, "Wrong alignment on CorePlayerExpGaugeWidget_SetViewData");
static_assert(sizeof(CorePlayerExpGaugeWidget_SetViewData) == 0x000018, "Wrong size on CorePlayerExpGaugeWidget_SetViewData");
static_assert(offsetof(CorePlayerExpGaugeWidget_SetViewData, playerViewData) == 0x000000, "Member 'CorePlayerExpGaugeWidget_SetViewData::playerViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyInputSwitcherWidget.SetBackgroundVisible
// 0x0001 (0x0001 - 0x0000)
struct CoreCurrencyInputSwitcherWidget_SetBackgroundVisible final
{
public:
	bool                                          ShowBackground;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyInputSwitcherWidget_SetBackgroundVisible) == 0x000001, "Wrong alignment on CoreCurrencyInputSwitcherWidget_SetBackgroundVisible");
static_assert(sizeof(CoreCurrencyInputSwitcherWidget_SetBackgroundVisible) == 0x000001, "Wrong size on CoreCurrencyInputSwitcherWidget_SetBackgroundVisible");
static_assert(offsetof(CoreCurrencyInputSwitcherWidget_SetBackgroundVisible, ShowBackground) == 0x000000, "Member 'CoreCurrencyInputSwitcherWidget_SetBackgroundVisible::ShowBackground' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyInputSwitcherWidget.SetCurrencyData
// 0x0050 (0x0050 - 0x0000)
struct CoreCurrencyInputSwitcherWidget_SetCurrencyData final
{
public:
	struct FPriceTagViewData                      CurrencyData;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyInputSwitcherWidget_SetCurrencyData) == 0x000008, "Wrong alignment on CoreCurrencyInputSwitcherWidget_SetCurrencyData");
static_assert(sizeof(CoreCurrencyInputSwitcherWidget_SetCurrencyData) == 0x000050, "Wrong size on CoreCurrencyInputSwitcherWidget_SetCurrencyData");
static_assert(offsetof(CoreCurrencyInputSwitcherWidget_SetCurrencyData, CurrencyData) == 0x000000, "Member 'CoreCurrencyInputSwitcherWidget_SetCurrencyData::CurrencyData' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyInputSwitcherWidget.GetCurrencyType
// 0x0001 (0x0001 - 0x0000)
struct CoreCurrencyInputSwitcherWidget_GetCurrencyType final
{
public:
	ECurrencyType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyInputSwitcherWidget_GetCurrencyType) == 0x000001, "Wrong alignment on CoreCurrencyInputSwitcherWidget_GetCurrencyType");
static_assert(sizeof(CoreCurrencyInputSwitcherWidget_GetCurrencyType) == 0x000001, "Wrong size on CoreCurrencyInputSwitcherWidget_GetCurrencyType");
static_assert(offsetof(CoreCurrencyInputSwitcherWidget_GetCurrencyType, ReturnValue) == 0x000000, "Member 'CoreCurrencyInputSwitcherWidget_GetCurrencyType::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyLabelWidget.SetData
// 0x0148 (0x0148 - 0x0000)
struct CoreCurrencyLabelWidget_SetData final
{
public:
	struct FCurrencyLabelViewData                 ViewData;                                          // 0x0000(0x0148)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyLabelWidget_SetData) == 0x000008, "Wrong alignment on CoreCurrencyLabelWidget_SetData");
static_assert(sizeof(CoreCurrencyLabelWidget_SetData) == 0x000148, "Wrong size on CoreCurrencyLabelWidget_SetData");
static_assert(offsetof(CoreCurrencyLabelWidget_SetData, ViewData) == 0x000000, "Member 'CoreCurrencyLabelWidget_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyLabelWidget.UpdateCurrency
// 0x0008 (0x0008 - 0x0000)
struct CoreCurrencyLabelWidget_UpdateCurrency final
{
public:
	int32                                         newBalance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         previousBalance;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyLabelWidget_UpdateCurrency) == 0x000004, "Wrong alignment on CoreCurrencyLabelWidget_UpdateCurrency");
static_assert(sizeof(CoreCurrencyLabelWidget_UpdateCurrency) == 0x000008, "Wrong size on CoreCurrencyLabelWidget_UpdateCurrency");
static_assert(offsetof(CoreCurrencyLabelWidget_UpdateCurrency, newBalance) == 0x000000, "Member 'CoreCurrencyLabelWidget_UpdateCurrency::newBalance' has a wrong offset!");
static_assert(offsetof(CoreCurrencyLabelWidget_UpdateCurrency, previousBalance) == 0x000004, "Member 'CoreCurrencyLabelWidget_UpdateCurrency::previousBalance' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusKillerEffectWidget.SetKillerData
// 0x00B0 (0x00B0 - 0x0000)
struct CorePlayerStatusKillerEffectWidget_SetKillerData final
{
public:
	struct FPlayerStatusViewData                  Data;                                              // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusKillerEffectWidget_SetKillerData) == 0x000008, "Wrong alignment on CorePlayerStatusKillerEffectWidget_SetKillerData");
static_assert(sizeof(CorePlayerStatusKillerEffectWidget_SetKillerData) == 0x0000B0, "Wrong size on CorePlayerStatusKillerEffectWidget_SetKillerData");
static_assert(offsetof(CorePlayerStatusKillerEffectWidget_SetKillerData, Data) == 0x000000, "Member 'CorePlayerStatusKillerEffectWidget_SetKillerData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyProgressionRewardWidget.SetCurrencyProgressionRewardData
// 0x01B8 (0x01B8 - 0x0000)
struct CoreCurrencyProgressionRewardWidget_SetCurrencyProgressionRewardData final
{
public:
	struct FCurrencyProgressionRewardViewData     CurrencyProgressionRewardViewData;                 // 0x0000(0x01B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyProgressionRewardWidget_SetCurrencyProgressionRewardData) == 0x000008, "Wrong alignment on CoreCurrencyProgressionRewardWidget_SetCurrencyProgressionRewardData");
static_assert(sizeof(CoreCurrencyProgressionRewardWidget_SetCurrencyProgressionRewardData) == 0x0001B8, "Wrong size on CoreCurrencyProgressionRewardWidget_SetCurrencyProgressionRewardData");
static_assert(offsetof(CoreCurrencyProgressionRewardWidget_SetCurrencyProgressionRewardData, CurrencyProgressionRewardViewData) == 0x000000, "Member 'CoreCurrencyProgressionRewardWidget_SetCurrencyProgressionRewardData::CurrencyProgressionRewardViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreCustomizationItemSlotWrapper.SetAsEmptySlot
// 0x0001 (0x0001 - 0x0000)
struct CoreCustomizationItemSlotWrapper_SetAsEmptySlot final
{
public:
	bool                                          isEmptySlot;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCustomizationItemSlotWrapper_SetAsEmptySlot) == 0x000001, "Wrong alignment on CoreCustomizationItemSlotWrapper_SetAsEmptySlot");
static_assert(sizeof(CoreCustomizationItemSlotWrapper_SetAsEmptySlot) == 0x000001, "Wrong size on CoreCustomizationItemSlotWrapper_SetAsEmptySlot");
static_assert(offsetof(CoreCustomizationItemSlotWrapper_SetAsEmptySlot, isEmptySlot) == 0x000000, "Member 'CoreCustomizationItemSlotWrapper_SetAsEmptySlot::isEmptySlot' has a wrong offset!");

// Function DBDUIViewsCore.CoreCustomizationItemSlotWrapper.GetCustomizationItemWidget
// 0x0008 (0x0008 - 0x0000)
struct CoreCustomizationItemSlotWrapper_GetCustomizationItemWidget final
{
public:
	class UCoreStoreCustomizationItemWidget*      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCustomizationItemSlotWrapper_GetCustomizationItemWidget) == 0x000008, "Wrong alignment on CoreCustomizationItemSlotWrapper_GetCustomizationItemWidget");
static_assert(sizeof(CoreCustomizationItemSlotWrapper_GetCustomizationItemWidget) == 0x000008, "Wrong size on CoreCustomizationItemSlotWrapper_GetCustomizationItemWidget");
static_assert(offsetof(CoreCustomizationItemSlotWrapper_GetCustomizationItemWidget, ReturnValue) == 0x000000, "Member 'CoreCustomizationItemSlotWrapper_GetCustomizationItemWidget::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePriceTagWidget.SetBackgroundVisible
// 0x0001 (0x0001 - 0x0000)
struct CorePriceTagWidget_SetBackgroundVisible final
{
public:
	bool                                          ShowBackground_0;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePriceTagWidget_SetBackgroundVisible) == 0x000001, "Wrong alignment on CorePriceTagWidget_SetBackgroundVisible");
static_assert(sizeof(CorePriceTagWidget_SetBackgroundVisible) == 0x000001, "Wrong size on CorePriceTagWidget_SetBackgroundVisible");
static_assert(offsetof(CorePriceTagWidget_SetBackgroundVisible, ShowBackground_0) == 0x000000, "Member 'CorePriceTagWidget_SetBackgroundVisible::ShowBackground_0' has a wrong offset!");

// Function DBDUIViewsCore.CorePriceTagWidget.SetData
// 0x0050 (0x0050 - 0x0000)
struct CorePriceTagWidget_SetData final
{
public:
	struct FPriceTagViewData                      ViewData;                                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePriceTagWidget_SetData) == 0x000008, "Wrong alignment on CorePriceTagWidget_SetData");
static_assert(sizeof(CorePriceTagWidget_SetData) == 0x000050, "Wrong size on CorePriceTagWidget_SetData");
static_assert(offsetof(CorePriceTagWidget_SetData, ViewData) == 0x000000, "Member 'CorePriceTagWidget_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CorePriceTagWidget.SetDiscountTagSpacing
// 0x0004 (0x0004 - 0x0000)
struct CorePriceTagWidget_SetDiscountTagSpacing final
{
public:
	float                                         bottomPadding;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePriceTagWidget_SetDiscountTagSpacing) == 0x000004, "Wrong alignment on CorePriceTagWidget_SetDiscountTagSpacing");
static_assert(sizeof(CorePriceTagWidget_SetDiscountTagSpacing) == 0x000004, "Wrong size on CorePriceTagWidget_SetDiscountTagSpacing");
static_assert(offsetof(CorePriceTagWidget_SetDiscountTagSpacing, bottomPadding) == 0x000000, "Member 'CorePriceTagWidget_SetDiscountTagSpacing::bottomPadding' has a wrong offset!");

// Function DBDUIViewsCore.CorePriceTagWidget.SetHighlightInsufficientCurrency
// 0x0001 (0x0001 - 0x0000)
struct CorePriceTagWidget_SetHighlightInsufficientCurrency final
{
public:
	bool                                          Highlight;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePriceTagWidget_SetHighlightInsufficientCurrency) == 0x000001, "Wrong alignment on CorePriceTagWidget_SetHighlightInsufficientCurrency");
static_assert(sizeof(CorePriceTagWidget_SetHighlightInsufficientCurrency) == 0x000001, "Wrong size on CorePriceTagWidget_SetHighlightInsufficientCurrency");
static_assert(offsetof(CorePriceTagWidget_SetHighlightInsufficientCurrency, Highlight) == 0x000000, "Member 'CorePriceTagWidget_SetHighlightInsufficientCurrency::Highlight' has a wrong offset!");

// Function DBDUIViewsCore.CorePriceTagWidget.UpdatePriceTagScale
// 0x0004 (0x0004 - 0x0000)
struct CorePriceTagWidget_UpdatePriceTagScale final
{
public:
	float                                         priceTagScale;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePriceTagWidget_UpdatePriceTagScale) == 0x000004, "Wrong alignment on CorePriceTagWidget_UpdatePriceTagScale");
static_assert(sizeof(CorePriceTagWidget_UpdatePriceTagScale) == 0x000004, "Wrong size on CorePriceTagWidget_UpdatePriceTagScale");
static_assert(offsetof(CorePriceTagWidget_UpdatePriceTagScale, priceTagScale) == 0x000000, "Member 'CorePriceTagWidget_UpdatePriceTagScale::priceTagScale' has a wrong offset!");

// Function DBDUIViewsCore.CoreCustomizationRewardWidget.SetCustomizationRewardData
// 0x0240 (0x0240 - 0x0000)
struct CoreCustomizationRewardWidget_SetCustomizationRewardData final
{
public:
	struct FCustomizationRewardViewData           CustomizationRewardViewData;                       // 0x0000(0x0240)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCustomizationRewardWidget_SetCustomizationRewardData) == 0x000008, "Wrong alignment on CoreCustomizationRewardWidget_SetCustomizationRewardData");
static_assert(sizeof(CoreCustomizationRewardWidget_SetCustomizationRewardData) == 0x000240, "Wrong size on CoreCustomizationRewardWidget_SetCustomizationRewardData");
static_assert(offsetof(CoreCustomizationRewardWidget_SetCustomizationRewardData, CustomizationRewardViewData) == 0x000000, "Member 'CoreCustomizationRewardWidget_SetCustomizationRewardData::CustomizationRewardViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreDisabledStateOverlayWidget.SetOverlayImage
// 0x0001 (0x0001 - 0x0000)
struct CoreDisabledStateOverlayWidget_SetOverlayImage final
{
public:
	EDisabledItemOption                           DisabledItemOption;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreDisabledStateOverlayWidget_SetOverlayImage) == 0x000001, "Wrong alignment on CoreDisabledStateOverlayWidget_SetOverlayImage");
static_assert(sizeof(CoreDisabledStateOverlayWidget_SetOverlayImage) == 0x000001, "Wrong size on CoreDisabledStateOverlayWidget_SetOverlayImage");
static_assert(offsetof(CoreDisabledStateOverlayWidget_SetOverlayImage, DisabledItemOption) == 0x000000, "Member 'CoreDisabledStateOverlayWidget_SetOverlayImage::DisabledItemOption' has a wrong offset!");

// Function DBDUIViewsCore.CoreDisplayStandWidget.OnDrag
// 0x0010 (0x0010 - 0x0000)
struct CoreDisplayStandWidget_OnDrag final
{
public:
	struct FVector2D                              cursorDelta;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreDisplayStandWidget_OnDrag) == 0x000008, "Wrong alignment on CoreDisplayStandWidget_OnDrag");
static_assert(sizeof(CoreDisplayStandWidget_OnDrag) == 0x000010, "Wrong size on CoreDisplayStandWidget_OnDrag");
static_assert(offsetof(CoreDisplayStandWidget_OnDrag, cursorDelta) == 0x000000, "Member 'CoreDisplayStandWidget_OnDrag::cursorDelta' has a wrong offset!");

// Function DBDUIViewsCore.CoreDisplayStandWidget.SetDisplayPrompt
// 0x0008 (0x0008 - 0x0000)
struct CoreDisplayStandWidget_SetDisplayPrompt final
{
public:
	class UCoreKeyListenerInputPromptWidget*      DisplayPrompt;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreDisplayStandWidget_SetDisplayPrompt) == 0x000008, "Wrong alignment on CoreDisplayStandWidget_SetDisplayPrompt");
static_assert(sizeof(CoreDisplayStandWidget_SetDisplayPrompt) == 0x000008, "Wrong size on CoreDisplayStandWidget_SetDisplayPrompt");
static_assert(offsetof(CoreDisplayStandWidget_SetDisplayPrompt, DisplayPrompt) == 0x000000, "Member 'CoreDisplayStandWidget_SetDisplayPrompt::DisplayPrompt' has a wrong offset!");

// Function DBDUIViewsCore.CoreDisplayStandWidget.SetDisplayPromptText
// 0x0018 (0x0018 - 0x0000)
struct CoreDisplayStandWidget_SetDisplayPromptText final
{
public:
	class FText                                   displayPromptText;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreDisplayStandWidget_SetDisplayPromptText) == 0x000008, "Wrong alignment on CoreDisplayStandWidget_SetDisplayPromptText");
static_assert(sizeof(CoreDisplayStandWidget_SetDisplayPromptText) == 0x000018, "Wrong size on CoreDisplayStandWidget_SetDisplayPromptText");
static_assert(offsetof(CoreDisplayStandWidget_SetDisplayPromptText, displayPromptText) == 0x000000, "Member 'CoreDisplayStandWidget_SetDisplayPromptText::displayPromptText' has a wrong offset!");

// Function DBDUIViewsCore.CoreDisplayStandWidget.SetDisplayPromptVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreDisplayStandWidget_SetDisplayPromptVisibility final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreDisplayStandWidget_SetDisplayPromptVisibility) == 0x000001, "Wrong alignment on CoreDisplayStandWidget_SetDisplayPromptVisibility");
static_assert(sizeof(CoreDisplayStandWidget_SetDisplayPromptVisibility) == 0x000001, "Wrong size on CoreDisplayStandWidget_SetDisplayPromptVisibility");
static_assert(offsetof(CoreDisplayStandWidget_SetDisplayPromptVisibility, IsVisible_0) == 0x000000, "Member 'CoreDisplayStandWidget_SetDisplayPromptVisibility::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreDisplayStandWidget.SetUseControllerRotation
// 0x0001 (0x0001 - 0x0000)
struct CoreDisplayStandWidget_SetUseControllerRotation final
{
public:
	bool                                          UseControllerRotation;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreDisplayStandWidget_SetUseControllerRotation) == 0x000001, "Wrong alignment on CoreDisplayStandWidget_SetUseControllerRotation");
static_assert(sizeof(CoreDisplayStandWidget_SetUseControllerRotation) == 0x000001, "Wrong size on CoreDisplayStandWidget_SetUseControllerRotation");
static_assert(offsetof(CoreDisplayStandWidget_SetUseControllerRotation, UseControllerRotation) == 0x000000, "Member 'CoreDisplayStandWidget_SetUseControllerRotation::UseControllerRotation' has a wrong offset!");

// Function DBDUIViewsCore.CoreDisplayStandWidget.GetUseControllerRotation
// 0x0001 (0x0001 - 0x0000)
struct CoreDisplayStandWidget_GetUseControllerRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreDisplayStandWidget_GetUseControllerRotation) == 0x000001, "Wrong alignment on CoreDisplayStandWidget_GetUseControllerRotation");
static_assert(sizeof(CoreDisplayStandWidget_GetUseControllerRotation) == 0x000001, "Wrong size on CoreDisplayStandWidget_GetUseControllerRotation");
static_assert(offsetof(CoreDisplayStandWidget_GetUseControllerRotation, ReturnValue) == 0x000000, "Member 'CoreDisplayStandWidget_GetUseControllerRotation::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreEffectCardWidget.SetTooltipData
// 0x0158 (0x0158 - 0x0000)
struct CoreEffectCardWidget_SetTooltipData final
{
public:
	struct FCustomizationTooltipViewData          Data;                                              // 0x0000(0x0158)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEffectCardWidget_SetTooltipData) == 0x000008, "Wrong alignment on CoreEffectCardWidget_SetTooltipData");
static_assert(sizeof(CoreEffectCardWidget_SetTooltipData) == 0x000158, "Wrong size on CoreEffectCardWidget_SetTooltipData");
static_assert(offsetof(CoreEffectCardWidget_SetTooltipData, Data) == 0x000000, "Member 'CoreEffectCardWidget_SetTooltipData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreEffectCardWidget.UpdateCardState
// 0x0001 (0x0001 - 0x0000)
struct CoreEffectCardWidget_UpdateCardState final
{
public:
	EEffectCardState                              State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEffectCardWidget_UpdateCardState) == 0x000001, "Wrong alignment on CoreEffectCardWidget_UpdateCardState");
static_assert(sizeof(CoreEffectCardWidget_UpdateCardState) == 0x000001, "Wrong size on CoreEffectCardWidget_UpdateCardState");
static_assert(offsetof(CoreEffectCardWidget_UpdateCardState, State) == 0x000000, "Member 'CoreEffectCardWidget_UpdateCardState::State' has a wrong offset!");

// Function DBDUIViewsCore.CoreEffectCardWidget.UpdateTimer
// 0x0004 (0x0004 - 0x0000)
struct CoreEffectCardWidget_UpdateTimer final
{
public:
	float                                         currentTimer_0;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEffectCardWidget_UpdateTimer) == 0x000004, "Wrong alignment on CoreEffectCardWidget_UpdateTimer");
static_assert(sizeof(CoreEffectCardWidget_UpdateTimer) == 0x000004, "Wrong size on CoreEffectCardWidget_UpdateTimer");
static_assert(offsetof(CoreEffectCardWidget_UpdateTimer, currentTimer_0) == 0x000000, "Member 'CoreEffectCardWidget_UpdateTimer::currentTimer_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreEndGameCollapseBarWidget.UpdateBarProgression
// 0x0004 (0x0004 - 0x0000)
struct CoreEndGameCollapseBarWidget_UpdateBarProgression final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEndGameCollapseBarWidget_UpdateBarProgression) == 0x000004, "Wrong alignment on CoreEndGameCollapseBarWidget_UpdateBarProgression");
static_assert(sizeof(CoreEndGameCollapseBarWidget_UpdateBarProgression) == 0x000004, "Wrong size on CoreEndGameCollapseBarWidget_UpdateBarProgression");
static_assert(offsetof(CoreEndGameCollapseBarWidget_UpdateBarProgression, Progress) == 0x000000, "Member 'CoreEndGameCollapseBarWidget_UpdateBarProgression::Progress' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnArchivePassClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreSpecialPackDetailsWidget_OnArchivePassClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreSpecialPackDetailsWidget_OnArchivePassClicked) == 0x000008, "Wrong alignment on CoreStoreSpecialPackDetailsWidget_OnArchivePassClicked");
static_assert(sizeof(CoreStoreSpecialPackDetailsWidget_OnArchivePassClicked) == 0x000008, "Wrong size on CoreStoreSpecialPackDetailsWidget_OnArchivePassClicked");
static_assert(offsetof(CoreStoreSpecialPackDetailsWidget_OnArchivePassClicked, Button) == 0x000000, "Member 'CoreStoreSpecialPackDetailsWidget_OnArchivePassClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnCharacterClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreSpecialPackDetailsWidget_OnCharacterClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreSpecialPackDetailsWidget_OnCharacterClicked) == 0x000008, "Wrong alignment on CoreStoreSpecialPackDetailsWidget_OnCharacterClicked");
static_assert(sizeof(CoreStoreSpecialPackDetailsWidget_OnCharacterClicked) == 0x000008, "Wrong size on CoreStoreSpecialPackDetailsWidget_OnCharacterClicked");
static_assert(offsetof(CoreStoreSpecialPackDetailsWidget_OnCharacterClicked, Button) == 0x000000, "Member 'CoreStoreSpecialPackDetailsWidget_OnCharacterClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnCurrencyButtonClicked
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreSpecialPackDetailsWidget_OnCurrencyButtonClicked final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreSpecialPackDetailsWidget_OnCurrencyButtonClicked) == 0x000001, "Wrong alignment on CoreStoreSpecialPackDetailsWidget_OnCurrencyButtonClicked");
static_assert(sizeof(CoreStoreSpecialPackDetailsWidget_OnCurrencyButtonClicked) == 0x000001, "Wrong size on CoreStoreSpecialPackDetailsWidget_OnCurrencyButtonClicked");
static_assert(offsetof(CoreStoreSpecialPackDetailsWidget_OnCurrencyButtonClicked, currencyType) == 0x000000, "Member 'CoreStoreSpecialPackDetailsWidget_OnCurrencyButtonClicked::currencyType' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.OnCustomizationClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreSpecialPackDetailsWidget_OnCustomizationClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreSpecialPackDetailsWidget_OnCustomizationClicked) == 0x000008, "Wrong alignment on CoreStoreSpecialPackDetailsWidget_OnCustomizationClicked");
static_assert(sizeof(CoreStoreSpecialPackDetailsWidget_OnCustomizationClicked) == 0x000008, "Wrong size on CoreStoreSpecialPackDetailsWidget_OnCustomizationClicked");
static_assert(offsetof(CoreStoreSpecialPackDetailsWidget_OnCustomizationClicked, Button) == 0x000000, "Member 'CoreStoreSpecialPackDetailsWidget_OnCustomizationClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.SetSpecialPackImageUsingComposition
// 0x0068 (0x0068 - 0x0000)
struct CoreStoreSpecialPackDetailsWidget_SetSpecialPackImageUsingComposition final
{
public:
	int32                                         numberOfItems;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStorePackContentData*>          Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FName, class UTexture2D*>          icons;                                             // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreSpecialPackDetailsWidget_SetSpecialPackImageUsingComposition) == 0x000008, "Wrong alignment on CoreStoreSpecialPackDetailsWidget_SetSpecialPackImageUsingComposition");
static_assert(sizeof(CoreStoreSpecialPackDetailsWidget_SetSpecialPackImageUsingComposition) == 0x000068, "Wrong size on CoreStoreSpecialPackDetailsWidget_SetSpecialPackImageUsingComposition");
static_assert(offsetof(CoreStoreSpecialPackDetailsWidget_SetSpecialPackImageUsingComposition, numberOfItems) == 0x000000, "Member 'CoreStoreSpecialPackDetailsWidget_SetSpecialPackImageUsingComposition::numberOfItems' has a wrong offset!");
static_assert(offsetof(CoreStoreSpecialPackDetailsWidget_SetSpecialPackImageUsingComposition, Data) == 0x000008, "Member 'CoreStoreSpecialPackDetailsWidget_SetSpecialPackImageUsingComposition::Data' has a wrong offset!");
static_assert(offsetof(CoreStoreSpecialPackDetailsWidget_SetSpecialPackImageUsingComposition, icons) == 0x000018, "Member 'CoreStoreSpecialPackDetailsWidget_SetSpecialPackImageUsingComposition::icons' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget.LoadPackImage
// 0x00A8 (0x00A8 - 0x0000)
struct CoreStoreSpecialPackDetailsWidget_LoadPackImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              localPtr;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftRemoteContentCacheObjectPtr       remotePtr;                                         // 0x0038(0x0070)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreSpecialPackDetailsWidget_LoadPackImage) == 0x000008, "Wrong alignment on CoreStoreSpecialPackDetailsWidget_LoadPackImage");
static_assert(sizeof(CoreStoreSpecialPackDetailsWidget_LoadPackImage) == 0x0000A8, "Wrong size on CoreStoreSpecialPackDetailsWidget_LoadPackImage");
static_assert(offsetof(CoreStoreSpecialPackDetailsWidget_LoadPackImage, localPtr) == 0x000000, "Member 'CoreStoreSpecialPackDetailsWidget_LoadPackImage::localPtr' has a wrong offset!");
static_assert(offsetof(CoreStoreSpecialPackDetailsWidget_LoadPackImage, remotePtr) == 0x000038, "Member 'CoreStoreSpecialPackDetailsWidget_LoadPackImage::remotePtr' has a wrong offset!");

// Function DBDUIViewsCore.CoreScreenIndicatorWidget.SetData
// 0x0050 (0x0050 - 0x0000)
struct CoreScreenIndicatorWidget_SetData final
{
public:
	struct FScreenIndicatorViewData               Data;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreScreenIndicatorWidget_SetData) == 0x000008, "Wrong alignment on CoreScreenIndicatorWidget_SetData");
static_assert(sizeof(CoreScreenIndicatorWidget_SetData) == 0x000050, "Wrong size on CoreScreenIndicatorWidget_SetData");
static_assert(offsetof(CoreScreenIndicatorWidget_SetData, Data) == 0x000000, "Member 'CoreScreenIndicatorWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreEventEntryWidget.OnTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreEventEntryWidget_OnTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEventEntryWidget_OnTabSelected) == 0x000008, "Wrong alignment on CoreEventEntryWidget_OnTabSelected");
static_assert(sizeof(CoreEventEntryWidget_OnTabSelected) == 0x000008, "Wrong size on CoreEventEntryWidget_OnTabSelected");
static_assert(offsetof(CoreEventEntryWidget_OnTabSelected, selectedButton) == 0x000000, "Member 'CoreEventEntryWidget_OnTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreEventEntryWidget.SetUiTakeoverActive
// 0x0001 (0x0001 - 0x0000)
struct CoreEventEntryWidget_SetUiTakeoverActive final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEventEntryWidget_SetUiTakeoverActive) == 0x000001, "Wrong alignment on CoreEventEntryWidget_SetUiTakeoverActive");
static_assert(sizeof(CoreEventEntryWidget_SetUiTakeoverActive) == 0x000001, "Wrong size on CoreEventEntryWidget_SetUiTakeoverActive");
static_assert(offsetof(CoreEventEntryWidget_SetUiTakeoverActive, IsActive) == 0x000000, "Member 'CoreEventEntryWidget_SetUiTakeoverActive::IsActive' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreUnlockConfirmationPopupWidget.OnUnlockAction
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreUnlockConfirmationPopupWidget_OnUnlockAction final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreUnlockConfirmationPopupWidget_OnUnlockAction) == 0x000001, "Wrong alignment on CoreStoreUnlockConfirmationPopupWidget_OnUnlockAction");
static_assert(sizeof(CoreStoreUnlockConfirmationPopupWidget_OnUnlockAction) == 0x000001, "Wrong size on CoreStoreUnlockConfirmationPopupWidget_OnUnlockAction");
static_assert(offsetof(CoreStoreUnlockConfirmationPopupWidget_OnUnlockAction, currencyType) == 0x000000, "Member 'CoreStoreUnlockConfirmationPopupWidget_OnUnlockAction::currencyType' has a wrong offset!");

// Function DBDUIViewsCore.CoreExternalEffectsWidget.HideExternalAddon_Implementation
// 0x000C (0x000C - 0x0000)
struct CoreExternalEffectsWidget_HideExternalAddon_Implementation final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreExternalEffectsWidget_HideExternalAddon_Implementation) == 0x000004, "Wrong alignment on CoreExternalEffectsWidget_HideExternalAddon_Implementation");
static_assert(sizeof(CoreExternalEffectsWidget_HideExternalAddon_Implementation) == 0x00000C, "Wrong size on CoreExternalEffectsWidget_HideExternalAddon_Implementation");
static_assert(offsetof(CoreExternalEffectsWidget_HideExternalAddon_Implementation, ItemId) == 0x000000, "Member 'CoreExternalEffectsWidget_HideExternalAddon_Implementation::ItemId' has a wrong offset!");

// Function DBDUIViewsCore.CoreExternalEffectsWidget.HideExternalPerk_Implementation
// 0x000C (0x000C - 0x0000)
struct CoreExternalEffectsWidget_HideExternalPerk_Implementation final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreExternalEffectsWidget_HideExternalPerk_Implementation) == 0x000004, "Wrong alignment on CoreExternalEffectsWidget_HideExternalPerk_Implementation");
static_assert(sizeof(CoreExternalEffectsWidget_HideExternalPerk_Implementation) == 0x00000C, "Wrong size on CoreExternalEffectsWidget_HideExternalPerk_Implementation");
static_assert(offsetof(CoreExternalEffectsWidget_HideExternalPerk_Implementation, ItemId) == 0x000000, "Member 'CoreExternalEffectsWidget_HideExternalPerk_Implementation::ItemId' has a wrong offset!");

// Function DBDUIViewsCore.CoreExternalEffectsWidget.HideExternalSkill_Implementation
// 0x000C (0x000C - 0x0000)
struct CoreExternalEffectsWidget_HideExternalSkill_Implementation final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreExternalEffectsWidget_HideExternalSkill_Implementation) == 0x000004, "Wrong alignment on CoreExternalEffectsWidget_HideExternalSkill_Implementation");
static_assert(sizeof(CoreExternalEffectsWidget_HideExternalSkill_Implementation) == 0x00000C, "Wrong size on CoreExternalEffectsWidget_HideExternalSkill_Implementation");
static_assert(offsetof(CoreExternalEffectsWidget_HideExternalSkill_Implementation, ItemId) == 0x000000, "Member 'CoreExternalEffectsWidget_HideExternalSkill_Implementation::ItemId' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreMenuWidget.OnMenuTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreMenuWidget_OnMenuTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreMenuWidget_OnMenuTabSelected) == 0x000008, "Wrong alignment on CoreStoreMenuWidget_OnMenuTabSelected");
static_assert(sizeof(CoreStoreMenuWidget_OnMenuTabSelected) == 0x000008, "Wrong size on CoreStoreMenuWidget_OnMenuTabSelected");
static_assert(offsetof(CoreStoreMenuWidget_OnMenuTabSelected, selectedButton) == 0x000000, "Member 'CoreStoreMenuWidget_OnMenuTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreMenuWidget.OnMenuTabSelectedAgain
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreMenuWidget_OnMenuTabSelectedAgain final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreMenuWidget_OnMenuTabSelectedAgain) == 0x000008, "Wrong alignment on CoreStoreMenuWidget_OnMenuTabSelectedAgain");
static_assert(sizeof(CoreStoreMenuWidget_OnMenuTabSelectedAgain) == 0x000008, "Wrong size on CoreStoreMenuWidget_OnMenuTabSelectedAgain");
static_assert(offsetof(CoreStoreMenuWidget_OnMenuTabSelectedAgain, selectedButton) == 0x000000, "Member 'CoreStoreMenuWidget_OnMenuTabSelectedAgain::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreFilterButtonWidget.SetToggledState
// 0x0001 (0x0001 - 0x0000)
struct CoreFilterButtonWidget_SetToggledState final
{
public:
	bool                                          IsToggled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFilterButtonWidget_SetToggledState) == 0x000001, "Wrong alignment on CoreFilterButtonWidget_SetToggledState");
static_assert(sizeof(CoreFilterButtonWidget_SetToggledState) == 0x000001, "Wrong size on CoreFilterButtonWidget_SetToggledState");
static_assert(offsetof(CoreFilterButtonWidget_SetToggledState, IsToggled) == 0x000000, "Member 'CoreFilterButtonWidget_SetToggledState::IsToggled' has a wrong offset!");

// Function DBDUIViewsCore.CoreFilterButtonWidget.IsToggled
// 0x0001 (0x0001 - 0x0000)
struct CoreFilterButtonWidget_IsToggled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFilterButtonWidget_IsToggled) == 0x000001, "Wrong alignment on CoreFilterButtonWidget_IsToggled");
static_assert(sizeof(CoreFilterButtonWidget_IsToggled) == 0x000001, "Wrong size on CoreFilterButtonWidget_IsToggled");
static_assert(offsetof(CoreFilterButtonWidget_IsToggled, ReturnValue) == 0x000000, "Member 'CoreFilterButtonWidget_IsToggled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreFooterButtonWidget.SetBetaFeatureOverlayVisible
// 0x0001 (0x0001 - 0x0000)
struct CoreFooterButtonWidget_SetBetaFeatureOverlayVisible final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFooterButtonWidget_SetBetaFeatureOverlayVisible) == 0x000001, "Wrong alignment on CoreFooterButtonWidget_SetBetaFeatureOverlayVisible");
static_assert(sizeof(CoreFooterButtonWidget_SetBetaFeatureOverlayVisible) == 0x000001, "Wrong size on CoreFooterButtonWidget_SetBetaFeatureOverlayVisible");
static_assert(offsetof(CoreFooterButtonWidget_SetBetaFeatureOverlayVisible, IsVisible_0) == 0x000000, "Member 'CoreFooterButtonWidget_SetBetaFeatureOverlayVisible::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreFooterButtonWidget.SetIconTexture
// 0x0008 (0x0008 - 0x0000)
struct CoreFooterButtonWidget_SetIconTexture final
{
public:
	class UTexture2D*                             iconTexture;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFooterButtonWidget_SetIconTexture) == 0x000008, "Wrong alignment on CoreFooterButtonWidget_SetIconTexture");
static_assert(sizeof(CoreFooterButtonWidget_SetIconTexture) == 0x000008, "Wrong size on CoreFooterButtonWidget_SetIconTexture");
static_assert(offsetof(CoreFooterButtonWidget_SetIconTexture, iconTexture) == 0x000000, "Member 'CoreFooterButtonWidget_SetIconTexture::iconTexture' has a wrong offset!");

// Function DBDUIViewsCore.CoreFooterButtonWidget.SetSubPanelText
// 0x0030 (0x0030 - 0x0000)
struct CoreFooterButtonWidget_SetSubPanelText final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFooterButtonWidget_SetSubPanelText) == 0x000008, "Wrong alignment on CoreFooterButtonWidget_SetSubPanelText");
static_assert(sizeof(CoreFooterButtonWidget_SetSubPanelText) == 0x000030, "Wrong size on CoreFooterButtonWidget_SetSubPanelText");
static_assert(offsetof(CoreFooterButtonWidget_SetSubPanelText, Title) == 0x000000, "Member 'CoreFooterButtonWidget_SetSubPanelText::Title' has a wrong offset!");
static_assert(offsetof(CoreFooterButtonWidget_SetSubPanelText, Description) == 0x000018, "Member 'CoreFooterButtonWidget_SetSubPanelText::Description' has a wrong offset!");

// Function DBDUIViewsCore.CoreFooterButtonWidget.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct CoreFooterButtonWidget_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFooterButtonWidget_IsLocked) == 0x000001, "Wrong alignment on CoreFooterButtonWidget_IsLocked");
static_assert(sizeof(CoreFooterButtonWidget_IsLocked) == 0x000001, "Wrong size on CoreFooterButtonWidget_IsLocked");
static_assert(offsetof(CoreFooterButtonWidget_IsLocked, ReturnValue) == 0x000000, "Member 'CoreFooterButtonWidget_IsLocked::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.DisplayPage
// 0x0008 (0x0008 - 0x0000)
struct CoreRiftWidget_DisplayPage final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_DisplayPage) == 0x000008, "Wrong alignment on CoreRiftWidget_DisplayPage");
static_assert(sizeof(CoreRiftWidget_DisplayPage) == 0x000008, "Wrong size on CoreRiftWidget_DisplayPage");
static_assert(offsetof(CoreRiftWidget_DisplayPage, tween) == 0x000000, "Member 'CoreRiftWidget_DisplayPage::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.OnInfoButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreRiftWidget_OnInfoButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_OnInfoButtonClicked) == 0x000008, "Wrong alignment on CoreRiftWidget_OnInfoButtonClicked");
static_assert(sizeof(CoreRiftWidget_OnInfoButtonClicked) == 0x000008, "Wrong size on CoreRiftWidget_OnInfoButtonClicked");
static_assert(offsetof(CoreRiftWidget_OnInfoButtonClicked, buttonTarget) == 0x000000, "Member 'CoreRiftWidget_OnInfoButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.OnOutfitButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreRiftWidget_OnOutfitButtonClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_OnOutfitButtonClicked) == 0x000008, "Wrong alignment on CoreRiftWidget_OnOutfitButtonClicked");
static_assert(sizeof(CoreRiftWidget_OnOutfitButtonClicked) == 0x000008, "Wrong size on CoreRiftWidget_OnOutfitButtonClicked");
static_assert(offsetof(CoreRiftWidget_OnOutfitButtonClicked, Button) == 0x000000, "Member 'CoreRiftWidget_OnOutfitButtonClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.OnOutfitButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreRiftWidget_OnOutfitButtonHovered final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_OnOutfitButtonHovered) == 0x000008, "Wrong alignment on CoreRiftWidget_OnOutfitButtonHovered");
static_assert(sizeof(CoreRiftWidget_OnOutfitButtonHovered) == 0x000008, "Wrong size on CoreRiftWidget_OnOutfitButtonHovered");
static_assert(offsetof(CoreRiftWidget_OnOutfitButtonHovered, Button) == 0x000000, "Member 'CoreRiftWidget_OnOutfitButtonHovered::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.OnOutfitButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreRiftWidget_OnOutfitButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_OnOutfitButtonUnhovered) == 0x000008, "Wrong alignment on CoreRiftWidget_OnOutfitButtonUnhovered");
static_assert(sizeof(CoreRiftWidget_OnOutfitButtonUnhovered) == 0x000008, "Wrong size on CoreRiftWidget_OnOutfitButtonUnhovered");
static_assert(offsetof(CoreRiftWidget_OnOutfitButtonUnhovered, Button) == 0x000000, "Member 'CoreRiftWidget_OnOutfitButtonUnhovered::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.OnPlayMoriButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreRiftWidget_OnPlayMoriButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_OnPlayMoriButtonClicked) == 0x000008, "Wrong alignment on CoreRiftWidget_OnPlayMoriButtonClicked");
static_assert(sizeof(CoreRiftWidget_OnPlayMoriButtonClicked) == 0x000008, "Wrong size on CoreRiftWidget_OnPlayMoriButtonClicked");
static_assert(offsetof(CoreRiftWidget_OnPlayMoriButtonClicked, buttonTarget) == 0x000000, "Member 'CoreRiftWidget_OnPlayMoriButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.OnPlayMoriButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreRiftWidget_OnPlayMoriButtonHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_OnPlayMoriButtonHovered) == 0x000008, "Wrong alignment on CoreRiftWidget_OnPlayMoriButtonHovered");
static_assert(sizeof(CoreRiftWidget_OnPlayMoriButtonHovered) == 0x000008, "Wrong size on CoreRiftWidget_OnPlayMoriButtonHovered");
static_assert(offsetof(CoreRiftWidget_OnPlayMoriButtonHovered, buttonTarget) == 0x000000, "Member 'CoreRiftWidget_OnPlayMoriButtonHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.OnPlayMoriButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreRiftWidget_OnPlayMoriButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_OnPlayMoriButtonUnhovered) == 0x000008, "Wrong alignment on CoreRiftWidget_OnPlayMoriButtonUnhovered");
static_assert(sizeof(CoreRiftWidget_OnPlayMoriButtonUnhovered) == 0x000008, "Wrong size on CoreRiftWidget_OnPlayMoriButtonUnhovered");
static_assert(offsetof(CoreRiftWidget_OnPlayMoriButtonUnhovered, buttonTarget) == 0x000000, "Member 'CoreRiftWidget_OnPlayMoriButtonUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.OnPlaySecondMoriButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreRiftWidget_OnPlaySecondMoriButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_OnPlaySecondMoriButtonClicked) == 0x000008, "Wrong alignment on CoreRiftWidget_OnPlaySecondMoriButtonClicked");
static_assert(sizeof(CoreRiftWidget_OnPlaySecondMoriButtonClicked) == 0x000008, "Wrong size on CoreRiftWidget_OnPlaySecondMoriButtonClicked");
static_assert(offsetof(CoreRiftWidget_OnPlaySecondMoriButtonClicked, buttonTarget) == 0x000000, "Member 'CoreRiftWidget_OnPlaySecondMoriButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.OnPlaySecondMoriButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreRiftWidget_OnPlaySecondMoriButtonHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_OnPlaySecondMoriButtonHovered) == 0x000008, "Wrong alignment on CoreRiftWidget_OnPlaySecondMoriButtonHovered");
static_assert(sizeof(CoreRiftWidget_OnPlaySecondMoriButtonHovered) == 0x000008, "Wrong size on CoreRiftWidget_OnPlaySecondMoriButtonHovered");
static_assert(offsetof(CoreRiftWidget_OnPlaySecondMoriButtonHovered, buttonTarget) == 0x000000, "Member 'CoreRiftWidget_OnPlaySecondMoriButtonHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.OnPlaySecondMoriButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreRiftWidget_OnPlaySecondMoriButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_OnPlaySecondMoriButtonUnhovered) == 0x000008, "Wrong alignment on CoreRiftWidget_OnPlaySecondMoriButtonUnhovered");
static_assert(sizeof(CoreRiftWidget_OnPlaySecondMoriButtonUnhovered) == 0x000008, "Wrong size on CoreRiftWidget_OnPlaySecondMoriButtonUnhovered");
static_assert(offsetof(CoreRiftWidget_OnPlaySecondMoriButtonUnhovered, buttonTarget) == 0x000000, "Member 'CoreRiftWidget_OnPlaySecondMoriButtonUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.OnRewardItemClicked
// 0x0018 (0x0018 - 0x0000)
struct CoreRiftWidget_OnRewardItemClicked final
{
public:
	int32                                         tier;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreButtonWidget*                      Button;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isPremium;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_OnRewardItemClicked) == 0x000008, "Wrong alignment on CoreRiftWidget_OnRewardItemClicked");
static_assert(sizeof(CoreRiftWidget_OnRewardItemClicked) == 0x000018, "Wrong size on CoreRiftWidget_OnRewardItemClicked");
static_assert(offsetof(CoreRiftWidget_OnRewardItemClicked, tier) == 0x000000, "Member 'CoreRiftWidget_OnRewardItemClicked::tier' has a wrong offset!");
static_assert(offsetof(CoreRiftWidget_OnRewardItemClicked, Button) == 0x000008, "Member 'CoreRiftWidget_OnRewardItemClicked::Button' has a wrong offset!");
static_assert(offsetof(CoreRiftWidget_OnRewardItemClicked, isPremium) == 0x000010, "Member 'CoreRiftWidget_OnRewardItemClicked::isPremium' has a wrong offset!");
static_assert(offsetof(CoreRiftWidget_OnRewardItemClicked, Index_0) == 0x000014, "Member 'CoreRiftWidget_OnRewardItemClicked::Index_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.OnSettingsButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreRiftWidget_OnSettingsButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_OnSettingsButtonClicked) == 0x000008, "Wrong alignment on CoreRiftWidget_OnSettingsButtonClicked");
static_assert(sizeof(CoreRiftWidget_OnSettingsButtonClicked) == 0x000008, "Wrong size on CoreRiftWidget_OnSettingsButtonClicked");
static_assert(offsetof(CoreRiftWidget_OnSettingsButtonClicked, buttonTarget) == 0x000000, "Member 'CoreRiftWidget_OnSettingsButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.SetTierVisuals
// 0x0001 (0x0001 - 0x0000)
struct CoreRiftWidget_SetTierVisuals final
{
public:
	ETierType                                     TierType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_SetTierVisuals) == 0x000001, "Wrong alignment on CoreRiftWidget_SetTierVisuals");
static_assert(sizeof(CoreRiftWidget_SetTierVisuals) == 0x000001, "Wrong size on CoreRiftWidget_SetTierVisuals");
static_assert(offsetof(CoreRiftWidget_SetTierVisuals, TierType) == 0x000000, "Member 'CoreRiftWidget_SetTierVisuals::TierType' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.SetVisualData
// 0x0020 (0x0020 - 0x0000)
struct CoreRiftWidget_SetVisualData final
{
public:
	struct FArchivesRiftGenericViewData           Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_SetVisualData) == 0x000008, "Wrong alignment on CoreRiftWidget_SetVisualData");
static_assert(sizeof(CoreRiftWidget_SetVisualData) == 0x000020, "Wrong size on CoreRiftWidget_SetVisualData");
static_assert(offsetof(CoreRiftWidget_SetVisualData, Data) == 0x000000, "Member 'CoreRiftWidget_SetVisualData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreRiftWidget.UpdateMoriButtonVisual
// 0x0001 (0x0001 - 0x0000)
struct CoreRiftWidget_UpdateMoriButtonVisual final
{
public:
	bool                                          HasUniqueMori;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRiftWidget_UpdateMoriButtonVisual) == 0x000001, "Wrong alignment on CoreRiftWidget_UpdateMoriButtonVisual");
static_assert(sizeof(CoreRiftWidget_UpdateMoriButtonVisual) == 0x000001, "Wrong size on CoreRiftWidget_UpdateMoriButtonVisual");
static_assert(offsetof(CoreRiftWidget_UpdateMoriButtonVisual, HasUniqueMori) == 0x000000, "Member 'CoreRiftWidget_UpdateMoriButtonVisual::HasUniqueMori' has a wrong offset!");

// Function DBDUIViewsCore.CoreFooterInputSwitcherWidget.SetBetaFeatureOverlayVisible
// 0x0001 (0x0001 - 0x0000)
struct CoreFooterInputSwitcherWidget_SetBetaFeatureOverlayVisible final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreFooterInputSwitcherWidget_SetBetaFeatureOverlayVisible) == 0x000001, "Wrong alignment on CoreFooterInputSwitcherWidget_SetBetaFeatureOverlayVisible");
static_assert(sizeof(CoreFooterInputSwitcherWidget_SetBetaFeatureOverlayVisible) == 0x000001, "Wrong size on CoreFooterInputSwitcherWidget_SetBetaFeatureOverlayVisible");
static_assert(offsetof(CoreFooterInputSwitcherWidget_SetBetaFeatureOverlayVisible, IsVisible_0) == 0x000000, "Member 'CoreFooterInputSwitcherWidget_SetBetaFeatureOverlayVisible::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreGameManualCategoryButton.SetText
// 0x0030 (0x0030 - 0x0000)
struct CoreGameManualCategoryButton_SetText final
{
public:
	class FText                                   Title_0;                                           // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FText                                   Description_0;                                     // 0x0018(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGameManualCategoryButton_SetText) == 0x000008, "Wrong alignment on CoreGameManualCategoryButton_SetText");
static_assert(sizeof(CoreGameManualCategoryButton_SetText) == 0x000030, "Wrong size on CoreGameManualCategoryButton_SetText");
static_assert(offsetof(CoreGameManualCategoryButton_SetText, Title_0) == 0x000000, "Member 'CoreGameManualCategoryButton_SetText::Title_0' has a wrong offset!");
static_assert(offsetof(CoreGameManualCategoryButton_SetText, Description_0) == 0x000018, "Member 'CoreGameManualCategoryButton_SetText::Description_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreSharedPerksDisplayWidget.OnPerkHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreSharedPerksDisplayWidget_OnPerkHovered final
{
public:
	class UCoreButtonWidget*                      hoveredPerk;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSharedPerksDisplayWidget_OnPerkHovered) == 0x000008, "Wrong alignment on CoreSharedPerksDisplayWidget_OnPerkHovered");
static_assert(sizeof(CoreSharedPerksDisplayWidget_OnPerkHovered) == 0x000008, "Wrong size on CoreSharedPerksDisplayWidget_OnPerkHovered");
static_assert(offsetof(CoreSharedPerksDisplayWidget_OnPerkHovered, hoveredPerk) == 0x000000, "Member 'CoreSharedPerksDisplayWidget_OnPerkHovered::hoveredPerk' has a wrong offset!");

// Function DBDUIViewsCore.CoreSharedPerksDisplayWidget.OnPerkUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreSharedPerksDisplayWidget_OnPerkUnhovered final
{
public:
	class UCoreButtonWidget*                      unhoveredPerk;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSharedPerksDisplayWidget_OnPerkUnhovered) == 0x000008, "Wrong alignment on CoreSharedPerksDisplayWidget_OnPerkUnhovered");
static_assert(sizeof(CoreSharedPerksDisplayWidget_OnPerkUnhovered) == 0x000008, "Wrong size on CoreSharedPerksDisplayWidget_OnPerkUnhovered");
static_assert(offsetof(CoreSharedPerksDisplayWidget_OnPerkUnhovered, unhoveredPerk) == 0x000000, "Member 'CoreSharedPerksDisplayWidget_OnPerkUnhovered::unhoveredPerk' has a wrong offset!");

// Function DBDUIViewsCore.CoreSharedPerksDisplayWidget.SetLockedVisual
// 0x0001 (0x0001 - 0x0000)
struct CoreSharedPerksDisplayWidget_SetLockedVisual final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSharedPerksDisplayWidget_SetLockedVisual) == 0x000001, "Wrong alignment on CoreSharedPerksDisplayWidget_SetLockedVisual");
static_assert(sizeof(CoreSharedPerksDisplayWidget_SetLockedVisual) == 0x000001, "Wrong size on CoreSharedPerksDisplayWidget_SetLockedVisual");
static_assert(offsetof(CoreSharedPerksDisplayWidget_SetLockedVisual, IsVisible_0) == 0x000000, "Member 'CoreSharedPerksDisplayWidget_SetLockedVisual::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreGameManualPanelWidget.OnTopicsTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreGameManualPanelWidget_OnTopicsTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGameManualPanelWidget_OnTopicsTabSelected) == 0x000008, "Wrong alignment on CoreGameManualPanelWidget_OnTopicsTabSelected");
static_assert(sizeof(CoreGameManualPanelWidget_OnTopicsTabSelected) == 0x000008, "Wrong size on CoreGameManualPanelWidget_OnTopicsTabSelected");
static_assert(offsetof(CoreGameManualPanelWidget_OnTopicsTabSelected, selectedButton) == 0x000000, "Member 'CoreGameManualPanelWidget_OnTopicsTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreGameManualPanelWidget.ResetScrolls
// 0x0001 (0x0001 - 0x0000)
struct CoreGameManualPanelWidget_ResetScrolls final
{
public:
	bool                                          resetTopicsScroll;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGameManualPanelWidget_ResetScrolls) == 0x000001, "Wrong alignment on CoreGameManualPanelWidget_ResetScrolls");
static_assert(sizeof(CoreGameManualPanelWidget_ResetScrolls) == 0x000001, "Wrong size on CoreGameManualPanelWidget_ResetScrolls");
static_assert(offsetof(CoreGameManualPanelWidget_ResetScrolls, resetTopicsScroll) == 0x000000, "Member 'CoreGameManualPanelWidget_ResetScrolls::resetTopicsScroll' has a wrong offset!");

// Function DBDUIViewsCore.CoreGameManualPanelWidget.SetGameManualMenuState
// 0x0001 (0x0001 - 0x0000)
struct CoreGameManualPanelWidget_SetGameManualMenuState final
{
public:
	EGameManualMenuState                          menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGameManualPanelWidget_SetGameManualMenuState) == 0x000001, "Wrong alignment on CoreGameManualPanelWidget_SetGameManualMenuState");
static_assert(sizeof(CoreGameManualPanelWidget_SetGameManualMenuState) == 0x000001, "Wrong size on CoreGameManualPanelWidget_SetGameManualMenuState");
static_assert(offsetof(CoreGameManualPanelWidget_SetGameManualMenuState, menuState) == 0x000000, "Member 'CoreGameManualPanelWidget_SetGameManualMenuState::menuState' has a wrong offset!");

// Function DBDUIViewsCore.CoreGameManualPanelWidget.ShowHelpTopics
// 0x0001 (0x0001 - 0x0000)
struct CoreGameManualPanelWidget_ShowHelpTopics final
{
public:
	EHelpType                                     categoryType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGameManualPanelWidget_ShowHelpTopics) == 0x000001, "Wrong alignment on CoreGameManualPanelWidget_ShowHelpTopics");
static_assert(sizeof(CoreGameManualPanelWidget_ShowHelpTopics) == 0x000001, "Wrong size on CoreGameManualPanelWidget_ShowHelpTopics");
static_assert(offsetof(CoreGameManualPanelWidget_ShowHelpTopics, categoryType) == 0x000000, "Member 'CoreGameManualPanelWidget_ShowHelpTopics::categoryType' has a wrong offset!");

// Function DBDUIViewsCore.CoreGammaSettingsPopupWidget.OnGammaValueChanged
// 0x0004 (0x0004 - 0x0000)
struct CoreGammaSettingsPopupWidget_OnGammaValueChanged final
{
public:
	float                                         gamma;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGammaSettingsPopupWidget_OnGammaValueChanged) == 0x000004, "Wrong alignment on CoreGammaSettingsPopupWidget_OnGammaValueChanged");
static_assert(sizeof(CoreGammaSettingsPopupWidget_OnGammaValueChanged) == 0x000004, "Wrong size on CoreGammaSettingsPopupWidget_OnGammaValueChanged");
static_assert(offsetof(CoreGammaSettingsPopupWidget_OnGammaValueChanged, gamma) == 0x000000, "Member 'CoreGammaSettingsPopupWidget_OnGammaValueChanged::gamma' has a wrong offset!");

// Function DBDUIViewsCore.SettingsMatchDetailsWidget.OnMouseWheelInput
// 0x0080 (0x0080 - 0x0000)
struct SettingsMatchDetailsWidget_OnMouseWheelInput final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMatchDetailsWidget_OnMouseWheelInput) == 0x000008, "Wrong alignment on SettingsMatchDetailsWidget_OnMouseWheelInput");
static_assert(sizeof(SettingsMatchDetailsWidget_OnMouseWheelInput) == 0x000080, "Wrong size on SettingsMatchDetailsWidget_OnMouseWheelInput");
static_assert(offsetof(SettingsMatchDetailsWidget_OnMouseWheelInput, PointerEvent) == 0x000000, "Member 'SettingsMatchDetailsWidget_OnMouseWheelInput::PointerEvent' has a wrong offset!");

// Function DBDUIViewsCore.SettingsMatchDetailsWidget.OnSurvivorInfoButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct SettingsMatchDetailsWidget_OnSurvivorInfoButtonClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMatchDetailsWidget_OnSurvivorInfoButtonClicked) == 0x000008, "Wrong alignment on SettingsMatchDetailsWidget_OnSurvivorInfoButtonClicked");
static_assert(sizeof(SettingsMatchDetailsWidget_OnSurvivorInfoButtonClicked) == 0x000008, "Wrong size on SettingsMatchDetailsWidget_OnSurvivorInfoButtonClicked");
static_assert(offsetof(SettingsMatchDetailsWidget_OnSurvivorInfoButtonClicked, Button) == 0x000000, "Member 'SettingsMatchDetailsWidget_OnSurvivorInfoButtonClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreGenericTextInputPopupWidget_OnButtonHovered final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGenericTextInputPopupWidget_OnButtonHovered) == 0x000008, "Wrong alignment on CoreGenericTextInputPopupWidget_OnButtonHovered");
static_assert(sizeof(CoreGenericTextInputPopupWidget_OnButtonHovered) == 0x000008, "Wrong size on CoreGenericTextInputPopupWidget_OnButtonHovered");
static_assert(offsetof(CoreGenericTextInputPopupWidget_OnButtonHovered, Button) == 0x000000, "Member 'CoreGenericTextInputPopupWidget_OnButtonHovered::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreGenericTextInputPopupWidget_OnButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGenericTextInputPopupWidget_OnButtonUnhovered) == 0x000008, "Wrong alignment on CoreGenericTextInputPopupWidget_OnButtonUnhovered");
static_assert(sizeof(CoreGenericTextInputPopupWidget_OnButtonUnhovered) == 0x000008, "Wrong size on CoreGenericTextInputPopupWidget_OnButtonUnhovered");
static_assert(offsetof(CoreGenericTextInputPopupWidget_OnButtonUnhovered, Button) == 0x000000, "Member 'CoreGenericTextInputPopupWidget_OnButtonUnhovered::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct CoreGenericTextInputPopupWidget_OnTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGenericTextInputPopupWidget_OnTextChanged) == 0x000008, "Wrong alignment on CoreGenericTextInputPopupWidget_OnTextChanged");
static_assert(sizeof(CoreGenericTextInputPopupWidget_OnTextChanged) == 0x000018, "Wrong size on CoreGenericTextInputPopupWidget_OnTextChanged");
static_assert(offsetof(CoreGenericTextInputPopupWidget_OnTextChanged, InText) == 0x000000, "Member 'CoreGenericTextInputPopupWidget_OnTextChanged::InText' has a wrong offset!");

// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct CoreGenericTextInputPopupWidget_OnTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   inCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreGenericTextInputPopupWidget_OnTextCommitted) == 0x000008, "Wrong alignment on CoreGenericTextInputPopupWidget_OnTextCommitted");
static_assert(sizeof(CoreGenericTextInputPopupWidget_OnTextCommitted) == 0x000020, "Wrong size on CoreGenericTextInputPopupWidget_OnTextCommitted");
static_assert(offsetof(CoreGenericTextInputPopupWidget_OnTextCommitted, InText) == 0x000000, "Member 'CoreGenericTextInputPopupWidget_OnTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(CoreGenericTextInputPopupWidget_OnTextCommitted, inCommitType) == 0x000018, "Member 'CoreGenericTextInputPopupWidget_OnTextCommitted::inCommitType' has a wrong offset!");

// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnTextEntered
// 0x0018 (0x0018 - 0x0000)
struct CoreGenericTextInputPopupWidget_OnTextEntered final
{
public:
	EPopupButtonType                              selectedButtonType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 inputText;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGenericTextInputPopupWidget_OnTextEntered) == 0x000008, "Wrong alignment on CoreGenericTextInputPopupWidget_OnTextEntered");
static_assert(sizeof(CoreGenericTextInputPopupWidget_OnTextEntered) == 0x000018, "Wrong size on CoreGenericTextInputPopupWidget_OnTextEntered");
static_assert(offsetof(CoreGenericTextInputPopupWidget_OnTextEntered, selectedButtonType) == 0x000000, "Member 'CoreGenericTextInputPopupWidget_OnTextEntered::selectedButtonType' has a wrong offset!");
static_assert(offsetof(CoreGenericTextInputPopupWidget_OnTextEntered, inputText) == 0x000008, "Member 'CoreGenericTextInputPopupWidget_OnTextEntered::inputText' has a wrong offset!");

// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.OnTextInputChoiceSelected
// 0x0018 (0x0018 - 0x0000)
struct CoreGenericTextInputPopupWidget_OnTextInputChoiceSelected final
{
public:
	EPopupButtonType                              selectedButtonType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 inputText;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGenericTextInputPopupWidget_OnTextInputChoiceSelected) == 0x000008, "Wrong alignment on CoreGenericTextInputPopupWidget_OnTextInputChoiceSelected");
static_assert(sizeof(CoreGenericTextInputPopupWidget_OnTextInputChoiceSelected) == 0x000018, "Wrong size on CoreGenericTextInputPopupWidget_OnTextInputChoiceSelected");
static_assert(offsetof(CoreGenericTextInputPopupWidget_OnTextInputChoiceSelected, selectedButtonType) == 0x000000, "Member 'CoreGenericTextInputPopupWidget_OnTextInputChoiceSelected::selectedButtonType' has a wrong offset!");
static_assert(offsetof(CoreGenericTextInputPopupWidget_OnTextInputChoiceSelected, inputText) == 0x000008, "Member 'CoreGenericTextInputPopupWidget_OnTextInputChoiceSelected::inputText' has a wrong offset!");

// Function DBDUIViewsCore.CoreGenericTextInputPopupWidget.UpdateCharacterCounterVisual
// 0x0001 (0x0001 - 0x0000)
struct CoreGenericTextInputPopupWidget_UpdateCharacterCounterVisual final
{
public:
	bool                                          limitReached;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGenericTextInputPopupWidget_UpdateCharacterCounterVisual) == 0x000001, "Wrong alignment on CoreGenericTextInputPopupWidget_UpdateCharacterCounterVisual");
static_assert(sizeof(CoreGenericTextInputPopupWidget_UpdateCharacterCounterVisual) == 0x000001, "Wrong size on CoreGenericTextInputPopupWidget_UpdateCharacterCounterVisual");
static_assert(offsetof(CoreGenericTextInputPopupWidget_UpdateCharacterCounterVisual, limitReached) == 0x000000, "Member 'CoreGenericTextInputPopupWidget_UpdateCharacterCounterVisual::limitReached' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardPopupWidget.PlaySfx
// 0x0001 (0x0001 - 0x0000)
struct CoreRewardPopupWidget_PlaySfx final
{
public:
	EItemRarity                                   Rarity;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardPopupWidget_PlaySfx) == 0x000001, "Wrong alignment on CoreRewardPopupWidget_PlaySfx");
static_assert(sizeof(CoreRewardPopupWidget_PlaySfx) == 0x000001, "Wrong size on CoreRewardPopupWidget_PlaySfx");
static_assert(offsetof(CoreRewardPopupWidget_PlaySfx, Rarity) == 0x000000, "Member 'CoreRewardPopupWidget_PlaySfx::Rarity' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardPopupWidget.SetRewardData
// 0x0008 (0x0008 - 0x0000)
struct CoreRewardPopupWidget_SetRewardData final
{
public:
	class UGrantedRewardPopupViewData*            RewardData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardPopupWidget_SetRewardData) == 0x000008, "Wrong alignment on CoreRewardPopupWidget_SetRewardData");
static_assert(sizeof(CoreRewardPopupWidget_SetRewardData) == 0x000008, "Wrong size on CoreRewardPopupWidget_SetRewardData");
static_assert(offsetof(CoreRewardPopupWidget_SetRewardData, RewardData) == 0x000000, "Member 'CoreRewardPopupWidget_SetRewardData::RewardData' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardPopupWidget.SetRewardList
// 0x0010 (0x0010 - 0x0000)
struct CoreRewardPopupWidget_SetRewardList final
{
public:
	class URewardListRewardPopupViewData*         rewardListData;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreRewardPopupWidget_SetRewardList) == 0x000008, "Wrong alignment on CoreRewardPopupWidget_SetRewardList");
static_assert(sizeof(CoreRewardPopupWidget_SetRewardList) == 0x000010, "Wrong size on CoreRewardPopupWidget_SetRewardList");
static_assert(offsetof(CoreRewardPopupWidget_SetRewardList, rewardListData) == 0x000000, "Member 'CoreRewardPopupWidget_SetRewardList::rewardListData' has a wrong offset!");
static_assert(offsetof(CoreRewardPopupWidget_SetRewardList, ReturnValue) == 0x000008, "Member 'CoreRewardPopupWidget_SetRewardList::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardPopupWidget.SetRewardWrapperData
// 0x0018 (0x0018 - 0x0000)
struct CoreRewardPopupWidget_SetRewardWrapperData final
{
public:
	class UCoreRewardWrapperWidget*               targetWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URewardWrapperRewardPopupViewData*      RewardData;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreRewardPopupWidget_SetRewardWrapperData) == 0x000008, "Wrong alignment on CoreRewardPopupWidget_SetRewardWrapperData");
static_assert(sizeof(CoreRewardPopupWidget_SetRewardWrapperData) == 0x000018, "Wrong size on CoreRewardPopupWidget_SetRewardWrapperData");
static_assert(offsetof(CoreRewardPopupWidget_SetRewardWrapperData, targetWidget) == 0x000000, "Member 'CoreRewardPopupWidget_SetRewardWrapperData::targetWidget' has a wrong offset!");
static_assert(offsetof(CoreRewardPopupWidget_SetRewardWrapperData, RewardData) == 0x000008, "Member 'CoreRewardPopupWidget_SetRewardWrapperData::RewardData' has a wrong offset!");
static_assert(offsetof(CoreRewardPopupWidget_SetRewardWrapperData, ReturnValue) == 0x000010, "Member 'CoreRewardPopupWidget_SetRewardWrapperData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreSettingsPlayerInfoContainerWidget.OnPlayerInfoButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreSettingsPlayerInfoContainerWidget_OnPlayerInfoButtonClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSettingsPlayerInfoContainerWidget_OnPlayerInfoButtonClicked) == 0x000008, "Wrong alignment on CoreSettingsPlayerInfoContainerWidget_OnPlayerInfoButtonClicked");
static_assert(sizeof(CoreSettingsPlayerInfoContainerWidget_OnPlayerInfoButtonClicked) == 0x000008, "Wrong size on CoreSettingsPlayerInfoContainerWidget_OnPlayerInfoButtonClicked");
static_assert(offsetof(CoreSettingsPlayerInfoContainerWidget_OnPlayerInfoButtonClicked, Button) == 0x000000, "Member 'CoreSettingsPlayerInfoContainerWidget_OnPlayerInfoButtonClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreSettingsPlayerInfoContainerWidget.SetButtonPadding
// 0x0010 (0x0010 - 0x0000)
struct CoreSettingsPlayerInfoContainerWidget_SetButtonPadding final
{
public:
	struct FMargin                                ButtonPadding;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSettingsPlayerInfoContainerWidget_SetButtonPadding) == 0x000004, "Wrong alignment on CoreSettingsPlayerInfoContainerWidget_SetButtonPadding");
static_assert(sizeof(CoreSettingsPlayerInfoContainerWidget_SetButtonPadding) == 0x000010, "Wrong size on CoreSettingsPlayerInfoContainerWidget_SetButtonPadding");
static_assert(offsetof(CoreSettingsPlayerInfoContainerWidget_SetButtonPadding, ButtonPadding) == 0x000000, "Member 'CoreSettingsPlayerInfoContainerWidget_SetButtonPadding::ButtonPadding' has a wrong offset!");

// Function DBDUIViewsCore.CoreSettingsPlayerInfoContainerWidget.SetPlayerInfoMaxNumberOfColumns
// 0x0004 (0x0004 - 0x0000)
struct CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoMaxNumberOfColumns final
{
public:
	int32                                         NumberOfColumns;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoMaxNumberOfColumns) == 0x000004, "Wrong alignment on CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoMaxNumberOfColumns");
static_assert(sizeof(CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoMaxNumberOfColumns) == 0x000004, "Wrong size on CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoMaxNumberOfColumns");
static_assert(offsetof(CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoMaxNumberOfColumns, NumberOfColumns) == 0x000000, "Member 'CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoMaxNumberOfColumns::NumberOfColumns' has a wrong offset!");

// Function DBDUIViewsCore.CoreSettingsPlayerInfoContainerWidget.SetPlayerInfoOfferingVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoOfferingVisibility final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoOfferingVisibility) == 0x000001, "Wrong alignment on CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoOfferingVisibility");
static_assert(sizeof(CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoOfferingVisibility) == 0x000001, "Wrong size on CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoOfferingVisibility");
static_assert(offsetof(CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoOfferingVisibility, IsVisible_0) == 0x000000, "Member 'CoreSettingsPlayerInfoContainerWidget_SetPlayerInfoOfferingVisibility::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudAimingCrosshairWidget.GetPreviousState
// 0x0001 (0x0001 - 0x0000)
struct CoreHudAimingCrosshairWidget_GetPreviousState final
{
public:
	EAimingCrosshairState                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudAimingCrosshairWidget_GetPreviousState) == 0x000001, "Wrong alignment on CoreHudAimingCrosshairWidget_GetPreviousState");
static_assert(sizeof(CoreHudAimingCrosshairWidget_GetPreviousState) == 0x000001, "Wrong size on CoreHudAimingCrosshairWidget_GetPreviousState");
static_assert(offsetof(CoreHudAimingCrosshairWidget_GetPreviousState, ReturnValue) == 0x000000, "Member 'CoreHudAimingCrosshairWidget_GetPreviousState::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudAimingCrosshairWidget.GetProgress
// 0x0004 (0x0004 - 0x0000)
struct CoreHudAimingCrosshairWidget_GetProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudAimingCrosshairWidget_GetProgress) == 0x000004, "Wrong alignment on CoreHudAimingCrosshairWidget_GetProgress");
static_assert(sizeof(CoreHudAimingCrosshairWidget_GetProgress) == 0x000004, "Wrong size on CoreHudAimingCrosshairWidget_GetProgress");
static_assert(offsetof(CoreHudAimingCrosshairWidget_GetProgress, ReturnValue) == 0x000000, "Member 'CoreHudAimingCrosshairWidget_GetProgress::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudAimingCrosshairWidget.GetState
// 0x0001 (0x0001 - 0x0000)
struct CoreHudAimingCrosshairWidget_GetState final
{
public:
	EAimingCrosshairState                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudAimingCrosshairWidget_GetState) == 0x000001, "Wrong alignment on CoreHudAimingCrosshairWidget_GetState");
static_assert(sizeof(CoreHudAimingCrosshairWidget_GetState) == 0x000001, "Wrong size on CoreHudAimingCrosshairWidget_GetState");
static_assert(offsetof(CoreHudAimingCrosshairWidget_GetState, ReturnValue) == 0x000000, "Member 'CoreHudAimingCrosshairWidget_GetState::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudAlertWidget.OnClearAlertsComplete
// 0x0008 (0x0008 - 0x0000)
struct CoreHudAlertWidget_OnClearAlertsComplete final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudAlertWidget_OnClearAlertsComplete) == 0x000008, "Wrong alignment on CoreHudAlertWidget_OnClearAlertsComplete");
static_assert(sizeof(CoreHudAlertWidget_OnClearAlertsComplete) == 0x000008, "Wrong size on CoreHudAlertWidget_OnClearAlertsComplete");
static_assert(offsetof(CoreHudAlertWidget_OnClearAlertsComplete, tween) == 0x000000, "Member 'CoreHudAlertWidget_OnClearAlertsComplete::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudAlertWidget.OnPopAlertComplete
// 0x0008 (0x0008 - 0x0000)
struct CoreHudAlertWidget_OnPopAlertComplete final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudAlertWidget_OnPopAlertComplete) == 0x000008, "Wrong alignment on CoreHudAlertWidget_OnPopAlertComplete");
static_assert(sizeof(CoreHudAlertWidget_OnPopAlertComplete) == 0x000008, "Wrong size on CoreHudAlertWidget_OnPopAlertComplete");
static_assert(offsetof(CoreHudAlertWidget_OnPopAlertComplete, tween) == 0x000000, "Member 'CoreHudAlertWidget_OnPopAlertComplete::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudAlertWidget.GetAlerts
// 0x0010 (0x0010 - 0x0000)
struct CoreHudAlertWidget_GetAlerts final
{
public:
	TArray<class UCoreBaseUserWidget*>            ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudAlertWidget_GetAlerts) == 0x000008, "Wrong alignment on CoreHudAlertWidget_GetAlerts");
static_assert(sizeof(CoreHudAlertWidget_GetAlerts) == 0x000010, "Wrong size on CoreHudAlertWidget_GetAlerts");
static_assert(offsetof(CoreHudAlertWidget_GetAlerts, ReturnValue) == 0x000000, "Member 'CoreHudAlertWidget_GetAlerts::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudAlertWidget.GetPendingAlerts
// 0x0010 (0x0010 - 0x0000)
struct CoreHudAlertWidget_GetPendingAlerts final
{
public:
	TArray<class UCoreBaseUserWidget*>            ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudAlertWidget_GetPendingAlerts) == 0x000008, "Wrong alignment on CoreHudAlertWidget_GetPendingAlerts");
static_assert(sizeof(CoreHudAlertWidget_GetPendingAlerts) == 0x000010, "Wrong size on CoreHudAlertWidget_GetPendingAlerts");
static_assert(offsetof(CoreHudAlertWidget_GetPendingAlerts, ReturnValue) == 0x000000, "Member 'CoreHudAlertWidget_GetPendingAlerts::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudAlertWidget.GetRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct CoreHudAlertWidget_GetRemainingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudAlertWidget_GetRemainingTime) == 0x000004, "Wrong alignment on CoreHudAlertWidget_GetRemainingTime");
static_assert(sizeof(CoreHudAlertWidget_GetRemainingTime) == 0x000004, "Wrong size on CoreHudAlertWidget_GetRemainingTime");
static_assert(offsetof(CoreHudAlertWidget_GetRemainingTime, ReturnValue) == 0x000000, "Member 'CoreHudAlertWidget_GetRemainingTime::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreSortingWidget.OnNextSortingOptionClick
// 0x0008 (0x0008 - 0x0000)
struct CoreSortingWidget_OnNextSortingOptionClick final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSortingWidget_OnNextSortingOptionClick) == 0x000008, "Wrong alignment on CoreSortingWidget_OnNextSortingOptionClick");
static_assert(sizeof(CoreSortingWidget_OnNextSortingOptionClick) == 0x000008, "Wrong size on CoreSortingWidget_OnNextSortingOptionClick");
static_assert(offsetof(CoreSortingWidget_OnNextSortingOptionClick, buttonTarget) == 0x000000, "Member 'CoreSortingWidget_OnNextSortingOptionClick::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreSortingWidget.OnPreviousSortingOptionClick
// 0x0008 (0x0008 - 0x0000)
struct CoreSortingWidget_OnPreviousSortingOptionClick final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSortingWidget_OnPreviousSortingOptionClick) == 0x000008, "Wrong alignment on CoreSortingWidget_OnPreviousSortingOptionClick");
static_assert(sizeof(CoreSortingWidget_OnPreviousSortingOptionClick) == 0x000008, "Wrong size on CoreSortingWidget_OnPreviousSortingOptionClick");
static_assert(offsetof(CoreSortingWidget_OnPreviousSortingOptionClick, buttonTarget) == 0x000000, "Member 'CoreSortingWidget_OnPreviousSortingOptionClick::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreSortingWidget.OnSortingOrderClick
// 0x0008 (0x0008 - 0x0000)
struct CoreSortingWidget_OnSortingOrderClick final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSortingWidget_OnSortingOrderClick) == 0x000008, "Wrong alignment on CoreSortingWidget_OnSortingOrderClick");
static_assert(sizeof(CoreSortingWidget_OnSortingOrderClick) == 0x000008, "Wrong size on CoreSortingWidget_OnSortingOrderClick");
static_assert(offsetof(CoreSortingWidget_OnSortingOrderClick, buttonTarget) == 0x000000, "Member 'CoreSortingWidget_OnSortingOrderClick::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreSortingWidget.SetSortingOrderButtonVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreSortingWidget_SetSortingOrderButtonVisibility final
{
public:
	bool                                          showSortingOrderButton;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSortingWidget_SetSortingOrderButtonVisibility) == 0x000001, "Wrong alignment on CoreSortingWidget_SetSortingOrderButtonVisibility");
static_assert(sizeof(CoreSortingWidget_SetSortingOrderButtonVisibility) == 0x000001, "Wrong size on CoreSortingWidget_SetSortingOrderButtonVisibility");
static_assert(offsetof(CoreSortingWidget_SetSortingOrderButtonVisibility, showSortingOrderButton) == 0x000000, "Member 'CoreSortingWidget_SetSortingOrderButtonVisibility::showSortingOrderButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreSortingWidget.ToggleSortingOrder
// 0x0001 (0x0001 - 0x0000)
struct CoreSortingWidget_ToggleSortingOrder final
{
public:
	ESortingOrder                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSortingWidget_ToggleSortingOrder) == 0x000001, "Wrong alignment on CoreSortingWidget_ToggleSortingOrder");
static_assert(sizeof(CoreSortingWidget_ToggleSortingOrder) == 0x000001, "Wrong size on CoreSortingWidget_ToggleSortingOrder");
static_assert(offsetof(CoreSortingWidget_ToggleSortingOrder, ReturnValue) == 0x000000, "Member 'CoreSortingWidget_ToggleSortingOrder::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreSortingWidget.UpdateSortingOrderButton
// 0x0001 (0x0001 - 0x0000)
struct CoreSortingWidget_UpdateSortingOrderButton final
{
public:
	ESortingOrder                                 sortingOrder;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSortingWidget_UpdateSortingOrderButton) == 0x000001, "Wrong alignment on CoreSortingWidget_UpdateSortingOrderButton");
static_assert(sizeof(CoreSortingWidget_UpdateSortingOrderButton) == 0x000001, "Wrong size on CoreSortingWidget_UpdateSortingOrderButton");
static_assert(offsetof(CoreSortingWidget_UpdateSortingOrderButton, sortingOrder) == 0x000000, "Member 'CoreSortingWidget_UpdateSortingOrderButton::sortingOrder' has a wrong offset!");

// Function DBDUIViewsCore.CoreSortingWidget.IsOptionEnabled
// 0x0004 (0x0004 - 0x0000)
struct CoreSortingWidget_IsOptionEnabled final
{
public:
	ESortingOption                                Option;                                            // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSortingWidget_IsOptionEnabled) == 0x000002, "Wrong alignment on CoreSortingWidget_IsOptionEnabled");
static_assert(sizeof(CoreSortingWidget_IsOptionEnabled) == 0x000004, "Wrong size on CoreSortingWidget_IsOptionEnabled");
static_assert(offsetof(CoreSortingWidget_IsOptionEnabled, Option) == 0x000000, "Member 'CoreSortingWidget_IsOptionEnabled::Option' has a wrong offset!");
static_assert(offsetof(CoreSortingWidget_IsOptionEnabled, ReturnValue) == 0x000002, "Member 'CoreSortingWidget_IsOptionEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.Init
// 0x0001 (0x0001 - 0x0000)
struct CoreHudDirectionalMiniGameItemWidget_Init final
{
public:
	EDirectionalInputKey                          Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudDirectionalMiniGameItemWidget_Init) == 0x000001, "Wrong alignment on CoreHudDirectionalMiniGameItemWidget_Init");
static_assert(sizeof(CoreHudDirectionalMiniGameItemWidget_Init) == 0x000001, "Wrong size on CoreHudDirectionalMiniGameItemWidget_Init");
static_assert(offsetof(CoreHudDirectionalMiniGameItemWidget_Init, Direction) == 0x000000, "Member 'CoreHudDirectionalMiniGameItemWidget_Init::Direction' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.RevealDirection
// 0x0001 (0x0001 - 0x0000)
struct CoreHudDirectionalMiniGameItemWidget_RevealDirection final
{
public:
	bool                                          withAnimation;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudDirectionalMiniGameItemWidget_RevealDirection) == 0x000001, "Wrong alignment on CoreHudDirectionalMiniGameItemWidget_RevealDirection");
static_assert(sizeof(CoreHudDirectionalMiniGameItemWidget_RevealDirection) == 0x000001, "Wrong size on CoreHudDirectionalMiniGameItemWidget_RevealDirection");
static_assert(offsetof(CoreHudDirectionalMiniGameItemWidget_RevealDirection, withAnimation) == 0x000000, "Member 'CoreHudDirectionalMiniGameItemWidget_RevealDirection::withAnimation' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.UpdateFinaleVisualState
// 0x0001 (0x0001 - 0x0000)
struct CoreHudDirectionalMiniGameItemWidget_UpdateFinaleVisualState final
{
public:
	bool                                          IsSuccessful;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudDirectionalMiniGameItemWidget_UpdateFinaleVisualState) == 0x000001, "Wrong alignment on CoreHudDirectionalMiniGameItemWidget_UpdateFinaleVisualState");
static_assert(sizeof(CoreHudDirectionalMiniGameItemWidget_UpdateFinaleVisualState) == 0x000001, "Wrong size on CoreHudDirectionalMiniGameItemWidget_UpdateFinaleVisualState");
static_assert(offsetof(CoreHudDirectionalMiniGameItemWidget_UpdateFinaleVisualState, IsSuccessful) == 0x000000, "Member 'CoreHudDirectionalMiniGameItemWidget_UpdateFinaleVisualState::IsSuccessful' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.UpdateResult
// 0x0001 (0x0001 - 0x0000)
struct CoreHudDirectionalMiniGameItemWidget_UpdateResult final
{
public:
	bool                                          IsSuccessful;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudDirectionalMiniGameItemWidget_UpdateResult) == 0x000001, "Wrong alignment on CoreHudDirectionalMiniGameItemWidget_UpdateResult");
static_assert(sizeof(CoreHudDirectionalMiniGameItemWidget_UpdateResult) == 0x000001, "Wrong size on CoreHudDirectionalMiniGameItemWidget_UpdateResult");
static_assert(offsetof(CoreHudDirectionalMiniGameItemWidget_UpdateResult, IsSuccessful) == 0x000000, "Member 'CoreHudDirectionalMiniGameItemWidget_UpdateResult::IsSuccessful' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudDirectionalMiniGameWidget.GetWidgets
// 0x0010 (0x0010 - 0x0000)
struct CoreHudDirectionalMiniGameWidget_GetWidgets final
{
public:
	TArray<class UCoreHudDirectionalMiniGameItemWidget*> ReturnValue;                                // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudDirectionalMiniGameWidget_GetWidgets) == 0x000008, "Wrong alignment on CoreHudDirectionalMiniGameWidget_GetWidgets");
static_assert(sizeof(CoreHudDirectionalMiniGameWidget_GetWidgets) == 0x000010, "Wrong size on CoreHudDirectionalMiniGameWidget_GetWidgets");
static_assert(offsetof(CoreHudDirectionalMiniGameWidget_GetWidgets, ReturnValue) == 0x000000, "Member 'CoreHudDirectionalMiniGameWidget_GetWidgets::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudDirectionalMiniGameWidget.GetCurrentType
// 0x0001 (0x0001 - 0x0000)
struct CoreHudDirectionalMiniGameWidget_GetCurrentType final
{
public:
	EDirectionalMiniGameType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudDirectionalMiniGameWidget_GetCurrentType) == 0x000001, "Wrong alignment on CoreHudDirectionalMiniGameWidget_GetCurrentType");
static_assert(sizeof(CoreHudDirectionalMiniGameWidget_GetCurrentType) == 0x000001, "Wrong size on CoreHudDirectionalMiniGameWidget_GetCurrentType");
static_assert(offsetof(CoreHudDirectionalMiniGameWidget_GetCurrentType, ReturnValue) == 0x000000, "Member 'CoreHudDirectionalMiniGameWidget_GetCurrentType::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreShrineOfSecretsItemWidget.OnPurchaseButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreShrineOfSecretsItemWidget_OnPurchaseButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreShrineOfSecretsItemWidget_OnPurchaseButtonClicked) == 0x000008, "Wrong alignment on CoreShrineOfSecretsItemWidget_OnPurchaseButtonClicked");
static_assert(sizeof(CoreShrineOfSecretsItemWidget_OnPurchaseButtonClicked) == 0x000008, "Wrong size on CoreShrineOfSecretsItemWidget_OnPurchaseButtonClicked");
static_assert(offsetof(CoreShrineOfSecretsItemWidget_OnPurchaseButtonClicked, buttonTarget) == 0x000000, "Member 'CoreShrineOfSecretsItemWidget_OnPurchaseButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreShrineOfSecretsItemWidget.SetEventDiscountVisualData
// 0x0068 (0x0068 - 0x0000)
struct CoreShrineOfSecretsItemWidget_SetEventDiscountVisualData final
{
public:
	struct FShrineOfSecretsDiscountUIInfo         discountInfo;                                      // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreShrineOfSecretsItemWidget_SetEventDiscountVisualData) == 0x000008, "Wrong alignment on CoreShrineOfSecretsItemWidget_SetEventDiscountVisualData");
static_assert(sizeof(CoreShrineOfSecretsItemWidget_SetEventDiscountVisualData) == 0x000068, "Wrong size on CoreShrineOfSecretsItemWidget_SetEventDiscountVisualData");
static_assert(offsetof(CoreShrineOfSecretsItemWidget_SetEventDiscountVisualData, discountInfo) == 0x000000, "Member 'CoreShrineOfSecretsItemWidget_SetEventDiscountVisualData::discountInfo' has a wrong offset!");

// Function DBDUIViewsCore.CoreShrineOfSecretsItemWidget.SetVisuals
// 0x0208 (0x0208 - 0x0000)
struct CoreShrineOfSecretsItemWidget_SetVisuals final
{
public:
	struct FShrineOfSecretsItemViewData           ShrineOfSecretsItemViewData;                       // 0x0000(0x0208)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreShrineOfSecretsItemWidget_SetVisuals) == 0x000008, "Wrong alignment on CoreShrineOfSecretsItemWidget_SetVisuals");
static_assert(sizeof(CoreShrineOfSecretsItemWidget_SetVisuals) == 0x000208, "Wrong size on CoreShrineOfSecretsItemWidget_SetVisuals");
static_assert(offsetof(CoreShrineOfSecretsItemWidget_SetVisuals, ShrineOfSecretsItemViewData) == 0x000000, "Member 'CoreShrineOfSecretsItemWidget_SetVisuals::ShrineOfSecretsItemViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreSettingsPerksDisplayWidget.OnPerkClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreSettingsPerksDisplayWidget_OnPerkClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSettingsPerksDisplayWidget_OnPerkClicked) == 0x000008, "Wrong alignment on CoreSettingsPerksDisplayWidget_OnPerkClicked");
static_assert(sizeof(CoreSettingsPerksDisplayWidget_OnPerkClicked) == 0x000008, "Wrong size on CoreSettingsPerksDisplayWidget_OnPerkClicked");
static_assert(offsetof(CoreSettingsPerksDisplayWidget_OnPerkClicked, Button) == 0x000000, "Member 'CoreSettingsPerksDisplayWidget_OnPerkClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreSettingsPerksDisplayWidget.OnPerkHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreSettingsPerksDisplayWidget_OnPerkHovered final
{
public:
	class UCoreButtonWidget*                      hoveredPerk;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSettingsPerksDisplayWidget_OnPerkHovered) == 0x000008, "Wrong alignment on CoreSettingsPerksDisplayWidget_OnPerkHovered");
static_assert(sizeof(CoreSettingsPerksDisplayWidget_OnPerkHovered) == 0x000008, "Wrong size on CoreSettingsPerksDisplayWidget_OnPerkHovered");
static_assert(offsetof(CoreSettingsPerksDisplayWidget_OnPerkHovered, hoveredPerk) == 0x000000, "Member 'CoreSettingsPerksDisplayWidget_OnPerkHovered::hoveredPerk' has a wrong offset!");

// Function DBDUIViewsCore.CoreSettingsPerksDisplayWidget.OnPerkUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreSettingsPerksDisplayWidget_OnPerkUnhovered final
{
public:
	class UCoreButtonWidget*                      unhoveredPerk;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSettingsPerksDisplayWidget_OnPerkUnhovered) == 0x000008, "Wrong alignment on CoreSettingsPerksDisplayWidget_OnPerkUnhovered");
static_assert(sizeof(CoreSettingsPerksDisplayWidget_OnPerkUnhovered) == 0x000008, "Wrong size on CoreSettingsPerksDisplayWidget_OnPerkUnhovered");
static_assert(offsetof(CoreSettingsPerksDisplayWidget_OnPerkUnhovered, unhoveredPerk) == 0x000000, "Member 'CoreSettingsPerksDisplayWidget_OnPerkUnhovered::unhoveredPerk' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudScoreAlertItem.SetData
// 0x0030 (0x0030 - 0x0000)
struct CoreHudScoreAlertItem_SetData final
{
public:
	struct FScoreAlertViewData                    Data;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudScoreAlertItem_SetData) == 0x000008, "Wrong alignment on CoreHudScoreAlertItem_SetData");
static_assert(sizeof(CoreHudScoreAlertItem_SetData) == 0x000030, "Wrong size on CoreHudScoreAlertItem_SetData");
static_assert(offsetof(CoreHudScoreAlertItem_SetData, Data) == 0x000000, "Member 'CoreHudScoreAlertItem_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudStatusEffectAlertItem.SetData
// 0x01D0 (0x01D0 - 0x0000)
struct CoreHudStatusEffectAlertItem_SetData final
{
public:
	struct FStatusEffectAlertViewData             Data;                                              // 0x0000(0x01D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudStatusEffectAlertItem_SetData) == 0x000008, "Wrong alignment on CoreHudStatusEffectAlertItem_SetData");
static_assert(sizeof(CoreHudStatusEffectAlertItem_SetData) == 0x0001D0, "Wrong size on CoreHudStatusEffectAlertItem_SetData");
static_assert(offsetof(CoreHudStatusEffectAlertItem_SetData, Data) == 0x000000, "Member 'CoreHudStatusEffectAlertItem_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreArchivePassItemWidget.OnButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreArchivePassItemWidget_OnButtonHovered final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreArchivePassItemWidget_OnButtonHovered) == 0x000008, "Wrong alignment on CoreStoreArchivePassItemWidget_OnButtonHovered");
static_assert(sizeof(CoreStoreArchivePassItemWidget_OnButtonHovered) == 0x000008, "Wrong size on CoreStoreArchivePassItemWidget_OnButtonHovered");
static_assert(offsetof(CoreStoreArchivePassItemWidget_OnButtonHovered, targetButton) == 0x000000, "Member 'CoreStoreArchivePassItemWidget_OnButtonHovered::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreArchivePassItemWidget.OnButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreArchivePassItemWidget_OnButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreArchivePassItemWidget_OnButtonUnhovered) == 0x000008, "Wrong alignment on CoreStoreArchivePassItemWidget_OnButtonUnhovered");
static_assert(sizeof(CoreStoreArchivePassItemWidget_OnButtonUnhovered) == 0x000008, "Wrong size on CoreStoreArchivePassItemWidget_OnButtonUnhovered");
static_assert(offsetof(CoreStoreArchivePassItemWidget_OnButtonUnhovered, targetButton) == 0x000000, "Member 'CoreStoreArchivePassItemWidget_OnButtonUnhovered::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreArchivePassItemWidget.SetData
// 0x0158 (0x0158 - 0x0000)
struct CoreStoreArchivePassItemWidget_SetData final
{
public:
	struct FStoreArchivePassViewData              Data;                                              // 0x0000(0x0158)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreArchivePassItemWidget_SetData) == 0x000008, "Wrong alignment on CoreStoreArchivePassItemWidget_SetData");
static_assert(sizeof(CoreStoreArchivePassItemWidget_SetData) == 0x000158, "Wrong size on CoreStoreArchivePassItemWidget_SetData");
static_assert(offsetof(CoreStoreArchivePassItemWidget_SetData, Data) == 0x000000, "Member 'CoreStoreArchivePassItemWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreIconButtonWidget.SetIconTexture
// 0x0038 (0x0038 - 0x0000)
struct CoreIconButtonWidget_SetIconTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              iconTexture_0;                                     // 0x0000(0x0038)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreIconButtonWidget_SetIconTexture) == 0x000008, "Wrong alignment on CoreIconButtonWidget_SetIconTexture");
static_assert(sizeof(CoreIconButtonWidget_SetIconTexture) == 0x000038, "Wrong size on CoreIconButtonWidget_SetIconTexture");
static_assert(offsetof(CoreIconButtonWidget_SetIconTexture, iconTexture_0) == 0x000000, "Member 'CoreIconButtonWidget_SetIconTexture::iconTexture_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreToggleButtonWidget.SetActiveVisualState
// 0x0001 (0x0001 - 0x0000)
struct CoreToggleButtonWidget_SetActiveVisualState final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreToggleButtonWidget_SetActiveVisualState) == 0x000001, "Wrong alignment on CoreToggleButtonWidget_SetActiveVisualState");
static_assert(sizeof(CoreToggleButtonWidget_SetActiveVisualState) == 0x000001, "Wrong size on CoreToggleButtonWidget_SetActiveVisualState");
static_assert(offsetof(CoreToggleButtonWidget_SetActiveVisualState, IsActive) == 0x000000, "Member 'CoreToggleButtonWidget_SetActiveVisualState::IsActive' has a wrong offset!");

// Function DBDUIViewsCore.CoreToggleButtonWidget.IsToggled
// 0x0001 (0x0001 - 0x0000)
struct CoreToggleButtonWidget_IsToggled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreToggleButtonWidget_IsToggled) == 0x000001, "Wrong alignment on CoreToggleButtonWidget_IsToggled");
static_assert(sizeof(CoreToggleButtonWidget_IsToggled) == 0x000001, "Wrong size on CoreToggleButtonWidget_IsToggled");
static_assert(offsetof(CoreToggleButtonWidget_IsToggled, ReturnValue) == 0x000000, "Member 'CoreToggleButtonWidget_IsToggled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.SetData
// 0x0038 (0x0038 - 0x0000)
struct CoreSpecialEventLoadingScreenWidget_SetData final
{
public:
	struct FSpecialEventLoadingScreenViewData     Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSpecialEventLoadingScreenWidget_SetData) == 0x000008, "Wrong alignment on CoreSpecialEventLoadingScreenWidget_SetData");
static_assert(sizeof(CoreSpecialEventLoadingScreenWidget_SetData) == 0x000038, "Wrong size on CoreSpecialEventLoadingScreenWidget_SetData");
static_assert(offsetof(CoreSpecialEventLoadingScreenWidget_SetData, Data) == 0x000000, "Member 'CoreSpecialEventLoadingScreenWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.SetLoadingHint
// 0x0078 (0x0078 - 0x0000)
struct CoreSpecialEventLoadingScreenWidget_SetLoadingHint final
{
public:
	struct FLoadingHintViewData                   loadingHintData;                                   // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSpecialEventLoadingScreenWidget_SetLoadingHint) == 0x000008, "Wrong alignment on CoreSpecialEventLoadingScreenWidget_SetLoadingHint");
static_assert(sizeof(CoreSpecialEventLoadingScreenWidget_SetLoadingHint) == 0x000078, "Wrong size on CoreSpecialEventLoadingScreenWidget_SetLoadingHint");
static_assert(offsetof(CoreSpecialEventLoadingScreenWidget_SetLoadingHint, loadingHintData) == 0x000000, "Member 'CoreSpecialEventLoadingScreenWidget_SetLoadingHint::loadingHintData' has a wrong offset!");

// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.UpdateProgress
// 0x0004 (0x0004 - 0x0000)
struct CoreSpecialEventLoadingScreenWidget_UpdateProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSpecialEventLoadingScreenWidget_UpdateProgress) == 0x000004, "Wrong alignment on CoreSpecialEventLoadingScreenWidget_UpdateProgress");
static_assert(sizeof(CoreSpecialEventLoadingScreenWidget_UpdateProgress) == 0x000004, "Wrong size on CoreSpecialEventLoadingScreenWidget_UpdateProgress");
static_assert(offsetof(CoreSpecialEventLoadingScreenWidget_UpdateProgress, Progress) == 0x000000, "Member 'CoreSpecialEventLoadingScreenWidget_UpdateProgress::Progress' has a wrong offset!");

// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.SetLoadingLogoColor
// 0x0010 (0x0010 - 0x0000)
struct CoreSpecialEventLoadingScreenWidget_SetLoadingLogoColor final
{
public:
	struct FLinearColor                           FillingColor;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSpecialEventLoadingScreenWidget_SetLoadingLogoColor) == 0x000004, "Wrong alignment on CoreSpecialEventLoadingScreenWidget_SetLoadingLogoColor");
static_assert(sizeof(CoreSpecialEventLoadingScreenWidget_SetLoadingLogoColor) == 0x000010, "Wrong size on CoreSpecialEventLoadingScreenWidget_SetLoadingLogoColor");
static_assert(offsetof(CoreSpecialEventLoadingScreenWidget_SetLoadingLogoColor, FillingColor) == 0x000000, "Member 'CoreSpecialEventLoadingScreenWidget_SetLoadingLogoColor::FillingColor' has a wrong offset!");

// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget.SetProgressBarColors
// 0x0020 (0x0020 - 0x0000)
struct CoreSpecialEventLoadingScreenWidget_SetProgressBarColors final
{
public:
	struct FLinearColor                           MainColor;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           secondaryColor;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSpecialEventLoadingScreenWidget_SetProgressBarColors) == 0x000004, "Wrong alignment on CoreSpecialEventLoadingScreenWidget_SetProgressBarColors");
static_assert(sizeof(CoreSpecialEventLoadingScreenWidget_SetProgressBarColors) == 0x000020, "Wrong size on CoreSpecialEventLoadingScreenWidget_SetProgressBarColors");
static_assert(offsetof(CoreSpecialEventLoadingScreenWidget_SetProgressBarColors, MainColor) == 0x000000, "Member 'CoreSpecialEventLoadingScreenWidget_SetProgressBarColors::MainColor' has a wrong offset!");
static_assert(offsetof(CoreSpecialEventLoadingScreenWidget_SetProgressBarColors, secondaryColor) == 0x000010, "Member 'CoreSpecialEventLoadingScreenWidget_SetProgressBarColors::secondaryColor' has a wrong offset!");

// Function DBDUIViewsCore.CoreIconToggleWidget.SetNotificationIconVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreIconToggleWidget_SetNotificationIconVisibility final
{
public:
	bool                                          ShowNotification;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreIconToggleWidget_SetNotificationIconVisibility) == 0x000001, "Wrong alignment on CoreIconToggleWidget_SetNotificationIconVisibility");
static_assert(sizeof(CoreIconToggleWidget_SetNotificationIconVisibility) == 0x000001, "Wrong size on CoreIconToggleWidget_SetNotificationIconVisibility");
static_assert(offsetof(CoreIconToggleWidget_SetNotificationIconVisibility, ShowNotification) == 0x000000, "Member 'CoreIconToggleWidget_SetNotificationIconVisibility::ShowNotification' has a wrong offset!");

// Function DBDUIViewsCore.CoreImagePreviewAreaWidget.OnItemClicked
// 0x0004 (0x0004 - 0x0000)
struct CoreImagePreviewAreaWidget_OnItemClicked final
{
public:
	int32                                         selectedIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreImagePreviewAreaWidget_OnItemClicked) == 0x000004, "Wrong alignment on CoreImagePreviewAreaWidget_OnItemClicked");
static_assert(sizeof(CoreImagePreviewAreaWidget_OnItemClicked) == 0x000004, "Wrong size on CoreImagePreviewAreaWidget_OnItemClicked");
static_assert(offsetof(CoreImagePreviewAreaWidget_OnItemClicked, selectedIndex) == 0x000000, "Member 'CoreImagePreviewAreaWidget_OnItemClicked::selectedIndex' has a wrong offset!");

// Function DBDUIViewsCore.CoreImagePreviewAreaWidget.SetAnimatedPreviewData
// 0x0008 (0x0008 - 0x0000)
struct CoreImagePreviewAreaWidget_SetAnimatedPreviewData final
{
public:
	const class UStoreCustomizationItemViewData*  previewItemData;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreImagePreviewAreaWidget_SetAnimatedPreviewData) == 0x000008, "Wrong alignment on CoreImagePreviewAreaWidget_SetAnimatedPreviewData");
static_assert(sizeof(CoreImagePreviewAreaWidget_SetAnimatedPreviewData) == 0x000008, "Wrong size on CoreImagePreviewAreaWidget_SetAnimatedPreviewData");
static_assert(offsetof(CoreImagePreviewAreaWidget_SetAnimatedPreviewData, previewItemData) == 0x000000, "Member 'CoreImagePreviewAreaWidget_SetAnimatedPreviewData::previewItemData' has a wrong offset!");

// Function DBDUIViewsCore.CoreImagePreviewAreaWidget.SetData
// 0x0020 (0x0020 - 0x0000)
struct CoreImagePreviewAreaWidget_SetData final
{
public:
	struct FCustomizationItemPreviewAreaViewData  ViewData;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreImagePreviewAreaWidget_SetData) == 0x000008, "Wrong alignment on CoreImagePreviewAreaWidget_SetData");
static_assert(sizeof(CoreImagePreviewAreaWidget_SetData) == 0x000020, "Wrong size on CoreImagePreviewAreaWidget_SetData");
static_assert(offsetof(CoreImagePreviewAreaWidget_SetData, ViewData) == 0x000000, "Member 'CoreImagePreviewAreaWidget_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreImagePreviewAreaWidget.SetPreviewContainerVisual
// 0x0001 (0x0001 - 0x0000)
struct CoreImagePreviewAreaWidget_SetPreviewContainerVisual final
{
public:
	ECustomizationCategory                        CustomizationCategory;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreImagePreviewAreaWidget_SetPreviewContainerVisual) == 0x000001, "Wrong alignment on CoreImagePreviewAreaWidget_SetPreviewContainerVisual");
static_assert(sizeof(CoreImagePreviewAreaWidget_SetPreviewContainerVisual) == 0x000001, "Wrong size on CoreImagePreviewAreaWidget_SetPreviewContainerVisual");
static_assert(offsetof(CoreImagePreviewAreaWidget_SetPreviewContainerVisual, CustomizationCategory) == 0x000000, "Member 'CoreImagePreviewAreaWidget_SetPreviewContainerVisual::CustomizationCategory' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxBodySectionBaseWidget.GetSectionType
// 0x0001 (0x0001 - 0x0000)
struct CoreInboxBodySectionBaseWidget_GetSectionType final
{
public:
	ENewsAndMessagesSectionType                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxBodySectionBaseWidget_GetSectionType) == 0x000001, "Wrong alignment on CoreInboxBodySectionBaseWidget_GetSectionType");
static_assert(sizeof(CoreInboxBodySectionBaseWidget_GetSectionType) == 0x000001, "Wrong size on CoreInboxBodySectionBaseWidget_GetSectionType");
static_assert(offsetof(CoreInboxBodySectionBaseWidget_GetSectionType, ReturnValue) == 0x000000, "Member 'CoreInboxBodySectionBaseWidget_GetSectionType::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxBodySectionBaseWidget.SetData
// 0x0010 (0x0010 - 0x0000)
struct CoreInboxBodySectionBaseWidget_SetData final
{
public:
	class UInboxBodySectionViewData*              ViewData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreInboxBodySectionBaseWidget_SetData) == 0x000008, "Wrong alignment on CoreInboxBodySectionBaseWidget_SetData");
static_assert(sizeof(CoreInboxBodySectionBaseWidget_SetData) == 0x000010, "Wrong size on CoreInboxBodySectionBaseWidget_SetData");
static_assert(offsetof(CoreInboxBodySectionBaseWidget_SetData, ViewData) == 0x000000, "Member 'CoreInboxBodySectionBaseWidget_SetData::ViewData' has a wrong offset!");
static_assert(offsetof(CoreInboxBodySectionBaseWidget_SetData, ReturnValue) == 0x000008, "Member 'CoreInboxBodySectionBaseWidget_SetData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxBodySectionBaseWidget.SetSkin
// 0x0038 (0x0038 - 0x0000)
struct CoreInboxBodySectionBaseWidget_SetSkin final
{
public:
	struct FInboxSkinUIData                       skinUIData;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxBodySectionBaseWidget_SetSkin) == 0x000008, "Wrong alignment on CoreInboxBodySectionBaseWidget_SetSkin");
static_assert(sizeof(CoreInboxBodySectionBaseWidget_SetSkin) == 0x000038, "Wrong size on CoreInboxBodySectionBaseWidget_SetSkin");
static_assert(offsetof(CoreInboxBodySectionBaseWidget_SetSkin, skinUIData) == 0x000000, "Member 'CoreInboxBodySectionBaseWidget_SetSkin::skinUIData' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCategoryButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersCustomizationsWidget_OnCategoryButtonHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersCustomizationsWidget_OnCategoryButtonHovered) == 0x000008, "Wrong alignment on CoreStoreCharactersCustomizationsWidget_OnCategoryButtonHovered");
static_assert(sizeof(CoreStoreCharactersCustomizationsWidget_OnCategoryButtonHovered) == 0x000008, "Wrong size on CoreStoreCharactersCustomizationsWidget_OnCategoryButtonHovered");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_OnCategoryButtonHovered, buttonTarget) == 0x000000, "Member 'CoreStoreCharactersCustomizationsWidget_OnCategoryButtonHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCategoryButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersCustomizationsWidget_OnCategoryButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersCustomizationsWidget_OnCategoryButtonUnhovered) == 0x000008, "Wrong alignment on CoreStoreCharactersCustomizationsWidget_OnCategoryButtonUnhovered");
static_assert(sizeof(CoreStoreCharactersCustomizationsWidget_OnCategoryButtonUnhovered) == 0x000008, "Wrong size on CoreStoreCharactersCustomizationsWidget_OnCategoryButtonUnhovered");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_OnCategoryButtonUnhovered, buttonTarget) == 0x000000, "Member 'CoreStoreCharactersCustomizationsWidget_OnCategoryButtonUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCategorySelected
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreCharactersCustomizationsWidget_OnCategorySelected final
{
public:
	class UCoreSelectableButtonWidget*            buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreCharactersCustomizationsWidget_OnCategorySelected) == 0x000008, "Wrong alignment on CoreStoreCharactersCustomizationsWidget_OnCategorySelected");
static_assert(sizeof(CoreStoreCharactersCustomizationsWidget_OnCategorySelected) == 0x000010, "Wrong size on CoreStoreCharactersCustomizationsWidget_OnCategorySelected");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_OnCategorySelected, buttonTarget) == 0x000000, "Member 'CoreStoreCharactersCustomizationsWidget_OnCategorySelected::buttonTarget' has a wrong offset!");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_OnCategorySelected, IsSelected) == 0x000008, "Member 'CoreStoreCharactersCustomizationsWidget_OnCategorySelected::IsSelected' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCategorySelectedAgain
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersCustomizationsWidget_OnCategorySelectedAgain final
{
public:
	class UCoreSelectableButtonWidget*            buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersCustomizationsWidget_OnCategorySelectedAgain) == 0x000008, "Wrong alignment on CoreStoreCharactersCustomizationsWidget_OnCategorySelectedAgain");
static_assert(sizeof(CoreStoreCharactersCustomizationsWidget_OnCategorySelectedAgain) == 0x000008, "Wrong size on CoreStoreCharactersCustomizationsWidget_OnCategorySelectedAgain");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_OnCategorySelectedAgain, buttonTarget) == 0x000000, "Member 'CoreStoreCharactersCustomizationsWidget_OnCategorySelectedAgain::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCustomizationSelected
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreCharactersCustomizationsWidget_OnCustomizationSelected final
{
public:
	class UCoreSelectableButtonWidget*            buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreCharactersCustomizationsWidget_OnCustomizationSelected) == 0x000008, "Wrong alignment on CoreStoreCharactersCustomizationsWidget_OnCustomizationSelected");
static_assert(sizeof(CoreStoreCharactersCustomizationsWidget_OnCustomizationSelected) == 0x000010, "Wrong size on CoreStoreCharactersCustomizationsWidget_OnCustomizationSelected");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_OnCustomizationSelected, buttonTarget) == 0x000000, "Member 'CoreStoreCharactersCustomizationsWidget_OnCustomizationSelected::buttonTarget' has a wrong offset!");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_OnCustomizationSelected, IsSelected) == 0x000008, "Member 'CoreStoreCharactersCustomizationsWidget_OnCustomizationSelected::IsSelected' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnCustomizationSelectedAgain
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersCustomizationsWidget_OnCustomizationSelectedAgain final
{
public:
	class UCoreSelectableButtonWidget*            buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersCustomizationsWidget_OnCustomizationSelectedAgain) == 0x000008, "Wrong alignment on CoreStoreCharactersCustomizationsWidget_OnCustomizationSelectedAgain");
static_assert(sizeof(CoreStoreCharactersCustomizationsWidget_OnCustomizationSelectedAgain) == 0x000008, "Wrong size on CoreStoreCharactersCustomizationsWidget_OnCustomizationSelectedAgain");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_OnCustomizationSelectedAgain, buttonTarget) == 0x000000, "Member 'CoreStoreCharactersCustomizationsWidget_OnCustomizationSelectedAgain::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnFiltersButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersCustomizationsWidget_OnFiltersButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersCustomizationsWidget_OnFiltersButtonClicked) == 0x000008, "Wrong alignment on CoreStoreCharactersCustomizationsWidget_OnFiltersButtonClicked");
static_assert(sizeof(CoreStoreCharactersCustomizationsWidget_OnFiltersButtonClicked) == 0x000008, "Wrong size on CoreStoreCharactersCustomizationsWidget_OnFiltersButtonClicked");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_OnFiltersButtonClicked, buttonTarget) == 0x000000, "Member 'CoreStoreCharactersCustomizationsWidget_OnFiltersButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnFiltersChanged
// 0x0060 (0x0060 - 0x0000)
struct CoreStoreCharactersCustomizationsWidget_OnFiltersChanged final
{
public:
	struct FStoreCharactersFiltersData            storeFiltersData;                                  // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersCustomizationsWidget_OnFiltersChanged) == 0x000008, "Wrong alignment on CoreStoreCharactersCustomizationsWidget_OnFiltersChanged");
static_assert(sizeof(CoreStoreCharactersCustomizationsWidget_OnFiltersChanged) == 0x000060, "Wrong size on CoreStoreCharactersCustomizationsWidget_OnFiltersChanged");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_OnFiltersChanged, storeFiltersData) == 0x000000, "Member 'CoreStoreCharactersCustomizationsWidget_OnFiltersChanged::storeFiltersData' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnFiltersWidgetVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreCharactersCustomizationsWidget_OnFiltersWidgetVisibilityChanged final
{
public:
	ESlateVisibility                              newVisibility;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersCustomizationsWidget_OnFiltersWidgetVisibilityChanged) == 0x000001, "Wrong alignment on CoreStoreCharactersCustomizationsWidget_OnFiltersWidgetVisibilityChanged");
static_assert(sizeof(CoreStoreCharactersCustomizationsWidget_OnFiltersWidgetVisibilityChanged) == 0x000001, "Wrong size on CoreStoreCharactersCustomizationsWidget_OnFiltersWidgetVisibilityChanged");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_OnFiltersWidgetVisibilityChanged, newVisibility) == 0x000000, "Member 'CoreStoreCharactersCustomizationsWidget_OnFiltersWidgetVisibilityChanged::newVisibility' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.OnPresetSelected
// 0x0004 (0x0004 - 0x0000)
struct CoreStoreCharactersCustomizationsWidget_OnPresetSelected final
{
public:
	int32                                         SelectedPresetId;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersCustomizationsWidget_OnPresetSelected) == 0x000004, "Wrong alignment on CoreStoreCharactersCustomizationsWidget_OnPresetSelected");
static_assert(sizeof(CoreStoreCharactersCustomizationsWidget_OnPresetSelected) == 0x000004, "Wrong size on CoreStoreCharactersCustomizationsWidget_OnPresetSelected");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_OnPresetSelected, SelectedPresetId) == 0x000000, "Member 'CoreStoreCharactersCustomizationsWidget_OnPresetSelected::SelectedPresetId' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.SetRightStickMode
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreCharactersCustomizationsWidget_SetRightStickMode final
{
public:
	ERightStickMode                               rightStickMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersCustomizationsWidget_SetRightStickMode) == 0x000001, "Wrong alignment on CoreStoreCharactersCustomizationsWidget_SetRightStickMode");
static_assert(sizeof(CoreStoreCharactersCustomizationsWidget_SetRightStickMode) == 0x000001, "Wrong size on CoreStoreCharactersCustomizationsWidget_SetRightStickMode");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_SetRightStickMode, rightStickMode) == 0x000000, "Member 'CoreStoreCharactersCustomizationsWidget_SetRightStickMode::rightStickMode' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.GetCharacterCustomizationsScrollBox
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersCustomizationsWidget_GetCharacterCustomizationsScrollBox final
{
public:
	class UDBDScrollBox*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersCustomizationsWidget_GetCharacterCustomizationsScrollBox) == 0x000008, "Wrong alignment on CoreStoreCharactersCustomizationsWidget_GetCharacterCustomizationsScrollBox");
static_assert(sizeof(CoreStoreCharactersCustomizationsWidget_GetCharacterCustomizationsScrollBox) == 0x000008, "Wrong size on CoreStoreCharactersCustomizationsWidget_GetCharacterCustomizationsScrollBox");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_GetCharacterCustomizationsScrollBox, ReturnValue) == 0x000000, "Member 'CoreStoreCharactersCustomizationsWidget_GetCharacterCustomizationsScrollBox::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget.GetRightStickMode
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreCharactersCustomizationsWidget_GetRightStickMode final
{
public:
	ERightStickMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersCustomizationsWidget_GetRightStickMode) == 0x000001, "Wrong alignment on CoreStoreCharactersCustomizationsWidget_GetRightStickMode");
static_assert(sizeof(CoreStoreCharactersCustomizationsWidget_GetRightStickMode) == 0x000001, "Wrong size on CoreStoreCharactersCustomizationsWidget_GetRightStickMode");
static_assert(offsetof(CoreStoreCharactersCustomizationsWidget_GetRightStickMode, ReturnValue) == 0x000000, "Member 'CoreStoreCharactersCustomizationsWidget_GetRightStickMode::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingMenuWidget.OnMenuTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreOnboardingMenuWidget_OnMenuTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingMenuWidget_OnMenuTabSelected) == 0x000008, "Wrong alignment on CoreOnboardingMenuWidget_OnMenuTabSelected");
static_assert(sizeof(CoreOnboardingMenuWidget_OnMenuTabSelected) == 0x000008, "Wrong size on CoreOnboardingMenuWidget_OnMenuTabSelected");
static_assert(offsetof(CoreOnboardingMenuWidget_OnMenuTabSelected, selectedButton) == 0x000000, "Member 'CoreOnboardingMenuWidget_OnMenuTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingMenuWidget.OnMenuTabSelectedAgain
// 0x0008 (0x0008 - 0x0000)
struct CoreOnboardingMenuWidget_OnMenuTabSelectedAgain final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingMenuWidget_OnMenuTabSelectedAgain) == 0x000008, "Wrong alignment on CoreOnboardingMenuWidget_OnMenuTabSelectedAgain");
static_assert(sizeof(CoreOnboardingMenuWidget_OnMenuTabSelectedAgain) == 0x000008, "Wrong size on CoreOnboardingMenuWidget_OnMenuTabSelectedAgain");
static_assert(offsetof(CoreOnboardingMenuWidget_OnMenuTabSelectedAgain, selectedButton) == 0x000000, "Member 'CoreOnboardingMenuWidget_OnMenuTabSelectedAgain::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingMenuWidget.SetBackButton
// 0x0001 (0x0001 - 0x0000)
struct CoreOnboardingMenuWidget_SetBackButton final
{
public:
	bool                                          isFTUE;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingMenuWidget_SetBackButton) == 0x000001, "Wrong alignment on CoreOnboardingMenuWidget_SetBackButton");
static_assert(sizeof(CoreOnboardingMenuWidget_SetBackButton) == 0x000001, "Wrong size on CoreOnboardingMenuWidget_SetBackButton");
static_assert(offsetof(CoreOnboardingMenuWidget_SetBackButton, isFTUE) == 0x000000, "Member 'CoreOnboardingMenuWidget_SetBackButton::isFTUE' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingMenuWidget.SetTitleText
// 0x0001 (0x0001 - 0x0000)
struct CoreOnboardingMenuWidget_SetTitleText final
{
public:
	bool                                          IsInTutorial;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingMenuWidget_SetTitleText) == 0x000001, "Wrong alignment on CoreOnboardingMenuWidget_SetTitleText");
static_assert(sizeof(CoreOnboardingMenuWidget_SetTitleText) == 0x000001, "Wrong size on CoreOnboardingMenuWidget_SetTitleText");
static_assert(offsetof(CoreOnboardingMenuWidget_SetTitleText, IsInTutorial) == 0x000000, "Member 'CoreOnboardingMenuWidget_SetTitleText::IsInTutorial' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxBodySectionWrapperWidget.CreateSectionOfType
// 0x0001 (0x0001 - 0x0000)
struct CoreInboxBodySectionWrapperWidget_CreateSectionOfType final
{
public:
	ENewsAndMessagesSectionType                   Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxBodySectionWrapperWidget_CreateSectionOfType) == 0x000001, "Wrong alignment on CoreInboxBodySectionWrapperWidget_CreateSectionOfType");
static_assert(sizeof(CoreInboxBodySectionWrapperWidget_CreateSectionOfType) == 0x000001, "Wrong size on CoreInboxBodySectionWrapperWidget_CreateSectionOfType");
static_assert(offsetof(CoreInboxBodySectionWrapperWidget_CreateSectionOfType, Type) == 0x000000, "Member 'CoreInboxBodySectionWrapperWidget_CreateSectionOfType::Type' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxBodySectionWrapperWidget.SetData
// 0x0010 (0x0010 - 0x0000)
struct CoreInboxBodySectionWrapperWidget_SetData final
{
public:
	class UInboxBodySectionViewData*              ViewData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreInboxBodySectionWrapperWidget_SetData) == 0x000008, "Wrong alignment on CoreInboxBodySectionWrapperWidget_SetData");
static_assert(sizeof(CoreInboxBodySectionWrapperWidget_SetData) == 0x000010, "Wrong size on CoreInboxBodySectionWrapperWidget_SetData");
static_assert(offsetof(CoreInboxBodySectionWrapperWidget_SetData, ViewData) == 0x000000, "Member 'CoreInboxBodySectionWrapperWidget_SetData::ViewData' has a wrong offset!");
static_assert(offsetof(CoreInboxBodySectionWrapperWidget_SetData, ReturnValue) == 0x000008, "Member 'CoreInboxBodySectionWrapperWidget_SetData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxBodyWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct CoreInboxBodyWidget_SetData final
{
public:
	const class UInboxItemViewData*               ViewData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxBodyWidget_SetData) == 0x000008, "Wrong alignment on CoreInboxBodyWidget_SetData");
static_assert(sizeof(CoreInboxBodyWidget_SetData) == 0x000008, "Wrong size on CoreInboxBodyWidget_SetData");
static_assert(offsetof(CoreInboxBodyWidget_SetData, ViewData) == 0x000000, "Member 'CoreInboxBodyWidget_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuSkillWidget.SetMenuSkillLocked
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuSkillWidget_SetMenuSkillLocked final
{
public:
	bool                                          IsLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuSkillWidget_SetMenuSkillLocked) == 0x000001, "Wrong alignment on CoreMenuSkillWidget_SetMenuSkillLocked");
static_assert(sizeof(CoreMenuSkillWidget_SetMenuSkillLocked) == 0x000001, "Wrong size on CoreMenuSkillWidget_SetMenuSkillLocked");
static_assert(offsetof(CoreMenuSkillWidget_SetMenuSkillLocked, IsLocked) == 0x000000, "Member 'CoreMenuSkillWidget_SetMenuSkillLocked::IsLocked' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuSkillWidget.SetMenuSkillUnlockable
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuSkillWidget_SetMenuSkillUnlockable final
{
public:
	bool                                          IsUnlockable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuSkillWidget_SetMenuSkillUnlockable) == 0x000001, "Wrong alignment on CoreMenuSkillWidget_SetMenuSkillUnlockable");
static_assert(sizeof(CoreMenuSkillWidget_SetMenuSkillUnlockable) == 0x000001, "Wrong size on CoreMenuSkillWidget_SetMenuSkillUnlockable");
static_assert(offsetof(CoreMenuSkillWidget_SetMenuSkillUnlockable, IsUnlockable) == 0x000000, "Member 'CoreMenuSkillWidget_SetMenuSkillUnlockable::IsUnlockable' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxHeaderWidget.SetBackgroundMaterial
// 0x0038 (0x0038 - 0x0000)
struct CoreInboxHeaderWidget_SetBackgroundMaterial final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      backgroundMaterial;                                // 0x0000(0x0038)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxHeaderWidget_SetBackgroundMaterial) == 0x000008, "Wrong alignment on CoreInboxHeaderWidget_SetBackgroundMaterial");
static_assert(sizeof(CoreInboxHeaderWidget_SetBackgroundMaterial) == 0x000038, "Wrong size on CoreInboxHeaderWidget_SetBackgroundMaterial");
static_assert(offsetof(CoreInboxHeaderWidget_SetBackgroundMaterial, backgroundMaterial) == 0x000000, "Member 'CoreInboxHeaderWidget_SetBackgroundMaterial::backgroundMaterial' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxHeaderWidget.SetIconTexture
// 0x0040 (0x0040 - 0x0000)
struct CoreInboxHeaderWidget_SetIconTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              iconTexture;                                       // 0x0000(0x0038)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          matchSize;                                         // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreInboxHeaderWidget_SetIconTexture) == 0x000008, "Wrong alignment on CoreInboxHeaderWidget_SetIconTexture");
static_assert(sizeof(CoreInboxHeaderWidget_SetIconTexture) == 0x000040, "Wrong size on CoreInboxHeaderWidget_SetIconTexture");
static_assert(offsetof(CoreInboxHeaderWidget_SetIconTexture, iconTexture) == 0x000000, "Member 'CoreInboxHeaderWidget_SetIconTexture::iconTexture' has a wrong offset!");
static_assert(offsetof(CoreInboxHeaderWidget_SetIconTexture, matchSize) == 0x000038, "Member 'CoreInboxHeaderWidget_SetIconTexture::matchSize' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxHeaderWidget.SetTexts
// 0x0030 (0x0030 - 0x0000)
struct CoreInboxHeaderWidget_SetTexts final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   SubtitleText;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxHeaderWidget_SetTexts) == 0x000008, "Wrong alignment on CoreInboxHeaderWidget_SetTexts");
static_assert(sizeof(CoreInboxHeaderWidget_SetTexts) == 0x000030, "Wrong size on CoreInboxHeaderWidget_SetTexts");
static_assert(offsetof(CoreInboxHeaderWidget_SetTexts, TitleText) == 0x000000, "Member 'CoreInboxHeaderWidget_SetTexts::TitleText' has a wrong offset!");
static_assert(offsetof(CoreInboxHeaderWidget_SetTexts, SubtitleText) == 0x000018, "Member 'CoreInboxHeaderWidget_SetTexts::SubtitleText' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.OnPlayerClick
// 0x0080 (0x0080 - 0x0000)
struct CoreStoreCharacterPerksToastWidget_OnPlayerClick final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharacterPerksToastWidget_OnPlayerClick) == 0x000008, "Wrong alignment on CoreStoreCharacterPerksToastWidget_OnPlayerClick");
static_assert(sizeof(CoreStoreCharacterPerksToastWidget_OnPlayerClick) == 0x000080, "Wrong size on CoreStoreCharacterPerksToastWidget_OnPlayerClick");
static_assert(offsetof(CoreStoreCharacterPerksToastWidget_OnPlayerClick, PointerEvent) == 0x000000, "Member 'CoreStoreCharacterPerksToastWidget_OnPlayerClick::PointerEvent' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.OnWidgetVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreCharacterPerksToastWidget_OnWidgetVisibilityChanged final
{
public:
	ESlateVisibility                              newVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharacterPerksToastWidget_OnWidgetVisibilityChanged) == 0x000001, "Wrong alignment on CoreStoreCharacterPerksToastWidget_OnWidgetVisibilityChanged");
static_assert(sizeof(CoreStoreCharacterPerksToastWidget_OnWidgetVisibilityChanged) == 0x000001, "Wrong size on CoreStoreCharacterPerksToastWidget_OnWidgetVisibilityChanged");
static_assert(offsetof(CoreStoreCharacterPerksToastWidget_OnWidgetVisibilityChanged, newVisibility) == 0x000000, "Member 'CoreStoreCharacterPerksToastWidget_OnWidgetVisibilityChanged::newVisibility' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharacterPerksToastWidget.SetData
// 0x0020 (0x0020 - 0x0000)
struct CoreStoreCharacterPerksToastWidget_SetData final
{
public:
	TArray<class UMenuPerkViewData*>              CharacterUniquePerksViewData;                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMenuPowerViewData*                     KillerPowerViewData;                               // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharacterPerksToastWidget_SetData) == 0x000008, "Wrong alignment on CoreStoreCharacterPerksToastWidget_SetData");
static_assert(sizeof(CoreStoreCharacterPerksToastWidget_SetData) == 0x000020, "Wrong size on CoreStoreCharacterPerksToastWidget_SetData");
static_assert(offsetof(CoreStoreCharacterPerksToastWidget_SetData, CharacterUniquePerksViewData) == 0x000000, "Member 'CoreStoreCharacterPerksToastWidget_SetData::CharacterUniquePerksViewData' has a wrong offset!");
static_assert(offsetof(CoreStoreCharacterPerksToastWidget_SetData, Role) == 0x000010, "Member 'CoreStoreCharacterPerksToastWidget_SetData::Role' has a wrong offset!");
static_assert(offsetof(CoreStoreCharacterPerksToastWidget_SetData, KillerPowerViewData) == 0x000018, "Member 'CoreStoreCharacterPerksToastWidget_SetData::KillerPowerViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxItemWidget.OnItemClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreInboxItemWidget_OnItemClicked final
{
public:
	class UCoreButtonWidget*                      Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxItemWidget_OnItemClicked) == 0x000008, "Wrong alignment on CoreInboxItemWidget_OnItemClicked");
static_assert(sizeof(CoreInboxItemWidget_OnItemClicked) == 0x000008, "Wrong size on CoreInboxItemWidget_OnItemClicked");
static_assert(offsetof(CoreInboxItemWidget_OnItemClicked, Widget) == 0x000000, "Member 'CoreInboxItemWidget_OnItemClicked::Widget' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxItemWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct CoreInboxItemWidget_SetData final
{
public:
	const class UInboxItemViewData*               ViewData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxItemWidget_SetData) == 0x000008, "Wrong alignment on CoreInboxItemWidget_SetData");
static_assert(sizeof(CoreInboxItemWidget_SetData) == 0x000008, "Wrong size on CoreInboxItemWidget_SetData");
static_assert(offsetof(CoreInboxItemWidget_SetData, ViewData) == 0x000000, "Member 'CoreInboxItemWidget_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxItemWidget.SetNotificationIcon
// 0x0001 (0x0001 - 0x0000)
struct CoreInboxItemWidget_SetNotificationIcon final
{
public:
	bool                                          IsNew;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxItemWidget_SetNotificationIcon) == 0x000001, "Wrong alignment on CoreInboxItemWidget_SetNotificationIcon");
static_assert(sizeof(CoreInboxItemWidget_SetNotificationIcon) == 0x000001, "Wrong size on CoreInboxItemWidget_SetNotificationIcon");
static_assert(offsetof(CoreInboxItemWidget_SetNotificationIcon, IsNew) == 0x000000, "Member 'CoreInboxItemWidget_SetNotificationIcon::IsNew' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxItemWidget.SetSkin
// 0x0038 (0x0038 - 0x0000)
struct CoreInboxItemWidget_SetSkin final
{
public:
	struct FInboxSkinUIData                       skinUIData;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxItemWidget_SetSkin) == 0x000008, "Wrong alignment on CoreInboxItemWidget_SetSkin");
static_assert(sizeof(CoreInboxItemWidget_SetSkin) == 0x000038, "Wrong size on CoreInboxItemWidget_SetSkin");
static_assert(offsetof(CoreInboxItemWidget_SetSkin, skinUIData) == 0x000000, "Member 'CoreInboxItemWidget_SetSkin::skinUIData' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxItemWidget.SetSticky
// 0x0001 (0x0001 - 0x0000)
struct CoreInboxItemWidget_SetSticky final
{
public:
	bool                                          IsSticky;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxItemWidget_SetSticky) == 0x000001, "Wrong alignment on CoreInboxItemWidget_SetSticky");
static_assert(sizeof(CoreInboxItemWidget_SetSticky) == 0x000001, "Wrong size on CoreInboxItemWidget_SetSticky");
static_assert(offsetof(CoreInboxItemWidget_SetSticky, IsSticky) == 0x000000, "Member 'CoreInboxItemWidget_SetSticky::IsSticky' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxKeyArtWidget.OnTextureLoaded
// 0x0010 (0x0010 - 0x0000)
struct CoreInboxKeyArtWidget_OnTextureLoaded final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             LoadedTexture;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxKeyArtWidget_OnTextureLoaded) == 0x000008, "Wrong alignment on CoreInboxKeyArtWidget_OnTextureLoaded");
static_assert(sizeof(CoreInboxKeyArtWidget_OnTextureLoaded) == 0x000010, "Wrong size on CoreInboxKeyArtWidget_OnTextureLoaded");
static_assert(offsetof(CoreInboxKeyArtWidget_OnTextureLoaded, Success) == 0x000000, "Member 'CoreInboxKeyArtWidget_OnTextureLoaded::Success' has a wrong offset!");
static_assert(offsetof(CoreInboxKeyArtWidget_OnTextureLoaded, LoadedTexture) == 0x000008, "Member 'CoreInboxKeyArtWidget_OnTextureLoaded::LoadedTexture' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxKeyArtWidget.OnTextureLoadedDelayed
// 0x0010 (0x0010 - 0x0000)
struct CoreInboxKeyArtWidget_OnTextureLoadedDelayed final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             LoadedTexture;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxKeyArtWidget_OnTextureLoadedDelayed) == 0x000008, "Wrong alignment on CoreInboxKeyArtWidget_OnTextureLoadedDelayed");
static_assert(sizeof(CoreInboxKeyArtWidget_OnTextureLoadedDelayed) == 0x000010, "Wrong size on CoreInboxKeyArtWidget_OnTextureLoadedDelayed");
static_assert(offsetof(CoreInboxKeyArtWidget_OnTextureLoadedDelayed, Success) == 0x000000, "Member 'CoreInboxKeyArtWidget_OnTextureLoadedDelayed::Success' has a wrong offset!");
static_assert(offsetof(CoreInboxKeyArtWidget_OnTextureLoadedDelayed, LoadedTexture) == 0x000008, "Member 'CoreInboxKeyArtWidget_OnTextureLoadedDelayed::LoadedTexture' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxKeyArtWidget.SetData
// 0x0070 (0x0070 - 0x0000)
struct CoreInboxKeyArtWidget_SetData final
{
public:
	struct FSoftRemoteContentCacheObjectPtr       remotePtr;                                         // 0x0000(0x0070)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxKeyArtWidget_SetData) == 0x000008, "Wrong alignment on CoreInboxKeyArtWidget_SetData");
static_assert(sizeof(CoreInboxKeyArtWidget_SetData) == 0x000070, "Wrong size on CoreInboxKeyArtWidget_SetData");
static_assert(offsetof(CoreInboxKeyArtWidget_SetData, remotePtr) == 0x000000, "Member 'CoreInboxKeyArtWidget_SetData::remotePtr' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCollectionsListWidget.OnCollectionItemClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCollectionsListWidget_OnCollectionItemClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCollectionsListWidget_OnCollectionItemClicked) == 0x000008, "Wrong alignment on CoreStoreCollectionsListWidget_OnCollectionItemClicked");
static_assert(sizeof(CoreStoreCollectionsListWidget_OnCollectionItemClicked) == 0x000008, "Wrong size on CoreStoreCollectionsListWidget_OnCollectionItemClicked");
static_assert(offsetof(CoreStoreCollectionsListWidget_OnCollectionItemClicked, Target) == 0x000000, "Member 'CoreStoreCollectionsListWidget_OnCollectionItemClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCollectionsListWidget.UpdateTitleFromScroll
// 0x0004 (0x0004 - 0x0000)
struct CoreStoreCollectionsListWidget_UpdateTitleFromScroll final
{
public:
	float                                         CurrentOffset;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCollectionsListWidget_UpdateTitleFromScroll) == 0x000004, "Wrong alignment on CoreStoreCollectionsListWidget_UpdateTitleFromScroll");
static_assert(sizeof(CoreStoreCollectionsListWidget_UpdateTitleFromScroll) == 0x000004, "Wrong size on CoreStoreCollectionsListWidget_UpdateTitleFromScroll");
static_assert(offsetof(CoreStoreCollectionsListWidget_UpdateTitleFromScroll, CurrentOffset) == 0x000000, "Member 'CoreStoreCollectionsListWidget_UpdateTitleFromScroll::CurrentOffset' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxListWidget.OnItemClicked
// 0x000C (0x000C - 0x0000)
struct CoreInboxListWidget_OnItemClicked final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxListWidget_OnItemClicked) == 0x000004, "Wrong alignment on CoreInboxListWidget_OnItemClicked");
static_assert(sizeof(CoreInboxListWidget_OnItemClicked) == 0x00000C, "Wrong size on CoreInboxListWidget_OnItemClicked");
static_assert(offsetof(CoreInboxListWidget_OnItemClicked, ItemId) == 0x000000, "Member 'CoreInboxListWidget_OnItemClicked::ItemId' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxListWidget.SetData
// 0x0010 (0x0010 - 0x0000)
struct CoreInboxListWidget_SetData final
{
public:
	TArray<class UInboxItemViewData*>             Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxListWidget_SetData) == 0x000008, "Wrong alignment on CoreInboxListWidget_SetData");
static_assert(sizeof(CoreInboxListWidget_SetData) == 0x000010, "Wrong size on CoreInboxListWidget_SetData");
static_assert(offsetof(CoreInboxListWidget_SetData, Data) == 0x000000, "Member 'CoreInboxListWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxListWidget.SetSelectedItem
// 0x0008 (0x0008 - 0x0000)
struct CoreInboxListWidget_SetSelectedItem final
{
public:
	const class UInboxItemViewData*               SelectedItem;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxListWidget_SetSelectedItem) == 0x000008, "Wrong alignment on CoreInboxListWidget_SetSelectedItem");
static_assert(sizeof(CoreInboxListWidget_SetSelectedItem) == 0x000008, "Wrong size on CoreInboxListWidget_SetSelectedItem");
static_assert(offsetof(CoreInboxListWidget_SetSelectedItem, SelectedItem) == 0x000000, "Member 'CoreInboxListWidget_SetSelectedItem::SelectedItem' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxWidget.OnItemClicked
// 0x000C (0x000C - 0x0000)
struct CoreInboxWidget_OnItemClicked final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxWidget_OnItemClicked) == 0x000004, "Wrong alignment on CoreInboxWidget_OnItemClicked");
static_assert(sizeof(CoreInboxWidget_OnItemClicked) == 0x00000C, "Wrong size on CoreInboxWidget_OnItemClicked");
static_assert(offsetof(CoreInboxWidget_OnItemClicked, ItemId) == 0x000000, "Member 'CoreInboxWidget_OnItemClicked::ItemId' has a wrong offset!");

// Function DBDUIViewsCore.CoreInboxWidget.OnTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreInboxWidget_OnTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInboxWidget_OnTabSelected) == 0x000008, "Wrong alignment on CoreInboxWidget_OnTabSelected");
static_assert(sizeof(CoreInboxWidget_OnTabSelected) == 0x000008, "Wrong size on CoreInboxWidget_OnTabSelected");
static_assert(offsetof(CoreInboxWidget_OnTabSelected, selectedButton) == 0x000000, "Member 'CoreInboxWidget_OnTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnCharacterSelected
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreCharactersSelectionWidget_OnCharacterSelected final
{
public:
	class UCoreSelectableButtonWidget*            buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreCharactersSelectionWidget_OnCharacterSelected) == 0x000008, "Wrong alignment on CoreStoreCharactersSelectionWidget_OnCharacterSelected");
static_assert(sizeof(CoreStoreCharactersSelectionWidget_OnCharacterSelected) == 0x000010, "Wrong size on CoreStoreCharactersSelectionWidget_OnCharacterSelected");
static_assert(offsetof(CoreStoreCharactersSelectionWidget_OnCharacterSelected, buttonTarget) == 0x000000, "Member 'CoreStoreCharactersSelectionWidget_OnCharacterSelected::buttonTarget' has a wrong offset!");
static_assert(offsetof(CoreStoreCharactersSelectionWidget_OnCharacterSelected, IsSelected) == 0x000008, "Member 'CoreStoreCharactersSelectionWidget_OnCharacterSelected::IsSelected' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnFiltersButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersSelectionWidget_OnFiltersButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersSelectionWidget_OnFiltersButtonClicked) == 0x000008, "Wrong alignment on CoreStoreCharactersSelectionWidget_OnFiltersButtonClicked");
static_assert(sizeof(CoreStoreCharactersSelectionWidget_OnFiltersButtonClicked) == 0x000008, "Wrong size on CoreStoreCharactersSelectionWidget_OnFiltersButtonClicked");
static_assert(offsetof(CoreStoreCharactersSelectionWidget_OnFiltersButtonClicked, buttonTarget) == 0x000000, "Member 'CoreStoreCharactersSelectionWidget_OnFiltersButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnFiltersChanged
// 0x0060 (0x0060 - 0x0000)
struct CoreStoreCharactersSelectionWidget_OnFiltersChanged final
{
public:
	struct FStoreCharactersFiltersData            storeFiltersData;                                  // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersSelectionWidget_OnFiltersChanged) == 0x000008, "Wrong alignment on CoreStoreCharactersSelectionWidget_OnFiltersChanged");
static_assert(sizeof(CoreStoreCharactersSelectionWidget_OnFiltersChanged) == 0x000060, "Wrong size on CoreStoreCharactersSelectionWidget_OnFiltersChanged");
static_assert(offsetof(CoreStoreCharactersSelectionWidget_OnFiltersChanged, storeFiltersData) == 0x000000, "Member 'CoreStoreCharactersSelectionWidget_OnFiltersChanged::storeFiltersData' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnFiltersWidgetVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreCharactersSelectionWidget_OnFiltersWidgetVisibilityChanged final
{
public:
	ESlateVisibility                              newVisibility;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersSelectionWidget_OnFiltersWidgetVisibilityChanged) == 0x000001, "Wrong alignment on CoreStoreCharactersSelectionWidget_OnFiltersWidgetVisibilityChanged");
static_assert(sizeof(CoreStoreCharactersSelectionWidget_OnFiltersWidgetVisibilityChanged) == 0x000001, "Wrong size on CoreStoreCharactersSelectionWidget_OnFiltersWidgetVisibilityChanged");
static_assert(offsetof(CoreStoreCharactersSelectionWidget_OnFiltersWidgetVisibilityChanged, newVisibility) == 0x000000, "Member 'CoreStoreCharactersSelectionWidget_OnFiltersWidgetVisibilityChanged::newVisibility' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnPerkToastButtonClick
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersSelectionWidget_OnPerkToastButtonClick final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersSelectionWidget_OnPerkToastButtonClick) == 0x000008, "Wrong alignment on CoreStoreCharactersSelectionWidget_OnPerkToastButtonClick");
static_assert(sizeof(CoreStoreCharactersSelectionWidget_OnPerkToastButtonClick) == 0x000008, "Wrong size on CoreStoreCharactersSelectionWidget_OnPerkToastButtonClick");
static_assert(offsetof(CoreStoreCharactersSelectionWidget_OnPerkToastButtonClick, buttonTarget) == 0x000000, "Member 'CoreStoreCharactersSelectionWidget_OnPerkToastButtonClick::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.OnPerkWidgetVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreCharactersSelectionWidget_OnPerkWidgetVisibilityChanged final
{
public:
	ESlateVisibility                              newVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersSelectionWidget_OnPerkWidgetVisibilityChanged) == 0x000001, "Wrong alignment on CoreStoreCharactersSelectionWidget_OnPerkWidgetVisibilityChanged");
static_assert(sizeof(CoreStoreCharactersSelectionWidget_OnPerkWidgetVisibilityChanged) == 0x000001, "Wrong size on CoreStoreCharactersSelectionWidget_OnPerkWidgetVisibilityChanged");
static_assert(offsetof(CoreStoreCharactersSelectionWidget_OnPerkWidgetVisibilityChanged, newVisibility) == 0x000000, "Member 'CoreStoreCharactersSelectionWidget_OnPerkWidgetVisibilityChanged::newVisibility' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.SetRightStickMode
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreCharactersSelectionWidget_SetRightStickMode final
{
public:
	ERightStickMode                               rightStickMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersSelectionWidget_SetRightStickMode) == 0x000001, "Wrong alignment on CoreStoreCharactersSelectionWidget_SetRightStickMode");
static_assert(sizeof(CoreStoreCharactersSelectionWidget_SetRightStickMode) == 0x000001, "Wrong size on CoreStoreCharactersSelectionWidget_SetRightStickMode");
static_assert(offsetof(CoreStoreCharactersSelectionWidget_SetRightStickMode, rightStickMode) == 0x000000, "Member 'CoreStoreCharactersSelectionWidget_SetRightStickMode::rightStickMode' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.GetCharacterSelectionScrollBox
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersSelectionWidget_GetCharacterSelectionScrollBox final
{
public:
	class UDBDScrollBox*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersSelectionWidget_GetCharacterSelectionScrollBox) == 0x000008, "Wrong alignment on CoreStoreCharactersSelectionWidget_GetCharacterSelectionScrollBox");
static_assert(sizeof(CoreStoreCharactersSelectionWidget_GetCharacterSelectionScrollBox) == 0x000008, "Wrong size on CoreStoreCharactersSelectionWidget_GetCharacterSelectionScrollBox");
static_assert(offsetof(CoreStoreCharactersSelectionWidget_GetCharacterSelectionScrollBox, ReturnValue) == 0x000000, "Member 'CoreStoreCharactersSelectionWidget_GetCharacterSelectionScrollBox::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersSelectionWidget.GetRightStickMode
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreCharactersSelectionWidget_GetRightStickMode final
{
public:
	ERightStickMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersSelectionWidget_GetRightStickMode) == 0x000001, "Wrong alignment on CoreStoreCharactersSelectionWidget_GetRightStickMode");
static_assert(sizeof(CoreStoreCharactersSelectionWidget_GetRightStickMode) == 0x000001, "Wrong size on CoreStoreCharactersSelectionWidget_GetRightStickMode");
static_assert(offsetof(CoreStoreCharactersSelectionWidget_GetRightStickMode, ReturnValue) == 0x000000, "Member 'CoreStoreCharactersSelectionWidget_GetRightStickMode::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputPromptWidget.GetInputKey
// 0x0020 (0x0020 - 0x0000)
struct CoreInputPromptWidget_GetInputKey final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputPromptWidget_GetInputKey) == 0x000008, "Wrong alignment on CoreInputPromptWidget_GetInputKey");
static_assert(sizeof(CoreInputPromptWidget_GetInputKey) == 0x000020, "Wrong size on CoreInputPromptWidget_GetInputKey");
static_assert(offsetof(CoreInputPromptWidget_GetInputKey, ReturnValue) == 0x000000, "Member 'CoreInputPromptWidget_GetInputKey::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputPromptWidget.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreInputPromptWidget_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputPromptWidget_IsEnabled) == 0x000001, "Wrong alignment on CoreInputPromptWidget_IsEnabled");
static_assert(sizeof(CoreInputPromptWidget_IsEnabled) == 0x000001, "Wrong size on CoreInputPromptWidget_IsEnabled");
static_assert(offsetof(CoreInputPromptWidget_IsEnabled, ReturnValue) == 0x000000, "Member 'CoreInputPromptWidget_IsEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputPromptWidget.OnEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreInputPromptWidget_OnEnabledChanged final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputPromptWidget_OnEnabledChanged) == 0x000001, "Wrong alignment on CoreInputPromptWidget_OnEnabledChanged");
static_assert(sizeof(CoreInputPromptWidget_OnEnabledChanged) == 0x000001, "Wrong size on CoreInputPromptWidget_OnEnabledChanged");
static_assert(offsetof(CoreInputPromptWidget_OnEnabledChanged, IsEnabled) == 0x000000, "Member 'CoreInputPromptWidget_OnEnabledChanged::IsEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputPromptWidget.SetBetaFeatureOverlayVisible
// 0x0001 (0x0001 - 0x0000)
struct CoreInputPromptWidget_SetBetaFeatureOverlayVisible final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputPromptWidget_SetBetaFeatureOverlayVisible) == 0x000001, "Wrong alignment on CoreInputPromptWidget_SetBetaFeatureOverlayVisible");
static_assert(sizeof(CoreInputPromptWidget_SetBetaFeatureOverlayVisible) == 0x000001, "Wrong size on CoreInputPromptWidget_SetBetaFeatureOverlayVisible");
static_assert(offsetof(CoreInputPromptWidget_SetBetaFeatureOverlayVisible, IsVisible_0) == 0x000000, "Member 'CoreInputPromptWidget_SetBetaFeatureOverlayVisible::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputPromptWidget.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreInputPromptWidget_SetEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputPromptWidget_SetEnabled) == 0x000001, "Wrong alignment on CoreInputPromptWidget_SetEnabled");
static_assert(sizeof(CoreInputPromptWidget_SetEnabled) == 0x000001, "Wrong size on CoreInputPromptWidget_SetEnabled");
static_assert(offsetof(CoreInputPromptWidget_SetEnabled, IsEnabled) == 0x000000, "Member 'CoreInputPromptWidget_SetEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputPromptWidget.SetInputKey
// 0x0020 (0x0020 - 0x0000)
struct CoreInputPromptWidget_SetInputKey final
{
public:
	struct FKey                                   InputKey;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputPromptWidget_SetInputKey) == 0x000008, "Wrong alignment on CoreInputPromptWidget_SetInputKey");
static_assert(sizeof(CoreInputPromptWidget_SetInputKey) == 0x000020, "Wrong size on CoreInputPromptWidget_SetInputKey");
static_assert(offsetof(CoreInputPromptWidget_SetInputKey, InputKey) == 0x000000, "Member 'CoreInputPromptWidget_SetInputKey::InputKey' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputPromptWidget.GetInputShortDisplayName
// 0x0018 (0x0018 - 0x0000)
struct CoreInputPromptWidget_GetInputShortDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputPromptWidget_GetInputShortDisplayName) == 0x000008, "Wrong alignment on CoreInputPromptWidget_GetInputShortDisplayName");
static_assert(sizeof(CoreInputPromptWidget_GetInputShortDisplayName) == 0x000018, "Wrong size on CoreInputPromptWidget_GetInputShortDisplayName");
static_assert(offsetof(CoreInputPromptWidget_GetInputShortDisplayName, ReturnValue) == 0x000000, "Member 'CoreInputPromptWidget_GetInputShortDisplayName::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemWidget.BindHoverBorder
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreItemWidget_BindHoverBorder final
{
public:
	bool                                          IsInteractable_0;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreItemWidget_BindHoverBorder) == 0x000001, "Wrong alignment on CoreStoreItemWidget_BindHoverBorder");
static_assert(sizeof(CoreStoreItemWidget_BindHoverBorder) == 0x000001, "Wrong size on CoreStoreItemWidget_BindHoverBorder");
static_assert(offsetof(CoreStoreItemWidget_BindHoverBorder, IsInteractable_0) == 0x000000, "Member 'CoreStoreItemWidget_BindHoverBorder::IsInteractable_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemWidget.CreatePriceTagWidget
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreItemWidget_CreatePriceTagWidget final
{
public:
	class UCorePriceTagWidget*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreItemWidget_CreatePriceTagWidget) == 0x000008, "Wrong alignment on CoreStoreItemWidget_CreatePriceTagWidget");
static_assert(sizeof(CoreStoreItemWidget_CreatePriceTagWidget) == 0x000008, "Wrong size on CoreStoreItemWidget_CreatePriceTagWidget");
static_assert(offsetof(CoreStoreItemWidget_CreatePriceTagWidget, ReturnValue) == 0x000000, "Member 'CoreStoreItemWidget_CreatePriceTagWidget::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemWidget.CreateTimerFlagWidget
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreItemWidget_CreateTimerFlagWidget final
{
public:
	class UCoreTimerFlagWidget*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreItemWidget_CreateTimerFlagWidget) == 0x000008, "Wrong alignment on CoreStoreItemWidget_CreateTimerFlagWidget");
static_assert(sizeof(CoreStoreItemWidget_CreateTimerFlagWidget) == 0x000008, "Wrong size on CoreStoreItemWidget_CreateTimerFlagWidget");
static_assert(offsetof(CoreStoreItemWidget_CreateTimerFlagWidget, ReturnValue) == 0x000000, "Member 'CoreStoreItemWidget_CreateTimerFlagWidget::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemWidget.OnButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreItemWidget_OnButtonHovered final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreItemWidget_OnButtonHovered) == 0x000008, "Wrong alignment on CoreStoreItemWidget_OnButtonHovered");
static_assert(sizeof(CoreStoreItemWidget_OnButtonHovered) == 0x000008, "Wrong size on CoreStoreItemWidget_OnButtonHovered");
static_assert(offsetof(CoreStoreItemWidget_OnButtonHovered, targetButton) == 0x000000, "Member 'CoreStoreItemWidget_OnButtonHovered::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemWidget.OnButtonSelectedChanged
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreItemWidget_OnButtonSelectedChanged final
{
public:
	class UCoreSelectableButtonWidget*            targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected_0;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreItemWidget_OnButtonSelectedChanged) == 0x000008, "Wrong alignment on CoreStoreItemWidget_OnButtonSelectedChanged");
static_assert(sizeof(CoreStoreItemWidget_OnButtonSelectedChanged) == 0x000010, "Wrong size on CoreStoreItemWidget_OnButtonSelectedChanged");
static_assert(offsetof(CoreStoreItemWidget_OnButtonSelectedChanged, targetButton) == 0x000000, "Member 'CoreStoreItemWidget_OnButtonSelectedChanged::targetButton' has a wrong offset!");
static_assert(offsetof(CoreStoreItemWidget_OnButtonSelectedChanged, IsSelected_0) == 0x000008, "Member 'CoreStoreItemWidget_OnButtonSelectedChanged::IsSelected_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemWidget.OnButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreItemWidget_OnButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreItemWidget_OnButtonUnhovered) == 0x000008, "Wrong alignment on CoreStoreItemWidget_OnButtonUnhovered");
static_assert(sizeof(CoreStoreItemWidget_OnButtonUnhovered) == 0x000008, "Wrong size on CoreStoreItemWidget_OnButtonUnhovered");
static_assert(offsetof(CoreStoreItemWidget_OnButtonUnhovered, targetButton) == 0x000000, "Member 'CoreStoreItemWidget_OnButtonUnhovered::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemWidget.SetNotificationTag
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreItemWidget_SetNotificationTag final
{
public:
	bool                                          IsNew;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreItemWidget_SetNotificationTag) == 0x000001, "Wrong alignment on CoreStoreItemWidget_SetNotificationTag");
static_assert(sizeof(CoreStoreItemWidget_SetNotificationTag) == 0x000001, "Wrong size on CoreStoreItemWidget_SetNotificationTag");
static_assert(offsetof(CoreStoreItemWidget_SetNotificationTag, IsNew) == 0x000000, "Member 'CoreStoreItemWidget_SetNotificationTag::IsNew' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemWidget.SetPriceTagScale
// 0x0004 (0x0004 - 0x0000)
struct CoreStoreItemWidget_SetPriceTagScale final
{
public:
	float                                         priceTagScale;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreItemWidget_SetPriceTagScale) == 0x000004, "Wrong alignment on CoreStoreItemWidget_SetPriceTagScale");
static_assert(sizeof(CoreStoreItemWidget_SetPriceTagScale) == 0x000004, "Wrong size on CoreStoreItemWidget_SetPriceTagScale");
static_assert(offsetof(CoreStoreItemWidget_SetPriceTagScale, priceTagScale) == 0x000000, "Member 'CoreStoreItemWidget_SetPriceTagScale::priceTagScale' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemWidget.SetScale
// 0x0004 (0x0004 - 0x0000)
struct CoreStoreItemWidget_SetScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreItemWidget_SetScale) == 0x000004, "Wrong alignment on CoreStoreItemWidget_SetScale");
static_assert(sizeof(CoreStoreItemWidget_SetScale) == 0x000004, "Wrong size on CoreStoreItemWidget_SetScale");
static_assert(offsetof(CoreStoreItemWidget_SetScale, Scale) == 0x000000, "Member 'CoreStoreItemWidget_SetScale::Scale' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemWidget.SetShowTooltipOnHover
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreItemWidget_SetShowTooltipOnHover final
{
public:
	bool                                          showTooltipOnHover;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreItemWidget_SetShowTooltipOnHover) == 0x000001, "Wrong alignment on CoreStoreItemWidget_SetShowTooltipOnHover");
static_assert(sizeof(CoreStoreItemWidget_SetShowTooltipOnHover) == 0x000001, "Wrong size on CoreStoreItemWidget_SetShowTooltipOnHover");
static_assert(offsetof(CoreStoreItemWidget_SetShowTooltipOnHover, showTooltipOnHover) == 0x000000, "Member 'CoreStoreItemWidget_SetShowTooltipOnHover::showTooltipOnHover' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemWidget.SetStoreItemData
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreItemWidget_SetStoreItemData final
{
public:
	class UStoreItemViewData*                     Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreItemWidget_SetStoreItemData) == 0x000008, "Wrong alignment on CoreStoreItemWidget_SetStoreItemData");
static_assert(sizeof(CoreStoreItemWidget_SetStoreItemData) == 0x000008, "Wrong size on CoreStoreItemWidget_SetStoreItemData");
static_assert(offsetof(CoreStoreItemWidget_SetStoreItemData, Data) == 0x000000, "Member 'CoreStoreItemWidget_SetStoreItemData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemWidget.SetStoreItemLayout
// 0x0004 (0x0004 - 0x0000)
struct CoreStoreItemWidget_SetStoreItemLayout final
{
public:
	int32                                         layoutMask;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreItemWidget_SetStoreItemLayout) == 0x000004, "Wrong alignment on CoreStoreItemWidget_SetStoreItemLayout");
static_assert(sizeof(CoreStoreItemWidget_SetStoreItemLayout) == 0x000004, "Wrong size on CoreStoreItemWidget_SetStoreItemLayout");
static_assert(offsetof(CoreStoreItemWidget_SetStoreItemLayout, layoutMask) == 0x000000, "Member 'CoreStoreItemWidget_SetStoreItemLayout::layoutMask' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemWidget.SetTimerFlagSize
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreItemWidget_SetTimerFlagSize final
{
public:
	EFlagSize                                     FlagSize;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreItemWidget_SetTimerFlagSize) == 0x000001, "Wrong alignment on CoreStoreItemWidget_SetTimerFlagSize");
static_assert(sizeof(CoreStoreItemWidget_SetTimerFlagSize) == 0x000001, "Wrong size on CoreStoreItemWidget_SetTimerFlagSize");
static_assert(offsetof(CoreStoreItemWidget_SetTimerFlagSize, FlagSize) == 0x000000, "Member 'CoreStoreItemWidget_SetTimerFlagSize::FlagSize' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemWidget.IsTagEnabled
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreItemWidget_IsTagEnabled final
{
public:
	int32                                         layoutMask;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreItemWidget_IsTagEnabled) == 0x000004, "Wrong alignment on CoreStoreItemWidget_IsTagEnabled");
static_assert(sizeof(CoreStoreItemWidget_IsTagEnabled) == 0x000008, "Wrong size on CoreStoreItemWidget_IsTagEnabled");
static_assert(offsetof(CoreStoreItemWidget_IsTagEnabled, layoutMask) == 0x000000, "Member 'CoreStoreItemWidget_IsTagEnabled::layoutMask' has a wrong offset!");
static_assert(offsetof(CoreStoreItemWidget_IsTagEnabled, ReturnValue) == 0x000004, "Member 'CoreStoreItemWidget_IsTagEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionProgressWidget.SetProficiencies
// 0x0010 (0x0010 - 0x0000)
struct CoreInteractionProgressWidget_SetProficiencies final
{
public:
	TArray<struct FStatusEffectViewData>          proficiencyDatas;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionProgressWidget_SetProficiencies) == 0x000008, "Wrong alignment on CoreInteractionProgressWidget_SetProficiencies");
static_assert(sizeof(CoreInteractionProgressWidget_SetProficiencies) == 0x000010, "Wrong size on CoreInteractionProgressWidget_SetProficiencies");
static_assert(offsetof(CoreInteractionProgressWidget_SetProficiencies, proficiencyDatas) == 0x000000, "Member 'CoreInteractionProgressWidget_SetProficiencies::proficiencyDatas' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey
// 0x0020 (0x0020 - 0x0000)
struct CoreInteractionPromptActionWidget_SetInputKey final
{
public:
	struct FKey                                   InputKey_0;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptActionWidget_SetInputKey) == 0x000008, "Wrong alignment on CoreInteractionPromptActionWidget_SetInputKey");
static_assert(sizeof(CoreInteractionPromptActionWidget_SetInputKey) == 0x000020, "Wrong size on CoreInteractionPromptActionWidget_SetInputKey");
static_assert(offsetof(CoreInteractionPromptActionWidget_SetInputKey, InputKey_0) == 0x000000, "Member 'CoreInteractionPromptActionWidget_SetInputKey::InputKey_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey2
// 0x0020 (0x0020 - 0x0000)
struct CoreInteractionPromptActionWidget_SetInputKey2 final
{
public:
	struct FKey                                   InputKey2_0;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptActionWidget_SetInputKey2) == 0x000008, "Wrong alignment on CoreInteractionPromptActionWidget_SetInputKey2");
static_assert(sizeof(CoreInteractionPromptActionWidget_SetInputKey2) == 0x000020, "Wrong size on CoreInteractionPromptActionWidget_SetInputKey2");
static_assert(offsetof(CoreInteractionPromptActionWidget_SetInputKey2, InputKey2_0) == 0x000000, "Member 'CoreInteractionPromptActionWidget_SetInputKey2::InputKey2_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey3
// 0x0020 (0x0020 - 0x0000)
struct CoreInteractionPromptActionWidget_SetInputKey3 final
{
public:
	struct FKey                                   InputKey3_0;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptActionWidget_SetInputKey3) == 0x000008, "Wrong alignment on CoreInteractionPromptActionWidget_SetInputKey3");
static_assert(sizeof(CoreInteractionPromptActionWidget_SetInputKey3) == 0x000020, "Wrong size on CoreInteractionPromptActionWidget_SetInputKey3");
static_assert(offsetof(CoreInteractionPromptActionWidget_SetInputKey3, InputKey3_0) == 0x000000, "Member 'CoreInteractionPromptActionWidget_SetInputKey3::InputKey3_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey4
// 0x0020 (0x0020 - 0x0000)
struct CoreInteractionPromptActionWidget_SetInputKey4 final
{
public:
	struct FKey                                   InputKey4_0;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptActionWidget_SetInputKey4) == 0x000008, "Wrong alignment on CoreInteractionPromptActionWidget_SetInputKey4");
static_assert(sizeof(CoreInteractionPromptActionWidget_SetInputKey4) == 0x000020, "Wrong size on CoreInteractionPromptActionWidget_SetInputKey4");
static_assert(offsetof(CoreInteractionPromptActionWidget_SetInputKey4, InputKey4_0) == 0x000000, "Member 'CoreInteractionPromptActionWidget_SetInputKey4::InputKey4_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasFourthPrompt
// 0x0001 (0x0001 - 0x0000)
struct CoreInteractionPromptActionWidget_HasFourthPrompt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptActionWidget_HasFourthPrompt) == 0x000001, "Wrong alignment on CoreInteractionPromptActionWidget_HasFourthPrompt");
static_assert(sizeof(CoreInteractionPromptActionWidget_HasFourthPrompt) == 0x000001, "Wrong size on CoreInteractionPromptActionWidget_HasFourthPrompt");
static_assert(offsetof(CoreInteractionPromptActionWidget_HasFourthPrompt, ReturnValue) == 0x000000, "Member 'CoreInteractionPromptActionWidget_HasFourthPrompt::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasSecondPrompt
// 0x0001 (0x0001 - 0x0000)
struct CoreInteractionPromptActionWidget_HasSecondPrompt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptActionWidget_HasSecondPrompt) == 0x000001, "Wrong alignment on CoreInteractionPromptActionWidget_HasSecondPrompt");
static_assert(sizeof(CoreInteractionPromptActionWidget_HasSecondPrompt) == 0x000001, "Wrong size on CoreInteractionPromptActionWidget_HasSecondPrompt");
static_assert(offsetof(CoreInteractionPromptActionWidget_HasSecondPrompt, ReturnValue) == 0x000000, "Member 'CoreInteractionPromptActionWidget_HasSecondPrompt::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasThirdPrompt
// 0x0001 (0x0001 - 0x0000)
struct CoreInteractionPromptActionWidget_HasThirdPrompt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptActionWidget_HasThirdPrompt) == 0x000001, "Wrong alignment on CoreInteractionPromptActionWidget_HasThirdPrompt");
static_assert(sizeof(CoreInteractionPromptActionWidget_HasThirdPrompt) == 0x000001, "Wrong size on CoreInteractionPromptActionWidget_HasThirdPrompt");
static_assert(offsetof(CoreInteractionPromptActionWidget_HasThirdPrompt, ReturnValue) == 0x000000, "Member 'CoreInteractionPromptActionWidget_HasThirdPrompt::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCollectionsCustomizationsWidget.SetCollectionVisuals
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCollectionsCustomizationsWidget_SetCollectionVisuals final
{
public:
	const class UStoreCollectionViewData*         CollectionViewData;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCollectionsCustomizationsWidget_SetCollectionVisuals) == 0x000008, "Wrong alignment on CoreStoreCollectionsCustomizationsWidget_SetCollectionVisuals");
static_assert(sizeof(CoreStoreCollectionsCustomizationsWidget_SetCollectionVisuals) == 0x000008, "Wrong size on CoreStoreCollectionsCustomizationsWidget_SetCollectionVisuals");
static_assert(offsetof(CoreStoreCollectionsCustomizationsWidget_SetCollectionVisuals, CollectionViewData) == 0x000000, "Member 'CoreStoreCollectionsCustomizationsWidget_SetCollectionVisuals::CollectionViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCollectionsCustomizationsWidget.GetCharactersCustomizations
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCollectionsCustomizationsWidget_GetCharactersCustomizations final
{
public:
	class UCoreStoreCharactersCustomizationsWidget* ReturnValue;                                     // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCollectionsCustomizationsWidget_GetCharactersCustomizations) == 0x000008, "Wrong alignment on CoreStoreCollectionsCustomizationsWidget_GetCharactersCustomizations");
static_assert(sizeof(CoreStoreCollectionsCustomizationsWidget_GetCharactersCustomizations) == 0x000008, "Wrong size on CoreStoreCollectionsCustomizationsWidget_GetCharactersCustomizations");
static_assert(offsetof(CoreStoreCollectionsCustomizationsWidget_GetCharactersCustomizations, ReturnValue) == 0x000000, "Member 'CoreStoreCollectionsCustomizationsWidget_GetCharactersCustomizations::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptWidget.OnLargeTextSettingsChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreInteractionPromptWidget_OnLargeTextSettingsChanged final
{
public:
	bool                                          isLargeTextEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptWidget_OnLargeTextSettingsChanged) == 0x000001, "Wrong alignment on CoreInteractionPromptWidget_OnLargeTextSettingsChanged");
static_assert(sizeof(CoreInteractionPromptWidget_OnLargeTextSettingsChanged) == 0x000001, "Wrong size on CoreInteractionPromptWidget_OnLargeTextSettingsChanged");
static_assert(offsetof(CoreInteractionPromptWidget_OnLargeTextSettingsChanged, isLargeTextEnabled) == 0x000000, "Member 'CoreInteractionPromptWidget_OnLargeTextSettingsChanged::isLargeTextEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptWidget.SetData
// 0x00C8 (0x00C8 - 0x0000)
struct CoreInteractionPromptWidget_SetData final
{
public:
	struct FInteractionPromptViewData             Data;                                              // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptWidget_SetData) == 0x000008, "Wrong alignment on CoreInteractionPromptWidget_SetData");
static_assert(sizeof(CoreInteractionPromptWidget_SetData) == 0x0000C8, "Wrong size on CoreInteractionPromptWidget_SetData");
static_assert(offsetof(CoreInteractionPromptWidget_SetData, Data) == 0x000000, "Member 'CoreInteractionPromptWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.CreatePriceTagWidget
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedCustomizationItemWidget_CreatePriceTagWidget final
{
public:
	class UCorePriceTagWidget*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemWidget_CreatePriceTagWidget) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemWidget_CreatePriceTagWidget");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemWidget_CreatePriceTagWidget) == 0x000008, "Wrong size on CoreStoreFeaturedCustomizationItemWidget_CreatePriceTagWidget");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_CreatePriceTagWidget, ReturnValue) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemWidget_CreatePriceTagWidget::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.OnSelectedItemChanged
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreFeaturedCustomizationItemWidget_OnSelectedItemChanged final
{
public:
	class UCoreSelectableButtonWidget*            buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected_0;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemWidget_OnSelectedItemChanged) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemWidget_OnSelectedItemChanged");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemWidget_OnSelectedItemChanged) == 0x000010, "Wrong size on CoreStoreFeaturedCustomizationItemWidget_OnSelectedItemChanged");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_OnSelectedItemChanged, buttonTarget) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemWidget_OnSelectedItemChanged::buttonTarget' has a wrong offset!");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_OnSelectedItemChanged, IsSelected_0) == 0x000008, "Member 'CoreStoreFeaturedCustomizationItemWidget_OnSelectedItemChanged::IsSelected_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.SetChapterPackData
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedCustomizationItemWidget_SetChapterPackData final
{
public:
	class UStoreChapterPackViewData*              chapterPackViewData;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemWidget_SetChapterPackData) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemWidget_SetChapterPackData");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemWidget_SetChapterPackData) == 0x000008, "Wrong size on CoreStoreFeaturedCustomizationItemWidget_SetChapterPackData");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_SetChapterPackData, chapterPackViewData) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemWidget_SetChapterPackData::chapterPackViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.SetCustomizationData
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedCustomizationItemWidget_SetCustomizationData final
{
public:
	class UStoreCustomizationItemViewData*        customizationItemViewData;                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemWidget_SetCustomizationData) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemWidget_SetCustomizationData");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemWidget_SetCustomizationData) == 0x000008, "Wrong size on CoreStoreFeaturedCustomizationItemWidget_SetCustomizationData");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_SetCustomizationData, customizationItemViewData) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemWidget_SetCustomizationData::customizationItemViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.SetOwnedTagVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreFeaturedCustomizationItemWidget_SetOwnedTagVisibility final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemWidget_SetOwnedTagVisibility) == 0x000001, "Wrong alignment on CoreStoreFeaturedCustomizationItemWidget_SetOwnedTagVisibility");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemWidget_SetOwnedTagVisibility) == 0x000001, "Wrong size on CoreStoreFeaturedCustomizationItemWidget_SetOwnedTagVisibility");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_SetOwnedTagVisibility, IsVisible_0) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemWidget_SetOwnedTagVisibility::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.SetPriceTags
// 0x0018 (0x0018 - 0x0000)
struct CoreStoreFeaturedCustomizationItemWidget_SetPriceTags final
{
public:
	bool                                          IsBuyable;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPriceTagViewData>              priceTags;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemWidget_SetPriceTags) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemWidget_SetPriceTags");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemWidget_SetPriceTags) == 0x000018, "Wrong size on CoreStoreFeaturedCustomizationItemWidget_SetPriceTags");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_SetPriceTags, IsBuyable) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemWidget_SetPriceTags::IsBuyable' has a wrong offset!");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_SetPriceTags, priceTags) == 0x000008, "Member 'CoreStoreFeaturedCustomizationItemWidget_SetPriceTags::priceTags' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.SetTimerFlags
// 0x0068 (0x0068 - 0x0000)
struct CoreStoreFeaturedCustomizationItemWidget_SetTimerFlags final
{
public:
	struct FTimerFlagViewData                     LimitedTimeFlag;                                   // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTimerFlagViewData                     DiscountTimeFlag;                                  // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsOwned;                                           // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemWidget_SetTimerFlags) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemWidget_SetTimerFlags");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemWidget_SetTimerFlags) == 0x000068, "Wrong size on CoreStoreFeaturedCustomizationItemWidget_SetTimerFlags");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_SetTimerFlags, LimitedTimeFlag) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemWidget_SetTimerFlags::LimitedTimeFlag' has a wrong offset!");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_SetTimerFlags, DiscountTimeFlag) == 0x000030, "Member 'CoreStoreFeaturedCustomizationItemWidget_SetTimerFlags::DiscountTimeFlag' has a wrong offset!");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_SetTimerFlags, IsOwned) == 0x000060, "Member 'CoreStoreFeaturedCustomizationItemWidget_SetTimerFlags::IsOwned' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.ShowTimerFlagWidget
// 0x0038 (0x0038 - 0x0000)
struct CoreStoreFeaturedCustomizationItemWidget_ShowTimerFlagWidget final
{
public:
	struct FTimerFlagViewData                     timerFlagData;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UCoreTimerFlagWidget*                   ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemWidget_ShowTimerFlagWidget) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemWidget_ShowTimerFlagWidget");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemWidget_ShowTimerFlagWidget) == 0x000038, "Wrong size on CoreStoreFeaturedCustomizationItemWidget_ShowTimerFlagWidget");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_ShowTimerFlagWidget, timerFlagData) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemWidget_ShowTimerFlagWidget::timerFlagData' has a wrong offset!");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_ShowTimerFlagWidget, ReturnValue) == 0x000030, "Member 'CoreStoreFeaturedCustomizationItemWidget_ShowTimerFlagWidget::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.UpdateOnHoverBorder
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedCustomizationItemWidget_UpdateOnHoverBorder final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemWidget_UpdateOnHoverBorder) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemWidget_UpdateOnHoverBorder");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemWidget_UpdateOnHoverBorder) == 0x000008, "Wrong size on CoreStoreFeaturedCustomizationItemWidget_UpdateOnHoverBorder");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_UpdateOnHoverBorder, tween) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemWidget_UpdateOnHoverBorder::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.UpdatePosition
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedCustomizationItemWidget_UpdatePosition final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemWidget_UpdatePosition) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemWidget_UpdatePosition");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemWidget_UpdatePosition) == 0x000008, "Wrong size on CoreStoreFeaturedCustomizationItemWidget_UpdatePosition");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_UpdatePosition, tween) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemWidget_UpdatePosition::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.UpdateSize
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedCustomizationItemWidget_UpdateSize final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemWidget_UpdateSize) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemWidget_UpdateSize");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemWidget_UpdateSize) == 0x000008, "Wrong size on CoreStoreFeaturedCustomizationItemWidget_UpdateSize");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_UpdateSize, tween) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemWidget_UpdateSize::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget.UpdateSizeCompleted
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedCustomizationItemWidget_UpdateSizeCompleted final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemWidget_UpdateSizeCompleted) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemWidget_UpdateSizeCompleted");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemWidget_UpdateSizeCompleted) == 0x000008, "Wrong size on CoreStoreFeaturedCustomizationItemWidget_UpdateSizeCompleted");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemWidget_UpdateSizeCompleted, tween) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemWidget_UpdateSizeCompleted::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.OnContentClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreContentWidget_OnContentClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreContentWidget_OnContentClicked) == 0x000008, "Wrong alignment on CoreStoreContentWidget_OnContentClicked");
static_assert(sizeof(CoreStoreContentWidget_OnContentClicked) == 0x000008, "Wrong size on CoreStoreContentWidget_OnContentClicked");
static_assert(offsetof(CoreStoreContentWidget_OnContentClicked, buttonTarget) == 0x000000, "Member 'CoreStoreContentWidget_OnContentClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetChapterPackData
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreContentWidget_SetChapterPackData final
{
public:
	class UStoreChapterPackViewData*              Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          appendDataToAnalyticsName;                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreContentWidget_SetChapterPackData) == 0x000008, "Wrong alignment on CoreStoreContentWidget_SetChapterPackData");
static_assert(sizeof(CoreStoreContentWidget_SetChapterPackData) == 0x000010, "Wrong size on CoreStoreContentWidget_SetChapterPackData");
static_assert(offsetof(CoreStoreContentWidget_SetChapterPackData, Data) == 0x000000, "Member 'CoreStoreContentWidget_SetChapterPackData::Data' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetChapterPackData, appendDataToAnalyticsName) == 0x000008, "Member 'CoreStoreContentWidget_SetChapterPackData::appendDataToAnalyticsName' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetCollectionData
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreContentWidget_SetCollectionData final
{
public:
	class UStoreCollectionViewData*               Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          appendDataToAnalyticsName;                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreContentWidget_SetCollectionData) == 0x000008, "Wrong alignment on CoreStoreContentWidget_SetCollectionData");
static_assert(sizeof(CoreStoreContentWidget_SetCollectionData) == 0x000010, "Wrong size on CoreStoreContentWidget_SetCollectionData");
static_assert(offsetof(CoreStoreContentWidget_SetCollectionData, Data) == 0x000000, "Member 'CoreStoreContentWidget_SetCollectionData::Data' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetCollectionData, appendDataToAnalyticsName) == 0x000008, "Member 'CoreStoreContentWidget_SetCollectionData::appendDataToAnalyticsName' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetCrossPromotionData
// 0x00D0 (0x00D0 - 0x0000)
struct CoreStoreContentWidget_SetCrossPromotionData final
{
public:
	struct FCrossPromoCampaignViewData            Data;                                              // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          appendDataToAnalyticsName;                         // 0x00C8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreContentWidget_SetCrossPromotionData) == 0x000008, "Wrong alignment on CoreStoreContentWidget_SetCrossPromotionData");
static_assert(sizeof(CoreStoreContentWidget_SetCrossPromotionData) == 0x0000D0, "Wrong size on CoreStoreContentWidget_SetCrossPromotionData");
static_assert(offsetof(CoreStoreContentWidget_SetCrossPromotionData, Data) == 0x000000, "Member 'CoreStoreContentWidget_SetCrossPromotionData::Data' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetCrossPromotionData, appendDataToAnalyticsName) == 0x0000C8, "Member 'CoreStoreContentWidget_SetCrossPromotionData::appendDataToAnalyticsName' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetHeritagePackData
// 0x00C0 (0x00C0 - 0x0000)
struct CoreStoreContentWidget_SetHeritagePackData final
{
public:
	struct FStoreHeritagePackViewData             Data;                                              // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          appendDataToAnalyticsName;                         // 0x00B8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreContentWidget_SetHeritagePackData) == 0x000008, "Wrong alignment on CoreStoreContentWidget_SetHeritagePackData");
static_assert(sizeof(CoreStoreContentWidget_SetHeritagePackData) == 0x0000C0, "Wrong size on CoreStoreContentWidget_SetHeritagePackData");
static_assert(offsetof(CoreStoreContentWidget_SetHeritagePackData, Data) == 0x000000, "Member 'CoreStoreContentWidget_SetHeritagePackData::Data' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetHeritagePackData, appendDataToAnalyticsName) == 0x0000B8, "Member 'CoreStoreContentWidget_SetHeritagePackData::appendDataToAnalyticsName' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetImageCompositionData
// 0x0040 (0x0040 - 0x0000)
struct CoreStoreContentWidget_SetImageCompositionData final
{
public:
	class FString                                 packId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayTitle;                                      // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         PackImageCompositionNumberOfItems;                 // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStorePackContentData*>          packContentData;                                   // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreContentWidget_SetImageCompositionData) == 0x000008, "Wrong alignment on CoreStoreContentWidget_SetImageCompositionData");
static_assert(sizeof(CoreStoreContentWidget_SetImageCompositionData) == 0x000040, "Wrong size on CoreStoreContentWidget_SetImageCompositionData");
static_assert(offsetof(CoreStoreContentWidget_SetImageCompositionData, packId) == 0x000000, "Member 'CoreStoreContentWidget_SetImageCompositionData::packId' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetImageCompositionData, DisplayTitle) == 0x000010, "Member 'CoreStoreContentWidget_SetImageCompositionData::DisplayTitle' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetImageCompositionData, PackImageCompositionNumberOfItems) == 0x000028, "Member 'CoreStoreContentWidget_SetImageCompositionData::PackImageCompositionNumberOfItems' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetImageCompositionData, packContentData) == 0x000030, "Member 'CoreStoreContentWidget_SetImageCompositionData::packContentData' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetNewIcon
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreContentWidget_SetNewIcon final
{
public:
	bool                                          IsNew;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreContentWidget_SetNewIcon) == 0x000001, "Wrong alignment on CoreStoreContentWidget_SetNewIcon");
static_assert(sizeof(CoreStoreContentWidget_SetNewIcon) == 0x000001, "Wrong size on CoreStoreContentWidget_SetNewIcon");
static_assert(offsetof(CoreStoreContentWidget_SetNewIcon, IsNew) == 0x000000, "Member 'CoreStoreContentWidget_SetNewIcon::IsNew' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetOwnedTagVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreContentWidget_SetOwnedTagVisibility final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreContentWidget_SetOwnedTagVisibility) == 0x000001, "Wrong alignment on CoreStoreContentWidget_SetOwnedTagVisibility");
static_assert(sizeof(CoreStoreContentWidget_SetOwnedTagVisibility) == 0x000001, "Wrong size on CoreStoreContentWidget_SetOwnedTagVisibility");
static_assert(offsetof(CoreStoreContentWidget_SetOwnedTagVisibility, IsVisible_0) == 0x000000, "Member 'CoreStoreContentWidget_SetOwnedTagVisibility::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetPriceTagDataAndVisibility
// 0x0058 (0x0058 - 0x0000)
struct CoreStoreContentWidget_SetPriceTagDataAndVisibility final
{
public:
	struct FPriceTagViewData                      PriceTagData;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsVisible_0;                                       // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreContentWidget_SetPriceTagDataAndVisibility) == 0x000008, "Wrong alignment on CoreStoreContentWidget_SetPriceTagDataAndVisibility");
static_assert(sizeof(CoreStoreContentWidget_SetPriceTagDataAndVisibility) == 0x000058, "Wrong size on CoreStoreContentWidget_SetPriceTagDataAndVisibility");
static_assert(offsetof(CoreStoreContentWidget_SetPriceTagDataAndVisibility, PriceTagData) == 0x000000, "Member 'CoreStoreContentWidget_SetPriceTagDataAndVisibility::PriceTagData' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetPriceTagDataAndVisibility, IsVisible_0) == 0x000050, "Member 'CoreStoreContentWidget_SetPriceTagDataAndVisibility::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetPriceTagVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreContentWidget_SetPriceTagVisibility final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreContentWidget_SetPriceTagVisibility) == 0x000001, "Wrong alignment on CoreStoreContentWidget_SetPriceTagVisibility");
static_assert(sizeof(CoreStoreContentWidget_SetPriceTagVisibility) == 0x000001, "Wrong size on CoreStoreContentWidget_SetPriceTagVisibility");
static_assert(offsetof(CoreStoreContentWidget_SetPriceTagVisibility, IsVisible_0) == 0x000000, "Member 'CoreStoreContentWidget_SetPriceTagVisibility::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetRiftIconsVisibility
// 0x0002 (0x0002 - 0x0000)
struct CoreStoreContentWidget_SetRiftIconsVisibility final
{
public:
	bool                                          showRiftIconsContainer;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          showRiftFragmentIcon;                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreContentWidget_SetRiftIconsVisibility) == 0x000001, "Wrong alignment on CoreStoreContentWidget_SetRiftIconsVisibility");
static_assert(sizeof(CoreStoreContentWidget_SetRiftIconsVisibility) == 0x000002, "Wrong size on CoreStoreContentWidget_SetRiftIconsVisibility");
static_assert(offsetof(CoreStoreContentWidget_SetRiftIconsVisibility, showRiftIconsContainer) == 0x000000, "Member 'CoreStoreContentWidget_SetRiftIconsVisibility::showRiftIconsContainer' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetRiftIconsVisibility, showRiftFragmentIcon) == 0x000001, "Member 'CoreStoreContentWidget_SetRiftIconsVisibility::showRiftFragmentIcon' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetSimplifiedData
// 0x00D0 (0x00D0 - 0x0000)
struct CoreStoreContentWidget_SetSimplifiedData final
{
public:
	class FString                                 packId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayTitle;                                      // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              imagePtr;                                          // 0x0028(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftRemoteContentCacheObjectPtr       imageRemotePtr;                                    // 0x0060(0x0070)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreContentWidget_SetSimplifiedData) == 0x000008, "Wrong alignment on CoreStoreContentWidget_SetSimplifiedData");
static_assert(sizeof(CoreStoreContentWidget_SetSimplifiedData) == 0x0000D0, "Wrong size on CoreStoreContentWidget_SetSimplifiedData");
static_assert(offsetof(CoreStoreContentWidget_SetSimplifiedData, packId) == 0x000000, "Member 'CoreStoreContentWidget_SetSimplifiedData::packId' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetSimplifiedData, DisplayTitle) == 0x000010, "Member 'CoreStoreContentWidget_SetSimplifiedData::DisplayTitle' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetSimplifiedData, imagePtr) == 0x000028, "Member 'CoreStoreContentWidget_SetSimplifiedData::imagePtr' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetSimplifiedData, imageRemotePtr) == 0x000060, "Member 'CoreStoreContentWidget_SetSimplifiedData::imageRemotePtr' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetSpecialPackData
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreContentWidget_SetSpecialPackData final
{
public:
	class UStoreSpecialPackViewData*              Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          appendDataToAnalyticsName;                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreContentWidget_SetSpecialPackData) == 0x000008, "Wrong alignment on CoreStoreContentWidget_SetSpecialPackData");
static_assert(sizeof(CoreStoreContentWidget_SetSpecialPackData) == 0x000010, "Wrong size on CoreStoreContentWidget_SetSpecialPackData");
static_assert(offsetof(CoreStoreContentWidget_SetSpecialPackData, Data) == 0x000000, "Member 'CoreStoreContentWidget_SetSpecialPackData::Data' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetSpecialPackData, appendDataToAnalyticsName) == 0x000008, "Member 'CoreStoreContentWidget_SetSpecialPackData::appendDataToAnalyticsName' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetSpecialPackImageUsingComposition
// 0x0068 (0x0068 - 0x0000)
struct CoreStoreContentWidget_SetSpecialPackImageUsingComposition final
{
public:
	int32                                         numberOfItems;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStorePackContentData*>          Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FName, class UTexture2D*>          icons;                                             // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreContentWidget_SetSpecialPackImageUsingComposition) == 0x000008, "Wrong alignment on CoreStoreContentWidget_SetSpecialPackImageUsingComposition");
static_assert(sizeof(CoreStoreContentWidget_SetSpecialPackImageUsingComposition) == 0x000068, "Wrong size on CoreStoreContentWidget_SetSpecialPackImageUsingComposition");
static_assert(offsetof(CoreStoreContentWidget_SetSpecialPackImageUsingComposition, numberOfItems) == 0x000000, "Member 'CoreStoreContentWidget_SetSpecialPackImageUsingComposition::numberOfItems' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetSpecialPackImageUsingComposition, Data) == 0x000008, "Member 'CoreStoreContentWidget_SetSpecialPackImageUsingComposition::Data' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetSpecialPackImageUsingComposition, icons) == 0x000018, "Member 'CoreStoreContentWidget_SetSpecialPackImageUsingComposition::icons' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetTextBlockVisibility
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreContentWidget_SetTextBlockVisibility final
{
public:
	class UDBDTextBlock*                          TextBlock;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible_0;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreContentWidget_SetTextBlockVisibility) == 0x000008, "Wrong alignment on CoreStoreContentWidget_SetTextBlockVisibility");
static_assert(sizeof(CoreStoreContentWidget_SetTextBlockVisibility) == 0x000010, "Wrong size on CoreStoreContentWidget_SetTextBlockVisibility");
static_assert(offsetof(CoreStoreContentWidget_SetTextBlockVisibility, TextBlock) == 0x000000, "Member 'CoreStoreContentWidget_SetTextBlockVisibility::TextBlock' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetTextBlockVisibility, IsVisible_0) == 0x000008, "Member 'CoreStoreContentWidget_SetTextBlockVisibility::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetTimerFlagDataAndVisibility
// 0x0040 (0x0040 - 0x0000)
struct CoreStoreContentWidget_SetTimerFlagDataAndVisibility final
{
public:
	class UCoreTimerFlagWidget*                   Timer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerFlagViewData                     timerData;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isItemOwned;                                       // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreContentWidget_SetTimerFlagDataAndVisibility) == 0x000008, "Wrong alignment on CoreStoreContentWidget_SetTimerFlagDataAndVisibility");
static_assert(sizeof(CoreStoreContentWidget_SetTimerFlagDataAndVisibility) == 0x000040, "Wrong size on CoreStoreContentWidget_SetTimerFlagDataAndVisibility");
static_assert(offsetof(CoreStoreContentWidget_SetTimerFlagDataAndVisibility, Timer) == 0x000000, "Member 'CoreStoreContentWidget_SetTimerFlagDataAndVisibility::Timer' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetTimerFlagDataAndVisibility, timerData) == 0x000008, "Member 'CoreStoreContentWidget_SetTimerFlagDataAndVisibility::timerData' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetTimerFlagDataAndVisibility, isItemOwned) == 0x000038, "Member 'CoreStoreContentWidget_SetTimerFlagDataAndVisibility::isItemOwned' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.SetTimerFlagVisibility
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreContentWidget_SetTimerFlagVisibility final
{
public:
	class UCoreTimerFlagWidget*                   Timer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible_0;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreContentWidget_SetTimerFlagVisibility) == 0x000008, "Wrong alignment on CoreStoreContentWidget_SetTimerFlagVisibility");
static_assert(sizeof(CoreStoreContentWidget_SetTimerFlagVisibility) == 0x000010, "Wrong size on CoreStoreContentWidget_SetTimerFlagVisibility");
static_assert(offsetof(CoreStoreContentWidget_SetTimerFlagVisibility, Timer) == 0x000000, "Member 'CoreStoreContentWidget_SetTimerFlagVisibility::Timer' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_SetTimerFlagVisibility, IsVisible_0) == 0x000008, "Member 'CoreStoreContentWidget_SetTimerFlagVisibility::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreContentWidget.LoadBannerImage
// 0x00A8 (0x00A8 - 0x0000)
struct CoreStoreContentWidget_LoadBannerImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              localPtr;                                          // 0x0000(0x0038)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftRemoteContentCacheObjectPtr       remotePtr;                                         // 0x0038(0x0070)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreContentWidget_LoadBannerImage) == 0x000008, "Wrong alignment on CoreStoreContentWidget_LoadBannerImage");
static_assert(sizeof(CoreStoreContentWidget_LoadBannerImage) == 0x0000A8, "Wrong size on CoreStoreContentWidget_LoadBannerImage");
static_assert(offsetof(CoreStoreContentWidget_LoadBannerImage, localPtr) == 0x000000, "Member 'CoreStoreContentWidget_LoadBannerImage::localPtr' has a wrong offset!");
static_assert(offsetof(CoreStoreContentWidget_LoadBannerImage, remotePtr) == 0x000038, "Member 'CoreStoreContentWidget_LoadBannerImage::remotePtr' has a wrong offset!");

// Function DBDUIViewsCore.CoreItemSummaryPopupWidget.OnItemHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreItemSummaryPopupWidget_OnItemHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreItemSummaryPopupWidget_OnItemHovered) == 0x000008, "Wrong alignment on CoreItemSummaryPopupWidget_OnItemHovered");
static_assert(sizeof(CoreItemSummaryPopupWidget_OnItemHovered) == 0x000008, "Wrong size on CoreItemSummaryPopupWidget_OnItemHovered");
static_assert(offsetof(CoreItemSummaryPopupWidget_OnItemHovered, buttonTarget) == 0x000000, "Member 'CoreItemSummaryPopupWidget_OnItemHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreItemSummaryPopupWidget.OnItemUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreItemSummaryPopupWidget_OnItemUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreItemSummaryPopupWidget_OnItemUnhovered) == 0x000008, "Wrong alignment on CoreItemSummaryPopupWidget_OnItemUnhovered");
static_assert(sizeof(CoreItemSummaryPopupWidget_OnItemUnhovered) == 0x000008, "Wrong size on CoreItemSummaryPopupWidget_OnItemUnhovered");
static_assert(offsetof(CoreItemSummaryPopupWidget_OnItemUnhovered, buttonTarget) == 0x000000, "Member 'CoreItemSummaryPopupWidget_OnItemUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreItemSummaryPopupWidget.PreviewItems
// 0x0010 (0x0010 - 0x0000)
struct CoreItemSummaryPopupWidget_PreviewItems final
{
public:
	int32                                         perkCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         itemCount;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         addonCount;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OfferingCount;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreItemSummaryPopupWidget_PreviewItems) == 0x000004, "Wrong alignment on CoreItemSummaryPopupWidget_PreviewItems");
static_assert(sizeof(CoreItemSummaryPopupWidget_PreviewItems) == 0x000010, "Wrong size on CoreItemSummaryPopupWidget_PreviewItems");
static_assert(offsetof(CoreItemSummaryPopupWidget_PreviewItems, perkCount) == 0x000000, "Member 'CoreItemSummaryPopupWidget_PreviewItems::perkCount' has a wrong offset!");
static_assert(offsetof(CoreItemSummaryPopupWidget_PreviewItems, itemCount) == 0x000004, "Member 'CoreItemSummaryPopupWidget_PreviewItems::itemCount' has a wrong offset!");
static_assert(offsetof(CoreItemSummaryPopupWidget_PreviewItems, addonCount) == 0x000008, "Member 'CoreItemSummaryPopupWidget_PreviewItems::addonCount' has a wrong offset!");
static_assert(offsetof(CoreItemSummaryPopupWidget_PreviewItems, OfferingCount) == 0x00000C, "Member 'CoreItemSummaryPopupWidget_PreviewItems::OfferingCount' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharmSlotListWidget.OnCharmSlotSelected
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreCharmSlotListWidget_OnCharmSlotSelected final
{
public:
	class UCoreSelectableButtonWidget*            buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreCharmSlotListWidget_OnCharmSlotSelected) == 0x000008, "Wrong alignment on CoreStoreCharmSlotListWidget_OnCharmSlotSelected");
static_assert(sizeof(CoreStoreCharmSlotListWidget_OnCharmSlotSelected) == 0x000010, "Wrong size on CoreStoreCharmSlotListWidget_OnCharmSlotSelected");
static_assert(offsetof(CoreStoreCharmSlotListWidget_OnCharmSlotSelected, buttonTarget) == 0x000000, "Member 'CoreStoreCharmSlotListWidget_OnCharmSlotSelected::buttonTarget' has a wrong offset!");
static_assert(offsetof(CoreStoreCharmSlotListWidget_OnCharmSlotSelected, IsSelected) == 0x000008, "Member 'CoreStoreCharmSlotListWidget_OnCharmSlotSelected::IsSelected' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget.OnIndicatorClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedContentContainerWidget_OnIndicatorClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedContentContainerWidget_OnIndicatorClicked) == 0x000008, "Wrong alignment on CoreStoreFeaturedContentContainerWidget_OnIndicatorClicked");
static_assert(sizeof(CoreStoreFeaturedContentContainerWidget_OnIndicatorClicked) == 0x000008, "Wrong size on CoreStoreFeaturedContentContainerWidget_OnIndicatorClicked");
static_assert(offsetof(CoreStoreFeaturedContentContainerWidget_OnIndicatorClicked, buttonTarget) == 0x000000, "Member 'CoreStoreFeaturedContentContainerWidget_OnIndicatorClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget.OnIndicatorSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedContentContainerWidget_OnIndicatorSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedContentContainerWidget_OnIndicatorSelected) == 0x000008, "Wrong alignment on CoreStoreFeaturedContentContainerWidget_OnIndicatorSelected");
static_assert(sizeof(CoreStoreFeaturedContentContainerWidget_OnIndicatorSelected) == 0x000008, "Wrong size on CoreStoreFeaturedContentContainerWidget_OnIndicatorSelected");
static_assert(offsetof(CoreStoreFeaturedContentContainerWidget_OnIndicatorSelected, selectedButton) == 0x000000, "Member 'CoreStoreFeaturedContentContainerWidget_OnIndicatorSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget.OnNextArrowClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedContentContainerWidget_OnNextArrowClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedContentContainerWidget_OnNextArrowClicked) == 0x000008, "Wrong alignment on CoreStoreFeaturedContentContainerWidget_OnNextArrowClicked");
static_assert(sizeof(CoreStoreFeaturedContentContainerWidget_OnNextArrowClicked) == 0x000008, "Wrong size on CoreStoreFeaturedContentContainerWidget_OnNextArrowClicked");
static_assert(offsetof(CoreStoreFeaturedContentContainerWidget_OnNextArrowClicked, buttonTarget) == 0x000000, "Member 'CoreStoreFeaturedContentContainerWidget_OnNextArrowClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget.OnPreviousArrowClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedContentContainerWidget_OnPreviousArrowClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedContentContainerWidget_OnPreviousArrowClicked) == 0x000008, "Wrong alignment on CoreStoreFeaturedContentContainerWidget_OnPreviousArrowClicked");
static_assert(sizeof(CoreStoreFeaturedContentContainerWidget_OnPreviousArrowClicked) == 0x000008, "Wrong size on CoreStoreFeaturedContentContainerWidget_OnPreviousArrowClicked");
static_assert(offsetof(CoreStoreFeaturedContentContainerWidget_OnPreviousArrowClicked, buttonTarget) == 0x000000, "Member 'CoreStoreFeaturedContentContainerWidget_OnPreviousArrowClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget.OnStoreContentClicked
// 0x01A8 (0x01A8 - 0x0000)
struct CoreStoreFeaturedContentContainerWidget_OnStoreContentClicked final
{
public:
	struct FStoreContentViewData                  StoreContentViewData;                              // 0x0000(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedContentContainerWidget_OnStoreContentClicked) == 0x000008, "Wrong alignment on CoreStoreFeaturedContentContainerWidget_OnStoreContentClicked");
static_assert(sizeof(CoreStoreFeaturedContentContainerWidget_OnStoreContentClicked) == 0x0001A8, "Wrong size on CoreStoreFeaturedContentContainerWidget_OnStoreContentClicked");
static_assert(offsetof(CoreStoreFeaturedContentContainerWidget_OnStoreContentClicked, StoreContentViewData) == 0x000000, "Member 'CoreStoreFeaturedContentContainerWidget_OnStoreContentClicked::StoreContentViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget.OnStoreContentHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedContentContainerWidget_OnStoreContentHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedContentContainerWidget_OnStoreContentHovered) == 0x000008, "Wrong alignment on CoreStoreFeaturedContentContainerWidget_OnStoreContentHovered");
static_assert(sizeof(CoreStoreFeaturedContentContainerWidget_OnStoreContentHovered) == 0x000008, "Wrong size on CoreStoreFeaturedContentContainerWidget_OnStoreContentHovered");
static_assert(offsetof(CoreStoreFeaturedContentContainerWidget_OnStoreContentHovered, buttonTarget) == 0x000000, "Member 'CoreStoreFeaturedContentContainerWidget_OnStoreContentHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget.OnStoreContentUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedContentContainerWidget_OnStoreContentUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedContentContainerWidget_OnStoreContentUnhovered) == 0x000008, "Wrong alignment on CoreStoreFeaturedContentContainerWidget_OnStoreContentUnhovered");
static_assert(sizeof(CoreStoreFeaturedContentContainerWidget_OnStoreContentUnhovered) == 0x000008, "Wrong size on CoreStoreFeaturedContentContainerWidget_OnStoreContentUnhovered");
static_assert(offsetof(CoreStoreFeaturedContentContainerWidget_OnStoreContentUnhovered, buttonTarget) == 0x000000, "Member 'CoreStoreFeaturedContentContainerWidget_OnStoreContentUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreBaseSubTabsWidget.GetSubTabContentForTab
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreBaseSubTabsWidget_GetSubTabContentForTab final
{
public:
	int32                                         subTabId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreBaseSubTabsWidget_GetSubTabContentForTab) == 0x000008, "Wrong alignment on CoreStoreBaseSubTabsWidget_GetSubTabContentForTab");
static_assert(sizeof(CoreStoreBaseSubTabsWidget_GetSubTabContentForTab) == 0x000010, "Wrong size on CoreStoreBaseSubTabsWidget_GetSubTabContentForTab");
static_assert(offsetof(CoreStoreBaseSubTabsWidget_GetSubTabContentForTab, subTabId) == 0x000000, "Member 'CoreStoreBaseSubTabsWidget_GetSubTabContentForTab::subTabId' has a wrong offset!");
static_assert(offsetof(CoreStoreBaseSubTabsWidget_GetSubTabContentForTab, ReturnValue) == 0x000008, "Member 'CoreStoreBaseSubTabsWidget_GetSubTabContentForTab::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreBaseSubTabsWidget.OnSubTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreBaseSubTabsWidget_OnSubTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreBaseSubTabsWidget_OnSubTabSelected) == 0x000008, "Wrong alignment on CoreStoreBaseSubTabsWidget_OnSubTabSelected");
static_assert(sizeof(CoreStoreBaseSubTabsWidget_OnSubTabSelected) == 0x000008, "Wrong size on CoreStoreBaseSubTabsWidget_OnSubTabSelected");
static_assert(offsetof(CoreStoreBaseSubTabsWidget_OnSubTabSelected, selectedButton) == 0x000000, "Member 'CoreStoreBaseSubTabsWidget_OnSubTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreSpecialPacksWidget.SetTabInputsEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreSpecialPacksWidget_SetTabInputsEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreSpecialPacksWidget_SetTabInputsEnabled) == 0x000001, "Wrong alignment on CoreStoreSpecialPacksWidget_SetTabInputsEnabled");
static_assert(sizeof(CoreStoreSpecialPacksWidget_SetTabInputsEnabled) == 0x000001, "Wrong size on CoreStoreSpecialPacksWidget_SetTabInputsEnabled");
static_assert(offsetof(CoreStoreSpecialPacksWidget_SetTabInputsEnabled, IsEnabled) == 0x000000, "Member 'CoreStoreSpecialPacksWidget_SetTabInputsEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadingHintsDisplayWidget.SetLoadingHint
// 0x0078 (0x0078 - 0x0000)
struct CoreLoadingHintsDisplayWidget_SetLoadingHint final
{
public:
	struct FLoadingHintViewData                   loadingHintData;                                   // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLoadingHintsDisplayWidget_SetLoadingHint) == 0x000008, "Wrong alignment on CoreLoadingHintsDisplayWidget_SetLoadingHint");
static_assert(sizeof(CoreLoadingHintsDisplayWidget_SetLoadingHint) == 0x000078, "Wrong size on CoreLoadingHintsDisplayWidget_SetLoadingHint");
static_assert(offsetof(CoreLoadingHintsDisplayWidget_SetLoadingHint, loadingHintData) == 0x000000, "Member 'CoreLoadingHintsDisplayWidget_SetLoadingHint::loadingHintData' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadingHintsDisplayWidget.SetTextAlignment
// 0x0002 (0x0002 - 0x0000)
struct CoreLoadingHintsDisplayWidget_SetTextAlignment final
{
public:
	ETextJustify                                  titleAlignment;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  descriptionAlignment;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLoadingHintsDisplayWidget_SetTextAlignment) == 0x000001, "Wrong alignment on CoreLoadingHintsDisplayWidget_SetTextAlignment");
static_assert(sizeof(CoreLoadingHintsDisplayWidget_SetTextAlignment) == 0x000002, "Wrong size on CoreLoadingHintsDisplayWidget_SetTextAlignment");
static_assert(offsetof(CoreLoadingHintsDisplayWidget_SetTextAlignment, titleAlignment) == 0x000000, "Member 'CoreLoadingHintsDisplayWidget_SetTextAlignment::titleAlignment' has a wrong offset!");
static_assert(offsetof(CoreLoadingHintsDisplayWidget_SetTextAlignment, descriptionAlignment) == 0x000001, "Member 'CoreLoadingHintsDisplayWidget_SetTextAlignment::descriptionAlignment' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadingHintsDisplayWidget.SetTextColors
// 0x0020 (0x0020 - 0x0000)
struct CoreLoadingHintsDisplayWidget_SetTextColors final
{
public:
	struct FLinearColor                           TitleColor;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           descriptionColor;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLoadingHintsDisplayWidget_SetTextColors) == 0x000004, "Wrong alignment on CoreLoadingHintsDisplayWidget_SetTextColors");
static_assert(sizeof(CoreLoadingHintsDisplayWidget_SetTextColors) == 0x000020, "Wrong size on CoreLoadingHintsDisplayWidget_SetTextColors");
static_assert(offsetof(CoreLoadingHintsDisplayWidget_SetTextColors, TitleColor) == 0x000000, "Member 'CoreLoadingHintsDisplayWidget_SetTextColors::TitleColor' has a wrong offset!");
static_assert(offsetof(CoreLoadingHintsDisplayWidget_SetTextColors, descriptionColor) == 0x000010, "Member 'CoreLoadingHintsDisplayWidget_SetTextColors::descriptionColor' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadingHintsDisplayWidget.StartFadeSequence
// 0x0004 (0x0004 - 0x0000)
struct CoreLoadingHintsDisplayWidget_StartFadeSequence final
{
public:
	float                                         FadeOutDelay;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLoadingHintsDisplayWidget_StartFadeSequence) == 0x000004, "Wrong alignment on CoreLoadingHintsDisplayWidget_StartFadeSequence");
static_assert(sizeof(CoreLoadingHintsDisplayWidget_StartFadeSequence) == 0x000004, "Wrong size on CoreLoadingHintsDisplayWidget_StartFadeSequence");
static_assert(offsetof(CoreLoadingHintsDisplayWidget_StartFadeSequence, FadeOutDelay) == 0x000000, "Member 'CoreLoadingHintsDisplayWidget_StartFadeSequence::FadeOutDelay' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadingLogoWidget.UpdateColor
// 0x0010 (0x0010 - 0x0000)
struct CoreLoadingLogoWidget_UpdateColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLoadingLogoWidget_UpdateColor) == 0x000004, "Wrong alignment on CoreLoadingLogoWidget_UpdateColor");
static_assert(sizeof(CoreLoadingLogoWidget_UpdateColor) == 0x000010, "Wrong size on CoreLoadingLogoWidget_UpdateColor");
static_assert(offsetof(CoreLoadingLogoWidget_UpdateColor, Color) == 0x000000, "Member 'CoreLoadingLogoWidget_UpdateColor::Color' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadingScreenWidget.SetProgressBarColors
// 0x0020 (0x0020 - 0x0000)
struct CoreLoadingScreenWidget_SetProgressBarColors final
{
public:
	struct FLinearColor                           PrimaryColor;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           secondaryColor;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLoadingScreenWidget_SetProgressBarColors) == 0x000004, "Wrong alignment on CoreLoadingScreenWidget_SetProgressBarColors");
static_assert(sizeof(CoreLoadingScreenWidget_SetProgressBarColors) == 0x000020, "Wrong size on CoreLoadingScreenWidget_SetProgressBarColors");
static_assert(offsetof(CoreLoadingScreenWidget_SetProgressBarColors, PrimaryColor) == 0x000000, "Member 'CoreLoadingScreenWidget_SetProgressBarColors::PrimaryColor' has a wrong offset!");
static_assert(offsetof(CoreLoadingScreenWidget_SetProgressBarColors, secondaryColor) == 0x000010, "Member 'CoreLoadingScreenWidget_SetProgressBarColors::secondaryColor' has a wrong offset!");

// Function DBDUIViewsCore.CoreLoadingScreenWidget.SetProgressBarValue
// 0x0004 (0x0004 - 0x0000)
struct CoreLoadingScreenWidget_SetProgressBarValue final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLoadingScreenWidget_SetProgressBarValue) == 0x000004, "Wrong alignment on CoreLoadingScreenWidget_SetProgressBarValue");
static_assert(sizeof(CoreLoadingScreenWidget_SetProgressBarValue) == 0x000004, "Wrong size on CoreLoadingScreenWidget_SetProgressBarValue");
static_assert(offsetof(CoreLoadingScreenWidget_SetProgressBarValue, Progress) == 0x000000, "Member 'CoreLoadingScreenWidget_SetProgressBarValue::Progress' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCharacterContainerWidget.OnCharacterTileClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedCharacterContainerWidget_OnCharacterTileClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCharacterContainerWidget_OnCharacterTileClicked) == 0x000008, "Wrong alignment on CoreStoreFeaturedCharacterContainerWidget_OnCharacterTileClicked");
static_assert(sizeof(CoreStoreFeaturedCharacterContainerWidget_OnCharacterTileClicked) == 0x000008, "Wrong size on CoreStoreFeaturedCharacterContainerWidget_OnCharacterTileClicked");
static_assert(offsetof(CoreStoreFeaturedCharacterContainerWidget_OnCharacterTileClicked, Target) == 0x000000, "Member 'CoreStoreFeaturedCharacterContainerWidget_OnCharacterTileClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyCharactersWidget.OnSelectionSubTabHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyCharactersWidget_OnSelectionSubTabHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyCharactersWidget_OnSelectionSubTabHovered) == 0x000008, "Wrong alignment on CoreLobbyCharactersWidget_OnSelectionSubTabHovered");
static_assert(sizeof(CoreLobbyCharactersWidget_OnSelectionSubTabHovered) == 0x000008, "Wrong size on CoreLobbyCharactersWidget_OnSelectionSubTabHovered");
static_assert(offsetof(CoreLobbyCharactersWidget_OnSelectionSubTabHovered, buttonTarget) == 0x000000, "Member 'CoreLobbyCharactersWidget_OnSelectionSubTabHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyCharactersWidget.OnSelectionSubTabUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyCharactersWidget_OnSelectionSubTabUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyCharactersWidget_OnSelectionSubTabUnhovered) == 0x000008, "Wrong alignment on CoreLobbyCharactersWidget_OnSelectionSubTabUnhovered");
static_assert(sizeof(CoreLobbyCharactersWidget_OnSelectionSubTabUnhovered) == 0x000008, "Wrong size on CoreLobbyCharactersWidget_OnSelectionSubTabUnhovered");
static_assert(offsetof(CoreLobbyCharactersWidget_OnSelectionSubTabUnhovered, buttonTarget) == 0x000000, "Member 'CoreLobbyCharactersWidget_OnSelectionSubTabUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyCharactersWidget.OnSubTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyCharactersWidget_OnSubTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyCharactersWidget_OnSubTabSelected) == 0x000008, "Wrong alignment on CoreLobbyCharactersWidget_OnSubTabSelected");
static_assert(sizeof(CoreLobbyCharactersWidget_OnSubTabSelected) == 0x000008, "Wrong size on CoreLobbyCharactersWidget_OnSubTabSelected");
static_assert(offsetof(CoreLobbyCharactersWidget_OnSubTabSelected, selectedButton) == 0x000000, "Member 'CoreLobbyCharactersWidget_OnSubTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyPerkPreviewerWidget.IsLayoutSectionEnabled
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyPerkPreviewerWidget_IsLayoutSectionEnabled final
{
public:
	int32                                         loadoutLayoutMask;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreLobbyPerkPreviewerWidget_IsLayoutSectionEnabled) == 0x000004, "Wrong alignment on CoreLobbyPerkPreviewerWidget_IsLayoutSectionEnabled");
static_assert(sizeof(CoreLobbyPerkPreviewerWidget_IsLayoutSectionEnabled) == 0x000008, "Wrong size on CoreLobbyPerkPreviewerWidget_IsLayoutSectionEnabled");
static_assert(offsetof(CoreLobbyPerkPreviewerWidget_IsLayoutSectionEnabled, loadoutLayoutMask) == 0x000000, "Member 'CoreLobbyPerkPreviewerWidget_IsLayoutSectionEnabled::loadoutLayoutMask' has a wrong offset!");
static_assert(offsetof(CoreLobbyPerkPreviewerWidget_IsLayoutSectionEnabled, ReturnValue) == 0x000004, "Member 'CoreLobbyPerkPreviewerWidget_IsLayoutSectionEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbySidePanelButtonDecoration.OnEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreLobbySidePanelButtonDecoration_OnEnabledChanged final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbySidePanelButtonDecoration_OnEnabledChanged) == 0x000001, "Wrong alignment on CoreLobbySidePanelButtonDecoration_OnEnabledChanged");
static_assert(sizeof(CoreLobbySidePanelButtonDecoration_OnEnabledChanged) == 0x000001, "Wrong size on CoreLobbySidePanelButtonDecoration_OnEnabledChanged");
static_assert(offsetof(CoreLobbySidePanelButtonDecoration_OnEnabledChanged, IsEnabled) == 0x000000, "Member 'CoreLobbySidePanelButtonDecoration_OnEnabledChanged::IsEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyWidget.OnArchivesButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyWidget_OnArchivesButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyWidget_OnArchivesButtonClicked) == 0x000008, "Wrong alignment on CoreLobbyWidget_OnArchivesButtonClicked");
static_assert(sizeof(CoreLobbyWidget_OnArchivesButtonClicked) == 0x000008, "Wrong size on CoreLobbyWidget_OnArchivesButtonClicked");
static_assert(offsetof(CoreLobbyWidget_OnArchivesButtonClicked, Target) == 0x000000, "Member 'CoreLobbyWidget_OnArchivesButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyWidget.OnChallengesButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyWidget_OnChallengesButtonHovered final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyWidget_OnChallengesButtonHovered) == 0x000008, "Wrong alignment on CoreLobbyWidget_OnChallengesButtonHovered");
static_assert(sizeof(CoreLobbyWidget_OnChallengesButtonHovered) == 0x000008, "Wrong size on CoreLobbyWidget_OnChallengesButtonHovered");
static_assert(offsetof(CoreLobbyWidget_OnChallengesButtonHovered, Button) == 0x000000, "Member 'CoreLobbyWidget_OnChallengesButtonHovered::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyWidget.OnChallengesButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyWidget_OnChallengesButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyWidget_OnChallengesButtonUnhovered) == 0x000008, "Wrong alignment on CoreLobbyWidget_OnChallengesButtonUnhovered");
static_assert(sizeof(CoreLobbyWidget_OnChallengesButtonUnhovered) == 0x000008, "Wrong size on CoreLobbyWidget_OnChallengesButtonUnhovered");
static_assert(offsetof(CoreLobbyWidget_OnChallengesButtonUnhovered, Button) == 0x000000, "Member 'CoreLobbyWidget_OnChallengesButtonUnhovered::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyWidget.OnFriendsButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyWidget_OnFriendsButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyWidget_OnFriendsButtonClicked) == 0x000008, "Wrong alignment on CoreLobbyWidget_OnFriendsButtonClicked");
static_assert(sizeof(CoreLobbyWidget_OnFriendsButtonClicked) == 0x000008, "Wrong size on CoreLobbyWidget_OnFriendsButtonClicked");
static_assert(offsetof(CoreLobbyWidget_OnFriendsButtonClicked, Target) == 0x000000, "Member 'CoreLobbyWidget_OnFriendsButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyWidget.OnInboxButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyWidget_OnInboxButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyWidget_OnInboxButtonClicked) == 0x000008, "Wrong alignment on CoreLobbyWidget_OnInboxButtonClicked");
static_assert(sizeof(CoreLobbyWidget_OnInboxButtonClicked) == 0x000008, "Wrong size on CoreLobbyWidget_OnInboxButtonClicked");
static_assert(offsetof(CoreLobbyWidget_OnInboxButtonClicked, Target) == 0x000000, "Member 'CoreLobbyWidget_OnInboxButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyWidget.OnMatchManagementButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyWidget_OnMatchManagementButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyWidget_OnMatchManagementButtonClicked) == 0x000008, "Wrong alignment on CoreLobbyWidget_OnMatchManagementButtonClicked");
static_assert(sizeof(CoreLobbyWidget_OnMatchManagementButtonClicked) == 0x000008, "Wrong size on CoreLobbyWidget_OnMatchManagementButtonClicked");
static_assert(offsetof(CoreLobbyWidget_OnMatchManagementButtonClicked, Target) == 0x000000, "Member 'CoreLobbyWidget_OnMatchManagementButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyWidget.OnSettingsButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreLobbyWidget_OnSettingsButtonClicked final
{
public:
	class UCoreButtonWidget*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyWidget_OnSettingsButtonClicked) == 0x000008, "Wrong alignment on CoreLobbyWidget_OnSettingsButtonClicked");
static_assert(sizeof(CoreLobbyWidget_OnSettingsButtonClicked) == 0x000008, "Wrong size on CoreLobbyWidget_OnSettingsButtonClicked");
static_assert(offsetof(CoreLobbyWidget_OnSettingsButtonClicked, Target) == 0x000000, "Member 'CoreLobbyWidget_OnSettingsButtonClicked::Target' has a wrong offset!");

// Function DBDUIViewsCore.CoreLobbyWidget.SetUiTakeoverVisuals
// 0x0001 (0x0001 - 0x0000)
struct CoreLobbyWidget_SetUiTakeoverVisuals final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLobbyWidget_SetUiTakeoverVisuals) == 0x000001, "Wrong alignment on CoreLobbyWidget_SetUiTakeoverVisuals");
static_assert(sizeof(CoreLobbyWidget_SetUiTakeoverVisuals) == 0x000001, "Wrong size on CoreLobbyWidget_SetUiTakeoverVisuals");
static_assert(offsetof(CoreLobbyWidget_SetUiTakeoverVisuals, IsActive) == 0x000000, "Member 'CoreLobbyWidget_SetUiTakeoverVisuals::IsActive' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.AddTimerFlag
// 0x0030 (0x0030 - 0x0000)
struct CoreMainMenuButtonWidget_AddTimerFlag final
{
public:
	struct FTimerFlagViewData                     TimerFlagViewData;                                 // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuButtonWidget_AddTimerFlag) == 0x000008, "Wrong alignment on CoreMainMenuButtonWidget_AddTimerFlag");
static_assert(sizeof(CoreMainMenuButtonWidget_AddTimerFlag) == 0x000030, "Wrong size on CoreMainMenuButtonWidget_AddTimerFlag");
static_assert(offsetof(CoreMainMenuButtonWidget_AddTimerFlag, TimerFlagViewData) == 0x000000, "Member 'CoreMainMenuButtonWidget_AddTimerFlag::TimerFlagViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.CreateTimerFlag
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuButtonWidget_CreateTimerFlag final
{
public:
	class UCoreTimerFlagWidget*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuButtonWidget_CreateTimerFlag) == 0x000008, "Wrong alignment on CoreMainMenuButtonWidget_CreateTimerFlag");
static_assert(sizeof(CoreMainMenuButtonWidget_CreateTimerFlag) == 0x000008, "Wrong size on CoreMainMenuButtonWidget_CreateTimerFlag");
static_assert(offsetof(CoreMainMenuButtonWidget_CreateTimerFlag, ReturnValue) == 0x000000, "Member 'CoreMainMenuButtonWidget_CreateTimerFlag::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.GetRowDataFromMainMenuButtonsEventDB
// 0x0058 (0x0058 - 0x0000)
struct CoreMainMenuButtonWidget_GetRowDataFromMainMenuButtonsEventDB final
{
public:
	struct FMainMenuButtonsEventData              buttonsEventData;                                  // 0x0000(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 eventFrameLabel;                                   // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreMainMenuButtonWidget_GetRowDataFromMainMenuButtonsEventDB) == 0x000008, "Wrong alignment on CoreMainMenuButtonWidget_GetRowDataFromMainMenuButtonsEventDB");
static_assert(sizeof(CoreMainMenuButtonWidget_GetRowDataFromMainMenuButtonsEventDB) == 0x000058, "Wrong size on CoreMainMenuButtonWidget_GetRowDataFromMainMenuButtonsEventDB");
static_assert(offsetof(CoreMainMenuButtonWidget_GetRowDataFromMainMenuButtonsEventDB, buttonsEventData) == 0x000000, "Member 'CoreMainMenuButtonWidget_GetRowDataFromMainMenuButtonsEventDB::buttonsEventData' has a wrong offset!");
static_assert(offsetof(CoreMainMenuButtonWidget_GetRowDataFromMainMenuButtonsEventDB, eventFrameLabel) == 0x000040, "Member 'CoreMainMenuButtonWidget_GetRowDataFromMainMenuButtonsEventDB::eventFrameLabel' has a wrong offset!");
static_assert(offsetof(CoreMainMenuButtonWidget_GetRowDataFromMainMenuButtonsEventDB, ReturnValue) == 0x000050, "Member 'CoreMainMenuButtonWidget_GetRowDataFromMainMenuButtonsEventDB::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.PlaySubMenuAnimation
// 0x0008 (0x0008 - 0x0000)
struct CoreMainMenuButtonWidget_PlaySubMenuAnimation final
{
public:
	bool                                          isFadingOut;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         animDuration;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuButtonWidget_PlaySubMenuAnimation) == 0x000004, "Wrong alignment on CoreMainMenuButtonWidget_PlaySubMenuAnimation");
static_assert(sizeof(CoreMainMenuButtonWidget_PlaySubMenuAnimation) == 0x000008, "Wrong size on CoreMainMenuButtonWidget_PlaySubMenuAnimation");
static_assert(offsetof(CoreMainMenuButtonWidget_PlaySubMenuAnimation, isFadingOut) == 0x000000, "Member 'CoreMainMenuButtonWidget_PlaySubMenuAnimation::isFadingOut' has a wrong offset!");
static_assert(offsetof(CoreMainMenuButtonWidget_PlaySubMenuAnimation, animDuration) == 0x000004, "Member 'CoreMainMenuButtonWidget_PlaySubMenuAnimation::animDuration' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetBonus
// 0x0004 (0x0004 - 0x0000)
struct CoreMainMenuButtonWidget_SetBonus final
{
public:
	int32                                         bonusPercent;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuButtonWidget_SetBonus) == 0x000004, "Wrong alignment on CoreMainMenuButtonWidget_SetBonus");
static_assert(sizeof(CoreMainMenuButtonWidget_SetBonus) == 0x000004, "Wrong size on CoreMainMenuButtonWidget_SetBonus");
static_assert(offsetof(CoreMainMenuButtonWidget_SetBonus, bonusPercent) == 0x000000, "Member 'CoreMainMenuButtonWidget_SetBonus::bonusPercent' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetBonusText
// 0x0018 (0x0018 - 0x0000)
struct CoreMainMenuButtonWidget_SetBonusText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuButtonWidget_SetBonusText) == 0x000008, "Wrong alignment on CoreMainMenuButtonWidget_SetBonusText");
static_assert(sizeof(CoreMainMenuButtonWidget_SetBonusText) == 0x000018, "Wrong size on CoreMainMenuButtonWidget_SetBonusText");
static_assert(offsetof(CoreMainMenuButtonWidget_SetBonusText, Text) == 0x000000, "Member 'CoreMainMenuButtonWidget_SetBonusText::Text' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetBonusVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreMainMenuButtonWidget_SetBonusVisibility final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuButtonWidget_SetBonusVisibility) == 0x000001, "Wrong alignment on CoreMainMenuButtonWidget_SetBonusVisibility");
static_assert(sizeof(CoreMainMenuButtonWidget_SetBonusVisibility) == 0x000001, "Wrong size on CoreMainMenuButtonWidget_SetBonusVisibility");
static_assert(offsetof(CoreMainMenuButtonWidget_SetBonusVisibility, IsVisible_0) == 0x000000, "Member 'CoreMainMenuButtonWidget_SetBonusVisibility::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetDecoration
// 0x0010 (0x0010 - 0x0000)
struct CoreMainMenuButtonWidget_SetDecoration final
{
public:
	class FString                                 decorationId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuButtonWidget_SetDecoration) == 0x000008, "Wrong alignment on CoreMainMenuButtonWidget_SetDecoration");
static_assert(sizeof(CoreMainMenuButtonWidget_SetDecoration) == 0x000010, "Wrong size on CoreMainMenuButtonWidget_SetDecoration");
static_assert(offsetof(CoreMainMenuButtonWidget_SetDecoration, decorationId) == 0x000000, "Member 'CoreMainMenuButtonWidget_SetDecoration::decorationId' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetDecorationVisible
// 0x0001 (0x0001 - 0x0000)
struct CoreMainMenuButtonWidget_SetDecorationVisible final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuButtonWidget_SetDecorationVisible) == 0x000001, "Wrong alignment on CoreMainMenuButtonWidget_SetDecorationVisible");
static_assert(sizeof(CoreMainMenuButtonWidget_SetDecorationVisible) == 0x000001, "Wrong size on CoreMainMenuButtonWidget_SetDecorationVisible");
static_assert(offsetof(CoreMainMenuButtonWidget_SetDecorationVisible, IsVisible_0) == 0x000000, "Member 'CoreMainMenuButtonWidget_SetDecorationVisible::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetHighlight
// 0x0010 (0x0010 - 0x0000)
struct CoreMainMenuButtonWidget_SetHighlight final
{
public:
	class FString                                 decorationId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuButtonWidget_SetHighlight) == 0x000008, "Wrong alignment on CoreMainMenuButtonWidget_SetHighlight");
static_assert(sizeof(CoreMainMenuButtonWidget_SetHighlight) == 0x000010, "Wrong size on CoreMainMenuButtonWidget_SetHighlight");
static_assert(offsetof(CoreMainMenuButtonWidget_SetHighlight, decorationId) == 0x000000, "Member 'CoreMainMenuButtonWidget_SetHighlight::decorationId' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetIcon
// 0x0010 (0x0010 - 0x0000)
struct CoreMainMenuButtonWidget_SetIcon final
{
public:
	class FString                                 eventID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuButtonWidget_SetIcon) == 0x000008, "Wrong alignment on CoreMainMenuButtonWidget_SetIcon");
static_assert(sizeof(CoreMainMenuButtonWidget_SetIcon) == 0x000010, "Wrong size on CoreMainMenuButtonWidget_SetIcon");
static_assert(offsetof(CoreMainMenuButtonWidget_SetIcon, eventID) == 0x000000, "Member 'CoreMainMenuButtonWidget_SetIcon::eventID' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetSubtitle
// 0x0018 (0x0018 - 0x0000)
struct CoreMainMenuButtonWidget_SetSubtitle final
{
public:
	class FText                                   subtitle;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuButtonWidget_SetSubtitle) == 0x000008, "Wrong alignment on CoreMainMenuButtonWidget_SetSubtitle");
static_assert(sizeof(CoreMainMenuButtonWidget_SetSubtitle) == 0x000018, "Wrong size on CoreMainMenuButtonWidget_SetSubtitle");
static_assert(offsetof(CoreMainMenuButtonWidget_SetSubtitle, subtitle) == 0x000000, "Member 'CoreMainMenuButtonWidget_SetSubtitle::subtitle' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetSubtitleTimerIconVisible
// 0x0001 (0x0001 - 0x0000)
struct CoreMainMenuButtonWidget_SetSubtitleTimerIconVisible final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuButtonWidget_SetSubtitleTimerIconVisible) == 0x000001, "Wrong alignment on CoreMainMenuButtonWidget_SetSubtitleTimerIconVisible");
static_assert(sizeof(CoreMainMenuButtonWidget_SetSubtitleTimerIconVisible) == 0x000001, "Wrong size on CoreMainMenuButtonWidget_SetSubtitleTimerIconVisible");
static_assert(offsetof(CoreMainMenuButtonWidget_SetSubtitleTimerIconVisible, IsVisible_0) == 0x000000, "Member 'CoreMainMenuButtonWidget_SetSubtitleTimerIconVisible::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.SetSubtitleVisible
// 0x0001 (0x0001 - 0x0000)
struct CoreMainMenuButtonWidget_SetSubtitleVisible final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuButtonWidget_SetSubtitleVisible) == 0x000001, "Wrong alignment on CoreMainMenuButtonWidget_SetSubtitleVisible");
static_assert(sizeof(CoreMainMenuButtonWidget_SetSubtitleVisible) == 0x000001, "Wrong size on CoreMainMenuButtonWidget_SetSubtitleVisible");
static_assert(offsetof(CoreMainMenuButtonWidget_SetSubtitleVisible, IsVisible_0) == 0x000000, "Member 'CoreMainMenuButtonWidget_SetSubtitleVisible::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreMainMenuButtonWidget.UpdateSubMenuVisuals
// 0x0002 (0x0002 - 0x0000)
struct CoreMainMenuButtonWidget_UpdateSubMenuVisuals final
{
public:
	bool                                          isGoingInSubMenu;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isPreTransitionCall;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMainMenuButtonWidget_UpdateSubMenuVisuals) == 0x000001, "Wrong alignment on CoreMainMenuButtonWidget_UpdateSubMenuVisuals");
static_assert(sizeof(CoreMainMenuButtonWidget_UpdateSubMenuVisuals) == 0x000002, "Wrong size on CoreMainMenuButtonWidget_UpdateSubMenuVisuals");
static_assert(offsetof(CoreMainMenuButtonWidget_UpdateSubMenuVisuals, isGoingInSubMenu) == 0x000000, "Member 'CoreMainMenuButtonWidget_UpdateSubMenuVisuals::isGoingInSubMenu' has a wrong offset!");
static_assert(offsetof(CoreMainMenuButtonWidget_UpdateSubMenuVisuals, isPreTransitionCall) == 0x000001, "Member 'CoreMainMenuButtonWidget_UpdateSubMenuVisuals::isPreTransitionCall' has a wrong offset!");

// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.SetOptOutToggleValue
// 0x0001 (0x0001 - 0x0000)
struct CoreMarketingInvitationPopupWidget_SetOptOutToggleValue final
{
public:
	bool                                          isOptOutToggleActive;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMarketingInvitationPopupWidget_SetOptOutToggleValue) == 0x000001, "Wrong alignment on CoreMarketingInvitationPopupWidget_SetOptOutToggleValue");
static_assert(sizeof(CoreMarketingInvitationPopupWidget_SetOptOutToggleValue) == 0x000001, "Wrong size on CoreMarketingInvitationPopupWidget_SetOptOutToggleValue");
static_assert(offsetof(CoreMarketingInvitationPopupWidget_SetOptOutToggleValue, isOptOutToggleActive) == 0x000000, "Member 'CoreMarketingInvitationPopupWidget_SetOptOutToggleValue::isOptOutToggleActive' has a wrong offset!");

// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.SetQRCodeImage
// 0x0038 (0x0038 - 0x0000)
struct CoreMarketingInvitationPopupWidget_SetQRCodeImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              QrCodeImage;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMarketingInvitationPopupWidget_SetQRCodeImage) == 0x000008, "Wrong alignment on CoreMarketingInvitationPopupWidget_SetQRCodeImage");
static_assert(sizeof(CoreMarketingInvitationPopupWidget_SetQRCodeImage) == 0x000038, "Wrong size on CoreMarketingInvitationPopupWidget_SetQRCodeImage");
static_assert(offsetof(CoreMarketingInvitationPopupWidget_SetQRCodeImage, QrCodeImage) == 0x000000, "Member 'CoreMarketingInvitationPopupWidget_SetQRCodeImage::QrCodeImage' has a wrong offset!");

// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.ShowOptOutToggle
// 0x0001 (0x0001 - 0x0000)
struct CoreMarketingInvitationPopupWidget_ShowOptOutToggle final
{
public:
	bool                                          shouldShowToggle;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMarketingInvitationPopupWidget_ShowOptOutToggle) == 0x000001, "Wrong alignment on CoreMarketingInvitationPopupWidget_ShowOptOutToggle");
static_assert(sizeof(CoreMarketingInvitationPopupWidget_ShowOptOutToggle) == 0x000001, "Wrong size on CoreMarketingInvitationPopupWidget_ShowOptOutToggle");
static_assert(offsetof(CoreMarketingInvitationPopupWidget_ShowOptOutToggle, shouldShowToggle) == 0x000000, "Member 'CoreMarketingInvitationPopupWidget_ShowOptOutToggle::shouldShowToggle' has a wrong offset!");

// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.ShowRewards
// 0x0001 (0x0001 - 0x0000)
struct CoreMarketingInvitationPopupWidget_ShowRewards final
{
public:
	bool                                          ShowRewards_0;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMarketingInvitationPopupWidget_ShowRewards) == 0x000001, "Wrong alignment on CoreMarketingInvitationPopupWidget_ShowRewards");
static_assert(sizeof(CoreMarketingInvitationPopupWidget_ShowRewards) == 0x000001, "Wrong size on CoreMarketingInvitationPopupWidget_ShowRewards");
static_assert(offsetof(CoreMarketingInvitationPopupWidget_ShowRewards, ShowRewards_0) == 0x000000, "Member 'CoreMarketingInvitationPopupWidget_ShowRewards::ShowRewards_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreMarketingInvitationPopupWidget.OnOptOutToggleButtonClicked
// 0x0001 (0x0001 - 0x0000)
struct CoreMarketingInvitationPopupWidget_OnOptOutToggleButtonClicked final
{
public:
	bool                                          isOptOutToggleActive;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMarketingInvitationPopupWidget_OnOptOutToggleButtonClicked) == 0x000001, "Wrong alignment on CoreMarketingInvitationPopupWidget_OnOptOutToggleButtonClicked");
static_assert(sizeof(CoreMarketingInvitationPopupWidget_OnOptOutToggleButtonClicked) == 0x000001, "Wrong size on CoreMarketingInvitationPopupWidget_OnOptOutToggleButtonClicked");
static_assert(offsetof(CoreMarketingInvitationPopupWidget_OnOptOutToggleButtonClicked, isOptOutToggleActive) == 0x000000, "Member 'CoreMarketingInvitationPopupWidget_OnOptOutToggleButtonClicked::isOptOutToggleActive' has a wrong offset!");

// Function DBDUIViewsCore.CoreMatchmakingWidget.PlayTextAnimation
// 0x0001 (0x0001 - 0x0000)
struct CoreMatchmakingWidget_PlayTextAnimation final
{
public:
	bool                                          Play;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMatchmakingWidget_PlayTextAnimation) == 0x000001, "Wrong alignment on CoreMatchmakingWidget_PlayTextAnimation");
static_assert(sizeof(CoreMatchmakingWidget_PlayTextAnimation) == 0x000001, "Wrong size on CoreMatchmakingWidget_PlayTextAnimation");
static_assert(offsetof(CoreMatchmakingWidget_PlayTextAnimation, Play) == 0x000000, "Member 'CoreMatchmakingWidget_PlayTextAnimation::Play' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuClassWidget.UpdateFullState
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuClassWidget_UpdateFullState final
{
public:
	bool                                          isFull;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuClassWidget_UpdateFullState) == 0x000001, "Wrong alignment on CoreMenuClassWidget_UpdateFullState");
static_assert(sizeof(CoreMenuClassWidget_UpdateFullState) == 0x000001, "Wrong size on CoreMenuClassWidget_UpdateFullState");
static_assert(offsetof(CoreMenuClassWidget_UpdateFullState, isFull) == 0x000000, "Member 'CoreMenuClassWidget_UpdateFullState::isFull' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuOfferingWidget.SetHiddenOffering
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuOfferingWidget_SetHiddenOffering final
{
public:
	bool                                          IsHidden;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuOfferingWidget_SetHiddenOffering) == 0x000001, "Wrong alignment on CoreMenuOfferingWidget_SetHiddenOffering");
static_assert(sizeof(CoreMenuOfferingWidget_SetHiddenOffering) == 0x000001, "Wrong size on CoreMenuOfferingWidget_SetHiddenOffering");
static_assert(offsetof(CoreMenuOfferingWidget_SetHiddenOffering, IsHidden) == 0x000000, "Member 'CoreMenuOfferingWidget_SetHiddenOffering::IsHidden' has a wrong offset!");

// Function DBDUIViewsCore.CoreNewsWidget.OnTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreNewsWidget_OnTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreNewsWidget_OnTabSelected) == 0x000008, "Wrong alignment on CoreNewsWidget_OnTabSelected");
static_assert(sizeof(CoreNewsWidget_OnTabSelected) == 0x000008, "Wrong size on CoreNewsWidget_OnTabSelected");
static_assert(offsetof(CoreNewsWidget_OnTabSelected, selectedButton) == 0x000000, "Member 'CoreNewsWidget_OnTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuDoubleTitle
// 0x0030 (0x0030 - 0x0000)
struct CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle final
{
public:
	class FText                                   menuTitle;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   menuSubTitle;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle) == 0x000008, "Wrong alignment on CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle");
static_assert(sizeof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle) == 0x000030, "Wrong size on CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle");
static_assert(offsetof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle, menuTitle) == 0x000000, "Member 'CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle::menuTitle' has a wrong offset!");
static_assert(offsetof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle, menuSubTitle) == 0x000018, "Member 'CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle::menuSubTitle' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuSubtitle
// 0x0018 (0x0018 - 0x0000)
struct CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle final
{
public:
	class FText                                   menuTitle;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle) == 0x000008, "Wrong alignment on CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle");
static_assert(sizeof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle) == 0x000018, "Wrong size on CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle");
static_assert(offsetof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle, menuTitle) == 0x000000, "Member 'CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle::menuTitle' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuTitle
// 0x0018 (0x0018 - 0x0000)
struct CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle final
{
public:
	class FText                                   menuTitle;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle) == 0x000008, "Wrong alignment on CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle");
static_assert(sizeof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle) == 0x000018, "Wrong size on CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle");
static_assert(offsetof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle, menuTitle) == 0x000000, "Member 'CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle::menuTitle' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreOnboardingTutorialButtonWidget_OnRewardClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialButtonWidget_OnRewardClicked) == 0x000008, "Wrong alignment on CoreOnboardingTutorialButtonWidget_OnRewardClicked");
static_assert(sizeof(CoreOnboardingTutorialButtonWidget_OnRewardClicked) == 0x000008, "Wrong size on CoreOnboardingTutorialButtonWidget_OnRewardClicked");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_OnRewardClicked, buttonTarget) == 0x000000, "Member 'CoreOnboardingTutorialButtonWidget_OnRewardClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardPressed
// 0x0008 (0x0008 - 0x0000)
struct CoreOnboardingTutorialButtonWidget_OnRewardPressed final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialButtonWidget_OnRewardPressed) == 0x000008, "Wrong alignment on CoreOnboardingTutorialButtonWidget_OnRewardPressed");
static_assert(sizeof(CoreOnboardingTutorialButtonWidget_OnRewardPressed) == 0x000008, "Wrong size on CoreOnboardingTutorialButtonWidget_OnRewardPressed");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_OnRewardPressed, buttonTarget) == 0x000000, "Member 'CoreOnboardingTutorialButtonWidget_OnRewardPressed::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardReleased
// 0x0008 (0x0008 - 0x0000)
struct CoreOnboardingTutorialButtonWidget_OnRewardReleased final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialButtonWidget_OnRewardReleased) == 0x000008, "Wrong alignment on CoreOnboardingTutorialButtonWidget_OnRewardReleased");
static_assert(sizeof(CoreOnboardingTutorialButtonWidget_OnRewardReleased) == 0x000008, "Wrong size on CoreOnboardingTutorialButtonWidget_OnRewardReleased");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_OnRewardReleased, buttonTarget) == 0x000000, "Member 'CoreOnboardingTutorialButtonWidget_OnRewardReleased::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetData
// 0x0080 (0x0080 - 0x0000)
struct CoreOnboardingTutorialButtonWidget_SetData final
{
public:
	struct FOnboardingTutorialButtonViewData      ViewData_0;                                        // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isRefreshingWithAnimation;                         // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreOnboardingTutorialButtonWidget_SetData) == 0x000008, "Wrong alignment on CoreOnboardingTutorialButtonWidget_SetData");
static_assert(sizeof(CoreOnboardingTutorialButtonWidget_SetData) == 0x000080, "Wrong size on CoreOnboardingTutorialButtonWidget_SetData");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_SetData, ViewData_0) == 0x000000, "Member 'CoreOnboardingTutorialButtonWidget_SetData::ViewData_0' has a wrong offset!");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_SetData, isRefreshingWithAnimation) == 0x000078, "Member 'CoreOnboardingTutorialButtonWidget_SetData::isRefreshingWithAnimation' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetIsKillSwitch
// 0x0001 (0x0001 - 0x0000)
struct CoreOnboardingTutorialButtonWidget_SetIsKillSwitch final
{
public:
	bool                                          isKillSwitch;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialButtonWidget_SetIsKillSwitch) == 0x000001, "Wrong alignment on CoreOnboardingTutorialButtonWidget_SetIsKillSwitch");
static_assert(sizeof(CoreOnboardingTutorialButtonWidget_SetIsKillSwitch) == 0x000001, "Wrong size on CoreOnboardingTutorialButtonWidget_SetIsKillSwitch");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_SetIsKillSwitch, isKillSwitch) == 0x000000, "Member 'CoreOnboardingTutorialButtonWidget_SetIsKillSwitch::isKillSwitch' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetUIEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreOnboardingTutorialButtonWidget_SetUIEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialButtonWidget_SetUIEnabled) == 0x000001, "Wrong alignment on CoreOnboardingTutorialButtonWidget_SetUIEnabled");
static_assert(sizeof(CoreOnboardingTutorialButtonWidget_SetUIEnabled) == 0x000001, "Wrong size on CoreOnboardingTutorialButtonWidget_SetUIEnabled");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_SetUIEnabled, Enabled) == 0x000000, "Member 'CoreOnboardingTutorialButtonWidget_SetUIEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.IsInUnavailableStep
// 0x0001 (0x0001 - 0x0000)
struct CoreOnboardingTutorialButtonWidget_IsInUnavailableStep final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialButtonWidget_IsInUnavailableStep) == 0x000001, "Wrong alignment on CoreOnboardingTutorialButtonWidget_IsInUnavailableStep");
static_assert(sizeof(CoreOnboardingTutorialButtonWidget_IsInUnavailableStep) == 0x000001, "Wrong size on CoreOnboardingTutorialButtonWidget_IsInUnavailableStep");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_IsInUnavailableStep, ReturnValue) == 0x000000, "Member 'CoreOnboardingTutorialButtonWidget_IsInUnavailableStep::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnHoverBorderWidget.BindToButton
// 0x0008 (0x0008 - 0x0000)
struct CoreOnHoverBorderWidget_BindToButton final
{
public:
	class UCoreButtonWidget*                      buttonToBindOn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnHoverBorderWidget_BindToButton) == 0x000008, "Wrong alignment on CoreOnHoverBorderWidget_BindToButton");
static_assert(sizeof(CoreOnHoverBorderWidget_BindToButton) == 0x000008, "Wrong size on CoreOnHoverBorderWidget_BindToButton");
static_assert(offsetof(CoreOnHoverBorderWidget_BindToButton, buttonToBindOn) == 0x000000, "Member 'CoreOnHoverBorderWidget_BindToButton::buttonToBindOn' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnHoverBorderWidget.PlayHoveredAnimation
// 0x0001 (0x0001 - 0x0000)
struct CoreOnHoverBorderWidget_PlayHoveredAnimation final
{
public:
	bool                                          playForward;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnHoverBorderWidget_PlayHoveredAnimation) == 0x000001, "Wrong alignment on CoreOnHoverBorderWidget_PlayHoveredAnimation");
static_assert(sizeof(CoreOnHoverBorderWidget_PlayHoveredAnimation) == 0x000001, "Wrong size on CoreOnHoverBorderWidget_PlayHoveredAnimation");
static_assert(offsetof(CoreOnHoverBorderWidget_PlayHoveredAnimation, playForward) == 0x000000, "Member 'CoreOnHoverBorderWidget_PlayHoveredAnimation::playForward' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnHoverBorderWidget.PlayPressedAnimation
// 0x0001 (0x0001 - 0x0000)
struct CoreOnHoverBorderWidget_PlayPressedAnimation final
{
public:
	bool                                          playForward;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnHoverBorderWidget_PlayPressedAnimation) == 0x000001, "Wrong alignment on CoreOnHoverBorderWidget_PlayPressedAnimation");
static_assert(sizeof(CoreOnHoverBorderWidget_PlayPressedAnimation) == 0x000001, "Wrong size on CoreOnHoverBorderWidget_PlayPressedAnimation");
static_assert(offsetof(CoreOnHoverBorderWidget_PlayPressedAnimation, playForward) == 0x000000, "Member 'CoreOnHoverBorderWidget_PlayPressedAnimation::playForward' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnHoverBorderWidget.UpdateBorderSize
// 0x0018 (0x0018 - 0x0000)
struct CoreOnHoverBorderWidget_UpdateBorderSize final
{
public:
	int32                                         Thickness;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              desiredSize;                                       // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnHoverBorderWidget_UpdateBorderSize) == 0x000008, "Wrong alignment on CoreOnHoverBorderWidget_UpdateBorderSize");
static_assert(sizeof(CoreOnHoverBorderWidget_UpdateBorderSize) == 0x000018, "Wrong size on CoreOnHoverBorderWidget_UpdateBorderSize");
static_assert(offsetof(CoreOnHoverBorderWidget_UpdateBorderSize, Thickness) == 0x000000, "Member 'CoreOnHoverBorderWidget_UpdateBorderSize::Thickness' has a wrong offset!");
static_assert(offsetof(CoreOnHoverBorderWidget_UpdateBorderSize, desiredSize) == 0x000008, "Member 'CoreOnHoverBorderWidget_UpdateBorderSize::desiredSize' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnHoverBorderWidget.UpdateColors
// 0x0020 (0x0020 - 0x0000)
struct CoreOnHoverBorderWidget_UpdateColors final
{
public:
	struct FLinearColor                           progressBarColor;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnHoverBorderWidget_UpdateColors) == 0x000004, "Wrong alignment on CoreOnHoverBorderWidget_UpdateColors");
static_assert(sizeof(CoreOnHoverBorderWidget_UpdateColors) == 0x000020, "Wrong size on CoreOnHoverBorderWidget_UpdateColors");
static_assert(offsetof(CoreOnHoverBorderWidget_UpdateColors, progressBarColor) == 0x000000, "Member 'CoreOnHoverBorderWidget_UpdateColors::progressBarColor' has a wrong offset!");
static_assert(offsetof(CoreOnHoverBorderWidget_UpdateColors, BackgroundColor) == 0x000010, "Member 'CoreOnHoverBorderWidget_UpdateColors::BackgroundColor' has a wrong offset!");

// Function DBDUIViewsCore.CorePaginationContainerWidget.CreatePaginationWidget
// 0x0010 (0x0010 - 0x0000)
struct CorePaginationContainerWidget_CreatePaginationWidget final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreSelectableButtonWidget*            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePaginationContainerWidget_CreatePaginationWidget) == 0x000008, "Wrong alignment on CorePaginationContainerWidget_CreatePaginationWidget");
static_assert(sizeof(CorePaginationContainerWidget_CreatePaginationWidget) == 0x000010, "Wrong size on CorePaginationContainerWidget_CreatePaginationWidget");
static_assert(offsetof(CorePaginationContainerWidget_CreatePaginationWidget, Index_0) == 0x000000, "Member 'CorePaginationContainerWidget_CreatePaginationWidget::Index_0' has a wrong offset!");
static_assert(offsetof(CorePaginationContainerWidget_CreatePaginationWidget, ReturnValue) == 0x000008, "Member 'CorePaginationContainerWidget_CreatePaginationWidget::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePaginationContainerWidget.OnPaginationSelected
// 0x0008 (0x0008 - 0x0000)
struct CorePaginationContainerWidget_OnPaginationSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePaginationContainerWidget_OnPaginationSelected) == 0x000008, "Wrong alignment on CorePaginationContainerWidget_OnPaginationSelected");
static_assert(sizeof(CorePaginationContainerWidget_OnPaginationSelected) == 0x000008, "Wrong size on CorePaginationContainerWidget_OnPaginationSelected");
static_assert(offsetof(CorePaginationContainerWidget_OnPaginationSelected, selectedButton) == 0x000000, "Member 'CorePaginationContainerWidget_OnPaginationSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CorePaginationContainerWidget.UpdateSelectedWidget
// 0x0008 (0x0008 - 0x0000)
struct CorePaginationContainerWidget_UpdateSelectedWidget final
{
public:
	int32                                         currentIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         numberOfPages;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePaginationContainerWidget_UpdateSelectedWidget) == 0x000004, "Wrong alignment on CorePaginationContainerWidget_UpdateSelectedWidget");
static_assert(sizeof(CorePaginationContainerWidget_UpdateSelectedWidget) == 0x000008, "Wrong size on CorePaginationContainerWidget_UpdateSelectedWidget");
static_assert(offsetof(CorePaginationContainerWidget_UpdateSelectedWidget, currentIndex) == 0x000000, "Member 'CorePaginationContainerWidget_UpdateSelectedWidget::currentIndex' has a wrong offset!");
static_assert(offsetof(CorePaginationContainerWidget_UpdateSelectedWidget, numberOfPages) == 0x000004, "Member 'CorePaginationContainerWidget_UpdateSelectedWidget::numberOfPages' has a wrong offset!");

// Function DBDUIViewsCore.CorePaginationContainerWidget.GetCurrentPage
// 0x0004 (0x0004 - 0x0000)
struct CorePaginationContainerWidget_GetCurrentPage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePaginationContainerWidget_GetCurrentPage) == 0x000004, "Wrong alignment on CorePaginationContainerWidget_GetCurrentPage");
static_assert(sizeof(CorePaginationContainerWidget_GetCurrentPage) == 0x000004, "Wrong size on CorePaginationContainerWidget_GetCurrentPage");
static_assert(offsetof(CorePaginationContainerWidget_GetCurrentPage, ReturnValue) == 0x000000, "Member 'CorePaginationContainerWidget_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePaginationContainerWidget.GetNumberOfPages
// 0x0004 (0x0004 - 0x0000)
struct CorePaginationContainerWidget_GetNumberOfPages final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePaginationContainerWidget_GetNumberOfPages) == 0x000004, "Wrong alignment on CorePaginationContainerWidget_GetNumberOfPages");
static_assert(sizeof(CorePaginationContainerWidget_GetNumberOfPages) == 0x000004, "Wrong size on CorePaginationContainerWidget_GetNumberOfPages");
static_assert(offsetof(CorePaginationContainerWidget_GetNumberOfPages, ReturnValue) == 0x000000, "Member 'CorePaginationContainerWidget_GetNumberOfPages::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerLevelTooltipWidget.SetTooltipData
// 0x0010 (0x0010 - 0x0000)
struct CorePlayerLevelTooltipWidget_SetTooltipData final
{
public:
	struct FCorePlayerLevelTooltipViewData        ViewData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerLevelTooltipWidget_SetTooltipData) == 0x000004, "Wrong alignment on CorePlayerLevelTooltipWidget_SetTooltipData");
static_assert(sizeof(CorePlayerLevelTooltipWidget_SetTooltipData) == 0x000010, "Wrong size on CorePlayerLevelTooltipWidget_SetTooltipData");
static_assert(offsetof(CorePlayerLevelTooltipWidget_SetTooltipData, ViewData) == 0x000000, "Member 'CorePlayerLevelTooltipWidget_SetTooltipData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerNameWidget.SetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct CorePlayerNameWidget_SetPlayerName final
{
public:
	class FText                                   PlayerName;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerNameWidget_SetPlayerName) == 0x000008, "Wrong alignment on CorePlayerNameWidget_SetPlayerName");
static_assert(sizeof(CorePlayerNameWidget_SetPlayerName) == 0x000018, "Wrong size on CorePlayerNameWidget_SetPlayerName");
static_assert(offsetof(CorePlayerNameWidget_SetPlayerName, PlayerName) == 0x000000, "Member 'CorePlayerNameWidget_SetPlayerName::PlayerName' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerRankWidget.SetData
// 0x0028 (0x0028 - 0x0000)
struct CorePlayerRankWidget_SetData final
{
public:
	struct FRankViewData                          Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerRankWidget_SetData) == 0x000008, "Wrong alignment on CorePlayerRankWidget_SetData");
static_assert(sizeof(CorePlayerRankWidget_SetData) == 0x000028, "Wrong size on CorePlayerRankWidget_SetData");
static_assert(offsetof(CorePlayerRankWidget_SetData, Data) == 0x000000, "Member 'CorePlayerRankWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerRankWidget.SetRankImageAndText
// 0x0008 (0x0008 - 0x0000)
struct CorePlayerRankWidget_SetRankImageAndText final
{
public:
	int32                                         rankIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKiller;                                          // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerRankWidget_SetRankImageAndText) == 0x000004, "Wrong alignment on CorePlayerRankWidget_SetRankImageAndText");
static_assert(sizeof(CorePlayerRankWidget_SetRankImageAndText) == 0x000008, "Wrong size on CorePlayerRankWidget_SetRankImageAndText");
static_assert(offsetof(CorePlayerRankWidget_SetRankImageAndText, rankIndex) == 0x000000, "Member 'CorePlayerRankWidget_SetRankImageAndText::rankIndex' has a wrong offset!");
static_assert(offsetof(CorePlayerRankWidget_SetRankImageAndText, IsKiller) == 0x000004, "Member 'CorePlayerRankWidget_SetRankImageAndText::IsKiller' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerRankWidget.GetConfiguration
// 0x00F0 (0x00F0 - 0x0000)
struct CorePlayerRankWidget_GetConfiguration final
{
public:
	struct FCoreRankWidgetConfiguration           ReturnValue;                                       // 0x0000(0x00F0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerRankWidget_GetConfiguration) == 0x000008, "Wrong alignment on CorePlayerRankWidget_GetConfiguration");
static_assert(sizeof(CorePlayerRankWidget_GetConfiguration) == 0x0000F0, "Wrong size on CorePlayerRankWidget_GetConfiguration");
static_assert(offsetof(CorePlayerRankWidget_GetConfiguration, ReturnValue) == 0x000000, "Member 'CorePlayerRankWidget_GetConfiguration::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerSocialOptionsMenuWidget.OnPlayerSocialOptionButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CorePlayerSocialOptionsMenuWidget_OnPlayerSocialOptionButtonClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerSocialOptionsMenuWidget_OnPlayerSocialOptionButtonClicked) == 0x000008, "Wrong alignment on CorePlayerSocialOptionsMenuWidget_OnPlayerSocialOptionButtonClicked");
static_assert(sizeof(CorePlayerSocialOptionsMenuWidget_OnPlayerSocialOptionButtonClicked) == 0x000008, "Wrong size on CorePlayerSocialOptionsMenuWidget_OnPlayerSocialOptionButtonClicked");
static_assert(offsetof(CorePlayerSocialOptionsMenuWidget_OnPlayerSocialOptionButtonClicked, Button) == 0x000000, "Member 'CorePlayerSocialOptionsMenuWidget_OnPlayerSocialOptionButtonClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerSocialOptionsMenuWidget.SetData
// 0x0010 (0x0010 - 0x0000)
struct CorePlayerSocialOptionsMenuWidget_SetData final
{
public:
	TArray<struct FPlayerSocialOptionViewData>    Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerSocialOptionsMenuWidget_SetData) == 0x000008, "Wrong alignment on CorePlayerSocialOptionsMenuWidget_SetData");
static_assert(sizeof(CorePlayerSocialOptionsMenuWidget_SetData) == 0x000010, "Wrong size on CorePlayerSocialOptionsMenuWidget_SetData");
static_assert(offsetof(CorePlayerSocialOptionsMenuWidget_SetData, Data) == 0x000000, "Member 'CorePlayerSocialOptionsMenuWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.CacheViewData
// 0x0160 (0x0160 - 0x0000)
struct CorePlayerStatusWidget_CacheViewData final
{
public:
	struct FPlayerStatusViewData                  Data;                                              // 0x0000(0x00B0)(Parm, NativeAccessSpecifierPublic)
	struct FPlayerStatusViewData                  ReturnValue;                                       // 0x00B0(0x00B0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusWidget_CacheViewData) == 0x000008, "Wrong alignment on CorePlayerStatusWidget_CacheViewData");
static_assert(sizeof(CorePlayerStatusWidget_CacheViewData) == 0x000160, "Wrong size on CorePlayerStatusWidget_CacheViewData");
static_assert(offsetof(CorePlayerStatusWidget_CacheViewData, Data) == 0x000000, "Member 'CorePlayerStatusWidget_CacheViewData::Data' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_CacheViewData, ReturnValue) == 0x0000B0, "Member 'CorePlayerStatusWidget_CacheViewData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.GetKillersStatusEffectWidget
// 0x0010 (0x0010 - 0x0000)
struct CorePlayerStatusWidget_GetKillersStatusEffectWidget final
{
public:
	TArray<class UCorePlayerStatusKillerEffectWidget*> ReturnValue;                                  // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusWidget_GetKillersStatusEffectWidget) == 0x000008, "Wrong alignment on CorePlayerStatusWidget_GetKillersStatusEffectWidget");
static_assert(sizeof(CorePlayerStatusWidget_GetKillersStatusEffectWidget) == 0x000010, "Wrong size on CorePlayerStatusWidget_GetKillersStatusEffectWidget");
static_assert(offsetof(CorePlayerStatusWidget_GetKillersStatusEffectWidget, ReturnValue) == 0x000000, "Member 'CorePlayerStatusWidget_GetKillersStatusEffectWidget::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.GetKillerStatusDataMappingDB
// 0x0008 (0x0008 - 0x0000)
struct CorePlayerStatusWidget_GetKillerStatusDataMappingDB final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusWidget_GetKillerStatusDataMappingDB) == 0x000008, "Wrong alignment on CorePlayerStatusWidget_GetKillerStatusDataMappingDB");
static_assert(sizeof(CorePlayerStatusWidget_GetKillerStatusDataMappingDB) == 0x000008, "Wrong size on CorePlayerStatusWidget_GetKillerStatusDataMappingDB");
static_assert(offsetof(CorePlayerStatusWidget_GetKillerStatusDataMappingDB, ReturnValue) == 0x000000, "Member 'CorePlayerStatusWidget_GetKillerStatusDataMappingDB::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.GetPlayerStateChangeType
// 0x00B8 (0x00B8 - 0x0000)
struct CorePlayerStatusWidget_GetPlayerStateChangeType final
{
public:
	struct FPlayerStatusViewData                  newViewData;                                       // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EPlayerStateChangeType                        ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerStatusWidget_GetPlayerStateChangeType) == 0x000008, "Wrong alignment on CorePlayerStatusWidget_GetPlayerStateChangeType");
static_assert(sizeof(CorePlayerStatusWidget_GetPlayerStateChangeType) == 0x0000B8, "Wrong size on CorePlayerStatusWidget_GetPlayerStateChangeType");
static_assert(offsetof(CorePlayerStatusWidget_GetPlayerStateChangeType, newViewData) == 0x000000, "Member 'CorePlayerStatusWidget_GetPlayerStateChangeType::newViewData' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_GetPlayerStateChangeType, ReturnValue) == 0x0000B0, "Member 'CorePlayerStatusWidget_GetPlayerStateChangeType::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.GetSecondaryKillersStatusEffectWidgets
// 0x0010 (0x0010 - 0x0000)
struct CorePlayerStatusWidget_GetSecondaryKillersStatusEffectWidgets final
{
public:
	TArray<class UCorePlayerStatusKillerEffectWidget*> ReturnValue;                                  // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusWidget_GetSecondaryKillersStatusEffectWidgets) == 0x000008, "Wrong alignment on CorePlayerStatusWidget_GetSecondaryKillersStatusEffectWidgets");
static_assert(sizeof(CorePlayerStatusWidget_GetSecondaryKillersStatusEffectWidgets) == 0x000010, "Wrong size on CorePlayerStatusWidget_GetSecondaryKillersStatusEffectWidgets");
static_assert(offsetof(CorePlayerStatusWidget_GetSecondaryKillersStatusEffectWidgets, ReturnValue) == 0x000000, "Member 'CorePlayerStatusWidget_GetSecondaryKillersStatusEffectWidgets::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.HasKillerStatusDataChanged
// 0x00B8 (0x00B8 - 0x0000)
struct CorePlayerStatusWidget_HasKillerStatusDataChanged final
{
public:
	struct FPlayerStatusViewData                  newViewData;                                       // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerStatusWidget_HasKillerStatusDataChanged) == 0x000008, "Wrong alignment on CorePlayerStatusWidget_HasKillerStatusDataChanged");
static_assert(sizeof(CorePlayerStatusWidget_HasKillerStatusDataChanged) == 0x0000B8, "Wrong size on CorePlayerStatusWidget_HasKillerStatusDataChanged");
static_assert(offsetof(CorePlayerStatusWidget_HasKillerStatusDataChanged, newViewData) == 0x000000, "Member 'CorePlayerStatusWidget_HasKillerStatusDataChanged::newViewData' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_HasKillerStatusDataChanged, ReturnValue) == 0x0000B0, "Member 'CorePlayerStatusWidget_HasKillerStatusDataChanged::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.HasObsessionStateChanged
// 0x0002 (0x0002 - 0x0000)
struct CorePlayerStatusWidget_HasObsessionStateChanged final
{
public:
	EObsessionUIState                             newObsessionState;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusWidget_HasObsessionStateChanged) == 0x000001, "Wrong alignment on CorePlayerStatusWidget_HasObsessionStateChanged");
static_assert(sizeof(CorePlayerStatusWidget_HasObsessionStateChanged) == 0x000002, "Wrong size on CorePlayerStatusWidget_HasObsessionStateChanged");
static_assert(offsetof(CorePlayerStatusWidget_HasObsessionStateChanged, newObsessionState) == 0x000000, "Member 'CorePlayerStatusWidget_HasObsessionStateChanged::newObsessionState' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_HasObsessionStateChanged, ReturnValue) == 0x000001, "Member 'CorePlayerStatusWidget_HasObsessionStateChanged::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.HasPlayerStateChanged
// 0x0002 (0x0002 - 0x0000)
struct CorePlayerStatusWidget_HasPlayerStateChanged final
{
public:
	EPlayerStatus                                 newPlayerState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusWidget_HasPlayerStateChanged) == 0x000001, "Wrong alignment on CorePlayerStatusWidget_HasPlayerStateChanged");
static_assert(sizeof(CorePlayerStatusWidget_HasPlayerStateChanged) == 0x000002, "Wrong size on CorePlayerStatusWidget_HasPlayerStateChanged");
static_assert(offsetof(CorePlayerStatusWidget_HasPlayerStateChanged, newPlayerState) == 0x000000, "Member 'CorePlayerStatusWidget_HasPlayerStateChanged::newPlayerState' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_HasPlayerStateChanged, ReturnValue) == 0x000001, "Member 'CorePlayerStatusWidget_HasPlayerStateChanged::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.HasPlayerStatusDataChanged
// 0x00B8 (0x00B8 - 0x0000)
struct CorePlayerStatusWidget_HasPlayerStatusDataChanged final
{
public:
	struct FPlayerStatusViewData                  newViewData;                                       // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerStatusWidget_HasPlayerStatusDataChanged) == 0x000008, "Wrong alignment on CorePlayerStatusWidget_HasPlayerStatusDataChanged");
static_assert(sizeof(CorePlayerStatusWidget_HasPlayerStatusDataChanged) == 0x0000B8, "Wrong size on CorePlayerStatusWidget_HasPlayerStatusDataChanged");
static_assert(offsetof(CorePlayerStatusWidget_HasPlayerStatusDataChanged, newViewData) == 0x000000, "Member 'CorePlayerStatusWidget_HasPlayerStatusDataChanged::newViewData' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_HasPlayerStatusDataChanged, ReturnValue) == 0x0000B0, "Member 'CorePlayerStatusWidget_HasPlayerStatusDataChanged::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.HasTimerProgressChanged
// 0x0008 (0x0008 - 0x0000)
struct CorePlayerStatusWidget_HasTimerProgressChanged final
{
public:
	float                                         newTimerProgress;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerStatusWidget_HasTimerProgressChanged) == 0x000004, "Wrong alignment on CorePlayerStatusWidget_HasTimerProgressChanged");
static_assert(sizeof(CorePlayerStatusWidget_HasTimerProgressChanged) == 0x000008, "Wrong size on CorePlayerStatusWidget_HasTimerProgressChanged");
static_assert(offsetof(CorePlayerStatusWidget_HasTimerProgressChanged, newTimerProgress) == 0x000000, "Member 'CorePlayerStatusWidget_HasTimerProgressChanged::newTimerProgress' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_HasTimerProgressChanged, ReturnValue) == 0x000004, "Member 'CorePlayerStatusWidget_HasTimerProgressChanged::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.ShouldPlaySleepAnimation
// 0x0002 (0x0002 - 0x0000)
struct CorePlayerStatusWidget_ShouldPlaySleepAnimation final
{
public:
	ESleepingUIState                              newSleepState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusWidget_ShouldPlaySleepAnimation) == 0x000001, "Wrong alignment on CorePlayerStatusWidget_ShouldPlaySleepAnimation");
static_assert(sizeof(CorePlayerStatusWidget_ShouldPlaySleepAnimation) == 0x000002, "Wrong size on CorePlayerStatusWidget_ShouldPlaySleepAnimation");
static_assert(offsetof(CorePlayerStatusWidget_ShouldPlaySleepAnimation, newSleepState) == 0x000000, "Member 'CorePlayerStatusWidget_ShouldPlaySleepAnimation::newSleepState' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_ShouldPlaySleepAnimation, ReturnValue) == 0x000001, "Member 'CorePlayerStatusWidget_ShouldPlaySleepAnimation::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePremiumCurrencyButtonWidget.SetPrice
// 0x0018 (0x0018 - 0x0000)
struct CorePremiumCurrencyButtonWidget_SetPrice final
{
public:
	class FText                                   PriceText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePremiumCurrencyButtonWidget_SetPrice) == 0x000008, "Wrong alignment on CorePremiumCurrencyButtonWidget_SetPrice");
static_assert(sizeof(CorePremiumCurrencyButtonWidget_SetPrice) == 0x000018, "Wrong size on CorePremiumCurrencyButtonWidget_SetPrice");
static_assert(offsetof(CorePremiumCurrencyButtonWidget_SetPrice, PriceText) == 0x000000, "Member 'CorePremiumCurrencyButtonWidget_SetPrice::PriceText' has a wrong offset!");

// Function DBDUIViewsCore.CorePresetWidget.OnPresetButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CorePresetWidget_OnPresetButtonHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresetWidget_OnPresetButtonHovered) == 0x000008, "Wrong alignment on CorePresetWidget_OnPresetButtonHovered");
static_assert(sizeof(CorePresetWidget_OnPresetButtonHovered) == 0x000008, "Wrong size on CorePresetWidget_OnPresetButtonHovered");
static_assert(offsetof(CorePresetWidget_OnPresetButtonHovered, buttonTarget) == 0x000000, "Member 'CorePresetWidget_OnPresetButtonHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CorePresetWidget.OnPresetButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CorePresetWidget_OnPresetButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresetWidget_OnPresetButtonUnhovered) == 0x000008, "Wrong alignment on CorePresetWidget_OnPresetButtonUnhovered");
static_assert(sizeof(CorePresetWidget_OnPresetButtonUnhovered) == 0x000008, "Wrong size on CorePresetWidget_OnPresetButtonUnhovered");
static_assert(offsetof(CorePresetWidget_OnPresetButtonUnhovered, buttonTarget) == 0x000000, "Member 'CorePresetWidget_OnPresetButtonUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CorePresetWidget.SetData
// 0x0004 (0x0004 - 0x0000)
struct CorePresetWidget_SetData final
{
public:
	int32                                         presetId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresetWidget_SetData) == 0x000004, "Wrong alignment on CorePresetWidget_SetData");
static_assert(sizeof(CorePresetWidget_SetData) == 0x000004, "Wrong size on CorePresetWidget_SetData");
static_assert(offsetof(CorePresetWidget_SetData, presetId) == 0x000000, "Member 'CorePresetWidget_SetData::presetId' has a wrong offset!");

// Function DBDUIViewsCore.CorePresetWidget.SetIsPreviewingAnyCustomization
// 0x0001 (0x0001 - 0x0000)
struct CorePresetWidget_SetIsPreviewingAnyCustomization final
{
public:
	bool                                          isPreviewingAnyCustomization;                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresetWidget_SetIsPreviewingAnyCustomization) == 0x000001, "Wrong alignment on CorePresetWidget_SetIsPreviewingAnyCustomization");
static_assert(sizeof(CorePresetWidget_SetIsPreviewingAnyCustomization) == 0x000001, "Wrong size on CorePresetWidget_SetIsPreviewingAnyCustomization");
static_assert(offsetof(CorePresetWidget_SetIsPreviewingAnyCustomization, isPreviewingAnyCustomization) == 0x000000, "Member 'CorePresetWidget_SetIsPreviewingAnyCustomization::isPreviewingAnyCustomization' has a wrong offset!");

// Function DBDUIViewsCore.CorePrestigeWidget.SetClawVisibility
// 0x0001 (0x0001 - 0x0000)
struct CorePrestigeWidget_SetClawVisibility final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePrestigeWidget_SetClawVisibility) == 0x000001, "Wrong alignment on CorePrestigeWidget_SetClawVisibility");
static_assert(sizeof(CorePrestigeWidget_SetClawVisibility) == 0x000001, "Wrong size on CorePrestigeWidget_SetClawVisibility");
static_assert(offsetof(CorePrestigeWidget_SetClawVisibility, Show) == 0x000000, "Member 'CorePrestigeWidget_SetClawVisibility::Show' has a wrong offset!");

// Function DBDUIViewsCore.CorePrestigeWidget.SetData
// 0x000C (0x000C - 0x0000)
struct CorePrestigeWidget_SetData final
{
public:
	struct FPrestigeViewData                      Data;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          hideClaws;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePrestigeWidget_SetData) == 0x000004, "Wrong alignment on CorePrestigeWidget_SetData");
static_assert(sizeof(CorePrestigeWidget_SetData) == 0x00000C, "Wrong size on CorePrestigeWidget_SetData");
static_assert(offsetof(CorePrestigeWidget_SetData, Data) == 0x000000, "Member 'CorePrestigeWidget_SetData::Data' has a wrong offset!");
static_assert(offsetof(CorePrestigeWidget_SetData, hideClaws) == 0x000008, "Member 'CorePrestigeWidget_SetData::hideClaws' has a wrong offset!");

// Function DBDUIViewsCore.CorePrestigeWidget.SetProgressVisibility
// 0x0001 (0x0001 - 0x0000)
struct CorePrestigeWidget_SetProgressVisibility final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePrestigeWidget_SetProgressVisibility) == 0x000001, "Wrong alignment on CorePrestigeWidget_SetProgressVisibility");
static_assert(sizeof(CorePrestigeWidget_SetProgressVisibility) == 0x000001, "Wrong size on CorePrestigeWidget_SetProgressVisibility");
static_assert(offsetof(CorePrestigeWidget_SetProgressVisibility, Show) == 0x000000, "Member 'CorePrestigeWidget_SetProgressVisibility::Show' has a wrong offset!");

// Function DBDUIViewsCore.CorePrestigeWidget.UpdateImagesAndText
// 0x0008 (0x0008 - 0x0000)
struct CorePrestigeWidget_UpdateImagesAndText final
{
public:
	struct FPrestigeViewData                      Data;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePrestigeWidget_UpdateImagesAndText) == 0x000004, "Wrong alignment on CorePrestigeWidget_UpdateImagesAndText");
static_assert(sizeof(CorePrestigeWidget_UpdateImagesAndText) == 0x000008, "Wrong size on CorePrestigeWidget_UpdateImagesAndText");
static_assert(offsetof(CorePrestigeWidget_UpdateImagesAndText, Data) == 0x000000, "Member 'CorePrestigeWidget_UpdateImagesAndText::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreProfileMenuWidget.OnMenuTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreProfileMenuWidget_OnMenuTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreProfileMenuWidget_OnMenuTabSelected) == 0x000008, "Wrong alignment on CoreProfileMenuWidget_OnMenuTabSelected");
static_assert(sizeof(CoreProfileMenuWidget_OnMenuTabSelected) == 0x000008, "Wrong size on CoreProfileMenuWidget_OnMenuTabSelected");
static_assert(offsetof(CoreProfileMenuWidget_OnMenuTabSelected, selectedButton) == 0x000000, "Member 'CoreProfileMenuWidget_OnMenuTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreRankTooltipWidget.SetTooltipData
// 0x0020 (0x0020 - 0x0000)
struct CoreRankTooltipWidget_SetTooltipData final
{
public:
	struct FRankTooltipViewData                   ViewData;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRankTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on CoreRankTooltipWidget_SetTooltipData");
static_assert(sizeof(CoreRankTooltipWidget_SetTooltipData) == 0x000020, "Wrong size on CoreRankTooltipWidget_SetTooltipData");
static_assert(offsetof(CoreRankTooltipWidget_SetTooltipData, ViewData) == 0x000000, "Member 'CoreRankTooltipWidget_SetTooltipData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWrapperWidget.CreateRewardWidget
// 0x0008 (0x0008 - 0x0000)
struct CoreRewardWrapperWidget_CreateRewardWidget final
{
public:
	TSubclassOf<class UCoreRewardWidget>          rewardClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWrapperWidget_CreateRewardWidget) == 0x000008, "Wrong alignment on CoreRewardWrapperWidget_CreateRewardWidget");
static_assert(sizeof(CoreRewardWrapperWidget_CreateRewardWidget) == 0x000008, "Wrong size on CoreRewardWrapperWidget_CreateRewardWidget");
static_assert(offsetof(CoreRewardWrapperWidget_CreateRewardWidget, rewardClass) == 0x000000, "Member 'CoreRewardWrapperWidget_CreateRewardWidget::rewardClass' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetData
// 0x0590 (0x0590 - 0x0000)
struct CoreRewardWrapperWidget_SetData final
{
public:
	struct FRewardWrapperViewData                 ViewData;                                          // 0x0000(0x0590)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWrapperWidget_SetData) == 0x000008, "Wrong alignment on CoreRewardWrapperWidget_SetData");
static_assert(sizeof(CoreRewardWrapperWidget_SetData) == 0x000590, "Wrong size on CoreRewardWrapperWidget_SetData");
static_assert(offsetof(CoreRewardWrapperWidget_SetData, ViewData) == 0x000000, "Member 'CoreRewardWrapperWidget_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetIsClickable
// 0x0001 (0x0001 - 0x0000)
struct CoreRewardWrapperWidget_SetIsClickable final
{
public:
	bool                                          IsClickable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWrapperWidget_SetIsClickable) == 0x000001, "Wrong alignment on CoreRewardWrapperWidget_SetIsClickable");
static_assert(sizeof(CoreRewardWrapperWidget_SetIsClickable) == 0x000001, "Wrong size on CoreRewardWrapperWidget_SetIsClickable");
static_assert(offsetof(CoreRewardWrapperWidget_SetIsClickable, IsClickable) == 0x000000, "Member 'CoreRewardWrapperWidget_SetIsClickable::IsClickable' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetIsLocked
// 0x0002 (0x0002 - 0x0000)
struct CoreRewardWrapperWidget_SetIsLocked final
{
public:
	bool                                          IsLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayAnimation_0;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWrapperWidget_SetIsLocked) == 0x000001, "Wrong alignment on CoreRewardWrapperWidget_SetIsLocked");
static_assert(sizeof(CoreRewardWrapperWidget_SetIsLocked) == 0x000002, "Wrong size on CoreRewardWrapperWidget_SetIsLocked");
static_assert(offsetof(CoreRewardWrapperWidget_SetIsLocked, IsLocked) == 0x000000, "Member 'CoreRewardWrapperWidget_SetIsLocked::IsLocked' has a wrong offset!");
static_assert(offsetof(CoreRewardWrapperWidget_SetIsLocked, PlayAnimation_0) == 0x000001, "Member 'CoreRewardWrapperWidget_SetIsLocked::PlayAnimation_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetScaleToFit
// 0x0004 (0x0004 - 0x0000)
struct CoreRewardWrapperWidget_SetScaleToFit final
{
public:
	float                                         Size;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWrapperWidget_SetScaleToFit) == 0x000004, "Wrong alignment on CoreRewardWrapperWidget_SetScaleToFit");
static_assert(sizeof(CoreRewardWrapperWidget_SetScaleToFit) == 0x000004, "Wrong size on CoreRewardWrapperWidget_SetScaleToFit");
static_assert(offsetof(CoreRewardWrapperWidget_SetScaleToFit, Size) == 0x000000, "Member 'CoreRewardWrapperWidget_SetScaleToFit::Size' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetScaleUserSpecified
// 0x0004 (0x0004 - 0x0000)
struct CoreRewardWrapperWidget_SetScaleUserSpecified final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWrapperWidget_SetScaleUserSpecified) == 0x000004, "Wrong alignment on CoreRewardWrapperWidget_SetScaleUserSpecified");
static_assert(sizeof(CoreRewardWrapperWidget_SetScaleUserSpecified) == 0x000004, "Wrong size on CoreRewardWrapperWidget_SetScaleUserSpecified");
static_assert(offsetof(CoreRewardWrapperWidget_SetScaleUserSpecified, Scale) == 0x000000, "Member 'CoreRewardWrapperWidget_SetScaleUserSpecified::Scale' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetTooltipAlignment
// 0x0001 (0x0001 - 0x0000)
struct CoreRewardWrapperWidget_SetTooltipAlignment final
{
public:
	ETooltipHorizontalAlignment                   Alignment;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWrapperWidget_SetTooltipAlignment) == 0x000001, "Wrong alignment on CoreRewardWrapperWidget_SetTooltipAlignment");
static_assert(sizeof(CoreRewardWrapperWidget_SetTooltipAlignment) == 0x000001, "Wrong size on CoreRewardWrapperWidget_SetTooltipAlignment");
static_assert(offsetof(CoreRewardWrapperWidget_SetTooltipAlignment, Alignment) == 0x000000, "Member 'CoreRewardWrapperWidget_SetTooltipAlignment::Alignment' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWrapperWidget.GetRewardWidget
// 0x0008 (0x0008 - 0x0000)
struct CoreRewardWrapperWidget_GetRewardWidget final
{
public:
	class UCoreRewardWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWrapperWidget_GetRewardWidget) == 0x000008, "Wrong alignment on CoreRewardWrapperWidget_GetRewardWidget");
static_assert(sizeof(CoreRewardWrapperWidget_GetRewardWidget) == 0x000008, "Wrong size on CoreRewardWrapperWidget_GetRewardWidget");
static_assert(offsetof(CoreRewardWrapperWidget_GetRewardWidget, ReturnValue) == 0x000000, "Member 'CoreRewardWrapperWidget_GetRewardWidget::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWrapperWidget.GetWidgetClassFromRewardType
// 0x0010 (0x0010 - 0x0000)
struct CoreRewardWrapperWidget_GetWidgetClassFromRewardType final
{
public:
	ERewardType                                   RewardType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreRewardWidget>          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWrapperWidget_GetWidgetClassFromRewardType) == 0x000008, "Wrong alignment on CoreRewardWrapperWidget_GetWidgetClassFromRewardType");
static_assert(sizeof(CoreRewardWrapperWidget_GetWidgetClassFromRewardType) == 0x000010, "Wrong size on CoreRewardWrapperWidget_GetWidgetClassFromRewardType");
static_assert(offsetof(CoreRewardWrapperWidget_GetWidgetClassFromRewardType, RewardType) == 0x000000, "Member 'CoreRewardWrapperWidget_GetWidgetClassFromRewardType::RewardType' has a wrong offset!");
static_assert(offsetof(CoreRewardWrapperWidget_GetWidgetClassFromRewardType, ReturnValue) == 0x000008, "Member 'CoreRewardWrapperWidget_GetWidgetClassFromRewardType::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreScreenIndicatorsContainerWidget.GetScreenIndicatorsMap
// 0x0050 (0x0050 - 0x0000)
struct CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap final
{
public:
	TMap<class FString, class UCoreScreenIndicatorWidget*> ReturnValue;                              // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap) == 0x000008, "Wrong alignment on CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap");
static_assert(sizeof(CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap) == 0x000050, "Wrong size on CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap");
static_assert(offsetof(CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap, ReturnValue) == 0x000000, "Member 'CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreScreenIndicatorsContainerWidget.FindScreenIndicatorKey
// 0x0018 (0x0018 - 0x0000)
struct CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey final
{
public:
	class UCoreScreenIndicatorWidget*             Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey) == 0x000008, "Wrong alignment on CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey");
static_assert(sizeof(CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey) == 0x000018, "Wrong size on CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey");
static_assert(offsetof(CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey, Value) == 0x000000, "Member 'CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey::Value' has a wrong offset!");
static_assert(offsetof(CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey, ReturnValue) == 0x000008, "Member 'CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreSearchBarWidget.OnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct CoreSearchBarWidget_OnTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSearchBarWidget_OnTextChanged) == 0x000008, "Wrong alignment on CoreSearchBarWidget_OnTextChanged");
static_assert(sizeof(CoreSearchBarWidget_OnTextChanged) == 0x000018, "Wrong size on CoreSearchBarWidget_OnTextChanged");
static_assert(offsetof(CoreSearchBarWidget_OnTextChanged, InText) == 0x000000, "Member 'CoreSearchBarWidget_OnTextChanged::InText' has a wrong offset!");

// Function DBDUIViewsCore.CoreSearchBarWidget.OnTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct CoreSearchBarWidget_OnTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   inCommitType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSearchBarWidget_OnTextCommitted) == 0x000008, "Wrong alignment on CoreSearchBarWidget_OnTextCommitted");
static_assert(sizeof(CoreSearchBarWidget_OnTextCommitted) == 0x000020, "Wrong size on CoreSearchBarWidget_OnTextCommitted");
static_assert(offsetof(CoreSearchBarWidget_OnTextCommitted, InText) == 0x000000, "Member 'CoreSearchBarWidget_OnTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(CoreSearchBarWidget_OnTextCommitted, inCommitType) == 0x000018, "Member 'CoreSearchBarWidget_OnTextCommitted::inCommitType' has a wrong offset!");

// Function DBDUIViewsCore.CoreSearchBarWidget.GetEnteredText
// 0x0018 (0x0018 - 0x0000)
struct CoreSearchBarWidget_GetEnteredText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSearchBarWidget_GetEnteredText) == 0x000008, "Wrong alignment on CoreSearchBarWidget_GetEnteredText");
static_assert(sizeof(CoreSearchBarWidget_GetEnteredText) == 0x000018, "Wrong size on CoreSearchBarWidget_GetEnteredText");
static_assert(offsetof(CoreSearchBarWidget_GetEnteredText, ReturnValue) == 0x000000, "Member 'CoreSearchBarWidget_GetEnteredText::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreSettingsOfferingsDisplayWidget.OnOfferingHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreSettingsOfferingsDisplayWidget_OnOfferingHovered final
{
public:
	class UCoreButtonWidget*                      hoveredOffering;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSettingsOfferingsDisplayWidget_OnOfferingHovered) == 0x000008, "Wrong alignment on CoreSettingsOfferingsDisplayWidget_OnOfferingHovered");
static_assert(sizeof(CoreSettingsOfferingsDisplayWidget_OnOfferingHovered) == 0x000008, "Wrong size on CoreSettingsOfferingsDisplayWidget_OnOfferingHovered");
static_assert(offsetof(CoreSettingsOfferingsDisplayWidget_OnOfferingHovered, hoveredOffering) == 0x000000, "Member 'CoreSettingsOfferingsDisplayWidget_OnOfferingHovered::hoveredOffering' has a wrong offset!");

// Function DBDUIViewsCore.CoreSettingsOfferingsDisplayWidget.OnOfferingUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreSettingsOfferingsDisplayWidget_OnOfferingUnhovered final
{
public:
	class UCoreButtonWidget*                      unhoveredOffering;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSettingsOfferingsDisplayWidget_OnOfferingUnhovered) == 0x000008, "Wrong alignment on CoreSettingsOfferingsDisplayWidget_OnOfferingUnhovered");
static_assert(sizeof(CoreSettingsOfferingsDisplayWidget_OnOfferingUnhovered) == 0x000008, "Wrong size on CoreSettingsOfferingsDisplayWidget_OnOfferingUnhovered");
static_assert(offsetof(CoreSettingsOfferingsDisplayWidget_OnOfferingUnhovered, unhoveredOffering) == 0x000000, "Member 'CoreSettingsOfferingsDisplayWidget_OnOfferingUnhovered::unhoveredOffering' has a wrong offset!");

// Function DBDUIViewsCore.CoreSettingsPlayerInfoButtonWidget.UpdateVisuals
// 0x0040 (0x0040 - 0x0000)
struct CoreSettingsPlayerInfoButtonWidget_UpdateVisuals final
{
public:
	struct FPlayerInfoData                        PlayerInfoData;                                    // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
	bool                                          isLocalPlayerSurvivor;                             // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSettingsPlayerInfoButtonWidget_UpdateVisuals) == 0x000008, "Wrong alignment on CoreSettingsPlayerInfoButtonWidget_UpdateVisuals");
static_assert(sizeof(CoreSettingsPlayerInfoButtonWidget_UpdateVisuals) == 0x000040, "Wrong size on CoreSettingsPlayerInfoButtonWidget_UpdateVisuals");
static_assert(offsetof(CoreSettingsPlayerInfoButtonWidget_UpdateVisuals, PlayerInfoData) == 0x000000, "Member 'CoreSettingsPlayerInfoButtonWidget_UpdateVisuals::PlayerInfoData' has a wrong offset!");
static_assert(offsetof(CoreSettingsPlayerInfoButtonWidget_UpdateVisuals, isLocalPlayerSurvivor) == 0x000038, "Member 'CoreSettingsPlayerInfoButtonWidget_UpdateVisuals::isLocalPlayerSurvivor' has a wrong offset!");

// Function DBDUIViewsCore.CoreSettingsSkillsDisplayWidget.OnSkillClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreSettingsSkillsDisplayWidget_OnSkillClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSettingsSkillsDisplayWidget_OnSkillClicked) == 0x000008, "Wrong alignment on CoreSettingsSkillsDisplayWidget_OnSkillClicked");
static_assert(sizeof(CoreSettingsSkillsDisplayWidget_OnSkillClicked) == 0x000008, "Wrong size on CoreSettingsSkillsDisplayWidget_OnSkillClicked");
static_assert(offsetof(CoreSettingsSkillsDisplayWidget_OnSkillClicked, Button) == 0x000000, "Member 'CoreSettingsSkillsDisplayWidget_OnSkillClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreSettingsSkillsDisplayWidget.OnSkillHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreSettingsSkillsDisplayWidget_OnSkillHovered final
{
public:
	class UCoreButtonWidget*                      hoveredPerk;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSettingsSkillsDisplayWidget_OnSkillHovered) == 0x000008, "Wrong alignment on CoreSettingsSkillsDisplayWidget_OnSkillHovered");
static_assert(sizeof(CoreSettingsSkillsDisplayWidget_OnSkillHovered) == 0x000008, "Wrong size on CoreSettingsSkillsDisplayWidget_OnSkillHovered");
static_assert(offsetof(CoreSettingsSkillsDisplayWidget_OnSkillHovered, hoveredPerk) == 0x000000, "Member 'CoreSettingsSkillsDisplayWidget_OnSkillHovered::hoveredPerk' has a wrong offset!");

// Function DBDUIViewsCore.CoreSettingsSkillsDisplayWidget.OnSkillUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreSettingsSkillsDisplayWidget_OnSkillUnhovered final
{
public:
	class UCoreButtonWidget*                      unhoveredPerk;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSettingsSkillsDisplayWidget_OnSkillUnhovered) == 0x000008, "Wrong alignment on CoreSettingsSkillsDisplayWidget_OnSkillUnhovered");
static_assert(sizeof(CoreSettingsSkillsDisplayWidget_OnSkillUnhovered) == 0x000008, "Wrong size on CoreSettingsSkillsDisplayWidget_OnSkillUnhovered");
static_assert(offsetof(CoreSettingsSkillsDisplayWidget_OnSkillUnhovered, unhoveredPerk) == 0x000000, "Member 'CoreSettingsSkillsDisplayWidget_OnSkillUnhovered::unhoveredPerk' has a wrong offset!");

// Function DBDUIViewsCore.CoreShrineOfSecretsWidget.OnPurchaseButtonClicked
// 0x0208 (0x0208 - 0x0000)
struct CoreShrineOfSecretsWidget_OnPurchaseButtonClicked final
{
public:
	struct FShrineOfSecretsItemViewData           ShrineOfSecretsItemViewData;                       // 0x0000(0x0208)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreShrineOfSecretsWidget_OnPurchaseButtonClicked) == 0x000008, "Wrong alignment on CoreShrineOfSecretsWidget_OnPurchaseButtonClicked");
static_assert(sizeof(CoreShrineOfSecretsWidget_OnPurchaseButtonClicked) == 0x000208, "Wrong size on CoreShrineOfSecretsWidget_OnPurchaseButtonClicked");
static_assert(offsetof(CoreShrineOfSecretsWidget_OnPurchaseButtonClicked, ShrineOfSecretsItemViewData) == 0x000000, "Member 'CoreShrineOfSecretsWidget_OnPurchaseButtonClicked::ShrineOfSecretsItemViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreShrineOfSecretsWidget.SetEventUi
// 0x0048 (0x0048 - 0x0000)
struct CoreShrineOfSecretsWidget_SetEventUi final
{
public:
	struct FShrineOfSecretsViewData               ShrineOfSecretsViewData;                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreShrineOfSecretsWidget_SetEventUi) == 0x000008, "Wrong alignment on CoreShrineOfSecretsWidget_SetEventUi");
static_assert(sizeof(CoreShrineOfSecretsWidget_SetEventUi) == 0x000048, "Wrong size on CoreShrineOfSecretsWidget_SetEventUi");
static_assert(offsetof(CoreShrineOfSecretsWidget_SetEventUi, ShrineOfSecretsViewData) == 0x000000, "Member 'CoreShrineOfSecretsWidget_SetEventUi::ShrineOfSecretsViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreShrineOfSecretsWidget.UpdateTimer
// 0x0004 (0x0004 - 0x0000)
struct CoreShrineOfSecretsWidget_UpdateTimer final
{
public:
	int32                                         RemainingTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreShrineOfSecretsWidget_UpdateTimer) == 0x000004, "Wrong alignment on CoreShrineOfSecretsWidget_UpdateTimer");
static_assert(sizeof(CoreShrineOfSecretsWidget_UpdateTimer) == 0x000004, "Wrong size on CoreShrineOfSecretsWidget_UpdateTimer");
static_assert(offsetof(CoreShrineOfSecretsWidget_UpdateTimer, RemainingTime) == 0x000000, "Member 'CoreShrineOfSecretsWidget_UpdateTimer::RemainingTime' has a wrong offset!");

// Function DBDUIViewsCore.CoreSliderWidget.OnDecrementButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreSliderWidget_OnDecrementButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSliderWidget_OnDecrementButtonClicked) == 0x000008, "Wrong alignment on CoreSliderWidget_OnDecrementButtonClicked");
static_assert(sizeof(CoreSliderWidget_OnDecrementButtonClicked) == 0x000008, "Wrong size on CoreSliderWidget_OnDecrementButtonClicked");
static_assert(offsetof(CoreSliderWidget_OnDecrementButtonClicked, buttonTarget) == 0x000000, "Member 'CoreSliderWidget_OnDecrementButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreSliderWidget.OnIncrementButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreSliderWidget_OnIncrementButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSliderWidget_OnIncrementButtonClicked) == 0x000008, "Wrong alignment on CoreSliderWidget_OnIncrementButtonClicked");
static_assert(sizeof(CoreSliderWidget_OnIncrementButtonClicked) == 0x000008, "Wrong size on CoreSliderWidget_OnIncrementButtonClicked");
static_assert(offsetof(CoreSliderWidget_OnIncrementButtonClicked, buttonTarget) == 0x000000, "Member 'CoreSliderWidget_OnIncrementButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreSliderWidget.OnValueChanged
// 0x0004 (0x0004 - 0x0000)
struct CoreSliderWidget_OnValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSliderWidget_OnValueChanged) == 0x000004, "Wrong alignment on CoreSliderWidget_OnValueChanged");
static_assert(sizeof(CoreSliderWidget_OnValueChanged) == 0x000004, "Wrong size on CoreSliderWidget_OnValueChanged");
static_assert(offsetof(CoreSliderWidget_OnValueChanged, NewValue) == 0x000000, "Member 'CoreSliderWidget_OnValueChanged::NewValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreSliderWidget.SetGhostValue
// 0x0004 (0x0004 - 0x0000)
struct CoreSliderWidget_SetGhostValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSliderWidget_SetGhostValue) == 0x000004, "Wrong alignment on CoreSliderWidget_SetGhostValue");
static_assert(sizeof(CoreSliderWidget_SetGhostValue) == 0x000004, "Wrong size on CoreSliderWidget_SetGhostValue");
static_assert(offsetof(CoreSliderWidget_SetGhostValue, Value) == 0x000000, "Member 'CoreSliderWidget_SetGhostValue::Value' has a wrong offset!");

// Function DBDUIViewsCore.CoreSliderWidget.SetValue
// 0x0004 (0x0004 - 0x0000)
struct CoreSliderWidget_SetValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSliderWidget_SetValue) == 0x000004, "Wrong alignment on CoreSliderWidget_SetValue");
static_assert(sizeof(CoreSliderWidget_SetValue) == 0x000004, "Wrong size on CoreSliderWidget_SetValue");
static_assert(offsetof(CoreSliderWidget_SetValue, Value) == 0x000000, "Member 'CoreSliderWidget_SetValue::Value' has a wrong offset!");

// Function DBDUIViewsCore.CoreSliderWidget.GetValue
// 0x0004 (0x0004 - 0x0000)
struct CoreSliderWidget_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSliderWidget_GetValue) == 0x000004, "Wrong alignment on CoreSliderWidget_GetValue");
static_assert(sizeof(CoreSliderWidget_GetValue) == 0x000004, "Wrong size on CoreSliderWidget_GetValue");
static_assert(offsetof(CoreSliderWidget_GetValue, ReturnValue) == 0x000000, "Member 'CoreSliderWidget_GetValue::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.HasCustomWidgetForEvent
// 0x0010 (0x0010 - 0x0000)
struct CoreSpecialEventLoadingScreenContainer_HasCustomWidgetForEvent final
{
public:
	class FName                                   eventID;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreSpecialEventLoadingScreenContainer_HasCustomWidgetForEvent) == 0x000004, "Wrong alignment on CoreSpecialEventLoadingScreenContainer_HasCustomWidgetForEvent");
static_assert(sizeof(CoreSpecialEventLoadingScreenContainer_HasCustomWidgetForEvent) == 0x000010, "Wrong size on CoreSpecialEventLoadingScreenContainer_HasCustomWidgetForEvent");
static_assert(offsetof(CoreSpecialEventLoadingScreenContainer_HasCustomWidgetForEvent, eventID) == 0x000000, "Member 'CoreSpecialEventLoadingScreenContainer_HasCustomWidgetForEvent::eventID' has a wrong offset!");
static_assert(offsetof(CoreSpecialEventLoadingScreenContainer_HasCustomWidgetForEvent, ReturnValue) == 0x00000C, "Member 'CoreSpecialEventLoadingScreenContainer_HasCustomWidgetForEvent::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.SetLoadingHint
// 0x0078 (0x0078 - 0x0000)
struct CoreSpecialEventLoadingScreenContainer_SetLoadingHint final
{
public:
	struct FLoadingHintViewData                   loadingHintData;                                   // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSpecialEventLoadingScreenContainer_SetLoadingHint) == 0x000008, "Wrong alignment on CoreSpecialEventLoadingScreenContainer_SetLoadingHint");
static_assert(sizeof(CoreSpecialEventLoadingScreenContainer_SetLoadingHint) == 0x000078, "Wrong size on CoreSpecialEventLoadingScreenContainer_SetLoadingHint");
static_assert(offsetof(CoreSpecialEventLoadingScreenContainer_SetLoadingHint, loadingHintData) == 0x000000, "Member 'CoreSpecialEventLoadingScreenContainer_SetLoadingHint::loadingHintData' has a wrong offset!");

// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.SetupSpecialEventLoadingScreen
// 0x000C (0x000C - 0x0000)
struct CoreSpecialEventLoadingScreenContainer_SetupSpecialEventLoadingScreen final
{
public:
	class FName                                   eventLabel;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSpecialEventLoadingScreenContainer_SetupSpecialEventLoadingScreen) == 0x000004, "Wrong alignment on CoreSpecialEventLoadingScreenContainer_SetupSpecialEventLoadingScreen");
static_assert(sizeof(CoreSpecialEventLoadingScreenContainer_SetupSpecialEventLoadingScreen) == 0x00000C, "Wrong size on CoreSpecialEventLoadingScreenContainer_SetupSpecialEventLoadingScreen");
static_assert(offsetof(CoreSpecialEventLoadingScreenContainer_SetupSpecialEventLoadingScreen, eventLabel) == 0x000000, "Member 'CoreSpecialEventLoadingScreenContainer_SetupSpecialEventLoadingScreen::eventLabel' has a wrong offset!");

// Function DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer.UpdateProgress
// 0x0004 (0x0004 - 0x0000)
struct CoreSpecialEventLoadingScreenContainer_UpdateProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSpecialEventLoadingScreenContainer_UpdateProgress) == 0x000004, "Wrong alignment on CoreSpecialEventLoadingScreenContainer_UpdateProgress");
static_assert(sizeof(CoreSpecialEventLoadingScreenContainer_UpdateProgress) == 0x000004, "Wrong size on CoreSpecialEventLoadingScreenContainer_UpdateProgress");
static_assert(offsetof(CoreSpecialEventLoadingScreenContainer_UpdateProgress, Progress) == 0x000000, "Member 'CoreSpecialEventLoadingScreenContainer_UpdateProgress::Progress' has a wrong offset!");

// Function DBDUIViewsCore.CoreStartSequenceWidget.OnHideStartSequenceComplete
// 0x0008 (0x0008 - 0x0000)
struct CoreStartSequenceWidget_OnHideStartSequenceComplete final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStartSequenceWidget_OnHideStartSequenceComplete) == 0x000008, "Wrong alignment on CoreStartSequenceWidget_OnHideStartSequenceComplete");
static_assert(sizeof(CoreStartSequenceWidget_OnHideStartSequenceComplete) == 0x000008, "Wrong size on CoreStartSequenceWidget_OnHideStartSequenceComplete");
static_assert(offsetof(CoreStartSequenceWidget_OnHideStartSequenceComplete, tween) == 0x000000, "Member 'CoreStartSequenceWidget_OnHideStartSequenceComplete::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreStatusEffectIcon.GetStatusEffectData
// 0x0060 (0x0060 - 0x0000)
struct CoreStatusEffectIcon_GetStatusEffectData final
{
public:
	struct FStatusEffectViewData                  ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStatusEffectIcon_GetStatusEffectData) == 0x000008, "Wrong alignment on CoreStatusEffectIcon_GetStatusEffectData");
static_assert(sizeof(CoreStatusEffectIcon_GetStatusEffectData) == 0x000060, "Wrong size on CoreStatusEffectIcon_GetStatusEffectData");
static_assert(offsetof(CoreStatusEffectIcon_GetStatusEffectData, ReturnValue) == 0x000000, "Member 'CoreStatusEffectIcon_GetStatusEffectData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStatusEffectIcon.SetInactiveTicks
// 0x0004 (0x0004 - 0x0000)
struct CoreStatusEffectIcon_SetInactiveTicks final
{
public:
	int32                                         inactiveTicks;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStatusEffectIcon_SetInactiveTicks) == 0x000004, "Wrong alignment on CoreStatusEffectIcon_SetInactiveTicks");
static_assert(sizeof(CoreStatusEffectIcon_SetInactiveTicks) == 0x000004, "Wrong size on CoreStatusEffectIcon_SetInactiveTicks");
static_assert(offsetof(CoreStatusEffectIcon_SetInactiveTicks, inactiveTicks) == 0x000000, "Member 'CoreStatusEffectIcon_SetInactiveTicks::inactiveTicks' has a wrong offset!");

// Function DBDUIViewsCore.CoreStatusEffectIcon.SetStatusEffectData
// 0x0060 (0x0060 - 0x0000)
struct CoreStatusEffectIcon_SetStatusEffectData final
{
public:
	struct FStatusEffectViewData                  Data;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStatusEffectIcon_SetStatusEffectData) == 0x000008, "Wrong alignment on CoreStatusEffectIcon_SetStatusEffectData");
static_assert(sizeof(CoreStatusEffectIcon_SetStatusEffectData) == 0x000060, "Wrong size on CoreStatusEffectIcon_SetStatusEffectData");
static_assert(offsetof(CoreStatusEffectIcon_SetStatusEffectData, Data) == 0x000000, "Member 'CoreStatusEffectIcon_SetStatusEffectData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreStatusEffectIcon.UpdatePercentageFill
// 0x0004 (0x0004 - 0x0000)
struct CoreStatusEffectIcon_UpdatePercentageFill final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStatusEffectIcon_UpdatePercentageFill) == 0x000004, "Wrong alignment on CoreStatusEffectIcon_UpdatePercentageFill");
static_assert(sizeof(CoreStatusEffectIcon_UpdatePercentageFill) == 0x000004, "Wrong size on CoreStatusEffectIcon_UpdatePercentageFill");
static_assert(offsetof(CoreStatusEffectIcon_UpdatePercentageFill, Percentage) == 0x000000, "Member 'CoreStatusEffectIcon_UpdatePercentageFill::Percentage' has a wrong offset!");

// Function DBDUIViewsCore.CoreStatusEffectIcon.GetInactiveTicks
// 0x0004 (0x0004 - 0x0000)
struct CoreStatusEffectIcon_GetInactiveTicks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStatusEffectIcon_GetInactiveTicks) == 0x000004, "Wrong alignment on CoreStatusEffectIcon_GetInactiveTicks");
static_assert(sizeof(CoreStatusEffectIcon_GetInactiveTicks) == 0x000004, "Wrong size on CoreStatusEffectIcon_GetInactiveTicks");
static_assert(offsetof(CoreStatusEffectIcon_GetInactiveTicks, ReturnValue) == 0x000000, "Member 'CoreStatusEffectIcon_GetInactiveTicks::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStatusEffectWidget.GetStatusEffectMap
// 0x0050 (0x0050 - 0x0000)
struct CoreStatusEffectWidget_GetStatusEffectMap final
{
public:
	TMap<class FName, class UCoreStatusEffectIcon*> ReturnValue;                                     // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStatusEffectWidget_GetStatusEffectMap) == 0x000008, "Wrong alignment on CoreStatusEffectWidget_GetStatusEffectMap");
static_assert(sizeof(CoreStatusEffectWidget_GetStatusEffectMap) == 0x000050, "Wrong size on CoreStatusEffectWidget_GetStatusEffectMap");
static_assert(offsetof(CoreStatusEffectWidget_GetStatusEffectMap, ReturnValue) == 0x000000, "Member 'CoreStatusEffectWidget_GetStatusEffectMap::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCategoryWidget.SetData
// 0x0060 (0x0060 - 0x0000)
struct CoreStoreCategoryWidget_SetData final
{
public:
	struct FStoreCategoryViewData                 Data;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCategoryWidget_SetData) == 0x000008, "Wrong alignment on CoreStoreCategoryWidget_SetData");
static_assert(sizeof(CoreStoreCategoryWidget_SetData) == 0x000060, "Wrong size on CoreStoreCategoryWidget_SetData");
static_assert(offsetof(CoreStoreCategoryWidget_SetData, Data) == 0x000000, "Member 'CoreStoreCategoryWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharacterItemWidget.SetStoreCharacterItemData
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharacterItemWidget_SetStoreCharacterItemData final
{
public:
	class UStoreCharacterItemViewData*            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharacterItemWidget_SetStoreCharacterItemData) == 0x000008, "Wrong alignment on CoreStoreCharacterItemWidget_SetStoreCharacterItemData");
static_assert(sizeof(CoreStoreCharacterItemWidget_SetStoreCharacterItemData) == 0x000008, "Wrong size on CoreStoreCharacterItemWidget_SetStoreCharacterItemData");
static_assert(offsetof(CoreStoreCharacterItemWidget_SetStoreCharacterItemData, Data) == 0x000000, "Member 'CoreStoreCharacterItemWidget_SetStoreCharacterItemData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersBioWidget.SetRightStickMode
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreCharactersBioWidget_SetRightStickMode final
{
public:
	ERightStickMode                               rightStickMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersBioWidget_SetRightStickMode) == 0x000001, "Wrong alignment on CoreStoreCharactersBioWidget_SetRightStickMode");
static_assert(sizeof(CoreStoreCharactersBioWidget_SetRightStickMode) == 0x000001, "Wrong size on CoreStoreCharactersBioWidget_SetRightStickMode");
static_assert(offsetof(CoreStoreCharactersBioWidget_SetRightStickMode, rightStickMode) == 0x000000, "Member 'CoreStoreCharactersBioWidget_SetRightStickMode::rightStickMode' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersBioWidget.GetCharacterBioScrollBox
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersBioWidget_GetCharacterBioScrollBox final
{
public:
	class UDBDScrollBox*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersBioWidget_GetCharacterBioScrollBox) == 0x000008, "Wrong alignment on CoreStoreCharactersBioWidget_GetCharacterBioScrollBox");
static_assert(sizeof(CoreStoreCharactersBioWidget_GetCharacterBioScrollBox) == 0x000008, "Wrong size on CoreStoreCharactersBioWidget_GetCharacterBioScrollBox");
static_assert(offsetof(CoreStoreCharactersBioWidget_GetCharacterBioScrollBox, ReturnValue) == 0x000000, "Member 'CoreStoreCharactersBioWidget_GetCharacterBioScrollBox::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersBioWidget.GetRightStickMode
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreCharactersBioWidget_GetRightStickMode final
{
public:
	ERightStickMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersBioWidget_GetRightStickMode) == 0x000001, "Wrong alignment on CoreStoreCharactersBioWidget_GetRightStickMode");
static_assert(sizeof(CoreStoreCharactersBioWidget_GetRightStickMode) == 0x000001, "Wrong size on CoreStoreCharactersBioWidget_GetRightStickMode");
static_assert(offsetof(CoreStoreCharactersBioWidget_GetRightStickMode, ReturnValue) == 0x000000, "Member 'CoreStoreCharactersBioWidget_GetRightStickMode::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersFilterWidget.OnClearFiltersClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersFilterWidget_OnClearFiltersClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersFilterWidget_OnClearFiltersClicked) == 0x000008, "Wrong alignment on CoreStoreCharactersFilterWidget_OnClearFiltersClicked");
static_assert(sizeof(CoreStoreCharactersFilterWidget_OnClearFiltersClicked) == 0x000008, "Wrong size on CoreStoreCharactersFilterWidget_OnClearFiltersClicked");
static_assert(offsetof(CoreStoreCharactersFilterWidget_OnClearFiltersClicked, buttonTarget) == 0x000000, "Member 'CoreStoreCharactersFilterWidget_OnClearFiltersClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersFilterWidget.OverrideDefaultFiltersAndSortingParams
// 0x000C (0x000C - 0x0000)
struct CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams final
{
public:
	bool                                          defaultFilterAvailable;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          defaultFilterOwned;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         sortingOptions;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESortingOption                                defaultSortingOption;                              // 0x0008(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESortingOrder                                 defaultSortingOrder;                               // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams) == 0x000004, "Wrong alignment on CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams");
static_assert(sizeof(CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams) == 0x00000C, "Wrong size on CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams");
static_assert(offsetof(CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams, defaultFilterAvailable) == 0x000000, "Member 'CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams::defaultFilterAvailable' has a wrong offset!");
static_assert(offsetof(CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams, defaultFilterOwned) == 0x000001, "Member 'CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams::defaultFilterOwned' has a wrong offset!");
static_assert(offsetof(CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams, sortingOptions) == 0x000004, "Member 'CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams::sortingOptions' has a wrong offset!");
static_assert(offsetof(CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams, defaultSortingOption) == 0x000008, "Member 'CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams::defaultSortingOption' has a wrong offset!");
static_assert(offsetof(CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams, defaultSortingOrder) == 0x00000A, "Member 'CoreStoreCharactersFilterWidget_OverrideDefaultFiltersAndSortingParams::defaultSortingOrder' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersFilterWidget.GetCurrentFiltersData
// 0x0060 (0x0060 - 0x0000)
struct CoreStoreCharactersFilterWidget_GetCurrentFiltersData final
{
public:
	struct FStoreCharactersFiltersData            ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersFilterWidget_GetCurrentFiltersData) == 0x000008, "Wrong alignment on CoreStoreCharactersFilterWidget_GetCurrentFiltersData");
static_assert(sizeof(CoreStoreCharactersFilterWidget_GetCurrentFiltersData) == 0x000060, "Wrong size on CoreStoreCharactersFilterWidget_GetCurrentFiltersData");
static_assert(offsetof(CoreStoreCharactersFilterWidget_GetCurrentFiltersData, ReturnValue) == 0x000000, "Member 'CoreStoreCharactersFilterWidget_GetCurrentFiltersData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersWidget.SetToggleableWidgetPromptController
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersWidget_SetToggleableWidgetPromptController final
{
public:
	class UToggleableWidgetPromptController*      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersWidget_SetToggleableWidgetPromptController) == 0x000008, "Wrong alignment on CoreStoreCharactersWidget_SetToggleableWidgetPromptController");
static_assert(sizeof(CoreStoreCharactersWidget_SetToggleableWidgetPromptController) == 0x000008, "Wrong size on CoreStoreCharactersWidget_SetToggleableWidgetPromptController");
static_assert(offsetof(CoreStoreCharactersWidget_SetToggleableWidgetPromptController, Controller) == 0x000000, "Member 'CoreStoreCharactersWidget_SetToggleableWidgetPromptController::Controller' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersWidget.GetBioTab
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersWidget_GetBioTab final
{
public:
	class UCoreStoreCharactersBioWidget*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersWidget_GetBioTab) == 0x000008, "Wrong alignment on CoreStoreCharactersWidget_GetBioTab");
static_assert(sizeof(CoreStoreCharactersWidget_GetBioTab) == 0x000008, "Wrong size on CoreStoreCharactersWidget_GetBioTab");
static_assert(offsetof(CoreStoreCharactersWidget_GetBioTab, ReturnValue) == 0x000000, "Member 'CoreStoreCharactersWidget_GetBioTab::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersWidget.GetCustomizationsTab
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersWidget_GetCustomizationsTab final
{
public:
	class UCoreStoreCharactersCustomizationsWidget* ReturnValue;                                     // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersWidget_GetCustomizationsTab) == 0x000008, "Wrong alignment on CoreStoreCharactersWidget_GetCustomizationsTab");
static_assert(sizeof(CoreStoreCharactersWidget_GetCustomizationsTab) == 0x000008, "Wrong size on CoreStoreCharactersWidget_GetCustomizationsTab");
static_assert(offsetof(CoreStoreCharactersWidget_GetCustomizationsTab, ReturnValue) == 0x000000, "Member 'CoreStoreCharactersWidget_GetCustomizationsTab::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersWidget.GetSelectionTab
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersWidget_GetSelectionTab final
{
public:
	class UCoreStoreCharactersSelectionWidget*    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersWidget_GetSelectionTab) == 0x000008, "Wrong alignment on CoreStoreCharactersWidget_GetSelectionTab");
static_assert(sizeof(CoreStoreCharactersWidget_GetSelectionTab) == 0x000008, "Wrong size on CoreStoreCharactersWidget_GetSelectionTab");
static_assert(offsetof(CoreStoreCharactersWidget_GetSelectionTab, ReturnValue) == 0x000000, "Member 'CoreStoreCharactersWidget_GetSelectionTab::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharactersWidget.GetToggleableWidgetPromptController
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCharactersWidget_GetToggleableWidgetPromptController final
{
public:
	class UToggleableWidgetPromptController*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharactersWidget_GetToggleableWidgetPromptController) == 0x000008, "Wrong alignment on CoreStoreCharactersWidget_GetToggleableWidgetPromptController");
static_assert(sizeof(CoreStoreCharactersWidget_GetToggleableWidgetPromptController) == 0x000008, "Wrong size on CoreStoreCharactersWidget_GetToggleableWidgetPromptController");
static_assert(offsetof(CoreStoreCharactersWidget_GetToggleableWidgetPromptController, ReturnValue) == 0x000000, "Member 'CoreStoreCharactersWidget_GetToggleableWidgetPromptController::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharmSlotWidget.OnButtonSelectedChanged
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreCharmSlotWidget_OnButtonSelectedChanged final
{
public:
	class UCoreSelectableButtonWidget*            targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected_0;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreCharmSlotWidget_OnButtonSelectedChanged) == 0x000008, "Wrong alignment on CoreStoreCharmSlotWidget_OnButtonSelectedChanged");
static_assert(sizeof(CoreStoreCharmSlotWidget_OnButtonSelectedChanged) == 0x000010, "Wrong size on CoreStoreCharmSlotWidget_OnButtonSelectedChanged");
static_assert(offsetof(CoreStoreCharmSlotWidget_OnButtonSelectedChanged, targetButton) == 0x000000, "Member 'CoreStoreCharmSlotWidget_OnButtonSelectedChanged::targetButton' has a wrong offset!");
static_assert(offsetof(CoreStoreCharmSlotWidget_OnButtonSelectedChanged, IsSelected_0) == 0x000008, "Member 'CoreStoreCharmSlotWidget_OnButtonSelectedChanged::IsSelected_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharmSlotWidget.SetEmptyCharmSlotData
// 0x0004 (0x0004 - 0x0000)
struct CoreStoreCharmSlotWidget_SetEmptyCharmSlotData final
{
public:
	int32                                         slotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharmSlotWidget_SetEmptyCharmSlotData) == 0x000004, "Wrong alignment on CoreStoreCharmSlotWidget_SetEmptyCharmSlotData");
static_assert(sizeof(CoreStoreCharmSlotWidget_SetEmptyCharmSlotData) == 0x000004, "Wrong size on CoreStoreCharmSlotWidget_SetEmptyCharmSlotData");
static_assert(offsetof(CoreStoreCharmSlotWidget_SetEmptyCharmSlotData, slotIndex) == 0x000000, "Member 'CoreStoreCharmSlotWidget_SetEmptyCharmSlotData::slotIndex' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCharmSlotWidget.SetSelectedCharmSlotData
// 0x0248 (0x0248 - 0x0000)
struct CoreStoreCharmSlotWidget_SetSelectedCharmSlotData final
{
public:
	int32                                         slotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomizationRewardViewData           charmSlotData;                                     // 0x0008(0x0240)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCharmSlotWidget_SetSelectedCharmSlotData) == 0x000008, "Wrong alignment on CoreStoreCharmSlotWidget_SetSelectedCharmSlotData");
static_assert(sizeof(CoreStoreCharmSlotWidget_SetSelectedCharmSlotData) == 0x000248, "Wrong size on CoreStoreCharmSlotWidget_SetSelectedCharmSlotData");
static_assert(offsetof(CoreStoreCharmSlotWidget_SetSelectedCharmSlotData, slotIndex) == 0x000000, "Member 'CoreStoreCharmSlotWidget_SetSelectedCharmSlotData::slotIndex' has a wrong offset!");
static_assert(offsetof(CoreStoreCharmSlotWidget_SetSelectedCharmSlotData, charmSlotData) == 0x000008, "Member 'CoreStoreCharmSlotWidget_SetSelectedCharmSlotData::charmSlotData' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCollectionsItemWidget.GetStoreCollectionViewData
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCollectionsItemWidget_GetStoreCollectionViewData final
{
public:
	class UStoreCollectionViewData*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCollectionsItemWidget_GetStoreCollectionViewData) == 0x000008, "Wrong alignment on CoreStoreCollectionsItemWidget_GetStoreCollectionViewData");
static_assert(sizeof(CoreStoreCollectionsItemWidget_GetStoreCollectionViewData) == 0x000008, "Wrong size on CoreStoreCollectionsItemWidget_GetStoreCollectionViewData");
static_assert(offsetof(CoreStoreCollectionsItemWidget_GetStoreCollectionViewData, ReturnValue) == 0x000000, "Member 'CoreStoreCollectionsItemWidget_GetStoreCollectionViewData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCollectionsItemWidget.SetData
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreCollectionsItemWidget_SetData final
{
public:
	class UStoreCollectionViewData*               CollectionViewData;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollectionItemScaleType                      collectionItemScale;                               // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreCollectionsItemWidget_SetData) == 0x000008, "Wrong alignment on CoreStoreCollectionsItemWidget_SetData");
static_assert(sizeof(CoreStoreCollectionsItemWidget_SetData) == 0x000010, "Wrong size on CoreStoreCollectionsItemWidget_SetData");
static_assert(offsetof(CoreStoreCollectionsItemWidget_SetData, CollectionViewData) == 0x000000, "Member 'CoreStoreCollectionsItemWidget_SetData::CollectionViewData' has a wrong offset!");
static_assert(offsetof(CoreStoreCollectionsItemWidget_SetData, collectionItemScale) == 0x000008, "Member 'CoreStoreCollectionsItemWidget_SetData::collectionItemScale' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCollectionsItemWidget.SetupVisuals
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreCollectionsItemWidget_SetupVisuals final
{
public:
	class UStoreCollectionViewData*               CollectionViewData;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollectionItemScaleType                      collectionItemScale;                               // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoreCollectionsItemWidget_SetupVisuals) == 0x000008, "Wrong alignment on CoreStoreCollectionsItemWidget_SetupVisuals");
static_assert(sizeof(CoreStoreCollectionsItemWidget_SetupVisuals) == 0x000010, "Wrong size on CoreStoreCollectionsItemWidget_SetupVisuals");
static_assert(offsetof(CoreStoreCollectionsItemWidget_SetupVisuals, CollectionViewData) == 0x000000, "Member 'CoreStoreCollectionsItemWidget_SetupVisuals::CollectionViewData' has a wrong offset!");
static_assert(offsetof(CoreStoreCollectionsItemWidget_SetupVisuals, collectionItemScale) == 0x000008, "Member 'CoreStoreCollectionsItemWidget_SetupVisuals::collectionItemScale' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCollectionsWidget.SetToggleableWidgetPromptController
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCollectionsWidget_SetToggleableWidgetPromptController final
{
public:
	class UToggleableWidgetPromptController*      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCollectionsWidget_SetToggleableWidgetPromptController) == 0x000008, "Wrong alignment on CoreStoreCollectionsWidget_SetToggleableWidgetPromptController");
static_assert(sizeof(CoreStoreCollectionsWidget_SetToggleableWidgetPromptController) == 0x000008, "Wrong size on CoreStoreCollectionsWidget_SetToggleableWidgetPromptController");
static_assert(offsetof(CoreStoreCollectionsWidget_SetToggleableWidgetPromptController, Controller) == 0x000000, "Member 'CoreStoreCollectionsWidget_SetToggleableWidgetPromptController::Controller' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCollectionsWidget.GetCollectionsCustomizations
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCollectionsWidget_GetCollectionsCustomizations final
{
public:
	class UCoreStoreCollectionsCustomizationsWidget* ReturnValue;                                    // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCollectionsWidget_GetCollectionsCustomizations) == 0x000008, "Wrong alignment on CoreStoreCollectionsWidget_GetCollectionsCustomizations");
static_assert(sizeof(CoreStoreCollectionsWidget_GetCollectionsCustomizations) == 0x000008, "Wrong size on CoreStoreCollectionsWidget_GetCollectionsCustomizations");
static_assert(offsetof(CoreStoreCollectionsWidget_GetCollectionsCustomizations, ReturnValue) == 0x000000, "Member 'CoreStoreCollectionsWidget_GetCollectionsCustomizations::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCollectionsWidget.GetCollectionsList
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCollectionsWidget_GetCollectionsList final
{
public:
	class UCoreStoreCollectionsListWidget*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCollectionsWidget_GetCollectionsList) == 0x000008, "Wrong alignment on CoreStoreCollectionsWidget_GetCollectionsList");
static_assert(sizeof(CoreStoreCollectionsWidget_GetCollectionsList) == 0x000008, "Wrong size on CoreStoreCollectionsWidget_GetCollectionsList");
static_assert(offsetof(CoreStoreCollectionsWidget_GetCollectionsList, ReturnValue) == 0x000000, "Member 'CoreStoreCollectionsWidget_GetCollectionsList::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCollectionsWidget.GetToggleableWidgetPromptController
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCollectionsWidget_GetToggleableWidgetPromptController final
{
public:
	class UToggleableWidgetPromptController*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCollectionsWidget_GetToggleableWidgetPromptController) == 0x000008, "Wrong alignment on CoreStoreCollectionsWidget_GetToggleableWidgetPromptController");
static_assert(sizeof(CoreStoreCollectionsWidget_GetToggleableWidgetPromptController) == 0x000008, "Wrong size on CoreStoreCollectionsWidget_GetToggleableWidgetPromptController");
static_assert(offsetof(CoreStoreCollectionsWidget_GetToggleableWidgetPromptController, ReturnValue) == 0x000000, "Member 'CoreStoreCollectionsWidget_GetToggleableWidgetPromptController::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCustomizationItemWidget.GetRealSize
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreCustomizationItemWidget_GetRealSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCustomizationItemWidget_GetRealSize) == 0x000008, "Wrong alignment on CoreStoreCustomizationItemWidget_GetRealSize");
static_assert(sizeof(CoreStoreCustomizationItemWidget_GetRealSize) == 0x000010, "Wrong size on CoreStoreCustomizationItemWidget_GetRealSize");
static_assert(offsetof(CoreStoreCustomizationItemWidget_GetRealSize, ReturnValue) == 0x000000, "Member 'CoreStoreCustomizationItemWidget_GetRealSize::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCustomizationItemWidget.SetEquippedItem
// 0x0001 (0x0001 - 0x0000)
struct CoreStoreCustomizationItemWidget_SetEquippedItem final
{
public:
	bool                                          IsEquipped;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCustomizationItemWidget_SetEquippedItem) == 0x000001, "Wrong alignment on CoreStoreCustomizationItemWidget_SetEquippedItem");
static_assert(sizeof(CoreStoreCustomizationItemWidget_SetEquippedItem) == 0x000001, "Wrong size on CoreStoreCustomizationItemWidget_SetEquippedItem");
static_assert(offsetof(CoreStoreCustomizationItemWidget_SetEquippedItem, IsEquipped) == 0x000000, "Member 'CoreStoreCustomizationItemWidget_SetEquippedItem::IsEquipped' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCustomizationItemWidget.SetStoreCustomizationItemData
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreCustomizationItemWidget_SetStoreCustomizationItemData final
{
public:
	class UStoreCustomizationItemViewData*        Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCustomizationItemWidget_SetStoreCustomizationItemData) == 0x000008, "Wrong alignment on CoreStoreCustomizationItemWidget_SetStoreCustomizationItemData");
static_assert(sizeof(CoreStoreCustomizationItemWidget_SetStoreCustomizationItemData) == 0x000008, "Wrong size on CoreStoreCustomizationItemWidget_SetStoreCustomizationItemData");
static_assert(offsetof(CoreStoreCustomizationItemWidget_SetStoreCustomizationItemData, Data) == 0x000000, "Member 'CoreStoreCustomizationItemWidget_SetStoreCustomizationItemData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreCustomizationItemWidget.MakeStoreRedirectionData
// 0x0058 (0x0058 - 0x0000)
struct CoreStoreCustomizationItemWidget_MakeStoreRedirectionData final
{
public:
	struct FStoreRedirectionData                  ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreCustomizationItemWidget_MakeStoreRedirectionData) == 0x000008, "Wrong alignment on CoreStoreCustomizationItemWidget_MakeStoreRedirectionData");
static_assert(sizeof(CoreStoreCustomizationItemWidget_MakeStoreRedirectionData) == 0x000058, "Wrong size on CoreStoreCustomizationItemWidget_MakeStoreRedirectionData");
static_assert(offsetof(CoreStoreCustomizationItemWidget_MakeStoreRedirectionData, ReturnValue) == 0x000000, "Member 'CoreStoreCustomizationItemWidget_MakeStoreRedirectionData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCharacterWidget.GetCharacterViewData
// 0x0090 (0x0090 - 0x0000)
struct CoreStoreFeaturedCharacterWidget_GetCharacterViewData final
{
public:
	struct FStoreFeaturedCharacterViewData        ReturnValue;                                       // 0x0000(0x0090)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCharacterWidget_GetCharacterViewData) == 0x000008, "Wrong alignment on CoreStoreFeaturedCharacterWidget_GetCharacterViewData");
static_assert(sizeof(CoreStoreFeaturedCharacterWidget_GetCharacterViewData) == 0x000090, "Wrong size on CoreStoreFeaturedCharacterWidget_GetCharacterViewData");
static_assert(offsetof(CoreStoreFeaturedCharacterWidget_GetCharacterViewData, ReturnValue) == 0x000000, "Member 'CoreStoreFeaturedCharacterWidget_GetCharacterViewData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCharacterWidget.SetCharacterData
// 0x0090 (0x0090 - 0x0000)
struct CoreStoreFeaturedCharacterWidget_SetCharacterData final
{
public:
	struct FStoreFeaturedCharacterViewData        CharacterData;                                     // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCharacterWidget_SetCharacterData) == 0x000008, "Wrong alignment on CoreStoreFeaturedCharacterWidget_SetCharacterData");
static_assert(sizeof(CoreStoreFeaturedCharacterWidget_SetCharacterData) == 0x000090, "Wrong size on CoreStoreFeaturedCharacterWidget_SetCharacterData");
static_assert(offsetof(CoreStoreFeaturedCharacterWidget_SetCharacterData, CharacterData) == 0x000000, "Member 'CoreStoreFeaturedCharacterWidget_SetCharacterData::CharacterData' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.OnItemHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedCustomizationItemContainerWidget_OnItemHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemContainerWidget_OnItemHovered) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemContainerWidget_OnItemHovered");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemContainerWidget_OnItemHovered) == 0x000008, "Wrong size on CoreStoreFeaturedCustomizationItemContainerWidget_OnItemHovered");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemContainerWidget_OnItemHovered, buttonTarget) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemContainerWidget_OnItemHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.OnItemUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedCustomizationItemContainerWidget_OnItemUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemContainerWidget_OnItemUnhovered) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemContainerWidget_OnItemUnhovered");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemContainerWidget_OnItemUnhovered) == 0x000008, "Wrong size on CoreStoreFeaturedCustomizationItemContainerWidget_OnItemUnhovered");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemContainerWidget_OnItemUnhovered, buttonTarget) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemContainerWidget_OnItemUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.OnSelectedItemAgain
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemAgain final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemAgain) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemAgain");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemAgain) == 0x000008, "Wrong size on CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemAgain");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemAgain, selectedButton) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemAgain::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.OnSelectedItemChanged
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemChanged final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemChanged) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemChanged");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemChanged) == 0x000008, "Wrong size on CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemChanged");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemChanged, selectedButton) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemContainerWidget_OnSelectedItemChanged::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget.SetItems
// 0x0010 (0x0010 - 0x0000)
struct CoreStoreFeaturedCustomizationItemContainerWidget_SetItems final
{
public:
	TArray<struct FStoreContentViewData>          viewDataArray;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedCustomizationItemContainerWidget_SetItems) == 0x000008, "Wrong alignment on CoreStoreFeaturedCustomizationItemContainerWidget_SetItems");
static_assert(sizeof(CoreStoreFeaturedCustomizationItemContainerWidget_SetItems) == 0x000010, "Wrong size on CoreStoreFeaturedCustomizationItemContainerWidget_SetItems");
static_assert(offsetof(CoreStoreFeaturedCustomizationItemContainerWidget_SetItems, viewDataArray) == 0x000000, "Member 'CoreStoreFeaturedCustomizationItemContainerWidget_SetItems::viewDataArray' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedMysteryBoxWidget.OnClaimButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreFeaturedMysteryBoxWidget_OnClaimButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedMysteryBoxWidget_OnClaimButtonClicked) == 0x000008, "Wrong alignment on CoreStoreFeaturedMysteryBoxWidget_OnClaimButtonClicked");
static_assert(sizeof(CoreStoreFeaturedMysteryBoxWidget_OnClaimButtonClicked) == 0x000008, "Wrong size on CoreStoreFeaturedMysteryBoxWidget_OnClaimButtonClicked");
static_assert(offsetof(CoreStoreFeaturedMysteryBoxWidget_OnClaimButtonClicked, buttonTarget) == 0x000000, "Member 'CoreStoreFeaturedMysteryBoxWidget_OnClaimButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedMysteryBoxWidget.SetData
// 0x0028 (0x0028 - 0x0000)
struct CoreStoreFeaturedMysteryBoxWidget_SetData final
{
public:
	struct FStoreMysteryBoxViewData               ViewData;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedMysteryBoxWidget_SetData) == 0x000008, "Wrong alignment on CoreStoreFeaturedMysteryBoxWidget_SetData");
static_assert(sizeof(CoreStoreFeaturedMysteryBoxWidget_SetData) == 0x000028, "Wrong size on CoreStoreFeaturedMysteryBoxWidget_SetData");
static_assert(offsetof(CoreStoreFeaturedMysteryBoxWidget_SetData, ViewData) == 0x000000, "Member 'CoreStoreFeaturedMysteryBoxWidget_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreFeaturedMysteryBoxWidget.GetMysteryBoxViewData
// 0x0028 (0x0028 - 0x0000)
struct CoreStoreFeaturedMysteryBoxWidget_GetMysteryBoxViewData final
{
public:
	struct FStoreMysteryBoxViewData               ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreFeaturedMysteryBoxWidget_GetMysteryBoxViewData) == 0x000008, "Wrong alignment on CoreStoreFeaturedMysteryBoxWidget_GetMysteryBoxViewData");
static_assert(sizeof(CoreStoreFeaturedMysteryBoxWidget_GetMysteryBoxViewData) == 0x000028, "Wrong size on CoreStoreFeaturedMysteryBoxWidget_GetMysteryBoxViewData");
static_assert(offsetof(CoreStoreFeaturedMysteryBoxWidget_GetMysteryBoxViewData, ReturnValue) == 0x000000, "Member 'CoreStoreFeaturedMysteryBoxWidget_GetMysteryBoxViewData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreItemAvailabilityBannerWidget.OnAvailabilityBannerClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreItemAvailabilityBannerWidget_OnAvailabilityBannerClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreItemAvailabilityBannerWidget_OnAvailabilityBannerClicked) == 0x000008, "Wrong alignment on CoreStoreItemAvailabilityBannerWidget_OnAvailabilityBannerClicked");
static_assert(sizeof(CoreStoreItemAvailabilityBannerWidget_OnAvailabilityBannerClicked) == 0x000008, "Wrong size on CoreStoreItemAvailabilityBannerWidget_OnAvailabilityBannerClicked");
static_assert(offsetof(CoreStoreItemAvailabilityBannerWidget_OnAvailabilityBannerClicked, buttonTarget) == 0x000000, "Member 'CoreStoreItemAvailabilityBannerWidget_OnAvailabilityBannerClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreRiftTierItemWidget.OnButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreRiftTierItemWidget_OnButtonHovered final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreRiftTierItemWidget_OnButtonHovered) == 0x000008, "Wrong alignment on CoreStoreRiftTierItemWidget_OnButtonHovered");
static_assert(sizeof(CoreStoreRiftTierItemWidget_OnButtonHovered) == 0x000008, "Wrong size on CoreStoreRiftTierItemWidget_OnButtonHovered");
static_assert(offsetof(CoreStoreRiftTierItemWidget_OnButtonHovered, targetButton) == 0x000000, "Member 'CoreStoreRiftTierItemWidget_OnButtonHovered::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreRiftTierItemWidget.OnButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreRiftTierItemWidget_OnButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreRiftTierItemWidget_OnButtonUnhovered) == 0x000008, "Wrong alignment on CoreStoreRiftTierItemWidget_OnButtonUnhovered");
static_assert(sizeof(CoreStoreRiftTierItemWidget_OnButtonUnhovered) == 0x000008, "Wrong size on CoreStoreRiftTierItemWidget_OnButtonUnhovered");
static_assert(offsetof(CoreStoreRiftTierItemWidget_OnButtonUnhovered, targetButton) == 0x000000, "Member 'CoreStoreRiftTierItemWidget_OnButtonUnhovered::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreRiftTierItemWidget.SetData
// 0x0158 (0x0158 - 0x0000)
struct CoreStoreRiftTierItemWidget_SetData final
{
public:
	struct FStoreRiftTierViewData                 Data;                                              // 0x0000(0x0158)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreRiftTierItemWidget_SetData) == 0x000008, "Wrong alignment on CoreStoreRiftTierItemWidget_SetData");
static_assert(sizeof(CoreStoreRiftTierItemWidget_SetData) == 0x000158, "Wrong size on CoreStoreRiftTierItemWidget_SetData");
static_assert(offsetof(CoreStoreRiftTierItemWidget_SetData, Data) == 0x000000, "Member 'CoreStoreRiftTierItemWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreSpecialPacksListWidget.OnItemClicked
// 0x01A8 (0x01A8 - 0x0000)
struct CoreStoreSpecialPacksListWidget_OnItemClicked final
{
public:
	struct FStoreContentViewData                  contentViewData;                                   // 0x0000(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreSpecialPacksListWidget_OnItemClicked) == 0x000008, "Wrong alignment on CoreStoreSpecialPacksListWidget_OnItemClicked");
static_assert(sizeof(CoreStoreSpecialPacksListWidget_OnItemClicked) == 0x0001A8, "Wrong size on CoreStoreSpecialPacksListWidget_OnItemClicked");
static_assert(offsetof(CoreStoreSpecialPacksListWidget_OnItemClicked, contentViewData) == 0x000000, "Member 'CoreStoreSpecialPacksListWidget_OnItemClicked::contentViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreSpecialsWidget.OnArchivePassBannerClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreSpecialsWidget_OnArchivePassBannerClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreSpecialsWidget_OnArchivePassBannerClicked) == 0x000008, "Wrong alignment on CoreStoreSpecialsWidget_OnArchivePassBannerClicked");
static_assert(sizeof(CoreStoreSpecialsWidget_OnArchivePassBannerClicked) == 0x000008, "Wrong size on CoreStoreSpecialsWidget_OnArchivePassBannerClicked");
static_assert(offsetof(CoreStoreSpecialsWidget_OnArchivePassBannerClicked, buttonTarget) == 0x000000, "Member 'CoreStoreSpecialsWidget_OnArchivePassBannerClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoreSpecialsWidget.OnSpecialItemClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreStoreSpecialsWidget_OnSpecialItemClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoreSpecialsWidget_OnSpecialItemClicked) == 0x000008, "Wrong alignment on CoreStoreSpecialsWidget_OnSpecialItemClicked");
static_assert(sizeof(CoreStoreSpecialsWidget_OnSpecialItemClicked) == 0x000008, "Wrong size on CoreStoreSpecialsWidget_OnSpecialItemClicked");
static_assert(offsetof(CoreStoreSpecialsWidget_OnSpecialItemClicked, buttonTarget) == 0x000000, "Member 'CoreStoreSpecialsWidget_OnSpecialItemClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.SetData
// 0x0010 (0x0010 - 0x0000)
struct CoreStoryLevelButtonWidget_SetData final
{
public:
	const class UArchiveStoryLevelViewData*       ViewData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSelectorReadOnly;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoryLevelButtonWidget_SetData) == 0x000008, "Wrong alignment on CoreStoryLevelButtonWidget_SetData");
static_assert(sizeof(CoreStoryLevelButtonWidget_SetData) == 0x000010, "Wrong size on CoreStoryLevelButtonWidget_SetData");
static_assert(offsetof(CoreStoryLevelButtonWidget_SetData, ViewData) == 0x000000, "Member 'CoreStoryLevelButtonWidget_SetData::ViewData' has a wrong offset!");
static_assert(offsetof(CoreStoryLevelButtonWidget_SetData, isSelectorReadOnly) == 0x000008, "Member 'CoreStoryLevelButtonWidget_SetData::isSelectorReadOnly' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateStatusData
// 0x0002 (0x0002 - 0x0000)
struct CoreStoryLevelButtonWidget_UpdateStatusData final
{
public:
	EArchivesStoryLevelStatus                     newStatus;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSelectorReadOnly;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelButtonWidget_UpdateStatusData) == 0x000001, "Wrong alignment on CoreStoryLevelButtonWidget_UpdateStatusData");
static_assert(sizeof(CoreStoryLevelButtonWidget_UpdateStatusData) == 0x000002, "Wrong size on CoreStoryLevelButtonWidget_UpdateStatusData");
static_assert(offsetof(CoreStoryLevelButtonWidget_UpdateStatusData, newStatus) == 0x000000, "Member 'CoreStoryLevelButtonWidget_UpdateStatusData::newStatus' has a wrong offset!");
static_assert(offsetof(CoreStoryLevelButtonWidget_UpdateStatusData, isSelectorReadOnly) == 0x000001, "Member 'CoreStoryLevelButtonWidget_UpdateStatusData::isSelectorReadOnly' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateVisual
// 0x0010 (0x0010 - 0x0000)
struct CoreStoryLevelButtonWidget_UpdateVisual final
{
public:
	const class UArchiveStoryLevelViewData*       ViewData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          newlyUnlocked;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoryLevelButtonWidget_UpdateVisual) == 0x000008, "Wrong alignment on CoreStoryLevelButtonWidget_UpdateVisual");
static_assert(sizeof(CoreStoryLevelButtonWidget_UpdateVisual) == 0x000010, "Wrong size on CoreStoryLevelButtonWidget_UpdateVisual");
static_assert(offsetof(CoreStoryLevelButtonWidget_UpdateVisual, ViewData) == 0x000000, "Member 'CoreStoryLevelButtonWidget_UpdateVisual::ViewData' has a wrong offset!");
static_assert(offsetof(CoreStoryLevelButtonWidget_UpdateVisual, newlyUnlocked) == 0x000008, "Member 'CoreStoryLevelButtonWidget_UpdateVisual::newlyUnlocked' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateVisualStatus
// 0x0002 (0x0002 - 0x0000)
struct CoreStoryLevelButtonWidget_UpdateVisualStatus final
{
public:
	EArchivesStoryLevelStatus                     newStatus;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          newlyUnlocked;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelButtonWidget_UpdateVisualStatus) == 0x000001, "Wrong alignment on CoreStoryLevelButtonWidget_UpdateVisualStatus");
static_assert(sizeof(CoreStoryLevelButtonWidget_UpdateVisualStatus) == 0x000002, "Wrong size on CoreStoryLevelButtonWidget_UpdateVisualStatus");
static_assert(offsetof(CoreStoryLevelButtonWidget_UpdateVisualStatus, newStatus) == 0x000000, "Member 'CoreStoryLevelButtonWidget_UpdateVisualStatus::newStatus' has a wrong offset!");
static_assert(offsetof(CoreStoryLevelButtonWidget_UpdateVisualStatus, newlyUnlocked) == 0x000001, "Member 'CoreStoryLevelButtonWidget_UpdateVisualStatus::newlyUnlocked' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct CoreStoryLevelButtonWidget_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelButtonWidget_GetLevel) == 0x000004, "Wrong alignment on CoreStoryLevelButtonWidget_GetLevel");
static_assert(sizeof(CoreStoryLevelButtonWidget_GetLevel) == 0x000004, "Wrong size on CoreStoryLevelButtonWidget_GetLevel");
static_assert(offsetof(CoreStoryLevelButtonWidget_GetLevel, ReturnValue) == 0x000000, "Member 'CoreStoryLevelButtonWidget_GetLevel::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.AdaptButtonsPoolToData
// 0x0004 (0x0004 - 0x0000)
struct CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData final
{
public:
	int32                                         dataNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData) == 0x000004, "Wrong alignment on CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData");
static_assert(sizeof(CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData) == 0x000004, "Wrong size on CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData, dataNumber) == 0x000000, "Member 'CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData::dataNumber' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.SetData
// 0x0010 (0x0010 - 0x0000)
struct CoreStoryLevelsSelectorWidget_SetData final
{
public:
	TArray<class UArchiveStoryLevelViewData*>     levelbuttonsData;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelsSelectorWidget_SetData) == 0x000008, "Wrong alignment on CoreStoryLevelsSelectorWidget_SetData");
static_assert(sizeof(CoreStoryLevelsSelectorWidget_SetData) == 0x000010, "Wrong size on CoreStoryLevelsSelectorWidget_SetData");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_SetData, levelbuttonsData) == 0x000000, "Member 'CoreStoryLevelsSelectorWidget_SetData::levelbuttonsData' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreStoryLevelsSelectorWidget_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelsSelectorWidget_SetEnabled) == 0x000001, "Wrong alignment on CoreStoryLevelsSelectorWidget_SetEnabled");
static_assert(sizeof(CoreStoryLevelsSelectorWidget_SetEnabled) == 0x000001, "Wrong size on CoreStoryLevelsSelectorWidget_SetEnabled");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_SetEnabled, Enabled) == 0x000000, "Member 'CoreStoryLevelsSelectorWidget_SetEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.UpdateLevelStatus
// 0x0008 (0x0008 - 0x0000)
struct CoreStoryLevelsSelectorWidget_UpdateLevelStatus final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArchivesStoryLevelStatus                     status;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoryLevelsSelectorWidget_UpdateLevelStatus) == 0x000004, "Wrong alignment on CoreStoryLevelsSelectorWidget_UpdateLevelStatus");
static_assert(sizeof(CoreStoryLevelsSelectorWidget_UpdateLevelStatus) == 0x000008, "Wrong size on CoreStoryLevelsSelectorWidget_UpdateLevelStatus");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_UpdateLevelStatus, Level) == 0x000000, "Member 'CoreStoryLevelsSelectorWidget_UpdateLevelStatus::Level' has a wrong offset!");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_UpdateLevelStatus, status) == 0x000004, "Member 'CoreStoryLevelsSelectorWidget_UpdateLevelStatus::status' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.UpdateVisual
// 0x0002 (0x0002 - 0x0000)
struct CoreStoryLevelsSelectorWidget_UpdateVisual final
{
public:
	EArchivesStoryLevelStatus                     globalStatus;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayAnimation_0;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelsSelectorWidget_UpdateVisual) == 0x000001, "Wrong alignment on CoreStoryLevelsSelectorWidget_UpdateVisual");
static_assert(sizeof(CoreStoryLevelsSelectorWidget_UpdateVisual) == 0x000002, "Wrong size on CoreStoryLevelsSelectorWidget_UpdateVisual");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_UpdateVisual, globalStatus) == 0x000000, "Member 'CoreStoryLevelsSelectorWidget_UpdateVisual::globalStatus' has a wrong offset!");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_UpdateVisual, PlayAnimation_0) == 0x000001, "Member 'CoreStoryLevelsSelectorWidget_UpdateVisual::PlayAnimation_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.GetStoryLevelButton
// 0x0010 (0x0010 - 0x0000)
struct CoreStoryLevelsSelectorWidget_GetStoryLevelButton final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreStoryLevelButtonWidget*            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelsSelectorWidget_GetStoryLevelButton) == 0x000008, "Wrong alignment on CoreStoryLevelsSelectorWidget_GetStoryLevelButton");
static_assert(sizeof(CoreStoryLevelsSelectorWidget_GetStoryLevelButton) == 0x000010, "Wrong size on CoreStoryLevelsSelectorWidget_GetStoryLevelButton");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_GetStoryLevelButton, Level) == 0x000000, "Member 'CoreStoryLevelsSelectorWidget_GetStoryLevelButton::Level' has a wrong offset!");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_GetStoryLevelButton, ReturnValue) == 0x000008, "Member 'CoreStoryLevelsSelectorWidget_GetStoryLevelButton::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.HideLoadoutTooltip
// 0x0008 (0x0008 - 0x0000)
struct CoreTallyPlayerStatusWidget_HideLoadoutTooltip final
{
public:
	class UCoreButtonWidget*                      unhoveredSlotWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTallyPlayerStatusWidget_HideLoadoutTooltip) == 0x000008, "Wrong alignment on CoreTallyPlayerStatusWidget_HideLoadoutTooltip");
static_assert(sizeof(CoreTallyPlayerStatusWidget_HideLoadoutTooltip) == 0x000008, "Wrong size on CoreTallyPlayerStatusWidget_HideLoadoutTooltip");
static_assert(offsetof(CoreTallyPlayerStatusWidget_HideLoadoutTooltip, unhoveredSlotWidget) == 0x000000, "Member 'CoreTallyPlayerStatusWidget_HideLoadoutTooltip::unhoveredSlotWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.OnReportButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreTallyPlayerStatusWidget_OnReportButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTallyPlayerStatusWidget_OnReportButtonClicked) == 0x000008, "Wrong alignment on CoreTallyPlayerStatusWidget_OnReportButtonClicked");
static_assert(sizeof(CoreTallyPlayerStatusWidget_OnReportButtonClicked) == 0x000008, "Wrong size on CoreTallyPlayerStatusWidget_OnReportButtonClicked");
static_assert(offsetof(CoreTallyPlayerStatusWidget_OnReportButtonClicked, buttonTarget) == 0x000000, "Member 'CoreTallyPlayerStatusWidget_OnReportButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetAsReported
// 0x0001 (0x0001 - 0x0000)
struct CoreTallyPlayerStatusWidget_SetAsReported final
{
public:
	bool                                          IsReported;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTallyPlayerStatusWidget_SetAsReported) == 0x000001, "Wrong alignment on CoreTallyPlayerStatusWidget_SetAsReported");
static_assert(sizeof(CoreTallyPlayerStatusWidget_SetAsReported) == 0x000001, "Wrong size on CoreTallyPlayerStatusWidget_SetAsReported");
static_assert(offsetof(CoreTallyPlayerStatusWidget_SetAsReported, IsReported) == 0x000000, "Member 'CoreTallyPlayerStatusWidget_SetAsReported::IsReported' has a wrong offset!");

// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetData
// 0x0208 (0x0208 - 0x0000)
struct CoreTallyPlayerStatusWidget_SetData final
{
public:
	struct FTallyPlayerStatusViewData             ViewData;                                          // 0x0000(0x0200)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGameType                                     gameType;                                          // 0x0200(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isUsingCharacterClass;                             // 0x0201(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_202[0x6];                                      // 0x0202(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTallyPlayerStatusWidget_SetData) == 0x000008, "Wrong alignment on CoreTallyPlayerStatusWidget_SetData");
static_assert(sizeof(CoreTallyPlayerStatusWidget_SetData) == 0x000208, "Wrong size on CoreTallyPlayerStatusWidget_SetData");
static_assert(offsetof(CoreTallyPlayerStatusWidget_SetData, ViewData) == 0x000000, "Member 'CoreTallyPlayerStatusWidget_SetData::ViewData' has a wrong offset!");
static_assert(offsetof(CoreTallyPlayerStatusWidget_SetData, gameType) == 0x000200, "Member 'CoreTallyPlayerStatusWidget_SetData::gameType' has a wrong offset!");
static_assert(offsetof(CoreTallyPlayerStatusWidget_SetData, isUsingCharacterClass) == 0x000201, "Member 'CoreTallyPlayerStatusWidget_SetData::isUsingCharacterClass' has a wrong offset!");

// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetKillerLoadoutBlocked
// 0x0001 (0x0001 - 0x0000)
struct CoreTallyPlayerStatusWidget_SetKillerLoadoutBlocked final
{
public:
	bool                                          IsBlocked;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTallyPlayerStatusWidget_SetKillerLoadoutBlocked) == 0x000001, "Wrong alignment on CoreTallyPlayerStatusWidget_SetKillerLoadoutBlocked");
static_assert(sizeof(CoreTallyPlayerStatusWidget_SetKillerLoadoutBlocked) == 0x000001, "Wrong size on CoreTallyPlayerStatusWidget_SetKillerLoadoutBlocked");
static_assert(offsetof(CoreTallyPlayerStatusWidget_SetKillerLoadoutBlocked, IsBlocked) == 0x000000, "Member 'CoreTallyPlayerStatusWidget_SetKillerLoadoutBlocked::IsBlocked' has a wrong offset!");

// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetPlayerCardAnimation
// 0x0001 (0x0001 - 0x0000)
struct CoreTallyPlayerStatusWidget_SetPlayerCardAnimation final
{
public:
	bool                                          IsAnimationPlaying_0;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTallyPlayerStatusWidget_SetPlayerCardAnimation) == 0x000001, "Wrong alignment on CoreTallyPlayerStatusWidget_SetPlayerCardAnimation");
static_assert(sizeof(CoreTallyPlayerStatusWidget_SetPlayerCardAnimation) == 0x000001, "Wrong size on CoreTallyPlayerStatusWidget_SetPlayerCardAnimation");
static_assert(offsetof(CoreTallyPlayerStatusWidget_SetPlayerCardAnimation, IsAnimationPlaying_0) == 0x000000, "Member 'CoreTallyPlayerStatusWidget_SetPlayerCardAnimation::IsAnimationPlaying_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetPlayerCardAnimationMode
// 0x0001 (0x0001 - 0x0000)
struct CoreTallyPlayerStatusWidget_SetPlayerCardAnimationMode final
{
public:
	EPlayerCardAnimationMode                      PlayerCardAnimationMode;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTallyPlayerStatusWidget_SetPlayerCardAnimationMode) == 0x000001, "Wrong alignment on CoreTallyPlayerStatusWidget_SetPlayerCardAnimationMode");
static_assert(sizeof(CoreTallyPlayerStatusWidget_SetPlayerCardAnimationMode) == 0x000001, "Wrong size on CoreTallyPlayerStatusWidget_SetPlayerCardAnimationMode");
static_assert(offsetof(CoreTallyPlayerStatusWidget_SetPlayerCardAnimationMode, PlayerCardAnimationMode) == 0x000000, "Member 'CoreTallyPlayerStatusWidget_SetPlayerCardAnimationMode::PlayerCardAnimationMode' has a wrong offset!");

// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.SetReportButtonOpacity
// 0x0004 (0x0004 - 0x0000)
struct CoreTallyPlayerStatusWidget_SetReportButtonOpacity final
{
public:
	float                                         Opacity;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTallyPlayerStatusWidget_SetReportButtonOpacity) == 0x000004, "Wrong alignment on CoreTallyPlayerStatusWidget_SetReportButtonOpacity");
static_assert(sizeof(CoreTallyPlayerStatusWidget_SetReportButtonOpacity) == 0x000004, "Wrong size on CoreTallyPlayerStatusWidget_SetReportButtonOpacity");
static_assert(offsetof(CoreTallyPlayerStatusWidget_SetReportButtonOpacity, Opacity) == 0x000000, "Member 'CoreTallyPlayerStatusWidget_SetReportButtonOpacity::Opacity' has a wrong offset!");

// Function DBDUIViewsCore.CoreTallyPlayerStatusWidget.ShowLoadoutTooltip
// 0x0008 (0x0008 - 0x0000)
struct CoreTallyPlayerStatusWidget_ShowLoadoutTooltip final
{
public:
	class UCoreButtonWidget*                      hoveredSlotWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTallyPlayerStatusWidget_ShowLoadoutTooltip) == 0x000008, "Wrong alignment on CoreTallyPlayerStatusWidget_ShowLoadoutTooltip");
static_assert(sizeof(CoreTallyPlayerStatusWidget_ShowLoadoutTooltip) == 0x000008, "Wrong size on CoreTallyPlayerStatusWidget_ShowLoadoutTooltip");
static_assert(offsetof(CoreTallyPlayerStatusWidget_ShowLoadoutTooltip, hoveredSlotWidget) == 0x000000, "Member 'CoreTallyPlayerStatusWidget_ShowLoadoutTooltip::hoveredSlotWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreTallyScoreboardWidget.OnPlayerSocialOptionClicked
// 0x0048 (0x0048 - 0x0000)
struct CoreTallyScoreboardWidget_OnPlayerSocialOptionClicked final
{
public:
	struct FPlayerSocialOptionViewData            playerSocialOptionData;                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTallyScoreboardWidget_OnPlayerSocialOptionClicked) == 0x000008, "Wrong alignment on CoreTallyScoreboardWidget_OnPlayerSocialOptionClicked");
static_assert(sizeof(CoreTallyScoreboardWidget_OnPlayerSocialOptionClicked) == 0x000048, "Wrong size on CoreTallyScoreboardWidget_OnPlayerSocialOptionClicked");
static_assert(offsetof(CoreTallyScoreboardWidget_OnPlayerSocialOptionClicked, playerSocialOptionData) == 0x000000, "Member 'CoreTallyScoreboardWidget_OnPlayerSocialOptionClicked::playerSocialOptionData' has a wrong offset!");

// Function DBDUIViewsCore.CoreTallyScoreboardWidget.OnPlayerStatusClicked
// 0x0010 (0x0010 - 0x0000)
struct CoreTallyScoreboardWidget_OnPlayerStatusClicked final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTallyScoreboardWidget_OnPlayerStatusClicked) == 0x000008, "Wrong alignment on CoreTallyScoreboardWidget_OnPlayerStatusClicked");
static_assert(sizeof(CoreTallyScoreboardWidget_OnPlayerStatusClicked) == 0x000010, "Wrong size on CoreTallyScoreboardWidget_OnPlayerStatusClicked");
static_assert(offsetof(CoreTallyScoreboardWidget_OnPlayerStatusClicked, PlayerId) == 0x000000, "Member 'CoreTallyScoreboardWidget_OnPlayerStatusClicked::PlayerId' has a wrong offset!");

// Function DBDUIViewsCore.CoreTallyScoreboardWidget.OnReportButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct CoreTallyScoreboardWidget_OnReportButtonClicked final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTallyScoreboardWidget_OnReportButtonClicked) == 0x000008, "Wrong alignment on CoreTallyScoreboardWidget_OnReportButtonClicked");
static_assert(sizeof(CoreTallyScoreboardWidget_OnReportButtonClicked) == 0x000010, "Wrong size on CoreTallyScoreboardWidget_OnReportButtonClicked");
static_assert(offsetof(CoreTallyScoreboardWidget_OnReportButtonClicked, PlayerId) == 0x000000, "Member 'CoreTallyScoreboardWidget_OnReportButtonClicked::PlayerId' has a wrong offset!");

// Function DBDUIViewsCore.CoreTestBuildFlagWidget.UpdateTestFlagPosition
// 0x0001 (0x0001 - 0x0000)
struct CoreTestBuildFlagWidget_UpdateTestFlagPosition final
{
public:
	ETestBuildFlagPosition                        testBuildFlagPosition;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTestBuildFlagWidget_UpdateTestFlagPosition) == 0x000001, "Wrong alignment on CoreTestBuildFlagWidget_UpdateTestFlagPosition");
static_assert(sizeof(CoreTestBuildFlagWidget_UpdateTestFlagPosition) == 0x000001, "Wrong size on CoreTestBuildFlagWidget_UpdateTestFlagPosition");
static_assert(offsetof(CoreTestBuildFlagWidget_UpdateTestFlagPosition, testBuildFlagPosition) == 0x000000, "Member 'CoreTestBuildFlagWidget_UpdateTestFlagPosition::testBuildFlagPosition' has a wrong offset!");

// Function DBDUIViewsCore.CoreTimedEffectMeterWidget.SetVisualState
// 0x0001 (0x0001 - 0x0000)
struct CoreTimedEffectMeterWidget_SetVisualState final
{
public:
	ETimedEffectMeterState                        newState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTimedEffectMeterWidget_SetVisualState) == 0x000001, "Wrong alignment on CoreTimedEffectMeterWidget_SetVisualState");
static_assert(sizeof(CoreTimedEffectMeterWidget_SetVisualState) == 0x000001, "Wrong size on CoreTimedEffectMeterWidget_SetVisualState");
static_assert(offsetof(CoreTimedEffectMeterWidget_SetVisualState, newState) == 0x000000, "Member 'CoreTimedEffectMeterWidget_SetVisualState::newState' has a wrong offset!");

// Function DBDUIViewsCore.CoreTimedEffectMeterWidget.GetPreviousState
// 0x0001 (0x0001 - 0x0000)
struct CoreTimedEffectMeterWidget_GetPreviousState final
{
public:
	ETimedEffectMeterState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTimedEffectMeterWidget_GetPreviousState) == 0x000001, "Wrong alignment on CoreTimedEffectMeterWidget_GetPreviousState");
static_assert(sizeof(CoreTimedEffectMeterWidget_GetPreviousState) == 0x000001, "Wrong size on CoreTimedEffectMeterWidget_GetPreviousState");
static_assert(offsetof(CoreTimedEffectMeterWidget_GetPreviousState, ReturnValue) == 0x000000, "Member 'CoreTimedEffectMeterWidget_GetPreviousState::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreTimedEffectMeterWidget.GetProgress
// 0x0004 (0x0004 - 0x0000)
struct CoreTimedEffectMeterWidget_GetProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTimedEffectMeterWidget_GetProgress) == 0x000004, "Wrong alignment on CoreTimedEffectMeterWidget_GetProgress");
static_assert(sizeof(CoreTimedEffectMeterWidget_GetProgress) == 0x000004, "Wrong size on CoreTimedEffectMeterWidget_GetProgress");
static_assert(offsetof(CoreTimedEffectMeterWidget_GetProgress, ReturnValue) == 0x000000, "Member 'CoreTimedEffectMeterWidget_GetProgress::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreTimedEffectMeterWidget.GetState
// 0x0001 (0x0001 - 0x0000)
struct CoreTimedEffectMeterWidget_GetState final
{
public:
	ETimedEffectMeterState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTimedEffectMeterWidget_GetState) == 0x000001, "Wrong alignment on CoreTimedEffectMeterWidget_GetState");
static_assert(sizeof(CoreTimedEffectMeterWidget_GetState) == 0x000001, "Wrong size on CoreTimedEffectMeterWidget_GetState");
static_assert(offsetof(CoreTimedEffectMeterWidget_GetState, ReturnValue) == 0x000000, "Member 'CoreTimedEffectMeterWidget_GetState::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreTimerFlagWidget.BindToButton
// 0x0008 (0x0008 - 0x0000)
struct CoreTimerFlagWidget_BindToButton final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTimerFlagWidget_BindToButton) == 0x000008, "Wrong alignment on CoreTimerFlagWidget_BindToButton");
static_assert(sizeof(CoreTimerFlagWidget_BindToButton) == 0x000008, "Wrong size on CoreTimerFlagWidget_BindToButton");
static_assert(offsetof(CoreTimerFlagWidget_BindToButton, targetButton) == 0x000000, "Member 'CoreTimerFlagWidget_BindToButton::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreTimerFlagWidget.OnTargetHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreTimerFlagWidget_OnTargetHovered final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTimerFlagWidget_OnTargetHovered) == 0x000008, "Wrong alignment on CoreTimerFlagWidget_OnTargetHovered");
static_assert(sizeof(CoreTimerFlagWidget_OnTargetHovered) == 0x000008, "Wrong size on CoreTimerFlagWidget_OnTargetHovered");
static_assert(offsetof(CoreTimerFlagWidget_OnTargetHovered, targetButton) == 0x000000, "Member 'CoreTimerFlagWidget_OnTargetHovered::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreTimerFlagWidget.OnTargetUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreTimerFlagWidget_OnTargetUnhovered final
{
public:
	class UCoreButtonWidget*                      targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTimerFlagWidget_OnTargetUnhovered) == 0x000008, "Wrong alignment on CoreTimerFlagWidget_OnTargetUnhovered");
static_assert(sizeof(CoreTimerFlagWidget_OnTargetUnhovered) == 0x000008, "Wrong size on CoreTimerFlagWidget_OnTargetUnhovered");
static_assert(offsetof(CoreTimerFlagWidget_OnTargetUnhovered, targetButton) == 0x000000, "Member 'CoreTimerFlagWidget_OnTargetUnhovered::targetButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreTimerFlagWidget.OnTimerTick
// 0x0004 (0x0004 - 0x0000)
struct CoreTimerFlagWidget_OnTimerTick final
{
public:
	int32                                         RemainingTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTimerFlagWidget_OnTimerTick) == 0x000004, "Wrong alignment on CoreTimerFlagWidget_OnTimerTick");
static_assert(sizeof(CoreTimerFlagWidget_OnTimerTick) == 0x000004, "Wrong size on CoreTimerFlagWidget_OnTimerTick");
static_assert(offsetof(CoreTimerFlagWidget_OnTimerTick, RemainingTime) == 0x000000, "Member 'CoreTimerFlagWidget_OnTimerTick::RemainingTime' has a wrong offset!");

// Function DBDUIViewsCore.CoreTimerFlagWidget.SetData
// 0x0030 (0x0030 - 0x0000)
struct CoreTimerFlagWidget_SetData final
{
public:
	struct FTimerFlagViewData                     Data;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTimerFlagWidget_SetData) == 0x000008, "Wrong alignment on CoreTimerFlagWidget_SetData");
static_assert(sizeof(CoreTimerFlagWidget_SetData) == 0x000030, "Wrong size on CoreTimerFlagWidget_SetData");
static_assert(offsetof(CoreTimerFlagWidget_SetData, Data) == 0x000000, "Member 'CoreTimerFlagWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CoreTimerFlagWidget.UpdateFlagSize
// 0x0001 (0x0001 - 0x0000)
struct CoreTimerFlagWidget_UpdateFlagSize final
{
public:
	EFlagSize                                     FlagSize;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTimerFlagWidget_UpdateFlagSize) == 0x000001, "Wrong alignment on CoreTimerFlagWidget_UpdateFlagSize");
static_assert(sizeof(CoreTimerFlagWidget_UpdateFlagSize) == 0x000001, "Wrong size on CoreTimerFlagWidget_UpdateFlagSize");
static_assert(offsetof(CoreTimerFlagWidget_UpdateFlagSize, FlagSize) == 0x000000, "Member 'CoreTimerFlagWidget_UpdateFlagSize::FlagSize' has a wrong offset!");

// Function DBDUIViewsCore.CoreTimerFlagWidget.UpdateTimer
// 0x0010 (0x0010 - 0x0000)
struct CoreTimerFlagWidget_UpdateTimer final
{
public:
	class FString                                 newTimer;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTimerFlagWidget_UpdateTimer) == 0x000008, "Wrong alignment on CoreTimerFlagWidget_UpdateTimer");
static_assert(sizeof(CoreTimerFlagWidget_UpdateTimer) == 0x000010, "Wrong size on CoreTimerFlagWidget_UpdateTimer");
static_assert(offsetof(CoreTimerFlagWidget_UpdateTimer, newTimer) == 0x000000, "Member 'CoreTimerFlagWidget_UpdateTimer::newTimer' has a wrong offset!");

// Function DBDUIViewsCore.CoreTimerFlagWidget.GetCachedData
// 0x0030 (0x0030 - 0x0000)
struct CoreTimerFlagWidget_GetCachedData final
{
public:
	struct FTimerFlagViewData                     ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTimerFlagWidget_GetCachedData) == 0x000008, "Wrong alignment on CoreTimerFlagWidget_GetCachedData");
static_assert(sizeof(CoreTimerFlagWidget_GetCachedData) == 0x000030, "Wrong size on CoreTimerFlagWidget_GetCachedData");
static_assert(offsetof(CoreTimerFlagWidget_GetCachedData, ReturnValue) == 0x000000, "Member 'CoreTimerFlagWidget_GetCachedData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreTimerFlagWidget.GetCurrentFlagSize
// 0x0001 (0x0001 - 0x0000)
struct CoreTimerFlagWidget_GetCurrentFlagSize final
{
public:
	EFlagSize                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTimerFlagWidget_GetCurrentFlagSize) == 0x000001, "Wrong alignment on CoreTimerFlagWidget_GetCurrentFlagSize");
static_assert(sizeof(CoreTimerFlagWidget_GetCurrentFlagSize) == 0x000001, "Wrong size on CoreTimerFlagWidget_GetCurrentFlagSize");
static_assert(offsetof(CoreTimerFlagWidget_GetCurrentFlagSize, ReturnValue) == 0x000000, "Member 'CoreTimerFlagWidget_GetCurrentFlagSize::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreTimerFlagWidget.IsDataSet
// 0x0001 (0x0001 - 0x0000)
struct CoreTimerFlagWidget_IsDataSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTimerFlagWidget_IsDataSet) == 0x000001, "Wrong alignment on CoreTimerFlagWidget_IsDataSet");
static_assert(sizeof(CoreTimerFlagWidget_IsDataSet) == 0x000001, "Wrong size on CoreTimerFlagWidget_IsDataSet");
static_assert(offsetof(CoreTimerFlagWidget_IsDataSet, ReturnValue) == 0x000000, "Member 'CoreTimerFlagWidget_IsDataSet::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreToastNotificationContainerWidget.HandleToastButtonSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreToastNotificationContainerWidget_HandleToastButtonSelected final
{
public:
	int32                                         buttonId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        notificationId;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreToastNotificationContainerWidget_HandleToastButtonSelected) == 0x000004, "Wrong alignment on CoreToastNotificationContainerWidget_HandleToastButtonSelected");
static_assert(sizeof(CoreToastNotificationContainerWidget_HandleToastButtonSelected) == 0x000008, "Wrong size on CoreToastNotificationContainerWidget_HandleToastButtonSelected");
static_assert(offsetof(CoreToastNotificationContainerWidget_HandleToastButtonSelected, buttonId) == 0x000000, "Member 'CoreToastNotificationContainerWidget_HandleToastButtonSelected::buttonId' has a wrong offset!");
static_assert(offsetof(CoreToastNotificationContainerWidget_HandleToastButtonSelected, notificationId) == 0x000004, "Member 'CoreToastNotificationContainerWidget_HandleToastButtonSelected::notificationId' has a wrong offset!");

// Function DBDUIViewsCore.CoreToastNotificationContainerWidget.HandleToastDisplayEnded
// 0x0004 (0x0004 - 0x0000)
struct CoreToastNotificationContainerWidget_HandleToastDisplayEnded final
{
public:
	uint32                                        notificationId;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreToastNotificationContainerWidget_HandleToastDisplayEnded) == 0x000004, "Wrong alignment on CoreToastNotificationContainerWidget_HandleToastDisplayEnded");
static_assert(sizeof(CoreToastNotificationContainerWidget_HandleToastDisplayEnded) == 0x000004, "Wrong size on CoreToastNotificationContainerWidget_HandleToastDisplayEnded");
static_assert(offsetof(CoreToastNotificationContainerWidget_HandleToastDisplayEnded, notificationId) == 0x000000, "Member 'CoreToastNotificationContainerWidget_HandleToastDisplayEnded::notificationId' has a wrong offset!");

// Function DBDUIViewsCore.CoreToastNotificationContainerWidget.HandleToastPromptSelected
// 0x0004 (0x0004 - 0x0000)
struct CoreToastNotificationContainerWidget_HandleToastPromptSelected final
{
public:
	uint32                                        notificationId;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreToastNotificationContainerWidget_HandleToastPromptSelected) == 0x000004, "Wrong alignment on CoreToastNotificationContainerWidget_HandleToastPromptSelected");
static_assert(sizeof(CoreToastNotificationContainerWidget_HandleToastPromptSelected) == 0x000004, "Wrong size on CoreToastNotificationContainerWidget_HandleToastPromptSelected");
static_assert(offsetof(CoreToastNotificationContainerWidget_HandleToastPromptSelected, notificationId) == 0x000000, "Member 'CoreToastNotificationContainerWidget_HandleToastPromptSelected::notificationId' has a wrong offset!");

// Function DBDUIViewsCore.CoreToastNotificationWidget.ChangeVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreToastNotificationWidget_ChangeVisibility final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreToastNotificationWidget_ChangeVisibility) == 0x000001, "Wrong alignment on CoreToastNotificationWidget_ChangeVisibility");
static_assert(sizeof(CoreToastNotificationWidget_ChangeVisibility) == 0x000001, "Wrong size on CoreToastNotificationWidget_ChangeVisibility");
static_assert(offsetof(CoreToastNotificationWidget_ChangeVisibility, IsVisible_0) == 0x000000, "Member 'CoreToastNotificationWidget_ChangeVisibility::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreToastNotificationWidget.OnButtonClicked
// 0x0004 (0x0004 - 0x0000)
struct CoreToastNotificationWidget_OnButtonClicked final
{
public:
	int32                                         buttonId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreToastNotificationWidget_OnButtonClicked) == 0x000004, "Wrong alignment on CoreToastNotificationWidget_OnButtonClicked");
static_assert(sizeof(CoreToastNotificationWidget_OnButtonClicked) == 0x000004, "Wrong size on CoreToastNotificationWidget_OnButtonClicked");
static_assert(offsetof(CoreToastNotificationWidget_OnButtonClicked, buttonId) == 0x000000, "Member 'CoreToastNotificationWidget_OnButtonClicked::buttonId' has a wrong offset!");

// Function DBDUIViewsCore.CoreToastNotificationWidget.OnLeftButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreToastNotificationWidget_OnLeftButtonClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreToastNotificationWidget_OnLeftButtonClicked) == 0x000008, "Wrong alignment on CoreToastNotificationWidget_OnLeftButtonClicked");
static_assert(sizeof(CoreToastNotificationWidget_OnLeftButtonClicked) == 0x000008, "Wrong size on CoreToastNotificationWidget_OnLeftButtonClicked");
static_assert(offsetof(CoreToastNotificationWidget_OnLeftButtonClicked, Button) == 0x000000, "Member 'CoreToastNotificationWidget_OnLeftButtonClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreToastNotificationWidget.OnRightButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreToastNotificationWidget_OnRightButtonClicked final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreToastNotificationWidget_OnRightButtonClicked) == 0x000008, "Wrong alignment on CoreToastNotificationWidget_OnRightButtonClicked");
static_assert(sizeof(CoreToastNotificationWidget_OnRightButtonClicked) == 0x000008, "Wrong size on CoreToastNotificationWidget_OnRightButtonClicked");
static_assert(offsetof(CoreToastNotificationWidget_OnRightButtonClicked, Button) == 0x000000, "Member 'CoreToastNotificationWidget_OnRightButtonClicked::Button' has a wrong offset!");

// Function DBDUIViewsCore.CoreToastNotificationWidget.SetVisuals
// 0x00C8 (0x00C8 - 0x0000)
struct CoreToastNotificationWidget_SetVisuals final
{
public:
	struct FToastNotificationViewData             toastData;                                         // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsInteractable_0;                                  // 0x00C0(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreToastNotificationWidget_SetVisuals) == 0x000008, "Wrong alignment on CoreToastNotificationWidget_SetVisuals");
static_assert(sizeof(CoreToastNotificationWidget_SetVisuals) == 0x0000C8, "Wrong size on CoreToastNotificationWidget_SetVisuals");
static_assert(offsetof(CoreToastNotificationWidget_SetVisuals, toastData) == 0x000000, "Member 'CoreToastNotificationWidget_SetVisuals::toastData' has a wrong offset!");
static_assert(offsetof(CoreToastNotificationWidget_SetVisuals, IsInteractable_0) == 0x0000C0, "Member 'CoreToastNotificationWidget_SetVisuals::IsInteractable_0' has a wrong offset!");

// Function DBDUIViewsCore.CoreTutorialObjectiveItem.InitObjective
// 0x01A0 (0x01A0 - 0x0000)
struct CoreTutorialObjectiveItem_InitObjective final
{
public:
	struct FTutorialObjectivesViewData            interactionsViewData;                              // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTutorialObjectiveItem_InitObjective) == 0x000008, "Wrong alignment on CoreTutorialObjectiveItem_InitObjective");
static_assert(sizeof(CoreTutorialObjectiveItem_InitObjective) == 0x0001A0, "Wrong size on CoreTutorialObjectiveItem_InitObjective");
static_assert(offsetof(CoreTutorialObjectiveItem_InitObjective, interactionsViewData) == 0x000000, "Member 'CoreTutorialObjectiveItem_InitObjective::interactionsViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreTutorialObjectiveItem.SetObjectiveCompleted
// 0x0001 (0x0001 - 0x0000)
struct CoreTutorialObjectiveItem_SetObjectiveCompleted final
{
public:
	bool                                          removeAfterCompletion;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTutorialObjectiveItem_SetObjectiveCompleted) == 0x000001, "Wrong alignment on CoreTutorialObjectiveItem_SetObjectiveCompleted");
static_assert(sizeof(CoreTutorialObjectiveItem_SetObjectiveCompleted) == 0x000001, "Wrong size on CoreTutorialObjectiveItem_SetObjectiveCompleted");
static_assert(offsetof(CoreTutorialObjectiveItem_SetObjectiveCompleted, removeAfterCompletion) == 0x000000, "Member 'CoreTutorialObjectiveItem_SetObjectiveCompleted::removeAfterCompletion' has a wrong offset!");

// Function DBDUIViewsCore.CoreTutorialObjectivesContainer.OnTutorialObjectiveCompleted
// 0x0008 (0x0008 - 0x0000)
struct CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted final
{
public:
	class UCoreTutorialObjectiveItem*             Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted) == 0x000008, "Wrong alignment on CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted");
static_assert(sizeof(CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted) == 0x000008, "Wrong size on CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted");
static_assert(offsetof(CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted, Item) == 0x000000, "Member 'CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted::Item' has a wrong offset!");

// Function DBDUIViewsCore.CoreUnlockPersonalPerksPopupWidget.HideMenuPerkTooltip
// 0x0008 (0x0008 - 0x0000)
struct CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip final
{
public:
	class UCoreButtonWidget*                      unhoveredSlotWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip) == 0x000008, "Wrong alignment on CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip");
static_assert(sizeof(CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip) == 0x000008, "Wrong size on CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip");
static_assert(offsetof(CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip, unhoveredSlotWidget) == 0x000000, "Member 'CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip::unhoveredSlotWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreUnlockPersonalPerksPopupWidget.ShowMenuPerkTooltip
// 0x0008 (0x0008 - 0x0000)
struct CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip final
{
public:
	class UCoreButtonWidget*                      hoveredSlotWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip) == 0x000008, "Wrong alignment on CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip");
static_assert(sizeof(CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip) == 0x000008, "Wrong size on CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip");
static_assert(offsetof(CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip, hoveredSlotWidget) == 0x000000, "Member 'CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip::hoveredSlotWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreWalletWidget.FullUpdateCurrency
// 0x0148 (0x0148 - 0x0000)
struct CoreWalletWidget_FullUpdateCurrency final
{
public:
	struct FCurrencyLabelViewData                 ViewData;                                          // 0x0000(0x0148)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWalletWidget_FullUpdateCurrency) == 0x000008, "Wrong alignment on CoreWalletWidget_FullUpdateCurrency");
static_assert(sizeof(CoreWalletWidget_FullUpdateCurrency) == 0x000148, "Wrong size on CoreWalletWidget_FullUpdateCurrency");
static_assert(offsetof(CoreWalletWidget_FullUpdateCurrency, ViewData) == 0x000000, "Member 'CoreWalletWidget_FullUpdateCurrency::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreWalletWidget.InitWallet
// 0x0010 (0x0010 - 0x0000)
struct CoreWalletWidget_InitWallet final
{
public:
	TArray<struct FCurrencyLabelViewData>         walletData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWalletWidget_InitWallet) == 0x000008, "Wrong alignment on CoreWalletWidget_InitWallet");
static_assert(sizeof(CoreWalletWidget_InitWallet) == 0x000010, "Wrong size on CoreWalletWidget_InitWallet");
static_assert(offsetof(CoreWalletWidget_InitWallet, walletData) == 0x000000, "Member 'CoreWalletWidget_InitWallet::walletData' has a wrong offset!");

// Function DBDUIViewsCore.CoreWalletWidget.OnCurrencyClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreWalletWidget_OnCurrencyClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWalletWidget_OnCurrencyClicked) == 0x000008, "Wrong alignment on CoreWalletWidget_OnCurrencyClicked");
static_assert(sizeof(CoreWalletWidget_OnCurrencyClicked) == 0x000008, "Wrong size on CoreWalletWidget_OnCurrencyClicked");
static_assert(offsetof(CoreWalletWidget_OnCurrencyClicked, buttonTarget) == 0x000000, "Member 'CoreWalletWidget_OnCurrencyClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreWalletWidget.PlayNotEnoughCurrency
// 0x0001 (0x0001 - 0x0000)
struct CoreWalletWidget_PlayNotEnoughCurrency final
{
public:
	ECurrencyType                                 Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWalletWidget_PlayNotEnoughCurrency) == 0x000001, "Wrong alignment on CoreWalletWidget_PlayNotEnoughCurrency");
static_assert(sizeof(CoreWalletWidget_PlayNotEnoughCurrency) == 0x000001, "Wrong size on CoreWalletWidget_PlayNotEnoughCurrency");
static_assert(offsetof(CoreWalletWidget_PlayNotEnoughCurrency, Type) == 0x000000, "Member 'CoreWalletWidget_PlayNotEnoughCurrency::Type' has a wrong offset!");

// Function DBDUIViewsCore.CoreWalletWidget.SetCurrenciesButtonsEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreWalletWidget_SetCurrenciesButtonsEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWalletWidget_SetCurrenciesButtonsEnabled) == 0x000001, "Wrong alignment on CoreWalletWidget_SetCurrenciesButtonsEnabled");
static_assert(sizeof(CoreWalletWidget_SetCurrenciesButtonsEnabled) == 0x000001, "Wrong size on CoreWalletWidget_SetCurrenciesButtonsEnabled");
static_assert(offsetof(CoreWalletWidget_SetCurrenciesButtonsEnabled, IsEnabled) == 0x000000, "Member 'CoreWalletWidget_SetCurrenciesButtonsEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreWalletWidget.UpdateCurrency
// 0x000C (0x000C - 0x0000)
struct CoreWalletWidget_UpdateCurrency final
{
public:
	ECurrencyType                                 Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         newBalance;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         previousBalance;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWalletWidget_UpdateCurrency) == 0x000004, "Wrong alignment on CoreWalletWidget_UpdateCurrency");
static_assert(sizeof(CoreWalletWidget_UpdateCurrency) == 0x00000C, "Wrong size on CoreWalletWidget_UpdateCurrency");
static_assert(offsetof(CoreWalletWidget_UpdateCurrency, Type) == 0x000000, "Member 'CoreWalletWidget_UpdateCurrency::Type' has a wrong offset!");
static_assert(offsetof(CoreWalletWidget_UpdateCurrency, newBalance) == 0x000004, "Member 'CoreWalletWidget_UpdateCurrency::newBalance' has a wrong offset!");
static_assert(offsetof(CoreWalletWidget_UpdateCurrency, previousBalance) == 0x000008, "Member 'CoreWalletWidget_UpdateCurrency::previousBalance' has a wrong offset!");

// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemEquipAllClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreWardrobeActionButtonsWidget_OnItemEquipAllClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWardrobeActionButtonsWidget_OnItemEquipAllClicked) == 0x000008, "Wrong alignment on CoreWardrobeActionButtonsWidget_OnItemEquipAllClicked");
static_assert(sizeof(CoreWardrobeActionButtonsWidget_OnItemEquipAllClicked) == 0x000008, "Wrong size on CoreWardrobeActionButtonsWidget_OnItemEquipAllClicked");
static_assert(offsetof(CoreWardrobeActionButtonsWidget_OnItemEquipAllClicked, buttonTarget) == 0x000000, "Member 'CoreWardrobeActionButtonsWidget_OnItemEquipAllClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemEquipClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreWardrobeActionButtonsWidget_OnItemEquipClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWardrobeActionButtonsWidget_OnItemEquipClicked) == 0x000008, "Wrong alignment on CoreWardrobeActionButtonsWidget_OnItemEquipClicked");
static_assert(sizeof(CoreWardrobeActionButtonsWidget_OnItemEquipClicked) == 0x000008, "Wrong size on CoreWardrobeActionButtonsWidget_OnItemEquipClicked");
static_assert(offsetof(CoreWardrobeActionButtonsWidget_OnItemEquipClicked, buttonTarget) == 0x000000, "Member 'CoreWardrobeActionButtonsWidget_OnItemEquipClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemSelectAllClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreWardrobeActionButtonsWidget_OnItemSelectAllClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWardrobeActionButtonsWidget_OnItemSelectAllClicked) == 0x000008, "Wrong alignment on CoreWardrobeActionButtonsWidget_OnItemSelectAllClicked");
static_assert(sizeof(CoreWardrobeActionButtonsWidget_OnItemSelectAllClicked) == 0x000008, "Wrong size on CoreWardrobeActionButtonsWidget_OnItemSelectAllClicked");
static_assert(offsetof(CoreWardrobeActionButtonsWidget_OnItemSelectAllClicked, buttonTarget) == 0x000000, "Member 'CoreWardrobeActionButtonsWidget_OnItemSelectAllClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnItemUnlockTriggered
// 0x0001 (0x0001 - 0x0000)
struct CoreWardrobeActionButtonsWidget_OnItemUnlockTriggered final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWardrobeActionButtonsWidget_OnItemUnlockTriggered) == 0x000001, "Wrong alignment on CoreWardrobeActionButtonsWidget_OnItemUnlockTriggered");
static_assert(sizeof(CoreWardrobeActionButtonsWidget_OnItemUnlockTriggered) == 0x000001, "Wrong size on CoreWardrobeActionButtonsWidget_OnItemUnlockTriggered");
static_assert(offsetof(CoreWardrobeActionButtonsWidget_OnItemUnlockTriggered, currencyType) == 0x000000, "Member 'CoreWardrobeActionButtonsWidget_OnItemUnlockTriggered::currencyType' has a wrong offset!");

// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnPlayMoriClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreWardrobeActionButtonsWidget_OnPlayMoriClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWardrobeActionButtonsWidget_OnPlayMoriClicked) == 0x000008, "Wrong alignment on CoreWardrobeActionButtonsWidget_OnPlayMoriClicked");
static_assert(sizeof(CoreWardrobeActionButtonsWidget_OnPlayMoriClicked) == 0x000008, "Wrong size on CoreWardrobeActionButtonsWidget_OnPlayMoriClicked");
static_assert(offsetof(CoreWardrobeActionButtonsWidget_OnPlayMoriClicked, buttonTarget) == 0x000000, "Member 'CoreWardrobeActionButtonsWidget_OnPlayMoriClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnPlayMoriHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreWardrobeActionButtonsWidget_OnPlayMoriHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWardrobeActionButtonsWidget_OnPlayMoriHovered) == 0x000008, "Wrong alignment on CoreWardrobeActionButtonsWidget_OnPlayMoriHovered");
static_assert(sizeof(CoreWardrobeActionButtonsWidget_OnPlayMoriHovered) == 0x000008, "Wrong size on CoreWardrobeActionButtonsWidget_OnPlayMoriHovered");
static_assert(offsetof(CoreWardrobeActionButtonsWidget_OnPlayMoriHovered, buttonTarget) == 0x000000, "Member 'CoreWardrobeActionButtonsWidget_OnPlayMoriHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnPlayMoriUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreWardrobeActionButtonsWidget_OnPlayMoriUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWardrobeActionButtonsWidget_OnPlayMoriUnhovered) == 0x000008, "Wrong alignment on CoreWardrobeActionButtonsWidget_OnPlayMoriUnhovered");
static_assert(sizeof(CoreWardrobeActionButtonsWidget_OnPlayMoriUnhovered) == 0x000008, "Wrong size on CoreWardrobeActionButtonsWidget_OnPlayMoriUnhovered");
static_assert(offsetof(CoreWardrobeActionButtonsWidget_OnPlayMoriUnhovered, buttonTarget) == 0x000000, "Member 'CoreWardrobeActionButtonsWidget_OnPlayMoriUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnPlaySecondMoriClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreWardrobeActionButtonsWidget_OnPlaySecondMoriClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWardrobeActionButtonsWidget_OnPlaySecondMoriClicked) == 0x000008, "Wrong alignment on CoreWardrobeActionButtonsWidget_OnPlaySecondMoriClicked");
static_assert(sizeof(CoreWardrobeActionButtonsWidget_OnPlaySecondMoriClicked) == 0x000008, "Wrong size on CoreWardrobeActionButtonsWidget_OnPlaySecondMoriClicked");
static_assert(offsetof(CoreWardrobeActionButtonsWidget_OnPlaySecondMoriClicked, buttonTarget) == 0x000000, "Member 'CoreWardrobeActionButtonsWidget_OnPlaySecondMoriClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnSecondMoriHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreWardrobeActionButtonsWidget_OnSecondMoriHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWardrobeActionButtonsWidget_OnSecondMoriHovered) == 0x000008, "Wrong alignment on CoreWardrobeActionButtonsWidget_OnSecondMoriHovered");
static_assert(sizeof(CoreWardrobeActionButtonsWidget_OnSecondMoriHovered) == 0x000008, "Wrong size on CoreWardrobeActionButtonsWidget_OnSecondMoriHovered");
static_assert(offsetof(CoreWardrobeActionButtonsWidget_OnSecondMoriHovered, buttonTarget) == 0x000000, "Member 'CoreWardrobeActionButtonsWidget_OnSecondMoriHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnSecondMoriUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreWardrobeActionButtonsWidget_OnSecondMoriUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWardrobeActionButtonsWidget_OnSecondMoriUnhovered) == 0x000008, "Wrong alignment on CoreWardrobeActionButtonsWidget_OnSecondMoriUnhovered");
static_assert(sizeof(CoreWardrobeActionButtonsWidget_OnSecondMoriUnhovered) == 0x000008, "Wrong size on CoreWardrobeActionButtonsWidget_OnSecondMoriUnhovered");
static_assert(offsetof(CoreWardrobeActionButtonsWidget_OnSecondMoriUnhovered, buttonTarget) == 0x000000, "Member 'CoreWardrobeActionButtonsWidget_OnSecondMoriUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.OnZoomCharmClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreWardrobeActionButtonsWidget_OnZoomCharmClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWardrobeActionButtonsWidget_OnZoomCharmClicked) == 0x000008, "Wrong alignment on CoreWardrobeActionButtonsWidget_OnZoomCharmClicked");
static_assert(sizeof(CoreWardrobeActionButtonsWidget_OnZoomCharmClicked) == 0x000008, "Wrong size on CoreWardrobeActionButtonsWidget_OnZoomCharmClicked");
static_assert(offsetof(CoreWardrobeActionButtonsWidget_OnZoomCharmClicked, buttonTarget) == 0x000000, "Member 'CoreWardrobeActionButtonsWidget_OnZoomCharmClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.UpdateMoriButtonVisual
// 0x0001 (0x0001 - 0x0000)
struct CoreWardrobeActionButtonsWidget_UpdateMoriButtonVisual final
{
public:
	bool                                          HasUniqueMori;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWardrobeActionButtonsWidget_UpdateMoriButtonVisual) == 0x000001, "Wrong alignment on CoreWardrobeActionButtonsWidget_UpdateMoriButtonVisual");
static_assert(sizeof(CoreWardrobeActionButtonsWidget_UpdateMoriButtonVisual) == 0x000001, "Wrong size on CoreWardrobeActionButtonsWidget_UpdateMoriButtonVisual");
static_assert(offsetof(CoreWardrobeActionButtonsWidget_UpdateMoriButtonVisual, HasUniqueMori) == 0x000000, "Member 'CoreWardrobeActionButtonsWidget_UpdateMoriButtonVisual::HasUniqueMori' has a wrong offset!");

// Function DBDUIViewsCore.CoreWardrobeActionButtonsWidget.UpdateZoomCharmIcon
// 0x0001 (0x0001 - 0x0000)
struct CoreWardrobeActionButtonsWidget_UpdateZoomCharmIcon final
{
public:
	bool                                          IsCharmZoomed;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWardrobeActionButtonsWidget_UpdateZoomCharmIcon) == 0x000001, "Wrong alignment on CoreWardrobeActionButtonsWidget_UpdateZoomCharmIcon");
static_assert(sizeof(CoreWardrobeActionButtonsWidget_UpdateZoomCharmIcon) == 0x000001, "Wrong size on CoreWardrobeActionButtonsWidget_UpdateZoomCharmIcon");
static_assert(offsetof(CoreWardrobeActionButtonsWidget_UpdateZoomCharmIcon, IsCharmZoomed) == 0x000000, "Member 'CoreWardrobeActionButtonsWidget_UpdateZoomCharmIcon::IsCharmZoomed' has a wrong offset!");

// Function DBDUIViewsCore.CurrencyConversionPopupWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct CurrencyConversionPopupWidget_SetData final
{
public:
	const class UCurrencyConversionPopupViewData* Data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurrencyConversionPopupWidget_SetData) == 0x000008, "Wrong alignment on CurrencyConversionPopupWidget_SetData");
static_assert(sizeof(CurrencyConversionPopupWidget_SetData) == 0x000008, "Wrong size on CurrencyConversionPopupWidget_SetData");
static_assert(offsetof(CurrencyConversionPopupWidget_SetData, Data) == 0x000000, "Member 'CurrencyConversionPopupWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.CurrencyProgressionTooltipWidget.SetTooltipData
// 0x0100 (0x0100 - 0x0000)
struct CurrencyProgressionTooltipWidget_SetTooltipData final
{
public:
	struct FCurrencyProgressionTooltipViewData    currencyViewData;                                  // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurrencyProgressionTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on CurrencyProgressionTooltipWidget_SetTooltipData");
static_assert(sizeof(CurrencyProgressionTooltipWidget_SetTooltipData) == 0x000100, "Wrong size on CurrencyProgressionTooltipWidget_SetTooltipData");
static_assert(offsetof(CurrencyProgressionTooltipWidget_SetTooltipData, currencyViewData) == 0x000000, "Member 'CurrencyProgressionTooltipWidget_SetTooltipData::currencyViewData' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationItemGridContainer.OnItemClicked
// 0x0008 (0x0008 - 0x0000)
struct CustomizationItemGridContainer_OnItemClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationItemGridContainer_OnItemClicked) == 0x000008, "Wrong alignment on CustomizationItemGridContainer_OnItemClicked");
static_assert(sizeof(CustomizationItemGridContainer_OnItemClicked) == 0x000008, "Wrong size on CustomizationItemGridContainer_OnItemClicked");
static_assert(offsetof(CustomizationItemGridContainer_OnItemClicked, buttonTarget) == 0x000000, "Member 'CustomizationItemGridContainer_OnItemClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationItemGridContainer.SetData
// 0x0018 (0x0018 - 0x0000)
struct CustomizationItemGridContainer_SetData final
{
public:
	TArray<class UStoreCustomizationItemViewData*> customizationRewardsData;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         selectedIndex;                                     // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         overrideLayoutMask;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationItemGridContainer_SetData) == 0x000008, "Wrong alignment on CustomizationItemGridContainer_SetData");
static_assert(sizeof(CustomizationItemGridContainer_SetData) == 0x000018, "Wrong size on CustomizationItemGridContainer_SetData");
static_assert(offsetof(CustomizationItemGridContainer_SetData, customizationRewardsData) == 0x000000, "Member 'CustomizationItemGridContainer_SetData::customizationRewardsData' has a wrong offset!");
static_assert(offsetof(CustomizationItemGridContainer_SetData, selectedIndex) == 0x000010, "Member 'CustomizationItemGridContainer_SetData::selectedIndex' has a wrong offset!");
static_assert(offsetof(CustomizationItemGridContainer_SetData, overrideLayoutMask) == 0x000014, "Member 'CustomizationItemGridContainer_SetData::overrideLayoutMask' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationItemGridContainer.SetEquippedItem
// 0x0001 (0x0001 - 0x0000)
struct CustomizationItemGridContainer_SetEquippedItem final
{
public:
	bool                                          IsEquipped;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationItemGridContainer_SetEquippedItem) == 0x000001, "Wrong alignment on CustomizationItemGridContainer_SetEquippedItem");
static_assert(sizeof(CustomizationItemGridContainer_SetEquippedItem) == 0x000001, "Wrong size on CustomizationItemGridContainer_SetEquippedItem");
static_assert(offsetof(CustomizationItemGridContainer_SetEquippedItem, IsEquipped) == 0x000000, "Member 'CustomizationItemGridContainer_SetEquippedItem::IsEquipped' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationItemGridContainer.SetScrollPrompt
// 0x0008 (0x0008 - 0x0000)
struct CustomizationItemGridContainer_SetScrollPrompt final
{
public:
	class UCoreKeyListenerInputPromptWidget*      DisplayPrompt;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationItemGridContainer_SetScrollPrompt) == 0x000008, "Wrong alignment on CustomizationItemGridContainer_SetScrollPrompt");
static_assert(sizeof(CustomizationItemGridContainer_SetScrollPrompt) == 0x000008, "Wrong size on CustomizationItemGridContainer_SetScrollPrompt");
static_assert(offsetof(CustomizationItemGridContainer_SetScrollPrompt, DisplayPrompt) == 0x000000, "Member 'CustomizationItemGridContainer_SetScrollPrompt::DisplayPrompt' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationItemGridContainer.SetSelectedItem
// 0x0004 (0x0004 - 0x0000)
struct CustomizationItemGridContainer_SetSelectedItem final
{
public:
	int32                                         selectedIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationItemGridContainer_SetSelectedItem) == 0x000004, "Wrong alignment on CustomizationItemGridContainer_SetSelectedItem");
static_assert(sizeof(CustomizationItemGridContainer_SetSelectedItem) == 0x000004, "Wrong size on CustomizationItemGridContainer_SetSelectedItem");
static_assert(offsetof(CustomizationItemGridContainer_SetSelectedItem, selectedIndex) == 0x000000, "Member 'CustomizationItemGridContainer_SetSelectedItem::selectedIndex' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetArchivesState
// 0x0010 (0x0010 - 0x0000)
struct CustomizationItemOriginWidget_SetArchivesState final
{
public:
	TArray<class FText>                           Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationItemOriginWidget_SetArchivesState) == 0x000008, "Wrong alignment on CustomizationItemOriginWidget_SetArchivesState");
static_assert(sizeof(CustomizationItemOriginWidget_SetArchivesState) == 0x000010, "Wrong size on CustomizationItemOriginWidget_SetArchivesState");
static_assert(offsetof(CustomizationItemOriginWidget_SetArchivesState, Args) == 0x000000, "Member 'CustomizationItemOriginWidget_SetArchivesState::Args' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetChallengeState
// 0x0010 (0x0010 - 0x0000)
struct CustomizationItemOriginWidget_SetChallengeState final
{
public:
	TArray<class FText>                           Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationItemOriginWidget_SetChallengeState) == 0x000008, "Wrong alignment on CustomizationItemOriginWidget_SetChallengeState");
static_assert(sizeof(CustomizationItemOriginWidget_SetChallengeState) == 0x000010, "Wrong size on CustomizationItemOriginWidget_SetChallengeState");
static_assert(offsetof(CustomizationItemOriginWidget_SetChallengeState, Args) == 0x000000, "Member 'CustomizationItemOriginWidget_SetChallengeState::Args' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetCurrencyPurchaseState
// 0x0050 (0x0050 - 0x0000)
struct CustomizationItemOriginWidget_SetCurrencyPurchaseState final
{
public:
	struct FPriceTagViewData                      CurrencyData;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationItemOriginWidget_SetCurrencyPurchaseState) == 0x000008, "Wrong alignment on CustomizationItemOriginWidget_SetCurrencyPurchaseState");
static_assert(sizeof(CustomizationItemOriginWidget_SetCurrencyPurchaseState) == 0x000050, "Wrong size on CustomizationItemOriginWidget_SetCurrencyPurchaseState");
static_assert(offsetof(CustomizationItemOriginWidget_SetCurrencyPurchaseState, CurrencyData) == 0x000000, "Member 'CustomizationItemOriginWidget_SetCurrencyPurchaseState::CurrencyData' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetData
// 0x0068 (0x0068 - 0x0000)
struct CustomizationItemOriginWidget_SetData final
{
public:
	struct FCustomizationItemOriginViewData       ViewData;                                          // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationItemOriginWidget_SetData) == 0x000008, "Wrong alignment on CustomizationItemOriginWidget_SetData");
static_assert(sizeof(CustomizationItemOriginWidget_SetData) == 0x000068, "Wrong size on CustomizationItemOriginWidget_SetData");
static_assert(offsetof(CustomizationItemOriginWidget_SetData, ViewData) == 0x000000, "Member 'CustomizationItemOriginWidget_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetGameplayState
// 0x0010 (0x0010 - 0x0000)
struct CustomizationItemOriginWidget_SetGameplayState final
{
public:
	TArray<class FText>                           Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationItemOriginWidget_SetGameplayState) == 0x000008, "Wrong alignment on CustomizationItemOriginWidget_SetGameplayState");
static_assert(sizeof(CustomizationItemOriginWidget_SetGameplayState) == 0x000010, "Wrong size on CustomizationItemOriginWidget_SetGameplayState");
static_assert(offsetof(CustomizationItemOriginWidget_SetGameplayState, Args) == 0x000000, "Member 'CustomizationItemOriginWidget_SetGameplayState::Args' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetInputSwitcherEnabled
// 0x0010 (0x0010 - 0x0000)
struct CustomizationItemOriginWidget_SetInputSwitcherEnabled final
{
public:
	class UCoreInputSwitcherWidget*               inputSwitcher;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizationItemOriginWidget_SetInputSwitcherEnabled) == 0x000008, "Wrong alignment on CustomizationItemOriginWidget_SetInputSwitcherEnabled");
static_assert(sizeof(CustomizationItemOriginWidget_SetInputSwitcherEnabled) == 0x000010, "Wrong size on CustomizationItemOriginWidget_SetInputSwitcherEnabled");
static_assert(offsetof(CustomizationItemOriginWidget_SetInputSwitcherEnabled, inputSwitcher) == 0x000000, "Member 'CustomizationItemOriginWidget_SetInputSwitcherEnabled::inputSwitcher' has a wrong offset!");
static_assert(offsetof(CustomizationItemOriginWidget_SetInputSwitcherEnabled, Enabled) == 0x000008, "Member 'CustomizationItemOriginWidget_SetInputSwitcherEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetMilestonePointsState
// 0x0010 (0x0010 - 0x0000)
struct CustomizationItemOriginWidget_SetMilestonePointsState final
{
public:
	TArray<class FText>                           Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationItemOriginWidget_SetMilestonePointsState) == 0x000008, "Wrong alignment on CustomizationItemOriginWidget_SetMilestonePointsState");
static_assert(sizeof(CustomizationItemOriginWidget_SetMilestonePointsState) == 0x000010, "Wrong size on CustomizationItemOriginWidget_SetMilestonePointsState");
static_assert(offsetof(CustomizationItemOriginWidget_SetMilestonePointsState, Args) == 0x000000, "Member 'CustomizationItemOriginWidget_SetMilestonePointsState::Args' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationItemOriginWidget.SetState
// 0x0068 (0x0068 - 0x0000)
struct CustomizationItemOriginWidget_SetState final
{
public:
	struct FCustomizationItemOriginViewData       ViewData;                                          // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationItemOriginWidget_SetState) == 0x000008, "Wrong alignment on CustomizationItemOriginWidget_SetState");
static_assert(sizeof(CustomizationItemOriginWidget_SetState) == 0x000068, "Wrong size on CustomizationItemOriginWidget_SetState");
static_assert(offsetof(CustomizationItemOriginWidget_SetState, ViewData) == 0x000000, "Member 'CustomizationItemOriginWidget_SetState::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationTooltipWidget.AppendToDescriptionText
// 0x0018 (0x0018 - 0x0000)
struct CustomizationTooltipWidget_AppendToDescriptionText final
{
public:
	class FText                                   appendedText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationTooltipWidget_AppendToDescriptionText) == 0x000008, "Wrong alignment on CustomizationTooltipWidget_AppendToDescriptionText");
static_assert(sizeof(CustomizationTooltipWidget_AppendToDescriptionText) == 0x000018, "Wrong size on CustomizationTooltipWidget_AppendToDescriptionText");
static_assert(offsetof(CustomizationTooltipWidget_AppendToDescriptionText, appendedText) == 0x000000, "Member 'CustomizationTooltipWidget_AppendToDescriptionText::appendedText' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationTooltipWidget.CreatePriceTagWidget
// 0x0008 (0x0008 - 0x0000)
struct CustomizationTooltipWidget_CreatePriceTagWidget final
{
public:
	class UCorePriceTagWidget*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationTooltipWidget_CreatePriceTagWidget) == 0x000008, "Wrong alignment on CustomizationTooltipWidget_CreatePriceTagWidget");
static_assert(sizeof(CustomizationTooltipWidget_CreatePriceTagWidget) == 0x000008, "Wrong size on CustomizationTooltipWidget_CreatePriceTagWidget");
static_assert(offsetof(CustomizationTooltipWidget_CreatePriceTagWidget, ReturnValue) == 0x000000, "Member 'CustomizationTooltipWidget_CreatePriceTagWidget::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationTooltipWidget.SetOutfitParts
// 0x0010 (0x0010 - 0x0000)
struct CustomizationTooltipWidget_SetOutfitParts final
{
public:
	bool                                          IsUnbreakable;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UCustomizationRewardOutfitPartsViewData* outfitPartsViewData;                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationTooltipWidget_SetOutfitParts) == 0x000008, "Wrong alignment on CustomizationTooltipWidget_SetOutfitParts");
static_assert(sizeof(CustomizationTooltipWidget_SetOutfitParts) == 0x000010, "Wrong size on CustomizationTooltipWidget_SetOutfitParts");
static_assert(offsetof(CustomizationTooltipWidget_SetOutfitParts, IsUnbreakable) == 0x000000, "Member 'CustomizationTooltipWidget_SetOutfitParts::IsUnbreakable' has a wrong offset!");
static_assert(offsetof(CustomizationTooltipWidget_SetOutfitParts, outfitPartsViewData) == 0x000008, "Member 'CustomizationTooltipWidget_SetOutfitParts::outfitPartsViewData' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationTooltipWidget.SetStatusText
// 0x0005 (0x0005 - 0x0000)
struct CustomizationTooltipWidget_SetStatusText final
{
public:
	bool                                          IsEquipped;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOwned;                                           // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAvailable;                                       // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocked;                                          // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowAvailability;                                  // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationTooltipWidget_SetStatusText) == 0x000001, "Wrong alignment on CustomizationTooltipWidget_SetStatusText");
static_assert(sizeof(CustomizationTooltipWidget_SetStatusText) == 0x000005, "Wrong size on CustomizationTooltipWidget_SetStatusText");
static_assert(offsetof(CustomizationTooltipWidget_SetStatusText, IsEquipped) == 0x000000, "Member 'CustomizationTooltipWidget_SetStatusText::IsEquipped' has a wrong offset!");
static_assert(offsetof(CustomizationTooltipWidget_SetStatusText, IsOwned) == 0x000001, "Member 'CustomizationTooltipWidget_SetStatusText::IsOwned' has a wrong offset!");
static_assert(offsetof(CustomizationTooltipWidget_SetStatusText, IsAvailable) == 0x000002, "Member 'CustomizationTooltipWidget_SetStatusText::IsAvailable' has a wrong offset!");
static_assert(offsetof(CustomizationTooltipWidget_SetStatusText, IsLocked) == 0x000003, "Member 'CustomizationTooltipWidget_SetStatusText::IsLocked' has a wrong offset!");
static_assert(offsetof(CustomizationTooltipWidget_SetStatusText, ShowAvailability) == 0x000004, "Member 'CustomizationTooltipWidget_SetStatusText::ShowAvailability' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationTooltipWidget.SetTags
// 0x0001 (0x0001 - 0x0000)
struct CustomizationTooltipWidget_SetTags final
{
public:
	EItemSourceTag                                ItemSourceTags;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationTooltipWidget_SetTags) == 0x000001, "Wrong alignment on CustomizationTooltipWidget_SetTags");
static_assert(sizeof(CustomizationTooltipWidget_SetTags) == 0x000001, "Wrong size on CustomizationTooltipWidget_SetTags");
static_assert(offsetof(CustomizationTooltipWidget_SetTags, ItemSourceTags) == 0x000000, "Member 'CustomizationTooltipWidget_SetTags::ItemSourceTags' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationTooltipWidget.SetTooltipData
// 0x0158 (0x0158 - 0x0000)
struct CustomizationTooltipWidget_SetTooltipData final
{
public:
	struct FCustomizationTooltipViewData          CustomizationViewData;                             // 0x0000(0x0158)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on CustomizationTooltipWidget_SetTooltipData");
static_assert(sizeof(CustomizationTooltipWidget_SetTooltipData) == 0x000158, "Wrong size on CustomizationTooltipWidget_SetTooltipData");
static_assert(offsetof(CustomizationTooltipWidget_SetTooltipData, CustomizationViewData) == 0x000000, "Member 'CustomizationTooltipWidget_SetTooltipData::CustomizationViewData' has a wrong offset!");

// Function DBDUIViewsCore.DBDComboBoxString.SetData
// 0x0020 (0x0020 - 0x0000)
struct DBDComboBoxString_SetData final
{
public:
	TArray<class FString>                         OptionsList;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 DefaultOption;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDComboBoxString_SetData) == 0x000008, "Wrong alignment on DBDComboBoxString_SetData");
static_assert(sizeof(DBDComboBoxString_SetData) == 0x000020, "Wrong size on DBDComboBoxString_SetData");
static_assert(offsetof(DBDComboBoxString_SetData, OptionsList) == 0x000000, "Member 'DBDComboBoxString_SetData::OptionsList' has a wrong offset!");
static_assert(offsetof(DBDComboBoxString_SetData, DefaultOption) == 0x000010, "Member 'DBDComboBoxString_SetData::DefaultOption' has a wrong offset!");

// Function DBDUIViewsCore.DBDDropDownListButton.ToggleDropDownArrow
// 0x0001 (0x0001 - 0x0000)
struct DBDDropDownListButton_ToggleDropDownArrow final
{
public:
	bool                                          showArrow;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDropDownListButton_ToggleDropDownArrow) == 0x000001, "Wrong alignment on DBDDropDownListButton_ToggleDropDownArrow");
static_assert(sizeof(DBDDropDownListButton_ToggleDropDownArrow) == 0x000001, "Wrong size on DBDDropDownListButton_ToggleDropDownArrow");
static_assert(offsetof(DBDDropDownListButton_ToggleDropDownArrow, showArrow) == 0x000000, "Member 'DBDDropDownListButton_ToggleDropDownArrow::showArrow' has a wrong offset!");

// Function DBDUIViewsCore.DBDDropDownListWidget.BindToTrigger
// 0x0008 (0x0008 - 0x0000)
struct DBDDropDownListWidget_BindToTrigger final
{
public:
	class UCoreButtonWidget*                      triggerButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDropDownListWidget_BindToTrigger) == 0x000008, "Wrong alignment on DBDDropDownListWidget_BindToTrigger");
static_assert(sizeof(DBDDropDownListWidget_BindToTrigger) == 0x000008, "Wrong size on DBDDropDownListWidget_BindToTrigger");
static_assert(offsetof(DBDDropDownListWidget_BindToTrigger, triggerButton) == 0x000000, "Member 'DBDDropDownListWidget_BindToTrigger::triggerButton' has a wrong offset!");

// Function DBDUIViewsCore.DBDDropDownListWidget.OnOptionSelected
// 0x0008 (0x0008 - 0x0000)
struct DBDDropDownListWidget_OnOptionSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDropDownListWidget_OnOptionSelected) == 0x000008, "Wrong alignment on DBDDropDownListWidget_OnOptionSelected");
static_assert(sizeof(DBDDropDownListWidget_OnOptionSelected) == 0x000008, "Wrong size on DBDDropDownListWidget_OnOptionSelected");
static_assert(offsetof(DBDDropDownListWidget_OnOptionSelected, selectedButton) == 0x000000, "Member 'DBDDropDownListWidget_OnOptionSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.DBDDropDownListWidget.OnTriggerClicked
// 0x0008 (0x0008 - 0x0000)
struct DBDDropDownListWidget_OnTriggerClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDropDownListWidget_OnTriggerClicked) == 0x000008, "Wrong alignment on DBDDropDownListWidget_OnTriggerClicked");
static_assert(sizeof(DBDDropDownListWidget_OnTriggerClicked) == 0x000008, "Wrong size on DBDDropDownListWidget_OnTriggerClicked");
static_assert(offsetof(DBDDropDownListWidget_OnTriggerClicked, buttonTarget) == 0x000000, "Member 'DBDDropDownListWidget_OnTriggerClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.DBDDropDownListWidget.OnUserClicked
// 0x0080 (0x0080 - 0x0000)
struct DBDDropDownListWidget_OnUserClicked final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDropDownListWidget_OnUserClicked) == 0x000008, "Wrong alignment on DBDDropDownListWidget_OnUserClicked");
static_assert(sizeof(DBDDropDownListWidget_OnUserClicked) == 0x000080, "Wrong size on DBDDropDownListWidget_OnUserClicked");
static_assert(offsetof(DBDDropDownListWidget_OnUserClicked, MouseEvent) == 0x000000, "Member 'DBDDropDownListWidget_OnUserClicked::MouseEvent' has a wrong offset!");

// Function DBDUIViewsCore.DBDEditableTextBox.GetTextStyles
// 0x0010 (0x0010 - 0x0000)
struct DBDEditableTextBox_GetTextStyles final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDEditableTextBox_GetTextStyles) == 0x000008, "Wrong alignment on DBDEditableTextBox_GetTextStyles");
static_assert(sizeof(DBDEditableTextBox_GetTextStyles) == 0x000010, "Wrong size on DBDEditableTextBox_GetTextStyles");
static_assert(offsetof(DBDEditableTextBox_GetTextStyles, ReturnValue) == 0x000000, "Member 'DBDEditableTextBox_GetTextStyles::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDEditableTextBox.SetBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct DBDEditableTextBox_SetBackgroundColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDEditableTextBox_SetBackgroundColor) == 0x000004, "Wrong alignment on DBDEditableTextBox_SetBackgroundColor");
static_assert(sizeof(DBDEditableTextBox_SetBackgroundColor) == 0x000010, "Wrong size on DBDEditableTextBox_SetBackgroundColor");
static_assert(offsetof(DBDEditableTextBox_SetBackgroundColor, Color) == 0x000000, "Member 'DBDEditableTextBox_SetBackgroundColor::Color' has a wrong offset!");

// Function DBDUIViewsCore.DBDEditableTextBox.SetCharacterLimit
// 0x0004 (0x0004 - 0x0000)
struct DBDEditableTextBox_SetCharacterLimit final
{
public:
	int32                                         CharacterLimit;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDEditableTextBox_SetCharacterLimit) == 0x000004, "Wrong alignment on DBDEditableTextBox_SetCharacterLimit");
static_assert(sizeof(DBDEditableTextBox_SetCharacterLimit) == 0x000004, "Wrong size on DBDEditableTextBox_SetCharacterLimit");
static_assert(offsetof(DBDEditableTextBox_SetCharacterLimit, CharacterLimit) == 0x000000, "Member 'DBDEditableTextBox_SetCharacterLimit::CharacterLimit' has a wrong offset!");

// Function DBDUIViewsCore.DBDEditableTextBox.GetCharacterLimit
// 0x0004 (0x0004 - 0x0000)
struct DBDEditableTextBox_GetCharacterLimit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDEditableTextBox_GetCharacterLimit) == 0x000004, "Wrong alignment on DBDEditableTextBox_GetCharacterLimit");
static_assert(sizeof(DBDEditableTextBox_GetCharacterLimit) == 0x000004, "Wrong size on DBDEditableTextBox_GetCharacterLimit");
static_assert(offsetof(DBDEditableTextBox_GetCharacterLimit, ReturnValue) == 0x000000, "Member 'DBDEditableTextBox_GetCharacterLimit::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDImage.SetBrushFromSoftTextureWithDefault
// 0x0040 (0x0040 - 0x0000)
struct DBDImage_SetBrushFromSoftTextureWithDefault final
{
public:
	TSoftObjectPtr<class UTexture2D>              SoftTexture;                                       // 0x0000(0x0038)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          matchSize;                                         // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDImage_SetBrushFromSoftTextureWithDefault) == 0x000008, "Wrong alignment on DBDImage_SetBrushFromSoftTextureWithDefault");
static_assert(sizeof(DBDImage_SetBrushFromSoftTextureWithDefault) == 0x000040, "Wrong size on DBDImage_SetBrushFromSoftTextureWithDefault");
static_assert(offsetof(DBDImage_SetBrushFromSoftTextureWithDefault, SoftTexture) == 0x000000, "Member 'DBDImage_SetBrushFromSoftTextureWithDefault::SoftTexture' has a wrong offset!");
static_assert(offsetof(DBDImage_SetBrushFromSoftTextureWithDefault, matchSize) == 0x000038, "Member 'DBDImage_SetBrushFromSoftTextureWithDefault::matchSize' has a wrong offset!");

// Function DBDUIViewsCore.DBDImage.SetBrushFromTextureWithDefault
// 0x0010 (0x0010 - 0x0000)
struct DBDImage_SetBrushFromTextureWithDefault final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          matchSize;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDImage_SetBrushFromTextureWithDefault) == 0x000008, "Wrong alignment on DBDImage_SetBrushFromTextureWithDefault");
static_assert(sizeof(DBDImage_SetBrushFromTextureWithDefault) == 0x000010, "Wrong size on DBDImage_SetBrushFromTextureWithDefault");
static_assert(offsetof(DBDImage_SetBrushFromTextureWithDefault, Texture) == 0x000000, "Member 'DBDImage_SetBrushFromTextureWithDefault::Texture' has a wrong offset!");
static_assert(offsetof(DBDImage_SetBrushFromTextureWithDefault, matchSize) == 0x000008, "Member 'DBDImage_SetBrushFromTextureWithDefault::matchSize' has a wrong offset!");

// Function DBDUIViewsCore.DBDImage.SetMaterialTextureFromSoftTextureWithDefault
// 0x0048 (0x0048 - 0x0000)
struct DBDImage_SetMaterialTextureFromSoftTextureWithDefault final
{
public:
	TSoftObjectPtr<class UTexture2D>              SoftTexture;                                       // 0x0000(0x0038)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDImage_SetMaterialTextureFromSoftTextureWithDefault) == 0x000008, "Wrong alignment on DBDImage_SetMaterialTextureFromSoftTextureWithDefault");
static_assert(sizeof(DBDImage_SetMaterialTextureFromSoftTextureWithDefault) == 0x000048, "Wrong size on DBDImage_SetMaterialTextureFromSoftTextureWithDefault");
static_assert(offsetof(DBDImage_SetMaterialTextureFromSoftTextureWithDefault, SoftTexture) == 0x000000, "Member 'DBDImage_SetMaterialTextureFromSoftTextureWithDefault::SoftTexture' has a wrong offset!");
static_assert(offsetof(DBDImage_SetMaterialTextureFromSoftTextureWithDefault, ParameterName) == 0x000038, "Member 'DBDImage_SetMaterialTextureFromSoftTextureWithDefault::ParameterName' has a wrong offset!");

// Function DBDUIViewsCore.DBDPreviewWorldImage.GetCurrentWorldName
// 0x000C (0x000C - 0x0000)
struct DBDPreviewWorldImage_GetCurrentWorldName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPreviewWorldImage_GetCurrentWorldName) == 0x000004, "Wrong alignment on DBDPreviewWorldImage_GetCurrentWorldName");
static_assert(sizeof(DBDPreviewWorldImage_GetCurrentWorldName) == 0x00000C, "Wrong size on DBDPreviewWorldImage_GetCurrentWorldName");
static_assert(offsetof(DBDPreviewWorldImage_GetCurrentWorldName, ReturnValue) == 0x000000, "Member 'DBDPreviewWorldImage_GetCurrentWorldName::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDRichTextBlock.GetTextStyles
// 0x0010 (0x0010 - 0x0000)
struct DBDRichTextBlock_GetTextStyles final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDRichTextBlock_GetTextStyles) == 0x000008, "Wrong alignment on DBDRichTextBlock_GetTextStyles");
static_assert(sizeof(DBDRichTextBlock_GetTextStyles) == 0x000010, "Wrong size on DBDRichTextBlock_GetTextStyles");
static_assert(offsetof(DBDRichTextBlock_GetTextStyles, ReturnValue) == 0x000000, "Member 'DBDRichTextBlock_GetTextStyles::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDRichTextBlock.OnLargeTextSettingsChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDRichTextBlock_OnLargeTextSettingsChanged final
{
public:
	bool                                          isLargeText;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDRichTextBlock_OnLargeTextSettingsChanged) == 0x000001, "Wrong alignment on DBDRichTextBlock_OnLargeTextSettingsChanged");
static_assert(sizeof(DBDRichTextBlock_OnLargeTextSettingsChanged) == 0x000001, "Wrong size on DBDRichTextBlock_OnLargeTextSettingsChanged");
static_assert(offsetof(DBDRichTextBlock_OnLargeTextSettingsChanged, isLargeText) == 0x000000, "Member 'DBDRichTextBlock_OnLargeTextSettingsChanged::isLargeText' has a wrong offset!");

// Function DBDUIViewsCore.DBDRichTextBlock.OnSwitchDockStateChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDRichTextBlock_OnSwitchDockStateChanged final
{
public:
	bool                                          isDocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDRichTextBlock_OnSwitchDockStateChanged) == 0x000001, "Wrong alignment on DBDRichTextBlock_OnSwitchDockStateChanged");
static_assert(sizeof(DBDRichTextBlock_OnSwitchDockStateChanged) == 0x000001, "Wrong size on DBDRichTextBlock_OnSwitchDockStateChanged");
static_assert(offsetof(DBDRichTextBlock_OnSwitchDockStateChanged, isDocked) == 0x000000, "Member 'DBDRichTextBlock_OnSwitchDockStateChanged::isDocked' has a wrong offset!");

// Function DBDUIViewsCore.DBDRichTextBlock.SetHTMLText
// 0x0018 (0x0018 - 0x0000)
struct DBDRichTextBlock_SetHTMLText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDRichTextBlock_SetHTMLText) == 0x000008, "Wrong alignment on DBDRichTextBlock_SetHTMLText");
static_assert(sizeof(DBDRichTextBlock_SetHTMLText) == 0x000018, "Wrong size on DBDRichTextBlock_SetHTMLText");
static_assert(offsetof(DBDRichTextBlock_SetHTMLText, InText) == 0x000000, "Member 'DBDRichTextBlock_SetHTMLText::InText' has a wrong offset!");

// Function DBDUIViewsCore.DBDRichTextBlock.SetIsUpperCase
// 0x0001 (0x0001 - 0x0000)
struct DBDRichTextBlock_SetIsUpperCase final
{
public:
	bool                                          isUpperCase;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDRichTextBlock_SetIsUpperCase) == 0x000001, "Wrong alignment on DBDRichTextBlock_SetIsUpperCase");
static_assert(sizeof(DBDRichTextBlock_SetIsUpperCase) == 0x000001, "Wrong size on DBDRichTextBlock_SetIsUpperCase");
static_assert(offsetof(DBDRichTextBlock_SetIsUpperCase, isUpperCase) == 0x000000, "Member 'DBDRichTextBlock_SetIsUpperCase::isUpperCase' has a wrong offset!");

// Function DBDUIViewsCore.DBDRichTextBlock.SetWrapTextAt
// 0x0004 (0x0004 - 0x0000)
struct DBDRichTextBlock_SetWrapTextAt final
{
public:
	float                                         wrapTextAtValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDRichTextBlock_SetWrapTextAt) == 0x000004, "Wrong alignment on DBDRichTextBlock_SetWrapTextAt");
static_assert(sizeof(DBDRichTextBlock_SetWrapTextAt) == 0x000004, "Wrong size on DBDRichTextBlock_SetWrapTextAt");
static_assert(offsetof(DBDRichTextBlock_SetWrapTextAt, wrapTextAtValue) == 0x000000, "Member 'DBDRichTextBlock_SetWrapTextAt::wrapTextAtValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDRichTextBlock.GetIsUpperCase
// 0x0001 (0x0001 - 0x0000)
struct DBDRichTextBlock_GetIsUpperCase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDRichTextBlock_GetIsUpperCase) == 0x000001, "Wrong alignment on DBDRichTextBlock_GetIsUpperCase");
static_assert(sizeof(DBDRichTextBlock_GetIsUpperCase) == 0x000001, "Wrong size on DBDRichTextBlock_GetIsUpperCase");
static_assert(offsetof(DBDRichTextBlock_GetIsUpperCase, ReturnValue) == 0x000000, "Member 'DBDRichTextBlock_GetIsUpperCase::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDScrollBox.HandleControllerInput
// 0x0004 (0x0004 - 0x0000)
struct DBDScrollBox_HandleControllerInput final
{
public:
	float                                         analogValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDScrollBox_HandleControllerInput) == 0x000004, "Wrong alignment on DBDScrollBox_HandleControllerInput");
static_assert(sizeof(DBDScrollBox_HandleControllerInput) == 0x000004, "Wrong size on DBDScrollBox_HandleControllerInput");
static_assert(offsetof(DBDScrollBox_HandleControllerInput, analogValue) == 0x000000, "Member 'DBDScrollBox_HandleControllerInput::analogValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDScrollBox.HandleMouseWheelInput
// 0x0080 (0x0080 - 0x0000)
struct DBDScrollBox_HandleMouseWheelInput final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDScrollBox_HandleMouseWheelInput) == 0x000008, "Wrong alignment on DBDScrollBox_HandleMouseWheelInput");
static_assert(sizeof(DBDScrollBox_HandleMouseWheelInput) == 0x000080, "Wrong size on DBDScrollBox_HandleMouseWheelInput");
static_assert(offsetof(DBDScrollBox_HandleMouseWheelInput, PointerEvent) == 0x000000, "Member 'DBDScrollBox_HandleMouseWheelInput::PointerEvent' has a wrong offset!");

// Function DBDUIViewsCore.DBDScrollBox.IsMouseOver
// 0x0001 (0x0001 - 0x0000)
struct DBDScrollBox_IsMouseOver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDScrollBox_IsMouseOver) == 0x000001, "Wrong alignment on DBDScrollBox_IsMouseOver");
static_assert(sizeof(DBDScrollBox_IsMouseOver) == 0x000001, "Wrong size on DBDScrollBox_IsMouseOver");
static_assert(offsetof(DBDScrollBox_IsMouseOver, ReturnValue) == 0x000000, "Member 'DBDScrollBox_IsMouseOver::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDScrollBox.OnControlModeChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDScrollBox_OnControlModeChanged final
{
public:
	EControlMode                                  controlMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDScrollBox_OnControlModeChanged) == 0x000001, "Wrong alignment on DBDScrollBox_OnControlModeChanged");
static_assert(sizeof(DBDScrollBox_OnControlModeChanged) == 0x000001, "Wrong size on DBDScrollBox_OnControlModeChanged");
static_assert(offsetof(DBDScrollBox_OnControlModeChanged, controlMode) == 0x000000, "Member 'DBDScrollBox_OnControlModeChanged::controlMode' has a wrong offset!");

// Function DBDUIViewsCore.DBDScrollBox.SetDisplayPrompt
// 0x0008 (0x0008 - 0x0000)
struct DBDScrollBox_SetDisplayPrompt final
{
public:
	class UCoreKeyListenerInputPromptWidget*      DisplayPrompt;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDScrollBox_SetDisplayPrompt) == 0x000008, "Wrong alignment on DBDScrollBox_SetDisplayPrompt");
static_assert(sizeof(DBDScrollBox_SetDisplayPrompt) == 0x000008, "Wrong size on DBDScrollBox_SetDisplayPrompt");
static_assert(offsetof(DBDScrollBox_SetDisplayPrompt, DisplayPrompt) == 0x000000, "Member 'DBDScrollBox_SetDisplayPrompt::DisplayPrompt' has a wrong offset!");

// Function DBDUIViewsCore.DBDScrollBox.SetShouldScrollOnMouseOver
// 0x0001 (0x0001 - 0x0000)
struct DBDScrollBox_SetShouldScrollOnMouseOver final
{
public:
	bool                                          shouldScrollOnMouseOver;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDScrollBox_SetShouldScrollOnMouseOver) == 0x000001, "Wrong alignment on DBDScrollBox_SetShouldScrollOnMouseOver");
static_assert(sizeof(DBDScrollBox_SetShouldScrollOnMouseOver) == 0x000001, "Wrong size on DBDScrollBox_SetShouldScrollOnMouseOver");
static_assert(offsetof(DBDScrollBox_SetShouldScrollOnMouseOver, shouldScrollOnMouseOver) == 0x000000, "Member 'DBDScrollBox_SetShouldScrollOnMouseOver::shouldScrollOnMouseOver' has a wrong offset!");

// Function DBDUIViewsCore.DBDScrollBox.SetShowScrollDisplayPrompt
// 0x0001 (0x0001 - 0x0000)
struct DBDScrollBox_SetShowScrollDisplayPrompt final
{
public:
	EShowScrollDisplayPrompt                      showScrollDisplayPrompt;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDScrollBox_SetShowScrollDisplayPrompt) == 0x000001, "Wrong alignment on DBDScrollBox_SetShowScrollDisplayPrompt");
static_assert(sizeof(DBDScrollBox_SetShowScrollDisplayPrompt) == 0x000001, "Wrong size on DBDScrollBox_SetShowScrollDisplayPrompt");
static_assert(offsetof(DBDScrollBox_SetShowScrollDisplayPrompt, showScrollDisplayPrompt) == 0x000000, "Member 'DBDScrollBox_SetShowScrollDisplayPrompt::showScrollDisplayPrompt' has a wrong offset!");

// Function DBDUIViewsCore.DBDScrollBox.UpdateSmoothMask
// 0x0004 (0x0004 - 0x0000)
struct DBDScrollBox_UpdateSmoothMask final
{
public:
	float                                         CurrentOffset;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDScrollBox_UpdateSmoothMask) == 0x000004, "Wrong alignment on DBDScrollBox_UpdateSmoothMask");
static_assert(sizeof(DBDScrollBox_UpdateSmoothMask) == 0x000004, "Wrong size on DBDScrollBox_UpdateSmoothMask");
static_assert(offsetof(DBDScrollBox_UpdateSmoothMask, CurrentOffset) == 0x000000, "Member 'DBDScrollBox_UpdateSmoothMask::CurrentOffset' has a wrong offset!");

// Function DBDUIViewsCore.DBDScrollBox.IsScrollable
// 0x0001 (0x0001 - 0x0000)
struct DBDScrollBox_IsScrollable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDScrollBox_IsScrollable) == 0x000001, "Wrong alignment on DBDScrollBox_IsScrollable");
static_assert(sizeof(DBDScrollBox_IsScrollable) == 0x000001, "Wrong size on DBDScrollBox_IsScrollable");
static_assert(offsetof(DBDScrollBox_IsScrollable, ReturnValue) == 0x000000, "Member 'DBDScrollBox_IsScrollable::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDSlider.IsValidValue
// 0x0008 (0x0008 - 0x0000)
struct DBDSlider_IsValidValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDSlider_IsValidValue) == 0x000004, "Wrong alignment on DBDSlider_IsValidValue");
static_assert(sizeof(DBDSlider_IsValidValue) == 0x000008, "Wrong size on DBDSlider_IsValidValue");
static_assert(offsetof(DBDSlider_IsValidValue, InValue) == 0x000000, "Member 'DBDSlider_IsValidValue::InValue' has a wrong offset!");
static_assert(offsetof(DBDSlider_IsValidValue, ReturnValue) == 0x000004, "Member 'DBDSlider_IsValidValue::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDSlider.OnControlModeChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDSlider_OnControlModeChanged final
{
public:
	EControlMode                                  controlMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDSlider_OnControlModeChanged) == 0x000001, "Wrong alignment on DBDSlider_OnControlModeChanged");
static_assert(sizeof(DBDSlider_OnControlModeChanged) == 0x000001, "Wrong size on DBDSlider_OnControlModeChanged");
static_assert(offsetof(DBDSlider_OnControlModeChanged, controlMode) == 0x000000, "Member 'DBDSlider_OnControlModeChanged::controlMode' has a wrong offset!");

// Function DBDUIViewsCore.DBDTextBlock.GetTextStyles
// 0x0010 (0x0010 - 0x0000)
struct DBDTextBlock_GetTextStyles final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTextBlock_GetTextStyles) == 0x000008, "Wrong alignment on DBDTextBlock_GetTextStyles");
static_assert(sizeof(DBDTextBlock_GetTextStyles) == 0x000010, "Wrong size on DBDTextBlock_GetTextStyles");
static_assert(offsetof(DBDTextBlock_GetTextStyles, ReturnValue) == 0x000000, "Member 'DBDTextBlock_GetTextStyles::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDTextBlock.OnLargeTextSettingsChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDTextBlock_OnLargeTextSettingsChanged final
{
public:
	bool                                          isLargeText;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTextBlock_OnLargeTextSettingsChanged) == 0x000001, "Wrong alignment on DBDTextBlock_OnLargeTextSettingsChanged");
static_assert(sizeof(DBDTextBlock_OnLargeTextSettingsChanged) == 0x000001, "Wrong size on DBDTextBlock_OnLargeTextSettingsChanged");
static_assert(offsetof(DBDTextBlock_OnLargeTextSettingsChanged, isLargeText) == 0x000000, "Member 'DBDTextBlock_OnLargeTextSettingsChanged::isLargeText' has a wrong offset!");

// Function DBDUIViewsCore.DBDTextBlock.OnSwitchDockStateChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDTextBlock_OnSwitchDockStateChanged final
{
public:
	bool                                          isDocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTextBlock_OnSwitchDockStateChanged) == 0x000001, "Wrong alignment on DBDTextBlock_OnSwitchDockStateChanged");
static_assert(sizeof(DBDTextBlock_OnSwitchDockStateChanged) == 0x000001, "Wrong size on DBDTextBlock_OnSwitchDockStateChanged");
static_assert(offsetof(DBDTextBlock_OnSwitchDockStateChanged, isDocked) == 0x000000, "Member 'DBDTextBlock_OnSwitchDockStateChanged::isDocked' has a wrong offset!");

// Function DBDUIViewsCore.DBDTextBlock.SetIsUpperCase
// 0x0001 (0x0001 - 0x0000)
struct DBDTextBlock_SetIsUpperCase final
{
public:
	bool                                          isUpperCase;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTextBlock_SetIsUpperCase) == 0x000001, "Wrong alignment on DBDTextBlock_SetIsUpperCase");
static_assert(sizeof(DBDTextBlock_SetIsUpperCase) == 0x000001, "Wrong size on DBDTextBlock_SetIsUpperCase");
static_assert(offsetof(DBDTextBlock_SetIsUpperCase, isUpperCase) == 0x000000, "Member 'DBDTextBlock_SetIsUpperCase::isUpperCase' has a wrong offset!");

// Function DBDUIViewsCore.DBDTextBlock.GetIsUpperCase
// 0x0001 (0x0001 - 0x0000)
struct DBDTextBlock_GetIsUpperCase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTextBlock_GetIsUpperCase) == 0x000001, "Wrong alignment on DBDTextBlock_GetIsUpperCase");
static_assert(sizeof(DBDTextBlock_GetIsUpperCase) == 0x000001, "Wrong size on DBDTextBlock_GetIsUpperCase");
static_assert(offsetof(DBDTextBlock_GetIsUpperCase, ReturnValue) == 0x000000, "Member 'DBDTextBlock_GetIsUpperCase::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.HideTooltip
// 0x0001 (0x0001 - 0x0000)
struct DBDTooltipManager_HideTooltip final
{
public:
	ETooltipPriority                              Priority;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTooltipManager_HideTooltip) == 0x000001, "Wrong alignment on DBDTooltipManager_HideTooltip");
static_assert(sizeof(DBDTooltipManager_HideTooltip) == 0x000001, "Wrong size on DBDTooltipManager_HideTooltip");
static_assert(offsetof(DBDTooltipManager_HideTooltip, Priority) == 0x000000, "Member 'DBDTooltipManager_HideTooltip::Priority' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveCompendiumTooltip
// 0x00B8 (0x00B8 - 0x0000)
struct DBDTooltipManager_ShowArchiveCompendiumTooltip final
{
public:
	struct FCompendiumButtonData                  tooltipViewData;                                   // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0078(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x00B0(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x00B1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowArchiveCompendiumTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowArchiveCompendiumTooltip");
static_assert(sizeof(DBDTooltipManager_ShowArchiveCompendiumTooltip) == 0x0000B8, "Wrong size on DBDTooltipManager_ShowArchiveCompendiumTooltip");
static_assert(offsetof(DBDTooltipManager_ShowArchiveCompendiumTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowArchiveCompendiumTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveCompendiumTooltip, triggerGeometry) == 0x000078, "Member 'DBDTooltipManager_ShowArchiveCompendiumTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveCompendiumTooltip, tooltipHorizontalAlignment) == 0x0000B0, "Member 'DBDTooltipManager_ShowArchiveCompendiumTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveCompendiumTooltip, tooltipVerticalAlignment) == 0x0000B1, "Member 'DBDTooltipManager_ShowArchiveCompendiumTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveNodeTooltip
// 0x00F8 (0x00F8 - 0x0000)
struct DBDTooltipManager_ShowArchiveNodeTooltip final
{
public:
	struct FArchiveNodeViewData                   tooltipViewData;                                   // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x00B8(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x00F0(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x00F1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowArchiveNodeTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowArchiveNodeTooltip");
static_assert(sizeof(DBDTooltipManager_ShowArchiveNodeTooltip) == 0x0000F8, "Wrong size on DBDTooltipManager_ShowArchiveNodeTooltip");
static_assert(offsetof(DBDTooltipManager_ShowArchiveNodeTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowArchiveNodeTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveNodeTooltip, triggerGeometry) == 0x0000B8, "Member 'DBDTooltipManager_ShowArchiveNodeTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveNodeTooltip, tooltipHorizontalAlignment) == 0x0000F0, "Member 'DBDTooltipManager_ShowArchiveNodeTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveNodeTooltip, tooltipVerticalAlignment) == 0x0000F1, "Member 'DBDTooltipManager_ShowArchiveNodeTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowArchivePassTooltip
// 0x00D8 (0x00D8 - 0x0000)
struct DBDTooltipManager_ShowArchivePassTooltip final
{
public:
	struct FArchivePassTooltipViewData            tooltipViewData;                                   // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0098(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x00D0(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x00D1(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowArchivePassTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowArchivePassTooltip");
static_assert(sizeof(DBDTooltipManager_ShowArchivePassTooltip) == 0x0000D8, "Wrong size on DBDTooltipManager_ShowArchivePassTooltip");
static_assert(offsetof(DBDTooltipManager_ShowArchivePassTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowArchivePassTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchivePassTooltip, triggerGeometry) == 0x000098, "Member 'DBDTooltipManager_ShowArchivePassTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchivePassTooltip, tooltipHorizontalAlignment) == 0x0000D0, "Member 'DBDTooltipManager_ShowArchivePassTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchivePassTooltip, tooltipVerticalAlignment) == 0x0000D1, "Member 'DBDTooltipManager_ShowArchivePassTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveRewardNodeTooltip
// 0x02B0 (0x02B0 - 0x0000)
struct DBDTooltipManager_ShowArchiveRewardNodeTooltip final
{
public:
	struct FArchiveRewardNodeTooltipViewData      tooltipViewData;                                   // 0x0000(0x0270)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0270(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x02A8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x02A9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA[0x6];                                      // 0x02AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowArchiveRewardNodeTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowArchiveRewardNodeTooltip");
static_assert(sizeof(DBDTooltipManager_ShowArchiveRewardNodeTooltip) == 0x0002B0, "Wrong size on DBDTooltipManager_ShowArchiveRewardNodeTooltip");
static_assert(offsetof(DBDTooltipManager_ShowArchiveRewardNodeTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowArchiveRewardNodeTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveRewardNodeTooltip, triggerGeometry) == 0x000270, "Member 'DBDTooltipManager_ShowArchiveRewardNodeTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveRewardNodeTooltip, tooltipHorizontalAlignment) == 0x0002A8, "Member 'DBDTooltipManager_ShowArchiveRewardNodeTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveRewardNodeTooltip, tooltipVerticalAlignment) == 0x0002A9, "Member 'DBDTooltipManager_ShowArchiveRewardNodeTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowBloodpointBonusTooltip
// 0x0090 (0x0090 - 0x0000)
struct DBDTooltipManager_ShowBloodpointBonusTooltip final
{
public:
	struct FBloodpointBonusTooltipViewData        tooltipViewData;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTooltipTriggerGeometry                triggerGeometry;                                   // 0x0028(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0088(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0089(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowBloodpointBonusTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowBloodpointBonusTooltip");
static_assert(sizeof(DBDTooltipManager_ShowBloodpointBonusTooltip) == 0x000090, "Wrong size on DBDTooltipManager_ShowBloodpointBonusTooltip");
static_assert(offsetof(DBDTooltipManager_ShowBloodpointBonusTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowBloodpointBonusTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowBloodpointBonusTooltip, triggerGeometry) == 0x000028, "Member 'DBDTooltipManager_ShowBloodpointBonusTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowBloodpointBonusTooltip, tooltipHorizontalAlignment) == 0x000088, "Member 'DBDTooltipManager_ShowBloodpointBonusTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowBloodpointBonusTooltip, tooltipVerticalAlignment) == 0x000089, "Member 'DBDTooltipManager_ShowBloodpointBonusTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowChallengeTooltip
// 0x0068 (0x0068 - 0x0000)
struct DBDTooltipManager_ShowChallengeTooltip final
{
public:
	struct FChallengeTooltipViewData              tooltipViewData;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0028(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0061(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowChallengeTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowChallengeTooltip");
static_assert(sizeof(DBDTooltipManager_ShowChallengeTooltip) == 0x000068, "Wrong size on DBDTooltipManager_ShowChallengeTooltip");
static_assert(offsetof(DBDTooltipManager_ShowChallengeTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowChallengeTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowChallengeTooltip, triggerGeometry) == 0x000028, "Member 'DBDTooltipManager_ShowChallengeTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowChallengeTooltip, tooltipHorizontalAlignment) == 0x000060, "Member 'DBDTooltipManager_ShowChallengeTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowChallengeTooltip, tooltipVerticalAlignment) == 0x000061, "Member 'DBDTooltipManager_ShowChallengeTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowCharacterTooltip
// 0x0100 (0x0100 - 0x0000)
struct DBDTooltipManager_ShowCharacterTooltip final
{
public:
	struct FCharacterTooltipViewData              tooltipViewData;                                   // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x00C0(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x00F8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x00F9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowCharacterTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowCharacterTooltip");
static_assert(sizeof(DBDTooltipManager_ShowCharacterTooltip) == 0x000100, "Wrong size on DBDTooltipManager_ShowCharacterTooltip");
static_assert(offsetof(DBDTooltipManager_ShowCharacterTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowCharacterTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCharacterTooltip, triggerGeometry) == 0x0000C0, "Member 'DBDTooltipManager_ShowCharacterTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCharacterTooltip, tooltipHorizontalAlignment) == 0x0000F8, "Member 'DBDTooltipManager_ShowCharacterTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCharacterTooltip, tooltipVerticalAlignment) == 0x0000F9, "Member 'DBDTooltipManager_ShowCharacterTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowCurrencyTooltip
// 0x0140 (0x0140 - 0x0000)
struct DBDTooltipManager_ShowCurrencyTooltip final
{
public:
	struct FCurrencyProgressionTooltipViewData    tooltipViewData;                                   // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0100(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0138(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0139(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowCurrencyTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowCurrencyTooltip");
static_assert(sizeof(DBDTooltipManager_ShowCurrencyTooltip) == 0x000140, "Wrong size on DBDTooltipManager_ShowCurrencyTooltip");
static_assert(offsetof(DBDTooltipManager_ShowCurrencyTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowCurrencyTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCurrencyTooltip, triggerGeometry) == 0x000100, "Member 'DBDTooltipManager_ShowCurrencyTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCurrencyTooltip, tooltipHorizontalAlignment) == 0x000138, "Member 'DBDTooltipManager_ShowCurrencyTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCurrencyTooltip, tooltipVerticalAlignment) == 0x000139, "Member 'DBDTooltipManager_ShowCurrencyTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowCustomizationTooltip
// 0x0198 (0x0198 - 0x0000)
struct DBDTooltipManager_ShowCustomizationTooltip final
{
public:
	struct FCustomizationTooltipViewData          tooltipViewData;                                   // 0x0000(0x0158)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0158(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0190(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0191(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowCustomizationTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowCustomizationTooltip");
static_assert(sizeof(DBDTooltipManager_ShowCustomizationTooltip) == 0x000198, "Wrong size on DBDTooltipManager_ShowCustomizationTooltip");
static_assert(offsetof(DBDTooltipManager_ShowCustomizationTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowCustomizationTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCustomizationTooltip, triggerGeometry) == 0x000158, "Member 'DBDTooltipManager_ShowCustomizationTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCustomizationTooltip, tooltipHorizontalAlignment) == 0x000190, "Member 'DBDTooltipManager_ShowCustomizationTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCustomizationTooltip, tooltipVerticalAlignment) == 0x000191, "Member 'DBDTooltipManager_ShowCustomizationTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowDisabledButtonTooltip
// 0x0058 (0x0058 - 0x0000)
struct DBDTooltipManager_ShowDisabledButtonTooltip final
{
public:
	class FText                                   disabledButtonTooltipText;                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0018(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0051(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowDisabledButtonTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowDisabledButtonTooltip");
static_assert(sizeof(DBDTooltipManager_ShowDisabledButtonTooltip) == 0x000058, "Wrong size on DBDTooltipManager_ShowDisabledButtonTooltip");
static_assert(offsetof(DBDTooltipManager_ShowDisabledButtonTooltip, disabledButtonTooltipText) == 0x000000, "Member 'DBDTooltipManager_ShowDisabledButtonTooltip::disabledButtonTooltipText' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowDisabledButtonTooltip, triggerGeometry) == 0x000018, "Member 'DBDTooltipManager_ShowDisabledButtonTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowDisabledButtonTooltip, tooltipHorizontalAlignment) == 0x000050, "Member 'DBDTooltipManager_ShowDisabledButtonTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowDisabledButtonTooltip, tooltipVerticalAlignment) == 0x000051, "Member 'DBDTooltipManager_ShowDisabledButtonTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowFollowedQuestsTooltip
// 0x0080 (0x0080 - 0x0000)
struct DBDTooltipManager_ShowFollowedQuestsTooltip final
{
public:
	struct FFollowedQuestsTooltipViewData         tooltipViewData;                                   // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0040(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0078(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0079(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowFollowedQuestsTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowFollowedQuestsTooltip");
static_assert(sizeof(DBDTooltipManager_ShowFollowedQuestsTooltip) == 0x000080, "Wrong size on DBDTooltipManager_ShowFollowedQuestsTooltip");
static_assert(offsetof(DBDTooltipManager_ShowFollowedQuestsTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowFollowedQuestsTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowFollowedQuestsTooltip, triggerGeometry) == 0x000040, "Member 'DBDTooltipManager_ShowFollowedQuestsTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowFollowedQuestsTooltip, tooltipHorizontalAlignment) == 0x000078, "Member 'DBDTooltipManager_ShowFollowedQuestsTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowFollowedQuestsTooltip, tooltipVerticalAlignment) == 0x000079, "Member 'DBDTooltipManager_ShowFollowedQuestsTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowLabelTooltip
// 0x0058 (0x0058 - 0x0000)
struct DBDTooltipManager_ShowLabelTooltip final
{
public:
	class FText                                   tooltipViewData;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0018(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowLabelTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowLabelTooltip");
static_assert(sizeof(DBDTooltipManager_ShowLabelTooltip) == 0x000058, "Wrong size on DBDTooltipManager_ShowLabelTooltip");
static_assert(offsetof(DBDTooltipManager_ShowLabelTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowLabelTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLabelTooltip, triggerGeometry) == 0x000018, "Member 'DBDTooltipManager_ShowLabelTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLabelTooltip, tooltipHorizontalAlignment) == 0x000050, "Member 'DBDTooltipManager_ShowLabelTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLabelTooltip, tooltipVerticalAlignment) == 0x000051, "Member 'DBDTooltipManager_ShowLabelTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowLoadoutTooltip
// 0x0138 (0x0138 - 0x0000)
struct DBDTooltipManager_ShowLoadoutTooltip final
{
public:
	struct FLoadoutTooltipData                    tooltipViewData;                                   // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x00F8(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0130(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0131(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowLoadoutTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowLoadoutTooltip");
static_assert(sizeof(DBDTooltipManager_ShowLoadoutTooltip) == 0x000138, "Wrong size on DBDTooltipManager_ShowLoadoutTooltip");
static_assert(offsetof(DBDTooltipManager_ShowLoadoutTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowLoadoutTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLoadoutTooltip, triggerGeometry) == 0x0000F8, "Member 'DBDTooltipManager_ShowLoadoutTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLoadoutTooltip, tooltipHorizontalAlignment) == 0x000130, "Member 'DBDTooltipManager_ShowLoadoutTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLoadoutTooltip, tooltipVerticalAlignment) == 0x000131, "Member 'DBDTooltipManager_ShowLoadoutTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowLockedFeatureTooltip
// 0x0080 (0x0080 - 0x0000)
struct DBDTooltipManager_ShowLockedFeatureTooltip final
{
public:
	struct FLockedFeatureTooltipViewData          tooltipViewData;                                   // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0040(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0078(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0079(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowLockedFeatureTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowLockedFeatureTooltip");
static_assert(sizeof(DBDTooltipManager_ShowLockedFeatureTooltip) == 0x000080, "Wrong size on DBDTooltipManager_ShowLockedFeatureTooltip");
static_assert(offsetof(DBDTooltipManager_ShowLockedFeatureTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowLockedFeatureTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLockedFeatureTooltip, triggerGeometry) == 0x000040, "Member 'DBDTooltipManager_ShowLockedFeatureTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLockedFeatureTooltip, tooltipHorizontalAlignment) == 0x000078, "Member 'DBDTooltipManager_ShowLockedFeatureTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLockedFeatureTooltip, tooltipVerticalAlignment) == 0x000079, "Member 'DBDTooltipManager_ShowLockedFeatureTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowMapShowcaseTooltip
// 0x00E8 (0x00E8 - 0x0000)
struct DBDTooltipManager_ShowMapShowcaseTooltip final
{
public:
	struct FMapShowcaseTooltipViewData            tooltipViewData;                                   // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTooltipTriggerGeometry                triggerGeometry;                                   // 0x0080(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x00E0(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x00E1(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowMapShowcaseTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowMapShowcaseTooltip");
static_assert(sizeof(DBDTooltipManager_ShowMapShowcaseTooltip) == 0x0000E8, "Wrong size on DBDTooltipManager_ShowMapShowcaseTooltip");
static_assert(offsetof(DBDTooltipManager_ShowMapShowcaseTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowMapShowcaseTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowMapShowcaseTooltip, triggerGeometry) == 0x000080, "Member 'DBDTooltipManager_ShowMapShowcaseTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowMapShowcaseTooltip, tooltipHorizontalAlignment) == 0x0000E0, "Member 'DBDTooltipManager_ShowMapShowcaseTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowMapShowcaseTooltip, tooltipVerticalAlignment) == 0x0000E1, "Member 'DBDTooltipManager_ShowMapShowcaseTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowNotEnoughCurrencyModal
// 0x0078 (0x0078 - 0x0000)
struct DBDTooltipManager_ShowNotEnoughCurrencyModal final
{
public:
	struct FNotEnoughCurrencyModalViewData        ViewData;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0038(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0070(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0071(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowNotEnoughCurrencyModal) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowNotEnoughCurrencyModal");
static_assert(sizeof(DBDTooltipManager_ShowNotEnoughCurrencyModal) == 0x000078, "Wrong size on DBDTooltipManager_ShowNotEnoughCurrencyModal");
static_assert(offsetof(DBDTooltipManager_ShowNotEnoughCurrencyModal, ViewData) == 0x000000, "Member 'DBDTooltipManager_ShowNotEnoughCurrencyModal::ViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowNotEnoughCurrencyModal, triggerGeometry) == 0x000038, "Member 'DBDTooltipManager_ShowNotEnoughCurrencyModal::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowNotEnoughCurrencyModal, tooltipHorizontalAlignment) == 0x000070, "Member 'DBDTooltipManager_ShowNotEnoughCurrencyModal::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowNotEnoughCurrencyModal, tooltipVerticalAlignment) == 0x000071, "Member 'DBDTooltipManager_ShowNotEnoughCurrencyModal::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowObjectiveTrackerTooltip
// 0x0148 (0x0148 - 0x0000)
struct DBDTooltipManager_ShowObjectiveTrackerTooltip final
{
public:
	struct FEventObjectiveTrackerViewData         tooltipViewData;                                   // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0108(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0140(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0141(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowObjectiveTrackerTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowObjectiveTrackerTooltip");
static_assert(sizeof(DBDTooltipManager_ShowObjectiveTrackerTooltip) == 0x000148, "Wrong size on DBDTooltipManager_ShowObjectiveTrackerTooltip");
static_assert(offsetof(DBDTooltipManager_ShowObjectiveTrackerTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowObjectiveTrackerTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowObjectiveTrackerTooltip, triggerGeometry) == 0x000108, "Member 'DBDTooltipManager_ShowObjectiveTrackerTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowObjectiveTrackerTooltip, tooltipHorizontalAlignment) == 0x000140, "Member 'DBDTooltipManager_ShowObjectiveTrackerTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowObjectiveTrackerTooltip, tooltipVerticalAlignment) == 0x000141, "Member 'DBDTooltipManager_ShowObjectiveTrackerTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowPlayerLevelTooltip
// 0x004C (0x004C - 0x0000)
struct DBDTooltipManager_ShowPlayerLevelTooltip final
{
public:
	struct FCorePlayerLevelTooltipViewData        tooltipViewData;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowPlayerLevelTooltip) == 0x000004, "Wrong alignment on DBDTooltipManager_ShowPlayerLevelTooltip");
static_assert(sizeof(DBDTooltipManager_ShowPlayerLevelTooltip) == 0x00004C, "Wrong size on DBDTooltipManager_ShowPlayerLevelTooltip");
static_assert(offsetof(DBDTooltipManager_ShowPlayerLevelTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowPlayerLevelTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowPlayerLevelTooltip, triggerGeometry) == 0x000010, "Member 'DBDTooltipManager_ShowPlayerLevelTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowPlayerLevelTooltip, tooltipHorizontalAlignment) == 0x000048, "Member 'DBDTooltipManager_ShowPlayerLevelTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowPlayerLevelTooltip, tooltipVerticalAlignment) == 0x000049, "Member 'DBDTooltipManager_ShowPlayerLevelTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowPrestigeTooltip
// 0x0044 (0x0044 - 0x0000)
struct DBDTooltipManager_ShowPrestigeTooltip final
{
public:
	struct FPrestigeViewData                      tooltipViewData;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowPrestigeTooltip) == 0x000004, "Wrong alignment on DBDTooltipManager_ShowPrestigeTooltip");
static_assert(sizeof(DBDTooltipManager_ShowPrestigeTooltip) == 0x000044, "Wrong size on DBDTooltipManager_ShowPrestigeTooltip");
static_assert(offsetof(DBDTooltipManager_ShowPrestigeTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowPrestigeTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowPrestigeTooltip, triggerGeometry) == 0x000008, "Member 'DBDTooltipManager_ShowPrestigeTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowPrestigeTooltip, tooltipHorizontalAlignment) == 0x000040, "Member 'DBDTooltipManager_ShowPrestigeTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowPrestigeTooltip, tooltipVerticalAlignment) == 0x000041, "Member 'DBDTooltipManager_ShowPrestigeTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowRankTooltip
// 0x0060 (0x0060 - 0x0000)
struct DBDTooltipManager_ShowRankTooltip final
{
public:
	struct FRankTooltipViewData                   tooltipViewData;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0020(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0058(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0059(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowRankTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowRankTooltip");
static_assert(sizeof(DBDTooltipManager_ShowRankTooltip) == 0x000060, "Wrong size on DBDTooltipManager_ShowRankTooltip");
static_assert(offsetof(DBDTooltipManager_ShowRankTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowRankTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowRankTooltip, triggerGeometry) == 0x000020, "Member 'DBDTooltipManager_ShowRankTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowRankTooltip, tooltipHorizontalAlignment) == 0x000058, "Member 'DBDTooltipManager_ShowRankTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowRankTooltip, tooltipVerticalAlignment) == 0x000059, "Member 'DBDTooltipManager_ShowRankTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowSharedPerksTooltip
// 0x0040 (0x0040 - 0x0000)
struct DBDTooltipManager_ShowSharedPerksTooltip final
{
public:
	struct FSharedPerksTooltipViewData            tooltipViewData;                                   // 0x0000(0x0002)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              triggerGeometry;                                   // 0x0004(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x003C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowSharedPerksTooltip) == 0x000004, "Wrong alignment on DBDTooltipManager_ShowSharedPerksTooltip");
static_assert(sizeof(DBDTooltipManager_ShowSharedPerksTooltip) == 0x000040, "Wrong size on DBDTooltipManager_ShowSharedPerksTooltip");
static_assert(offsetof(DBDTooltipManager_ShowSharedPerksTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowSharedPerksTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowSharedPerksTooltip, triggerGeometry) == 0x000004, "Member 'DBDTooltipManager_ShowSharedPerksTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowSharedPerksTooltip, tooltipHorizontalAlignment) == 0x00003C, "Member 'DBDTooltipManager_ShowSharedPerksTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowSharedPerksTooltip, tooltipVerticalAlignment) == 0x00003D, "Member 'DBDTooltipManager_ShowSharedPerksTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBox.AddChildToWrapBox
// 0x0010 (0x0010 - 0x0000)
struct DBDWrapBox_AddChildToWrapBox final
{
public:
	class UWidget*                                Content;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDWrapBoxSlot*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBox_AddChildToWrapBox) == 0x000008, "Wrong alignment on DBDWrapBox_AddChildToWrapBox");
static_assert(sizeof(DBDWrapBox_AddChildToWrapBox) == 0x000010, "Wrong size on DBDWrapBox_AddChildToWrapBox");
static_assert(offsetof(DBDWrapBox_AddChildToWrapBox, Content) == 0x000000, "Member 'DBDWrapBox_AddChildToWrapBox::Content' has a wrong offset!");
static_assert(offsetof(DBDWrapBox_AddChildToWrapBox, ReturnValue) == 0x000008, "Member 'DBDWrapBox_AddChildToWrapBox::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBox.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct DBDWrapBox_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          inHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBox_SetHorizontalAlignment) == 0x000001, "Wrong alignment on DBDWrapBox_SetHorizontalAlignment");
static_assert(sizeof(DBDWrapBox_SetHorizontalAlignment) == 0x000001, "Wrong size on DBDWrapBox_SetHorizontalAlignment");
static_assert(offsetof(DBDWrapBox_SetHorizontalAlignment, inHorizontalAlignment) == 0x000000, "Member 'DBDWrapBox_SetHorizontalAlignment::inHorizontalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBox.SetInnerSlotPadding
// 0x0010 (0x0010 - 0x0000)
struct DBDWrapBox_SetInnerSlotPadding final
{
public:
	struct FVector2D                              InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBox_SetInnerSlotPadding) == 0x000008, "Wrong alignment on DBDWrapBox_SetInnerSlotPadding");
static_assert(sizeof(DBDWrapBox_SetInnerSlotPadding) == 0x000010, "Wrong size on DBDWrapBox_SetInnerSlotPadding");
static_assert(offsetof(DBDWrapBox_SetInnerSlotPadding, InPadding) == 0x000000, "Member 'DBDWrapBox_SetInnerSlotPadding::InPadding' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBoxSlot.SetFillEmptySpace
// 0x0001 (0x0001 - 0x0000)
struct DBDWrapBoxSlot_SetFillEmptySpace final
{
public:
	bool                                          InbFillEmptySpace;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBoxSlot_SetFillEmptySpace) == 0x000001, "Wrong alignment on DBDWrapBoxSlot_SetFillEmptySpace");
static_assert(sizeof(DBDWrapBoxSlot_SetFillEmptySpace) == 0x000001, "Wrong size on DBDWrapBoxSlot_SetFillEmptySpace");
static_assert(offsetof(DBDWrapBoxSlot_SetFillEmptySpace, InbFillEmptySpace) == 0x000000, "Member 'DBDWrapBoxSlot_SetFillEmptySpace::InbFillEmptySpace' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBoxSlot.SetFillSpanWhenLessThan
// 0x0004 (0x0004 - 0x0000)
struct DBDWrapBoxSlot_SetFillSpanWhenLessThan final
{
public:
	float                                         InFillSpanWhenLessThan;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBoxSlot_SetFillSpanWhenLessThan) == 0x000004, "Wrong alignment on DBDWrapBoxSlot_SetFillSpanWhenLessThan");
static_assert(sizeof(DBDWrapBoxSlot_SetFillSpanWhenLessThan) == 0x000004, "Wrong size on DBDWrapBoxSlot_SetFillSpanWhenLessThan");
static_assert(offsetof(DBDWrapBoxSlot_SetFillSpanWhenLessThan, InFillSpanWhenLessThan) == 0x000000, "Member 'DBDWrapBoxSlot_SetFillSpanWhenLessThan::InFillSpanWhenLessThan' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBoxSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct DBDWrapBoxSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          inHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on DBDWrapBoxSlot_SetHorizontalAlignment");
static_assert(sizeof(DBDWrapBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on DBDWrapBoxSlot_SetHorizontalAlignment");
static_assert(offsetof(DBDWrapBoxSlot_SetHorizontalAlignment, inHorizontalAlignment) == 0x000000, "Member 'DBDWrapBoxSlot_SetHorizontalAlignment::inHorizontalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBoxSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct DBDWrapBoxSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBoxSlot_SetPadding) == 0x000004, "Wrong alignment on DBDWrapBoxSlot_SetPadding");
static_assert(sizeof(DBDWrapBoxSlot_SetPadding) == 0x000010, "Wrong size on DBDWrapBoxSlot_SetPadding");
static_assert(offsetof(DBDWrapBoxSlot_SetPadding, InPadding) == 0x000000, "Member 'DBDWrapBoxSlot_SetPadding::InPadding' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBoxSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct DBDWrapBoxSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            inVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on DBDWrapBoxSlot_SetVerticalAlignment");
static_assert(sizeof(DBDWrapBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong size on DBDWrapBoxSlot_SetVerticalAlignment");
static_assert(offsetof(DBDWrapBoxSlot_SetVerticalAlignment, inVerticalAlignment) == 0x000000, "Member 'DBDWrapBoxSlot_SetVerticalAlignment::inVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DisabledButtonTooltipWidget.SetTooltipData
// 0x0018 (0x0018 - 0x0000)
struct DisabledButtonTooltipWidget_SetTooltipData final
{
public:
	class FText                                   disabledButtonTooltipText;                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisabledButtonTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on DisabledButtonTooltipWidget_SetTooltipData");
static_assert(sizeof(DisabledButtonTooltipWidget_SetTooltipData) == 0x000018, "Wrong size on DisabledButtonTooltipWidget_SetTooltipData");
static_assert(offsetof(DisabledButtonTooltipWidget_SetTooltipData, disabledButtonTooltipText) == 0x000000, "Member 'DisabledButtonTooltipWidget_SetTooltipData::disabledButtonTooltipText' has a wrong offset!");

// Function DBDUIViewsCore.DragZone.OnAnalogInput
// 0x0050 (0x0050 - 0x0000)
struct DragZone_OnAnalogInput final
{
public:
	struct FAnalogInputEvent                      analogEvent;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragZone_OnAnalogInput) == 0x000008, "Wrong alignment on DragZone_OnAnalogInput");
static_assert(sizeof(DragZone_OnAnalogInput) == 0x000050, "Wrong size on DragZone_OnAnalogInput");
static_assert(offsetof(DragZone_OnAnalogInput, analogEvent) == 0x000000, "Member 'DragZone_OnAnalogInput::analogEvent' has a wrong offset!");

// Function DBDUIViewsCore.DragZone.OnMouseMoveGlobal
// 0x0080 (0x0080 - 0x0000)
struct DragZone_OnMouseMoveGlobal final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragZone_OnMouseMoveGlobal) == 0x000008, "Wrong alignment on DragZone_OnMouseMoveGlobal");
static_assert(sizeof(DragZone_OnMouseMoveGlobal) == 0x000080, "Wrong size on DragZone_OnMouseMoveGlobal");
static_assert(offsetof(DragZone_OnMouseMoveGlobal, MouseEvent) == 0x000000, "Member 'DragZone_OnMouseMoveGlobal::MouseEvent' has a wrong offset!");

// Function DBDUIViewsCore.DragZone.OnMousePressGlobal
// 0x0080 (0x0080 - 0x0000)
struct DragZone_OnMousePressGlobal final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragZone_OnMousePressGlobal) == 0x000008, "Wrong alignment on DragZone_OnMousePressGlobal");
static_assert(sizeof(DragZone_OnMousePressGlobal) == 0x000080, "Wrong size on DragZone_OnMousePressGlobal");
static_assert(offsetof(DragZone_OnMousePressGlobal, MouseEvent) == 0x000000, "Member 'DragZone_OnMousePressGlobal::MouseEvent' has a wrong offset!");

// Function DBDUIViewsCore.DragZone.OnMouseReleaseGlobal
// 0x0080 (0x0080 - 0x0000)
struct DragZone_OnMouseReleaseGlobal final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragZone_OnMouseReleaseGlobal) == 0x000008, "Wrong alignment on DragZone_OnMouseReleaseGlobal");
static_assert(sizeof(DragZone_OnMouseReleaseGlobal) == 0x000080, "Wrong size on DragZone_OnMouseReleaseGlobal");
static_assert(offsetof(DragZone_OnMouseReleaseGlobal, MouseEvent) == 0x000000, "Member 'DragZone_OnMouseReleaseGlobal::MouseEvent' has a wrong offset!");

// Function DBDUIViewsCore.EmblemWidget.SetData
// 0x0040 (0x0040 - 0x0000)
struct EmblemWidget_SetData final
{
public:
	struct FEmblemViewData                        ViewData;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmblemWidget_SetData) == 0x000008, "Wrong alignment on EmblemWidget_SetData");
static_assert(sizeof(EmblemWidget_SetData) == 0x000040, "Wrong size on EmblemWidget_SetData");
static_assert(offsetof(EmblemWidget_SetData, ViewData) == 0x000000, "Member 'EmblemWidget_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.EventEntryRewardsTabWidget.OnPreviewAreaItemClicked
// 0x0004 (0x0004 - 0x0000)
struct EventEntryRewardsTabWidget_OnPreviewAreaItemClicked final
{
public:
	int32                                         selectedIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryRewardsTabWidget_OnPreviewAreaItemClicked) == 0x000004, "Wrong alignment on EventEntryRewardsTabWidget_OnPreviewAreaItemClicked");
static_assert(sizeof(EventEntryRewardsTabWidget_OnPreviewAreaItemClicked) == 0x000004, "Wrong size on EventEntryRewardsTabWidget_OnPreviewAreaItemClicked");
static_assert(offsetof(EventEntryRewardsTabWidget_OnPreviewAreaItemClicked, selectedIndex) == 0x000000, "Member 'EventEntryRewardsTabWidget_OnPreviewAreaItemClicked::selectedIndex' has a wrong offset!");

// Function DBDUIViewsCore.EventEntryRewardsTabWidget.OnRewardGridItemClicked
// 0x0004 (0x0004 - 0x0000)
struct EventEntryRewardsTabWidget_OnRewardGridItemClicked final
{
public:
	int32                                         selectedIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryRewardsTabWidget_OnRewardGridItemClicked) == 0x000004, "Wrong alignment on EventEntryRewardsTabWidget_OnRewardGridItemClicked");
static_assert(sizeof(EventEntryRewardsTabWidget_OnRewardGridItemClicked) == 0x000004, "Wrong size on EventEntryRewardsTabWidget_OnRewardGridItemClicked");
static_assert(offsetof(EventEntryRewardsTabWidget_OnRewardGridItemClicked, selectedIndex) == 0x000000, "Member 'EventEntryRewardsTabWidget_OnRewardGridItemClicked::selectedIndex' has a wrong offset!");

// Function DBDUIViewsCore.EventEntryRewardsTabWidget.SetScrollPrompt
// 0x0008 (0x0008 - 0x0000)
struct EventEntryRewardsTabWidget_SetScrollPrompt final
{
public:
	class UCoreKeyListenerInputPromptWidget*      DisplayPrompt;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryRewardsTabWidget_SetScrollPrompt) == 0x000008, "Wrong alignment on EventEntryRewardsTabWidget_SetScrollPrompt");
static_assert(sizeof(EventEntryRewardsTabWidget_SetScrollPrompt) == 0x000008, "Wrong size on EventEntryRewardsTabWidget_SetScrollPrompt");
static_assert(offsetof(EventEntryRewardsTabWidget_SetScrollPrompt, DisplayPrompt) == 0x000000, "Member 'EventEntryRewardsTabWidget_SetScrollPrompt::DisplayPrompt' has a wrong offset!");

// Function DBDUIViewsCore.EventEntryDetailsTabContentWidget.SetData
// 0x0218 (0x0218 - 0x0000)
struct EventEntryDetailsTabContentWidget_SetData final
{
public:
	struct FSpecialEventDetailsTabContentData     ContentData;                                       // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventEntryPopupSkinUIData             skinData;                                          // 0x0070(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryDetailsTabContentWidget_SetData) == 0x000008, "Wrong alignment on EventEntryDetailsTabContentWidget_SetData");
static_assert(sizeof(EventEntryDetailsTabContentWidget_SetData) == 0x000218, "Wrong size on EventEntryDetailsTabContentWidget_SetData");
static_assert(offsetof(EventEntryDetailsTabContentWidget_SetData, ContentData) == 0x000000, "Member 'EventEntryDetailsTabContentWidget_SetData::ContentData' has a wrong offset!");
static_assert(offsetof(EventEntryDetailsTabContentWidget_SetData, skinData) == 0x000070, "Member 'EventEntryDetailsTabContentWidget_SetData::skinData' has a wrong offset!");

// Function DBDUIViewsCore.EventEntryDetailsTabLayoutWidget.SetData
// 0x01F0 (0x01F0 - 0x0000)
struct EventEntryDetailsTabLayoutWidget_SetData final
{
public:
	struct FEventEntryPopupSkinUIData             skinData;                                          // 0x0000(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSpecialEventDetailsTabContentData> ContentData;                                   // 0x01A8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ImageTexture;                                      // 0x01B8(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryDetailsTabLayoutWidget_SetData) == 0x000008, "Wrong alignment on EventEntryDetailsTabLayoutWidget_SetData");
static_assert(sizeof(EventEntryDetailsTabLayoutWidget_SetData) == 0x0001F0, "Wrong size on EventEntryDetailsTabLayoutWidget_SetData");
static_assert(offsetof(EventEntryDetailsTabLayoutWidget_SetData, skinData) == 0x000000, "Member 'EventEntryDetailsTabLayoutWidget_SetData::skinData' has a wrong offset!");
static_assert(offsetof(EventEntryDetailsTabLayoutWidget_SetData, ContentData) == 0x0001A8, "Member 'EventEntryDetailsTabLayoutWidget_SetData::ContentData' has a wrong offset!");
static_assert(offsetof(EventEntryDetailsTabLayoutWidget_SetData, ImageTexture) == 0x0001B8, "Member 'EventEntryDetailsTabLayoutWidget_SetData::ImageTexture' has a wrong offset!");

// Function DBDUIViewsCore.EventEntryDetailsTabLayoutWidget.SetTooltipEventData
// 0x0320 (0x0320 - 0x0000)
struct EventEntryDetailsTabLayoutWidget_SetTooltipEventData final
{
public:
	struct FCustomizationTooltipViewData          TooltipData;                                       // 0x0000(0x0158)(Parm, NativeAccessSpecifierPublic)
	struct FSpecialEventDetailsTabContentData     ContentData;                                       // 0x0158(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCustomizationTooltipViewData          ReturnValue;                                       // 0x01C8(0x0158)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryDetailsTabLayoutWidget_SetTooltipEventData) == 0x000008, "Wrong alignment on EventEntryDetailsTabLayoutWidget_SetTooltipEventData");
static_assert(sizeof(EventEntryDetailsTabLayoutWidget_SetTooltipEventData) == 0x000320, "Wrong size on EventEntryDetailsTabLayoutWidget_SetTooltipEventData");
static_assert(offsetof(EventEntryDetailsTabLayoutWidget_SetTooltipEventData, TooltipData) == 0x000000, "Member 'EventEntryDetailsTabLayoutWidget_SetTooltipEventData::TooltipData' has a wrong offset!");
static_assert(offsetof(EventEntryDetailsTabLayoutWidget_SetTooltipEventData, ContentData) == 0x000158, "Member 'EventEntryDetailsTabLayoutWidget_SetTooltipEventData::ContentData' has a wrong offset!");
static_assert(offsetof(EventEntryDetailsTabLayoutWidget_SetTooltipEventData, ReturnValue) == 0x0001C8, "Member 'EventEntryDetailsTabLayoutWidget_SetTooltipEventData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetInstructionWidgetData
// 0x0068 (0x0068 - 0x0000)
struct EventEntryRewardsDisplayWidget_SetInstructionWidgetData final
{
public:
	struct FCustomizationItemOriginViewData       ViewData;                                          // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryRewardsDisplayWidget_SetInstructionWidgetData) == 0x000008, "Wrong alignment on EventEntryRewardsDisplayWidget_SetInstructionWidgetData");
static_assert(sizeof(EventEntryRewardsDisplayWidget_SetInstructionWidgetData) == 0x000068, "Wrong size on EventEntryRewardsDisplayWidget_SetInstructionWidgetData");
static_assert(offsetof(EventEntryRewardsDisplayWidget_SetInstructionWidgetData, ViewData) == 0x000000, "Member 'EventEntryRewardsDisplayWidget_SetInstructionWidgetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetItemsData
// 0x0018 (0x0018 - 0x0000)
struct EventEntryRewardsDisplayWidget_SetItemsData final
{
public:
	TArray<class UStoreCustomizationItemViewData*> customizationRewardsData;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         selectedIndex;                                     // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventEntryRewardsDisplayWidget_SetItemsData) == 0x000008, "Wrong alignment on EventEntryRewardsDisplayWidget_SetItemsData");
static_assert(sizeof(EventEntryRewardsDisplayWidget_SetItemsData) == 0x000018, "Wrong size on EventEntryRewardsDisplayWidget_SetItemsData");
static_assert(offsetof(EventEntryRewardsDisplayWidget_SetItemsData, customizationRewardsData) == 0x000000, "Member 'EventEntryRewardsDisplayWidget_SetItemsData::customizationRewardsData' has a wrong offset!");
static_assert(offsetof(EventEntryRewardsDisplayWidget_SetItemsData, selectedIndex) == 0x000010, "Member 'EventEntryRewardsDisplayWidget_SetItemsData::selectedIndex' has a wrong offset!");

// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetPreviewAreaData
// 0x0020 (0x0020 - 0x0000)
struct EventEntryRewardsDisplayWidget_SetPreviewAreaData final
{
public:
	struct FCustomizationItemPreviewAreaViewData  ViewData;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryRewardsDisplayWidget_SetPreviewAreaData) == 0x000008, "Wrong alignment on EventEntryRewardsDisplayWidget_SetPreviewAreaData");
static_assert(sizeof(EventEntryRewardsDisplayWidget_SetPreviewAreaData) == 0x000020, "Wrong size on EventEntryRewardsDisplayWidget_SetPreviewAreaData");
static_assert(offsetof(EventEntryRewardsDisplayWidget_SetPreviewAreaData, ViewData) == 0x000000, "Member 'EventEntryRewardsDisplayWidget_SetPreviewAreaData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetScrollPrompt
// 0x0008 (0x0008 - 0x0000)
struct EventEntryRewardsDisplayWidget_SetScrollPrompt final
{
public:
	class UCoreKeyListenerInputPromptWidget*      DisplayPrompt;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryRewardsDisplayWidget_SetScrollPrompt) == 0x000008, "Wrong alignment on EventEntryRewardsDisplayWidget_SetScrollPrompt");
static_assert(sizeof(EventEntryRewardsDisplayWidget_SetScrollPrompt) == 0x000008, "Wrong size on EventEntryRewardsDisplayWidget_SetScrollPrompt");
static_assert(offsetof(EventEntryRewardsDisplayWidget_SetScrollPrompt, DisplayPrompt) == 0x000000, "Member 'EventEntryRewardsDisplayWidget_SetScrollPrompt::DisplayPrompt' has a wrong offset!");

// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetSelectedReward
// 0x0004 (0x0004 - 0x0000)
struct EventEntryRewardsDisplayWidget_SetSelectedReward final
{
public:
	int32                                         selectedIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryRewardsDisplayWidget_SetSelectedReward) == 0x000004, "Wrong alignment on EventEntryRewardsDisplayWidget_SetSelectedReward");
static_assert(sizeof(EventEntryRewardsDisplayWidget_SetSelectedReward) == 0x000004, "Wrong size on EventEntryRewardsDisplayWidget_SetSelectedReward");
static_assert(offsetof(EventEntryRewardsDisplayWidget_SetSelectedReward, selectedIndex) == 0x000000, "Member 'EventEntryRewardsDisplayWidget_SetSelectedReward::selectedIndex' has a wrong offset!");

// Function DBDUIViewsCore.EventEntryRewardsDisplayWidget.SetVisuals
// 0x01A8 (0x01A8 - 0x0000)
struct EventEntryRewardsDisplayWidget_SetVisuals final
{
public:
	struct FEventEntryPopupSkinUIData             skinUIData;                                        // 0x0000(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryRewardsDisplayWidget_SetVisuals) == 0x000008, "Wrong alignment on EventEntryRewardsDisplayWidget_SetVisuals");
static_assert(sizeof(EventEntryRewardsDisplayWidget_SetVisuals) == 0x0001A8, "Wrong size on EventEntryRewardsDisplayWidget_SetVisuals");
static_assert(offsetof(EventEntryRewardsDisplayWidget_SetVisuals, skinUIData) == 0x000000, "Member 'EventEntryRewardsDisplayWidget_SetVisuals::skinUIData' has a wrong offset!");

// Function DBDUIViewsCore.EventObjectiveTrackerTarget.SetData
// 0x0108 (0x0108 - 0x0000)
struct EventObjectiveTrackerTarget_SetData final
{
public:
	struct FEventObjectiveTargetData              Data;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEventObjectiveTrackerSkinUIData       skinData;                                          // 0x0008(0x0100)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventObjectiveTrackerTarget_SetData) == 0x000008, "Wrong alignment on EventObjectiveTrackerTarget_SetData");
static_assert(sizeof(EventObjectiveTrackerTarget_SetData) == 0x000108, "Wrong size on EventObjectiveTrackerTarget_SetData");
static_assert(offsetof(EventObjectiveTrackerTarget_SetData, Data) == 0x000000, "Member 'EventObjectiveTrackerTarget_SetData::Data' has a wrong offset!");
static_assert(offsetof(EventObjectiveTrackerTarget_SetData, skinData) == 0x000008, "Member 'EventObjectiveTrackerTarget_SetData::skinData' has a wrong offset!");

// Function DBDUIViewsCore.EventObjectiveTrackerTarget.SetIsReached
// 0x0001 (0x0001 - 0x0000)
struct EventObjectiveTrackerTarget_SetIsReached final
{
public:
	bool                                          IsReached;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventObjectiveTrackerTarget_SetIsReached) == 0x000001, "Wrong alignment on EventObjectiveTrackerTarget_SetIsReached");
static_assert(sizeof(EventObjectiveTrackerTarget_SetIsReached) == 0x000001, "Wrong size on EventObjectiveTrackerTarget_SetIsReached");
static_assert(offsetof(EventObjectiveTrackerTarget_SetIsReached, IsReached) == 0x000000, "Member 'EventObjectiveTrackerTarget_SetIsReached::IsReached' has a wrong offset!");

// Function DBDUIViewsCore.EventObjectiveTrackerTarget.SetRewardPreviewVisible
// 0x0001 (0x0001 - 0x0000)
struct EventObjectiveTrackerTarget_SetRewardPreviewVisible final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventObjectiveTrackerTarget_SetRewardPreviewVisible) == 0x000001, "Wrong alignment on EventObjectiveTrackerTarget_SetRewardPreviewVisible");
static_assert(sizeof(EventObjectiveTrackerTarget_SetRewardPreviewVisible) == 0x000001, "Wrong size on EventObjectiveTrackerTarget_SetRewardPreviewVisible");
static_assert(offsetof(EventObjectiveTrackerTarget_SetRewardPreviewVisible, IsVisible_0) == 0x000000, "Member 'EventObjectiveTrackerTarget_SetRewardPreviewVisible::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.EventObjectiveTrackerWidget.SetData
// 0x0208 (0x0208 - 0x0000)
struct EventObjectiveTrackerWidget_SetData final
{
public:
	struct FEventObjectiveTrackerViewData         ViewData;                                          // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventObjectiveTrackerSkinUIData       skinData;                                          // 0x0108(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventObjectiveTrackerWidget_SetData) == 0x000008, "Wrong alignment on EventObjectiveTrackerWidget_SetData");
static_assert(sizeof(EventObjectiveTrackerWidget_SetData) == 0x000208, "Wrong size on EventObjectiveTrackerWidget_SetData");
static_assert(offsetof(EventObjectiveTrackerWidget_SetData, ViewData) == 0x000000, "Member 'EventObjectiveTrackerWidget_SetData::ViewData' has a wrong offset!");
static_assert(offsetof(EventObjectiveTrackerWidget_SetData, skinData) == 0x000108, "Member 'EventObjectiveTrackerWidget_SetData::skinData' has a wrong offset!");

// Function DBDUIViewsCore.EventObjectiveTrackerWidget.SetTargetPosition
// 0x0010 (0x0010 - 0x0000)
struct EventObjectiveTrackerWidget_SetTargetPosition final
{
public:
	const class UEventObjectiveTrackerTarget*     Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         relativePosition;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventObjectiveTrackerWidget_SetTargetPosition) == 0x000008, "Wrong alignment on EventObjectiveTrackerWidget_SetTargetPosition");
static_assert(sizeof(EventObjectiveTrackerWidget_SetTargetPosition) == 0x000010, "Wrong size on EventObjectiveTrackerWidget_SetTargetPosition");
static_assert(offsetof(EventObjectiveTrackerWidget_SetTargetPosition, Target) == 0x000000, "Member 'EventObjectiveTrackerWidget_SetTargetPosition::Target' has a wrong offset!");
static_assert(offsetof(EventObjectiveTrackerWidget_SetTargetPosition, relativePosition) == 0x000008, "Member 'EventObjectiveTrackerWidget_SetTargetPosition::relativePosition' has a wrong offset!");

// Function DBDUIViewsCore.EventPointsWidget.Highlight
// 0x0001 (0x0001 - 0x0000)
struct EventPointsWidget_Highlight final
{
public:
	bool                                          IsHighlighted;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventPointsWidget_Highlight) == 0x000001, "Wrong alignment on EventPointsWidget_Highlight");
static_assert(sizeof(EventPointsWidget_Highlight) == 0x000001, "Wrong size on EventPointsWidget_Highlight");
static_assert(offsetof(EventPointsWidget_Highlight, IsHighlighted) == 0x000000, "Member 'EventPointsWidget_Highlight::IsHighlighted' has a wrong offset!");

// Function DBDUIViewsCore.EventPointsWidget.SetValue
// 0x0004 (0x0004 - 0x0000)
struct EventPointsWidget_SetValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventPointsWidget_SetValue) == 0x000004, "Wrong alignment on EventPointsWidget_SetValue");
static_assert(sizeof(EventPointsWidget_SetValue) == 0x000004, "Wrong size on EventPointsWidget_SetValue");
static_assert(offsetof(EventPointsWidget_SetValue, NewValue) == 0x000000, "Member 'EventPointsWidget_SetValue::NewValue' has a wrong offset!");

// Function DBDUIViewsCore.FollowedQuestsTooltipWidget.OnAnalogInput
// 0x0050 (0x0050 - 0x0000)
struct FollowedQuestsTooltipWidget_OnAnalogInput final
{
public:
	struct FAnalogInputEvent                      analogEvent;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FollowedQuestsTooltipWidget_OnAnalogInput) == 0x000008, "Wrong alignment on FollowedQuestsTooltipWidget_OnAnalogInput");
static_assert(sizeof(FollowedQuestsTooltipWidget_OnAnalogInput) == 0x000050, "Wrong size on FollowedQuestsTooltipWidget_OnAnalogInput");
static_assert(offsetof(FollowedQuestsTooltipWidget_OnAnalogInput, analogEvent) == 0x000000, "Member 'FollowedQuestsTooltipWidget_OnAnalogInput::analogEvent' has a wrong offset!");

// Function DBDUIViewsCore.FollowedQuestsTooltipWidget.OnMouseWheelInput
// 0x0080 (0x0080 - 0x0000)
struct FollowedQuestsTooltipWidget_OnMouseWheelInput final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FollowedQuestsTooltipWidget_OnMouseWheelInput) == 0x000008, "Wrong alignment on FollowedQuestsTooltipWidget_OnMouseWheelInput");
static_assert(sizeof(FollowedQuestsTooltipWidget_OnMouseWheelInput) == 0x000080, "Wrong size on FollowedQuestsTooltipWidget_OnMouseWheelInput");
static_assert(offsetof(FollowedQuestsTooltipWidget_OnMouseWheelInput, PointerEvent) == 0x000000, "Member 'FollowedQuestsTooltipWidget_OnMouseWheelInput::PointerEvent' has a wrong offset!");

// Function DBDUIViewsCore.FollowedQuestsTooltipWidget.SetTooltipData
// 0x0040 (0x0040 - 0x0000)
struct FollowedQuestsTooltipWidget_SetTooltipData final
{
public:
	struct FFollowedQuestsTooltipViewData         TooltipData;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FollowedQuestsTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on FollowedQuestsTooltipWidget_SetTooltipData");
static_assert(sizeof(FollowedQuestsTooltipWidget_SetTooltipData) == 0x000040, "Wrong size on FollowedQuestsTooltipWidget_SetTooltipData");
static_assert(offsetof(FollowedQuestsTooltipWidget_SetTooltipData, TooltipData) == 0x000000, "Member 'FollowedQuestsTooltipWidget_SetTooltipData::TooltipData' has a wrong offset!");

// Function DBDUIViewsCore.GradeChangePopupWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct GradeChangePopupWidget_SetData final
{
public:
	const class UGradeChangePopupViewData*        Data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GradeChangePopupWidget_SetData) == 0x000008, "Wrong alignment on GradeChangePopupWidget_SetData");
static_assert(sizeof(GradeChangePopupWidget_SetData) == 0x000008, "Wrong size on GradeChangePopupWidget_SetData");
static_assert(offsetof(GradeChangePopupWidget_SetData, Data) == 0x000000, "Member 'GradeChangePopupWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.HudEffectCardWidget.AddMatchPoint
// 0x0002 (0x0002 - 0x0000)
struct HudEffectCardWidget_AddMatchPoint final
{
public:
	bool                                          isSecondPoint;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          withAnimation;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEffectCardWidget_AddMatchPoint) == 0x000001, "Wrong alignment on HudEffectCardWidget_AddMatchPoint");
static_assert(sizeof(HudEffectCardWidget_AddMatchPoint) == 0x000002, "Wrong size on HudEffectCardWidget_AddMatchPoint");
static_assert(offsetof(HudEffectCardWidget_AddMatchPoint, isSecondPoint) == 0x000000, "Member 'HudEffectCardWidget_AddMatchPoint::isSecondPoint' has a wrong offset!");
static_assert(offsetof(HudEffectCardWidget_AddMatchPoint, withAnimation) == 0x000001, "Member 'HudEffectCardWidget_AddMatchPoint::withAnimation' has a wrong offset!");

// Function DBDUIViewsCore.HudEffectCardWidget.InitCards
// 0x01B0 (0x01B0 - 0x0000)
struct HudEffectCardWidget_InitCards final
{
public:
	struct FEffectCardViewData                    currentCardViewData;                               // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEffectCardViewData                    nextCardViewData;                                  // 0x00D8(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEffectCardWidget_InitCards) == 0x000008, "Wrong alignment on HudEffectCardWidget_InitCards");
static_assert(sizeof(HudEffectCardWidget_InitCards) == 0x0001B0, "Wrong size on HudEffectCardWidget_InitCards");
static_assert(offsetof(HudEffectCardWidget_InitCards, currentCardViewData) == 0x000000, "Member 'HudEffectCardWidget_InitCards::currentCardViewData' has a wrong offset!");
static_assert(offsetof(HudEffectCardWidget_InitCards, nextCardViewData) == 0x0000D8, "Member 'HudEffectCardWidget_InitCards::nextCardViewData' has a wrong offset!");

// Function DBDUIViewsCore.HudEffectCardWidget.RotateCards
// 0x00E0 (0x00E0 - 0x0000)
struct HudEffectCardWidget_RotateCards final
{
public:
	bool                                          isFutureCardValid;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEffectCardViewData                    futureCardViewData;                                // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEffectCardWidget_RotateCards) == 0x000008, "Wrong alignment on HudEffectCardWidget_RotateCards");
static_assert(sizeof(HudEffectCardWidget_RotateCards) == 0x0000E0, "Wrong size on HudEffectCardWidget_RotateCards");
static_assert(offsetof(HudEffectCardWidget_RotateCards, isFutureCardValid) == 0x000000, "Member 'HudEffectCardWidget_RotateCards::isFutureCardValid' has a wrong offset!");
static_assert(offsetof(HudEffectCardWidget_RotateCards, futureCardViewData) == 0x000008, "Member 'HudEffectCardWidget_RotateCards::futureCardViewData' has a wrong offset!");

// Function DBDUIViewsCore.HudEffectCardWidget.UpdateEffectCardName
// 0x0018 (0x0018 - 0x0000)
struct HudEffectCardWidget_UpdateEffectCardName final
{
public:
	class FText                                   cardName;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEffectCardWidget_UpdateEffectCardName) == 0x000008, "Wrong alignment on HudEffectCardWidget_UpdateEffectCardName");
static_assert(sizeof(HudEffectCardWidget_UpdateEffectCardName) == 0x000018, "Wrong size on HudEffectCardWidget_UpdateEffectCardName");
static_assert(offsetof(HudEffectCardWidget_UpdateEffectCardName, cardName) == 0x000000, "Member 'HudEffectCardWidget_UpdateEffectCardName::cardName' has a wrong offset!");

// Function DBDUIViewsCore.LeaveMatchPopupWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct LeaveMatchPopupWidget_SetData final
{
public:
	const class ULeaveMatchPopupViewData*         Data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaveMatchPopupWidget_SetData) == 0x000008, "Wrong alignment on LeaveMatchPopupWidget_SetData");
static_assert(sizeof(LeaveMatchPopupWidget_SetData) == 0x000008, "Wrong size on LeaveMatchPopupWidget_SetData");
static_assert(offsetof(LeaveMatchPopupWidget_SetData, Data) == 0x000000, "Member 'LeaveMatchPopupWidget_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.LobbyPlayerListItemWidget.HideLoadoutPartTooltip
// 0x0008 (0x0008 - 0x0000)
struct LobbyPlayerListItemWidget_HideLoadoutPartTooltip final
{
public:
	class UCoreButtonWidget*                      unhoveredSlotWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPlayerListItemWidget_HideLoadoutPartTooltip) == 0x000008, "Wrong alignment on LobbyPlayerListItemWidget_HideLoadoutPartTooltip");
static_assert(sizeof(LobbyPlayerListItemWidget_HideLoadoutPartTooltip) == 0x000008, "Wrong size on LobbyPlayerListItemWidget_HideLoadoutPartTooltip");
static_assert(offsetof(LobbyPlayerListItemWidget_HideLoadoutPartTooltip, unhoveredSlotWidget) == 0x000000, "Member 'LobbyPlayerListItemWidget_HideLoadoutPartTooltip::unhoveredSlotWidget' has a wrong offset!");

// Function DBDUIViewsCore.LobbyPlayerListItemWidget.OnBindHoverBorder
// 0x0002 (0x0002 - 0x0000)
struct LobbyPlayerListItemWidget_OnBindHoverBorder final
{
public:
	EPlayerListItemState                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isHoverEnabled;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPlayerListItemWidget_OnBindHoverBorder) == 0x000001, "Wrong alignment on LobbyPlayerListItemWidget_OnBindHoverBorder");
static_assert(sizeof(LobbyPlayerListItemWidget_OnBindHoverBorder) == 0x000002, "Wrong size on LobbyPlayerListItemWidget_OnBindHoverBorder");
static_assert(offsetof(LobbyPlayerListItemWidget_OnBindHoverBorder, State) == 0x000000, "Member 'LobbyPlayerListItemWidget_OnBindHoverBorder::State' has a wrong offset!");
static_assert(offsetof(LobbyPlayerListItemWidget_OnBindHoverBorder, isHoverEnabled) == 0x000001, "Member 'LobbyPlayerListItemWidget_OnBindHoverBorder::isHoverEnabled' has a wrong offset!");

// Function DBDUIViewsCore.LobbyPlayerListItemWidget.SetState
// 0x0001 (0x0001 - 0x0000)
struct LobbyPlayerListItemWidget_SetState final
{
public:
	EPlayerListItemState                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPlayerListItemWidget_SetState) == 0x000001, "Wrong alignment on LobbyPlayerListItemWidget_SetState");
static_assert(sizeof(LobbyPlayerListItemWidget_SetState) == 0x000001, "Wrong size on LobbyPlayerListItemWidget_SetState");
static_assert(offsetof(LobbyPlayerListItemWidget_SetState, State) == 0x000000, "Member 'LobbyPlayerListItemWidget_SetState::State' has a wrong offset!");

// Function DBDUIViewsCore.LobbyPlayerListItemWidget.ShowLoadoutPartTooltip
// 0x0008 (0x0008 - 0x0000)
struct LobbyPlayerListItemWidget_ShowLoadoutPartTooltip final
{
public:
	class UCoreButtonWidget*                      hoveredSlotWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPlayerListItemWidget_ShowLoadoutPartTooltip) == 0x000008, "Wrong alignment on LobbyPlayerListItemWidget_ShowLoadoutPartTooltip");
static_assert(sizeof(LobbyPlayerListItemWidget_ShowLoadoutPartTooltip) == 0x000008, "Wrong size on LobbyPlayerListItemWidget_ShowLoadoutPartTooltip");
static_assert(offsetof(LobbyPlayerListItemWidget_ShowLoadoutPartTooltip, hoveredSlotWidget) == 0x000000, "Member 'LobbyPlayerListItemWidget_ShowLoadoutPartTooltip::hoveredSlotWidget' has a wrong offset!");

// Function DBDUIViewsCore.LobbyPlayerListWidget.OnKillerClicked
// 0x0008 (0x0008 - 0x0000)
struct LobbyPlayerListWidget_OnKillerClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPlayerListWidget_OnKillerClicked) == 0x000008, "Wrong alignment on LobbyPlayerListWidget_OnKillerClicked");
static_assert(sizeof(LobbyPlayerListWidget_OnKillerClicked) == 0x000008, "Wrong size on LobbyPlayerListWidget_OnKillerClicked");
static_assert(offsetof(LobbyPlayerListWidget_OnKillerClicked, buttonTarget) == 0x000000, "Member 'LobbyPlayerListWidget_OnKillerClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.LobbyPlayerListWidget.OnPlayerSocialOptionClicked
// 0x0048 (0x0048 - 0x0000)
struct LobbyPlayerListWidget_OnPlayerSocialOptionClicked final
{
public:
	struct FPlayerSocialOptionViewData            playerSocialOptionData;                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPlayerListWidget_OnPlayerSocialOptionClicked) == 0x000008, "Wrong alignment on LobbyPlayerListWidget_OnPlayerSocialOptionClicked");
static_assert(sizeof(LobbyPlayerListWidget_OnPlayerSocialOptionClicked) == 0x000048, "Wrong size on LobbyPlayerListWidget_OnPlayerSocialOptionClicked");
static_assert(offsetof(LobbyPlayerListWidget_OnPlayerSocialOptionClicked, playerSocialOptionData) == 0x000000, "Member 'LobbyPlayerListWidget_OnPlayerSocialOptionClicked::playerSocialOptionData' has a wrong offset!");

// Function DBDUIViewsCore.LobbyPlayerListWidget.OnSurvivorClicked
// 0x0008 (0x0008 - 0x0000)
struct LobbyPlayerListWidget_OnSurvivorClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPlayerListWidget_OnSurvivorClicked) == 0x000008, "Wrong alignment on LobbyPlayerListWidget_OnSurvivorClicked");
static_assert(sizeof(LobbyPlayerListWidget_OnSurvivorClicked) == 0x000008, "Wrong size on LobbyPlayerListWidget_OnSurvivorClicked");
static_assert(offsetof(LobbyPlayerListWidget_OnSurvivorClicked, buttonTarget) == 0x000000, "Member 'LobbyPlayerListWidget_OnSurvivorClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.InitializeSidePanel
// 0x00C0 (0x00C0 - 0x0000)
struct LobbySidePanelWidget_InitializeSidePanel final
{
public:
	struct FLobbySidePanelViewData                sidePanelViewData;                                 // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_InitializeSidePanel) == 0x000008, "Wrong alignment on LobbySidePanelWidget_InitializeSidePanel");
static_assert(sizeof(LobbySidePanelWidget_InitializeSidePanel) == 0x0000C0, "Wrong size on LobbySidePanelWidget_InitializeSidePanel");
static_assert(offsetof(LobbySidePanelWidget_InitializeSidePanel, sidePanelViewData) == 0x000000, "Member 'LobbySidePanelWidget_InitializeSidePanel::sidePanelViewData' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.OnBloodWebButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct LobbySidePanelWidget_OnBloodWebButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_OnBloodWebButtonClicked) == 0x000008, "Wrong alignment on LobbySidePanelWidget_OnBloodWebButtonClicked");
static_assert(sizeof(LobbySidePanelWidget_OnBloodWebButtonClicked) == 0x000008, "Wrong size on LobbySidePanelWidget_OnBloodWebButtonClicked");
static_assert(offsetof(LobbySidePanelWidget_OnBloodWebButtonClicked, buttonTarget) == 0x000000, "Member 'LobbySidePanelWidget_OnBloodWebButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.OnButtonSelectedAgain
// 0x0008 (0x0008 - 0x0000)
struct LobbySidePanelWidget_OnButtonSelectedAgain final
{
public:
	class UCoreSelectableButtonWidget*            buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_OnButtonSelectedAgain) == 0x000008, "Wrong alignment on LobbySidePanelWidget_OnButtonSelectedAgain");
static_assert(sizeof(LobbySidePanelWidget_OnButtonSelectedAgain) == 0x000008, "Wrong size on LobbySidePanelWidget_OnButtonSelectedAgain");
static_assert(offsetof(LobbySidePanelWidget_OnButtonSelectedAgain, buttonTarget) == 0x000000, "Member 'LobbySidePanelWidget_OnButtonSelectedAgain::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.OnChallengesButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct LobbySidePanelWidget_OnChallengesButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_OnChallengesButtonClicked) == 0x000008, "Wrong alignment on LobbySidePanelWidget_OnChallengesButtonClicked");
static_assert(sizeof(LobbySidePanelWidget_OnChallengesButtonClicked) == 0x000008, "Wrong size on LobbySidePanelWidget_OnChallengesButtonClicked");
static_assert(offsetof(LobbySidePanelWidget_OnChallengesButtonClicked, buttonTarget) == 0x000000, "Member 'LobbySidePanelWidget_OnChallengesButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.OnChallengesButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct LobbySidePanelWidget_OnChallengesButtonHovered final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_OnChallengesButtonHovered) == 0x000008, "Wrong alignment on LobbySidePanelWidget_OnChallengesButtonHovered");
static_assert(sizeof(LobbySidePanelWidget_OnChallengesButtonHovered) == 0x000008, "Wrong size on LobbySidePanelWidget_OnChallengesButtonHovered");
static_assert(offsetof(LobbySidePanelWidget_OnChallengesButtonHovered, Button) == 0x000000, "Member 'LobbySidePanelWidget_OnChallengesButtonHovered::Button' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.OnChallengesButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct LobbySidePanelWidget_OnChallengesButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_OnChallengesButtonUnhovered) == 0x000008, "Wrong alignment on LobbySidePanelWidget_OnChallengesButtonUnhovered");
static_assert(sizeof(LobbySidePanelWidget_OnChallengesButtonUnhovered) == 0x000008, "Wrong size on LobbySidePanelWidget_OnChallengesButtonUnhovered");
static_assert(offsetof(LobbySidePanelWidget_OnChallengesButtonUnhovered, Button) == 0x000000, "Member 'LobbySidePanelWidget_OnChallengesButtonUnhovered::Button' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.OnCharacterButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct LobbySidePanelWidget_OnCharacterButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_OnCharacterButtonClicked) == 0x000008, "Wrong alignment on LobbySidePanelWidget_OnCharacterButtonClicked");
static_assert(sizeof(LobbySidePanelWidget_OnCharacterButtonClicked) == 0x000008, "Wrong size on LobbySidePanelWidget_OnCharacterButtonClicked");
static_assert(offsetof(LobbySidePanelWidget_OnCharacterButtonClicked, buttonTarget) == 0x000000, "Member 'LobbySidePanelWidget_OnCharacterButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.OnEventButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct LobbySidePanelWidget_OnEventButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_OnEventButtonClicked) == 0x000008, "Wrong alignment on LobbySidePanelWidget_OnEventButtonClicked");
static_assert(sizeof(LobbySidePanelWidget_OnEventButtonClicked) == 0x000008, "Wrong size on LobbySidePanelWidget_OnEventButtonClicked");
static_assert(offsetof(LobbySidePanelWidget_OnEventButtonClicked, buttonTarget) == 0x000000, "Member 'LobbySidePanelWidget_OnEventButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.OnKillerRoleButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct LobbySidePanelWidget_OnKillerRoleButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_OnKillerRoleButtonClicked) == 0x000008, "Wrong alignment on LobbySidePanelWidget_OnKillerRoleButtonClicked");
static_assert(sizeof(LobbySidePanelWidget_OnKillerRoleButtonClicked) == 0x000008, "Wrong size on LobbySidePanelWidget_OnKillerRoleButtonClicked");
static_assert(offsetof(LobbySidePanelWidget_OnKillerRoleButtonClicked, buttonTarget) == 0x000000, "Member 'LobbySidePanelWidget_OnKillerRoleButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.OnLoadoutButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct LobbySidePanelWidget_OnLoadoutButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_OnLoadoutButtonClicked) == 0x000008, "Wrong alignment on LobbySidePanelWidget_OnLoadoutButtonClicked");
static_assert(sizeof(LobbySidePanelWidget_OnLoadoutButtonClicked) == 0x000008, "Wrong size on LobbySidePanelWidget_OnLoadoutButtonClicked");
static_assert(offsetof(LobbySidePanelWidget_OnLoadoutButtonClicked, buttonTarget) == 0x000000, "Member 'LobbySidePanelWidget_OnLoadoutButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.OnShrineButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct LobbySidePanelWidget_OnShrineButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_OnShrineButtonClicked) == 0x000008, "Wrong alignment on LobbySidePanelWidget_OnShrineButtonClicked");
static_assert(sizeof(LobbySidePanelWidget_OnShrineButtonClicked) == 0x000008, "Wrong size on LobbySidePanelWidget_OnShrineButtonClicked");
static_assert(offsetof(LobbySidePanelWidget_OnShrineButtonClicked, buttonTarget) == 0x000000, "Member 'LobbySidePanelWidget_OnShrineButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.OnSpectatorRoleButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct LobbySidePanelWidget_OnSpectatorRoleButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_OnSpectatorRoleButtonClicked) == 0x000008, "Wrong alignment on LobbySidePanelWidget_OnSpectatorRoleButtonClicked");
static_assert(sizeof(LobbySidePanelWidget_OnSpectatorRoleButtonClicked) == 0x000008, "Wrong size on LobbySidePanelWidget_OnSpectatorRoleButtonClicked");
static_assert(offsetof(LobbySidePanelWidget_OnSpectatorRoleButtonClicked, buttonTarget) == 0x000000, "Member 'LobbySidePanelWidget_OnSpectatorRoleButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.OnStoreButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct LobbySidePanelWidget_OnStoreButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_OnStoreButtonClicked) == 0x000008, "Wrong alignment on LobbySidePanelWidget_OnStoreButtonClicked");
static_assert(sizeof(LobbySidePanelWidget_OnStoreButtonClicked) == 0x000008, "Wrong size on LobbySidePanelWidget_OnStoreButtonClicked");
static_assert(offsetof(LobbySidePanelWidget_OnStoreButtonClicked, buttonTarget) == 0x000000, "Member 'LobbySidePanelWidget_OnStoreButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.OnSurvivorRoleButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct LobbySidePanelWidget_OnSurvivorRoleButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_OnSurvivorRoleButtonClicked) == 0x000008, "Wrong alignment on LobbySidePanelWidget_OnSurvivorRoleButtonClicked");
static_assert(sizeof(LobbySidePanelWidget_OnSurvivorRoleButtonClicked) == 0x000008, "Wrong size on LobbySidePanelWidget_OnSurvivorRoleButtonClicked");
static_assert(offsetof(LobbySidePanelWidget_OnSurvivorRoleButtonClicked, buttonTarget) == 0x000000, "Member 'LobbySidePanelWidget_OnSurvivorRoleButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.OnTabButtonSelectedChanged
// 0x0010 (0x0010 - 0x0000)
struct LobbySidePanelWidget_OnTabButtonSelectedChanged final
{
public:
	class UCoreSelectableButtonWidget*            targetButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbySidePanelWidget_OnTabButtonSelectedChanged) == 0x000008, "Wrong alignment on LobbySidePanelWidget_OnTabButtonSelectedChanged");
static_assert(sizeof(LobbySidePanelWidget_OnTabButtonSelectedChanged) == 0x000010, "Wrong size on LobbySidePanelWidget_OnTabButtonSelectedChanged");
static_assert(offsetof(LobbySidePanelWidget_OnTabButtonSelectedChanged, targetButton) == 0x000000, "Member 'LobbySidePanelWidget_OnTabButtonSelectedChanged::targetButton' has a wrong offset!");
static_assert(offsetof(LobbySidePanelWidget_OnTabButtonSelectedChanged, IsSelected) == 0x000008, "Member 'LobbySidePanelWidget_OnTabButtonSelectedChanged::IsSelected' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.SetRoleButtonVisibility
// 0x0001 (0x0001 - 0x0000)
struct LobbySidePanelWidget_SetRoleButtonVisibility final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_SetRoleButtonVisibility) == 0x000001, "Wrong alignment on LobbySidePanelWidget_SetRoleButtonVisibility");
static_assert(sizeof(LobbySidePanelWidget_SetRoleButtonVisibility) == 0x000001, "Wrong size on LobbySidePanelWidget_SetRoleButtonVisibility");
static_assert(offsetof(LobbySidePanelWidget_SetRoleButtonVisibility, IsVisible_0) == 0x000000, "Member 'LobbySidePanelWidget_SetRoleButtonVisibility::IsVisible_0' has a wrong offset!");

// Function DBDUIViewsCore.LobbySidePanelWidget.SetUiTakeoverVisuals
// 0x0001 (0x0001 - 0x0000)
struct LobbySidePanelWidget_SetUiTakeoverVisuals final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbySidePanelWidget_SetUiTakeoverVisuals) == 0x000001, "Wrong alignment on LobbySidePanelWidget_SetUiTakeoverVisuals");
static_assert(sizeof(LobbySidePanelWidget_SetUiTakeoverVisuals) == 0x000001, "Wrong size on LobbySidePanelWidget_SetUiTakeoverVisuals");
static_assert(offsetof(LobbySidePanelWidget_SetUiTakeoverVisuals, IsActive) == 0x000000, "Member 'LobbySidePanelWidget_SetUiTakeoverVisuals::IsActive' has a wrong offset!");

// Function DBDUIViewsCore.LockedFeatureTooltipWidget.SetTooltipData
// 0x0040 (0x0040 - 0x0000)
struct LockedFeatureTooltipWidget_SetTooltipData final
{
public:
	struct FLockedFeatureTooltipViewData          ViewData;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LockedFeatureTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on LockedFeatureTooltipWidget_SetTooltipData");
static_assert(sizeof(LockedFeatureTooltipWidget_SetTooltipData) == 0x000040, "Wrong size on LockedFeatureTooltipWidget_SetTooltipData");
static_assert(offsetof(LockedFeatureTooltipWidget_SetTooltipData, ViewData) == 0x000000, "Member 'LockedFeatureTooltipWidget_SetTooltipData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.MapShowcaseTooltipWidget.SetTooltipData
// 0x0080 (0x0080 - 0x0000)
struct MapShowcaseTooltipWidget_SetTooltipData final
{
public:
	struct FMapShowcaseTooltipViewData            tooltipViewData;                                   // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapShowcaseTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on MapShowcaseTooltipWidget_SetTooltipData");
static_assert(sizeof(MapShowcaseTooltipWidget_SetTooltipData) == 0x000080, "Wrong size on MapShowcaseTooltipWidget_SetTooltipData");
static_assert(offsetof(MapShowcaseTooltipWidget_SetTooltipData, tooltipViewData) == 0x000000, "Member 'MapShowcaseTooltipWidget_SetTooltipData::tooltipViewData' has a wrong offset!");

// Function DBDUIViewsCore.MilestoneTrackerTierItem.SetData
// 0x0010 (0x0010 - 0x0000)
struct MilestoneTrackerTierItem_SetData final
{
public:
	struct FMilestoneTrackerItemViewData          Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MilestoneTrackerTierItem_SetData) == 0x000008, "Wrong alignment on MilestoneTrackerTierItem_SetData");
static_assert(sizeof(MilestoneTrackerTierItem_SetData) == 0x000010, "Wrong size on MilestoneTrackerTierItem_SetData");
static_assert(offsetof(MilestoneTrackerTierItem_SetData, Data) == 0x000000, "Member 'MilestoneTrackerTierItem_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.MilestoneTrackerTierItem.SetVisualState
// 0x0001 (0x0001 - 0x0000)
struct MilestoneTrackerTierItem_SetVisualState final
{
public:
	EMilestoneTrackerItemState                    State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MilestoneTrackerTierItem_SetVisualState) == 0x000001, "Wrong alignment on MilestoneTrackerTierItem_SetVisualState");
static_assert(sizeof(MilestoneTrackerTierItem_SetVisualState) == 0x000001, "Wrong size on MilestoneTrackerTierItem_SetVisualState");
static_assert(offsetof(MilestoneTrackerTierItem_SetVisualState, State) == 0x000000, "Member 'MilestoneTrackerTierItem_SetVisualState::State' has a wrong offset!");

// Function DBDUIViewsCore.MilestoneTrackerTierItem.UpdateBackground
// 0x0038 (0x0038 - 0x0000)
struct MilestoneTrackerTierItem_UpdateBackground final
{
public:
	TSoftObjectPtr<class UMaterialInstance>       Background;                                        // 0x0000(0x0038)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MilestoneTrackerTierItem_UpdateBackground) == 0x000008, "Wrong alignment on MilestoneTrackerTierItem_UpdateBackground");
static_assert(sizeof(MilestoneTrackerTierItem_UpdateBackground) == 0x000038, "Wrong size on MilestoneTrackerTierItem_UpdateBackground");
static_assert(offsetof(MilestoneTrackerTierItem_UpdateBackground, Background) == 0x000000, "Member 'MilestoneTrackerTierItem_UpdateBackground::Background' has a wrong offset!");

// Function DBDUIViewsCore.MilestoneTrackerWidget.OnRewardItemClicked
// 0x0008 (0x0008 - 0x0000)
struct MilestoneTrackerWidget_OnRewardItemClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MilestoneTrackerWidget_OnRewardItemClicked) == 0x000008, "Wrong alignment on MilestoneTrackerWidget_OnRewardItemClicked");
static_assert(sizeof(MilestoneTrackerWidget_OnRewardItemClicked) == 0x000008, "Wrong size on MilestoneTrackerWidget_OnRewardItemClicked");
static_assert(offsetof(MilestoneTrackerWidget_OnRewardItemClicked, buttonTarget) == 0x000000, "Member 'MilestoneTrackerWidget_OnRewardItemClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.MilestoneTrackerWidget.PlayMilestoneTrackerItemUnlockAnimation
// 0x0004 (0x0004 - 0x0000)
struct MilestoneTrackerWidget_PlayMilestoneTrackerItemUnlockAnimation final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MilestoneTrackerWidget_PlayMilestoneTrackerItemUnlockAnimation) == 0x000004, "Wrong alignment on MilestoneTrackerWidget_PlayMilestoneTrackerItemUnlockAnimation");
static_assert(sizeof(MilestoneTrackerWidget_PlayMilestoneTrackerItemUnlockAnimation) == 0x000004, "Wrong size on MilestoneTrackerWidget_PlayMilestoneTrackerItemUnlockAnimation");
static_assert(offsetof(MilestoneTrackerWidget_PlayMilestoneTrackerItemUnlockAnimation, Index_0) == 0x000000, "Member 'MilestoneTrackerWidget_PlayMilestoneTrackerItemUnlockAnimation::Index_0' has a wrong offset!");

// Function DBDUIViewsCore.MilestoneTrackerWidget.SelectMilestoneTrackerItem
// 0x000C (0x000C - 0x0000)
struct MilestoneTrackerWidget_SelectMilestoneTrackerItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MilestoneTrackerWidget_SelectMilestoneTrackerItem) == 0x000004, "Wrong alignment on MilestoneTrackerWidget_SelectMilestoneTrackerItem");
static_assert(sizeof(MilestoneTrackerWidget_SelectMilestoneTrackerItem) == 0x00000C, "Wrong size on MilestoneTrackerWidget_SelectMilestoneTrackerItem");
static_assert(offsetof(MilestoneTrackerWidget_SelectMilestoneTrackerItem, ItemId) == 0x000000, "Member 'MilestoneTrackerWidget_SelectMilestoneTrackerItem::ItemId' has a wrong offset!");

// Function DBDUIViewsCore.MilestoneTrackerWidget.SetData
// 0x0018 (0x0018 - 0x0000)
struct MilestoneTrackerWidget_SetData final
{
public:
	struct FMilestoneTrackerViewData              ViewData;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MilestoneTrackerWidget_SetData) == 0x000008, "Wrong alignment on MilestoneTrackerWidget_SetData");
static_assert(sizeof(MilestoneTrackerWidget_SetData) == 0x000018, "Wrong size on MilestoneTrackerWidget_SetData");
static_assert(offsetof(MilestoneTrackerWidget_SetData, ViewData) == 0x000000, "Member 'MilestoneTrackerWidget_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.MilestoneTrackerWidget.SetVisuals
// 0x0070 (0x0070 - 0x0000)
struct MilestoneTrackerWidget_SetVisuals final
{
public:
	struct FMilestoneTrackerEventBasedSkinViewData ViewData;                                         // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MilestoneTrackerWidget_SetVisuals) == 0x000008, "Wrong alignment on MilestoneTrackerWidget_SetVisuals");
static_assert(sizeof(MilestoneTrackerWidget_SetVisuals) == 0x000070, "Wrong size on MilestoneTrackerWidget_SetVisuals");
static_assert(offsetof(MilestoneTrackerWidget_SetVisuals, ViewData) == 0x000000, "Member 'MilestoneTrackerWidget_SetVisuals::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.ModalWidget.OnKeyDownAnywhere
// 0x0048 (0x0048 - 0x0000)
struct ModalWidget_OnKeyDownAnywhere final
{
public:
	struct FKeyEvent                              Event;                                             // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModalWidget_OnKeyDownAnywhere) == 0x000008, "Wrong alignment on ModalWidget_OnKeyDownAnywhere");
static_assert(sizeof(ModalWidget_OnKeyDownAnywhere) == 0x000048, "Wrong size on ModalWidget_OnKeyDownAnywhere");
static_assert(offsetof(ModalWidget_OnKeyDownAnywhere, Event) == 0x000000, "Member 'ModalWidget_OnKeyDownAnywhere::Event' has a wrong offset!");

// Function DBDUIViewsCore.ModalWidget.OnKeyUpAnywhere
// 0x0048 (0x0048 - 0x0000)
struct ModalWidget_OnKeyUpAnywhere final
{
public:
	struct FKeyEvent                              Event;                                             // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModalWidget_OnKeyUpAnywhere) == 0x000008, "Wrong alignment on ModalWidget_OnKeyUpAnywhere");
static_assert(sizeof(ModalWidget_OnKeyUpAnywhere) == 0x000048, "Wrong size on ModalWidget_OnKeyUpAnywhere");
static_assert(offsetof(ModalWidget_OnKeyUpAnywhere, Event) == 0x000000, "Member 'ModalWidget_OnKeyUpAnywhere::Event' has a wrong offset!");

// Function DBDUIViewsCore.ModalWidget.OnMouseDownAnywhere
// 0x0080 (0x0080 - 0x0000)
struct ModalWidget_OnMouseDownAnywhere final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModalWidget_OnMouseDownAnywhere) == 0x000008, "Wrong alignment on ModalWidget_OnMouseDownAnywhere");
static_assert(sizeof(ModalWidget_OnMouseDownAnywhere) == 0x000080, "Wrong size on ModalWidget_OnMouseDownAnywhere");
static_assert(offsetof(ModalWidget_OnMouseDownAnywhere, PointerEvent) == 0x000000, "Member 'ModalWidget_OnMouseDownAnywhere::PointerEvent' has a wrong offset!");

// Function DBDUIViewsCore.ModalWidget.OnMouseUpAnywhere
// 0x0080 (0x0080 - 0x0000)
struct ModalWidget_OnMouseUpAnywhere final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModalWidget_OnMouseUpAnywhere) == 0x000008, "Wrong alignment on ModalWidget_OnMouseUpAnywhere");
static_assert(sizeof(ModalWidget_OnMouseUpAnywhere) == 0x000080, "Wrong size on ModalWidget_OnMouseUpAnywhere");
static_assert(offsetof(ModalWidget_OnMouseUpAnywhere, PointerEvent) == 0x000000, "Member 'ModalWidget_OnMouseUpAnywhere::PointerEvent' has a wrong offset!");

// Function DBDUIViewsCore.NewRiftPopupWidget.OnReplayButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct NewRiftPopupWidget_OnReplayButtonClicked final
{
public:
	class UCoreButtonWidget*                      CoreButtonWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewRiftPopupWidget_OnReplayButtonClicked) == 0x000008, "Wrong alignment on NewRiftPopupWidget_OnReplayButtonClicked");
static_assert(sizeof(NewRiftPopupWidget_OnReplayButtonClicked) == 0x000008, "Wrong size on NewRiftPopupWidget_OnReplayButtonClicked");
static_assert(offsetof(NewRiftPopupWidget_OnReplayButtonClicked, CoreButtonWidget) == 0x000000, "Member 'NewRiftPopupWidget_OnReplayButtonClicked::CoreButtonWidget' has a wrong offset!");

// Function DBDUIViewsCore.NotEnoughCurrencyModalWidget.OnButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct NotEnoughCurrencyModalWidget_OnButtonClicked final
{
public:
	class UCoreButtonWidget*                      clickedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotEnoughCurrencyModalWidget_OnButtonClicked) == 0x000008, "Wrong alignment on NotEnoughCurrencyModalWidget_OnButtonClicked");
static_assert(sizeof(NotEnoughCurrencyModalWidget_OnButtonClicked) == 0x000008, "Wrong size on NotEnoughCurrencyModalWidget_OnButtonClicked");
static_assert(offsetof(NotEnoughCurrencyModalWidget_OnButtonClicked, clickedButton) == 0x000000, "Member 'NotEnoughCurrencyModalWidget_OnButtonClicked::clickedButton' has a wrong offset!");

// Function DBDUIViewsCore.NotEnoughCurrencyModalWidget.OnHovered
// 0x0008 (0x0008 - 0x0000)
struct NotEnoughCurrencyModalWidget_OnHovered final
{
public:
	class UCoreButtonWidget*                      hoveredButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotEnoughCurrencyModalWidget_OnHovered) == 0x000008, "Wrong alignment on NotEnoughCurrencyModalWidget_OnHovered");
static_assert(sizeof(NotEnoughCurrencyModalWidget_OnHovered) == 0x000008, "Wrong size on NotEnoughCurrencyModalWidget_OnHovered");
static_assert(offsetof(NotEnoughCurrencyModalWidget_OnHovered, hoveredButton) == 0x000000, "Member 'NotEnoughCurrencyModalWidget_OnHovered::hoveredButton' has a wrong offset!");

// Function DBDUIViewsCore.NotEnoughCurrencyModalWidget.OnUnhovered
// 0x0008 (0x0008 - 0x0000)
struct NotEnoughCurrencyModalWidget_OnUnhovered final
{
public:
	class UCoreButtonWidget*                      unhoveredButton;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotEnoughCurrencyModalWidget_OnUnhovered) == 0x000008, "Wrong alignment on NotEnoughCurrencyModalWidget_OnUnhovered");
static_assert(sizeof(NotEnoughCurrencyModalWidget_OnUnhovered) == 0x000008, "Wrong size on NotEnoughCurrencyModalWidget_OnUnhovered");
static_assert(offsetof(NotEnoughCurrencyModalWidget_OnUnhovered, unhoveredButton) == 0x000000, "Member 'NotEnoughCurrencyModalWidget_OnUnhovered::unhoveredButton' has a wrong offset!");

// Function DBDUIViewsCore.NotEnoughCurrencyModalWidget.SetTooltipData
// 0x0038 (0x0038 - 0x0000)
struct NotEnoughCurrencyModalWidget_SetTooltipData final
{
public:
	struct FNotEnoughCurrencyModalViewData        Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotEnoughCurrencyModalWidget_SetTooltipData) == 0x000008, "Wrong alignment on NotEnoughCurrencyModalWidget_SetTooltipData");
static_assert(sizeof(NotEnoughCurrencyModalWidget_SetTooltipData) == 0x000038, "Wrong size on NotEnoughCurrencyModalWidget_SetTooltipData");
static_assert(offsetof(NotEnoughCurrencyModalWidget_SetTooltipData, Data) == 0x000000, "Member 'NotEnoughCurrencyModalWidget_SetTooltipData::Data' has a wrong offset!");

// Function DBDUIViewsCore.ObjectiveRewardLabelWidget.SetData
// 0x000C (0x000C - 0x0000)
struct ObjectiveRewardLabelWidget_SetData final
{
public:
	struct FObjectiveRewardLabelViewData          ViewData;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveRewardLabelWidget_SetData) == 0x000004, "Wrong alignment on ObjectiveRewardLabelWidget_SetData");
static_assert(sizeof(ObjectiveRewardLabelWidget_SetData) == 0x00000C, "Wrong size on ObjectiveRewardLabelWidget_SetData");
static_assert(offsetof(ObjectiveRewardLabelWidget_SetData, ViewData) == 0x000000, "Member 'ObjectiveRewardLabelWidget_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.ObjectiveTrackerTooltipWidget.SetTooltipData
// 0x0108 (0x0108 - 0x0000)
struct ObjectiveTrackerTooltipWidget_SetTooltipData final
{
public:
	struct FEventObjectiveTrackerViewData         ViewData;                                          // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveTrackerTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on ObjectiveTrackerTooltipWidget_SetTooltipData");
static_assert(sizeof(ObjectiveTrackerTooltipWidget_SetTooltipData) == 0x000108, "Wrong size on ObjectiveTrackerTooltipWidget_SetTooltipData");
static_assert(offsetof(ObjectiveTrackerTooltipWidget_SetTooltipData, ViewData) == 0x000000, "Member 'ObjectiveTrackerTooltipWidget_SetTooltipData::ViewData' has a wrong offset!");

// Function DBDUIViewsCore.ProfileMenuCustomizationWidget.OnCustomizationGridItemClicked
// 0x0004 (0x0004 - 0x0000)
struct ProfileMenuCustomizationWidget_OnCustomizationGridItemClicked final
{
public:
	int32                                         selectedIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuCustomizationWidget_OnCustomizationGridItemClicked) == 0x000004, "Wrong alignment on ProfileMenuCustomizationWidget_OnCustomizationGridItemClicked");
static_assert(sizeof(ProfileMenuCustomizationWidget_OnCustomizationGridItemClicked) == 0x000004, "Wrong size on ProfileMenuCustomizationWidget_OnCustomizationGridItemClicked");
static_assert(offsetof(ProfileMenuCustomizationWidget_OnCustomizationGridItemClicked, selectedIndex) == 0x000000, "Member 'ProfileMenuCustomizationWidget_OnCustomizationGridItemClicked::selectedIndex' has a wrong offset!");

// Function DBDUIViewsCore.ProfileMenuPlayerRankWrapper.SetData
// 0x0028 (0x0028 - 0x0000)
struct ProfileMenuPlayerRankWrapper_SetData final
{
public:
	struct FRankViewData                          Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuPlayerRankWrapper_SetData) == 0x000008, "Wrong alignment on ProfileMenuPlayerRankWrapper_SetData");
static_assert(sizeof(ProfileMenuPlayerRankWrapper_SetData) == 0x000028, "Wrong size on ProfileMenuPlayerRankWrapper_SetData");
static_assert(offsetof(ProfileMenuPlayerRankWrapper_SetData, Data) == 0x000000, "Member 'ProfileMenuPlayerRankWrapper_SetData::Data' has a wrong offset!");

// Function DBDUIViewsCore.ReportFeedbackInfoWidget.SetData
// 0x0040 (0x0040 - 0x0000)
struct ReportFeedbackInfoWidget_SetData final
{
public:
	struct FReportFeedbackData                    ReportData;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReportFeedbackInfoWidget_SetData) == 0x000008, "Wrong alignment on ReportFeedbackInfoWidget_SetData");
static_assert(sizeof(ReportFeedbackInfoWidget_SetData) == 0x000040, "Wrong size on ReportFeedbackInfoWidget_SetData");
static_assert(offsetof(ReportFeedbackInfoWidget_SetData, ReportData) == 0x000000, "Member 'ReportFeedbackInfoWidget_SetData::ReportData' has a wrong offset!");

// Function DBDUIViewsCore.RichTextBlockScalableImageDecorator.SetTintColor
// 0x0014 (0x0014 - 0x0000)
struct RichTextBlockScalableImageDecorator_SetTintColor final
{
public:
	struct FSlateColor                            TintColor_0;                                       // 0x0000(0x0014)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RichTextBlockScalableImageDecorator_SetTintColor) == 0x000004, "Wrong alignment on RichTextBlockScalableImageDecorator_SetTintColor");
static_assert(sizeof(RichTextBlockScalableImageDecorator_SetTintColor) == 0x000014, "Wrong size on RichTextBlockScalableImageDecorator_SetTintColor");
static_assert(offsetof(RichTextBlockScalableImageDecorator_SetTintColor, TintColor_0) == 0x000000, "Member 'RichTextBlockScalableImageDecorator_SetTintColor::TintColor_0' has a wrong offset!");

// Function DBDUIViewsCore.SecurityCameraOverlayWidget.GetLocalizedDisabledLabel
// 0x0018 (0x0018 - 0x0000)
struct SecurityCameraOverlayWidget_GetLocalizedDisabledLabel final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SecurityCameraOverlayWidget_GetLocalizedDisabledLabel) == 0x000008, "Wrong alignment on SecurityCameraOverlayWidget_GetLocalizedDisabledLabel");
static_assert(sizeof(SecurityCameraOverlayWidget_GetLocalizedDisabledLabel) == 0x000018, "Wrong size on SecurityCameraOverlayWidget_GetLocalizedDisabledLabel");
static_assert(offsetof(SecurityCameraOverlayWidget_GetLocalizedDisabledLabel, ReturnValue) == 0x000000, "Member 'SecurityCameraOverlayWidget_GetLocalizedDisabledLabel::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.SecurityCameraOverlayWidget.GetLocalizedUsedLabel
// 0x0018 (0x0018 - 0x0000)
struct SecurityCameraOverlayWidget_GetLocalizedUsedLabel final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SecurityCameraOverlayWidget_GetLocalizedUsedLabel) == 0x000008, "Wrong alignment on SecurityCameraOverlayWidget_GetLocalizedUsedLabel");
static_assert(sizeof(SecurityCameraOverlayWidget_GetLocalizedUsedLabel) == 0x000018, "Wrong size on SecurityCameraOverlayWidget_GetLocalizedUsedLabel");
static_assert(offsetof(SecurityCameraOverlayWidget_GetLocalizedUsedLabel, ReturnValue) == 0x000000, "Member 'SecurityCameraOverlayWidget_GetLocalizedUsedLabel::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.SecurityCameraOverlayWidget.GetLocalizedYouLabel
// 0x0018 (0x0018 - 0x0000)
struct SecurityCameraOverlayWidget_GetLocalizedYouLabel final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SecurityCameraOverlayWidget_GetLocalizedYouLabel) == 0x000008, "Wrong alignment on SecurityCameraOverlayWidget_GetLocalizedYouLabel");
static_assert(sizeof(SecurityCameraOverlayWidget_GetLocalizedYouLabel) == 0x000018, "Wrong size on SecurityCameraOverlayWidget_GetLocalizedYouLabel");
static_assert(offsetof(SecurityCameraOverlayWidget_GetLocalizedYouLabel, ReturnValue) == 0x000000, "Member 'SecurityCameraOverlayWidget_GetLocalizedYouLabel::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.SecurityCameraOverlayWidget.GetBatteryPercent
// 0x0004 (0x0004 - 0x0000)
struct SecurityCameraOverlayWidget_GetBatteryPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SecurityCameraOverlayWidget_GetBatteryPercent) == 0x000004, "Wrong alignment on SecurityCameraOverlayWidget_GetBatteryPercent");
static_assert(sizeof(SecurityCameraOverlayWidget_GetBatteryPercent) == 0x000004, "Wrong size on SecurityCameraOverlayWidget_GetBatteryPercent");
static_assert(offsetof(SecurityCameraOverlayWidget_GetBatteryPercent, ReturnValue) == 0x000000, "Member 'SecurityCameraOverlayWidget_GetBatteryPercent::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.SecurityCameraOverlayWidget.GetPreviousState
// 0x0001 (0x0001 - 0x0000)
struct SecurityCameraOverlayWidget_GetPreviousState final
{
public:
	ESecurityCameraState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SecurityCameraOverlayWidget_GetPreviousState) == 0x000001, "Wrong alignment on SecurityCameraOverlayWidget_GetPreviousState");
static_assert(sizeof(SecurityCameraOverlayWidget_GetPreviousState) == 0x000001, "Wrong size on SecurityCameraOverlayWidget_GetPreviousState");
static_assert(offsetof(SecurityCameraOverlayWidget_GetPreviousState, ReturnValue) == 0x000000, "Member 'SecurityCameraOverlayWidget_GetPreviousState::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.SecurityCameraOverlayWidget.GetState
// 0x0001 (0x0001 - 0x0000)
struct SecurityCameraOverlayWidget_GetState final
{
public:
	ESecurityCameraState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SecurityCameraOverlayWidget_GetState) == 0x000001, "Wrong alignment on SecurityCameraOverlayWidget_GetState");
static_assert(sizeof(SecurityCameraOverlayWidget_GetState) == 0x000001, "Wrong size on SecurityCameraOverlayWidget_GetState");
static_assert(offsetof(SecurityCameraOverlayWidget_GetState, ReturnValue) == 0x000000, "Member 'SecurityCameraOverlayWidget_GetState::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.TestWidget.SetShowWorkbench
// 0x0001 (0x0001 - 0x0000)
struct TestWidget_SetShowWorkbench final
{
public:
	bool                                          showWorkbench_0;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestWidget_SetShowWorkbench) == 0x000001, "Wrong alignment on TestWidget_SetShowWorkbench");
static_assert(sizeof(TestWidget_SetShowWorkbench) == 0x000001, "Wrong size on TestWidget_SetShowWorkbench");
static_assert(offsetof(TestWidget_SetShowWorkbench, showWorkbench_0) == 0x000000, "Member 'TestWidget_SetShowWorkbench::showWorkbench_0' has a wrong offset!");

// Function DBDUIViewsCore.ToggleableWidgetPromptController.OnControlModeChanged
// 0x0001 (0x0001 - 0x0000)
struct ToggleableWidgetPromptController_OnControlModeChanged final
{
public:
	EControlMode                                  controlMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleableWidgetPromptController_OnControlModeChanged) == 0x000001, "Wrong alignment on ToggleableWidgetPromptController_OnControlModeChanged");
static_assert(sizeof(ToggleableWidgetPromptController_OnControlModeChanged) == 0x000001, "Wrong size on ToggleableWidgetPromptController_OnControlModeChanged");
static_assert(offsetof(ToggleableWidgetPromptController_OnControlModeChanged, controlMode) == 0x000000, "Member 'ToggleableWidgetPromptController_OnControlModeChanged::controlMode' has a wrong offset!");

// Function DBDUIViewsCore.ToggleableWidgetPromptController.OnScrollableStateChanged
// 0x0001 (0x0001 - 0x0000)
struct ToggleableWidgetPromptController_OnScrollableStateChanged final
{
public:
	bool                                          IsScrollable;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleableWidgetPromptController_OnScrollableStateChanged) == 0x000001, "Wrong alignment on ToggleableWidgetPromptController_OnScrollableStateChanged");
static_assert(sizeof(ToggleableWidgetPromptController_OnScrollableStateChanged) == 0x000001, "Wrong size on ToggleableWidgetPromptController_OnScrollableStateChanged");
static_assert(offsetof(ToggleableWidgetPromptController_OnScrollableStateChanged, IsScrollable) == 0x000000, "Member 'ToggleableWidgetPromptController_OnScrollableStateChanged::IsScrollable' has a wrong offset!");

// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetRotatePrompt
// 0x0008 (0x0008 - 0x0000)
struct ToggleableWidgetPromptController_SetRotatePrompt final
{
public:
	class UCoreKeyListenerInputPromptWidget*      rotatePrompt;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleableWidgetPromptController_SetRotatePrompt) == 0x000008, "Wrong alignment on ToggleableWidgetPromptController_SetRotatePrompt");
static_assert(sizeof(ToggleableWidgetPromptController_SetRotatePrompt) == 0x000008, "Wrong size on ToggleableWidgetPromptController_SetRotatePrompt");
static_assert(offsetof(ToggleableWidgetPromptController_SetRotatePrompt, rotatePrompt) == 0x000000, "Member 'ToggleableWidgetPromptController_SetRotatePrompt::rotatePrompt' has a wrong offset!");

// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetRotatePromptText
// 0x0018 (0x0018 - 0x0000)
struct ToggleableWidgetPromptController_SetRotatePromptText final
{
public:
	class FText                                   rotatePromptText;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleableWidgetPromptController_SetRotatePromptText) == 0x000008, "Wrong alignment on ToggleableWidgetPromptController_SetRotatePromptText");
static_assert(sizeof(ToggleableWidgetPromptController_SetRotatePromptText) == 0x000018, "Wrong size on ToggleableWidgetPromptController_SetRotatePromptText");
static_assert(offsetof(ToggleableWidgetPromptController_SetRotatePromptText, rotatePromptText) == 0x000000, "Member 'ToggleableWidgetPromptController_SetRotatePromptText::rotatePromptText' has a wrong offset!");

// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetScrollPrompt
// 0x0008 (0x0008 - 0x0000)
struct ToggleableWidgetPromptController_SetScrollPrompt final
{
public:
	class UCoreKeyListenerInputPromptWidget*      ScrollPrompt;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleableWidgetPromptController_SetScrollPrompt) == 0x000008, "Wrong alignment on ToggleableWidgetPromptController_SetScrollPrompt");
static_assert(sizeof(ToggleableWidgetPromptController_SetScrollPrompt) == 0x000008, "Wrong size on ToggleableWidgetPromptController_SetScrollPrompt");
static_assert(offsetof(ToggleableWidgetPromptController_SetScrollPrompt, ScrollPrompt) == 0x000000, "Member 'ToggleableWidgetPromptController_SetScrollPrompt::ScrollPrompt' has a wrong offset!");

// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetScrollPromptText
// 0x0018 (0x0018 - 0x0000)
struct ToggleableWidgetPromptController_SetScrollPromptText final
{
public:
	class FText                                   scrollPromptText;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleableWidgetPromptController_SetScrollPromptText) == 0x000008, "Wrong alignment on ToggleableWidgetPromptController_SetScrollPromptText");
static_assert(sizeof(ToggleableWidgetPromptController_SetScrollPromptText) == 0x000018, "Wrong size on ToggleableWidgetPromptController_SetScrollPromptText");
static_assert(offsetof(ToggleableWidgetPromptController_SetScrollPromptText, scrollPromptText) == 0x000000, "Member 'ToggleableWidgetPromptController_SetScrollPromptText::scrollPromptText' has a wrong offset!");

// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetTogglePrompt
// 0x0008 (0x0008 - 0x0000)
struct ToggleableWidgetPromptController_SetTogglePrompt final
{
public:
	class UCoreKeyListenerInputPromptWidget*      togglePrompt;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleableWidgetPromptController_SetTogglePrompt) == 0x000008, "Wrong alignment on ToggleableWidgetPromptController_SetTogglePrompt");
static_assert(sizeof(ToggleableWidgetPromptController_SetTogglePrompt) == 0x000008, "Wrong size on ToggleableWidgetPromptController_SetTogglePrompt");
static_assert(offsetof(ToggleableWidgetPromptController_SetTogglePrompt, togglePrompt) == 0x000000, "Member 'ToggleableWidgetPromptController_SetTogglePrompt::togglePrompt' has a wrong offset!");

// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetTogglePromptText
// 0x0018 (0x0018 - 0x0000)
struct ToggleableWidgetPromptController_SetTogglePromptText final
{
public:
	class FText                                   togglePromptText;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleableWidgetPromptController_SetTogglePromptText) == 0x000008, "Wrong alignment on ToggleableWidgetPromptController_SetTogglePromptText");
static_assert(sizeof(ToggleableWidgetPromptController_SetTogglePromptText) == 0x000018, "Wrong size on ToggleableWidgetPromptController_SetTogglePromptText");
static_assert(offsetof(ToggleableWidgetPromptController_SetTogglePromptText, togglePromptText) == 0x000000, "Member 'ToggleableWidgetPromptController_SetTogglePromptText::togglePromptText' has a wrong offset!");

// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetupScrollableWidget
// 0x0010 (0x0010 - 0x0000)
struct ToggleableWidgetPromptController_SetupScrollableWidget final
{
public:
	class UDBDScrollBox*                          ScrollBox;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreKeyListenerInputPromptWidget*      ScrollPrompt;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleableWidgetPromptController_SetupScrollableWidget) == 0x000008, "Wrong alignment on ToggleableWidgetPromptController_SetupScrollableWidget");
static_assert(sizeof(ToggleableWidgetPromptController_SetupScrollableWidget) == 0x000010, "Wrong size on ToggleableWidgetPromptController_SetupScrollableWidget");
static_assert(offsetof(ToggleableWidgetPromptController_SetupScrollableWidget, ScrollBox) == 0x000000, "Member 'ToggleableWidgetPromptController_SetupScrollableWidget::ScrollBox' has a wrong offset!");
static_assert(offsetof(ToggleableWidgetPromptController_SetupScrollableWidget, ScrollPrompt) == 0x000008, "Member 'ToggleableWidgetPromptController_SetupScrollableWidget::ScrollPrompt' has a wrong offset!");

// Function DBDUIViewsCore.ToggleableWidgetPromptController.SetupToggleableWidget
// 0x0030 (0x0030 - 0x0000)
struct ToggleableWidgetPromptController_SetupToggleableWidget final
{
public:
	class UDBDScrollBox*                          ScrollBox;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreDisplayStandWidget*                DisplayStand;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreKeyListenerInputPromptWidget*      togglePrompt;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreKeyListenerInputPromptWidget*      ScrollPrompt;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreKeyListenerInputPromptWidget*      rotatePrompt;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERightStickMode                               overrideMode;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ToggleableWidgetPromptController_SetupToggleableWidget) == 0x000008, "Wrong alignment on ToggleableWidgetPromptController_SetupToggleableWidget");
static_assert(sizeof(ToggleableWidgetPromptController_SetupToggleableWidget) == 0x000030, "Wrong size on ToggleableWidgetPromptController_SetupToggleableWidget");
static_assert(offsetof(ToggleableWidgetPromptController_SetupToggleableWidget, ScrollBox) == 0x000000, "Member 'ToggleableWidgetPromptController_SetupToggleableWidget::ScrollBox' has a wrong offset!");
static_assert(offsetof(ToggleableWidgetPromptController_SetupToggleableWidget, DisplayStand) == 0x000008, "Member 'ToggleableWidgetPromptController_SetupToggleableWidget::DisplayStand' has a wrong offset!");
static_assert(offsetof(ToggleableWidgetPromptController_SetupToggleableWidget, togglePrompt) == 0x000010, "Member 'ToggleableWidgetPromptController_SetupToggleableWidget::togglePrompt' has a wrong offset!");
static_assert(offsetof(ToggleableWidgetPromptController_SetupToggleableWidget, ScrollPrompt) == 0x000018, "Member 'ToggleableWidgetPromptController_SetupToggleableWidget::ScrollPrompt' has a wrong offset!");
static_assert(offsetof(ToggleableWidgetPromptController_SetupToggleableWidget, rotatePrompt) == 0x000020, "Member 'ToggleableWidgetPromptController_SetupToggleableWidget::rotatePrompt' has a wrong offset!");
static_assert(offsetof(ToggleableWidgetPromptController_SetupToggleableWidget, overrideMode) == 0x000028, "Member 'ToggleableWidgetPromptController_SetupToggleableWidget::overrideMode' has a wrong offset!");

// Function DBDUIViewsCore.ToggleableWidgetPromptController.UpdateInteractiveWidgetBehaviours
// 0x0001 (0x0001 - 0x0000)
struct ToggleableWidgetPromptController_UpdateInteractiveWidgetBehaviours final
{
public:
	ERightStickMode                               overrideMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleableWidgetPromptController_UpdateInteractiveWidgetBehaviours) == 0x000001, "Wrong alignment on ToggleableWidgetPromptController_UpdateInteractiveWidgetBehaviours");
static_assert(sizeof(ToggleableWidgetPromptController_UpdateInteractiveWidgetBehaviours) == 0x000001, "Wrong size on ToggleableWidgetPromptController_UpdateInteractiveWidgetBehaviours");
static_assert(offsetof(ToggleableWidgetPromptController_UpdateInteractiveWidgetBehaviours, overrideMode) == 0x000000, "Member 'ToggleableWidgetPromptController_UpdateInteractiveWidgetBehaviours::overrideMode' has a wrong offset!");

// Function DBDUIViewsCore.ToggleableWidgetPromptController.GetRightStickMode
// 0x0001 (0x0001 - 0x0000)
struct ToggleableWidgetPromptController_GetRightStickMode final
{
public:
	ERightStickMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleableWidgetPromptController_GetRightStickMode) == 0x000001, "Wrong alignment on ToggleableWidgetPromptController_GetRightStickMode");
static_assert(sizeof(ToggleableWidgetPromptController_GetRightStickMode) == 0x000001, "Wrong size on ToggleableWidgetPromptController_GetRightStickMode");
static_assert(offsetof(ToggleableWidgetPromptController_GetRightStickMode, ReturnValue) == 0x000000, "Member 'ToggleableWidgetPromptController_GetRightStickMode::ReturnValue' has a wrong offset!");

}

