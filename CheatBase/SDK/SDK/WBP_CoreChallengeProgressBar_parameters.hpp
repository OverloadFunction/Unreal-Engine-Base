#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CoreChallengeProgressBar

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_CoreChallengeProgressBar.WBP_CoreChallengeProgressBar_C.ExecuteUbergraph_WBP_CoreChallengeProgressBar
// 0x0020 (0x0020 - 0x0000)
struct WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetWrapTextAt_wrapTextAtValue_ImplicitCast; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMaxDesiredWidth_InMaxDesiredWidth_ImplicitCast; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar) == 0x000008, "Wrong alignment on WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar");
static_assert(sizeof(WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar) == 0x000020, "Wrong size on WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar");
static_assert(offsetof(WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar, EntryPoint) == 0x000000, "Member 'WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar, CallFunc_MakeVector2D_ReturnValue) == 0x000008, "Member 'WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar, CallFunc_SetWrapTextAt_wrapTextAtValue_ImplicitCast) == 0x000018, "Member 'WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar::CallFunc_SetWrapTextAt_wrapTextAtValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar, CallFunc_SetMaxDesiredWidth_InMaxDesiredWidth_ImplicitCast) == 0x00001C, "Member 'WBP_CoreChallengeProgressBar_C_ExecuteUbergraph_WBP_CoreChallengeProgressBar::CallFunc_SetMaxDesiredWidth_InMaxDesiredWidth_ImplicitCast' has a wrong offset!");

// Function WBP_CoreChallengeProgressBar.WBP_CoreChallengeProgressBar_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreChallengeProgressBar_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreChallengeProgressBar_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_CoreChallengeProgressBar_C_PreConstruct");
static_assert(sizeof(WBP_CoreChallengeProgressBar_C_PreConstruct) == 0x000001, "Wrong size on WBP_CoreChallengeProgressBar_C_PreConstruct");
static_assert(offsetof(WBP_CoreChallengeProgressBar_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_CoreChallengeProgressBar_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

