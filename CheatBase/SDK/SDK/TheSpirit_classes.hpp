#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheSpirit

#include "Basic.hpp"

#include "StatSystem_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "GameplayTagUtilities_structs.hpp"
#include "DBDCompetence_classes.hpp"
#include "DBDBots_classes.hpp"
#include "TheSpirit_structs.hpp"
#include "DBDGameplay_structs.hpp"
#include "DBDGameplay_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class TheSpirit.PhaseWalkingComponent
// 0x0638 (0x06F0 - 0x00B8)
class UPhaseWalkingComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FPhaseWalkInfo& PhaseWalkInfo)> OnPhaseWalkInfoReceived; // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnGameEndedVFX;                                    // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool Visible)>  TriggerSurvivorVisibilityVFX;                      // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool wasPassivePhaseWalking, bool wasActivePhaseWalking, const struct FPhaseWalkInfo& PhaseWalkInfo)> TriggerKillerVisibilityVFX; // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMaxActivePhaseWalkCharges;                       // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     _huskClass;                                        // 0x0110(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTagStateBool                          _isActivePhaseWalking;                             // 0x0118(0x0048)(Transient, NativeAccessSpecifierPrivate)
	struct FTagStateBool                          _isPassivePhaseWalking;                            // 0x0160(0x0048)(Transient, NativeAccessSpecifierPrivate)
	struct FTagStateBool                          _isInPostActivePhaseWalk;                          // 0x01A8(0x0048)(Net, Transient, NativeAccessSpecifierPrivate)
	bool                                          _isInteractionPhaseWalking;                        // 0x01F0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASpiritHusk*                            _husk;                                             // 0x01F8(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDBidirectionalTimer                 _activePhaseWalkCharges;                           // 0x0200(0x0028)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_228[0x28];                                     // 0x0228(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _survivorsAreVisible;                              // 0x0250(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_251[0x3F];                                     // 0x0251(0x003F)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _passivePhaseWalkHusksCount;                       // 0x0290(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   _isVisibleDuringPhaseWalkTags;                     // 0x0298(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _activePhaseWalkChargeGainRate;                    // 0x02A8(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _passivePhaseWalkDuration;                         // 0x0328(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _passivePhaseWalkFirstCooldownDuration;            // 0x03A8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _passivePhaseWalkCooldownDurationMin;              // 0x03D0(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _passivePhaseWalkCooldownDurationMax;              // 0x0450(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _activePhaseWalkMaxCharge;                         // 0x04D0(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _postActivePhaseWalkDuration;                      // 0x0550(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _activePhaseWalkMaxAcceleration;                   // 0x05D0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _defaultMaxAcceleration;                           // 0x05F8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _activePhaseWalkDistanceToHideKiller;              // 0x0620(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_648[0x8];                                      // 0x0648(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _postPhaseWalkSpeedCurve;                          // 0x0650(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_658[0x98];                                     // 0x0658(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_SetIsInPostActivePhaseWalk(bool Value);
	void DBD_RefillActivePhaseWalkCharges();
	void Local_EndPhaseWalks();
	void MakePassivePhaseWalkHusksVisible(const struct FTransform& huskTransform, float opacityValue, float speedValue);
	void ModifyActivePhaseWalkCharges(float Delta);
	void Multicast_Broadcast_PhaseWalk(const struct FPhaseWalkInfo& PhaseWalkInfo);
	void OnInRangeToKillerChanged(const bool inRange, class AKiller* Killer);
	void OnLevelReadyToPlay();
	void OnRep_Husk();
	void RefillActivePhaseWalkCharges();
	void Server_Broadcast_PhaseWalk(const struct FPhaseWalkInfo& PhaseWalkInfo);
	void SpawnPassivePhaseWalkHusks();
	void UpdateKillerVisibility();
	void UpdateSurvivorVisibility(bool Visible);

	bool CanStartActivePhaseWalk() const;
	float GetActivePhaseWalkChargePercentage() const;
	float GetActivePhaseWalkCharges() const;
	class AActor* GetHusk() const;
	const struct FDBDTimer GetPassivePhaseWalkTimer() const;
	int32 GetSpiritPassivePhaseWalkHusksCountToSpawn() const;
	bool IsActivePhaseWalking() const;
	bool IsHuskActive() const;
	bool IsPassivePhaseWalking() const;
	bool IsPhaseWalking() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhaseWalkingComponent">();
	}
	static class UPhaseWalkingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhaseWalkingComponent>();
	}
};
static_assert(alignof(UPhaseWalkingComponent) == 0x000008, "Wrong alignment on UPhaseWalkingComponent");
static_assert(sizeof(UPhaseWalkingComponent) == 0x0006F0, "Wrong size on UPhaseWalkingComponent");
static_assert(offsetof(UPhaseWalkingComponent, OnPhaseWalkInfoReceived) == 0x0000C0, "Member 'UPhaseWalkingComponent::OnPhaseWalkInfoReceived' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, OnGameEndedVFX) == 0x0000D0, "Member 'UPhaseWalkingComponent::OnGameEndedVFX' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, TriggerSurvivorVisibilityVFX) == 0x0000E0, "Member 'UPhaseWalkingComponent::TriggerSurvivorVisibilityVFX' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, TriggerKillerVisibilityVFX) == 0x0000F0, "Member 'UPhaseWalkingComponent::TriggerKillerVisibilityVFX' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, OnMaxActivePhaseWalkCharges) == 0x000100, "Member 'UPhaseWalkingComponent::OnMaxActivePhaseWalkCharges' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _huskClass) == 0x000110, "Member 'UPhaseWalkingComponent::_huskClass' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _isActivePhaseWalking) == 0x000118, "Member 'UPhaseWalkingComponent::_isActivePhaseWalking' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _isPassivePhaseWalking) == 0x000160, "Member 'UPhaseWalkingComponent::_isPassivePhaseWalking' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _isInPostActivePhaseWalk) == 0x0001A8, "Member 'UPhaseWalkingComponent::_isInPostActivePhaseWalk' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _isInteractionPhaseWalking) == 0x0001F0, "Member 'UPhaseWalkingComponent::_isInteractionPhaseWalking' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _husk) == 0x0001F8, "Member 'UPhaseWalkingComponent::_husk' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _activePhaseWalkCharges) == 0x000200, "Member 'UPhaseWalkingComponent::_activePhaseWalkCharges' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _survivorsAreVisible) == 0x000250, "Member 'UPhaseWalkingComponent::_survivorsAreVisible' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _passivePhaseWalkHusksCount) == 0x000290, "Member 'UPhaseWalkingComponent::_passivePhaseWalkHusksCount' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _isVisibleDuringPhaseWalkTags) == 0x000298, "Member 'UPhaseWalkingComponent::_isVisibleDuringPhaseWalkTags' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _activePhaseWalkChargeGainRate) == 0x0002A8, "Member 'UPhaseWalkingComponent::_activePhaseWalkChargeGainRate' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _passivePhaseWalkDuration) == 0x000328, "Member 'UPhaseWalkingComponent::_passivePhaseWalkDuration' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _passivePhaseWalkFirstCooldownDuration) == 0x0003A8, "Member 'UPhaseWalkingComponent::_passivePhaseWalkFirstCooldownDuration' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _passivePhaseWalkCooldownDurationMin) == 0x0003D0, "Member 'UPhaseWalkingComponent::_passivePhaseWalkCooldownDurationMin' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _passivePhaseWalkCooldownDurationMax) == 0x000450, "Member 'UPhaseWalkingComponent::_passivePhaseWalkCooldownDurationMax' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _activePhaseWalkMaxCharge) == 0x0004D0, "Member 'UPhaseWalkingComponent::_activePhaseWalkMaxCharge' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _postActivePhaseWalkDuration) == 0x000550, "Member 'UPhaseWalkingComponent::_postActivePhaseWalkDuration' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _activePhaseWalkMaxAcceleration) == 0x0005D0, "Member 'UPhaseWalkingComponent::_activePhaseWalkMaxAcceleration' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _defaultMaxAcceleration) == 0x0005F8, "Member 'UPhaseWalkingComponent::_defaultMaxAcceleration' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _activePhaseWalkDistanceToHideKiller) == 0x000620, "Member 'UPhaseWalkingComponent::_activePhaseWalkDistanceToHideKiller' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _postPhaseWalkSpeedCurve) == 0x000650, "Member 'UPhaseWalkingComponent::_postPhaseWalkSpeedCurve' has a wrong offset!");

// Class TheSpirit.ActivePhaseWalkInteraction
// 0x0180 (0x0A40 - 0x08C0)
class UActivePhaseWalkInteraction final : public UChargeableInteractionDefinition
{
public:
	struct FTunableStat                           _fullyChargedSpeed;                                // 0x08C0(0x0080)(Edit, NativeAccessSpecifierPrivate)
	float                                         _accelerationMultiplier;                           // 0x0940(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_944[0x4];                                      // 0x0944(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _chargingSpeedCurve;                               // 0x0948(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _phaseWalkPenaltyThreshold;                        // 0x0950(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _phaseWalkPenaltyValue;                            // 0x0978(0x0028)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9A0[0x8];                                      // 0x09A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTunableStat                           _activePhaseWalkChargeDuration;                    // 0x09A8(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           _activePhaseWalkChargingMontage;                   // 0x0A28(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A30[0x10];                                     // 0x0A30(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_ResetChargeVFX(class ADBDPlayer* Player);
	void OnPlayerLocallyObservedChanged(class ADBDPlayer* Player);
	void OnPowerCollected(class ADBDPlayer* collector);

	float GetChargeTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActivePhaseWalkInteraction">();
	}
	static class UActivePhaseWalkInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivePhaseWalkInteraction>();
	}
};
static_assert(alignof(UActivePhaseWalkInteraction) == 0x000010, "Wrong alignment on UActivePhaseWalkInteraction");
static_assert(sizeof(UActivePhaseWalkInteraction) == 0x000A40, "Wrong size on UActivePhaseWalkInteraction");
static_assert(offsetof(UActivePhaseWalkInteraction, _fullyChargedSpeed) == 0x0008C0, "Member 'UActivePhaseWalkInteraction::_fullyChargedSpeed' has a wrong offset!");
static_assert(offsetof(UActivePhaseWalkInteraction, _accelerationMultiplier) == 0x000940, "Member 'UActivePhaseWalkInteraction::_accelerationMultiplier' has a wrong offset!");
static_assert(offsetof(UActivePhaseWalkInteraction, _chargingSpeedCurve) == 0x000948, "Member 'UActivePhaseWalkInteraction::_chargingSpeedCurve' has a wrong offset!");
static_assert(offsetof(UActivePhaseWalkInteraction, _phaseWalkPenaltyThreshold) == 0x000950, "Member 'UActivePhaseWalkInteraction::_phaseWalkPenaltyThreshold' has a wrong offset!");
static_assert(offsetof(UActivePhaseWalkInteraction, _phaseWalkPenaltyValue) == 0x000978, "Member 'UActivePhaseWalkInteraction::_phaseWalkPenaltyValue' has a wrong offset!");
static_assert(offsetof(UActivePhaseWalkInteraction, _activePhaseWalkChargeDuration) == 0x0009A8, "Member 'UActivePhaseWalkInteraction::_activePhaseWalkChargeDuration' has a wrong offset!");
static_assert(offsetof(UActivePhaseWalkInteraction, _activePhaseWalkChargingMontage) == 0x000A28, "Member 'UActivePhaseWalkInteraction::_activePhaseWalkChargingMontage' has a wrong offset!");

// Class TheSpirit.Rancor
// 0x0030 (0x0490 - 0x0460)
class URancor final : public UPerk
{
public:
	float                                         _survivorRevealDuration;                           // 0x0460(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _killerRevealToObsessionDuration[0x3];             // 0x0464(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_470[0x8];                                      // 0x0470(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UStatusEffect*                          _exposedStatusEffect;                              // 0x0478(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _timedRevealKillerEffectClass;                     // 0x0480(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _rancorEffectClass;                                // 0x0488(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SpawnBubbleAtSurvivorsLocation();

	float GetKillerRevealToObsessionDurationAtLevel() const;
	float GetSurvivorRevealDuration() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Rancor">();
	}
	static class URancor* GetDefaultObj()
	{
		return GetDefaultObjImpl<URancor>();
	}
};
static_assert(alignof(URancor) == 0x000008, "Wrong alignment on URancor");
static_assert(sizeof(URancor) == 0x000490, "Wrong size on URancor");
static_assert(offsetof(URancor, _survivorRevealDuration) == 0x000460, "Member 'URancor::_survivorRevealDuration' has a wrong offset!");
static_assert(offsetof(URancor, _killerRevealToObsessionDuration) == 0x000464, "Member 'URancor::_killerRevealToObsessionDuration' has a wrong offset!");
static_assert(offsetof(URancor, _exposedStatusEffect) == 0x000478, "Member 'URancor::_exposedStatusEffect' has a wrong offset!");
static_assert(offsetof(URancor, _timedRevealKillerEffectClass) == 0x000480, "Member 'URancor::_timedRevealKillerEffectClass' has a wrong offset!");
static_assert(offsetof(URancor, _rancorEffectClass) == 0x000488, "Member 'URancor::_rancorEffectClass' has a wrong offset!");

// Class TheSpirit.AISkill_Interaction_PhaseWalk
// 0x0300 (0x05A0 - 0x02A0)
class UAISkill_Interaction_PhaseWalk final : public UAISkill_Interaction_KillerPower
{
public:
	struct FAITunableParameter                    MinimumTraversalRange;                             // 0x02A0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    MinimumChaseRange;                                 // 0x0300(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    MaxTraversalChargeUsage;                           // 0x0360(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    MinimumChargeUsage;                                // 0x03C0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    StopUnderRange;                                    // 0x0420(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    ChaseStopUnderPathLength;                          // 0x0480(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    SurvivorLostUnderPathLength;                       // 0x04E0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAITunableParameter                    SurvivorLostOverRange;                             // 0x0540(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_Interaction_PhaseWalk">();
	}
	static class UAISkill_Interaction_PhaseWalk* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_Interaction_PhaseWalk>();
	}
};
static_assert(alignof(UAISkill_Interaction_PhaseWalk) == 0x000008, "Wrong alignment on UAISkill_Interaction_PhaseWalk");
static_assert(sizeof(UAISkill_Interaction_PhaseWalk) == 0x0005A0, "Wrong size on UAISkill_Interaction_PhaseWalk");
static_assert(offsetof(UAISkill_Interaction_PhaseWalk, MinimumTraversalRange) == 0x0002A0, "Member 'UAISkill_Interaction_PhaseWalk::MinimumTraversalRange' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_PhaseWalk, MinimumChaseRange) == 0x000300, "Member 'UAISkill_Interaction_PhaseWalk::MinimumChaseRange' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_PhaseWalk, MaxTraversalChargeUsage) == 0x000360, "Member 'UAISkill_Interaction_PhaseWalk::MaxTraversalChargeUsage' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_PhaseWalk, MinimumChargeUsage) == 0x0003C0, "Member 'UAISkill_Interaction_PhaseWalk::MinimumChargeUsage' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_PhaseWalk, StopUnderRange) == 0x000420, "Member 'UAISkill_Interaction_PhaseWalk::StopUnderRange' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_PhaseWalk, ChaseStopUnderPathLength) == 0x000480, "Member 'UAISkill_Interaction_PhaseWalk::ChaseStopUnderPathLength' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_PhaseWalk, SurvivorLostUnderPathLength) == 0x0004E0, "Member 'UAISkill_Interaction_PhaseWalk::SurvivorLostUnderPathLength' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_PhaseWalk, SurvivorLostOverRange) == 0x000540, "Member 'UAISkill_Interaction_PhaseWalk::SurvivorLostOverRange' has a wrong offset!");

// Class TheSpirit.DriedCherryBlossom
// 0x0010 (0x0330 - 0x0320)
class UDriedCherryBlossom final : public USimpleSpawnEffectsOnAllSurvivorsAddon
{
public:
	TSubclassOf<class UStatusEffect>              _spiritDriedCherryBlossomStatusEffectClass;        // 0x0320(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DriedCherryBlossom">();
	}
	static class UDriedCherryBlossom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDriedCherryBlossom>();
	}
};
static_assert(alignof(UDriedCherryBlossom) == 0x000008, "Wrong alignment on UDriedCherryBlossom");
static_assert(sizeof(UDriedCherryBlossom) == 0x000330, "Wrong size on UDriedCherryBlossom");
static_assert(offsetof(UDriedCherryBlossom, _spiritDriedCherryBlossomStatusEffectClass) == 0x000320, "Member 'UDriedCherryBlossom::_spiritDriedCherryBlossomStatusEffectClass' has a wrong offset!");

// Class TheSpirit.KatsumoriTalisman
// 0x0020 (0x0320 - 0x0300)
class UKatsumoriTalisman final : public UItemAddon
{
public:
	TArray<class AActor*>                         _blockableWindows;                                 // 0x0300(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	float                                         _explosionRadius;                                  // 0x0310(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _blockDuration;                                    // 0x0314(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_318[0x8];                                      // 0x0318(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KatsumoriTalisman">();
	}
	static class UKatsumoriTalisman* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKatsumoriTalisman>();
	}
};
static_assert(alignof(UKatsumoriTalisman) == 0x000008, "Wrong alignment on UKatsumoriTalisman");
static_assert(sizeof(UKatsumoriTalisman) == 0x000320, "Wrong size on UKatsumoriTalisman");
static_assert(offsetof(UKatsumoriTalisman, _blockableWindows) == 0x000300, "Member 'UKatsumoriTalisman::_blockableWindows' has a wrong offset!");
static_assert(offsetof(UKatsumoriTalisman, _explosionRadius) == 0x000310, "Member 'UKatsumoriTalisman::_explosionRadius' has a wrong offset!");
static_assert(offsetof(UKatsumoriTalisman, _blockDuration) == 0x000314, "Member 'UKatsumoriTalisman::_blockDuration' has a wrong offset!");

// Class TheSpirit.MotherDaughterRing
// 0x0008 (0x0308 - 0x0300)
class UMotherDaughterRing final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _hideFootstepsEffect;                              // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MotherDaughterRing">();
	}
	static class UMotherDaughterRing* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMotherDaughterRing>();
	}
};
static_assert(alignof(UMotherDaughterRing) == 0x000008, "Wrong alignment on UMotherDaughterRing");
static_assert(sizeof(UMotherDaughterRing) == 0x000308, "Wrong size on UMotherDaughterRing");
static_assert(offsetof(UMotherDaughterRing, _hideFootstepsEffect) == 0x000300, "Member 'UMotherDaughterRing::_hideFootstepsEffect' has a wrong offset!");

// Class TheSpirit.OwningPlayerInSpiritHuskRange
// 0x0010 (0x0118 - 0x0108)
class UOwningPlayerInSpiritHuskRange final : public UAnyActorPairQueryRangeIsTrue
{
public:
	uint8                                         Pad_108[0x10];                                     // 0x0108(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnKillerSet(class AKiller* Killer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OwningPlayerInSpiritHuskRange">();
	}
	static class UOwningPlayerInSpiritHuskRange* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOwningPlayerInSpiritHuskRange>();
	}
};
static_assert(alignof(UOwningPlayerInSpiritHuskRange) == 0x000008, "Wrong alignment on UOwningPlayerInSpiritHuskRange");
static_assert(sizeof(UOwningPlayerInSpiritHuskRange) == 0x000118, "Wrong size on UOwningPlayerInSpiritHuskRange");

// Class TheSpirit.SpiritFury
// 0x0010 (0x0470 - 0x0460)
class USpiritFury final : public UPerk
{
public:
	uint8                                         Pad_460[0x4];                                      // 0x0460(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _palletToBreakCountPerLevel[0x3];                  // 0x0464(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	int32 GetPalletToBreakCountAtLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiritFury">();
	}
	static class USpiritFury* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiritFury>();
	}
};
static_assert(alignof(USpiritFury) == 0x000008, "Wrong alignment on USpiritFury");
static_assert(sizeof(USpiritFury) == 0x000470, "Wrong size on USpiritFury");
static_assert(offsetof(USpiritFury, _palletToBreakCountPerLevel) == 0x000464, "Member 'USpiritFury::_palletToBreakCountPerLevel' has a wrong offset!");

// Class TheSpirit.SpiritHusk
// 0x0010 (0x02F8 - 0x02E8)
class ASpiritHusk final : public ABaseHusk
{
public:
	class UTerrorRadiusEmitterComponent*          _terrorRadiusEmitter;                              // 0x02E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateHusk(const struct FTransform& Transform);
	void Cosmetic_OnHuskVisibilityChanged(bool IsVisible);
	void DeactivateHusk();
	void Multicast_HuskStunned();
	void OnIntroCompleted();
	void OnKillerTerrorRadiusChanged(float NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiritHusk">();
	}
	static class ASpiritHusk* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpiritHusk>();
	}
};
static_assert(alignof(ASpiritHusk) == 0x000008, "Wrong alignment on ASpiritHusk");
static_assert(sizeof(ASpiritHusk) == 0x0002F8, "Wrong size on ASpiritHusk");
static_assert(offsetof(ASpiritHusk, _terrorRadiusEmitter) == 0x0002E8, "Member 'ASpiritHusk::_terrorRadiusEmitter' has a wrong offset!");

// Class TheSpirit.SpiritHuskAnimInstance
// 0x0020 (0x0370 - 0x0350)
class USpiritHuskAnimInstance : public UAnimInstance
{
public:
	class USkeletalMeshComponent*                 _killerMesh;                                       // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           _killerPresenceTag;                                // 0x0358(0x000C)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_364[0xC];                                      // 0x0364(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiritHuskAnimInstance">();
	}
	static class USpiritHuskAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiritHuskAnimInstance>();
	}
};
static_assert(alignof(USpiritHuskAnimInstance) == 0x000010, "Wrong alignment on USpiritHuskAnimInstance");
static_assert(sizeof(USpiritHuskAnimInstance) == 0x000370, "Wrong size on USpiritHuskAnimInstance");
static_assert(offsetof(USpiritHuskAnimInstance, _killerMesh) == 0x000350, "Member 'USpiritHuskAnimInstance::_killerMesh' has a wrong offset!");
static_assert(offsetof(USpiritHuskAnimInstance, _killerPresenceTag) == 0x000358, "Member 'USpiritHuskAnimInstance::_killerPresenceTag' has a wrong offset!");

// Class TheSpirit.SpiritHuskActivePhaseWalkAnimInstance
// 0x0020 (0x0390 - 0x0370)
class USpiritHuskActivePhaseWalkAnimInstance final : public USpiritHuskAnimInstance
{
public:
	float                                         _elapsedTimeSinceFakingRealKillerPose;             // 0x0370(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _idleAnimationExplicitTime;                        // 0x0374(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          _idleAnimationSequence;                            // 0x0380(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiritHuskActivePhaseWalkAnimInstance">();
	}
	static class USpiritHuskActivePhaseWalkAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiritHuskActivePhaseWalkAnimInstance>();
	}
};
static_assert(alignof(USpiritHuskActivePhaseWalkAnimInstance) == 0x000010, "Wrong alignment on USpiritHuskActivePhaseWalkAnimInstance");
static_assert(sizeof(USpiritHuskActivePhaseWalkAnimInstance) == 0x000390, "Wrong size on USpiritHuskActivePhaseWalkAnimInstance");
static_assert(offsetof(USpiritHuskActivePhaseWalkAnimInstance, _elapsedTimeSinceFakingRealKillerPose) == 0x000370, "Member 'USpiritHuskActivePhaseWalkAnimInstance::_elapsedTimeSinceFakingRealKillerPose' has a wrong offset!");
static_assert(offsetof(USpiritHuskActivePhaseWalkAnimInstance, _idleAnimationExplicitTime) == 0x000374, "Member 'USpiritHuskActivePhaseWalkAnimInstance::_idleAnimationExplicitTime' has a wrong offset!");
static_assert(offsetof(USpiritHuskActivePhaseWalkAnimInstance, _idleAnimationSequence) == 0x000380, "Member 'USpiritHuskActivePhaseWalkAnimInstance::_idleAnimationSequence' has a wrong offset!");

// Class TheSpirit.SpiritHuskOutlineUpdateStrategy
// 0x0038 (0x0118 - 0x00E0)
class USpiritHuskOutlineUpdateStrategy final : public UOutlineUpdateStrategy
{
public:
	class AKiller*                                _cachedKiller;                                     // 0x00E0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x30];                                      // 0x00E8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnIntroCompleted();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiritHuskOutlineUpdateStrategy">();
	}
	static class USpiritHuskOutlineUpdateStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiritHuskOutlineUpdateStrategy>();
	}
};
static_assert(alignof(USpiritHuskOutlineUpdateStrategy) == 0x000008, "Wrong alignment on USpiritHuskOutlineUpdateStrategy");
static_assert(sizeof(USpiritHuskOutlineUpdateStrategy) == 0x000118, "Wrong size on USpiritHuskOutlineUpdateStrategy");
static_assert(offsetof(USpiritHuskOutlineUpdateStrategy, _cachedKiller) == 0x0000E0, "Member 'USpiritHuskOutlineUpdateStrategy::_cachedKiller' has a wrong offset!");

// Class TheSpirit.SpiritHuskRedStainUpdateStrategy
// 0x0008 (0x0100 - 0x00F8)
class USpiritHuskRedStainUpdateStrategy final : public UKillerRedStainUpdateStrategy
{
public:
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiritHuskRedStainUpdateStrategy">();
	}
	static class USpiritHuskRedStainUpdateStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiritHuskRedStainUpdateStrategy>();
	}
};
static_assert(alignof(USpiritHuskRedStainUpdateStrategy) == 0x000008, "Wrong alignment on USpiritHuskRedStainUpdateStrategy");
static_assert(sizeof(USpiritHuskRedStainUpdateStrategy) == 0x000100, "Wrong size on USpiritHuskRedStainUpdateStrategy");

// Class TheSpirit.SpiritHuskStunnableComponent
// 0x0008 (0x00C0 - 0x00B8)
class USpiritHuskStunnableComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiritHuskStunnableComponent">();
	}
	static class USpiritHuskStunnableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiritHuskStunnableComponent>();
	}
};
static_assert(alignof(USpiritHuskStunnableComponent) == 0x000008, "Wrong alignment on USpiritHuskStunnableComponent");
static_assert(sizeof(USpiritHuskStunnableComponent) == 0x0000C0, "Wrong size on USpiritHuskStunnableComponent");

}

