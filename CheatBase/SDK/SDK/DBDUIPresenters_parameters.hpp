#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIPresenters

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function DBDUIPresenters.Presenter.GetIgnoredPresentationRequirementFunctionOptions
// 0x0010 (0x0010 - 0x0000)
struct Presenter_GetIgnoredPresentationRequirementFunctionOptions final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Presenter_GetIgnoredPresentationRequirementFunctionOptions) == 0x000008, "Wrong alignment on Presenter_GetIgnoredPresentationRequirementFunctionOptions");
static_assert(sizeof(Presenter_GetIgnoredPresentationRequirementFunctionOptions) == 0x000010, "Wrong size on Presenter_GetIgnoredPresentationRequirementFunctionOptions");
static_assert(offsetof(Presenter_GetIgnoredPresentationRequirementFunctionOptions, ReturnValue) == 0x000000, "Member 'Presenter_GetIgnoredPresentationRequirementFunctionOptions::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.Presenter.OnContextChanged
// 0x0001 (0x0001 - 0x0000)
struct Presenter_OnContextChanged final
{
public:
	EContext                                      Context;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Presenter_OnContextChanged) == 0x000001, "Wrong alignment on Presenter_OnContextChanged");
static_assert(sizeof(Presenter_OnContextChanged) == 0x000001, "Wrong size on Presenter_OnContextChanged");
static_assert(offsetof(Presenter_OnContextChanged, Context) == 0x000000, "Member 'Presenter_OnContextChanged::Context' has a wrong offset!");

// Function DBDUIPresenters.Presenter.OnContextFocus
// 0x0001 (0x0001 - 0x0000)
struct Presenter_OnContextFocus final
{
public:
	EContext                                      Context;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Presenter_OnContextFocus) == 0x000001, "Wrong alignment on Presenter_OnContextFocus");
static_assert(sizeof(Presenter_OnContextFocus) == 0x000001, "Wrong size on Presenter_OnContextFocus");
static_assert(offsetof(Presenter_OnContextFocus, Context) == 0x000000, "Member 'Presenter_OnContextFocus::Context' has a wrong offset!");

// Function DBDUIPresenters.Presenter.OnContextUnfocus
// 0x0001 (0x0001 - 0x0000)
struct Presenter_OnContextUnfocus final
{
public:
	EContext                                      Context;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Presenter_OnContextUnfocus) == 0x000001, "Wrong alignment on Presenter_OnContextUnfocus");
static_assert(sizeof(Presenter_OnContextUnfocus) == 0x000001, "Wrong size on Presenter_OnContextUnfocus");
static_assert(offsetof(Presenter_OnContextUnfocus, Context) == 0x000000, "Member 'Presenter_OnContextUnfocus::Context' has a wrong offset!");

// Function DBDUIPresenters.Presenter.IsContextReady
// 0x0001 (0x0001 - 0x0000)
struct Presenter_IsContextReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Presenter_IsContextReady) == 0x000001, "Wrong alignment on Presenter_IsContextReady");
static_assert(sizeof(Presenter_IsContextReady) == 0x000001, "Wrong size on Presenter_IsContextReady");
static_assert(offsetof(Presenter_IsContextReady, ReturnValue) == 0x000000, "Member 'Presenter_IsContextReady::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.Presenter.ShouldPresent
// 0x0001 (0x0001 - 0x0000)
struct Presenter_ShouldPresent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Presenter_ShouldPresent) == 0x000001, "Wrong alignment on Presenter_ShouldPresent");
static_assert(sizeof(Presenter_ShouldPresent) == 0x000001, "Wrong size on Presenter_ShouldPresent");
static_assert(offsetof(Presenter_ShouldPresent, ReturnValue) == 0x000000, "Member 'Presenter_ShouldPresent::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.HudPresenter.IsHudReady
// 0x0001 (0x0001 - 0x0000)
struct HudPresenter_IsHudReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPresenter_IsHudReady) == 0x000001, "Wrong alignment on HudPresenter_IsHudReady");
static_assert(sizeof(HudPresenter_IsHudReady) == 0x000001, "Wrong size on HudPresenter_IsHudReady");
static_assert(offsetof(HudPresenter_IsHudReady, ReturnValue) == 0x000000, "Member 'HudPresenter_IsHudReady::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.HudPresenter.OnPawnPossessed
// 0x0008 (0x0008 - 0x0000)
struct HudPresenter_OnPawnPossessed final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPresenter_OnPawnPossessed) == 0x000008, "Wrong alignment on HudPresenter_OnPawnPossessed");
static_assert(sizeof(HudPresenter_OnPawnPossessed) == 0x000008, "Wrong size on HudPresenter_OnPawnPossessed");
static_assert(offsetof(HudPresenter_OnPawnPossessed, Pawn) == 0x000000, "Member 'HudPresenter_OnPawnPossessed::Pawn' has a wrong offset!");

// Function DBDUIPresenters.HudPresenter.OnPawnUnpossessed
// 0x0008 (0x0008 - 0x0000)
struct HudPresenter_OnPawnUnpossessed final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPresenter_OnPawnUnpossessed) == 0x000008, "Wrong alignment on HudPresenter_OnPawnUnpossessed");
static_assert(sizeof(HudPresenter_OnPawnUnpossessed) == 0x000008, "Wrong size on HudPresenter_OnPawnUnpossessed");
static_assert(offsetof(HudPresenter_OnPawnUnpossessed, Pawn) == 0x000000, "Member 'HudPresenter_OnPawnUnpossessed::Pawn' has a wrong offset!");

// Function DBDUIPresenters.HudPresenter.IsGameStateReady
// 0x0001 (0x0001 - 0x0000)
struct HudPresenter_IsGameStateReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPresenter_IsGameStateReady) == 0x000001, "Wrong alignment on HudPresenter_IsGameStateReady");
static_assert(sizeof(HudPresenter_IsGameStateReady) == 0x000001, "Wrong size on HudPresenter_IsGameStateReady");
static_assert(offsetof(HudPresenter_IsGameStateReady, ReturnValue) == 0x000000, "Member 'HudPresenter_IsGameStateReady::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.HudPresenter.IsPendingPawnReady
// 0x0001 (0x0001 - 0x0000)
struct HudPresenter_IsPendingPawnReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPresenter_IsPendingPawnReady) == 0x000001, "Wrong alignment on HudPresenter_IsPendingPawnReady");
static_assert(sizeof(HudPresenter_IsPendingPawnReady) == 0x000001, "Wrong size on HudPresenter_IsPendingPawnReady");
static_assert(offsetof(HudPresenter_IsPendingPawnReady, ReturnValue) == 0x000000, "Member 'HudPresenter_IsPendingPawnReady::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.HudPresenter.IsPlayerStateReady
// 0x0001 (0x0001 - 0x0000)
struct HudPresenter_IsPlayerStateReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPresenter_IsPlayerStateReady) == 0x000001, "Wrong alignment on HudPresenter_IsPlayerStateReady");
static_assert(sizeof(HudPresenter_IsPlayerStateReady) == 0x000001, "Wrong size on HudPresenter_IsPlayerStateReady");
static_assert(offsetof(HudPresenter_IsPlayerStateReady, ReturnValue) == 0x000000, "Member 'HudPresenter_IsPlayerStateReady::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.HudPresenter.IsVisibleForCurrentGameMode
// 0x0001 (0x0001 - 0x0000)
struct HudPresenter_IsVisibleForCurrentGameMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPresenter_IsVisibleForCurrentGameMode) == 0x000001, "Wrong alignment on HudPresenter_IsVisibleForCurrentGameMode");
static_assert(sizeof(HudPresenter_IsVisibleForCurrentGameMode) == 0x000001, "Wrong size on HudPresenter_IsVisibleForCurrentGameMode");
static_assert(offsetof(HudPresenter_IsVisibleForCurrentGameMode, ReturnValue) == 0x000000, "Member 'HudPresenter_IsVisibleForCurrentGameMode::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.HudEventProgressionPresenter.OnEventHauntTargetChanged
// 0x0004 (0x0004 - 0x0000)
struct HudEventProgressionPresenter_OnEventHauntTargetChanged final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventProgressionPresenter_OnEventHauntTargetChanged) == 0x000004, "Wrong alignment on HudEventProgressionPresenter_OnEventHauntTargetChanged");
static_assert(sizeof(HudEventProgressionPresenter_OnEventHauntTargetChanged) == 0x000004, "Wrong size on HudEventProgressionPresenter_OnEventHauntTargetChanged");
static_assert(offsetof(HudEventProgressionPresenter_OnEventHauntTargetChanged, Value) == 0x000000, "Member 'HudEventProgressionPresenter_OnEventHauntTargetChanged::Value' has a wrong offset!");

// Function DBDUIPresenters.HudEventProgressionPresenter.OnEventInVoidZoneChanged
// 0x0001 (0x0001 - 0x0000)
struct HudEventProgressionPresenter_OnEventInVoidZoneChanged final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventProgressionPresenter_OnEventInVoidZoneChanged) == 0x000001, "Wrong alignment on HudEventProgressionPresenter_OnEventInVoidZoneChanged");
static_assert(sizeof(HudEventProgressionPresenter_OnEventInVoidZoneChanged) == 0x000001, "Wrong size on HudEventProgressionPresenter_OnEventInVoidZoneChanged");
static_assert(offsetof(HudEventProgressionPresenter_OnEventInVoidZoneChanged, Value) == 0x000000, "Member 'HudEventProgressionPresenter_OnEventInVoidZoneChanged::Value' has a wrong offset!");

// Function DBDUIPresenters.HudEventProgressionPresenter.OnEventIsChannelingHauntChanged
// 0x0001 (0x0001 - 0x0000)
struct HudEventProgressionPresenter_OnEventIsChannelingHauntChanged final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventProgressionPresenter_OnEventIsChannelingHauntChanged) == 0x000001, "Wrong alignment on HudEventProgressionPresenter_OnEventIsChannelingHauntChanged");
static_assert(sizeof(HudEventProgressionPresenter_OnEventIsChannelingHauntChanged) == 0x000001, "Wrong size on HudEventProgressionPresenter_OnEventIsChannelingHauntChanged");
static_assert(offsetof(HudEventProgressionPresenter_OnEventIsChannelingHauntChanged, Value) == 0x000000, "Member 'HudEventProgressionPresenter_OnEventIsChannelingHauntChanged::Value' has a wrong offset!");

// Function DBDUIPresenters.HudEventProgressionPresenter.OnEventProgressChanged
// 0x0004 (0x0004 - 0x0000)
struct HudEventProgressionPresenter_OnEventProgressChanged final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventProgressionPresenter_OnEventProgressChanged) == 0x000004, "Wrong alignment on HudEventProgressionPresenter_OnEventProgressChanged");
static_assert(sizeof(HudEventProgressionPresenter_OnEventProgressChanged) == 0x000004, "Wrong size on HudEventProgressionPresenter_OnEventProgressChanged");
static_assert(offsetof(HudEventProgressionPresenter_OnEventProgressChanged, Value) == 0x000000, "Member 'HudEventProgressionPresenter_OnEventProgressChanged::Value' has a wrong offset!");

// Function DBDUIPresenters.HudEventProgressionPresenter.OnEventProgressionDataInitialized
// 0x0014 (0x0014 - 0x0000)
struct HudEventProgressionPresenter_OnEventProgressionDataInitialized final
{
public:
	struct FHudEventProgression2023ViewData       EventProgressionData;                              // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventProgressionPresenter_OnEventProgressionDataInitialized) == 0x000004, "Wrong alignment on HudEventProgressionPresenter_OnEventProgressionDataInitialized");
static_assert(sizeof(HudEventProgressionPresenter_OnEventProgressionDataInitialized) == 0x000014, "Wrong size on HudEventProgressionPresenter_OnEventProgressionDataInitialized");
static_assert(offsetof(HudEventProgressionPresenter_OnEventProgressionDataInitialized, EventProgressionData) == 0x000000, "Member 'HudEventProgressionPresenter_OnEventProgressionDataInitialized::EventProgressionData' has a wrong offset!");

// Function DBDUIPresenters.AlertsPresenter.CanStartRewardSequence
// 0x0001 (0x0001 - 0x0000)
struct AlertsPresenter_CanStartRewardSequence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AlertsPresenter_CanStartRewardSequence) == 0x000001, "Wrong alignment on AlertsPresenter_CanStartRewardSequence");
static_assert(sizeof(AlertsPresenter_CanStartRewardSequence) == 0x000001, "Wrong size on AlertsPresenter_CanStartRewardSequence");
static_assert(offsetof(AlertsPresenter_CanStartRewardSequence, ReturnValue) == 0x000000, "Member 'AlertsPresenter_CanStartRewardSequence::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.AlertsPresenter.HasPendingViewData
// 0x0001 (0x0001 - 0x0000)
struct AlertsPresenter_HasPendingViewData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AlertsPresenter_HasPendingViewData) == 0x000001, "Wrong alignment on AlertsPresenter_HasPendingViewData");
static_assert(sizeof(AlertsPresenter_HasPendingViewData) == 0x000001, "Wrong size on AlertsPresenter_HasPendingViewData");
static_assert(offsetof(AlertsPresenter_HasPendingViewData, ReturnValue) == 0x000000, "Member 'AlertsPresenter_HasPendingViewData::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.AnimationPreviewPresenter.OnContextEnter
// 0x0001 (0x0001 - 0x0000)
struct AnimationPreviewPresenter_OnContextEnter final
{
public:
	EContext                                      Context;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationPreviewPresenter_OnContextEnter) == 0x000001, "Wrong alignment on AnimationPreviewPresenter_OnContextEnter");
static_assert(sizeof(AnimationPreviewPresenter_OnContextEnter) == 0x000001, "Wrong size on AnimationPreviewPresenter_OnContextEnter");
static_assert(offsetof(AnimationPreviewPresenter_OnContextEnter, Context) == 0x000000, "Member 'AnimationPreviewPresenter_OnContextEnter::Context' has a wrong offset!");

// Function DBDUIPresenters.AnimationPreviewPresenter.OnContextLeave
// 0x0001 (0x0001 - 0x0000)
struct AnimationPreviewPresenter_OnContextLeave final
{
public:
	EContext                                      Context;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationPreviewPresenter_OnContextLeave) == 0x000001, "Wrong alignment on AnimationPreviewPresenter_OnContextLeave");
static_assert(sizeof(AnimationPreviewPresenter_OnContextLeave) == 0x000001, "Wrong size on AnimationPreviewPresenter_OnContextLeave");
static_assert(offsetof(AnimationPreviewPresenter_OnContextLeave, Context) == 0x000000, "Member 'AnimationPreviewPresenter_OnContextLeave::Context' has a wrong offset!");

// Function DBDUIPresenters.AnimationPreviewPresenter.IsContextEntered
// 0x0001 (0x0001 - 0x0000)
struct AnimationPreviewPresenter_IsContextEntered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationPreviewPresenter_IsContextEntered) == 0x000001, "Wrong alignment on AnimationPreviewPresenter_IsContextEntered");
static_assert(sizeof(AnimationPreviewPresenter_IsContextEntered) == 0x000001, "Wrong size on AnimationPreviewPresenter_IsContextEntered");
static_assert(offsetof(AnimationPreviewPresenter_IsContextEntered, ReturnValue) == 0x000000, "Member 'AnimationPreviewPresenter_IsContextEntered::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.ArchiveCompendiumSubPresenter.OnTomeSelected
// 0x0010 (0x0010 - 0x0000)
struct ArchiveCompendiumSubPresenter_OnTomeSelected final
{
public:
	class FString                                 tomeId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveCompendiumSubPresenter_OnTomeSelected) == 0x000008, "Wrong alignment on ArchiveCompendiumSubPresenter_OnTomeSelected");
static_assert(sizeof(ArchiveCompendiumSubPresenter_OnTomeSelected) == 0x000010, "Wrong size on ArchiveCompendiumSubPresenter_OnTomeSelected");
static_assert(offsetof(ArchiveCompendiumSubPresenter_OnTomeSelected, tomeId) == 0x000000, "Member 'ArchiveCompendiumSubPresenter_OnTomeSelected::tomeId' has a wrong offset!");

// Function DBDUIPresenters.ArchiveImageViewerPresenter.OnArchivesVoiceOverAutoplay
// 0x0001 (0x0001 - 0x0000)
struct ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay final
{
public:
	bool                                          autoplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay) == 0x000001, "Wrong alignment on ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay");
static_assert(sizeof(ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay) == 0x000001, "Wrong size on ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay");
static_assert(offsetof(ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay, autoplay) == 0x000000, "Member 'ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay::autoplay' has a wrong offset!");

// Function DBDUIPresenters.ArchiveImageViewerPresenter.OnArchivesVoiceOverPlayed
// 0x0001 (0x0001 - 0x0000)
struct ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed final
{
public:
	bool                                          Playing;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed) == 0x000001, "Wrong alignment on ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed");
static_assert(sizeof(ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed) == 0x000001, "Wrong size on ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed");
static_assert(offsetof(ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed, Playing) == 0x000000, "Member 'ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed::Playing' has a wrong offset!");

// Function DBDUIPresenters.ArchiveImageViewerPresenter.OnImageViewerVoiceOverAutoplay
// 0x0001 (0x0001 - 0x0000)
struct ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay final
{
public:
	bool                                          autoplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay) == 0x000001, "Wrong alignment on ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay");
static_assert(sizeof(ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay) == 0x000001, "Wrong size on ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay");
static_assert(offsetof(ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay, autoplay) == 0x000000, "Member 'ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay::autoplay' has a wrong offset!");

// Function DBDUIPresenters.ArchiveImageViewerPresenter.CanShowFullScreenMode
// 0x0001 (0x0001 - 0x0000)
struct ArchiveImageViewerPresenter_CanShowFullScreenMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerPresenter_CanShowFullScreenMode) == 0x000001, "Wrong alignment on ArchiveImageViewerPresenter_CanShowFullScreenMode");
static_assert(sizeof(ArchiveImageViewerPresenter_CanShowFullScreenMode) == 0x000001, "Wrong size on ArchiveImageViewerPresenter_CanShowFullScreenMode");
static_assert(offsetof(ArchiveImageViewerPresenter_CanShowFullScreenMode, ReturnValue) == 0x000000, "Member 'ArchiveImageViewerPresenter_CanShowFullScreenMode::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnAutoplayChanged
// 0x0008 (0x0008 - 0x0000)
struct ArchiveJournalSubPresenter_OnAutoplayChanged final
{
public:
	bool                                          autoplayActive;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         entryIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalSubPresenter_OnAutoplayChanged) == 0x000004, "Wrong alignment on ArchiveJournalSubPresenter_OnAutoplayChanged");
static_assert(sizeof(ArchiveJournalSubPresenter_OnAutoplayChanged) == 0x000008, "Wrong size on ArchiveJournalSubPresenter_OnAutoplayChanged");
static_assert(offsetof(ArchiveJournalSubPresenter_OnAutoplayChanged, autoplayActive) == 0x000000, "Member 'ArchiveJournalSubPresenter_OnAutoplayChanged::autoplayActive' has a wrong offset!");
static_assert(offsetof(ArchiveJournalSubPresenter_OnAutoplayChanged, entryIndex) == 0x000004, "Member 'ArchiveJournalSubPresenter_OnAutoplayChanged::entryIndex' has a wrong offset!");

// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnClickPlayButton
// 0x0004 (0x0004 - 0x0000)
struct ArchiveJournalSubPresenter_OnClickPlayButton final
{
public:
	int32                                         entryIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalSubPresenter_OnClickPlayButton) == 0x000004, "Wrong alignment on ArchiveJournalSubPresenter_OnClickPlayButton");
static_assert(sizeof(ArchiveJournalSubPresenter_OnClickPlayButton) == 0x000004, "Wrong size on ArchiveJournalSubPresenter_OnClickPlayButton");
static_assert(offsetof(ArchiveJournalSubPresenter_OnClickPlayButton, entryIndex) == 0x000000, "Member 'ArchiveJournalSubPresenter_OnClickPlayButton::entryIndex' has a wrong offset!");

// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnEntrySelected
// 0x0004 (0x0004 - 0x0000)
struct ArchiveJournalSubPresenter_OnEntrySelected final
{
public:
	int32                                         entryIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalSubPresenter_OnEntrySelected) == 0x000004, "Wrong alignment on ArchiveJournalSubPresenter_OnEntrySelected");
static_assert(sizeof(ArchiveJournalSubPresenter_OnEntrySelected) == 0x000004, "Wrong size on ArchiveJournalSubPresenter_OnEntrySelected");
static_assert(offsetof(ArchiveJournalSubPresenter_OnEntrySelected, entryIndex) == 0x000000, "Member 'ArchiveJournalSubPresenter_OnEntrySelected::entryIndex' has a wrong offset!");

// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnImageViewerVoiceOverAutoplay
// 0x0001 (0x0001 - 0x0000)
struct ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay final
{
public:
	bool                                          autoplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay) == 0x000001, "Wrong alignment on ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay");
static_assert(sizeof(ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay) == 0x000001, "Wrong size on ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay");
static_assert(offsetof(ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay, autoplay) == 0x000000, "Member 'ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay::autoplay' has a wrong offset!");

// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnPlayCinematic
// 0x0004 (0x0004 - 0x0000)
struct ArchiveJournalSubPresenter_OnPlayCinematic final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalSubPresenter_OnPlayCinematic) == 0x000004, "Wrong alignment on ArchiveJournalSubPresenter_OnPlayCinematic");
static_assert(sizeof(ArchiveJournalSubPresenter_OnPlayCinematic) == 0x000004, "Wrong size on ArchiveJournalSubPresenter_OnPlayCinematic");
static_assert(offsetof(ArchiveJournalSubPresenter_OnPlayCinematic, Index_0) == 0x000000, "Member 'ArchiveJournalSubPresenter_OnPlayCinematic::Index_0' has a wrong offset!");

// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnVignetteSelected
// 0x0010 (0x0010 - 0x0000)
struct ArchiveJournalSubPresenter_OnVignetteSelected final
{
public:
	class FString                                 vignetteId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalSubPresenter_OnVignetteSelected) == 0x000008, "Wrong alignment on ArchiveJournalSubPresenter_OnVignetteSelected");
static_assert(sizeof(ArchiveJournalSubPresenter_OnVignetteSelected) == 0x000010, "Wrong size on ArchiveJournalSubPresenter_OnVignetteSelected");
static_assert(offsetof(ArchiveJournalSubPresenter_OnVignetteSelected, vignetteId) == 0x000000, "Member 'ArchiveJournalSubPresenter_OnVignetteSelected::vignetteId' has a wrong offset!");

// Function DBDUIPresenters.BasePopupPresenter.OnContextEnter
// 0x0001 (0x0001 - 0x0000)
struct BasePopupPresenter_OnContextEnter final
{
public:
	EContext                                      Context;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePopupPresenter_OnContextEnter) == 0x000001, "Wrong alignment on BasePopupPresenter_OnContextEnter");
static_assert(sizeof(BasePopupPresenter_OnContextEnter) == 0x000001, "Wrong size on BasePopupPresenter_OnContextEnter");
static_assert(offsetof(BasePopupPresenter_OnContextEnter, Context) == 0x000000, "Member 'BasePopupPresenter_OnContextEnter::Context' has a wrong offset!");

// Function DBDUIPresenters.BasePopupPresenter.OnContextLeave
// 0x0001 (0x0001 - 0x0000)
struct BasePopupPresenter_OnContextLeave final
{
public:
	EContext                                      Context;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePopupPresenter_OnContextLeave) == 0x000001, "Wrong alignment on BasePopupPresenter_OnContextLeave");
static_assert(sizeof(BasePopupPresenter_OnContextLeave) == 0x000001, "Wrong size on BasePopupPresenter_OnContextLeave");
static_assert(offsetof(BasePopupPresenter_OnContextLeave, Context) == 0x000000, "Member 'BasePopupPresenter_OnContextLeave::Context' has a wrong offset!");

// Function DBDUIPresenters.BasePopupPresenter.IsContextEntered
// 0x0001 (0x0001 - 0x0000)
struct BasePopupPresenter_IsContextEntered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePopupPresenter_IsContextEntered) == 0x000001, "Wrong alignment on BasePopupPresenter_IsContextEntered");
static_assert(sizeof(BasePopupPresenter_IsContextEntered) == 0x000001, "Wrong size on BasePopupPresenter_IsContextEntered");
static_assert(offsetof(BasePopupPresenter_IsContextEntered, ReturnValue) == 0x000000, "Member 'BasePopupPresenter_IsContextEntered::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.GenericPopupPresenter.OnAction
// 0x0001 (0x0001 - 0x0000)
struct GenericPopupPresenter_OnAction final
{
public:
	EPopupButtonType                              popupAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericPopupPresenter_OnAction) == 0x000001, "Wrong alignment on GenericPopupPresenter_OnAction");
static_assert(sizeof(GenericPopupPresenter_OnAction) == 0x000001, "Wrong size on GenericPopupPresenter_OnAction");
static_assert(offsetof(GenericPopupPresenter_OnAction, popupAction) == 0x000000, "Member 'GenericPopupPresenter_OnAction::popupAction' has a wrong offset!");

// Function DBDUIPresenters.GenericPopupPresenter.OnAppResumed
// 0x0001 (0x0001 - 0x0000)
struct GenericPopupPresenter_OnAppResumed final
{
public:
	bool                                          isAppResumed;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericPopupPresenter_OnAppResumed) == 0x000001, "Wrong alignment on GenericPopupPresenter_OnAppResumed");
static_assert(sizeof(GenericPopupPresenter_OnAppResumed) == 0x000001, "Wrong size on GenericPopupPresenter_OnAppResumed");
static_assert(offsetof(GenericPopupPresenter_OnAppResumed, isAppResumed) == 0x000000, "Member 'GenericPopupPresenter_OnAppResumed::isAppResumed' has a wrong offset!");

// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnLevelSelected
// 0x0004 (0x0004 - 0x0000)
struct ArchiveQuestMapSubPresenter_OnLevelSelected final
{
public:
	int32                                         LevelIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveQuestMapSubPresenter_OnLevelSelected) == 0x000004, "Wrong alignment on ArchiveQuestMapSubPresenter_OnLevelSelected");
static_assert(sizeof(ArchiveQuestMapSubPresenter_OnLevelSelected) == 0x000004, "Wrong size on ArchiveQuestMapSubPresenter_OnLevelSelected");
static_assert(offsetof(ArchiveQuestMapSubPresenter_OnLevelSelected, LevelIndex) == 0x000000, "Member 'ArchiveQuestMapSubPresenter_OnLevelSelected::LevelIndex' has a wrong offset!");

// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnNodeSelected
// 0x0020 (0x0020 - 0x0000)
struct ArchiveQuestMapSubPresenter_OnNodeSelected final
{
public:
	class FName                                   NodeId;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Position;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveQuestMapSubPresenter_OnNodeSelected) == 0x000008, "Wrong alignment on ArchiveQuestMapSubPresenter_OnNodeSelected");
static_assert(sizeof(ArchiveQuestMapSubPresenter_OnNodeSelected) == 0x000020, "Wrong size on ArchiveQuestMapSubPresenter_OnNodeSelected");
static_assert(offsetof(ArchiveQuestMapSubPresenter_OnNodeSelected, NodeId) == 0x000000, "Member 'ArchiveQuestMapSubPresenter_OnNodeSelected::NodeId' has a wrong offset!");
static_assert(offsetof(ArchiveQuestMapSubPresenter_OnNodeSelected, Role) == 0x00000C, "Member 'ArchiveQuestMapSubPresenter_OnNodeSelected::Role' has a wrong offset!");
static_assert(offsetof(ArchiveQuestMapSubPresenter_OnNodeSelected, Position) == 0x000010, "Member 'ArchiveQuestMapSubPresenter_OnNodeSelected::Position' has a wrong offset!");

// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnPlayerCardUpdated
// 0x0020 (0x0020 - 0x0000)
struct ArchiveQuestMapSubPresenter_OnPlayerCardUpdated final
{
public:
	class FString                                 badgeId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 bannerId;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveQuestMapSubPresenter_OnPlayerCardUpdated) == 0x000008, "Wrong alignment on ArchiveQuestMapSubPresenter_OnPlayerCardUpdated");
static_assert(sizeof(ArchiveQuestMapSubPresenter_OnPlayerCardUpdated) == 0x000020, "Wrong size on ArchiveQuestMapSubPresenter_OnPlayerCardUpdated");
static_assert(offsetof(ArchiveQuestMapSubPresenter_OnPlayerCardUpdated, badgeId) == 0x000000, "Member 'ArchiveQuestMapSubPresenter_OnPlayerCardUpdated::badgeId' has a wrong offset!");
static_assert(offsetof(ArchiveQuestMapSubPresenter_OnPlayerCardUpdated, bannerId) == 0x000010, "Member 'ArchiveQuestMapSubPresenter_OnPlayerCardUpdated::bannerId' has a wrong offset!");

// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnQuestNodeHovered
// 0x0001 (0x0001 - 0x0000)
struct ArchiveQuestMapSubPresenter_OnQuestNodeHovered final
{
public:
	EPlayerRole                                   Role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveQuestMapSubPresenter_OnQuestNodeHovered) == 0x000001, "Wrong alignment on ArchiveQuestMapSubPresenter_OnQuestNodeHovered");
static_assert(sizeof(ArchiveQuestMapSubPresenter_OnQuestNodeHovered) == 0x000001, "Wrong size on ArchiveQuestMapSubPresenter_OnQuestNodeHovered");
static_assert(offsetof(ArchiveQuestMapSubPresenter_OnQuestNodeHovered, Role) == 0x000000, "Member 'ArchiveQuestMapSubPresenter_OnQuestNodeHovered::Role' has a wrong offset!");

// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnQuestNodeUnhovered
// 0x0001 (0x0001 - 0x0000)
struct ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered final
{
public:
	EPlayerRole                                   Role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered) == 0x000001, "Wrong alignment on ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered");
static_assert(sizeof(ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered) == 0x000001, "Wrong size on ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered");
static_assert(offsetof(ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered, Role) == 0x000000, "Member 'ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered::Role' has a wrong offset!");

// Function DBDUIPresenters.ArchivesPresenter.OnChallengeReminderClicked
// 0x0001 (0x0001 - 0x0000)
struct ArchivesPresenter_OnChallengeReminderClicked final
{
public:
	EPlayerRole                                   Role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchivesPresenter_OnChallengeReminderClicked) == 0x000001, "Wrong alignment on ArchivesPresenter_OnChallengeReminderClicked");
static_assert(sizeof(ArchivesPresenter_OnChallengeReminderClicked) == 0x000001, "Wrong size on ArchivesPresenter_OnChallengeReminderClicked");
static_assert(offsetof(ArchivesPresenter_OnChallengeReminderClicked, Role) == 0x000000, "Member 'ArchivesPresenter_OnChallengeReminderClicked::Role' has a wrong offset!");

// Function DBDUIPresenters.ArchivesPresenter.OnChallengeReminderSlotSelected
// 0x0001 (0x0001 - 0x0000)
struct ArchivesPresenter_OnChallengeReminderSlotSelected final
{
public:
	EPlayerRole                                   Role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchivesPresenter_OnChallengeReminderSlotSelected) == 0x000001, "Wrong alignment on ArchivesPresenter_OnChallengeReminderSlotSelected");
static_assert(sizeof(ArchivesPresenter_OnChallengeReminderSlotSelected) == 0x000001, "Wrong size on ArchivesPresenter_OnChallengeReminderSlotSelected");
static_assert(offsetof(ArchivesPresenter_OnChallengeReminderSlotSelected, Role) == 0x000000, "Member 'ArchivesPresenter_OnChallengeReminderSlotSelected::Role' has a wrong offset!");

// Function DBDUIPresenters.ArchivesPresenter.OnShowImageViewer
// 0x0001 (0x0001 - 0x0000)
struct ArchivesPresenter_OnShowImageViewer final
{
public:
	bool                                          voiceOverIsPlaying;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchivesPresenter_OnShowImageViewer) == 0x000001, "Wrong alignment on ArchivesPresenter_OnShowImageViewer");
static_assert(sizeof(ArchivesPresenter_OnShowImageViewer) == 0x000001, "Wrong size on ArchivesPresenter_OnShowImageViewer");
static_assert(offsetof(ArchivesPresenter_OnShowImageViewer, voiceOverIsPlaying) == 0x000000, "Member 'ArchivesPresenter_OnShowImageViewer::voiceOverIsPlaying' has a wrong offset!");

// Function DBDUIPresenters.ArchiveTierPurchasePopupPresenter.OnConfirmPurchase
// 0x0008 (0x0008 - 0x0000)
struct ArchiveTierPurchasePopupPresenter_OnConfirmPurchase final
{
public:
	int32                                         tiersToPurchaseNumber;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isPurchasingInfiniteTiers;                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveTierPurchasePopupPresenter_OnConfirmPurchase) == 0x000004, "Wrong alignment on ArchiveTierPurchasePopupPresenter_OnConfirmPurchase");
static_assert(sizeof(ArchiveTierPurchasePopupPresenter_OnConfirmPurchase) == 0x000008, "Wrong size on ArchiveTierPurchasePopupPresenter_OnConfirmPurchase");
static_assert(offsetof(ArchiveTierPurchasePopupPresenter_OnConfirmPurchase, tiersToPurchaseNumber) == 0x000000, "Member 'ArchiveTierPurchasePopupPresenter_OnConfirmPurchase::tiersToPurchaseNumber' has a wrong offset!");
static_assert(offsetof(ArchiveTierPurchasePopupPresenter_OnConfirmPurchase, isPurchasingInfiniteTiers) == 0x000004, "Member 'ArchiveTierPurchasePopupPresenter_OnConfirmPurchase::isPurchasingInfiniteTiers' has a wrong offset!");

// Function DBDUIPresenters.ArchiveTomeSubPresenter.OnMenuTabSelected
// 0x0001 (0x0001 - 0x0000)
struct ArchiveTomeSubPresenter_OnMenuTabSelected final
{
public:
	EArchiveTomeMenuState                         menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeSubPresenter_OnMenuTabSelected) == 0x000001, "Wrong alignment on ArchiveTomeSubPresenter_OnMenuTabSelected");
static_assert(sizeof(ArchiveTomeSubPresenter_OnMenuTabSelected) == 0x000001, "Wrong size on ArchiveTomeSubPresenter_OnMenuTabSelected");
static_assert(offsetof(ArchiveTomeSubPresenter_OnMenuTabSelected, menuState) == 0x000000, "Member 'ArchiveTomeSubPresenter_OnMenuTabSelected::menuState' has a wrong offset!");

// Function DBDUIPresenters.AuricCellsPresenter.OnBuyAction
// 0x000C (0x000C - 0x0000)
struct AuricCellsPresenter_OnBuyAction final
{
public:
	class FName                                   bundleId;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AuricCellsPresenter_OnBuyAction) == 0x000004, "Wrong alignment on AuricCellsPresenter_OnBuyAction");
static_assert(sizeof(AuricCellsPresenter_OnBuyAction) == 0x00000C, "Wrong size on AuricCellsPresenter_OnBuyAction");
static_assert(offsetof(AuricCellsPresenter_OnBuyAction, bundleId) == 0x000000, "Member 'AuricCellsPresenter_OnBuyAction::bundleId' has a wrong offset!");

// Function DBDUIPresenters.AuricCellsPresenter.OnPremiumTransactionCompleted
// 0x0020 (0x0020 - 0x0000)
struct AuricCellsPresenter_OnPremiumTransactionCompleted final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemId;                                            // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPremiumPurchaseCompleteData           purchaseCompleteData;                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AuricCellsPresenter_OnPremiumTransactionCompleted) == 0x000008, "Wrong alignment on AuricCellsPresenter_OnPremiumTransactionCompleted");
static_assert(sizeof(AuricCellsPresenter_OnPremiumTransactionCompleted) == 0x000020, "Wrong size on AuricCellsPresenter_OnPremiumTransactionCompleted");
static_assert(offsetof(AuricCellsPresenter_OnPremiumTransactionCompleted, Success) == 0x000000, "Member 'AuricCellsPresenter_OnPremiumTransactionCompleted::Success' has a wrong offset!");
static_assert(offsetof(AuricCellsPresenter_OnPremiumTransactionCompleted, ItemId) == 0x000004, "Member 'AuricCellsPresenter_OnPremiumTransactionCompleted::ItemId' has a wrong offset!");
static_assert(offsetof(AuricCellsPresenter_OnPremiumTransactionCompleted, purchaseCompleteData) == 0x000010, "Member 'AuricCellsPresenter_OnPremiumTransactionCompleted::purchaseCompleteData' has a wrong offset!");

// Function DBDUIPresenters.BloodPointBulkSpendingPopupPresenter.OnLevelTextChanged
// 0x0004 (0x0004 - 0x0000)
struct BloodPointBulkSpendingPopupPresenter_OnLevelTextChanged final
{
public:
	int32                                         enteredNumber;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodPointBulkSpendingPopupPresenter_OnLevelTextChanged) == 0x000004, "Wrong alignment on BloodPointBulkSpendingPopupPresenter_OnLevelTextChanged");
static_assert(sizeof(BloodPointBulkSpendingPopupPresenter_OnLevelTextChanged) == 0x000004, "Wrong size on BloodPointBulkSpendingPopupPresenter_OnLevelTextChanged");
static_assert(offsetof(BloodPointBulkSpendingPopupPresenter_OnLevelTextChanged, enteredNumber) == 0x000000, "Member 'BloodPointBulkSpendingPopupPresenter_OnLevelTextChanged::enteredNumber' has a wrong offset!");

// Function DBDUIPresenters.BotLoadoutPresenter.OnBotLoadoutPresetSelected
// 0x0004 (0x0004 - 0x0000)
struct BotLoadoutPresenter_OnBotLoadoutPresetSelected final
{
public:
	int32                                         presetId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BotLoadoutPresenter_OnBotLoadoutPresetSelected) == 0x000004, "Wrong alignment on BotLoadoutPresenter_OnBotLoadoutPresetSelected");
static_assert(sizeof(BotLoadoutPresenter_OnBotLoadoutPresetSelected) == 0x000004, "Wrong size on BotLoadoutPresenter_OnBotLoadoutPresetSelected");
static_assert(offsetof(BotLoadoutPresenter_OnBotLoadoutPresetSelected, presetId) == 0x000000, "Member 'BotLoadoutPresenter_OnBotLoadoutPresetSelected::presetId' has a wrong offset!");

// Function DBDUIPresenters.BotLoadoutPresenter.OnCharacterSelectionDropdownVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct BotLoadoutPresenter_OnCharacterSelectionDropdownVisibilityChanged final
{
public:
	bool                                          isDropdownVisible;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BotLoadoutPresenter_OnCharacterSelectionDropdownVisibilityChanged) == 0x000001, "Wrong alignment on BotLoadoutPresenter_OnCharacterSelectionDropdownVisibilityChanged");
static_assert(sizeof(BotLoadoutPresenter_OnCharacterSelectionDropdownVisibilityChanged) == 0x000001, "Wrong size on BotLoadoutPresenter_OnCharacterSelectionDropdownVisibilityChanged");
static_assert(offsetof(BotLoadoutPresenter_OnCharacterSelectionDropdownVisibilityChanged, isDropdownVisible) == 0x000000, "Member 'BotLoadoutPresenter_OnCharacterSelectionDropdownVisibilityChanged::isDropdownVisible' has a wrong offset!");

// Function DBDUIPresenters.BotLoadoutPresenter.OnLoadoutInventorySlotClick
// 0x0010 (0x0010 - 0x0000)
struct BotLoadoutPresenter_OnLoadoutInventorySlotClick final
{
public:
	ELoadoutSlot                                  slotIndex;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemId;                                            // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BotLoadoutPresenter_OnLoadoutInventorySlotClick) == 0x000004, "Wrong alignment on BotLoadoutPresenter_OnLoadoutInventorySlotClick");
static_assert(sizeof(BotLoadoutPresenter_OnLoadoutInventorySlotClick) == 0x000010, "Wrong size on BotLoadoutPresenter_OnLoadoutInventorySlotClick");
static_assert(offsetof(BotLoadoutPresenter_OnLoadoutInventorySlotClick, slotIndex) == 0x000000, "Member 'BotLoadoutPresenter_OnLoadoutInventorySlotClick::slotIndex' has a wrong offset!");
static_assert(offsetof(BotLoadoutPresenter_OnLoadoutInventorySlotClick, ItemId) == 0x000004, "Member 'BotLoadoutPresenter_OnLoadoutInventorySlotClick::ItemId' has a wrong offset!");

// Function DBDUIPresenters.BotLoadoutPresenter.OnLoadoutSlotSelected
// 0x0001 (0x0001 - 0x0000)
struct BotLoadoutPresenter_OnLoadoutSlotSelected final
{
public:
	ELoadoutSlot                                  slotSelected;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BotLoadoutPresenter_OnLoadoutSlotSelected) == 0x000001, "Wrong alignment on BotLoadoutPresenter_OnLoadoutSlotSelected");
static_assert(sizeof(BotLoadoutPresenter_OnLoadoutSlotSelected) == 0x000001, "Wrong size on BotLoadoutPresenter_OnLoadoutSlotSelected");
static_assert(offsetof(BotLoadoutPresenter_OnLoadoutSlotSelected, slotSelected) == 0x000000, "Member 'BotLoadoutPresenter_OnLoadoutSlotSelected::slotSelected' has a wrong offset!");

// Function DBDUIPresenters.BotLoadoutPresenter.OnSelectedCharacterChanged
// 0x0004 (0x0004 - 0x0000)
struct BotLoadoutPresenter_OnSelectedCharacterChanged final
{
public:
	int32                                         SelectedCharacterIndex;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BotLoadoutPresenter_OnSelectedCharacterChanged) == 0x000004, "Wrong alignment on BotLoadoutPresenter_OnSelectedCharacterChanged");
static_assert(sizeof(BotLoadoutPresenter_OnSelectedCharacterChanged) == 0x000004, "Wrong size on BotLoadoutPresenter_OnSelectedCharacterChanged");
static_assert(offsetof(BotLoadoutPresenter_OnSelectedCharacterChanged, SelectedCharacterIndex) == 0x000000, "Member 'BotLoadoutPresenter_OnSelectedCharacterChanged::SelectedCharacterIndex' has a wrong offset!");

// Function DBDUIPresenters.BotLoadoutPresenter.OnSearchBarTextChanged
// 0x0010 (0x0010 - 0x0000)
struct BotLoadoutPresenter_OnSearchBarTextChanged final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BotLoadoutPresenter_OnSearchBarTextChanged) == 0x000008, "Wrong alignment on BotLoadoutPresenter_OnSearchBarTextChanged");
static_assert(sizeof(BotLoadoutPresenter_OnSearchBarTextChanged) == 0x000010, "Wrong size on BotLoadoutPresenter_OnSearchBarTextChanged");
static_assert(offsetof(BotLoadoutPresenter_OnSearchBarTextChanged, String) == 0x000000, "Member 'BotLoadoutPresenter_OnSearchBarTextChanged::String' has a wrong offset!");

// Function DBDUIPresenters.ChallengesMenuChallengeSetSubPresenter.SetChallengeSetState
// 0x0001 (0x0001 - 0x0000)
struct ChallengesMenuChallengeSetSubPresenter_SetChallengeSetState final
{
public:
	EChallengesMenuChallengeSetState              State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuChallengeSetSubPresenter_SetChallengeSetState) == 0x000001, "Wrong alignment on ChallengesMenuChallengeSetSubPresenter_SetChallengeSetState");
static_assert(sizeof(ChallengesMenuChallengeSetSubPresenter_SetChallengeSetState) == 0x000001, "Wrong size on ChallengesMenuChallengeSetSubPresenter_SetChallengeSetState");
static_assert(offsetof(ChallengesMenuChallengeSetSubPresenter_SetChallengeSetState, State) == 0x000000, "Member 'ChallengesMenuChallengeSetSubPresenter_SetChallengeSetState::State' has a wrong offset!");

// Function DBDUIPresenters.ChallengesMenuPresenter.OnChallengeSetSelected
// 0x0020 (0x0020 - 0x0000)
struct ChallengesMenuPresenter_OnChallengeSetSelected final
{
public:
	class FString                                 ChallengeSetId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 eventFrameLabel;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuPresenter_OnChallengeSetSelected) == 0x000008, "Wrong alignment on ChallengesMenuPresenter_OnChallengeSetSelected");
static_assert(sizeof(ChallengesMenuPresenter_OnChallengeSetSelected) == 0x000020, "Wrong size on ChallengesMenuPresenter_OnChallengeSetSelected");
static_assert(offsetof(ChallengesMenuPresenter_OnChallengeSetSelected, ChallengeSetId) == 0x000000, "Member 'ChallengesMenuPresenter_OnChallengeSetSelected::ChallengeSetId' has a wrong offset!");
static_assert(offsetof(ChallengesMenuPresenter_OnChallengeSetSelected, eventFrameLabel) == 0x000010, "Member 'ChallengesMenuPresenter_OnChallengeSetSelected::eventFrameLabel' has a wrong offset!");

// Function DBDUIPresenters.ChallengesMenuRewardTrackSubPresenter.OnRewardCurrencyClicked
// 0x0001 (0x0001 - 0x0000)
struct ChallengesMenuRewardTrackSubPresenter_OnRewardCurrencyClicked final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRewardTrackSubPresenter_OnRewardCurrencyClicked) == 0x000001, "Wrong alignment on ChallengesMenuRewardTrackSubPresenter_OnRewardCurrencyClicked");
static_assert(sizeof(ChallengesMenuRewardTrackSubPresenter_OnRewardCurrencyClicked) == 0x000001, "Wrong size on ChallengesMenuRewardTrackSubPresenter_OnRewardCurrencyClicked");
static_assert(offsetof(ChallengesMenuRewardTrackSubPresenter_OnRewardCurrencyClicked, currencyType) == 0x000000, "Member 'ChallengesMenuRewardTrackSubPresenter_OnRewardCurrencyClicked::currencyType' has a wrong offset!");

// Function DBDUIPresenters.ChallengesMenuRewardTrackSubPresenter.OnRewardItemClicked
// 0x000C (0x000C - 0x0000)
struct ChallengesMenuRewardTrackSubPresenter_OnRewardItemClicked final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRewardTrackSubPresenter_OnRewardItemClicked) == 0x000004, "Wrong alignment on ChallengesMenuRewardTrackSubPresenter_OnRewardItemClicked");
static_assert(sizeof(ChallengesMenuRewardTrackSubPresenter_OnRewardItemClicked) == 0x00000C, "Wrong size on ChallengesMenuRewardTrackSubPresenter_OnRewardItemClicked");
static_assert(offsetof(ChallengesMenuRewardTrackSubPresenter_OnRewardItemClicked, ItemId) == 0x000000, "Member 'ChallengesMenuRewardTrackSubPresenter_OnRewardItemClicked::ItemId' has a wrong offset!");

// Function DBDUIPresenters.ChallengesMenuRitualsSubPresenter.OnChallengeCardSelected
// 0x0010 (0x0010 - 0x0000)
struct ChallengesMenuRitualsSubPresenter_OnChallengeCardSelected final
{
public:
	class FString                                 ChallengeId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRitualsSubPresenter_OnChallengeCardSelected) == 0x000008, "Wrong alignment on ChallengesMenuRitualsSubPresenter_OnChallengeCardSelected");
static_assert(sizeof(ChallengesMenuRitualsSubPresenter_OnChallengeCardSelected) == 0x000010, "Wrong size on ChallengesMenuRitualsSubPresenter_OnChallengeCardSelected");
static_assert(offsetof(ChallengesMenuRitualsSubPresenter_OnChallengeCardSelected, ChallengeId) == 0x000000, "Member 'ChallengesMenuRitualsSubPresenter_OnChallengeCardSelected::ChallengeId' has a wrong offset!");

// Function DBDUIPresenters.ChallengesMenuRitualsSubPresenter.OnChallengeFollowClicked
// 0x0010 (0x0010 - 0x0000)
struct ChallengesMenuRitualsSubPresenter_OnChallengeFollowClicked final
{
public:
	class FString                                 ChallengeId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRitualsSubPresenter_OnChallengeFollowClicked) == 0x000008, "Wrong alignment on ChallengesMenuRitualsSubPresenter_OnChallengeFollowClicked");
static_assert(sizeof(ChallengesMenuRitualsSubPresenter_OnChallengeFollowClicked) == 0x000010, "Wrong size on ChallengesMenuRitualsSubPresenter_OnChallengeFollowClicked");
static_assert(offsetof(ChallengesMenuRitualsSubPresenter_OnChallengeFollowClicked, ChallengeId) == 0x000000, "Member 'ChallengesMenuRitualsSubPresenter_OnChallengeFollowClicked::ChallengeId' has a wrong offset!");

// Function DBDUIPresenters.ChallengesMenuRitualsSubPresenter.OnSearchBarTextChanged
// 0x0010 (0x0010 - 0x0000)
struct ChallengesMenuRitualsSubPresenter_OnSearchBarTextChanged final
{
public:
	class FString                                 enteredText;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRitualsSubPresenter_OnSearchBarTextChanged) == 0x000008, "Wrong alignment on ChallengesMenuRitualsSubPresenter_OnSearchBarTextChanged");
static_assert(sizeof(ChallengesMenuRitualsSubPresenter_OnSearchBarTextChanged) == 0x000010, "Wrong size on ChallengesMenuRitualsSubPresenter_OnSearchBarTextChanged");
static_assert(offsetof(ChallengesMenuRitualsSubPresenter_OnSearchBarTextChanged, enteredText) == 0x000000, "Member 'ChallengesMenuRitualsSubPresenter_OnSearchBarTextChanged::enteredText' has a wrong offset!");

// Function DBDUIPresenters.ChallengesMenuRitualsSubPresenter.OnSortingChanged
// 0x0004 (0x0004 - 0x0000)
struct ChallengesMenuRitualsSubPresenter_OnSortingChanged final
{
public:
	ESortingOption                                SortingOption;                                     // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESortingOrder                                 sortingOrder;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChallengesMenuRitualsSubPresenter_OnSortingChanged) == 0x000002, "Wrong alignment on ChallengesMenuRitualsSubPresenter_OnSortingChanged");
static_assert(sizeof(ChallengesMenuRitualsSubPresenter_OnSortingChanged) == 0x000004, "Wrong size on ChallengesMenuRitualsSubPresenter_OnSortingChanged");
static_assert(offsetof(ChallengesMenuRitualsSubPresenter_OnSortingChanged, SortingOption) == 0x000000, "Member 'ChallengesMenuRitualsSubPresenter_OnSortingChanged::SortingOption' has a wrong offset!");
static_assert(offsetof(ChallengesMenuRitualsSubPresenter_OnSortingChanged, sortingOrder) == 0x000002, "Member 'ChallengesMenuRitualsSubPresenter_OnSortingChanged::sortingOrder' has a wrong offset!");

// Function DBDUIPresenters.ChallengeTrackerPresenter.OnQuestEventRepetitionValueChanged
// 0x0028 (0x0028 - 0x0000)
struct ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 questEventIdTracked;                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 challengeOrNodeId;                                 // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged) == 0x000008, "Wrong alignment on ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged");
static_assert(sizeof(ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged) == 0x000028, "Wrong size on ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged");
static_assert(offsetof(ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged, Value) == 0x000000, "Member 'ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged::Value' has a wrong offset!");
static_assert(offsetof(ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged, questEventIdTracked) == 0x000008, "Member 'ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged::questEventIdTracked' has a wrong offset!");
static_assert(offsetof(ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged, challengeOrNodeId) == 0x000018, "Member 'ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged::challengeOrNodeId' has a wrong offset!");

// Function DBDUIPresenters.ChatSubPresenter.OnChatVisibilityToggled
// 0x0001 (0x0001 - 0x0000)
struct ChatSubPresenter_OnChatVisibilityToggled final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatSubPresenter_OnChatVisibilityToggled) == 0x000001, "Wrong alignment on ChatSubPresenter_OnChatVisibilityToggled");
static_assert(sizeof(ChatSubPresenter_OnChatVisibilityToggled) == 0x000001, "Wrong size on ChatSubPresenter_OnChatVisibilityToggled");
static_assert(offsetof(ChatSubPresenter_OnChatVisibilityToggled, IsVisible) == 0x000000, "Member 'ChatSubPresenter_OnChatVisibilityToggled::IsVisible' has a wrong offset!");

// Function DBDUIPresenters.ChatSubPresenter.OnTextCommited
// 0x0018 (0x0018 - 0x0000)
struct ChatSubPresenter_OnTextCommited final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatSubPresenter_OnTextCommited) == 0x000008, "Wrong alignment on ChatSubPresenter_OnTextCommited");
static_assert(sizeof(ChatSubPresenter_OnTextCommited) == 0x000018, "Wrong size on ChatSubPresenter_OnTextCommited");
static_assert(offsetof(ChatSubPresenter_OnTextCommited, Text) == 0x000000, "Member 'ChatSubPresenter_OnTextCommited::Text' has a wrong offset!");

// Function DBDUIPresenters.CinematicPresenter.DBD_ChangeVideoPlaybackMode
// 0x0010 (0x0010 - 0x0000)
struct CinematicPresenter_DBD_ChangeVideoPlaybackMode final
{
public:
	class FString                                 Mode;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicPresenter_DBD_ChangeVideoPlaybackMode) == 0x000008, "Wrong alignment on CinematicPresenter_DBD_ChangeVideoPlaybackMode");
static_assert(sizeof(CinematicPresenter_DBD_ChangeVideoPlaybackMode) == 0x000010, "Wrong size on CinematicPresenter_DBD_ChangeVideoPlaybackMode");
static_assert(offsetof(CinematicPresenter_DBD_ChangeVideoPlaybackMode, Mode) == 0x000000, "Member 'CinematicPresenter_DBD_ChangeVideoPlaybackMode::Mode' has a wrong offset!");

// Function DBDUIPresenters.CinematicPresenter.DBD_ChangeVideoVolume
// 0x0004 (0x0004 - 0x0000)
struct CinematicPresenter_DBD_ChangeVideoVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicPresenter_DBD_ChangeVideoVolume) == 0x000004, "Wrong alignment on CinematicPresenter_DBD_ChangeVideoVolume");
static_assert(sizeof(CinematicPresenter_DBD_ChangeVideoVolume) == 0x000004, "Wrong size on CinematicPresenter_DBD_ChangeVideoVolume");
static_assert(offsetof(CinematicPresenter_DBD_ChangeVideoVolume, Volume) == 0x000000, "Member 'CinematicPresenter_DBD_ChangeVideoVolume::Volume' has a wrong offset!");

// Function DBDUIPresenters.CinematicPresenter.MuteGameAudio
// 0x0001 (0x0001 - 0x0000)
struct CinematicPresenter_MuteGameAudio final
{
public:
	bool                                          shouldMute;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicPresenter_MuteGameAudio) == 0x000001, "Wrong alignment on CinematicPresenter_MuteGameAudio");
static_assert(sizeof(CinematicPresenter_MuteGameAudio) == 0x000001, "Wrong size on CinematicPresenter_MuteGameAudio");
static_assert(offsetof(CinematicPresenter_MuteGameAudio, shouldMute) == 0x000000, "Member 'CinematicPresenter_MuteGameAudio::shouldMute' has a wrong offset!");

// Function DBDUIPresenters.CinematicPresenter.OnSubtitlesUpdated
// 0x0010 (0x0010 - 0x0000)
struct CinematicPresenter_OnSubtitlesUpdated final
{
public:
	TArray<class FString>                         Subtitles;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicPresenter_OnSubtitlesUpdated) == 0x000008, "Wrong alignment on CinematicPresenter_OnSubtitlesUpdated");
static_assert(sizeof(CinematicPresenter_OnSubtitlesUpdated) == 0x000010, "Wrong size on CinematicPresenter_OnSubtitlesUpdated");
static_assert(offsetof(CinematicPresenter_OnSubtitlesUpdated, Subtitles) == 0x000000, "Member 'CinematicPresenter_OnSubtitlesUpdated::Subtitles' has a wrong offset!");

// Function DBDUIPresenters.CreditsPresenter.Credits_ScrollToName
// 0x0018 (0x0018 - 0x0000)
struct CreditsPresenter_Credits_ScrollToName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CreditsPresenter_Credits_ScrollToName) == 0x000008, "Wrong alignment on CreditsPresenter_Credits_ScrollToName");
static_assert(sizeof(CreditsPresenter_Credits_ScrollToName) == 0x000018, "Wrong size on CreditsPresenter_Credits_ScrollToName");
static_assert(offsetof(CreditsPresenter_Credits_ScrollToName, Name_0) == 0x000000, "Member 'CreditsPresenter_Credits_ScrollToName::Name_0' has a wrong offset!");
static_assert(offsetof(CreditsPresenter_Credits_ScrollToName, Delay) == 0x000010, "Member 'CreditsPresenter_Credits_ScrollToName::Delay' has a wrong offset!");

// Function DBDUIPresenters.DirectionalMinigamePresenter.OnMinigameEnd
// 0x0001 (0x0001 - 0x0000)
struct DirectionalMinigamePresenter_OnMinigameEnd final
{
public:
	EDirectionalMinigameResult                    Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionalMinigamePresenter_OnMinigameEnd) == 0x000001, "Wrong alignment on DirectionalMinigamePresenter_OnMinigameEnd");
static_assert(sizeof(DirectionalMinigamePresenter_OnMinigameEnd) == 0x000001, "Wrong size on DirectionalMinigamePresenter_OnMinigameEnd");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameEnd, Result) == 0x000000, "Member 'DirectionalMinigamePresenter_OnMinigameEnd::Result' has a wrong offset!");

// Function DBDUIPresenters.DirectionalMinigamePresenter.OnMinigameEnterKey
// 0x0010 (0x0010 - 0x0000)
struct DirectionalMinigamePresenter_OnMinigameEnterKey final
{
public:
	EDirectionalInputKey                          enteredKey;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         enteredIndex;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCorrect;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         currentIndex;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionalMinigamePresenter_OnMinigameEnterKey) == 0x000004, "Wrong alignment on DirectionalMinigamePresenter_OnMinigameEnterKey");
static_assert(sizeof(DirectionalMinigamePresenter_OnMinigameEnterKey) == 0x000010, "Wrong size on DirectionalMinigamePresenter_OnMinigameEnterKey");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameEnterKey, enteredKey) == 0x000000, "Member 'DirectionalMinigamePresenter_OnMinigameEnterKey::enteredKey' has a wrong offset!");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameEnterKey, enteredIndex) == 0x000004, "Member 'DirectionalMinigamePresenter_OnMinigameEnterKey::enteredIndex' has a wrong offset!");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameEnterKey, isCorrect) == 0x000008, "Member 'DirectionalMinigamePresenter_OnMinigameEnterKey::isCorrect' has a wrong offset!");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameEnterKey, currentIndex) == 0x00000C, "Member 'DirectionalMinigamePresenter_OnMinigameEnterKey::currentIndex' has a wrong offset!");

// Function DBDUIPresenters.DirectionalMinigamePresenter.OnMinigameStart
// 0x0018 (0x0018 - 0x0000)
struct DirectionalMinigamePresenter_OnMinigameStart final
{
public:
	TArray<EDirectionalInputKey>                  Sequence;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         currentIndex;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DirectionalMinigamePresenter_OnMinigameStart) == 0x000008, "Wrong alignment on DirectionalMinigamePresenter_OnMinigameStart");
static_assert(sizeof(DirectionalMinigamePresenter_OnMinigameStart) == 0x000018, "Wrong size on DirectionalMinigamePresenter_OnMinigameStart");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameStart, Sequence) == 0x000000, "Member 'DirectionalMinigamePresenter_OnMinigameStart::Sequence' has a wrong offset!");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameStart, currentIndex) == 0x000010, "Member 'DirectionalMinigamePresenter_OnMinigameStart::currentIndex' has a wrong offset!");

// Function DBDUIPresenters.DirectionalMinigamePresenter.OnMinigameInit
// 0x0020 (0x0020 - 0x0000)
struct DirectionalMinigamePresenter_OnMinigameInit final
{
public:
	struct FDirectionalMiniGameDefinition         miniGameDefinition;                                // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionalMinigamePresenter_OnMinigameInit) == 0x000008, "Wrong alignment on DirectionalMinigamePresenter_OnMinigameInit");
static_assert(sizeof(DirectionalMinigamePresenter_OnMinigameInit) == 0x000020, "Wrong size on DirectionalMinigamePresenter_OnMinigameInit");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameInit, miniGameDefinition) == 0x000000, "Member 'DirectionalMinigamePresenter_OnMinigameInit::miniGameDefinition' has a wrong offset!");

// Function DBDUIPresenters.EventEntryRewardsSubPresenter.OnPreviewAreaItemClicked
// 0x0004 (0x0004 - 0x0000)
struct EventEntryRewardsSubPresenter_OnPreviewAreaItemClicked final
{
public:
	int32                                         selectedIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryRewardsSubPresenter_OnPreviewAreaItemClicked) == 0x000004, "Wrong alignment on EventEntryRewardsSubPresenter_OnPreviewAreaItemClicked");
static_assert(sizeof(EventEntryRewardsSubPresenter_OnPreviewAreaItemClicked) == 0x000004, "Wrong size on EventEntryRewardsSubPresenter_OnPreviewAreaItemClicked");
static_assert(offsetof(EventEntryRewardsSubPresenter_OnPreviewAreaItemClicked, selectedIndex) == 0x000000, "Member 'EventEntryRewardsSubPresenter_OnPreviewAreaItemClicked::selectedIndex' has a wrong offset!");

// Function DBDUIPresenters.EventEntryRewardsSubPresenter.OnRewardGridItemClicked
// 0x0004 (0x0004 - 0x0000)
struct EventEntryRewardsSubPresenter_OnRewardGridItemClicked final
{
public:
	int32                                         selectedIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryRewardsSubPresenter_OnRewardGridItemClicked) == 0x000004, "Wrong alignment on EventEntryRewardsSubPresenter_OnRewardGridItemClicked");
static_assert(sizeof(EventEntryRewardsSubPresenter_OnRewardGridItemClicked) == 0x000004, "Wrong size on EventEntryRewardsSubPresenter_OnRewardGridItemClicked");
static_assert(offsetof(EventEntryRewardsSubPresenter_OnRewardGridItemClicked, selectedIndex) == 0x000000, "Member 'EventEntryRewardsSubPresenter_OnRewardGridItemClicked::selectedIndex' has a wrong offset!");

// Function DBDUIPresenters.EventEntryPresenter.GoToStoreButtonClicked
// 0x000C (0x000C - 0x0000)
struct EventEntryPresenter_GoToStoreButtonClicked final
{
public:
	class FName                                   selectedStoreTabItemId;                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryPresenter_GoToStoreButtonClicked) == 0x000004, "Wrong alignment on EventEntryPresenter_GoToStoreButtonClicked");
static_assert(sizeof(EventEntryPresenter_GoToStoreButtonClicked) == 0x00000C, "Wrong size on EventEntryPresenter_GoToStoreButtonClicked");
static_assert(offsetof(EventEntryPresenter_GoToStoreButtonClicked, selectedStoreTabItemId) == 0x000000, "Member 'EventEntryPresenter_GoToStoreButtonClicked::selectedStoreTabItemId' has a wrong offset!");

// Function DBDUIPresenters.EventEntryPresenter.OnMilestoneTrackerItemClicked
// 0x0004 (0x0004 - 0x0000)
struct EventEntryPresenter_OnMilestoneTrackerItemClicked final
{
public:
	int32                                         selectedIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryPresenter_OnMilestoneTrackerItemClicked) == 0x000004, "Wrong alignment on EventEntryPresenter_OnMilestoneTrackerItemClicked");
static_assert(sizeof(EventEntryPresenter_OnMilestoneTrackerItemClicked) == 0x000004, "Wrong size on EventEntryPresenter_OnMilestoneTrackerItemClicked");
static_assert(offsetof(EventEntryPresenter_OnMilestoneTrackerItemClicked, selectedIndex) == 0x000000, "Member 'EventEntryPresenter_OnMilestoneTrackerItemClicked::selectedIndex' has a wrong offset!");

// Function DBDUIPresenters.EventEntryPresenter.OnSelectedTabChanged
// 0x0004 (0x0004 - 0x0000)
struct EventEntryPresenter_OnSelectedTabChanged final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryPresenter_OnSelectedTabChanged) == 0x000004, "Wrong alignment on EventEntryPresenter_OnSelectedTabChanged");
static_assert(sizeof(EventEntryPresenter_OnSelectedTabChanged) == 0x000004, "Wrong size on EventEntryPresenter_OnSelectedTabChanged");
static_assert(offsetof(EventEntryPresenter_OnSelectedTabChanged, Key) == 0x000000, "Member 'EventEntryPresenter_OnSelectedTabChanged::Key' has a wrong offset!");

// Function DBDUIPresenters.ExternalEffectsPresenter.OnHideExternalEffect
// 0x0010 (0x0010 - 0x0000)
struct ExternalEffectsPresenter_OnHideExternalEffect final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExternalEffectSource                         ExternalEffectSource;                              // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExternalEffectsPresenter_OnHideExternalEffect) == 0x000004, "Wrong alignment on ExternalEffectsPresenter_OnHideExternalEffect");
static_assert(sizeof(ExternalEffectsPresenter_OnHideExternalEffect) == 0x000010, "Wrong size on ExternalEffectsPresenter_OnHideExternalEffect");
static_assert(offsetof(ExternalEffectsPresenter_OnHideExternalEffect, ItemId) == 0x000000, "Member 'ExternalEffectsPresenter_OnHideExternalEffect::ItemId' has a wrong offset!");
static_assert(offsetof(ExternalEffectsPresenter_OnHideExternalEffect, ExternalEffectSource) == 0x00000C, "Member 'ExternalEffectsPresenter_OnHideExternalEffect::ExternalEffectSource' has a wrong offset!");

// Function DBDUIPresenters.ExternalEffectsPresenter.OnShowExternalEffect
// 0x0038 (0x0038 - 0x0000)
struct ExternalEffectsPresenter_OnShowExternalEffect final
{
public:
	struct FExternalEffectData                    Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExternalEffectsPresenter_OnShowExternalEffect) == 0x000008, "Wrong alignment on ExternalEffectsPresenter_OnShowExternalEffect");
static_assert(sizeof(ExternalEffectsPresenter_OnShowExternalEffect) == 0x000038, "Wrong size on ExternalEffectsPresenter_OnShowExternalEffect");
static_assert(offsetof(ExternalEffectsPresenter_OnShowExternalEffect, Data) == 0x000000, "Member 'ExternalEffectsPresenter_OnShowExternalEffect::Data' has a wrong offset!");

// Function DBDUIPresenters.FriendSearchPopupPresenter.OnSearchBarTextChanged
// 0x0010 (0x0010 - 0x0000)
struct FriendSearchPopupPresenter_OnSearchBarTextChanged final
{
public:
	class FString                                 enteredText;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendSearchPopupPresenter_OnSearchBarTextChanged) == 0x000008, "Wrong alignment on FriendSearchPopupPresenter_OnSearchBarTextChanged");
static_assert(sizeof(FriendSearchPopupPresenter_OnSearchBarTextChanged) == 0x000010, "Wrong size on FriendSearchPopupPresenter_OnSearchBarTextChanged");
static_assert(offsetof(FriendSearchPopupPresenter_OnSearchBarTextChanged, enteredText) == 0x000000, "Member 'FriendSearchPopupPresenter_OnSearchBarTextChanged::enteredText' has a wrong offset!");

// Function DBDUIPresenters.GameManualSubPresenter.OnCategoryCategoryEntered
// 0x0001 (0x0001 - 0x0000)
struct GameManualSubPresenter_OnCategoryCategoryEntered final
{
public:
	EHelpType                                     categoryType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameManualSubPresenter_OnCategoryCategoryEntered) == 0x000001, "Wrong alignment on GameManualSubPresenter_OnCategoryCategoryEntered");
static_assert(sizeof(GameManualSubPresenter_OnCategoryCategoryEntered) == 0x000001, "Wrong size on GameManualSubPresenter_OnCategoryCategoryEntered");
static_assert(offsetof(GameManualSubPresenter_OnCategoryCategoryEntered, categoryType) == 0x000000, "Member 'GameManualSubPresenter_OnCategoryCategoryEntered::categoryType' has a wrong offset!");

// Function DBDUIPresenters.GammaSettingsPopupPresenter.OnGammaConfirmed
// 0x0004 (0x0004 - 0x0000)
struct GammaSettingsPopupPresenter_OnGammaConfirmed final
{
public:
	float                                         gamma;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GammaSettingsPopupPresenter_OnGammaConfirmed) == 0x000004, "Wrong alignment on GammaSettingsPopupPresenter_OnGammaConfirmed");
static_assert(sizeof(GammaSettingsPopupPresenter_OnGammaConfirmed) == 0x000004, "Wrong size on GammaSettingsPopupPresenter_OnGammaConfirmed");
static_assert(offsetof(GammaSettingsPopupPresenter_OnGammaConfirmed, gamma) == 0x000000, "Member 'GammaSettingsPopupPresenter_OnGammaConfirmed::gamma' has a wrong offset!");

// Function DBDUIPresenters.GammaSettingsPopupPresenter.OnGammaValueChanged
// 0x0004 (0x0004 - 0x0000)
struct GammaSettingsPopupPresenter_OnGammaValueChanged final
{
public:
	float                                         gamma;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GammaSettingsPopupPresenter_OnGammaValueChanged) == 0x000004, "Wrong alignment on GammaSettingsPopupPresenter_OnGammaValueChanged");
static_assert(sizeof(GammaSettingsPopupPresenter_OnGammaValueChanged) == 0x000004, "Wrong size on GammaSettingsPopupPresenter_OnGammaValueChanged");
static_assert(offsetof(GammaSettingsPopupPresenter_OnGammaValueChanged, gamma) == 0x000000, "Member 'GammaSettingsPopupPresenter_OnGammaValueChanged::gamma' has a wrong offset!");

// Function DBDUIPresenters.GridPresenterParentWidget.OnChildVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct GridPresenterParentWidget_OnChildVisibilityChanged final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridPresenterParentWidget_OnChildVisibilityChanged) == 0x000001, "Wrong alignment on GridPresenterParentWidget_OnChildVisibilityChanged");
static_assert(sizeof(GridPresenterParentWidget_OnChildVisibilityChanged) == 0x000001, "Wrong size on GridPresenterParentWidget_OnChildVisibilityChanged");
static_assert(offsetof(GridPresenterParentWidget_OnChildVisibilityChanged, InVisibility) == 0x000000, "Member 'GridPresenterParentWidget_OnChildVisibilityChanged::InVisibility' has a wrong offset!");

// Function DBDUIPresenters.HudMatchResultPresenter.ShowEndSequence
// 0x000C (0x000C - 0x0000)
struct HudMatchResultPresenter_ShowEndSequence final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSlasher;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         matchResult;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudMatchResultPresenter_ShowEndSequence) == 0x000004, "Wrong alignment on HudMatchResultPresenter_ShowEndSequence");
static_assert(sizeof(HudMatchResultPresenter_ShowEndSequence) == 0x00000C, "Wrong size on HudMatchResultPresenter_ShowEndSequence");
static_assert(offsetof(HudMatchResultPresenter_ShowEndSequence, Duration) == 0x000000, "Member 'HudMatchResultPresenter_ShowEndSequence::Duration' has a wrong offset!");
static_assert(offsetof(HudMatchResultPresenter_ShowEndSequence, IsSlasher) == 0x000004, "Member 'HudMatchResultPresenter_ShowEndSequence::IsSlasher' has a wrong offset!");
static_assert(offsetof(HudMatchResultPresenter_ShowEndSequence, matchResult) == 0x000008, "Member 'HudMatchResultPresenter_ShowEndSequence::matchResult' has a wrong offset!");

// Function DBDUIPresenters.HudPeekingPromptsPresenter.UpdatePeekingState
// 0x0001 (0x0001 - 0x0000)
struct HudPeekingPromptsPresenter_UpdatePeekingState final
{
public:
	ELeanState                                    potentialLeanState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPeekingPromptsPresenter_UpdatePeekingState) == 0x000001, "Wrong alignment on HudPeekingPromptsPresenter_UpdatePeekingState");
static_assert(sizeof(HudPeekingPromptsPresenter_UpdatePeekingState) == 0x000001, "Wrong size on HudPeekingPromptsPresenter_UpdatePeekingState");
static_assert(offsetof(HudPeekingPromptsPresenter_UpdatePeekingState, potentialLeanState) == 0x000000, "Member 'HudPeekingPromptsPresenter_UpdatePeekingState::potentialLeanState' has a wrong offset!");

// Function DBDUIPresenters.HudPeekingPromptsPresenter.CanPlayerLean
// 0x0001 (0x0001 - 0x0000)
struct HudPeekingPromptsPresenter_CanPlayerLean final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPeekingPromptsPresenter_CanPlayerLean) == 0x000001, "Wrong alignment on HudPeekingPromptsPresenter_CanPlayerLean");
static_assert(sizeof(HudPeekingPromptsPresenter_CanPlayerLean) == 0x000001, "Wrong size on HudPeekingPromptsPresenter_CanPlayerLean");
static_assert(offsetof(HudPeekingPromptsPresenter_CanPlayerLean, ReturnValue) == 0x000000, "Member 'HudPeekingPromptsPresenter_CanPlayerLean::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.HudSpectatePresenter.OnPlayerGameStateChanged
// 0x0010 (0x0010 - 0x0000)
struct HudSpectatePresenter_OnPlayerGameStateChanged final
{
public:
	class ADBDPlayerState*                        DBDPlayerState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    newGameState;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HudSpectatePresenter_OnPlayerGameStateChanged) == 0x000008, "Wrong alignment on HudSpectatePresenter_OnPlayerGameStateChanged");
static_assert(sizeof(HudSpectatePresenter_OnPlayerGameStateChanged) == 0x000010, "Wrong size on HudSpectatePresenter_OnPlayerGameStateChanged");
static_assert(offsetof(HudSpectatePresenter_OnPlayerGameStateChanged, DBDPlayerState) == 0x000000, "Member 'HudSpectatePresenter_OnPlayerGameStateChanged::DBDPlayerState' has a wrong offset!");
static_assert(offsetof(HudSpectatePresenter_OnPlayerGameStateChanged, newGameState) == 0x000008, "Member 'HudSpectatePresenter_OnPlayerGameStateChanged::newGameState' has a wrong offset!");

// Function DBDUIPresenters.HudTutorialObjectivesPresenter.IsInTutorial
// 0x0001 (0x0001 - 0x0000)
struct HudTutorialObjectivesPresenter_IsInTutorial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudTutorialObjectivesPresenter_IsInTutorial) == 0x000001, "Wrong alignment on HudTutorialObjectivesPresenter_IsInTutorial");
static_assert(sizeof(HudTutorialObjectivesPresenter_IsInTutorial) == 0x000001, "Wrong size on HudTutorialObjectivesPresenter_IsInTutorial");
static_assert(offsetof(HudTutorialObjectivesPresenter_IsInTutorial, ReturnValue) == 0x000000, "Member 'HudTutorialObjectivesPresenter_IsInTutorial::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.InboxPresenter.OnItemClicked
// 0x000C (0x000C - 0x0000)
struct InboxPresenter_OnItemClicked final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InboxPresenter_OnItemClicked) == 0x000004, "Wrong alignment on InboxPresenter_OnItemClicked");
static_assert(sizeof(InboxPresenter_OnItemClicked) == 0x00000C, "Wrong size on InboxPresenter_OnItemClicked");
static_assert(offsetof(InboxPresenter_OnItemClicked, ItemId) == 0x000000, "Member 'InboxPresenter_OnItemClicked::ItemId' has a wrong offset!");

// Function DBDUIPresenters.InboxPresenter.OnTabSelected
// 0x0001 (0x0001 - 0x0000)
struct InboxPresenter_OnTabSelected final
{
public:
	EInboxTab                                     Tab;                                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InboxPresenter_OnTabSelected) == 0x000001, "Wrong alignment on InboxPresenter_OnTabSelected");
static_assert(sizeof(InboxPresenter_OnTabSelected) == 0x000001, "Wrong size on InboxPresenter_OnTabSelected");
static_assert(offsetof(InboxPresenter_OnTabSelected, Tab) == 0x000000, "Member 'InboxPresenter_OnTabSelected::Tab' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersSubTabSubPresenter.OnWalletUpdated
// 0x0010 (0x0010 - 0x0000)
struct LobbyCharactersSubTabSubPresenter_OnWalletUpdated final
{
public:
	TArray<struct FShopWalletUpdate>              walletUpdates;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersSubTabSubPresenter_OnWalletUpdated) == 0x000008, "Wrong alignment on LobbyCharactersSubTabSubPresenter_OnWalletUpdated");
static_assert(sizeof(LobbyCharactersSubTabSubPresenter_OnWalletUpdated) == 0x000010, "Wrong size on LobbyCharactersSubTabSubPresenter_OnWalletUpdated");
static_assert(offsetof(LobbyCharactersSubTabSubPresenter_OnWalletUpdated, walletUpdates) == 0x000000, "Member 'LobbyCharactersSubTabSubPresenter_OnWalletUpdated::walletUpdates' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersCustomizationsSubPresenter.OnCategorySelected
// 0x0001 (0x0001 - 0x0000)
struct LobbyCharactersCustomizationsSubPresenter_OnCategorySelected final
{
public:
	ECustomizationCategory                        category;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersCustomizationsSubPresenter_OnCategorySelected) == 0x000001, "Wrong alignment on LobbyCharactersCustomizationsSubPresenter_OnCategorySelected");
static_assert(sizeof(LobbyCharactersCustomizationsSubPresenter_OnCategorySelected) == 0x000001, "Wrong size on LobbyCharactersCustomizationsSubPresenter_OnCategorySelected");
static_assert(offsetof(LobbyCharactersCustomizationsSubPresenter_OnCategorySelected, category) == 0x000000, "Member 'LobbyCharactersCustomizationsSubPresenter_OnCategorySelected::category' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersCustomizationsSubPresenter.OnCategorySelectedAgain
// 0x0001 (0x0001 - 0x0000)
struct LobbyCharactersCustomizationsSubPresenter_OnCategorySelectedAgain final
{
public:
	ECustomizationCategory                        category;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersCustomizationsSubPresenter_OnCategorySelectedAgain) == 0x000001, "Wrong alignment on LobbyCharactersCustomizationsSubPresenter_OnCategorySelectedAgain");
static_assert(sizeof(LobbyCharactersCustomizationsSubPresenter_OnCategorySelectedAgain) == 0x000001, "Wrong size on LobbyCharactersCustomizationsSubPresenter_OnCategorySelectedAgain");
static_assert(offsetof(LobbyCharactersCustomizationsSubPresenter_OnCategorySelectedAgain, category) == 0x000000, "Member 'LobbyCharactersCustomizationsSubPresenter_OnCategorySelectedAgain::category' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersCustomizationsSubPresenter.OnCharmSlotSelected
// 0x0004 (0x0004 - 0x0000)
struct LobbyCharactersCustomizationsSubPresenter_OnCharmSlotSelected final
{
public:
	int32                                         slotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersCustomizationsSubPresenter_OnCharmSlotSelected) == 0x000004, "Wrong alignment on LobbyCharactersCustomizationsSubPresenter_OnCharmSlotSelected");
static_assert(sizeof(LobbyCharactersCustomizationsSubPresenter_OnCharmSlotSelected) == 0x000004, "Wrong size on LobbyCharactersCustomizationsSubPresenter_OnCharmSlotSelected");
static_assert(offsetof(LobbyCharactersCustomizationsSubPresenter_OnCharmSlotSelected, slotIndex) == 0x000000, "Member 'LobbyCharactersCustomizationsSubPresenter_OnCharmSlotSelected::slotIndex' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersCustomizationsSubPresenter.OnCustomizationSelected
// 0x000C (0x000C - 0x0000)
struct LobbyCharactersCustomizationsSubPresenter_OnCustomizationSelected final
{
public:
	class FName                                   customizationId;                                   // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersCustomizationsSubPresenter_OnCustomizationSelected) == 0x000004, "Wrong alignment on LobbyCharactersCustomizationsSubPresenter_OnCustomizationSelected");
static_assert(sizeof(LobbyCharactersCustomizationsSubPresenter_OnCustomizationSelected) == 0x00000C, "Wrong size on LobbyCharactersCustomizationsSubPresenter_OnCustomizationSelected");
static_assert(offsetof(LobbyCharactersCustomizationsSubPresenter_OnCustomizationSelected, customizationId) == 0x000000, "Member 'LobbyCharactersCustomizationsSubPresenter_OnCustomizationSelected::customizationId' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersCustomizationsSubPresenter.OnCustomizationSelectedAgain
// 0x000C (0x000C - 0x0000)
struct LobbyCharactersCustomizationsSubPresenter_OnCustomizationSelectedAgain final
{
public:
	class FName                                   customizationId;                                   // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersCustomizationsSubPresenter_OnCustomizationSelectedAgain) == 0x000004, "Wrong alignment on LobbyCharactersCustomizationsSubPresenter_OnCustomizationSelectedAgain");
static_assert(sizeof(LobbyCharactersCustomizationsSubPresenter_OnCustomizationSelectedAgain) == 0x00000C, "Wrong size on LobbyCharactersCustomizationsSubPresenter_OnCustomizationSelectedAgain");
static_assert(offsetof(LobbyCharactersCustomizationsSubPresenter_OnCustomizationSelectedAgain, customizationId) == 0x000000, "Member 'LobbyCharactersCustomizationsSubPresenter_OnCustomizationSelectedAgain::customizationId' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersCustomizationsSubPresenter.OnFiltersChanged
// 0x0060 (0x0060 - 0x0000)
struct LobbyCharactersCustomizationsSubPresenter_OnFiltersChanged final
{
public:
	struct FStoreCharactersFiltersData            filtersData;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersCustomizationsSubPresenter_OnFiltersChanged) == 0x000008, "Wrong alignment on LobbyCharactersCustomizationsSubPresenter_OnFiltersChanged");
static_assert(sizeof(LobbyCharactersCustomizationsSubPresenter_OnFiltersChanged) == 0x000060, "Wrong size on LobbyCharactersCustomizationsSubPresenter_OnFiltersChanged");
static_assert(offsetof(LobbyCharactersCustomizationsSubPresenter_OnFiltersChanged, filtersData) == 0x000000, "Member 'LobbyCharactersCustomizationsSubPresenter_OnFiltersChanged::filtersData' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersCustomizationsSubPresenter.OnPresetSelected
// 0x0004 (0x0004 - 0x0000)
struct LobbyCharactersCustomizationsSubPresenter_OnPresetSelected final
{
public:
	int32                                         presetId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersCustomizationsSubPresenter_OnPresetSelected) == 0x000004, "Wrong alignment on LobbyCharactersCustomizationsSubPresenter_OnPresetSelected");
static_assert(sizeof(LobbyCharactersCustomizationsSubPresenter_OnPresetSelected) == 0x000004, "Wrong size on LobbyCharactersCustomizationsSubPresenter_OnPresetSelected");
static_assert(offsetof(LobbyCharactersCustomizationsSubPresenter_OnPresetSelected, presetId) == 0x000000, "Member 'LobbyCharactersCustomizationsSubPresenter_OnPresetSelected::presetId' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersCustomizationsSubPresenter.OnSearchBarTextChanged
// 0x0010 (0x0010 - 0x0000)
struct LobbyCharactersCustomizationsSubPresenter_OnSearchBarTextChanged final
{
public:
	class FString                                 enteredText;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersCustomizationsSubPresenter_OnSearchBarTextChanged) == 0x000008, "Wrong alignment on LobbyCharactersCustomizationsSubPresenter_OnSearchBarTextChanged");
static_assert(sizeof(LobbyCharactersCustomizationsSubPresenter_OnSearchBarTextChanged) == 0x000010, "Wrong size on LobbyCharactersCustomizationsSubPresenter_OnSearchBarTextChanged");
static_assert(offsetof(LobbyCharactersCustomizationsSubPresenter_OnSearchBarTextChanged, enteredText) == 0x000000, "Member 'LobbyCharactersCustomizationsSubPresenter_OnSearchBarTextChanged::enteredText' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersCustomizationsSubPresenter.OnSortingChanged
// 0x0004 (0x0004 - 0x0000)
struct LobbyCharactersCustomizationsSubPresenter_OnSortingChanged final
{
public:
	ESortingOption                                sortingType;                                       // 0x0000(0x0002)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESortingOrder                                 sortingOrder;                                      // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyCharactersCustomizationsSubPresenter_OnSortingChanged) == 0x000002, "Wrong alignment on LobbyCharactersCustomizationsSubPresenter_OnSortingChanged");
static_assert(sizeof(LobbyCharactersCustomizationsSubPresenter_OnSortingChanged) == 0x000004, "Wrong size on LobbyCharactersCustomizationsSubPresenter_OnSortingChanged");
static_assert(offsetof(LobbyCharactersCustomizationsSubPresenter_OnSortingChanged, sortingType) == 0x000000, "Member 'LobbyCharactersCustomizationsSubPresenter_OnSortingChanged::sortingType' has a wrong offset!");
static_assert(offsetof(LobbyCharactersCustomizationsSubPresenter_OnSortingChanged, sortingOrder) == 0x000002, "Member 'LobbyCharactersCustomizationsSubPresenter_OnSortingChanged::sortingOrder' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersListSubPresenter.OnCharacterSelected
// 0x0004 (0x0004 - 0x0000)
struct LobbyCharactersListSubPresenter_OnCharacterSelected final
{
public:
	int32                                         characterIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersListSubPresenter_OnCharacterSelected) == 0x000004, "Wrong alignment on LobbyCharactersListSubPresenter_OnCharacterSelected");
static_assert(sizeof(LobbyCharactersListSubPresenter_OnCharacterSelected) == 0x000004, "Wrong size on LobbyCharactersListSubPresenter_OnCharacterSelected");
static_assert(offsetof(LobbyCharactersListSubPresenter_OnCharacterSelected, characterIndex) == 0x000000, "Member 'LobbyCharactersListSubPresenter_OnCharacterSelected::characterIndex' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersListSubPresenter.OnFiltersChanged
// 0x0060 (0x0060 - 0x0000)
struct LobbyCharactersListSubPresenter_OnFiltersChanged final
{
public:
	struct FStoreCharactersFiltersData            filtersData;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersListSubPresenter_OnFiltersChanged) == 0x000008, "Wrong alignment on LobbyCharactersListSubPresenter_OnFiltersChanged");
static_assert(sizeof(LobbyCharactersListSubPresenter_OnFiltersChanged) == 0x000060, "Wrong size on LobbyCharactersListSubPresenter_OnFiltersChanged");
static_assert(offsetof(LobbyCharactersListSubPresenter_OnFiltersChanged, filtersData) == 0x000000, "Member 'LobbyCharactersListSubPresenter_OnFiltersChanged::filtersData' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersListSubPresenter.OnSearchBarTextChanged
// 0x0010 (0x0010 - 0x0000)
struct LobbyCharactersListSubPresenter_OnSearchBarTextChanged final
{
public:
	class FString                                 enteredText;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersListSubPresenter_OnSearchBarTextChanged) == 0x000008, "Wrong alignment on LobbyCharactersListSubPresenter_OnSearchBarTextChanged");
static_assert(sizeof(LobbyCharactersListSubPresenter_OnSearchBarTextChanged) == 0x000010, "Wrong size on LobbyCharactersListSubPresenter_OnSearchBarTextChanged");
static_assert(offsetof(LobbyCharactersListSubPresenter_OnSearchBarTextChanged, enteredText) == 0x000000, "Member 'LobbyCharactersListSubPresenter_OnSearchBarTextChanged::enteredText' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersListSubPresenter.OnSortingChanged
// 0x0004 (0x0004 - 0x0000)
struct LobbyCharactersListSubPresenter_OnSortingChanged final
{
public:
	ESortingOption                                sortingType;                                       // 0x0000(0x0002)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESortingOrder                                 sortingOrder;                                      // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyCharactersListSubPresenter_OnSortingChanged) == 0x000002, "Wrong alignment on LobbyCharactersListSubPresenter_OnSortingChanged");
static_assert(sizeof(LobbyCharactersListSubPresenter_OnSortingChanged) == 0x000004, "Wrong size on LobbyCharactersListSubPresenter_OnSortingChanged");
static_assert(offsetof(LobbyCharactersListSubPresenter_OnSortingChanged, sortingType) == 0x000000, "Member 'LobbyCharactersListSubPresenter_OnSortingChanged::sortingType' has a wrong offset!");
static_assert(offsetof(LobbyCharactersListSubPresenter_OnSortingChanged, sortingOrder) == 0x000002, "Member 'LobbyCharactersListSubPresenter_OnSortingChanged::sortingOrder' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersSubPresenter.OnAnimationPreviewComplete
// 0x0078 (0x0078 - 0x0000)
struct LobbyCharactersSubPresenter_OnAnimationPreviewComplete final
{
public:
	class UAnimationPreviewSubsystem*             AnimationPreviewSubsystem;                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimationPreviewRequest               Request;                                           // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          completedSuccessfully;                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyCharactersSubPresenter_OnAnimationPreviewComplete) == 0x000008, "Wrong alignment on LobbyCharactersSubPresenter_OnAnimationPreviewComplete");
static_assert(sizeof(LobbyCharactersSubPresenter_OnAnimationPreviewComplete) == 0x000078, "Wrong size on LobbyCharactersSubPresenter_OnAnimationPreviewComplete");
static_assert(offsetof(LobbyCharactersSubPresenter_OnAnimationPreviewComplete, AnimationPreviewSubsystem) == 0x000000, "Member 'LobbyCharactersSubPresenter_OnAnimationPreviewComplete::AnimationPreviewSubsystem' has a wrong offset!");
static_assert(offsetof(LobbyCharactersSubPresenter_OnAnimationPreviewComplete, Request) == 0x000008, "Member 'LobbyCharactersSubPresenter_OnAnimationPreviewComplete::Request' has a wrong offset!");
static_assert(offsetof(LobbyCharactersSubPresenter_OnAnimationPreviewComplete, completedSuccessfully) == 0x000070, "Member 'LobbyCharactersSubPresenter_OnAnimationPreviewComplete::completedSuccessfully' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersSubPresenter.OnItemUnlockClicked
// 0x0001 (0x0001 - 0x0000)
struct LobbyCharactersSubPresenter_OnItemUnlockClicked final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersSubPresenter_OnItemUnlockClicked) == 0x000001, "Wrong alignment on LobbyCharactersSubPresenter_OnItemUnlockClicked");
static_assert(sizeof(LobbyCharactersSubPresenter_OnItemUnlockClicked) == 0x000001, "Wrong size on LobbyCharactersSubPresenter_OnItemUnlockClicked");
static_assert(offsetof(LobbyCharactersSubPresenter_OnItemUnlockClicked, currencyType) == 0x000000, "Member 'LobbyCharactersSubPresenter_OnItemUnlockClicked::currencyType' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersSubPresenter.OnNotEnoughCurrencyModalButtonClicked
// 0x0001 (0x0001 - 0x0000)
struct LobbyCharactersSubPresenter_OnNotEnoughCurrencyModalButtonClicked final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersSubPresenter_OnNotEnoughCurrencyModalButtonClicked) == 0x000001, "Wrong alignment on LobbyCharactersSubPresenter_OnNotEnoughCurrencyModalButtonClicked");
static_assert(sizeof(LobbyCharactersSubPresenter_OnNotEnoughCurrencyModalButtonClicked) == 0x000001, "Wrong size on LobbyCharactersSubPresenter_OnNotEnoughCurrencyModalButtonClicked");
static_assert(offsetof(LobbyCharactersSubPresenter_OnNotEnoughCurrencyModalButtonClicked, currencyType) == 0x000000, "Member 'LobbyCharactersSubPresenter_OnNotEnoughCurrencyModalButtonClicked::currencyType' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersSubPresenter.OnSubTabSelected
// 0x0001 (0x0001 - 0x0000)
struct LobbyCharactersSubPresenter_OnSubTabSelected final
{
public:
	ELobbyCharactersMenuState                     selectedTabId;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersSubPresenter_OnSubTabSelected) == 0x000001, "Wrong alignment on LobbyCharactersSubPresenter_OnSubTabSelected");
static_assert(sizeof(LobbyCharactersSubPresenter_OnSubTabSelected) == 0x000001, "Wrong size on LobbyCharactersSubPresenter_OnSubTabSelected");
static_assert(offsetof(LobbyCharactersSubPresenter_OnSubTabSelected, selectedTabId) == 0x000000, "Member 'LobbyCharactersSubPresenter_OnSubTabSelected::selectedTabId' has a wrong offset!");

// Function DBDUIPresenters.LobbyCharactersSubPresenter.PlayMoriAnimation
// 0x0001 (0x0001 - 0x0000)
struct LobbyCharactersSubPresenter_PlayMoriAnimation final
{
public:
	EMoriPreviewVariant                           moriPreviewVariant;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersSubPresenter_PlayMoriAnimation) == 0x000001, "Wrong alignment on LobbyCharactersSubPresenter_PlayMoriAnimation");
static_assert(sizeof(LobbyCharactersSubPresenter_PlayMoriAnimation) == 0x000001, "Wrong size on LobbyCharactersSubPresenter_PlayMoriAnimation");
static_assert(offsetof(LobbyCharactersSubPresenter_PlayMoriAnimation, moriPreviewVariant) == 0x000000, "Member 'LobbyCharactersSubPresenter_PlayMoriAnimation::moriPreviewVariant' has a wrong offset!");

// Function DBDUIPresenters.LobbyLoadoutSubPresenter.OnLoadoutInventorySlotClick
// 0x0010 (0x0010 - 0x0000)
struct LobbyLoadoutSubPresenter_OnLoadoutInventorySlotClick final
{
public:
	ELoadoutSlot                                  slotIndex;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemId;                                            // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyLoadoutSubPresenter_OnLoadoutInventorySlotClick) == 0x000004, "Wrong alignment on LobbyLoadoutSubPresenter_OnLoadoutInventorySlotClick");
static_assert(sizeof(LobbyLoadoutSubPresenter_OnLoadoutInventorySlotClick) == 0x000010, "Wrong size on LobbyLoadoutSubPresenter_OnLoadoutInventorySlotClick");
static_assert(offsetof(LobbyLoadoutSubPresenter_OnLoadoutInventorySlotClick, slotIndex) == 0x000000, "Member 'LobbyLoadoutSubPresenter_OnLoadoutInventorySlotClick::slotIndex' has a wrong offset!");
static_assert(offsetof(LobbyLoadoutSubPresenter_OnLoadoutInventorySlotClick, ItemId) == 0x000004, "Member 'LobbyLoadoutSubPresenter_OnLoadoutInventorySlotClick::ItemId' has a wrong offset!");

// Function DBDUIPresenters.LobbyLoadoutSubPresenter.OnLoadoutSlotSelected
// 0x0001 (0x0001 - 0x0000)
struct LobbyLoadoutSubPresenter_OnLoadoutSlotSelected final
{
public:
	ELoadoutSlot                                  slotSelected;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyLoadoutSubPresenter_OnLoadoutSlotSelected) == 0x000001, "Wrong alignment on LobbyLoadoutSubPresenter_OnLoadoutSlotSelected");
static_assert(sizeof(LobbyLoadoutSubPresenter_OnLoadoutSlotSelected) == 0x000001, "Wrong size on LobbyLoadoutSubPresenter_OnLoadoutSlotSelected");
static_assert(offsetof(LobbyLoadoutSubPresenter_OnLoadoutSlotSelected, slotSelected) == 0x000000, "Member 'LobbyLoadoutSubPresenter_OnLoadoutSlotSelected::slotSelected' has a wrong offset!");

// Function DBDUIPresenters.LobbyLoadoutSubPresenter.OnPresetSelected
// 0x0004 (0x0004 - 0x0000)
struct LobbyLoadoutSubPresenter_OnPresetSelected final
{
public:
	int32                                         presetId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyLoadoutSubPresenter_OnPresetSelected) == 0x000004, "Wrong alignment on LobbyLoadoutSubPresenter_OnPresetSelected");
static_assert(sizeof(LobbyLoadoutSubPresenter_OnPresetSelected) == 0x000004, "Wrong size on LobbyLoadoutSubPresenter_OnPresetSelected");
static_assert(offsetof(LobbyLoadoutSubPresenter_OnPresetSelected, presetId) == 0x000000, "Member 'LobbyLoadoutSubPresenter_OnPresetSelected::presetId' has a wrong offset!");

// Function DBDUIPresenters.LobbyLoadoutSubPresenter.OnSearchBarTextChanged
// 0x0010 (0x0010 - 0x0000)
struct LobbyLoadoutSubPresenter_OnSearchBarTextChanged final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyLoadoutSubPresenter_OnSearchBarTextChanged) == 0x000008, "Wrong alignment on LobbyLoadoutSubPresenter_OnSearchBarTextChanged");
static_assert(sizeof(LobbyLoadoutSubPresenter_OnSearchBarTextChanged) == 0x000010, "Wrong size on LobbyLoadoutSubPresenter_OnSearchBarTextChanged");
static_assert(offsetof(LobbyLoadoutSubPresenter_OnSearchBarTextChanged, String) == 0x000000, "Member 'LobbyLoadoutSubPresenter_OnSearchBarTextChanged::String' has a wrong offset!");

// Function DBDUIPresenters.LobbyPerkPreviewerSubPresenter.OnGameDataUpdated
// 0x0008 (0x0008 - 0x0000)
struct LobbyPerkPreviewerSubPresenter_OnGameDataUpdated final
{
public:
	class ADBDGameState*                          GameState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPerkPreviewerSubPresenter_OnGameDataUpdated) == 0x000008, "Wrong alignment on LobbyPerkPreviewerSubPresenter_OnGameDataUpdated");
static_assert(sizeof(LobbyPerkPreviewerSubPresenter_OnGameDataUpdated) == 0x000008, "Wrong size on LobbyPerkPreviewerSubPresenter_OnGameDataUpdated");
static_assert(offsetof(LobbyPerkPreviewerSubPresenter_OnGameDataUpdated, GameState) == 0x000000, "Member 'LobbyPerkPreviewerSubPresenter_OnGameDataUpdated::GameState' has a wrong offset!");

// Function DBDUIPresenters.LobbyPerkPreviewerSubPresenter.OnLocalPlayerDataUpdated
// 0x0008 (0x0008 - 0x0000)
struct LobbyPerkPreviewerSubPresenter_OnLocalPlayerDataUpdated final
{
public:
	class ADBDPlayerState*                        PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPerkPreviewerSubPresenter_OnLocalPlayerDataUpdated) == 0x000008, "Wrong alignment on LobbyPerkPreviewerSubPresenter_OnLocalPlayerDataUpdated");
static_assert(sizeof(LobbyPerkPreviewerSubPresenter_OnLocalPlayerDataUpdated) == 0x000008, "Wrong size on LobbyPerkPreviewerSubPresenter_OnLocalPlayerDataUpdated");
static_assert(offsetof(LobbyPerkPreviewerSubPresenter_OnLocalPlayerDataUpdated, PlayerState) == 0x000000, "Member 'LobbyPerkPreviewerSubPresenter_OnLocalPlayerDataUpdated::PlayerState' has a wrong offset!");

// Function DBDUIPresenters.LobbyPlayerListSubPresenter.OnPlayerSocialOptionClicked
// 0x0048 (0x0048 - 0x0000)
struct LobbyPlayerListSubPresenter_OnPlayerSocialOptionClicked final
{
public:
	struct FPlayerSocialOptionViewData            playerSocialOptionData;                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPlayerListSubPresenter_OnPlayerSocialOptionClicked) == 0x000008, "Wrong alignment on LobbyPlayerListSubPresenter_OnPlayerSocialOptionClicked");
static_assert(sizeof(LobbyPlayerListSubPresenter_OnPlayerSocialOptionClicked) == 0x000048, "Wrong size on LobbyPlayerListSubPresenter_OnPlayerSocialOptionClicked");
static_assert(offsetof(LobbyPlayerListSubPresenter_OnPlayerSocialOptionClicked, playerSocialOptionData) == 0x000000, "Member 'LobbyPlayerListSubPresenter_OnPlayerSocialOptionClicked::playerSocialOptionData' has a wrong offset!");

// Function DBDUIPresenters.LobbyPlayerListSubPresenter.OnPlayerStatusClicked
// 0x0010 (0x0010 - 0x0000)
struct LobbyPlayerListSubPresenter_OnPlayerStatusClicked final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPlayerListSubPresenter_OnPlayerStatusClicked) == 0x000008, "Wrong alignment on LobbyPlayerListSubPresenter_OnPlayerStatusClicked");
static_assert(sizeof(LobbyPlayerListSubPresenter_OnPlayerStatusClicked) == 0x000010, "Wrong size on LobbyPlayerListSubPresenter_OnPlayerStatusClicked");
static_assert(offsetof(LobbyPlayerListSubPresenter_OnPlayerStatusClicked, PlayerId) == 0x000000, "Member 'LobbyPlayerListSubPresenter_OnPlayerStatusClicked::PlayerId' has a wrong offset!");

// Function DBDUIPresenters.LobbyPresenter.OnBeginnerModeUpdated
// 0x0001 (0x0001 - 0x0000)
struct LobbyPresenter_OnBeginnerModeUpdated final
{
public:
	bool                                          beginnerModeActive;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPresenter_OnBeginnerModeUpdated) == 0x000001, "Wrong alignment on LobbyPresenter_OnBeginnerModeUpdated");
static_assert(sizeof(LobbyPresenter_OnBeginnerModeUpdated) == 0x000001, "Wrong size on LobbyPresenter_OnBeginnerModeUpdated");
static_assert(offsetof(LobbyPresenter_OnBeginnerModeUpdated, beginnerModeActive) == 0x000000, "Member 'LobbyPresenter_OnBeginnerModeUpdated::beginnerModeActive' has a wrong offset!");

// Function DBDUIPresenters.LobbyPresenter.OnDisplayStandRotated
// 0x0004 (0x0004 - 0x0000)
struct LobbyPresenter_OnDisplayStandRotated final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPresenter_OnDisplayStandRotated) == 0x000004, "Wrong alignment on LobbyPresenter_OnDisplayStandRotated");
static_assert(sizeof(LobbyPresenter_OnDisplayStandRotated) == 0x000004, "Wrong size on LobbyPresenter_OnDisplayStandRotated");
static_assert(offsetof(LobbyPresenter_OnDisplayStandRotated, Distance) == 0x000000, "Member 'LobbyPresenter_OnDisplayStandRotated::Distance' has a wrong offset!");

// Function DBDUIPresenters.LobbyPresenter.RedirectToLoadout
// 0x0001 (0x0001 - 0x0000)
struct LobbyPresenter_RedirectToLoadout final
{
public:
	ELoadoutSlot                                  slotIndex;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPresenter_RedirectToLoadout) == 0x000001, "Wrong alignment on LobbyPresenter_RedirectToLoadout");
static_assert(sizeof(LobbyPresenter_RedirectToLoadout) == 0x000001, "Wrong size on LobbyPresenter_RedirectToLoadout");
static_assert(offsetof(LobbyPresenter_RedirectToLoadout, slotIndex) == 0x000000, "Member 'LobbyPresenter_RedirectToLoadout::slotIndex' has a wrong offset!");

// Function DBDUIPresenters.MainMenuPresenter.OnCreatePartyCompleted
// 0x0008 (0x0008 - 0x0000)
struct MainMenuPresenter_OnCreatePartyCompleted final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         idToTransitionTo;                                  // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuPresenter_OnCreatePartyCompleted) == 0x000004, "Wrong alignment on MainMenuPresenter_OnCreatePartyCompleted");
static_assert(sizeof(MainMenuPresenter_OnCreatePartyCompleted) == 0x000008, "Wrong size on MainMenuPresenter_OnCreatePartyCompleted");
static_assert(offsetof(MainMenuPresenter_OnCreatePartyCompleted, Success) == 0x000000, "Member 'MainMenuPresenter_OnCreatePartyCompleted::Success' has a wrong offset!");
static_assert(offsetof(MainMenuPresenter_OnCreatePartyCompleted, idToTransitionTo) == 0x000004, "Member 'MainMenuPresenter_OnCreatePartyCompleted::idToTransitionTo' has a wrong offset!");

// Function DBDUIPresenters.MainMenuPresenter.OnLTESubMenuOpeningChanged
// 0x0001 (0x0001 - 0x0000)
struct MainMenuPresenter_OnLTESubMenuOpeningChanged final
{
public:
	EMenuOpened                                   menuOpened;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuPresenter_OnLTESubMenuOpeningChanged) == 0x000001, "Wrong alignment on MainMenuPresenter_OnLTESubMenuOpeningChanged");
static_assert(sizeof(MainMenuPresenter_OnLTESubMenuOpeningChanged) == 0x000001, "Wrong size on MainMenuPresenter_OnLTESubMenuOpeningChanged");
static_assert(offsetof(MainMenuPresenter_OnLTESubMenuOpeningChanged, menuOpened) == 0x000000, "Member 'MainMenuPresenter_OnLTESubMenuOpeningChanged::menuOpened' has a wrong offset!");

// Function DBDUIPresenters.MainMenuPresenter.OnMainMenuFadeCompleted
// 0x0001 (0x0001 - 0x0000)
struct MainMenuPresenter_OnMainMenuFadeCompleted final
{
public:
	EDBDCameraViewType                            View;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuPresenter_OnMainMenuFadeCompleted) == 0x000001, "Wrong alignment on MainMenuPresenter_OnMainMenuFadeCompleted");
static_assert(sizeof(MainMenuPresenter_OnMainMenuFadeCompleted) == 0x000001, "Wrong size on MainMenuPresenter_OnMainMenuFadeCompleted");
static_assert(offsetof(MainMenuPresenter_OnMainMenuFadeCompleted, View) == 0x000000, "Member 'MainMenuPresenter_OnMainMenuFadeCompleted::View' has a wrong offset!");

// Function DBDUIPresenters.MainMenuPresenter.OnPlayCustomButtonClicked
// 0x0001 (0x0001 - 0x0000)
struct MainMenuPresenter_OnPlayCustomButtonClicked final
{
public:
	EGameType                                     gameType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuPresenter_OnPlayCustomButtonClicked) == 0x000001, "Wrong alignment on MainMenuPresenter_OnPlayCustomButtonClicked");
static_assert(sizeof(MainMenuPresenter_OnPlayCustomButtonClicked) == 0x000001, "Wrong size on MainMenuPresenter_OnPlayCustomButtonClicked");
static_assert(offsetof(MainMenuPresenter_OnPlayCustomButtonClicked, gameType) == 0x000000, "Member 'MainMenuPresenter_OnPlayCustomButtonClicked::gameType' has a wrong offset!");

// Function DBDUIPresenters.MainMenuPresenter.OnPlayKillerButtonClicked
// 0x0001 (0x0001 - 0x0000)
struct MainMenuPresenter_OnPlayKillerButtonClicked final
{
public:
	EGameType                                     gameType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuPresenter_OnPlayKillerButtonClicked) == 0x000001, "Wrong alignment on MainMenuPresenter_OnPlayKillerButtonClicked");
static_assert(sizeof(MainMenuPresenter_OnPlayKillerButtonClicked) == 0x000001, "Wrong size on MainMenuPresenter_OnPlayKillerButtonClicked");
static_assert(offsetof(MainMenuPresenter_OnPlayKillerButtonClicked, gameType) == 0x000000, "Member 'MainMenuPresenter_OnPlayKillerButtonClicked::gameType' has a wrong offset!");

// Function DBDUIPresenters.MainMenuPresenter.OnPlayLimitedTimeEventKillerButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct MainMenuPresenter_OnPlayLimitedTimeEventKillerButtonClicked final
{
public:
	EGameType                                     gameType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   eventID;                                           // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuPresenter_OnPlayLimitedTimeEventKillerButtonClicked) == 0x000004, "Wrong alignment on MainMenuPresenter_OnPlayLimitedTimeEventKillerButtonClicked");
static_assert(sizeof(MainMenuPresenter_OnPlayLimitedTimeEventKillerButtonClicked) == 0x000010, "Wrong size on MainMenuPresenter_OnPlayLimitedTimeEventKillerButtonClicked");
static_assert(offsetof(MainMenuPresenter_OnPlayLimitedTimeEventKillerButtonClicked, gameType) == 0x000000, "Member 'MainMenuPresenter_OnPlayLimitedTimeEventKillerButtonClicked::gameType' has a wrong offset!");
static_assert(offsetof(MainMenuPresenter_OnPlayLimitedTimeEventKillerButtonClicked, eventID) == 0x000004, "Member 'MainMenuPresenter_OnPlayLimitedTimeEventKillerButtonClicked::eventID' has a wrong offset!");

// Function DBDUIPresenters.MainMenuPresenter.OnPlayLimitedTimeEventSurvivorButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct MainMenuPresenter_OnPlayLimitedTimeEventSurvivorButtonClicked final
{
public:
	EGameType                                     gameType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   eventID;                                           // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuPresenter_OnPlayLimitedTimeEventSurvivorButtonClicked) == 0x000004, "Wrong alignment on MainMenuPresenter_OnPlayLimitedTimeEventSurvivorButtonClicked");
static_assert(sizeof(MainMenuPresenter_OnPlayLimitedTimeEventSurvivorButtonClicked) == 0x000010, "Wrong size on MainMenuPresenter_OnPlayLimitedTimeEventSurvivorButtonClicked");
static_assert(offsetof(MainMenuPresenter_OnPlayLimitedTimeEventSurvivorButtonClicked, gameType) == 0x000000, "Member 'MainMenuPresenter_OnPlayLimitedTimeEventSurvivorButtonClicked::gameType' has a wrong offset!");
static_assert(offsetof(MainMenuPresenter_OnPlayLimitedTimeEventSurvivorButtonClicked, eventID) == 0x000004, "Member 'MainMenuPresenter_OnPlayLimitedTimeEventSurvivorButtonClicked::eventID' has a wrong offset!");

// Function DBDUIPresenters.MainMenuPresenter.OnPlaySurvivorButtonClicked
// 0x0001 (0x0001 - 0x0000)
struct MainMenuPresenter_OnPlaySurvivorButtonClicked final
{
public:
	EGameType                                     gameType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuPresenter_OnPlaySurvivorButtonClicked) == 0x000001, "Wrong alignment on MainMenuPresenter_OnPlaySurvivorButtonClicked");
static_assert(sizeof(MainMenuPresenter_OnPlaySurvivorButtonClicked) == 0x000001, "Wrong size on MainMenuPresenter_OnPlaySurvivorButtonClicked");
static_assert(offsetof(MainMenuPresenter_OnPlaySurvivorButtonClicked, gameType) == 0x000000, "Member 'MainMenuPresenter_OnPlaySurvivorButtonClicked::gameType' has a wrong offset!");

// Function DBDUIPresenters.MarketingInvitationPopupPresenter.OnOptOutToggleButtonClicked
// 0x0001 (0x0001 - 0x0000)
struct MarketingInvitationPopupPresenter_OnOptOutToggleButtonClicked final
{
public:
	bool                                          isOptOutToggleActive;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketingInvitationPopupPresenter_OnOptOutToggleButtonClicked) == 0x000001, "Wrong alignment on MarketingInvitationPopupPresenter_OnOptOutToggleButtonClicked");
static_assert(sizeof(MarketingInvitationPopupPresenter_OnOptOutToggleButtonClicked) == 0x000001, "Wrong size on MarketingInvitationPopupPresenter_OnOptOutToggleButtonClicked");
static_assert(offsetof(MarketingInvitationPopupPresenter_OnOptOutToggleButtonClicked, isOptOutToggleActive) == 0x000000, "Member 'MarketingInvitationPopupPresenter_OnOptOutToggleButtonClicked::isOptOutToggleActive' has a wrong offset!");

// Function DBDUIPresenters.MatchmakingFlowPresenter.ShouldDisplayWidget
// 0x0001 (0x0001 - 0x0000)
struct MatchmakingFlowPresenter_ShouldDisplayWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingFlowPresenter_ShouldDisplayWidget) == 0x000001, "Wrong alignment on MatchmakingFlowPresenter_ShouldDisplayWidget");
static_assert(sizeof(MatchmakingFlowPresenter_ShouldDisplayWidget) == 0x000001, "Wrong size on MatchmakingFlowPresenter_ShouldDisplayWidget");
static_assert(offsetof(MatchmakingFlowPresenter_ShouldDisplayWidget, ReturnValue) == 0x000000, "Member 'MatchmakingFlowPresenter_ShouldDisplayWidget::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.NewsPresenter.OnTabSelected
// 0x0004 (0x0004 - 0x0000)
struct NewsPresenter_OnTabSelected final
{
public:
	int32                                         selectedTab;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewsPresenter_OnTabSelected) == 0x000004, "Wrong alignment on NewsPresenter_OnTabSelected");
static_assert(sizeof(NewsPresenter_OnTabSelected) == 0x000004, "Wrong size on NewsPresenter_OnTabSelected");
static_assert(offsetof(NewsPresenter_OnTabSelected, selectedTab) == 0x000000, "Member 'NewsPresenter_OnTabSelected::selectedTab' has a wrong offset!");

// Function DBDUIPresenters.OnboardingMenuPresenter.OnFirstOnboardingStepsDone
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuPresenter_OnFirstOnboardingStepsDone final
{
public:
	bool                                          isFirstStepsDone;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuPresenter_OnFirstOnboardingStepsDone) == 0x000001, "Wrong alignment on OnboardingMenuPresenter_OnFirstOnboardingStepsDone");
static_assert(sizeof(OnboardingMenuPresenter_OnFirstOnboardingStepsDone) == 0x000001, "Wrong size on OnboardingMenuPresenter_OnFirstOnboardingStepsDone");
static_assert(offsetof(OnboardingMenuPresenter_OnFirstOnboardingStepsDone, isFirstStepsDone) == 0x000000, "Member 'OnboardingMenuPresenter_OnFirstOnboardingStepsDone::isFirstStepsDone' has a wrong offset!");

// Function DBDUIPresenters.OnboardingMenuPresenter.OnMenuTabSelected
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuPresenter_OnMenuTabSelected final
{
public:
	EOnboardingMenuState                          menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuPresenter_OnMenuTabSelected) == 0x000001, "Wrong alignment on OnboardingMenuPresenter_OnMenuTabSelected");
static_assert(sizeof(OnboardingMenuPresenter_OnMenuTabSelected) == 0x000001, "Wrong size on OnboardingMenuPresenter_OnMenuTabSelected");
static_assert(offsetof(OnboardingMenuPresenter_OnMenuTabSelected, menuState) == 0x000000, "Member 'OnboardingMenuPresenter_OnMenuTabSelected::menuState' has a wrong offset!");

// Function DBDUIPresenters.OnboardingMenuPresenter.OnMenuTabSelectedAgain
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuPresenter_OnMenuTabSelectedAgain final
{
public:
	EOnboardingMenuState                          menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuPresenter_OnMenuTabSelectedAgain) == 0x000001, "Wrong alignment on OnboardingMenuPresenter_OnMenuTabSelectedAgain");
static_assert(sizeof(OnboardingMenuPresenter_OnMenuTabSelectedAgain) == 0x000001, "Wrong size on OnboardingMenuPresenter_OnMenuTabSelectedAgain");
static_assert(offsetof(OnboardingMenuPresenter_OnMenuTabSelectedAgain, menuState) == 0x000000, "Member 'OnboardingMenuPresenter_OnMenuTabSelectedAgain::menuState' has a wrong offset!");

// Function DBDUIPresenters.OnboardingMenuPresenter.OnSetUIEnabled
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuPresenter_OnSetUIEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuPresenter_OnSetUIEnabled) == 0x000001, "Wrong alignment on OnboardingMenuPresenter_OnSetUIEnabled");
static_assert(sizeof(OnboardingMenuPresenter_OnSetUIEnabled) == 0x000001, "Wrong size on OnboardingMenuPresenter_OnSetUIEnabled");
static_assert(offsetof(OnboardingMenuPresenter_OnSetUIEnabled, Enabled) == 0x000000, "Member 'OnboardingMenuPresenter_OnSetUIEnabled::Enabled' has a wrong offset!");

// Function DBDUIPresenters.OnboardingTutorialSubPresenter.OnSelectTutorial
// 0x0020 (0x0020 - 0x0000)
struct OnboardingTutorialSubPresenter_OnSelectTutorial final
{
public:
	class FString                                 stepId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 tutorialId;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingTutorialSubPresenter_OnSelectTutorial) == 0x000008, "Wrong alignment on OnboardingTutorialSubPresenter_OnSelectTutorial");
static_assert(sizeof(OnboardingTutorialSubPresenter_OnSelectTutorial) == 0x000020, "Wrong size on OnboardingTutorialSubPresenter_OnSelectTutorial");
static_assert(offsetof(OnboardingTutorialSubPresenter_OnSelectTutorial, stepId) == 0x000000, "Member 'OnboardingTutorialSubPresenter_OnSelectTutorial::stepId' has a wrong offset!");
static_assert(offsetof(OnboardingTutorialSubPresenter_OnSelectTutorial, tutorialId) == 0x000010, "Member 'OnboardingTutorialSubPresenter_OnSelectTutorial::tutorialId' has a wrong offset!");

// Function DBDUIPresenters.PawnObserver.OnPawnControllerSet
// 0x0018 (0x0018 - 0x0000)
struct PawnObserver_OnPawnControllerSet final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            OldController;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            NewController;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnObserver_OnPawnControllerSet) == 0x000008, "Wrong alignment on PawnObserver_OnPawnControllerSet");
static_assert(sizeof(PawnObserver_OnPawnControllerSet) == 0x000018, "Wrong size on PawnObserver_OnPawnControllerSet");
static_assert(offsetof(PawnObserver_OnPawnControllerSet, Pawn) == 0x000000, "Member 'PawnObserver_OnPawnControllerSet::Pawn' has a wrong offset!");
static_assert(offsetof(PawnObserver_OnPawnControllerSet, OldController) == 0x000008, "Member 'PawnObserver_OnPawnControllerSet::OldController' has a wrong offset!");
static_assert(offsetof(PawnObserver_OnPawnControllerSet, NewController) == 0x000010, "Member 'PawnObserver_OnPawnControllerSet::NewController' has a wrong offset!");

// Function DBDUIPresenters.PlayerProfilePresenter.FocusPlayerProfile
// 0x0002 (0x0002 - 0x0000)
struct PlayerProfilePresenter_FocusPlayerProfile final
{
public:
	uint8                                         Filter;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         currencyFilter;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfilePresenter_FocusPlayerProfile) == 0x000001, "Wrong alignment on PlayerProfilePresenter_FocusPlayerProfile");
static_assert(sizeof(PlayerProfilePresenter_FocusPlayerProfile) == 0x000002, "Wrong size on PlayerProfilePresenter_FocusPlayerProfile");
static_assert(offsetof(PlayerProfilePresenter_FocusPlayerProfile, Filter) == 0x000000, "Member 'PlayerProfilePresenter_FocusPlayerProfile::Filter' has a wrong offset!");
static_assert(offsetof(PlayerProfilePresenter_FocusPlayerProfile, currencyFilter) == 0x000001, "Member 'PlayerProfilePresenter_FocusPlayerProfile::currencyFilter' has a wrong offset!");

// Function DBDUIPresenters.PlayerProfilePresenter.OnPlayerProfileCurrencyClicked
// 0x0001 (0x0001 - 0x0000)
struct PlayerProfilePresenter_OnPlayerProfileCurrencyClicked final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfilePresenter_OnPlayerProfileCurrencyClicked) == 0x000001, "Wrong alignment on PlayerProfilePresenter_OnPlayerProfileCurrencyClicked");
static_assert(sizeof(PlayerProfilePresenter_OnPlayerProfileCurrencyClicked) == 0x000001, "Wrong size on PlayerProfilePresenter_OnPlayerProfileCurrencyClicked");
static_assert(offsetof(PlayerProfilePresenter_OnPlayerProfileCurrencyClicked, currencyType) == 0x000000, "Member 'PlayerProfilePresenter_OnPlayerProfileCurrencyClicked::currencyType' has a wrong offset!");

// Function DBDUIPresenters.PlayerProfilePresenter.OnSpecialEventStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct PlayerProfilePresenter_OnSpecialEventStatusChanged final
{
public:
	class FName                                   SpecialEventId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialEventStatus                           specialEventStatus;                                // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerProfilePresenter_OnSpecialEventStatusChanged) == 0x000004, "Wrong alignment on PlayerProfilePresenter_OnSpecialEventStatusChanged");
static_assert(sizeof(PlayerProfilePresenter_OnSpecialEventStatusChanged) == 0x000010, "Wrong size on PlayerProfilePresenter_OnSpecialEventStatusChanged");
static_assert(offsetof(PlayerProfilePresenter_OnSpecialEventStatusChanged, SpecialEventId) == 0x000000, "Member 'PlayerProfilePresenter_OnSpecialEventStatusChanged::SpecialEventId' has a wrong offset!");
static_assert(offsetof(PlayerProfilePresenter_OnSpecialEventStatusChanged, specialEventStatus) == 0x00000C, "Member 'PlayerProfilePresenter_OnSpecialEventStatusChanged::specialEventStatus' has a wrong offset!");

// Function DBDUIPresenters.PlayerProfilePresenter.OnUpdatePlayerProfileCurrencyFilter
// 0x0001 (0x0001 - 0x0000)
struct PlayerProfilePresenter_OnUpdatePlayerProfileCurrencyFilter final
{
public:
	uint8                                         currencyFilter;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfilePresenter_OnUpdatePlayerProfileCurrencyFilter) == 0x000001, "Wrong alignment on PlayerProfilePresenter_OnUpdatePlayerProfileCurrencyFilter");
static_assert(sizeof(PlayerProfilePresenter_OnUpdatePlayerProfileCurrencyFilter) == 0x000001, "Wrong size on PlayerProfilePresenter_OnUpdatePlayerProfileCurrencyFilter");
static_assert(offsetof(PlayerProfilePresenter_OnUpdatePlayerProfileCurrencyFilter, currencyFilter) == 0x000000, "Member 'PlayerProfilePresenter_OnUpdatePlayerProfileCurrencyFilter::currencyFilter' has a wrong offset!");

// Function DBDUIPresenters.PlayerProfilePresenter.OnUpdatePlayerProfileFilter
// 0x0001 (0x0001 - 0x0000)
struct PlayerProfilePresenter_OnUpdatePlayerProfileFilter final
{
public:
	uint8                                         Filter;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfilePresenter_OnUpdatePlayerProfileFilter) == 0x000001, "Wrong alignment on PlayerProfilePresenter_OnUpdatePlayerProfileFilter");
static_assert(sizeof(PlayerProfilePresenter_OnUpdatePlayerProfileFilter) == 0x000001, "Wrong size on PlayerProfilePresenter_OnUpdatePlayerProfileFilter");
static_assert(offsetof(PlayerProfilePresenter_OnUpdatePlayerProfileFilter, Filter) == 0x000000, "Member 'PlayerProfilePresenter_OnUpdatePlayerProfileFilter::Filter' has a wrong offset!");

// Function DBDUIPresenters.PlayerProfilePresenter.OnWalletUpdated
// 0x0010 (0x0010 - 0x0000)
struct PlayerProfilePresenter_OnWalletUpdated final
{
public:
	TArray<struct FShopWalletUpdate>              walletUpdates;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfilePresenter_OnWalletUpdated) == 0x000008, "Wrong alignment on PlayerProfilePresenter_OnWalletUpdated");
static_assert(sizeof(PlayerProfilePresenter_OnWalletUpdated) == 0x000010, "Wrong size on PlayerProfilePresenter_OnWalletUpdated");
static_assert(offsetof(PlayerProfilePresenter_OnWalletUpdated, walletUpdates) == 0x000000, "Member 'PlayerProfilePresenter_OnWalletUpdated::walletUpdates' has a wrong offset!");

// Function DBDUIPresenters.PlayerProfilePresenter.SetSpecialEventCurrency
// 0x0001 (0x0001 - 0x0000)
struct PlayerProfilePresenter_SetSpecialEventCurrency final
{
public:
	ECurrencyType                                 specialEventCurrencyType;                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfilePresenter_SetSpecialEventCurrency) == 0x000001, "Wrong alignment on PlayerProfilePresenter_SetSpecialEventCurrency");
static_assert(sizeof(PlayerProfilePresenter_SetSpecialEventCurrency) == 0x000001, "Wrong size on PlayerProfilePresenter_SetSpecialEventCurrency");
static_assert(offsetof(PlayerProfilePresenter_SetSpecialEventCurrency, specialEventCurrencyType) == 0x000000, "Member 'PlayerProfilePresenter_SetSpecialEventCurrency::specialEventCurrencyType' has a wrong offset!");

// Function DBDUIPresenters.PlayerProfilePresenter.GetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct PlayerProfilePresenter_GetPlayerName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfilePresenter_GetPlayerName) == 0x000008, "Wrong alignment on PlayerProfilePresenter_GetPlayerName");
static_assert(sizeof(PlayerProfilePresenter_GetPlayerName) == 0x000018, "Wrong size on PlayerProfilePresenter_GetPlayerName");
static_assert(offsetof(PlayerProfilePresenter_GetPlayerName, ReturnValue) == 0x000000, "Member 'PlayerProfilePresenter_GetPlayerName::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.PresenterManager.OnLoadingTransition
// 0x0001 (0x0001 - 0x0000)
struct PresenterManager_OnLoadingTransition final
{
public:
	ELoadingTransitionType                        transitionType;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PresenterManager_OnLoadingTransition) == 0x000001, "Wrong alignment on PresenterManager_OnLoadingTransition");
static_assert(sizeof(PresenterManager_OnLoadingTransition) == 0x000001, "Wrong size on PresenterManager_OnLoadingTransition");
static_assert(offsetof(PresenterManager_OnLoadingTransition, transitionType) == 0x000000, "Member 'PresenterManager_OnLoadingTransition::transitionType' has a wrong offset!");

// Function DBDUIPresenters.PresenterManager.OnPlayerStateChanged
// 0x0008 (0x0008 - 0x0000)
struct PresenterManager_OnPlayerStateChanged final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PresenterManager_OnPlayerStateChanged) == 0x000008, "Wrong alignment on PresenterManager_OnPlayerStateChanged");
static_assert(sizeof(PresenterManager_OnPlayerStateChanged) == 0x000008, "Wrong size on PresenterManager_OnPlayerStateChanged");
static_assert(offsetof(PresenterManager_OnPlayerStateChanged, PlayerState) == 0x000000, "Member 'PresenterManager_OnPlayerStateChanged::PlayerState' has a wrong offset!");

// Function DBDUIPresenters.ProfileMenuCustomizationSubPresenter.OnCustomizationSortingChanged
// 0x0004 (0x0004 - 0x0000)
struct ProfileMenuCustomizationSubPresenter_OnCustomizationSortingChanged final
{
public:
	ESortingOption                                itemSorting;                                       // 0x0000(0x0002)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESortingOrder                                 sortingOrder;                                      // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProfileMenuCustomizationSubPresenter_OnCustomizationSortingChanged) == 0x000002, "Wrong alignment on ProfileMenuCustomizationSubPresenter_OnCustomizationSortingChanged");
static_assert(sizeof(ProfileMenuCustomizationSubPresenter_OnCustomizationSortingChanged) == 0x000004, "Wrong size on ProfileMenuCustomizationSubPresenter_OnCustomizationSortingChanged");
static_assert(offsetof(ProfileMenuCustomizationSubPresenter_OnCustomizationSortingChanged, itemSorting) == 0x000000, "Member 'ProfileMenuCustomizationSubPresenter_OnCustomizationSortingChanged::itemSorting' has a wrong offset!");
static_assert(offsetof(ProfileMenuCustomizationSubPresenter_OnCustomizationSortingChanged, sortingOrder) == 0x000002, "Member 'ProfileMenuCustomizationSubPresenter_OnCustomizationSortingChanged::sortingOrder' has a wrong offset!");

// Function DBDUIPresenters.ProfileMenuCustomizationSubPresenter.OnRewardGridItemClicked
// 0x0004 (0x0004 - 0x0000)
struct ProfileMenuCustomizationSubPresenter_OnRewardGridItemClicked final
{
public:
	int32                                         selectedIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuCustomizationSubPresenter_OnRewardGridItemClicked) == 0x000004, "Wrong alignment on ProfileMenuCustomizationSubPresenter_OnRewardGridItemClicked");
static_assert(sizeof(ProfileMenuCustomizationSubPresenter_OnRewardGridItemClicked) == 0x000004, "Wrong size on ProfileMenuCustomizationSubPresenter_OnRewardGridItemClicked");
static_assert(offsetof(ProfileMenuCustomizationSubPresenter_OnRewardGridItemClicked, selectedIndex) == 0x000000, "Member 'ProfileMenuCustomizationSubPresenter_OnRewardGridItemClicked::selectedIndex' has a wrong offset!");

// Function DBDUIPresenters.ProfileMenuCustomizationSubPresenter.OnSearchBarTextChanged
// 0x0010 (0x0010 - 0x0000)
struct ProfileMenuCustomizationSubPresenter_OnSearchBarTextChanged final
{
public:
	class FString                                 enteredText;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuCustomizationSubPresenter_OnSearchBarTextChanged) == 0x000008, "Wrong alignment on ProfileMenuCustomizationSubPresenter_OnSearchBarTextChanged");
static_assert(sizeof(ProfileMenuCustomizationSubPresenter_OnSearchBarTextChanged) == 0x000010, "Wrong size on ProfileMenuCustomizationSubPresenter_OnSearchBarTextChanged");
static_assert(offsetof(ProfileMenuCustomizationSubPresenter_OnSearchBarTextChanged, enteredText) == 0x000000, "Member 'ProfileMenuCustomizationSubPresenter_OnSearchBarTextChanged::enteredText' has a wrong offset!");

// Function DBDUIPresenters.ProfileMenuPresenter.SetMenuState
// 0x0001 (0x0001 - 0x0000)
struct ProfileMenuPresenter_SetMenuState final
{
public:
	EProfileMenuState                             menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuPresenter_SetMenuState) == 0x000001, "Wrong alignment on ProfileMenuPresenter_SetMenuState");
static_assert(sizeof(ProfileMenuPresenter_SetMenuState) == 0x000001, "Wrong size on ProfileMenuPresenter_SetMenuState");
static_assert(offsetof(ProfileMenuPresenter_SetMenuState, menuState) == 0x000000, "Member 'ProfileMenuPresenter_SetMenuState::menuState' has a wrong offset!");

// Function DBDUIPresenters.RiftPresenter.OnDisplayStandRotationDelegate
// 0x0004 (0x0004 - 0x0000)
struct RiftPresenter_OnDisplayStandRotationDelegate final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiftPresenter_OnDisplayStandRotationDelegate) == 0x000004, "Wrong alignment on RiftPresenter_OnDisplayStandRotationDelegate");
static_assert(sizeof(RiftPresenter_OnDisplayStandRotationDelegate) == 0x000004, "Wrong size on RiftPresenter_OnDisplayStandRotationDelegate");
static_assert(offsetof(RiftPresenter_OnDisplayStandRotationDelegate, Distance) == 0x000000, "Member 'RiftPresenter_OnDisplayStandRotationDelegate::Distance' has a wrong offset!");

// Function DBDUIPresenters.RiftPresenter.OnRewardCurrencyClicked
// 0x0001 (0x0001 - 0x0000)
struct RiftPresenter_OnRewardCurrencyClicked final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiftPresenter_OnRewardCurrencyClicked) == 0x000001, "Wrong alignment on RiftPresenter_OnRewardCurrencyClicked");
static_assert(sizeof(RiftPresenter_OnRewardCurrencyClicked) == 0x000001, "Wrong size on RiftPresenter_OnRewardCurrencyClicked");
static_assert(offsetof(RiftPresenter_OnRewardCurrencyClicked, currencyType) == 0x000000, "Member 'RiftPresenter_OnRewardCurrencyClicked::currencyType' has a wrong offset!");

// Function DBDUIPresenters.RiftPresenter.OnRewardItemClicked
// 0x000C (0x000C - 0x0000)
struct RiftPresenter_OnRewardItemClicked final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiftPresenter_OnRewardItemClicked) == 0x000004, "Wrong alignment on RiftPresenter_OnRewardItemClicked");
static_assert(sizeof(RiftPresenter_OnRewardItemClicked) == 0x00000C, "Wrong size on RiftPresenter_OnRewardItemClicked");
static_assert(offsetof(RiftPresenter_OnRewardItemClicked, ItemId) == 0x000000, "Member 'RiftPresenter_OnRewardItemClicked::ItemId' has a wrong offset!");

// Function DBDUIPresenters.RootWidget.GetRootCanvasPanel
// 0x0008 (0x0008 - 0x0000)
struct RootWidget_GetRootCanvasPanel final
{
public:
	class UCanvasPanel*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootWidget_GetRootCanvasPanel) == 0x000008, "Wrong alignment on RootWidget_GetRootCanvasPanel");
static_assert(sizeof(RootWidget_GetRootCanvasPanel) == 0x000008, "Wrong size on RootWidget_GetRootCanvasPanel");
static_assert(offsetof(RootWidget_GetRootCanvasPanel, ReturnValue) == 0x000000, "Member 'RootWidget_GetRootCanvasPanel::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.RootWidget.OnUnfocused
// 0x0004 (0x0004 - 0x0000)
struct RootWidget_OnUnfocused final
{
public:
	float                                         Opacity;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootWidget_OnUnfocused) == 0x000004, "Wrong alignment on RootWidget_OnUnfocused");
static_assert(sizeof(RootWidget_OnUnfocused) == 0x000004, "Wrong size on RootWidget_OnUnfocused");
static_assert(offsetof(RootWidget_OnUnfocused, Opacity) == 0x000000, "Member 'RootWidget_OnUnfocused::Opacity' has a wrong offset!");

// Function DBDUIPresenters.SettingsMatchDetailsSubPresenter.OnPlayerInfoClicked
// 0x0010 (0x0010 - 0x0000)
struct SettingsMatchDetailsSubPresenter_OnPlayerInfoClicked final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMatchDetailsSubPresenter_OnPlayerInfoClicked) == 0x000008, "Wrong alignment on SettingsMatchDetailsSubPresenter_OnPlayerInfoClicked");
static_assert(sizeof(SettingsMatchDetailsSubPresenter_OnPlayerInfoClicked) == 0x000010, "Wrong size on SettingsMatchDetailsSubPresenter_OnPlayerInfoClicked");
static_assert(offsetof(SettingsMatchDetailsSubPresenter_OnPlayerInfoClicked, PlayerId) == 0x000000, "Member 'SettingsMatchDetailsSubPresenter_OnPlayerInfoClicked::PlayerId' has a wrong offset!");

// Function DBDUIPresenters.SettingsPresenter.OnSetScrollPromptVisibility
// 0x0001 (0x0001 - 0x0000)
struct SettingsPresenter_OnSetScrollPromptVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPresenter_OnSetScrollPromptVisibility) == 0x000001, "Wrong alignment on SettingsPresenter_OnSetScrollPromptVisibility");
static_assert(sizeof(SettingsPresenter_OnSetScrollPromptVisibility) == 0x000001, "Wrong size on SettingsPresenter_OnSetScrollPromptVisibility");
static_assert(offsetof(SettingsPresenter_OnSetScrollPromptVisibility, IsVisible) == 0x000000, "Member 'SettingsPresenter_OnSetScrollPromptVisibility::IsVisible' has a wrong offset!");

// Function DBDUIPresenters.SettingsPresenter.OnTabEntered
// 0x0008 (0x0008 - 0x0000)
struct SettingsPresenter_OnTabEntered final
{
public:
	EOverlayTabs                                  Tab;                                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ESettingsCategory                             category;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsPresenter_OnTabEntered) == 0x000004, "Wrong alignment on SettingsPresenter_OnTabEntered");
static_assert(sizeof(SettingsPresenter_OnTabEntered) == 0x000008, "Wrong size on SettingsPresenter_OnTabEntered");
static_assert(offsetof(SettingsPresenter_OnTabEntered, Tab) == 0x000000, "Member 'SettingsPresenter_OnTabEntered::Tab' has a wrong offset!");
static_assert(offsetof(SettingsPresenter_OnTabEntered, category) == 0x000004, "Member 'SettingsPresenter_OnTabEntered::category' has a wrong offset!");

// Function DBDUIPresenters.ShrineOfSecretsPresenter.OnItemBuyCompleted
// 0x0001 (0x0001 - 0x0000)
struct ShrineOfSecretsPresenter_OnItemBuyCompleted final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShrineOfSecretsPresenter_OnItemBuyCompleted) == 0x000001, "Wrong alignment on ShrineOfSecretsPresenter_OnItemBuyCompleted");
static_assert(sizeof(ShrineOfSecretsPresenter_OnItemBuyCompleted) == 0x000001, "Wrong size on ShrineOfSecretsPresenter_OnItemBuyCompleted");
static_assert(offsetof(ShrineOfSecretsPresenter_OnItemBuyCompleted, Success) == 0x000000, "Member 'ShrineOfSecretsPresenter_OnItemBuyCompleted::Success' has a wrong offset!");

// Function DBDUIPresenters.ShrineOfSecretsPresenter.OnPurchaseButtonClicked
// 0x0208 (0x0208 - 0x0000)
struct ShrineOfSecretsPresenter_OnPurchaseButtonClicked final
{
public:
	struct FShrineOfSecretsItemViewData           ShrineOfSecretsItemViewData;                       // 0x0000(0x0208)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShrineOfSecretsPresenter_OnPurchaseButtonClicked) == 0x000008, "Wrong alignment on ShrineOfSecretsPresenter_OnPurchaseButtonClicked");
static_assert(sizeof(ShrineOfSecretsPresenter_OnPurchaseButtonClicked) == 0x000208, "Wrong size on ShrineOfSecretsPresenter_OnPurchaseButtonClicked");
static_assert(offsetof(ShrineOfSecretsPresenter_OnPurchaseButtonClicked, ShrineOfSecretsItemViewData) == 0x000000, "Member 'ShrineOfSecretsPresenter_OnPurchaseButtonClicked::ShrineOfSecretsItemViewData' has a wrong offset!");

// Function DBDUIPresenters.StoreSubPresenter.OnSubTabSelected
// 0x0004 (0x0004 - 0x0000)
struct StoreSubPresenter_OnSubTabSelected final
{
public:
	int32                                         subTabId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSubPresenter_OnSubTabSelected) == 0x000004, "Wrong alignment on StoreSubPresenter_OnSubTabSelected");
static_assert(sizeof(StoreSubPresenter_OnSubTabSelected) == 0x000004, "Wrong size on StoreSubPresenter_OnSubTabSelected");
static_assert(offsetof(StoreSubPresenter_OnSubTabSelected, subTabId) == 0x000000, "Member 'StoreSubPresenter_OnSubTabSelected::subTabId' has a wrong offset!");

// Function DBDUIPresenters.StoreSubPresenter.OnWalletUpdated
// 0x0010 (0x0010 - 0x0000)
struct StoreSubPresenter_OnWalletUpdated final
{
public:
	TArray<struct FShopWalletUpdate>              walletUpdates;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSubPresenter_OnWalletUpdated) == 0x000008, "Wrong alignment on StoreSubPresenter_OnWalletUpdated");
static_assert(sizeof(StoreSubPresenter_OnWalletUpdated) == 0x000010, "Wrong size on StoreSubPresenter_OnWalletUpdated");
static_assert(offsetof(StoreSubPresenter_OnWalletUpdated, walletUpdates) == 0x000000, "Member 'StoreSubPresenter_OnWalletUpdated::walletUpdates' has a wrong offset!");

// Function DBDUIPresenters.StoreSubPresenter.SetItemSeen
// 0x0010 (0x0010 - 0x0000)
struct StoreSubPresenter_SetItemSeen final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSubPresenter_SetItemSeen) == 0x000008, "Wrong alignment on StoreSubPresenter_SetItemSeen");
static_assert(sizeof(StoreSubPresenter_SetItemSeen) == 0x000010, "Wrong size on StoreSubPresenter_SetItemSeen");
static_assert(offsetof(StoreSubPresenter_SetItemSeen, ItemId) == 0x000000, "Member 'StoreSubPresenter_SetItemSeen::ItemId' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnAnimationPreviewComplete
// 0x0078 (0x0078 - 0x0000)
struct StoreCharactersSubPresenter_OnAnimationPreviewComplete final
{
public:
	class UAnimationPreviewSubsystem*             AnimationPreviewSubsystem;                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimationPreviewRequest               Request;                                           // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          completedSuccessfully;                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreCharactersSubPresenter_OnAnimationPreviewComplete) == 0x000008, "Wrong alignment on StoreCharactersSubPresenter_OnAnimationPreviewComplete");
static_assert(sizeof(StoreCharactersSubPresenter_OnAnimationPreviewComplete) == 0x000078, "Wrong size on StoreCharactersSubPresenter_OnAnimationPreviewComplete");
static_assert(offsetof(StoreCharactersSubPresenter_OnAnimationPreviewComplete, AnimationPreviewSubsystem) == 0x000000, "Member 'StoreCharactersSubPresenter_OnAnimationPreviewComplete::AnimationPreviewSubsystem' has a wrong offset!");
static_assert(offsetof(StoreCharactersSubPresenter_OnAnimationPreviewComplete, Request) == 0x000008, "Member 'StoreCharactersSubPresenter_OnAnimationPreviewComplete::Request' has a wrong offset!");
static_assert(offsetof(StoreCharactersSubPresenter_OnAnimationPreviewComplete, completedSuccessfully) == 0x000070, "Member 'StoreCharactersSubPresenter_OnAnimationPreviewComplete::completedSuccessfully' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnCategorySelected
// 0x0001 (0x0001 - 0x0000)
struct StoreCharactersSubPresenter_OnCategorySelected final
{
public:
	ECustomizationCategory                        category;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSubPresenter_OnCategorySelected) == 0x000001, "Wrong alignment on StoreCharactersSubPresenter_OnCategorySelected");
static_assert(sizeof(StoreCharactersSubPresenter_OnCategorySelected) == 0x000001, "Wrong size on StoreCharactersSubPresenter_OnCategorySelected");
static_assert(offsetof(StoreCharactersSubPresenter_OnCategorySelected, category) == 0x000000, "Member 'StoreCharactersSubPresenter_OnCategorySelected::category' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnCategorySelectedAgain
// 0x0001 (0x0001 - 0x0000)
struct StoreCharactersSubPresenter_OnCategorySelectedAgain final
{
public:
	ECustomizationCategory                        category;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSubPresenter_OnCategorySelectedAgain) == 0x000001, "Wrong alignment on StoreCharactersSubPresenter_OnCategorySelectedAgain");
static_assert(sizeof(StoreCharactersSubPresenter_OnCategorySelectedAgain) == 0x000001, "Wrong size on StoreCharactersSubPresenter_OnCategorySelectedAgain");
static_assert(offsetof(StoreCharactersSubPresenter_OnCategorySelectedAgain, category) == 0x000000, "Member 'StoreCharactersSubPresenter_OnCategorySelectedAgain::category' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnCharacterSelected
// 0x0004 (0x0004 - 0x0000)
struct StoreCharactersSubPresenter_OnCharacterSelected final
{
public:
	int32                                         characterIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSubPresenter_OnCharacterSelected) == 0x000004, "Wrong alignment on StoreCharactersSubPresenter_OnCharacterSelected");
static_assert(sizeof(StoreCharactersSubPresenter_OnCharacterSelected) == 0x000004, "Wrong size on StoreCharactersSubPresenter_OnCharacterSelected");
static_assert(offsetof(StoreCharactersSubPresenter_OnCharacterSelected, characterIndex) == 0x000000, "Member 'StoreCharactersSubPresenter_OnCharacterSelected::characterIndex' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnCharactersFiltersChanged
// 0x0060 (0x0060 - 0x0000)
struct StoreCharactersSubPresenter_OnCharactersFiltersChanged final
{
public:
	struct FStoreCharactersFiltersData            charactersFilterData;                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSubPresenter_OnCharactersFiltersChanged) == 0x000008, "Wrong alignment on StoreCharactersSubPresenter_OnCharactersFiltersChanged");
static_assert(sizeof(StoreCharactersSubPresenter_OnCharactersFiltersChanged) == 0x000060, "Wrong size on StoreCharactersSubPresenter_OnCharactersFiltersChanged");
static_assert(offsetof(StoreCharactersSubPresenter_OnCharactersFiltersChanged, charactersFilterData) == 0x000000, "Member 'StoreCharactersSubPresenter_OnCharactersFiltersChanged::charactersFilterData' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnCharactersSearchBarTextChanged
// 0x0010 (0x0010 - 0x0000)
struct StoreCharactersSubPresenter_OnCharactersSearchBarTextChanged final
{
public:
	class FString                                 enteredText;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSubPresenter_OnCharactersSearchBarTextChanged) == 0x000008, "Wrong alignment on StoreCharactersSubPresenter_OnCharactersSearchBarTextChanged");
static_assert(sizeof(StoreCharactersSubPresenter_OnCharactersSearchBarTextChanged) == 0x000010, "Wrong size on StoreCharactersSubPresenter_OnCharactersSearchBarTextChanged");
static_assert(offsetof(StoreCharactersSubPresenter_OnCharactersSearchBarTextChanged, enteredText) == 0x000000, "Member 'StoreCharactersSubPresenter_OnCharactersSearchBarTextChanged::enteredText' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnCharactersSortingChanged
// 0x0004 (0x0004 - 0x0000)
struct StoreCharactersSubPresenter_OnCharactersSortingChanged final
{
public:
	ESortingOption                                SortingOption;                                     // 0x0000(0x0002)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESortingOrder                                 sortingOrder;                                      // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreCharactersSubPresenter_OnCharactersSortingChanged) == 0x000002, "Wrong alignment on StoreCharactersSubPresenter_OnCharactersSortingChanged");
static_assert(sizeof(StoreCharactersSubPresenter_OnCharactersSortingChanged) == 0x000004, "Wrong size on StoreCharactersSubPresenter_OnCharactersSortingChanged");
static_assert(offsetof(StoreCharactersSubPresenter_OnCharactersSortingChanged, SortingOption) == 0x000000, "Member 'StoreCharactersSubPresenter_OnCharactersSortingChanged::SortingOption' has a wrong offset!");
static_assert(offsetof(StoreCharactersSubPresenter_OnCharactersSortingChanged, sortingOrder) == 0x000002, "Member 'StoreCharactersSubPresenter_OnCharactersSortingChanged::sortingOrder' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnCharacterUnlockCompleted
// 0x0001 (0x0001 - 0x0000)
struct StoreCharactersSubPresenter_OnCharacterUnlockCompleted final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSubPresenter_OnCharacterUnlockCompleted) == 0x000001, "Wrong alignment on StoreCharactersSubPresenter_OnCharacterUnlockCompleted");
static_assert(sizeof(StoreCharactersSubPresenter_OnCharacterUnlockCompleted) == 0x000001, "Wrong size on StoreCharactersSubPresenter_OnCharacterUnlockCompleted");
static_assert(offsetof(StoreCharactersSubPresenter_OnCharacterUnlockCompleted, Success) == 0x000000, "Member 'StoreCharactersSubPresenter_OnCharacterUnlockCompleted::Success' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnCharmSlotSelected
// 0x0004 (0x0004 - 0x0000)
struct StoreCharactersSubPresenter_OnCharmSlotSelected final
{
public:
	int32                                         slotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSubPresenter_OnCharmSlotSelected) == 0x000004, "Wrong alignment on StoreCharactersSubPresenter_OnCharmSlotSelected");
static_assert(sizeof(StoreCharactersSubPresenter_OnCharmSlotSelected) == 0x000004, "Wrong size on StoreCharactersSubPresenter_OnCharmSlotSelected");
static_assert(offsetof(StoreCharactersSubPresenter_OnCharmSlotSelected, slotIndex) == 0x000000, "Member 'StoreCharactersSubPresenter_OnCharmSlotSelected::slotIndex' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnCustomizationSearchBarTextChanged
// 0x0010 (0x0010 - 0x0000)
struct StoreCharactersSubPresenter_OnCustomizationSearchBarTextChanged final
{
public:
	class FString                                 enteredText;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSubPresenter_OnCustomizationSearchBarTextChanged) == 0x000008, "Wrong alignment on StoreCharactersSubPresenter_OnCustomizationSearchBarTextChanged");
static_assert(sizeof(StoreCharactersSubPresenter_OnCustomizationSearchBarTextChanged) == 0x000010, "Wrong size on StoreCharactersSubPresenter_OnCustomizationSearchBarTextChanged");
static_assert(offsetof(StoreCharactersSubPresenter_OnCustomizationSearchBarTextChanged, enteredText) == 0x000000, "Member 'StoreCharactersSubPresenter_OnCustomizationSearchBarTextChanged::enteredText' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnCustomizationSelected
// 0x000C (0x000C - 0x0000)
struct StoreCharactersSubPresenter_OnCustomizationSelected final
{
public:
	class FName                                   customizationId;                                   // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSubPresenter_OnCustomizationSelected) == 0x000004, "Wrong alignment on StoreCharactersSubPresenter_OnCustomizationSelected");
static_assert(sizeof(StoreCharactersSubPresenter_OnCustomizationSelected) == 0x00000C, "Wrong size on StoreCharactersSubPresenter_OnCustomizationSelected");
static_assert(offsetof(StoreCharactersSubPresenter_OnCustomizationSelected, customizationId) == 0x000000, "Member 'StoreCharactersSubPresenter_OnCustomizationSelected::customizationId' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnCustomizationSelectedAgain
// 0x000C (0x000C - 0x0000)
struct StoreCharactersSubPresenter_OnCustomizationSelectedAgain final
{
public:
	class FName                                   customizationId;                                   // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSubPresenter_OnCustomizationSelectedAgain) == 0x000004, "Wrong alignment on StoreCharactersSubPresenter_OnCustomizationSelectedAgain");
static_assert(sizeof(StoreCharactersSubPresenter_OnCustomizationSelectedAgain) == 0x00000C, "Wrong size on StoreCharactersSubPresenter_OnCustomizationSelectedAgain");
static_assert(offsetof(StoreCharactersSubPresenter_OnCustomizationSelectedAgain, customizationId) == 0x000000, "Member 'StoreCharactersSubPresenter_OnCustomizationSelectedAgain::customizationId' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnCustomizationsFiltersChanged
// 0x0060 (0x0060 - 0x0000)
struct StoreCharactersSubPresenter_OnCustomizationsFiltersChanged final
{
public:
	struct FStoreCharactersFiltersData            customizationsFilterData;                          // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSubPresenter_OnCustomizationsFiltersChanged) == 0x000008, "Wrong alignment on StoreCharactersSubPresenter_OnCustomizationsFiltersChanged");
static_assert(sizeof(StoreCharactersSubPresenter_OnCustomizationsFiltersChanged) == 0x000060, "Wrong size on StoreCharactersSubPresenter_OnCustomizationsFiltersChanged");
static_assert(offsetof(StoreCharactersSubPresenter_OnCustomizationsFiltersChanged, customizationsFilterData) == 0x000000, "Member 'StoreCharactersSubPresenter_OnCustomizationsFiltersChanged::customizationsFilterData' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnCustomizationsSortingChanged
// 0x0004 (0x0004 - 0x0000)
struct StoreCharactersSubPresenter_OnCustomizationsSortingChanged final
{
public:
	ESortingOption                                SortingOption;                                     // 0x0000(0x0002)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESortingOrder                                 sortingOrder;                                      // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreCharactersSubPresenter_OnCustomizationsSortingChanged) == 0x000002, "Wrong alignment on StoreCharactersSubPresenter_OnCustomizationsSortingChanged");
static_assert(sizeof(StoreCharactersSubPresenter_OnCustomizationsSortingChanged) == 0x000004, "Wrong size on StoreCharactersSubPresenter_OnCustomizationsSortingChanged");
static_assert(offsetof(StoreCharactersSubPresenter_OnCustomizationsSortingChanged, SortingOption) == 0x000000, "Member 'StoreCharactersSubPresenter_OnCustomizationsSortingChanged::SortingOption' has a wrong offset!");
static_assert(offsetof(StoreCharactersSubPresenter_OnCustomizationsSortingChanged, sortingOrder) == 0x000002, "Member 'StoreCharactersSubPresenter_OnCustomizationsSortingChanged::sortingOrder' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnItemUnlockClicked
// 0x0001 (0x0001 - 0x0000)
struct StoreCharactersSubPresenter_OnItemUnlockClicked final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSubPresenter_OnItemUnlockClicked) == 0x000001, "Wrong alignment on StoreCharactersSubPresenter_OnItemUnlockClicked");
static_assert(sizeof(StoreCharactersSubPresenter_OnItemUnlockClicked) == 0x000001, "Wrong size on StoreCharactersSubPresenter_OnItemUnlockClicked");
static_assert(offsetof(StoreCharactersSubPresenter_OnItemUnlockClicked, currencyType) == 0x000000, "Member 'StoreCharactersSubPresenter_OnItemUnlockClicked::currencyType' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.OnPresetSelected
// 0x0004 (0x0004 - 0x0000)
struct StoreCharactersSubPresenter_OnPresetSelected final
{
public:
	int32                                         presetId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSubPresenter_OnPresetSelected) == 0x000004, "Wrong alignment on StoreCharactersSubPresenter_OnPresetSelected");
static_assert(sizeof(StoreCharactersSubPresenter_OnPresetSelected) == 0x000004, "Wrong size on StoreCharactersSubPresenter_OnPresetSelected");
static_assert(offsetof(StoreCharactersSubPresenter_OnPresetSelected, presetId) == 0x000000, "Member 'StoreCharactersSubPresenter_OnPresetSelected::presetId' has a wrong offset!");

// Function DBDUIPresenters.StoreCharactersSubPresenter.PlayMoriAnimation
// 0x0001 (0x0001 - 0x0000)
struct StoreCharactersSubPresenter_PlayMoriAnimation final
{
public:
	EMoriPreviewVariant                           moriPreviewVariant;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSubPresenter_PlayMoriAnimation) == 0x000001, "Wrong alignment on StoreCharactersSubPresenter_PlayMoriAnimation");
static_assert(sizeof(StoreCharactersSubPresenter_PlayMoriAnimation) == 0x000001, "Wrong size on StoreCharactersSubPresenter_PlayMoriAnimation");
static_assert(offsetof(StoreCharactersSubPresenter_PlayMoriAnimation, moriPreviewVariant) == 0x000000, "Member 'StoreCharactersSubPresenter_PlayMoriAnimation::moriPreviewVariant' has a wrong offset!");

// Function DBDUIPresenters.StoreCollectionsCustomizationsSubPresenter.OnAnimationPreviewComplete
// 0x0078 (0x0078 - 0x0000)
struct StoreCollectionsCustomizationsSubPresenter_OnAnimationPreviewComplete final
{
public:
	class UAnimationPreviewSubsystem*             AnimationPreviewSubsystem;                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimationPreviewRequest               Request;                                           // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          completedSuccessfully;                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreCollectionsCustomizationsSubPresenter_OnAnimationPreviewComplete) == 0x000008, "Wrong alignment on StoreCollectionsCustomizationsSubPresenter_OnAnimationPreviewComplete");
static_assert(sizeof(StoreCollectionsCustomizationsSubPresenter_OnAnimationPreviewComplete) == 0x000078, "Wrong size on StoreCollectionsCustomizationsSubPresenter_OnAnimationPreviewComplete");
static_assert(offsetof(StoreCollectionsCustomizationsSubPresenter_OnAnimationPreviewComplete, AnimationPreviewSubsystem) == 0x000000, "Member 'StoreCollectionsCustomizationsSubPresenter_OnAnimationPreviewComplete::AnimationPreviewSubsystem' has a wrong offset!");
static_assert(offsetof(StoreCollectionsCustomizationsSubPresenter_OnAnimationPreviewComplete, Request) == 0x000008, "Member 'StoreCollectionsCustomizationsSubPresenter_OnAnimationPreviewComplete::Request' has a wrong offset!");
static_assert(offsetof(StoreCollectionsCustomizationsSubPresenter_OnAnimationPreviewComplete, completedSuccessfully) == 0x000070, "Member 'StoreCollectionsCustomizationsSubPresenter_OnAnimationPreviewComplete::completedSuccessfully' has a wrong offset!");

// Function DBDUIPresenters.StoreCollectionsCustomizationsSubPresenter.OnCustomizationSelected
// 0x000C (0x000C - 0x0000)
struct StoreCollectionsCustomizationsSubPresenter_OnCustomizationSelected final
{
public:
	class FName                                   customizationId;                                   // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsCustomizationsSubPresenter_OnCustomizationSelected) == 0x000004, "Wrong alignment on StoreCollectionsCustomizationsSubPresenter_OnCustomizationSelected");
static_assert(sizeof(StoreCollectionsCustomizationsSubPresenter_OnCustomizationSelected) == 0x00000C, "Wrong size on StoreCollectionsCustomizationsSubPresenter_OnCustomizationSelected");
static_assert(offsetof(StoreCollectionsCustomizationsSubPresenter_OnCustomizationSelected, customizationId) == 0x000000, "Member 'StoreCollectionsCustomizationsSubPresenter_OnCustomizationSelected::customizationId' has a wrong offset!");

// Function DBDUIPresenters.StoreCollectionsCustomizationsSubPresenter.OnCustomizationUnlockClicked
// 0x0001 (0x0001 - 0x0000)
struct StoreCollectionsCustomizationsSubPresenter_OnCustomizationUnlockClicked final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsCustomizationsSubPresenter_OnCustomizationUnlockClicked) == 0x000001, "Wrong alignment on StoreCollectionsCustomizationsSubPresenter_OnCustomizationUnlockClicked");
static_assert(sizeof(StoreCollectionsCustomizationsSubPresenter_OnCustomizationUnlockClicked) == 0x000001, "Wrong size on StoreCollectionsCustomizationsSubPresenter_OnCustomizationUnlockClicked");
static_assert(offsetof(StoreCollectionsCustomizationsSubPresenter_OnCustomizationUnlockClicked, currencyType) == 0x000000, "Member 'StoreCollectionsCustomizationsSubPresenter_OnCustomizationUnlockClicked::currencyType' has a wrong offset!");

// Function DBDUIPresenters.StoreCollectionsCustomizationsSubPresenter.OnFiltersChanged
// 0x0060 (0x0060 - 0x0000)
struct StoreCollectionsCustomizationsSubPresenter_OnFiltersChanged final
{
public:
	struct FStoreCharactersFiltersData            storeFiltersData;                                  // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsCustomizationsSubPresenter_OnFiltersChanged) == 0x000008, "Wrong alignment on StoreCollectionsCustomizationsSubPresenter_OnFiltersChanged");
static_assert(sizeof(StoreCollectionsCustomizationsSubPresenter_OnFiltersChanged) == 0x000060, "Wrong size on StoreCollectionsCustomizationsSubPresenter_OnFiltersChanged");
static_assert(offsetof(StoreCollectionsCustomizationsSubPresenter_OnFiltersChanged, storeFiltersData) == 0x000000, "Member 'StoreCollectionsCustomizationsSubPresenter_OnFiltersChanged::storeFiltersData' has a wrong offset!");

// Function DBDUIPresenters.StoreCollectionsCustomizationsSubPresenter.OnSearchBarTextChanged
// 0x0010 (0x0010 - 0x0000)
struct StoreCollectionsCustomizationsSubPresenter_OnSearchBarTextChanged final
{
public:
	class FString                                 enteredText;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsCustomizationsSubPresenter_OnSearchBarTextChanged) == 0x000008, "Wrong alignment on StoreCollectionsCustomizationsSubPresenter_OnSearchBarTextChanged");
static_assert(sizeof(StoreCollectionsCustomizationsSubPresenter_OnSearchBarTextChanged) == 0x000010, "Wrong size on StoreCollectionsCustomizationsSubPresenter_OnSearchBarTextChanged");
static_assert(offsetof(StoreCollectionsCustomizationsSubPresenter_OnSearchBarTextChanged, enteredText) == 0x000000, "Member 'StoreCollectionsCustomizationsSubPresenter_OnSearchBarTextChanged::enteredText' has a wrong offset!");

// Function DBDUIPresenters.StoreCollectionsCustomizationsSubPresenter.OnSortingChanged
// 0x0004 (0x0004 - 0x0000)
struct StoreCollectionsCustomizationsSubPresenter_OnSortingChanged final
{
public:
	ESortingOption                                SortingOption;                                     // 0x0000(0x0002)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESortingOrder                                 sortingOrder;                                      // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreCollectionsCustomizationsSubPresenter_OnSortingChanged) == 0x000002, "Wrong alignment on StoreCollectionsCustomizationsSubPresenter_OnSortingChanged");
static_assert(sizeof(StoreCollectionsCustomizationsSubPresenter_OnSortingChanged) == 0x000004, "Wrong size on StoreCollectionsCustomizationsSubPresenter_OnSortingChanged");
static_assert(offsetof(StoreCollectionsCustomizationsSubPresenter_OnSortingChanged, SortingOption) == 0x000000, "Member 'StoreCollectionsCustomizationsSubPresenter_OnSortingChanged::SortingOption' has a wrong offset!");
static_assert(offsetof(StoreCollectionsCustomizationsSubPresenter_OnSortingChanged, sortingOrder) == 0x000002, "Member 'StoreCollectionsCustomizationsSubPresenter_OnSortingChanged::sortingOrder' has a wrong offset!");

// Function DBDUIPresenters.StoreCollectionsCustomizationsSubPresenter.PlayMoriAnimation
// 0x0001 (0x0001 - 0x0000)
struct StoreCollectionsCustomizationsSubPresenter_PlayMoriAnimation final
{
public:
	EMoriPreviewVariant                           moriPreviewVariant;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsCustomizationsSubPresenter_PlayMoriAnimation) == 0x000001, "Wrong alignment on StoreCollectionsCustomizationsSubPresenter_PlayMoriAnimation");
static_assert(sizeof(StoreCollectionsCustomizationsSubPresenter_PlayMoriAnimation) == 0x000001, "Wrong size on StoreCollectionsCustomizationsSubPresenter_PlayMoriAnimation");
static_assert(offsetof(StoreCollectionsCustomizationsSubPresenter_PlayMoriAnimation, moriPreviewVariant) == 0x000000, "Member 'StoreCollectionsCustomizationsSubPresenter_PlayMoriAnimation::moriPreviewVariant' has a wrong offset!");

// Function DBDUIPresenters.StoreCollectionsCustomizationsSubPresenter.UpdateDisplayingCustomizations
// 0x0001 (0x0001 - 0x0000)
struct StoreCollectionsCustomizationsSubPresenter_UpdateDisplayingCustomizations final
{
public:
	bool                                          ScrollToSelectedItem;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsCustomizationsSubPresenter_UpdateDisplayingCustomizations) == 0x000001, "Wrong alignment on StoreCollectionsCustomizationsSubPresenter_UpdateDisplayingCustomizations");
static_assert(sizeof(StoreCollectionsCustomizationsSubPresenter_UpdateDisplayingCustomizations) == 0x000001, "Wrong size on StoreCollectionsCustomizationsSubPresenter_UpdateDisplayingCustomizations");
static_assert(offsetof(StoreCollectionsCustomizationsSubPresenter_UpdateDisplayingCustomizations, ScrollToSelectedItem) == 0x000000, "Member 'StoreCollectionsCustomizationsSubPresenter_UpdateDisplayingCustomizations::ScrollToSelectedItem' has a wrong offset!");

// Function DBDUIPresenters.StoreCollectionsListSubPresenter.OnCollectionClicked
// 0x0008 (0x0008 - 0x0000)
struct StoreCollectionsListSubPresenter_OnCollectionClicked final
{
public:
	const class UStoreCollectionViewData*         Collection;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsListSubPresenter_OnCollectionClicked) == 0x000008, "Wrong alignment on StoreCollectionsListSubPresenter_OnCollectionClicked");
static_assert(sizeof(StoreCollectionsListSubPresenter_OnCollectionClicked) == 0x000008, "Wrong size on StoreCollectionsListSubPresenter_OnCollectionClicked");
static_assert(offsetof(StoreCollectionsListSubPresenter_OnCollectionClicked, Collection) == 0x000000, "Member 'StoreCollectionsListSubPresenter_OnCollectionClicked::Collection' has a wrong offset!");

// Function DBDUIPresenters.StoreCollectionsListSubPresenter.UpdateCollectionsBySearch
// 0x0010 (0x0010 - 0x0000)
struct StoreCollectionsListSubPresenter_UpdateCollectionsBySearch final
{
public:
	class FString                                 SearchString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsListSubPresenter_UpdateCollectionsBySearch) == 0x000008, "Wrong alignment on StoreCollectionsListSubPresenter_UpdateCollectionsBySearch");
static_assert(sizeof(StoreCollectionsListSubPresenter_UpdateCollectionsBySearch) == 0x000010, "Wrong size on StoreCollectionsListSubPresenter_UpdateCollectionsBySearch");
static_assert(offsetof(StoreCollectionsListSubPresenter_UpdateCollectionsBySearch, SearchString) == 0x000000, "Member 'StoreCollectionsListSubPresenter_UpdateCollectionsBySearch::SearchString' has a wrong offset!");

// Function DBDUIPresenters.StoreCollectionsSubPresenter.OnBackActionLabelChangeRequested
// 0x0018 (0x0018 - 0x0000)
struct StoreCollectionsSubPresenter_OnBackActionLabelChangeRequested final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsSubPresenter_OnBackActionLabelChangeRequested) == 0x000008, "Wrong alignment on StoreCollectionsSubPresenter_OnBackActionLabelChangeRequested");
static_assert(sizeof(StoreCollectionsSubPresenter_OnBackActionLabelChangeRequested) == 0x000018, "Wrong size on StoreCollectionsSubPresenter_OnBackActionLabelChangeRequested");
static_assert(offsetof(StoreCollectionsSubPresenter_OnBackActionLabelChangeRequested, Text) == 0x000000, "Member 'StoreCollectionsSubPresenter_OnBackActionLabelChangeRequested::Text' has a wrong offset!");

// Function DBDUIPresenters.StoreCollectionsSubPresenter.OnCollectionClicked
// 0x0008 (0x0008 - 0x0000)
struct StoreCollectionsSubPresenter_OnCollectionClicked final
{
public:
	const class UStoreCollectionViewData*         Collection;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsSubPresenter_OnCollectionClicked) == 0x000008, "Wrong alignment on StoreCollectionsSubPresenter_OnCollectionClicked");
static_assert(sizeof(StoreCollectionsSubPresenter_OnCollectionClicked) == 0x000008, "Wrong size on StoreCollectionsSubPresenter_OnCollectionClicked");
static_assert(offsetof(StoreCollectionsSubPresenter_OnCollectionClicked, Collection) == 0x000000, "Member 'StoreCollectionsSubPresenter_OnCollectionClicked::Collection' has a wrong offset!");

// Function DBDUIPresenters.StoreCollectionsSubPresenter.OnStartSubPresenterAsyncOperation
// 0x0008 (0x0008 - 0x0000)
struct StoreCollectionsSubPresenter_OnStartSubPresenterAsyncOperation final
{
public:
	class USubPresenter*                          SubPresenter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsSubPresenter_OnStartSubPresenterAsyncOperation) == 0x000008, "Wrong alignment on StoreCollectionsSubPresenter_OnStartSubPresenterAsyncOperation");
static_assert(sizeof(StoreCollectionsSubPresenter_OnStartSubPresenterAsyncOperation) == 0x000008, "Wrong size on StoreCollectionsSubPresenter_OnStartSubPresenterAsyncOperation");
static_assert(offsetof(StoreCollectionsSubPresenter_OnStartSubPresenterAsyncOperation, SubPresenter) == 0x000000, "Member 'StoreCollectionsSubPresenter_OnStartSubPresenterAsyncOperation::SubPresenter' has a wrong offset!");

// Function DBDUIPresenters.StoreCollectionsSubPresenter.OnStopSubPresenterAsyncOperation
// 0x0008 (0x0008 - 0x0000)
struct StoreCollectionsSubPresenter_OnStopSubPresenterAsyncOperation final
{
public:
	class USubPresenter*                          SubPresenter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsSubPresenter_OnStopSubPresenterAsyncOperation) == 0x000008, "Wrong alignment on StoreCollectionsSubPresenter_OnStopSubPresenterAsyncOperation");
static_assert(sizeof(StoreCollectionsSubPresenter_OnStopSubPresenterAsyncOperation) == 0x000008, "Wrong size on StoreCollectionsSubPresenter_OnStopSubPresenterAsyncOperation");
static_assert(offsetof(StoreCollectionsSubPresenter_OnStopSubPresenterAsyncOperation, SubPresenter) == 0x000000, "Member 'StoreCollectionsSubPresenter_OnStopSubPresenterAsyncOperation::SubPresenter' has a wrong offset!");

// Function DBDUIPresenters.StoreFeaturedSubPresenter.OnBackendStoreDataReceived
// 0x0001 (0x0001 - 0x0000)
struct StoreFeaturedSubPresenter_OnBackendStoreDataReceived final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreFeaturedSubPresenter_OnBackendStoreDataReceived) == 0x000001, "Wrong alignment on StoreFeaturedSubPresenter_OnBackendStoreDataReceived");
static_assert(sizeof(StoreFeaturedSubPresenter_OnBackendStoreDataReceived) == 0x000001, "Wrong size on StoreFeaturedSubPresenter_OnBackendStoreDataReceived");
static_assert(offsetof(StoreFeaturedSubPresenter_OnBackendStoreDataReceived, Success) == 0x000000, "Member 'StoreFeaturedSubPresenter_OnBackendStoreDataReceived::Success' has a wrong offset!");

// Function DBDUIPresenters.StoreFeaturedSubPresenter.OnFeaturedContentClicked
// 0x01A8 (0x01A8 - 0x0000)
struct StoreFeaturedSubPresenter_OnFeaturedContentClicked final
{
public:
	struct FStoreContentViewData                  StoreContentViewData;                              // 0x0000(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreFeaturedSubPresenter_OnFeaturedContentClicked) == 0x000008, "Wrong alignment on StoreFeaturedSubPresenter_OnFeaturedContentClicked");
static_assert(sizeof(StoreFeaturedSubPresenter_OnFeaturedContentClicked) == 0x0001A8, "Wrong size on StoreFeaturedSubPresenter_OnFeaturedContentClicked");
static_assert(offsetof(StoreFeaturedSubPresenter_OnFeaturedContentClicked, StoreContentViewData) == 0x000000, "Member 'StoreFeaturedSubPresenter_OnFeaturedContentClicked::StoreContentViewData' has a wrong offset!");

// Function DBDUIPresenters.StoreFeaturedSubPresenter.OnMysteryBoxClaimableStatusChanged
// 0x0070 (0x0070 - 0x0000)
struct StoreFeaturedSubPresenter_OnMysteryBoxClaimableStatusChanged final
{
public:
	class FString                                 Campaign;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMysteryBoxStatus                      status;                                            // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreFeaturedSubPresenter_OnMysteryBoxClaimableStatusChanged) == 0x000008, "Wrong alignment on StoreFeaturedSubPresenter_OnMysteryBoxClaimableStatusChanged");
static_assert(sizeof(StoreFeaturedSubPresenter_OnMysteryBoxClaimableStatusChanged) == 0x000070, "Wrong size on StoreFeaturedSubPresenter_OnMysteryBoxClaimableStatusChanged");
static_assert(offsetof(StoreFeaturedSubPresenter_OnMysteryBoxClaimableStatusChanged, Campaign) == 0x000000, "Member 'StoreFeaturedSubPresenter_OnMysteryBoxClaimableStatusChanged::Campaign' has a wrong offset!");
static_assert(offsetof(StoreFeaturedSubPresenter_OnMysteryBoxClaimableStatusChanged, status) == 0x000010, "Member 'StoreFeaturedSubPresenter_OnMysteryBoxClaimableStatusChanged::status' has a wrong offset!");

// Function DBDUIPresenters.StoreFeaturedSubPresenter.OnMysteryBoxClaimComplete
// 0x0078 (0x0078 - 0x0000)
struct StoreFeaturedSubPresenter_OnMysteryBoxClaimComplete final
{
public:
	bool                                          Succeeded;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Campaign;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMysteryBoxStatus                      status;                                            // 0x0018(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreFeaturedSubPresenter_OnMysteryBoxClaimComplete) == 0x000008, "Wrong alignment on StoreFeaturedSubPresenter_OnMysteryBoxClaimComplete");
static_assert(sizeof(StoreFeaturedSubPresenter_OnMysteryBoxClaimComplete) == 0x000078, "Wrong size on StoreFeaturedSubPresenter_OnMysteryBoxClaimComplete");
static_assert(offsetof(StoreFeaturedSubPresenter_OnMysteryBoxClaimComplete, Succeeded) == 0x000000, "Member 'StoreFeaturedSubPresenter_OnMysteryBoxClaimComplete::Succeeded' has a wrong offset!");
static_assert(offsetof(StoreFeaturedSubPresenter_OnMysteryBoxClaimComplete, Campaign) == 0x000008, "Member 'StoreFeaturedSubPresenter_OnMysteryBoxClaimComplete::Campaign' has a wrong offset!");
static_assert(offsetof(StoreFeaturedSubPresenter_OnMysteryBoxClaimComplete, status) == 0x000018, "Member 'StoreFeaturedSubPresenter_OnMysteryBoxClaimComplete::status' has a wrong offset!");

// Function DBDUIPresenters.StoreFeaturedSubPresenter.OnMysteryBoxStatusLoaded
// 0x0078 (0x0078 - 0x0000)
struct StoreFeaturedSubPresenter_OnMysteryBoxStatusLoaded final
{
public:
	bool                                          Succeeded;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Campaign;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMysteryBoxStatus                      status;                                            // 0x0018(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreFeaturedSubPresenter_OnMysteryBoxStatusLoaded) == 0x000008, "Wrong alignment on StoreFeaturedSubPresenter_OnMysteryBoxStatusLoaded");
static_assert(sizeof(StoreFeaturedSubPresenter_OnMysteryBoxStatusLoaded) == 0x000078, "Wrong size on StoreFeaturedSubPresenter_OnMysteryBoxStatusLoaded");
static_assert(offsetof(StoreFeaturedSubPresenter_OnMysteryBoxStatusLoaded, Succeeded) == 0x000000, "Member 'StoreFeaturedSubPresenter_OnMysteryBoxStatusLoaded::Succeeded' has a wrong offset!");
static_assert(offsetof(StoreFeaturedSubPresenter_OnMysteryBoxStatusLoaded, Campaign) == 0x000008, "Member 'StoreFeaturedSubPresenter_OnMysteryBoxStatusLoaded::Campaign' has a wrong offset!");
static_assert(offsetof(StoreFeaturedSubPresenter_OnMysteryBoxStatusLoaded, status) == 0x000018, "Member 'StoreFeaturedSubPresenter_OnMysteryBoxStatusLoaded::status' has a wrong offset!");

// Function DBDUIPresenters.StoreFeaturedSubPresenter.RequestCrossPromoPopup
// 0x0010 (0x0010 - 0x0000)
struct StoreFeaturedSubPresenter_RequestCrossPromoPopup final
{
public:
	class FString                                 CrossPromoId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreFeaturedSubPresenter_RequestCrossPromoPopup) == 0x000008, "Wrong alignment on StoreFeaturedSubPresenter_RequestCrossPromoPopup");
static_assert(sizeof(StoreFeaturedSubPresenter_RequestCrossPromoPopup) == 0x000010, "Wrong size on StoreFeaturedSubPresenter_RequestCrossPromoPopup");
static_assert(offsetof(StoreFeaturedSubPresenter_RequestCrossPromoPopup, CrossPromoId) == 0x000000, "Member 'StoreFeaturedSubPresenter_RequestCrossPromoPopup::CrossPromoId' has a wrong offset!");

// Function DBDUIPresenters.StoreFeaturedSubPresenter.RequestMoveFromFeaturedCustomizationItems
// 0x0058 (0x0058 - 0x0000)
struct StoreFeaturedSubPresenter_RequestMoveFromFeaturedCustomizationItems final
{
public:
	struct FStoreRedirectionData                  StoreRedirectionData;                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreFeaturedSubPresenter_RequestMoveFromFeaturedCustomizationItems) == 0x000008, "Wrong alignment on StoreFeaturedSubPresenter_RequestMoveFromFeaturedCustomizationItems");
static_assert(sizeof(StoreFeaturedSubPresenter_RequestMoveFromFeaturedCustomizationItems) == 0x000058, "Wrong size on StoreFeaturedSubPresenter_RequestMoveFromFeaturedCustomizationItems");
static_assert(offsetof(StoreFeaturedSubPresenter_RequestMoveFromFeaturedCustomizationItems, StoreRedirectionData) == 0x000000, "Member 'StoreFeaturedSubPresenter_RequestMoveFromFeaturedCustomizationItems::StoreRedirectionData' has a wrong offset!");

// Function DBDUIPresenters.StoreFeaturedSubPresenter.RequestMoveToCharactersPage
// 0x0058 (0x0058 - 0x0000)
struct StoreFeaturedSubPresenter_RequestMoveToCharactersPage final
{
public:
	struct FStoreRedirectionData                  StoreRedirectionData;                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreFeaturedSubPresenter_RequestMoveToCharactersPage) == 0x000008, "Wrong alignment on StoreFeaturedSubPresenter_RequestMoveToCharactersPage");
static_assert(sizeof(StoreFeaturedSubPresenter_RequestMoveToCharactersPage) == 0x000058, "Wrong size on StoreFeaturedSubPresenter_RequestMoveToCharactersPage");
static_assert(offsetof(StoreFeaturedSubPresenter_RequestMoveToCharactersPage, StoreRedirectionData) == 0x000000, "Member 'StoreFeaturedSubPresenter_RequestMoveToCharactersPage::StoreRedirectionData' has a wrong offset!");

// Function DBDUIPresenters.StoreFeaturedSubPresenter.RequestMoveToPage
// 0x0060 (0x0060 - 0x0000)
struct StoreFeaturedSubPresenter_RequestMoveToPage final
{
public:
	struct FStoreRedirectionData                  StoreRedirectionData;                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint32                                        contextUid;                                        // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreFeaturedSubPresenter_RequestMoveToPage) == 0x000008, "Wrong alignment on StoreFeaturedSubPresenter_RequestMoveToPage");
static_assert(sizeof(StoreFeaturedSubPresenter_RequestMoveToPage) == 0x000060, "Wrong size on StoreFeaturedSubPresenter_RequestMoveToPage");
static_assert(offsetof(StoreFeaturedSubPresenter_RequestMoveToPage, StoreRedirectionData) == 0x000000, "Member 'StoreFeaturedSubPresenter_RequestMoveToPage::StoreRedirectionData' has a wrong offset!");
static_assert(offsetof(StoreFeaturedSubPresenter_RequestMoveToPage, contextUid) == 0x000058, "Member 'StoreFeaturedSubPresenter_RequestMoveToPage::contextUid' has a wrong offset!");

// Function DBDUIPresenters.StoreMenuPresenter.OnDisplayStandRotation
// 0x0004 (0x0004 - 0x0000)
struct StoreMenuPresenter_OnDisplayStandRotation final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuPresenter_OnDisplayStandRotation) == 0x000004, "Wrong alignment on StoreMenuPresenter_OnDisplayStandRotation");
static_assert(sizeof(StoreMenuPresenter_OnDisplayStandRotation) == 0x000004, "Wrong size on StoreMenuPresenter_OnDisplayStandRotation");
static_assert(offsetof(StoreMenuPresenter_OnDisplayStandRotation, Distance) == 0x000000, "Member 'StoreMenuPresenter_OnDisplayStandRotation::Distance' has a wrong offset!");

// Function DBDUIPresenters.StoreMenuPresenter.OnMenuTabSelected
// 0x0001 (0x0001 - 0x0000)
struct StoreMenuPresenter_OnMenuTabSelected final
{
public:
	EStoreMenuState                               menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuPresenter_OnMenuTabSelected) == 0x000001, "Wrong alignment on StoreMenuPresenter_OnMenuTabSelected");
static_assert(sizeof(StoreMenuPresenter_OnMenuTabSelected) == 0x000001, "Wrong size on StoreMenuPresenter_OnMenuTabSelected");
static_assert(offsetof(StoreMenuPresenter_OnMenuTabSelected, menuState) == 0x000000, "Member 'StoreMenuPresenter_OnMenuTabSelected::menuState' has a wrong offset!");

// Function DBDUIPresenters.StoreMenuPresenter.OnMenuTabSelectedAgain
// 0x0001 (0x0001 - 0x0000)
struct StoreMenuPresenter_OnMenuTabSelectedAgain final
{
public:
	EStoreMenuState                               menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuPresenter_OnMenuTabSelectedAgain) == 0x000001, "Wrong alignment on StoreMenuPresenter_OnMenuTabSelectedAgain");
static_assert(sizeof(StoreMenuPresenter_OnMenuTabSelectedAgain) == 0x000001, "Wrong size on StoreMenuPresenter_OnMenuTabSelectedAgain");
static_assert(offsetof(StoreMenuPresenter_OnMenuTabSelectedAgain, menuState) == 0x000000, "Member 'StoreMenuPresenter_OnMenuTabSelectedAgain::menuState' has a wrong offset!");

// Function DBDUIPresenters.StoreMenuPresenter.OnNotEnoughCurrencyModalButtonClicked
// 0x0001 (0x0001 - 0x0000)
struct StoreMenuPresenter_OnNotEnoughCurrencyModalButtonClicked final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuPresenter_OnNotEnoughCurrencyModalButtonClicked) == 0x000001, "Wrong alignment on StoreMenuPresenter_OnNotEnoughCurrencyModalButtonClicked");
static_assert(sizeof(StoreMenuPresenter_OnNotEnoughCurrencyModalButtonClicked) == 0x000001, "Wrong size on StoreMenuPresenter_OnNotEnoughCurrencyModalButtonClicked");
static_assert(offsetof(StoreMenuPresenter_OnNotEnoughCurrencyModalButtonClicked, currencyType) == 0x000000, "Member 'StoreMenuPresenter_OnNotEnoughCurrencyModalButtonClicked::currencyType' has a wrong offset!");

// Function DBDUIPresenters.StoreMenuPresenter.OnStartSubPresenterAsyncOperation
// 0x0008 (0x0008 - 0x0000)
struct StoreMenuPresenter_OnStartSubPresenterAsyncOperation final
{
public:
	class USubPresenter*                          SubPresenter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuPresenter_OnStartSubPresenterAsyncOperation) == 0x000008, "Wrong alignment on StoreMenuPresenter_OnStartSubPresenterAsyncOperation");
static_assert(sizeof(StoreMenuPresenter_OnStartSubPresenterAsyncOperation) == 0x000008, "Wrong size on StoreMenuPresenter_OnStartSubPresenterAsyncOperation");
static_assert(offsetof(StoreMenuPresenter_OnStartSubPresenterAsyncOperation, SubPresenter) == 0x000000, "Member 'StoreMenuPresenter_OnStartSubPresenterAsyncOperation::SubPresenter' has a wrong offset!");

// Function DBDUIPresenters.StoreMenuPresenter.OnStopSubPresenterAsyncOperation
// 0x0008 (0x0008 - 0x0000)
struct StoreMenuPresenter_OnStopSubPresenterAsyncOperation final
{
public:
	class USubPresenter*                          SubPresenter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuPresenter_OnStopSubPresenterAsyncOperation) == 0x000008, "Wrong alignment on StoreMenuPresenter_OnStopSubPresenterAsyncOperation");
static_assert(sizeof(StoreMenuPresenter_OnStopSubPresenterAsyncOperation) == 0x000008, "Wrong size on StoreMenuPresenter_OnStopSubPresenterAsyncOperation");
static_assert(offsetof(StoreMenuPresenter_OnStopSubPresenterAsyncOperation, SubPresenter) == 0x000000, "Member 'StoreMenuPresenter_OnStopSubPresenterAsyncOperation::SubPresenter' has a wrong offset!");

// Function DBDUIPresenters.StoreMenuPresenter.OnBackActionLabelChangeRequested
// 0x0018 (0x0018 - 0x0000)
struct StoreMenuPresenter_OnBackActionLabelChangeRequested final
{
public:
	class FText                                   newLabel;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuPresenter_OnBackActionLabelChangeRequested) == 0x000008, "Wrong alignment on StoreMenuPresenter_OnBackActionLabelChangeRequested");
static_assert(sizeof(StoreMenuPresenter_OnBackActionLabelChangeRequested) == 0x000018, "Wrong size on StoreMenuPresenter_OnBackActionLabelChangeRequested");
static_assert(offsetof(StoreMenuPresenter_OnBackActionLabelChangeRequested, newLabel) == 0x000000, "Member 'StoreMenuPresenter_OnBackActionLabelChangeRequested::newLabel' has a wrong offset!");

// Function DBDUIPresenters.StoreRootWidget.ShouldPresentBackgroundOnUnfocus
// 0x0001 (0x0001 - 0x0000)
struct StoreRootWidget_ShouldPresentBackgroundOnUnfocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreRootWidget_ShouldPresentBackgroundOnUnfocus) == 0x000001, "Wrong alignment on StoreRootWidget_ShouldPresentBackgroundOnUnfocus");
static_assert(sizeof(StoreRootWidget_ShouldPresentBackgroundOnUnfocus) == 0x000001, "Wrong size on StoreRootWidget_ShouldPresentBackgroundOnUnfocus");
static_assert(offsetof(StoreRootWidget_ShouldPresentBackgroundOnUnfocus, ReturnValue) == 0x000000, "Member 'StoreRootWidget_ShouldPresentBackgroundOnUnfocus::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.StoreSpecialPacksSubPresenter.BuyHeritagePack
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialPacksSubPresenter_BuyHeritagePack final
{
public:
	class FString                                 packId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksSubPresenter_BuyHeritagePack) == 0x000008, "Wrong alignment on StoreSpecialPacksSubPresenter_BuyHeritagePack");
static_assert(sizeof(StoreSpecialPacksSubPresenter_BuyHeritagePack) == 0x000010, "Wrong size on StoreSpecialPacksSubPresenter_BuyHeritagePack");
static_assert(offsetof(StoreSpecialPacksSubPresenter_BuyHeritagePack, packId) == 0x000000, "Member 'StoreSpecialPacksSubPresenter_BuyHeritagePack::packId' has a wrong offset!");

// Function DBDUIPresenters.StoreSpecialPacksSubPresenter.OnArchivePassClicked
// 0x0020 (0x0020 - 0x0000)
struct StoreSpecialPacksSubPresenter_OnArchivePassClicked final
{
public:
	class FString                                 packId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   archiveId;                                         // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreSpecialPacksSubPresenter_OnArchivePassClicked) == 0x000008, "Wrong alignment on StoreSpecialPacksSubPresenter_OnArchivePassClicked");
static_assert(sizeof(StoreSpecialPacksSubPresenter_OnArchivePassClicked) == 0x000020, "Wrong size on StoreSpecialPacksSubPresenter_OnArchivePassClicked");
static_assert(offsetof(StoreSpecialPacksSubPresenter_OnArchivePassClicked, packId) == 0x000000, "Member 'StoreSpecialPacksSubPresenter_OnArchivePassClicked::packId' has a wrong offset!");
static_assert(offsetof(StoreSpecialPacksSubPresenter_OnArchivePassClicked, archiveId) == 0x000010, "Member 'StoreSpecialPacksSubPresenter_OnArchivePassClicked::archiveId' has a wrong offset!");

// Function DBDUIPresenters.StoreSpecialPacksSubPresenter.OnChapterPackClicked
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialPacksSubPresenter_OnChapterPackClicked final
{
public:
	class FString                                 packId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksSubPresenter_OnChapterPackClicked) == 0x000008, "Wrong alignment on StoreSpecialPacksSubPresenter_OnChapterPackClicked");
static_assert(sizeof(StoreSpecialPacksSubPresenter_OnChapterPackClicked) == 0x000010, "Wrong size on StoreSpecialPacksSubPresenter_OnChapterPackClicked");
static_assert(offsetof(StoreSpecialPacksSubPresenter_OnChapterPackClicked, packId) == 0x000000, "Member 'StoreSpecialPacksSubPresenter_OnChapterPackClicked::packId' has a wrong offset!");

// Function DBDUIPresenters.StoreSpecialPacksSubPresenter.OnCharacterClicked
// 0x0018 (0x0018 - 0x0000)
struct StoreSpecialPacksSubPresenter_OnCharacterClicked final
{
public:
	class FString                                 packId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterIndex;                                    // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreSpecialPacksSubPresenter_OnCharacterClicked) == 0x000008, "Wrong alignment on StoreSpecialPacksSubPresenter_OnCharacterClicked");
static_assert(sizeof(StoreSpecialPacksSubPresenter_OnCharacterClicked) == 0x000018, "Wrong size on StoreSpecialPacksSubPresenter_OnCharacterClicked");
static_assert(offsetof(StoreSpecialPacksSubPresenter_OnCharacterClicked, packId) == 0x000000, "Member 'StoreSpecialPacksSubPresenter_OnCharacterClicked::packId' has a wrong offset!");
static_assert(offsetof(StoreSpecialPacksSubPresenter_OnCharacterClicked, characterIndex) == 0x000010, "Member 'StoreSpecialPacksSubPresenter_OnCharacterClicked::characterIndex' has a wrong offset!");

// Function DBDUIPresenters.StoreSpecialPacksSubPresenter.OnCustomizationClicked
// 0x0020 (0x0020 - 0x0000)
struct StoreSpecialPacksSubPresenter_OnCustomizationClicked final
{
public:
	class FString                                 packId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   customizationId;                                   // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreSpecialPacksSubPresenter_OnCustomizationClicked) == 0x000008, "Wrong alignment on StoreSpecialPacksSubPresenter_OnCustomizationClicked");
static_assert(sizeof(StoreSpecialPacksSubPresenter_OnCustomizationClicked) == 0x000020, "Wrong size on StoreSpecialPacksSubPresenter_OnCustomizationClicked");
static_assert(offsetof(StoreSpecialPacksSubPresenter_OnCustomizationClicked, packId) == 0x000000, "Member 'StoreSpecialPacksSubPresenter_OnCustomizationClicked::packId' has a wrong offset!");
static_assert(offsetof(StoreSpecialPacksSubPresenter_OnCustomizationClicked, customizationId) == 0x000010, "Member 'StoreSpecialPacksSubPresenter_OnCustomizationClicked::customizationId' has a wrong offset!");

// Function DBDUIPresenters.StoreSpecialPacksSubPresenter.OnHeritagePackClicked
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialPacksSubPresenter_OnHeritagePackClicked final
{
public:
	class FString                                 packId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksSubPresenter_OnHeritagePackClicked) == 0x000008, "Wrong alignment on StoreSpecialPacksSubPresenter_OnHeritagePackClicked");
static_assert(sizeof(StoreSpecialPacksSubPresenter_OnHeritagePackClicked) == 0x000010, "Wrong size on StoreSpecialPacksSubPresenter_OnHeritagePackClicked");
static_assert(offsetof(StoreSpecialPacksSubPresenter_OnHeritagePackClicked, packId) == 0x000000, "Member 'StoreSpecialPacksSubPresenter_OnHeritagePackClicked::packId' has a wrong offset!");

// Function DBDUIPresenters.StoreSpecialPacksSubPresenter.OnPackBuyClicked
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialPacksSubPresenter_OnPackBuyClicked final
{
public:
	class FString                                 packId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksSubPresenter_OnPackBuyClicked) == 0x000008, "Wrong alignment on StoreSpecialPacksSubPresenter_OnPackBuyClicked");
static_assert(sizeof(StoreSpecialPacksSubPresenter_OnPackBuyClicked) == 0x000010, "Wrong size on StoreSpecialPacksSubPresenter_OnPackBuyClicked");
static_assert(offsetof(StoreSpecialPacksSubPresenter_OnPackBuyClicked, packId) == 0x000000, "Member 'StoreSpecialPacksSubPresenter_OnPackBuyClicked::packId' has a wrong offset!");

// Function DBDUIPresenters.StoreSpecialPacksSubPresenter.OnSpecialPackClicked
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialPacksSubPresenter_OnSpecialPackClicked final
{
public:
	class FString                                 packId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksSubPresenter_OnSpecialPackClicked) == 0x000008, "Wrong alignment on StoreSpecialPacksSubPresenter_OnSpecialPackClicked");
static_assert(sizeof(StoreSpecialPacksSubPresenter_OnSpecialPackClicked) == 0x000010, "Wrong size on StoreSpecialPacksSubPresenter_OnSpecialPackClicked");
static_assert(offsetof(StoreSpecialPacksSubPresenter_OnSpecialPackClicked, packId) == 0x000000, "Member 'StoreSpecialPacksSubPresenter_OnSpecialPackClicked::packId' has a wrong offset!");

// Function DBDUIPresenters.StoreSpecialsSubPresenter.OnArchivePassBannerClicked
// 0x000C (0x000C - 0x0000)
struct StoreSpecialsSubPresenter_OnArchivePassBannerClicked final
{
public:
	class FName                                   archiveId;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialsSubPresenter_OnArchivePassBannerClicked) == 0x000004, "Wrong alignment on StoreSpecialsSubPresenter_OnArchivePassBannerClicked");
static_assert(sizeof(StoreSpecialsSubPresenter_OnArchivePassBannerClicked) == 0x00000C, "Wrong size on StoreSpecialsSubPresenter_OnArchivePassBannerClicked");
static_assert(offsetof(StoreSpecialsSubPresenter_OnArchivePassBannerClicked, archiveId) == 0x000000, "Member 'StoreSpecialsSubPresenter_OnArchivePassBannerClicked::archiveId' has a wrong offset!");

// Function DBDUIPresenters.StoreSpecialsSubPresenter.OnAuricCellSpecialBuyAction
// 0x000C (0x000C - 0x0000)
struct StoreSpecialsSubPresenter_OnAuricCellSpecialBuyAction final
{
public:
	class FName                                   bundleId;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialsSubPresenter_OnAuricCellSpecialBuyAction) == 0x000004, "Wrong alignment on StoreSpecialsSubPresenter_OnAuricCellSpecialBuyAction");
static_assert(sizeof(StoreSpecialsSubPresenter_OnAuricCellSpecialBuyAction) == 0x00000C, "Wrong size on StoreSpecialsSubPresenter_OnAuricCellSpecialBuyAction");
static_assert(offsetof(StoreSpecialsSubPresenter_OnAuricCellSpecialBuyAction, bundleId) == 0x000000, "Member 'StoreSpecialsSubPresenter_OnAuricCellSpecialBuyAction::bundleId' has a wrong offset!");

// Function DBDUIPresenters.StoreSpecialsSubPresenter.OnPremiumTransactionCompleted
// 0x0020 (0x0020 - 0x0000)
struct StoreSpecialsSubPresenter_OnPremiumTransactionCompleted final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemId;                                            // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPremiumPurchaseCompleteData           purchaseCompleteData;                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialsSubPresenter_OnPremiumTransactionCompleted) == 0x000008, "Wrong alignment on StoreSpecialsSubPresenter_OnPremiumTransactionCompleted");
static_assert(sizeof(StoreSpecialsSubPresenter_OnPremiumTransactionCompleted) == 0x000020, "Wrong size on StoreSpecialsSubPresenter_OnPremiumTransactionCompleted");
static_assert(offsetof(StoreSpecialsSubPresenter_OnPremiumTransactionCompleted, Success) == 0x000000, "Member 'StoreSpecialsSubPresenter_OnPremiumTransactionCompleted::Success' has a wrong offset!");
static_assert(offsetof(StoreSpecialsSubPresenter_OnPremiumTransactionCompleted, ItemId) == 0x000004, "Member 'StoreSpecialsSubPresenter_OnPremiumTransactionCompleted::ItemId' has a wrong offset!");
static_assert(offsetof(StoreSpecialsSubPresenter_OnPremiumTransactionCompleted, purchaseCompleteData) == 0x000010, "Member 'StoreSpecialsSubPresenter_OnPremiumTransactionCompleted::purchaseCompleteData' has a wrong offset!");

// Function DBDUIPresenters.StoreSpecialsSubPresenter.RequestMoveToCharactersPage
// 0x0058 (0x0058 - 0x0000)
struct StoreSpecialsSubPresenter_RequestMoveToCharactersPage final
{
public:
	struct FStoreRedirectionData                  StoreRedirectionData;                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialsSubPresenter_RequestMoveToCharactersPage) == 0x000008, "Wrong alignment on StoreSpecialsSubPresenter_RequestMoveToCharactersPage");
static_assert(sizeof(StoreSpecialsSubPresenter_RequestMoveToCharactersPage) == 0x000058, "Wrong size on StoreSpecialsSubPresenter_RequestMoveToCharactersPage");
static_assert(offsetof(StoreSpecialsSubPresenter_RequestMoveToCharactersPage, StoreRedirectionData) == 0x000000, "Member 'StoreSpecialsSubPresenter_RequestMoveToCharactersPage::StoreRedirectionData' has a wrong offset!");

// Function DBDUIPresenters.SubtitlesPresenter.IsSubtitlesEnabled
// 0x0001 (0x0001 - 0x0000)
struct SubtitlesPresenter_IsSubtitlesEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesPresenter_IsSubtitlesEnabled) == 0x000001, "Wrong alignment on SubtitlesPresenter_IsSubtitlesEnabled");
static_assert(sizeof(SubtitlesPresenter_IsSubtitlesEnabled) == 0x000001, "Wrong size on SubtitlesPresenter_IsSubtitlesEnabled");
static_assert(offsetof(SubtitlesPresenter_IsSubtitlesEnabled, ReturnValue) == 0x000000, "Member 'SubtitlesPresenter_IsSubtitlesEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.TallyMenuPresenter.SetTallyScoreboardVisibility
// 0x0001 (0x0001 - 0x0000)
struct TallyMenuPresenter_SetTallyScoreboardVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyMenuPresenter_SetTallyScoreboardVisibility) == 0x000001, "Wrong alignment on TallyMenuPresenter_SetTallyScoreboardVisibility");
static_assert(sizeof(TallyMenuPresenter_SetTallyScoreboardVisibility) == 0x000001, "Wrong size on TallyMenuPresenter_SetTallyScoreboardVisibility");
static_assert(offsetof(TallyMenuPresenter_SetTallyScoreboardVisibility, IsVisible) == 0x000000, "Member 'TallyMenuPresenter_SetTallyScoreboardVisibility::IsVisible' has a wrong offset!");

// Function DBDUIPresenters.TallyScoreboardSubPresenter.OnPlayerSocialOptionClicked
// 0x0048 (0x0048 - 0x0000)
struct TallyScoreboardSubPresenter_OnPlayerSocialOptionClicked final
{
public:
	struct FPlayerSocialOptionViewData            playerSocialOptionData;                            // 0x0000(0x0048)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyScoreboardSubPresenter_OnPlayerSocialOptionClicked) == 0x000008, "Wrong alignment on TallyScoreboardSubPresenter_OnPlayerSocialOptionClicked");
static_assert(sizeof(TallyScoreboardSubPresenter_OnPlayerSocialOptionClicked) == 0x000048, "Wrong size on TallyScoreboardSubPresenter_OnPlayerSocialOptionClicked");
static_assert(offsetof(TallyScoreboardSubPresenter_OnPlayerSocialOptionClicked, playerSocialOptionData) == 0x000000, "Member 'TallyScoreboardSubPresenter_OnPlayerSocialOptionClicked::playerSocialOptionData' has a wrong offset!");

// Function DBDUIPresenters.TallyScoreboardSubPresenter.OnPlayerStatusClicked
// 0x0010 (0x0010 - 0x0000)
struct TallyScoreboardSubPresenter_OnPlayerStatusClicked final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyScoreboardSubPresenter_OnPlayerStatusClicked) == 0x000008, "Wrong alignment on TallyScoreboardSubPresenter_OnPlayerStatusClicked");
static_assert(sizeof(TallyScoreboardSubPresenter_OnPlayerStatusClicked) == 0x000010, "Wrong size on TallyScoreboardSubPresenter_OnPlayerStatusClicked");
static_assert(offsetof(TallyScoreboardSubPresenter_OnPlayerStatusClicked, PlayerId) == 0x000000, "Member 'TallyScoreboardSubPresenter_OnPlayerStatusClicked::PlayerId' has a wrong offset!");

// Function DBDUIPresenters.TallyScoreboardSubPresenter.OnReportButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct TallyScoreboardSubPresenter_OnReportButtonClicked final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyScoreboardSubPresenter_OnReportButtonClicked) == 0x000008, "Wrong alignment on TallyScoreboardSubPresenter_OnReportButtonClicked");
static_assert(sizeof(TallyScoreboardSubPresenter_OnReportButtonClicked) == 0x000010, "Wrong size on TallyScoreboardSubPresenter_OnReportButtonClicked");
static_assert(offsetof(TallyScoreboardSubPresenter_OnReportButtonClicked, PlayerId) == 0x000000, "Member 'TallyScoreboardSubPresenter_OnReportButtonClicked::PlayerId' has a wrong offset!");

// Function DBDUIPresenters.ToastNotificationPresenter.DisplayPopup
// 0x0004 (0x0004 - 0x0000)
struct ToastNotificationPresenter_DisplayPopup final
{
public:
	uint32                                        notificationId;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToastNotificationPresenter_DisplayPopup) == 0x000004, "Wrong alignment on ToastNotificationPresenter_DisplayPopup");
static_assert(sizeof(ToastNotificationPresenter_DisplayPopup) == 0x000004, "Wrong size on ToastNotificationPresenter_DisplayPopup");
static_assert(offsetof(ToastNotificationPresenter_DisplayPopup, notificationId) == 0x000000, "Member 'ToastNotificationPresenter_DisplayPopup::notificationId' has a wrong offset!");

// Function DBDUIPresenters.ToastNotificationPresenter.OnButtonSelected
// 0x0008 (0x0008 - 0x0000)
struct ToastNotificationPresenter_OnButtonSelected final
{
public:
	int32                                         buttonId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        notificationId;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToastNotificationPresenter_OnButtonSelected) == 0x000004, "Wrong alignment on ToastNotificationPresenter_OnButtonSelected");
static_assert(sizeof(ToastNotificationPresenter_OnButtonSelected) == 0x000008, "Wrong size on ToastNotificationPresenter_OnButtonSelected");
static_assert(offsetof(ToastNotificationPresenter_OnButtonSelected, buttonId) == 0x000000, "Member 'ToastNotificationPresenter_OnButtonSelected::buttonId' has a wrong offset!");
static_assert(offsetof(ToastNotificationPresenter_OnButtonSelected, notificationId) == 0x000004, "Member 'ToastNotificationPresenter_OnButtonSelected::notificationId' has a wrong offset!");

// Function DBDUIPresenters.ToastNotificationPresenter.OnNotificationRemoved
// 0x0004 (0x0004 - 0x0000)
struct ToastNotificationPresenter_OnNotificationRemoved final
{
public:
	uint32                                        notificationId;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToastNotificationPresenter_OnNotificationRemoved) == 0x000004, "Wrong alignment on ToastNotificationPresenter_OnNotificationRemoved");
static_assert(sizeof(ToastNotificationPresenter_OnNotificationRemoved) == 0x000004, "Wrong size on ToastNotificationPresenter_OnNotificationRemoved");
static_assert(offsetof(ToastNotificationPresenter_OnNotificationRemoved, notificationId) == 0x000000, "Member 'ToastNotificationPresenter_OnNotificationRemoved::notificationId' has a wrong offset!");

// Function DBDUIPresenters.WatermarkPresenter.IsNonShippingBuild
// 0x0001 (0x0001 - 0x0000)
struct WatermarkPresenter_IsNonShippingBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WatermarkPresenter_IsNonShippingBuild) == 0x000001, "Wrong alignment on WatermarkPresenter_IsNonShippingBuild");
static_assert(sizeof(WatermarkPresenter_IsNonShippingBuild) == 0x000001, "Wrong size on WatermarkPresenter_IsNonShippingBuild");
static_assert(offsetof(WatermarkPresenter_IsNonShippingBuild, ReturnValue) == 0x000000, "Member 'WatermarkPresenter_IsNonShippingBuild::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.WatermarkPresenter.IsSteamBuild
// 0x0001 (0x0001 - 0x0000)
struct WatermarkPresenter_IsSteamBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WatermarkPresenter_IsSteamBuild) == 0x000001, "Wrong alignment on WatermarkPresenter_IsSteamBuild");
static_assert(sizeof(WatermarkPresenter_IsSteamBuild) == 0x000001, "Wrong size on WatermarkPresenter_IsSteamBuild");
static_assert(offsetof(WatermarkPresenter_IsSteamBuild, ReturnValue) == 0x000000, "Member 'WatermarkPresenter_IsSteamBuild::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.WatermarkPresenter.IsUsingCommandLineArgument
// 0x0001 (0x0001 - 0x0000)
struct WatermarkPresenter_IsUsingCommandLineArgument final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WatermarkPresenter_IsUsingCommandLineArgument) == 0x000001, "Wrong alignment on WatermarkPresenter_IsUsingCommandLineArgument");
static_assert(sizeof(WatermarkPresenter_IsUsingCommandLineArgument) == 0x000001, "Wrong size on WatermarkPresenter_IsUsingCommandLineArgument");
static_assert(offsetof(WatermarkPresenter_IsUsingCommandLineArgument, ReturnValue) == 0x000000, "Member 'WatermarkPresenter_IsUsingCommandLineArgument::ReturnValue' has a wrong offset!");

}

