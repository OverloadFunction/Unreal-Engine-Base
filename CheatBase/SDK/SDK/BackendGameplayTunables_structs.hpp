#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BackendGameplayTunables

#include "Basic.hpp"


namespace SDK
{

// Enum BackendGameplayTunables.EMultiTunableType
// NumValues: 0x0006
enum class EMultiTunableType : uint8
{
	Bool                                     = 0,
	Int32                                    = 1,
	Float                                    = 2,
	String                                   = 3,
	StringArray                              = 4,
	EMultiTunableType_MAX                    = 5,
};

// ScriptStruct BackendGameplayTunables.BackendMultiTypeTunableValue
// 0x0038 (0x0038 - 0x0000)
struct FBackendMultiTypeTunableValue final
{
public:
	EMultiTunableType                             Type;                                              // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         _stringArrayValue;                                 // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class FString                                 _stringValue;                                      // 0x0018(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _floatValue;                                       // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _int32Value;                                       // 0x002C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _boolValue;                                        // 0x0030(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBackendMultiTypeTunableValue) == 0x000008, "Wrong alignment on FBackendMultiTypeTunableValue");
static_assert(sizeof(FBackendMultiTypeTunableValue) == 0x000038, "Wrong size on FBackendMultiTypeTunableValue");
static_assert(offsetof(FBackendMultiTypeTunableValue, Type) == 0x000000, "Member 'FBackendMultiTypeTunableValue::Type' has a wrong offset!");
static_assert(offsetof(FBackendMultiTypeTunableValue, _stringArrayValue) == 0x000008, "Member 'FBackendMultiTypeTunableValue::_stringArrayValue' has a wrong offset!");
static_assert(offsetof(FBackendMultiTypeTunableValue, _stringValue) == 0x000018, "Member 'FBackendMultiTypeTunableValue::_stringValue' has a wrong offset!");
static_assert(offsetof(FBackendMultiTypeTunableValue, _floatValue) == 0x000028, "Member 'FBackendMultiTypeTunableValue::_floatValue' has a wrong offset!");
static_assert(offsetof(FBackendMultiTypeTunableValue, _int32Value) == 0x00002C, "Member 'FBackendMultiTypeTunableValue::_int32Value' has a wrong offset!");
static_assert(offsetof(FBackendMultiTypeTunableValue, _boolValue) == 0x000030, "Member 'FBackendMultiTypeTunableValue::_boolValue' has a wrong offset!");

// ScriptStruct BackendGameplayTunables.BackendMultiTypeTunable
// 0x0048 (0x0048 - 0x0000)
struct FBackendMultiTypeTunable final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBackendMultiTypeTunableValue          Value;                                             // 0x0010(0x0038)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBackendMultiTypeTunable) == 0x000008, "Wrong alignment on FBackendMultiTypeTunable");
static_assert(sizeof(FBackendMultiTypeTunable) == 0x000048, "Wrong size on FBackendMultiTypeTunable");
static_assert(offsetof(FBackendMultiTypeTunable, ID) == 0x000000, "Member 'FBackendMultiTypeTunable::ID' has a wrong offset!");
static_assert(offsetof(FBackendMultiTypeTunable, Value) == 0x000010, "Member 'FBackendMultiTypeTunable::Value' has a wrong offset!");

// ScriptStruct BackendGameplayTunables.BackendGameplayTunablesContainer
// 0x0018 (0x0018 - 0x0000)
struct FBackendGameplayTunablesContainer final
{
public:
	TArray<struct FBackendMultiTypeTunable>       Tunables;                                          // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          IsInitialized;                                     // 0x0010(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBackendGameplayTunablesContainer) == 0x000008, "Wrong alignment on FBackendGameplayTunablesContainer");
static_assert(sizeof(FBackendGameplayTunablesContainer) == 0x000018, "Wrong size on FBackendGameplayTunablesContainer");
static_assert(offsetof(FBackendGameplayTunablesContainer, Tunables) == 0x000000, "Member 'FBackendGameplayTunablesContainer::Tunables' has a wrong offset!");
static_assert(offsetof(FBackendGameplayTunablesContainer, IsInitialized) == 0x000010, "Member 'FBackendGameplayTunablesContainer::IsInitialized' has a wrong offset!");

}

