#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Achievements

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Achievements_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "Engine_classes.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK
{

// Class Achievements.AchievementUtilities
// 0x0000 (0x0030 - 0x0030)
class UAchievementUtilities final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementUtilities">();
	}
	static class UAchievementUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementUtilities>();
	}
};
static_assert(alignof(UAchievementUtilities) == 0x000008, "Wrong alignment on UAchievementUtilities");
static_assert(sizeof(UAchievementUtilities) == 0x000030, "Wrong size on UAchievementUtilities");

// Class Achievements.AchievementBase
// 0x0010 (0x0040 - 0x0030)
class UAchievementBase : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementBase">();
	}
	static class UAchievementBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementBase>();
	}
};
static_assert(alignof(UAchievementBase) == 0x000008, "Wrong alignment on UAchievementBase");
static_assert(sizeof(UAchievementBase) == 0x000040, "Wrong size on UAchievementBase");

// Class Achievements.AchievementsData
// 0x0040 (0x0078 - 0x0038)
class UAchievementsData final : public UDataAsset
{
public:
	TArray<struct FGameEventSimpleAchievementInfo> gameEventSimpleAchievements;                      // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FScoreEventSimpleAchievementInfo> scoreEventSimpleAchievements;                    // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameEventClassAchievementInfo> gameEventClassAchievements;                        // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomAchievementInfo>         customEventClassAchievements;                      // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementsData">();
	}
	static class UAchievementsData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementsData>();
	}
};
static_assert(alignof(UAchievementsData) == 0x000008, "Wrong alignment on UAchievementsData");
static_assert(sizeof(UAchievementsData) == 0x000078, "Wrong size on UAchievementsData");
static_assert(offsetof(UAchievementsData, gameEventSimpleAchievements) == 0x000038, "Member 'UAchievementsData::gameEventSimpleAchievements' has a wrong offset!");
static_assert(offsetof(UAchievementsData, scoreEventSimpleAchievements) == 0x000048, "Member 'UAchievementsData::scoreEventSimpleAchievements' has a wrong offset!");
static_assert(offsetof(UAchievementsData, gameEventClassAchievements) == 0x000058, "Member 'UAchievementsData::gameEventClassAchievements' has a wrong offset!");
static_assert(offsetof(UAchievementsData, customEventClassAchievements) == 0x000068, "Member 'UAchievementsData::customEventClassAchievements' has a wrong offset!");

// Class Achievements.OnGameEventAchievement
// 0x0038 (0x0078 - 0x0040)
class UOnGameEventAchievement : public UAchievementBase
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   _gameEvents;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<EDBDScoreTypes>                        _scoreTypes;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnScoreTypeEvent(EDBDScoreTypes ScoreType, float Amount, class AActor* Instigator, class AActor* Target);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnGameEventAchievement">();
	}
	static class UOnGameEventAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnGameEventAchievement>();
	}
};
static_assert(alignof(UOnGameEventAchievement) == 0x000008, "Wrong alignment on UOnGameEventAchievement");
static_assert(sizeof(UOnGameEventAchievement) == 0x000078, "Wrong size on UOnGameEventAchievement");
static_assert(offsetof(UOnGameEventAchievement, _gameEvents) == 0x000058, "Member 'UOnGameEventAchievement::_gameEvents' has a wrong offset!");
static_assert(offsetof(UOnGameEventAchievement, _scoreTypes) == 0x000068, "Member 'UOnGameEventAchievement::_scoreTypes' has a wrong offset!");

// Class Achievements.ScoreLevelUpAchievement
// 0x0000 (0x0078 - 0x0078)
class UScoreLevelUpAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreLevelUpAchievement">();
	}
	static class UScoreLevelUpAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreLevelUpAchievement>();
	}
};
static_assert(alignof(UScoreLevelUpAchievement) == 0x000008, "Wrong alignment on UScoreLevelUpAchievement");
static_assert(sizeof(UScoreLevelUpAchievement) == 0x000078, "Wrong size on UScoreLevelUpAchievement");

// Class Achievements.SpendTimeWithStateTagTypeAchievement
// 0x0060 (0x00A0 - 0x0040)
class USpendTimeWithStateTagTypeAchievement : public UAchievementBase
{
public:
	class FName                                   _statName;                                         // 0x0040(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  _gameplayTags;                                     // 0x0050(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         _targetTimeToSpendWithStateTag;                    // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_74[0x2C];                                      // 0x0074(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpendTimeWithStateTagTypeAchievement">();
	}
	static class USpendTimeWithStateTagTypeAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpendTimeWithStateTagTypeAchievement>();
	}
};
static_assert(alignof(USpendTimeWithStateTagTypeAchievement) == 0x000008, "Wrong alignment on USpendTimeWithStateTagTypeAchievement");
static_assert(sizeof(USpendTimeWithStateTagTypeAchievement) == 0x0000A0, "Wrong size on USpendTimeWithStateTagTypeAchievement");
static_assert(offsetof(USpendTimeWithStateTagTypeAchievement, _statName) == 0x000040, "Member 'USpendTimeWithStateTagTypeAchievement::_statName' has a wrong offset!");
static_assert(offsetof(USpendTimeWithStateTagTypeAchievement, _gameplayTags) == 0x000050, "Member 'USpendTimeWithStateTagTypeAchievement::_gameplayTags' has a wrong offset!");
static_assert(offsetof(USpendTimeWithStateTagTypeAchievement, _targetTimeToSpendWithStateTag) == 0x000070, "Member 'USpendTimeWithStateTagTypeAchievement::_targetTimeToSpendWithStateTag' has a wrong offset!");

// Class Achievements.SurvivorSpendTimeWithStateTagTypeAchievement
// 0x0000 (0x00A0 - 0x00A0)
class USurvivorSpendTimeWithStateTagTypeAchievement : public USpendTimeWithStateTagTypeAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorSpendTimeWithStateTagTypeAchievement">();
	}
	static class USurvivorSpendTimeWithStateTagTypeAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorSpendTimeWithStateTagTypeAchievement>();
	}
};
static_assert(alignof(USurvivorSpendTimeWithStateTagTypeAchievement) == 0x000008, "Wrong alignment on USurvivorSpendTimeWithStateTagTypeAchievement");
static_assert(sizeof(USurvivorSpendTimeWithStateTagTypeAchievement) == 0x0000A0, "Wrong size on USurvivorSpendTimeWithStateTagTypeAchievement");

// Class Achievements.AchievementHandler
// 0x0020 (0x0058 - 0x0038)
class UAchievementHandler final : public UGameInstanceSubsystem
{
public:
	TArray<class UAchievementBase*>               _achievements;                                     // 0x0038(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementHandler">();
	}
	static class UAchievementHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementHandler>();
	}
};
static_assert(alignof(UAchievementHandler) == 0x000008, "Wrong alignment on UAchievementHandler");
static_assert(sizeof(UAchievementHandler) == 0x000058, "Wrong size on UAchievementHandler");
static_assert(offsetof(UAchievementHandler, _achievements) == 0x000038, "Member 'UAchievementHandler::_achievements' has a wrong offset!");

// Class Achievements.SurvivorFastVaultAfterDamage
// 0x0038 (0x00B0 - 0x0078)
class USurvivorFastVaultAfterDamage : public UOnGameEventAchievement
{
public:
	uint8                                         Pad_78[0x30];                                      // 0x0078(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _timeGrantedUntilFastVault;                        // 0x00A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorFastVaultAfterDamage">();
	}
	static class USurvivorFastVaultAfterDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorFastVaultAfterDamage>();
	}
};
static_assert(alignof(USurvivorFastVaultAfterDamage) == 0x000008, "Wrong alignment on USurvivorFastVaultAfterDamage");
static_assert(sizeof(USurvivorFastVaultAfterDamage) == 0x0000B0, "Wrong size on USurvivorFastVaultAfterDamage");
static_assert(offsetof(USurvivorFastVaultAfterDamage, _timeGrantedUntilFastVault) == 0x0000A8, "Member 'USurvivorFastVaultAfterDamage::_timeGrantedUntilFastVault' has a wrong offset!");

// Class Achievements.AddNewPerkAchievement
// 0x0000 (0x0078 - 0x0078)
class UAddNewPerkAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AddNewPerkAchievement">();
	}
	static class UAddNewPerkAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddNewPerkAchievement>();
	}
};
static_assert(alignof(UAddNewPerkAchievement) == 0x000008, "Wrong alignment on UAddNewPerkAchievement");
static_assert(sizeof(UAddNewPerkAchievement) == 0x000078, "Wrong size on UAddNewPerkAchievement");

// Class Achievements.AwardPipsAchievement
// 0x0000 (0x0078 - 0x0078)
class UAwardPipsAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AwardPipsAchievement">();
	}
	static class UAwardPipsAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAwardPipsAchievement>();
	}
};
static_assert(alignof(UAwardPipsAchievement) == 0x000008, "Wrong alignment on UAwardPipsAchievement");
static_assert(sizeof(UAwardPipsAchievement) == 0x000078, "Wrong size on UAwardPipsAchievement");

// Class Achievements.CollectItemFromBasementChestAchievement
// 0x0008 (0x0080 - 0x0078)
class UCollectItemFromBasementChestAchievement : public UOnGameEventAchievement
{
public:
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CollectItemFromBasementChestAchievement">();
	}
	static class UCollectItemFromBasementChestAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCollectItemFromBasementChestAchievement>();
	}
};
static_assert(alignof(UCollectItemFromBasementChestAchievement) == 0x000008, "Wrong alignment on UCollectItemFromBasementChestAchievement");
static_assert(sizeof(UCollectItemFromBasementChestAchievement) == 0x000080, "Wrong size on UCollectItemFromBasementChestAchievement");

// Class Achievements.CooldownReactivationTypeAchievement
// 0x0010 (0x0088 - 0x0078)
class UCooldownReactivationTypeAchievement : public UOnGameEventAchievement
{
public:
	uint8                                         Pad_78[0x10];                                      // 0x0078(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CooldownReactivationTypeAchievement">();
	}
	static class UCooldownReactivationTypeAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCooldownReactivationTypeAchievement>();
	}
};
static_assert(alignof(UCooldownReactivationTypeAchievement) == 0x000008, "Wrong alignment on UCooldownReactivationTypeAchievement");
static_assert(sizeof(UCooldownReactivationTypeAchievement) == 0x000088, "Wrong size on UCooldownReactivationTypeAchievement");

// Class Achievements.SurvivorSwapOutItemFromChest
// 0x0010 (0x0088 - 0x0078)
class USurvivorSwapOutItemFromChest : public UOnGameEventAchievement
{
public:
	uint8                                         Pad_78[0x10];                                      // 0x0078(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorSwapOutItemFromChest">();
	}
	static class USurvivorSwapOutItemFromChest* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorSwapOutItemFromChest>();
	}
};
static_assert(alignof(USurvivorSwapOutItemFromChest) == 0x000008, "Wrong alignment on USurvivorSwapOutItemFromChest");
static_assert(sizeof(USurvivorSwapOutItemFromChest) == 0x000088, "Wrong size on USurvivorSwapOutItemFromChest");

// Class Achievements.EscapeTypeAchievement
// 0x0018 (0x0090 - 0x0078)
class UEscapeTypeAchievement : public UOnGameEventAchievement
{
public:
	uint8                                         Pad_78[0x18];                                      // 0x0078(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EscapeTypeAchievement">();
	}
	static class UEscapeTypeAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEscapeTypeAchievement>();
	}
};
static_assert(alignof(UEscapeTypeAchievement) == 0x000008, "Wrong alignment on UEscapeTypeAchievement");
static_assert(sizeof(UEscapeTypeAchievement) == 0x000090, "Wrong size on UEscapeTypeAchievement");

// Class Achievements.EscapeAsObsessionWithoutInjuryAchievement
// 0x0000 (0x0090 - 0x0090)
class UEscapeAsObsessionWithoutInjuryAchievement : public UEscapeTypeAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EscapeAsObsessionWithoutInjuryAchievement">();
	}
	static class UEscapeAsObsessionWithoutInjuryAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEscapeAsObsessionWithoutInjuryAchievement>();
	}
};
static_assert(alignof(UEscapeAsObsessionWithoutInjuryAchievement) == 0x000008, "Wrong alignment on UEscapeAsObsessionWithoutInjuryAchievement");
static_assert(sizeof(UEscapeAsObsessionWithoutInjuryAchievement) == 0x000090, "Wrong size on UEscapeAsObsessionWithoutInjuryAchievement");

// Class Achievements.ExitGateOpenedAchievement
// 0x0000 (0x0078 - 0x0078)
class UExitGateOpenedAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExitGateOpenedAchievement">();
	}
	static class UExitGateOpenedAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExitGateOpenedAchievement>();
	}
};
static_assert(alignof(UExitGateOpenedAchievement) == 0x000008, "Wrong alignment on UExitGateOpenedAchievement");
static_assert(sizeof(UExitGateOpenedAchievement) == 0x000078, "Wrong size on UExitGateOpenedAchievement");

// Class Achievements.KillerFallCombinedDistanceAchievement
// 0x0000 (0x0078 - 0x0078)
class UKillerFallCombinedDistanceAchievement final : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerFallCombinedDistanceAchievement">();
	}
	static class UKillerFallCombinedDistanceAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerFallCombinedDistanceAchievement>();
	}
};
static_assert(alignof(UKillerFallCombinedDistanceAchievement) == 0x000008, "Wrong alignment on UKillerFallCombinedDistanceAchievement");
static_assert(sizeof(UKillerFallCombinedDistanceAchievement) == 0x000078, "Wrong size on UKillerFallCombinedDistanceAchievement");

// Class Achievements.FinishGameWithCharacterPerksAchievement
// 0x0000 (0x0078 - 0x0078)
class UFinishGameWithCharacterPerksAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FinishGameWithCharacterPerksAchievement">();
	}
	static class UFinishGameWithCharacterPerksAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFinishGameWithCharacterPerksAchievement>();
	}
};
static_assert(alignof(UFinishGameWithCharacterPerksAchievement) == 0x000008, "Wrong alignment on UFinishGameWithCharacterPerksAchievement");
static_assert(sizeof(UFinishGameWithCharacterPerksAchievement) == 0x000078, "Wrong size on UFinishGameWithCharacterPerksAchievement");

// Class Achievements.FinishGameWithMercilessVictoryAchievement
// 0x0000 (0x0078 - 0x0078)
class UFinishGameWithMercilessVictoryAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FinishGameWithMercilessVictoryAchievement">();
	}
	static class UFinishGameWithMercilessVictoryAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFinishGameWithMercilessVictoryAchievement>();
	}
};
static_assert(alignof(UFinishGameWithMercilessVictoryAchievement) == 0x000008, "Wrong alignment on UFinishGameWithMercilessVictoryAchievement");
static_assert(sizeof(UFinishGameWithMercilessVictoryAchievement) == 0x000078, "Wrong size on UFinishGameWithMercilessVictoryAchievement");

// Class Achievements.GreatSkillCheckWhileInjuredAchievement
// 0x0000 (0x0078 - 0x0078)
class UGreatSkillCheckWhileInjuredAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GreatSkillCheckWhileInjuredAchievement">();
	}
	static class UGreatSkillCheckWhileInjuredAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGreatSkillCheckWhileInjuredAchievement>();
	}
};
static_assert(alignof(UGreatSkillCheckWhileInjuredAchievement) == 0x000008, "Wrong alignment on UGreatSkillCheckWhileInjuredAchievement");
static_assert(sizeof(UGreatSkillCheckWhileInjuredAchievement) == 0x000078, "Wrong size on UGreatSkillCheckWhileInjuredAchievement");

// Class Achievements.HaveOtherEventsHappenedPriorToEvent
// 0x0030 (0x00A8 - 0x0078)
class UHaveOtherEventsHappenedPriorToEvent : public UOnGameEventAchievement
{
public:
	struct FGameplayTagContainer                  _gameEventsThatHappenedBefore;                     // 0x0078(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FName                                   _statName;                                         // 0x0098(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HaveOtherEventsHappenedPriorToEvent">();
	}
	static class UHaveOtherEventsHappenedPriorToEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHaveOtherEventsHappenedPriorToEvent>();
	}
};
static_assert(alignof(UHaveOtherEventsHappenedPriorToEvent) == 0x000008, "Wrong alignment on UHaveOtherEventsHappenedPriorToEvent");
static_assert(sizeof(UHaveOtherEventsHappenedPriorToEvent) == 0x0000A8, "Wrong size on UHaveOtherEventsHappenedPriorToEvent");
static_assert(offsetof(UHaveOtherEventsHappenedPriorToEvent, _gameEventsThatHappenedBefore) == 0x000078, "Member 'UHaveOtherEventsHappenedPriorToEvent::_gameEventsThatHappenedBefore' has a wrong offset!");
static_assert(offsetof(UHaveOtherEventsHappenedPriorToEvent, _statName) == 0x000098, "Member 'UHaveOtherEventsHappenedPriorToEvent::_statName' has a wrong offset!");

// Class Achievements.KillerDamagedSurvivorBaseAchievement
// 0x0000 (0x0078 - 0x0078)
class UKillerDamagedSurvivorBaseAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerDamagedSurvivorBaseAchievement">();
	}
	static class UKillerDamagedSurvivorBaseAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerDamagedSurvivorBaseAchievement>();
	}
};
static_assert(alignof(UKillerDamagedSurvivorBaseAchievement) == 0x000008, "Wrong alignment on UKillerDamagedSurvivorBaseAchievement");
static_assert(sizeof(UKillerDamagedSurvivorBaseAchievement) == 0x000078, "Wrong size on UKillerDamagedSurvivorBaseAchievement");

// Class Achievements.KillerSucceededBasicAttackOnObliviousSurvivorAchievement
// 0x0000 (0x0078 - 0x0078)
class UKillerSucceededBasicAttackOnObliviousSurvivorAchievement : public UKillerDamagedSurvivorBaseAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerSucceededBasicAttackOnObliviousSurvivorAchievement">();
	}
	static class UKillerSucceededBasicAttackOnObliviousSurvivorAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerSucceededBasicAttackOnObliviousSurvivorAchievement>();
	}
};
static_assert(alignof(UKillerSucceededBasicAttackOnObliviousSurvivorAchievement) == 0x000008, "Wrong alignment on UKillerSucceededBasicAttackOnObliviousSurvivorAchievement");
static_assert(sizeof(UKillerSucceededBasicAttackOnObliviousSurvivorAchievement) == 0x000078, "Wrong size on UKillerSucceededBasicAttackOnObliviousSurvivorAchievement");

// Class Achievements.HealFromDyingAchievement
// 0x0000 (0x0078 - 0x0078)
class UHealFromDyingAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HealFromDyingAchievement">();
	}
	static class UHealFromDyingAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHealFromDyingAchievement>();
	}
};
static_assert(alignof(UHealFromDyingAchievement) == 0x000008, "Wrong alignment on UHealFromDyingAchievement");
static_assert(sizeof(UHealFromDyingAchievement) == 0x000078, "Wrong size on UHealFromDyingAchievement");

// Class Achievements.HealOtherFullyAfterExitGatesPoweredAchievement
// 0x0000 (0x0078 - 0x0078)
class UHealOtherFullyAfterExitGatesPoweredAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HealOtherFullyAfterExitGatesPoweredAchievement">();
	}
	static class UHealOtherFullyAfterExitGatesPoweredAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHealOtherFullyAfterExitGatesPoweredAchievement>();
	}
};
static_assert(alignof(UHealOtherFullyAfterExitGatesPoweredAchievement) == 0x000008, "Wrong alignment on UHealOtherFullyAfterExitGatesPoweredAchievement");
static_assert(sizeof(UHealOtherFullyAfterExitGatesPoweredAchievement) == 0x000078, "Wrong size on UHealOtherFullyAfterExitGatesPoweredAchievement");

// Class Achievements.HealSelfOrOtherInBasementAchievement
// 0x0000 (0x0078 - 0x0078)
class UHealSelfOrOtherInBasementAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HealSelfOrOtherInBasementAchievement">();
	}
	static class UHealSelfOrOtherInBasementAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHealSelfOrOtherInBasementAchievement>();
	}
};
static_assert(alignof(UHealSelfOrOtherInBasementAchievement) == 0x000008, "Wrong alignment on UHealSelfOrOtherInBasementAchievement");
static_assert(sizeof(UHealSelfOrOtherInBasementAchievement) == 0x000078, "Wrong size on UHealSelfOrOtherInBasementAchievement");

// Class Achievements.HoldingItemOfRaritiesOnGameEventAchievement
// 0x0020 (0x0098 - 0x0078)
class UHoldingItemOfRaritiesOnGameEventAchievement : public UOnGameEventAchievement
{
public:
	TArray<EItemRarity>                           _itemRarities;                                     // 0x0078(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FName                                   _statName;                                         // 0x0088(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HoldingItemOfRaritiesOnGameEventAchievement">();
	}
	static class UHoldingItemOfRaritiesOnGameEventAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHoldingItemOfRaritiesOnGameEventAchievement>();
	}
};
static_assert(alignof(UHoldingItemOfRaritiesOnGameEventAchievement) == 0x000008, "Wrong alignment on UHoldingItemOfRaritiesOnGameEventAchievement");
static_assert(sizeof(UHoldingItemOfRaritiesOnGameEventAchievement) == 0x000098, "Wrong size on UHoldingItemOfRaritiesOnGameEventAchievement");
static_assert(offsetof(UHoldingItemOfRaritiesOnGameEventAchievement, _itemRarities) == 0x000078, "Member 'UHoldingItemOfRaritiesOnGameEventAchievement::_itemRarities' has a wrong offset!");
static_assert(offsetof(UHoldingItemOfRaritiesOnGameEventAchievement, _statName) == 0x000088, "Member 'UHoldingItemOfRaritiesOnGameEventAchievement::_statName' has a wrong offset!");

// Class Achievements.OnGameEventDuringCollapseAchievement
// 0x0010 (0x0088 - 0x0078)
class UOnGameEventDuringCollapseAchievement : public UOnGameEventAchievement
{
public:
	class FName                                   _statName;                                         // 0x0078(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnGameEventDuringCollapseAchievement">();
	}
	static class UOnGameEventDuringCollapseAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnGameEventDuringCollapseAchievement>();
	}
};
static_assert(alignof(UOnGameEventDuringCollapseAchievement) == 0x000008, "Wrong alignment on UOnGameEventDuringCollapseAchievement");
static_assert(sizeof(UOnGameEventDuringCollapseAchievement) == 0x000088, "Wrong size on UOnGameEventDuringCollapseAchievement");
static_assert(offsetof(UOnGameEventDuringCollapseAchievement, _statName) == 0x000078, "Member 'UOnGameEventDuringCollapseAchievement::_statName' has a wrong offset!");

// Class Achievements.HookSurvivorInBasement
// 0x0000 (0x0078 - 0x0078)
class UHookSurvivorInBasement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HookSurvivorInBasement">();
	}
	static class UHookSurvivorInBasement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHookSurvivorInBasement>();
	}
};
static_assert(alignof(UHookSurvivorInBasement) == 0x000008, "Wrong alignment on UHookSurvivorInBasement");
static_assert(sizeof(UHookSurvivorInBasement) == 0x000078, "Wrong size on UHookSurvivorInBasement");

// Class Achievements.InjureRecentlyBlindingSurvivorAchievement
// 0x0048 (0x00C0 - 0x0078)
class UInjureRecentlyBlindingSurvivorAchievement : public UKillerDamagedSurvivorBaseAchievement
{
public:
	float                                         _timeWithinBlindiing;                              // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7C[0x44];                                      // 0x007C(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InjureRecentlyBlindingSurvivorAchievement">();
	}
	static class UInjureRecentlyBlindingSurvivorAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInjureRecentlyBlindingSurvivorAchievement>();
	}
};
static_assert(alignof(UInjureRecentlyBlindingSurvivorAchievement) == 0x000008, "Wrong alignment on UInjureRecentlyBlindingSurvivorAchievement");
static_assert(sizeof(UInjureRecentlyBlindingSurvivorAchievement) == 0x0000C0, "Wrong size on UInjureRecentlyBlindingSurvivorAchievement");
static_assert(offsetof(UInjureRecentlyBlindingSurvivorAchievement, _timeWithinBlindiing) == 0x000078, "Member 'UInjureRecentlyBlindingSurvivorAchievement::_timeWithinBlindiing' has a wrong offset!");

// Class Achievements.KillerVaultDuringChaseAchievement
// 0x0000 (0x0078 - 0x0078)
class UKillerVaultDuringChaseAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerVaultDuringChaseAchievement">();
	}
	static class UKillerVaultDuringChaseAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerVaultDuringChaseAchievement>();
	}
};
static_assert(alignof(UKillerVaultDuringChaseAchievement) == 0x000008, "Wrong alignment on UKillerVaultDuringChaseAchievement");
static_assert(sizeof(UKillerVaultDuringChaseAchievement) == 0x000078, "Wrong size on UKillerVaultDuringChaseAchievement");

// Class Achievements.InjureSurvivorInBasementAchievement
// 0x0000 (0x0078 - 0x0078)
class UInjureSurvivorInBasementAchievement : public UKillerDamagedSurvivorBaseAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InjureSurvivorInBasementAchievement">();
	}
	static class UInjureSurvivorInBasementAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInjureSurvivorInBasementAchievement>();
	}
};
static_assert(alignof(UInjureSurvivorInBasementAchievement) == 0x000008, "Wrong alignment on UInjureSurvivorInBasementAchievement");
static_assert(sizeof(UInjureSurvivorInBasementAchievement) == 0x000078, "Wrong size on UInjureSurvivorInBasementAchievement");

// Class Achievements.ScoreHealOtherAchievement
// 0x0000 (0x0078 - 0x0078)
class UScoreHealOtherAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreHealOtherAchievement">();
	}
	static class UScoreHealOtherAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreHealOtherAchievement>();
	}
};
static_assert(alignof(UScoreHealOtherAchievement) == 0x000008, "Wrong alignment on UScoreHealOtherAchievement");
static_assert(sizeof(UScoreHealOtherAchievement) == 0x000078, "Wrong size on UScoreHealOtherAchievement");

// Class Achievements.K26CrowDamagedSurvivorAchievement
// 0x0000 (0x0078 - 0x0078)
class UK26CrowDamagedSurvivorAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K26CrowDamagedSurvivorAchievement">();
	}
	static class UK26CrowDamagedSurvivorAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK26CrowDamagedSurvivorAchievement>();
	}
};
static_assert(alignof(UK26CrowDamagedSurvivorAchievement) == 0x000008, "Wrong alignment on UK26CrowDamagedSurvivorAchievement");
static_assert(sizeof(UK26CrowDamagedSurvivorAchievement) == 0x000078, "Wrong size on UK26CrowDamagedSurvivorAchievement");

// Class Achievements.KillerDamagedSurvivorHoldingItemAchievement
// 0x0010 (0x0088 - 0x0078)
class UKillerDamagedSurvivorHoldingItemAchievement : public UKillerDamagedSurvivorBaseAchievement
{
public:
	class FName                                   _statName;                                         // 0x0078(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _allowBaseItemsInCount;                            // 0x0084(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _allowSpecialItemsInCount;                         // 0x0085(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _allowCursedItemsInCount;                          // 0x0086(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_87[0x1];                                       // 0x0087(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerDamagedSurvivorHoldingItemAchievement">();
	}
	static class UKillerDamagedSurvivorHoldingItemAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerDamagedSurvivorHoldingItemAchievement>();
	}
};
static_assert(alignof(UKillerDamagedSurvivorHoldingItemAchievement) == 0x000008, "Wrong alignment on UKillerDamagedSurvivorHoldingItemAchievement");
static_assert(sizeof(UKillerDamagedSurvivorHoldingItemAchievement) == 0x000088, "Wrong size on UKillerDamagedSurvivorHoldingItemAchievement");
static_assert(offsetof(UKillerDamagedSurvivorHoldingItemAchievement, _statName) == 0x000078, "Member 'UKillerDamagedSurvivorHoldingItemAchievement::_statName' has a wrong offset!");
static_assert(offsetof(UKillerDamagedSurvivorHoldingItemAchievement, _allowBaseItemsInCount) == 0x000084, "Member 'UKillerDamagedSurvivorHoldingItemAchievement::_allowBaseItemsInCount' has a wrong offset!");
static_assert(offsetof(UKillerDamagedSurvivorHoldingItemAchievement, _allowSpecialItemsInCount) == 0x000085, "Member 'UKillerDamagedSurvivorHoldingItemAchievement::_allowSpecialItemsInCount' has a wrong offset!");
static_assert(offsetof(UKillerDamagedSurvivorHoldingItemAchievement, _allowCursedItemsInCount) == 0x000086, "Member 'UKillerDamagedSurvivorHoldingItemAchievement::_allowCursedItemsInCount' has a wrong offset!");

// Class Achievements.KillerDamagedSurvivorWithHasteAchievement
// 0x0000 (0x0078 - 0x0078)
class UKillerDamagedSurvivorWithHasteAchievement : public UKillerDamagedSurvivorBaseAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerDamagedSurvivorWithHasteAchievement">();
	}
	static class UKillerDamagedSurvivorWithHasteAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerDamagedSurvivorWithHasteAchievement>();
	}
};
static_assert(alignof(UKillerDamagedSurvivorWithHasteAchievement) == 0x000008, "Wrong alignment on UKillerDamagedSurvivorWithHasteAchievement");
static_assert(sizeof(UKillerDamagedSurvivorWithHasteAchievement) == 0x000078, "Wrong size on UKillerDamagedSurvivorWithHasteAchievement");

// Class Achievements.KillerDamagedSurvivorWithHinderedAchievement
// 0x0000 (0x0078 - 0x0078)
class UKillerDamagedSurvivorWithHinderedAchievement : public UKillerDamagedSurvivorBaseAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerDamagedSurvivorWithHinderedAchievement">();
	}
	static class UKillerDamagedSurvivorWithHinderedAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerDamagedSurvivorWithHinderedAchievement>();
	}
};
static_assert(alignof(UKillerDamagedSurvivorWithHinderedAchievement) == 0x000008, "Wrong alignment on UKillerDamagedSurvivorWithHinderedAchievement");
static_assert(sizeof(UKillerDamagedSurvivorWithHinderedAchievement) == 0x000078, "Wrong size on UKillerDamagedSurvivorWithHinderedAchievement");

// Class Achievements.KillerDownSurvivorInExitAreaAchievement
// 0x0000 (0x0078 - 0x0078)
class UKillerDownSurvivorInExitAreaAchievement : public UKillerDamagedSurvivorBaseAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerDownSurvivorInExitAreaAchievement">();
	}
	static class UKillerDownSurvivorInExitAreaAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerDownSurvivorInExitAreaAchievement>();
	}
};
static_assert(alignof(UKillerDownSurvivorInExitAreaAchievement) == 0x000008, "Wrong alignment on UKillerDownSurvivorInExitAreaAchievement");
static_assert(sizeof(UKillerDownSurvivorInExitAreaAchievement) == 0x000078, "Wrong size on UKillerDownSurvivorInExitAreaAchievement");

// Class Achievements.KillerHitSurvivorDuringGuardHuntAchievement
// 0x0000 (0x0078 - 0x0078)
class UKillerHitSurvivorDuringGuardHuntAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerHitSurvivorDuringGuardHuntAchievement">();
	}
	static class UKillerHitSurvivorDuringGuardHuntAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerHitSurvivorDuringGuardHuntAchievement>();
	}
};
static_assert(alignof(UKillerHitSurvivorDuringGuardHuntAchievement) == 0x000008, "Wrong alignment on UKillerHitSurvivorDuringGuardHuntAchievement");
static_assert(sizeof(UKillerHitSurvivorDuringGuardHuntAchievement) == 0x000078, "Wrong size on UKillerHitSurvivorDuringGuardHuntAchievement");

// Class Achievements.KillerHookAllOtherInjured
// 0x0010 (0x0050 - 0x0040)
class UKillerHookAllOtherInjured final : public UAchievementBase
{
public:
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerHookAllOtherInjured">();
	}
	static class UKillerHookAllOtherInjured* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerHookAllOtherInjured>();
	}
};
static_assert(alignof(UKillerHookAllOtherInjured) == 0x000008, "Wrong alignment on UKillerHookAllOtherInjured");
static_assert(sizeof(UKillerHookAllOtherInjured) == 0x000050, "Wrong size on UKillerHookAllOtherInjured");

// Class Achievements.KillerSucceededBasicAttackOnBrokenSurvivorAchievement
// 0x0000 (0x0078 - 0x0078)
class UKillerSucceededBasicAttackOnBrokenSurvivorAchievement : public UKillerDamagedSurvivorBaseAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerSucceededBasicAttackOnBrokenSurvivorAchievement">();
	}
	static class UKillerSucceededBasicAttackOnBrokenSurvivorAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerSucceededBasicAttackOnBrokenSurvivorAchievement>();
	}
};
static_assert(alignof(UKillerSucceededBasicAttackOnBrokenSurvivorAchievement) == 0x000008, "Wrong alignment on UKillerSucceededBasicAttackOnBrokenSurvivorAchievement");
static_assert(sizeof(UKillerSucceededBasicAttackOnBrokenSurvivorAchievement) == 0x000078, "Wrong size on UKillerSucceededBasicAttackOnBrokenSurvivorAchievement");

// Class Achievements.KONextToRaisedPalletAchievement
// 0x0008 (0x0080 - 0x0078)
class UKONextToRaisedPalletAchievement : public UOnGameEventAchievement
{
public:
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KONextToRaisedPalletAchievement">();
	}
	static class UKONextToRaisedPalletAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKONextToRaisedPalletAchievement>();
	}
};
static_assert(alignof(UKONextToRaisedPalletAchievement) == 0x000008, "Wrong alignment on UKONextToRaisedPalletAchievement");
static_assert(sizeof(UKONextToRaisedPalletAchievement) == 0x000080, "Wrong size on UKONextToRaisedPalletAchievement");

// Class Achievements.MaxBloodpointsAllCategoriesAchievement
// 0x0000 (0x0078 - 0x0078)
class UMaxBloodpointsAllCategoriesAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaxBloodpointsAllCategoriesAchievement">();
	}
	static class UMaxBloodpointsAllCategoriesAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaxBloodpointsAllCategoriesAchievement>();
	}
};
static_assert(alignof(UMaxBloodpointsAllCategoriesAchievement) == 0x000008, "Wrong alignment on UMaxBloodpointsAllCategoriesAchievement");
static_assert(sizeof(UMaxBloodpointsAllCategoriesAchievement) == 0x000078, "Wrong size on UMaxBloodpointsAllCategoriesAchievement");

// Class Achievements.PickUpItemAchievement
// 0x0020 (0x0098 - 0x0078)
class UPickUpItemAchievement : public UOnGameEventAchievement
{
public:
	class FName                                   _statName;                                         // 0x0078(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _triggerOnNormalItem;                              // 0x0084(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _triggerOnSpecialItem;                             // 0x0085(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _triggerOnCursedItem;                              // 0x0086(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EPlayerRole                                   _targetPlayerRole;                                 // 0x0087(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x10];                                      // 0x0088(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PickUpItemAchievement">();
	}
	static class UPickUpItemAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPickUpItemAchievement>();
	}
};
static_assert(alignof(UPickUpItemAchievement) == 0x000008, "Wrong alignment on UPickUpItemAchievement");
static_assert(sizeof(UPickUpItemAchievement) == 0x000098, "Wrong size on UPickUpItemAchievement");
static_assert(offsetof(UPickUpItemAchievement, _statName) == 0x000078, "Member 'UPickUpItemAchievement::_statName' has a wrong offset!");
static_assert(offsetof(UPickUpItemAchievement, _triggerOnNormalItem) == 0x000084, "Member 'UPickUpItemAchievement::_triggerOnNormalItem' has a wrong offset!");
static_assert(offsetof(UPickUpItemAchievement, _triggerOnSpecialItem) == 0x000085, "Member 'UPickUpItemAchievement::_triggerOnSpecialItem' has a wrong offset!");
static_assert(offsetof(UPickUpItemAchievement, _triggerOnCursedItem) == 0x000086, "Member 'UPickUpItemAchievement::_triggerOnCursedItem' has a wrong offset!");
static_assert(offsetof(UPickUpItemAchievement, _targetPlayerRole) == 0x000087, "Member 'UPickUpItemAchievement::_targetPlayerRole' has a wrong offset!");

// Class Achievements.SafeUnhookWhileBrokenAchievement
// 0x0018 (0x0090 - 0x0078)
class USafeUnhookWhileBrokenAchievement : public UOnGameEventAchievement
{
public:
	uint8                                         Pad_78[0x18];                                      // 0x0078(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SafeUnhookWhileBrokenAchievement">();
	}
	static class USafeUnhookWhileBrokenAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USafeUnhookWhileBrokenAchievement>();
	}
};
static_assert(alignof(USafeUnhookWhileBrokenAchievement) == 0x000008, "Wrong alignment on USafeUnhookWhileBrokenAchievement");
static_assert(sizeof(USafeUnhookWhileBrokenAchievement) == 0x000090, "Wrong size on USafeUnhookWhileBrokenAchievement");

// Class Achievements.ScoreDamageGeneratorWithKickAchievement
// 0x0000 (0x0078 - 0x0078)
class UScoreDamageGeneratorWithKickAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreDamageGeneratorWithKickAchievement">();
	}
	static class UScoreDamageGeneratorWithKickAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreDamageGeneratorWithKickAchievement>();
	}
};
static_assert(alignof(UScoreDamageGeneratorWithKickAchievement) == 0x000008, "Wrong alignment on UScoreDamageGeneratorWithKickAchievement");
static_assert(sizeof(UScoreDamageGeneratorWithKickAchievement) == 0x000078, "Wrong size on UScoreDamageGeneratorWithKickAchievement");

// Class Achievements.ScoreHookSurvivor
// 0x0000 (0x0078 - 0x0078)
class UScoreHookSurvivor : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreHookSurvivor">();
	}
	static class UScoreHookSurvivor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreHookSurvivor>();
	}
};
static_assert(alignof(UScoreHookSurvivor) == 0x000008, "Wrong alignment on UScoreHookSurvivor");
static_assert(sizeof(UScoreHookSurvivor) == 0x000078, "Wrong size on UScoreHookSurvivor");

// Class Achievements.ScoreK19HitHarpoonedSurvivorAchievement
// 0x0000 (0x0078 - 0x0078)
class UScoreK19HitHarpoonedSurvivorAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreK19HitHarpoonedSurvivorAchievement">();
	}
	static class UScoreK19HitHarpoonedSurvivorAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreK19HitHarpoonedSurvivorAchievement>();
	}
};
static_assert(alignof(UScoreK19HitHarpoonedSurvivorAchievement) == 0x000008, "Wrong alignment on UScoreK19HitHarpoonedSurvivorAchievement");
static_assert(sizeof(UScoreK19HitHarpoonedSurvivorAchievement) == 0x000078, "Wrong size on UScoreK19HitHarpoonedSurvivorAchievement");

// Class Achievements.ScoreK24PowerHitSurvivor
// 0x0000 (0x0078 - 0x0078)
class UScoreK24PowerHitSurvivor : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreK24PowerHitSurvivor">();
	}
	static class UScoreK24PowerHitSurvivor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreK24PowerHitSurvivor>();
	}
};
static_assert(alignof(UScoreK24PowerHitSurvivor) == 0x000008, "Wrong alignment on UScoreK24PowerHitSurvivor");
static_assert(sizeof(UScoreK24PowerHitSurvivor) == 0x000078, "Wrong size on UScoreK24PowerHitSurvivor");

// Class Achievements.ScoreKillAchievement
// 0x0000 (0x0078 - 0x0078)
class UScoreKillAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreKillAchievement">();
	}
	static class UScoreKillAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreKillAchievement>();
	}
};
static_assert(alignof(UScoreKillAchievement) == 0x000008, "Wrong alignment on UScoreKillAchievement");
static_assert(sizeof(UScoreKillAchievement) == 0x000078, "Wrong size on UScoreKillAchievement");

// Class Achievements.ScoreSacrificeAchievement
// 0x0000 (0x0078 - 0x0078)
class UScoreSacrificeAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreSacrificeAchievement">();
	}
	static class UScoreSacrificeAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreSacrificeAchievement>();
	}
};
static_assert(alignof(UScoreSacrificeAchievement) == 0x000008, "Wrong alignment on UScoreSacrificeAchievement");
static_assert(sizeof(UScoreSacrificeAchievement) == 0x000078, "Wrong size on UScoreSacrificeAchievement");

// Class Achievements.ScoreSurviveAchievement
// 0x0000 (0x0090 - 0x0090)
class UScoreSurviveAchievement : public UEscapeTypeAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreSurviveAchievement">();
	}
	static class UScoreSurviveAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreSurviveAchievement>();
	}
};
static_assert(alignof(UScoreSurviveAchievement) == 0x000008, "Wrong alignment on UScoreSurviveAchievement");
static_assert(sizeof(UScoreSurviveAchievement) == 0x000090, "Wrong size on UScoreSurviveAchievement");

// Class Achievements.StartGameAchievement
// 0x0000 (0x0078 - 0x0078)
class UStartGameAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StartGameAchievement">();
	}
	static class UStartGameAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStartGameAchievement>();
	}
};
static_assert(alignof(UStartGameAchievement) == 0x000008, "Wrong alignment on UStartGameAchievement");
static_assert(sizeof(UStartGameAchievement) == 0x000078, "Wrong size on UStartGameAchievement");

// Class Achievements.SurvivorEscapeWhileBrokenAchievement
// 0x0000 (0x0078 - 0x0078)
class USurvivorEscapeWhileBrokenAchievement final : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorEscapeWhileBrokenAchievement">();
	}
	static class USurvivorEscapeWhileBrokenAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorEscapeWhileBrokenAchievement>();
	}
};
static_assert(alignof(USurvivorEscapeWhileBrokenAchievement) == 0x000008, "Wrong alignment on USurvivorEscapeWhileBrokenAchievement");
static_assert(sizeof(USurvivorEscapeWhileBrokenAchievement) == 0x000078, "Wrong size on USurvivorEscapeWhileBrokenAchievement");

// Class Achievements.SurvivorIncreaseOthersMovementSpeedWithCooldown
// 0x0000 (0x0088 - 0x0088)
class USurvivorIncreaseOthersMovementSpeedWithCooldown : public UCooldownReactivationTypeAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorIncreaseOthersMovementSpeedWithCooldown">();
	}
	static class USurvivorIncreaseOthersMovementSpeedWithCooldown* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorIncreaseOthersMovementSpeedWithCooldown>();
	}
};
static_assert(alignof(USurvivorIncreaseOthersMovementSpeedWithCooldown) == 0x000008, "Wrong alignment on USurvivorIncreaseOthersMovementSpeedWithCooldown");
static_assert(sizeof(USurvivorIncreaseOthersMovementSpeedWithCooldown) == 0x000088, "Wrong size on USurvivorIncreaseOthersMovementSpeedWithCooldown");

// Class Achievements.SurvivorRevealedKillerAuraAchievement
// 0x0058 (0x0098 - 0x0040)
class USurvivorRevealedKillerAuraAchievement : public UAchievementBase
{
public:
	uint8                                         Pad_40[0x4];                                       // 0x0040(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           _survivorFlagTag;                                  // 0x0044(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           _killerFlagTag;                                    // 0x0050(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           _modifierTag;                                      // 0x005C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _dontAwardIfKillerHasTags;                         // 0x0068(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x10];                                      // 0x0088(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Local_OnRevealKillerAura();
	void OnLevelReadyToPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorRevealedKillerAuraAchievement">();
	}
	static class USurvivorRevealedKillerAuraAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorRevealedKillerAuraAchievement>();
	}
};
static_assert(alignof(USurvivorRevealedKillerAuraAchievement) == 0x000008, "Wrong alignment on USurvivorRevealedKillerAuraAchievement");
static_assert(sizeof(USurvivorRevealedKillerAuraAchievement) == 0x000098, "Wrong size on USurvivorRevealedKillerAuraAchievement");
static_assert(offsetof(USurvivorRevealedKillerAuraAchievement, _survivorFlagTag) == 0x000044, "Member 'USurvivorRevealedKillerAuraAchievement::_survivorFlagTag' has a wrong offset!");
static_assert(offsetof(USurvivorRevealedKillerAuraAchievement, _killerFlagTag) == 0x000050, "Member 'USurvivorRevealedKillerAuraAchievement::_killerFlagTag' has a wrong offset!");
static_assert(offsetof(USurvivorRevealedKillerAuraAchievement, _modifierTag) == 0x00005C, "Member 'USurvivorRevealedKillerAuraAchievement::_modifierTag' has a wrong offset!");
static_assert(offsetof(USurvivorRevealedKillerAuraAchievement, _dontAwardIfKillerHasTags) == 0x000068, "Member 'USurvivorRevealedKillerAuraAchievement::_dontAwardIfKillerHasTags' has a wrong offset!");

// Class Achievements.TotalPlaytimeAchievement
// 0x0000 (0x0040 - 0x0040)
class UTotalPlaytimeAchievement : public UAchievementBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TotalPlaytimeAchievement">();
	}
	static class UTotalPlaytimeAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTotalPlaytimeAchievement>();
	}
};
static_assert(alignof(UTotalPlaytimeAchievement) == 0x000008, "Wrong alignment on UTotalPlaytimeAchievement");
static_assert(sizeof(UTotalPlaytimeAchievement) == 0x000040, "Wrong size on UTotalPlaytimeAchievement");

}

