#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OnlineMessagesUtilities

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "NewsAndMessagesCommon_structs.hpp"


namespace SDK
{

// Enum OnlineMessagesUtilities.EOnlineMessageFlag
// NumValues: 0x0004
enum class EOnlineMessageFlag : uint8
{
	New                                      = 0,
	Read                                     = 1,
	Archived                                 = 2,
	EOnlineMessageFlag_MAX                   = 3,
};

// ScriptStruct OnlineMessagesUtilities.MessageImageEntry
// 0x0038 (0x0050 - 0x0018)
struct FMessageImageEntry final : public FDBDTableRowBaseWithId
{
public:
	struct FSoftObjectPath                        Image;                                             // 0x0018(0x0028)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessageImageEntry) == 0x000008, "Wrong alignment on FMessageImageEntry");
static_assert(sizeof(FMessageImageEntry) == 0x000050, "Wrong size on FMessageImageEntry");
static_assert(offsetof(FMessageImageEntry, Image) == 0x000018, "Member 'FMessageImageEntry::Image' has a wrong offset!");
static_assert(offsetof(FMessageImageEntry, Description) == 0x000040, "Member 'FMessageImageEntry::Description' has a wrong offset!");

// ScriptStruct OnlineMessagesUtilities.ClaimableInboxMessageData
// 0x0028 (0x0028 - 0x0000)
struct FClaimableInboxMessageData final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Amount;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClaimableInboxMessageData) == 0x000008, "Wrong alignment on FClaimableInboxMessageData");
static_assert(sizeof(FClaimableInboxMessageData) == 0x000028, "Wrong size on FClaimableInboxMessageData");
static_assert(offsetof(FClaimableInboxMessageData, Type) == 0x000000, "Member 'FClaimableInboxMessageData::Type' has a wrong offset!");
static_assert(offsetof(FClaimableInboxMessageData, Amount) == 0x000010, "Member 'FClaimableInboxMessageData::Amount' has a wrong offset!");
static_assert(offsetof(FClaimableInboxMessageData, ID) == 0x000018, "Member 'FClaimableInboxMessageData::ID' has a wrong offset!");

// ScriptStruct OnlineMessagesUtilities.InboxMessageMetadata
// 0x0010 (0x0010 - 0x0000)
struct FInboxMessageMetadata final
{
public:
	class FName                                   eventID;                                           // 0x0000(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EventId_IsSet;                                     // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInboxMessageMetadata) == 0x000004, "Wrong alignment on FInboxMessageMetadata");
static_assert(sizeof(FInboxMessageMetadata) == 0x000010, "Wrong size on FInboxMessageMetadata");
static_assert(offsetof(FInboxMessageMetadata, eventID) == 0x000000, "Member 'FInboxMessageMetadata::eventID' has a wrong offset!");
static_assert(offsetof(FInboxMessageMetadata, EventId_IsSet) == 0x00000C, "Member 'FInboxMessageMetadata::EventId_IsSet' has a wrong offset!");

// ScriptStruct OnlineMessagesUtilities.InboxMessageData
// 0x0110 (0x0110 - 0x0000)
struct FInboxMessageData final
{
public:
	int64                                         ID;                                                // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Origin;                                            // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecipientId;                                       // 0x0020(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReceivedTimestamp;                                 // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Subject;                                           // 0x0038(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNewsAndMessagesBodyRuntimeData        Body;                                              // 0x0048(0x0088)(Transient, NativeAccessSpecifierPublic)
	TArray<struct FClaimableInboxMessageData>     Claimable;                                         // 0x00D0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          AreRewardsClaimed;                                 // 0x00E0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRead;                                            // 0x00E1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ExpireTimestamp;                                   // 0x00E8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Flag;                                              // 0x00F0(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventID;                                           // 0x0100(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInboxMessageData) == 0x000008, "Wrong alignment on FInboxMessageData");
static_assert(sizeof(FInboxMessageData) == 0x000110, "Wrong size on FInboxMessageData");
static_assert(offsetof(FInboxMessageData, ID) == 0x000000, "Member 'FInboxMessageData::ID' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, IsValid) == 0x000008, "Member 'FInboxMessageData::IsValid' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, Origin) == 0x000010, "Member 'FInboxMessageData::Origin' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, RecipientId) == 0x000020, "Member 'FInboxMessageData::RecipientId' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, ReceivedTimestamp) == 0x000030, "Member 'FInboxMessageData::ReceivedTimestamp' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, Subject) == 0x000038, "Member 'FInboxMessageData::Subject' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, Body) == 0x000048, "Member 'FInboxMessageData::Body' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, Claimable) == 0x0000D0, "Member 'FInboxMessageData::Claimable' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, AreRewardsClaimed) == 0x0000E0, "Member 'FInboxMessageData::AreRewardsClaimed' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, IsRead) == 0x0000E1, "Member 'FInboxMessageData::IsRead' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, ExpireTimestamp) == 0x0000E8, "Member 'FInboxMessageData::ExpireTimestamp' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, Flag) == 0x0000F0, "Member 'FInboxMessageData::Flag' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, eventID) == 0x000100, "Member 'FInboxMessageData::eventID' has a wrong offset!");

}

