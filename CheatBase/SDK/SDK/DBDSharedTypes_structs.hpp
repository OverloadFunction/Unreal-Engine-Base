#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDSharedTypes

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Enum DBDSharedTypes.ELoadoutSlot
// NumValues: 0x0010
enum class ELoadoutSlot : uint8
{
	SKIN                                     = 0,
	ITEM_POWER                               = 1,
	ADD_ON_1                                 = 2,
	ADD_ON_2                                 = 3,
	PERK_1                                   = 4,
	PERK_2                                   = 5,
	PERK_3                                   = 6,
	PERK_4                                   = 7,
	FAVOR                                    = 8,
	CHARACTER_CLASS                          = 9,
	SKILL_1                                  = 10,
	SKILL_2                                  = 11,
	SKILL_3                                  = 12,
	SKILL_4                                  = 13,
	COUNT                                    = 14,
	ELoadoutSlot_MAX                         = 15,
};

// Enum DBDSharedTypes.ECurrencyType
// NumValues: 0x000B
enum class ECurrencyType : uint8
{
	None                                     = 0,
	BloodPoints                              = 1,
	FearTokens                               = 2,
	Cells                                    = 3,
	HalloweenCoins                           = 4,
	LunarNewYearCoins                        = 5,
	HalloweenEventCurrency                   = 6,
	WinterEventCurrency                      = 7,
	SpringEventCurrency                      = 8,
	AnniversaryEventCurrency                 = 9,
	ECurrencyType_MAX                        = 10,
};

// Enum DBDSharedTypes.EPlayerRole
// NumValues: 0x0006
enum class EPlayerRole : uint8
{
	VE_None                                  = 0,
	VE_Slasher                               = 1,
	VE_Camper                                = 2,
	VE_Observer                              = 3,
	Max                                      = 4,
	EPlayerRole_MAX                          = 5,
};

// Enum DBDSharedTypes.ESocialPlayerOption
// NumValues: 0x0014
enum class ESocialPlayerOption : uint8
{
	None                                     = 0,
	ViewProfile                              = 1,
	FriendInvite                             = 2,
	CancelFriendInvite                       = 3,
	AcceptFriendInvite                       = 4,
	DeclineFriendInvite                      = 5,
	Unfriend                                 = 6,
	RemovePlayer                             = 7,
	BackendBlockPlayer                       = 8,
	BackendUnblockPlayer                     = 9,
	PlatformBlockPlayer                      = 10,
	PlatformUnblockPlayer                    = 11,
	ShowName                                 = 12,
	HideName                                 = 13,
	AddBot                                   = 14,
	RemoveBot                                = 15,
	EditBot                                  = 16,
	AddFriend                                = 17,
	Report                                   = 18,
	ESocialPlayerOption_MAX                  = 19,
};

// Enum DBDSharedTypes.EMenuOpened
// NumValues: 0x0004
enum class EMenuOpened : uint8
{
	MainMenu                                 = 0,
	PlaySubMenu                              = 1,
	LTESubMenu                               = 2,
	EMenuOpened_MAX                          = 3,
};

// Enum DBDSharedTypes.EStorePackType
// NumValues: 0x0005
enum class EStorePackType : uint8
{
	None                                     = 0,
	Special                                  = 1,
	Chapter                                  = 2,
	Heritage                                 = 3,
	EStorePackType_MAX                       = 4,
};

// Enum DBDSharedTypes.ECustomizationCategory
// NumValues: 0x000C
enum class ECustomizationCategory : uint8
{
	None                                     = 0,
	SurvivorHead                             = 1,
	SurvivorTorso                            = 2,
	SurvivorLegs                             = 3,
	KillerHead                               = 4,
	KillerBody                               = 5,
	KillerWeapon                             = 6,
	Outfits                                  = 7,
	Charm                                    = 8,
	Badge                                    = 9,
	Banner                                   = 10,
	ECustomizationCategory_MAX               = 11,
};

// Enum DBDSharedTypes.ESortingOrder
// NumValues: 0x0003
enum class ESortingOrder : uint8
{
	Descending                               = 0,
	Ascending                                = 1,
	ESortingOrder_MAX                        = 2,
};

// Enum DBDSharedTypes.ESortingOption
// NumValues: 0x000D
enum class ESortingOption : uint16
{
	None                                     = 0,
	ByRarity                                 = 1,
	ByDate                                   = 2,
	ByName                                   = 4,
	ByOwnership                              = 8,
	ByPrice                                  = 16,
	ByReleaseImportance                      = 32,
	ByCanBePlayerWith                        = 64,
	ByCompletion                             = 128,
	ByHighestReward                          = 256,
	ByRole                                   = 512,
	ByChallengeOrder                         = 1024,
	ESortingOption_MAX                       = 1025,
};

// Enum DBDSharedTypes.EHelpType
// NumValues: 0x0004
enum class EHelpType : uint8
{
	General                                  = 0,
	Survivor                                 = 1,
	Killer                                   = 2,
	EHelpType_MAX                            = 3,
};

// Enum DBDSharedTypes.EGameType
// NumValues: 0x000F
enum class EGameType : uint8
{
	Online                                   = 0,
	KillYourFriends                          = 1,
	Tutorial                                 = 4,
	TutorialBotMatch                         = 5,
	SecretBotMatch                           = 6,
	DreadByDaylight                          = 10,
	Cake                                     = 11,
	ChocolateBox                             = 12,
	SeasonalEvent                            = 13,
	Calamari                                 = 14,
	Firefly                                  = 15,
	SeasonalEvent_FuelGenerator              = 16,
	MapShowcase                              = 17,
	None                                     = 20,
	EGameType_MAX                            = 21,
};

// Enum DBDSharedTypes.EItemSourceTag
// NumValues: 0x0008
enum class EItemSourceTag : uint8
{
	None                                     = 0,
	Event                                    = 1,
	Icon                                     = 2,
	Licensed                                 = 4,
	Prestige                                 = 8,
	Community                                = 16,
	Rift                                     = 32,
	EItemSourceTag_MAX                       = 33,
};

// Enum DBDSharedTypes.EItemRarity
// NumValues: 0x0012
enum class EItemRarity : uint8
{
	Common                                   = 0,
	Uncommon                                 = 1,
	Rare                                     = 2,
	VeryRare                                 = 3,
	UltraRare                                = 4,
	Ascended                                 = 5,
	Artifact                                 = 6,
	Spectral                                 = 7,
	Teachable                                = 8,
	SpecialEvent                             = 9,
	Legendary                                = 10,
	Visceral                                 = 11,
	Epic                                     = 12,
	SuperEpic                                = 13,
	UltraEpic                                = 14,
	Count                                    = 15,
	None                                     = 16,
	EItemRarity_MAX                          = 17,
};

// Enum DBDSharedTypes.EPopupButtonType
// NumValues: 0x0004
enum class EPopupButtonType : uint8
{
	Regression                               = 0,
	Progression                              = 1,
	Alternative                              = 2,
	EPopupButtonType_MAX                     = 3,
};

// Enum DBDSharedTypes.EDisabledItemOption
// NumValues: 0x0005
enum class EDisabledItemOption : uint8
{
	Available                                = 0,
	DisabledByGameType                       = 1,
	KillSwitchedByGameType                   = 2,
	KillSwitched                             = 3,
	EDisabledItemOption_MAX                  = 4,
};

// Enum DBDSharedTypes.EItemAvailability
// NumValues: 0x0004
enum class EItemAvailability : uint8
{
	Available                                = 0,
	Disabled                                 = 1,
	Retired                                  = 2,
	EItemAvailability_MAX                    = 3,
};

// Enum DBDSharedTypes.EInventoryItemType
// NumValues: 0x0014
enum class EInventoryItemType : uint8
{
	None                                     = 0,
	Item                                     = 1,
	ItemAddOn                                = 2,
	CamperPerk                               = 3,
	Power                                    = 4,
	PowerAddOn                               = 5,
	SlasherPerk                              = 6,
	Favor                                    = 7,
	Customization                            = 8,
	IridescentShardsPack                     = 9,
	AuricCellsPack                           = 10,
	BloodPointsPack                          = 11,
	FreeTicket                               = 12,
	Skill                                    = 13,
	CharacterClass                           = 14,
	Chest                                    = 15,
	SuperChest                               = 16,
	EntityBox                                = 17,
	Count                                    = 18,
	EInventoryItemType_MAX                   = 19,
};

// Enum DBDSharedTypes.EControlMode
// NumValues: 0x0009
enum class EControlMode : uint8
{
	MOUSE_KB                                 = 0,
	XBOX                                     = 1,
	PS                                       = 2,
	VITA                                     = 3,
	SWITCH                                   = 4,
	SWITCH_PRO                               = 5,
	ATLANTA                                  = 6,
	UNDEFINED                                = 7,
	EControlMode_MAX                         = 8,
};

// Enum DBDSharedTypes.EDBDFeatureType
// NumValues: 0x000B
enum class EDBDFeatureType : uint8
{
	None                                     = 0,
	Archives                                 = 1,
	Rift                                     = 2,
	CustomGame                               = 3,
	Bloodweb                                 = 4,
	Offerings                                = 5,
	Items                                    = 6,
	Addons                                   = 7,
	EventStore                               = 8,
	LTE                                      = 9,
	EDBDFeatureType_MAX                      = 10,
};

// Enum DBDSharedTypes.EInputInteractionType
// NumValues: 0x0040
enum class EInputInteractionType : uint8
{
	VE_None                                  = 0,
	VE_Interact                              = 1,
	VE_ItemUse                               = 2,
	VE_FastInteract                          = 3,
	VE_AttackInteract                        = 4,
	VE_ItemInteract                          = 5,
	VE_Rush                                  = 6,
	VE_AbilityUse                            = 7,
	VE_ActivatablePerk01                     = 8,
	VE_ActivatablePerk02                     = 9,
	VE_ActivatablePerk03                     = 10,
	VE_ActivatablePerk04                     = 11,
	VE_Run                                   = 12,
	VE_ItemDrop                              = 13,
	VE_InteractMash                          = 14,
	VE_Struggle                              = 15,
	VE_AbilityTwo                            = 16,
	VE_EventAbility                          = 17,
	VE_Action                                = 18,
	VE_Crouch                                = 19,
	VE_ActionKiller                          = 20,
	VE_CancelCharge                          = 21,
	VE_WiggleLeft                            = 22,
	VE_WiggleRight                           = 23,
	VE_SecondaryAction                       = 24,
	VE_Gesture01                             = 25,
	VE_Gesture02                             = 26,
	VE_Gesture03                             = 27,
	VE_Gesture04                             = 28,
	VE_DirectionalInputRight                 = 29,
	VE_DirectionalInputLeft                  = 30,
	VE_ExternalChainBlink                    = 31,
	VE_ExternalRequestLockerExitFast         = 32,
	VE_ExternalRequestLockerStun             = 33,
	VE_ExternalRequestDestroyWithPowerAttack = 34,
	VE_ExternalRequestDrop                   = 35,
	VE_ExternalRequestDropBySkillCheck       = 36,
	VE_ExternalRequestDropByStunning         = 37,
	VE_ExternalRequestDropByStunningWithFlashlight = 38,
	VE_ExternalRequestDropByStunningByPallet = 39,
	VE_ExternalRequestDropByWiggleFree       = 40,
	VE_ExternalRequestEscape                 = 41,
	VE_ExternalRequestFlashlightStunUncloak  = 42,
	VE_ExternalRequestGeneratorTrapStun      = 43,
	VE_ExternalRequestHalloweenHauntStun     = 44,
	VE_ExternalRequestHarpoonRifleStun       = 45,
	VE_ExternalRequestKickStun               = 46,
	VE_ExternalRequestKillerCaughtInBearTrap = 47,
	VE_ExternalRequestPalletStun             = 48,
	VE_ExternalRequestPalletStunUncloak      = 49,
	VE_ExternalRequestPutToSleepStun         = 50,
	VE_ExternalRequestRBTExecute             = 51,
	VE_ExternalRequestSacrifice              = 52,
	VE_ExternalRequestSlashedOutOfTrap       = 53,
	VE_ExternalRequestStun                   = 54,
	VE_ExternalRequestStunBySkillCheck       = 55,
	VE_ExternalRequestStunEvilWithin         = 56,
	VE_ExternalRequestStunUncloak            = 57,
	VE_ExternalRequestK32TeleportToSurvivor  = 58,
	VE_ExternalRequestSendToCage             = 59,
	VE_ExternalRequestStunByMeatShield       = 60,
	VE_ExternalRequestDropByMeatShield       = 61,
	VE_Count                                 = 62,
	VE_MAX                                   = 63,
};

// Enum DBDSharedTypes.ELoadoutItemType
// NumValues: 0x000A
enum class ELoadoutItemType : uint8
{
	None                                     = 0,
	Medkit                                   = 1,
	Toolbox                                  = 2,
	Flashlight                               = 3,
	Key                                      = 4,
	Map                                      = 5,
	Firecracker                              = 6,
	Flashbang                                = 7,
	Count                                    = 8,
	ELoadoutItemType_MAX                     = 9,
};

// Enum DBDSharedTypes.EGameState
// NumValues: 0x000D
enum class EGameState : uint8
{
	VE_Active                                = 0,
	VE_Killed                                = 1,
	VE_Escaped                               = 2,
	VE_EscapedInjured                        = 3,
	VE_Sacrificed                            = 4,
	VE_None                                  = 5,
	VE_Disconnected                          = 6,
	VE_ManuallyLeftMatch                     = 7,
	VE_BledOut                               = 8,
	VE_SurrenderLoss                         = 9,
	VE_SurrenderDraw                         = 10,
	VE_SurrenderWin                          = 11,
	VE_MAX                                   = 12,
};

// Enum DBDSharedTypes.EDetectionZone
// NumValues: 0x0010
enum class EDetectionZone : uint8
{
	VE_None                                  = 0,
	VE_Slash                                 = 1,
	VE_Pounce                                = 2,
	VE_Chainsaw                              = 3,
	VE_Obstructed                            = 4,
	VE_Interruption                          = 5,
	VE_ChainsawLockExtended                  = 6,
	VE_Damage                                = 7,
	VE_ChainsawObstruction                   = 8,
	VE_Blink                                 = 9,
	VE_ChainsawDamageExtended                = 10,
	VE_Stalker                               = 11,
	VE_Lunge                                 = 12,
	VE_PowerAttack                           = 13,
	VE_Max                                   = 14,
	VE_Max_0                                 = 15,
};

// Enum DBDSharedTypes.EInteractionAnimation
// NumValues: 0x001D
enum class EInteractionAnimation : uint8
{
	VE_None                                  = 0,
	VE_Generator                             = 1,
	VE_PullDownLeft                          = 2,
	VE_PullDownRight                         = 3,
	VE_Hiding                                = 4,
	VE_SearchCloset                          = 5,
	VE_HealingOther                          = 6,
	VE_OpenEscape                            = 7,
	VE_StruggleFree                          = 8,
	VE_HealOther                             = 9,
	VE_HealSelf                              = 10,
	VE_PickedUp                              = 11,
	VE_Unused01                              = 12,
	VE_Dropped                               = 13,
	VE_Unused02                              = 14,
	VE_BeingHooked                           = 15,
	VE_Sabotage                              = 16,
	VE_ChargeBlink                           = 17,
	VE_ThrowFirecracker                      = 18,
	VE_WakeUpOther                           = 19,
	VE_RemoveReverseBearTrap                 = 20,
	VE_DestroyPortal                         = 21,
	VE_OniDash                               = 22,
	VE_K34SliceAndDiceDash                   = 23,
	VE_PickUpAnniversaryCrown                = 24,
	VE_InteractWithGlyph                     = 25,
	VE_InteractWithUnstableRift              = 26,
	VE_OpenChest                             = 27,
	VE_MAX                                   = 28,
};

// Enum DBDSharedTypes.EPawnType
// NumValues: 0x0005
enum class EPawnType : uint8
{
	VE_None                                  = 0,
	VE_Killer                                = 1,
	VE_Survivor                              = 2,
	VE_Sidekick                              = 3,
	VE_MAX                                   = 4,
};

// Enum DBDSharedTypes.EPlayerTeam
// NumValues: 0x0004
enum class EPlayerTeam : uint8
{
	VE_None                                  = 0,
	VE_Killer                                = 1,
	VE_Survivor                              = 2,
	VE_MAX                                   = 3,
};

// Enum DBDSharedTypes.EAnimNotifyType
// NumValues: 0x0004
enum class EAnimNotifyType : uint8
{
	VE_None                                  = 0,
	VE_Pickup                                = 1,
	VE_Release                               = 2,
	VE_MAX                                   = 3,
};

// Enum DBDSharedTypes.EAttackSubstate
// NumValues: 0x0009
enum class EAttackSubstate : uint8
{
	VE_None                                  = 0,
	VE_Open                                  = 1,
	VE_Hitting                               = 2,
	VE_HitSucceed                            = 3,
	VE_HitBreak                              = 4,
	VE_HitMiss                               = 5,
	VE_HitObstructed                         = 6,
	VE_Done                                  = 7,
	VE_MAX                                   = 8,
};

// Enum DBDSharedTypes.ECamperState
// NumValues: 0x0004
enum class ECamperState : uint8
{
	VE_None                                  = 0,
	VE_Navigate                              = 1,
	VE_Interact                              = 2,
	VE_MAX                                   = 3,
};

// Enum DBDSharedTypes.EAttackType
// NumValues: 0x0017
enum class EAttackType : uint8
{
	VE_None                                  = 0,
	VE_Slash                                 = 1,
	VE_Pounce                                = 2,
	VE_Chainsaw                              = 3,
	VE_Blink                                 = 4,
	VE_LFChainsaw                            = 5,
	VE_Ambush                                = 6,
	VE_Frenzy                                = 7,
	VE_GhostCrouch                           = 8,
	VE_QatarDash                             = 9,
	VE_OniBasicAttack                        = 10,
	VE_OniDemonBasicAttack                   = 11,
	VE_OniDemonPowerAttack                   = 12,
	VE_OniDemonDashAttack                    = 13,
	VE_ExecutionerTormentAttack              = 14,
	VE_BlightDash                            = 15,
	VE_TwinJump                              = 16,
	VE_K24BasicAttack                        = 17,
	VE_K24WhipAttack                         = 18,
	VE_K33TailAttack                         = 19,
	VE_K34SliceAndDiceAttack                 = 20,
	VE_K37WolfBiteAttack                     = 21,
	VE_MAX                                   = 22,
};

// Enum DBDSharedTypes.EStunType
// NumValues: 0x000E
enum class EStunType : uint8
{
	VE_None                                  = 0,
	VE_Pallet                                = 1,
	VE_BearTrap                              = 2,
	VE_Flashlight                            = 3,
	VE_WiggleFree                            = 4,
	VE_EvilWithin                            = 5,
	VE_Kicked                                = 6,
	VE_Locker                                = 7,
	VE_HarpoonRifle                          = 8,
	VE_GeneratorTrap                         = 9,
	VE_HalloweenHaunt                        = 10,
	VE_GenericStun                           = 11,
	VE_MeatShieldStun                        = 12,
	VE_MAX                                   = 13,
};

// Enum DBDSharedTypes.EKillerAbilities
// NumValues: 0x002C
enum class EKillerAbilities : uint8
{
	VE_None                                  = 0,
	VE_SpawnTraps                            = 1,
	VE_Cloak                                 = 2,
	VE_Chainsaw                              = 3,
	VE_Blink                                 = 4,
	VE_PhantomTrap                           = 5,
	VE_Stalker                               = 6,
	VE_Killer07Ability                       = 7,
	VE_Killer08Ability                       = 8,
	VE_LFChainsaw                            = 9,
	VE_InduceDreams                          = 10,
	VE_ReverseBearTrap                       = 11,
	VE_GasBomb                               = 12,
	VE_PhaseWalk                             = 13,
	VE_Frenzy                                = 14,
	VE_Vomit                                 = 15,
	VE_GhostStalker                          = 16,
	VE_GroundPortals                         = 17,
	VE_DemonMode                             = 18,
	VE_HarpoonRifle                          = 19,
	VE_TormentMode                           = 20,
	VE_K21Power                              = 21,
	VE_K22Power                              = 22,
	VE_ThrowingKnives                        = 23,
	VE_K24Power                              = 24,
	VE_Zombies                               = 25,
	VE_K25Power                              = 26,
	VE_K26Power                              = 27,
	VE_OnryoPower                            = 28,
	VE_K28Power                              = 29,
	VE_K29Power                              = 30,
	VE_K30Power                              = 31,
	VE_K31Power                              = 32,
	VE_K32Power                              = 33,
	VE_K33Power                              = 34,
	VE_K34Power                              = 35,
	VE_K35Power                              = 36,
	VE_K36Power                              = 37,
	VE_K37Power                              = 38,
	VE_K38Power                              = 39,
	VE_ComboPower                            = 40,
	VE_K39Power                              = 41,
	VE_K40Power                              = 42,
	VE_MAX                                   = 43,
};

// Enum DBDSharedTypes.ESkillCheckCustomType
// NumValues: 0x0013
enum class ESkillCheckCustomType : uint8
{
	VE_None                                  = 0,
	VE_OnPickedUp                            = 1,
	VE_OnAttacked                            = 2,
	VE_DecisiveStrikeWhileWiggling           = 3,
	VE_GeneratorOvercharge1                  = 4,
	VE_GeneratorOvercharge2                  = 5,
	VE_GeneratorOvercharge3                  = 6,
	VE_BrandNewPart                          = 7,
	VE_Struggle                              = 8,
	VE_OppressionPerkGeneratorKicked         = 9,
	VE_SoulChemical                          = 10,
	VE_Wiggle                                = 11,
	VE_YellowGlyph                           = 12,
	VE_K27P03Continuous                      = 13,
	VE_Continuous                            = 14,
	VE_S42P02                                = 15,
	VE_K38P03Continuous                      = 16,
	VE_SnapOutOfIt                           = 17,
	VE_MAX                                   = 18,
};

// Enum DBDSharedTypes.EAudioCustomizationCategory
// NumValues: 0x000B
enum class EAudioCustomizationCategory : uint8
{
	None                                     = 0,
	AudioCharacterName                       = 1,
	AudioCharacterSubName                    = 2,
	AudioCharacterHead                       = 3,
	AudioCharacterClothes                    = 4,
	AudioCharacterShoes                      = 5,
	AudioCharacterWeapon                     = 6,
	AudioCharacterAmbiance                   = 7,
	AudioCharacterState                      = 8,
	AudioCharacterCollection                 = 9,
	EAudioCustomizationCategory_MAX          = 10,
};

// Enum DBDSharedTypes.ELeanState
// NumValues: 0x0004
enum class ELeanState : uint8
{
	NotLeaning                               = 0,
	LeanLeft                                 = 1,
	LeanRight                                = 2,
	ELeanState_MAX                           = 3,
};

// Enum DBDSharedTypes.EDirectionalMiniGameType
// NumValues: 0x0004
enum class EDirectionalMiniGameType : uint8
{
	None                                     = 0,
	SkullMerchant                            = 1,
	Wormhole                                 = 2,
	EDirectionalMiniGameType_MAX             = 3,
};

// Enum DBDSharedTypes.EDirectionalInputKey
// NumValues: 0x0006
enum class EDirectionalInputKey : uint8
{
	VE_INVALID                               = 0,
	VE_UP                                    = 1,
	VE_DOWN                                  = 2,
	VE_RIGHT                                 = 3,
	VE_LEFT                                  = 4,
	VE_MAX                                   = 5,
};

// Enum DBDSharedTypes.EDirectionalMinigameResult
// NumValues: 0x0004
enum class EDirectionalMinigameResult : uint8
{
	VE_SUCCESS                               = 0,
	VE_FAILED                                = 1,
	VE_CANCELLED                             = 2,
	VE_MAX                                   = 3,
};

// Enum DBDSharedTypes.EAntiAliasingMode
// NumValues: 0x0004
enum class EAntiAliasingMode : uint8
{
	Off                                      = 0,
	FXAA                                     = 1,
	TAA                                      = 2,
	EAntiAliasingMode_MAX                    = 3,
};

// Enum DBDSharedTypes.EArchiveNodeStatus
// NumValues: 0x0007
enum class EArchiveNodeStatus : uint8
{
	Closed                                   = 0,
	Completed                                = 1,
	Open                                     = 2,
	Paused                                   = 3,
	Waiting                                  = 4,
	Error                                    = 5,
	EArchiveNodeStatus_MAX                   = 6,
};

// Enum DBDSharedTypes.EStoryNodeState
// NumValues: 0x0008
enum class EStoryNodeState : uint8
{
	Unavailable                              = 0,
	AvailableDefault                         = 1,
	AvailableActive                          = 2,
	AvailablePaused                          = 3,
	Completed                                = 4,
	Claimed                                  = 5,
	None                                     = 255,
	EStoryNodeState_MAX                      = 256,
};

// Enum DBDSharedTypes.EArchivesStoryLevelStatus
// NumValues: 0x0006
enum class EArchivesStoryLevelStatus : uint8
{
	Locked                                   = 0,
	Unavailable                              = 1,
	Available                                = 2,
	Completed                                = 3,
	Mastered                                 = 4,
	EArchivesStoryLevelStatus_MAX            = 5,
};

// Enum DBDSharedTypes.EArchivesStoryLevelAnimationType
// NumValues: 0x0003
enum class EArchivesStoryLevelAnimationType : uint8
{
	Completed                                = 0,
	Mastered                                 = 1,
	EArchivesStoryLevelAnimationType_MAX     = 2,
};

// Enum DBDSharedTypes.EArchivesEventStyle
// NumValues: 0x0003
enum class EArchivesEventStyle : uint8
{
	None                                     = 0,
	Halloween                                = 1,
	EArchivesEventStyle_MAX                  = 2,
};

// Enum DBDSharedTypes.EChallengeSetType
// NumValues: 0x0006
enum class EChallengeSetType : uint8
{
	None                                     = 0,
	Event                                    = 1,
	Daily                                    = 2,
	BattlePass                               = 3,
	Milestone                                = 4,
	EChallengeSetType_MAX                    = 5,
};

// Enum DBDSharedTypes.EChallengeType
// NumValues: 0x0006
enum class EChallengeType : uint8
{
	Basic                                    = 0,
	Dual                                     = 1,
	Recurring                                = 2,
	Milestone                                = 3,
	Overarching                              = 4,
	EChallengeType_MAX                       = 5,
};

// Enum DBDSharedTypes.EChallengeTrackerNotificationMode
// NumValues: 0x0004
enum class EChallengeTrackerNotificationMode : uint8
{
	All                                      = 0,
	Completed                                = 1,
	None                                     = 2,
	EChallengeTrackerNotificationMode_MAX    = 3,
};

// Enum DBDSharedTypes.EKillerMatchResult
// NumValues: 0x0005
enum class EKillerMatchResult : uint8
{
	EntityDispleased                         = 0,
	BrutalKiller                             = 1,
	RuthlessKiller                           = 2,
	MercilessKiller                          = 3,
	EKillerMatchResult_MAX                   = 4,
};

// Enum DBDSharedTypes.EProgressValueDisplayColor
// NumValues: 0x0004
enum class EProgressValueDisplayColor : uint8
{
	NotSpecified                             = 0,
	White                                    = 1,
	Red                                      = 2,
	EProgressValueDisplayColor_MAX           = 3,
};

// Enum DBDSharedTypes.EEmblemEvaluation
// NumValues: 0x0003
enum class EEmblemEvaluation : uint8
{
	Authority                                = 0,
	Local                                    = 1,
	EEmblemEvaluation_MAX                    = 2,
};

// Enum DBDSharedTypes.EEmblemQuality
// NumValues: 0x0007
enum class EEmblemQuality : uint8
{
	None                                     = 0,
	Bronze                                   = 1,
	Silver                                   = 2,
	Gold                                     = 3,
	Iridescent                               = 4,
	Count                                    = 5,
	EEmblemQuality_MAX                       = 6,
};

// Enum DBDSharedTypes.EEmblemProgressionType
// NumValues: 0x002C
enum class EEmblemProgressionType : uint8
{
	SurvivorLightbringerStartingValue        = 0,
	SurvivorLightbringerGeneratorRepair      = 1,
	SurvivorLightbringerTotemCleanse         = 2,
	SurvivorLightbringerTotemBless           = 3,
	SurvivorLightbringerKillerDiversion      = 4,
	SurvivorLightbringerExitGameOpen         = 5,
	SurvivorLightbringerInvocationProgress   = 6,
	SurvivorUnbrokenTimeAlive                = 7,
	SurvivorBenevolentStartingValue          = 8,
	SurvivorBenevolentHealing                = 9,
	SurvivorBenevolentHooked                 = 10,
	SurvivorBenevolentUnhook                 = 11,
	SurvivorBenevolentPerformUnhook          = 12,
	SurvivorBenevolentSaveFromKiller         = 13,
	SurvivorBenevolentUnsafeUnhook           = 14,
	SurvivorBenevolentHitWhileCarrying       = 15,
	SurvivorEvaderStartingValue              = 16,
	SurvivorEvaderSneaking                   = 17,
	SurvivorEvaderChaseWon                   = 18,
	SurvivorEvaderChaseLost                  = 19,
	SurvivorEvaderPalletStun                 = 20,
	KillerGatekeeperStartingValue            = 21,
	KillerGatekeeperGeneratorDefense         = 22,
	KillerGatekeeperGatesClosed              = 23,
	KillerDevoutStartingValue                = 24,
	KillerDevoutSacrifice                    = 25,
	KillerDevoutDisconnect                   = 26,
	KillerDevoutMoris                        = 27,
	KillerDevoutAllSurvivorsHooked           = 28,
	KillerDevoutHooksBonus                   = 29,
	KillerMaliciousStartingValue             = 30,
	KillerMaliciousInjuries                  = 31,
	KillerMaliciousHookStages                = 32,
	KillerMaliciousInjuriesHealed            = 33,
	KillerMaliciousEscapeGrasp               = 34,
	KillerMaliciousDisconnect                = 35,
	KillerChaserStartingValue                = 36,
	KillerChaserSurvivorFound                = 37,
	KillerChaserSurvivorLost                 = 38,
	KillerChaserHit                          = 39,
	KillerChaserChaseWon                     = 40,
	KillerChaserProximityToHookPenalty       = 41,
	Invalid                                  = 42,
	EEmblemProgressionType_MAX               = 43,
};

// Enum DBDSharedTypes.ESurrenderType
// NumValues: 0x0007
enum class ESurrenderType : uint8
{
	None                                     = 0,
	Unknown                                  = 1,
	NoGeneratorCompleted                     = 2,
	OnlyBotsOnOpposingRole                   = 3,
	AllRemainingSurvivorsInDyingState        = 4,
	OnlyOneHumanSurvivor                     = 5,
	ESurrenderType_MAX                       = 6,
};

// Enum DBDSharedTypes.EBlindType
// NumValues: 0x0005
enum class EBlindType : uint8
{
	VE_None                                  = 0,
	VE_Flashlight                            = 1,
	VE_SacrificeSuspended                    = 2,
	VE_Firecracker                           = 3,
	VE_MAX                                   = 4,
};

// Enum DBDSharedTypes.EAttackSuccess
// NumValues: 0x0005
enum class EAttackSuccess : uint8
{
	VE_None                                  = 0,
	VE_Success                               = 1,
	VE_Failure                               = 2,
	VE_Obstructed                            = 3,
	VE_MAX                                   = 4,
};

// Enum DBDSharedTypes.EGender
// NumValues: 0x0006
enum class EGender : uint8
{
	VE_Male                                  = 0,
	VE_Female                                = 1,
	VE_Multiple                              = 2,
	VE_NotHuman                              = 3,
	VE_Undefined                             = 4,
	VE_MAX                                   = 5,
};

// Enum DBDSharedTypes.ECharacterDifficulty
// NumValues: 0x0006
enum class ECharacterDifficulty : uint8
{
	VE_None                                  = 0,
	VE_Easy                                  = 1,
	VE_Intermediate                          = 2,
	VE_Hard                                  = 3,
	VE_VeryHard                              = 4,
	VE_MAX                                   = 5,
};

// Enum DBDSharedTypes.EDBDScoreCategory
// NumValues: 0x0012
enum class EDBDScoreCategory : uint8
{
	DBD_CamperScoreCat_Objectives            = 0,
	DBD_CamperScoreCat_Survival              = 1,
	DBD_CamperScoreCat_Altruism              = 2,
	DBD_CamperScoreCat_Boldness              = 3,
	DBD_SlasherScoreCat_Brutality            = 4,
	DBD_SlasherScoreCat_Deviousness          = 5,
	DBD_SlasherScoreCat_Hunter               = 6,
	DBD_SlasherScoreCat_Sacrifice            = 7,
	DBD_CamperScoreCat_Untracked             = 8,
	DBD_CamperScoreCat_Streak                = 9,
	DBD_ScoreCat_SpecialEvents               = 10,
	DBD_ScoreCat_Bonus                       = 11,
	DBD_ScoreCat_MatchIncentive              = 12,
	DBD_ScoreCat_ModeBonus                   = 13,
	DBD_ScoreCat_BonusEvents                 = 14,
	DBD_ScoreCat_EmblemBonus                 = 15,
	Count                                    = 16,
	EDBDScoreCategory_MAX                    = 17,
};

// Enum DBDSharedTypes.EEffectAppliedOn
// NumValues: 0x0005
enum class EEffectAppliedOn : uint8
{
	Killer                                   = 0,
	Survivor                                 = 1,
	Both                                     = 2,
	Interactable                             = 3,
	EEffectAppliedOn_MAX                     = 4,
};

// Enum DBDSharedTypes.EEffectCardType
// NumValues: 0x0004
enum class EEffectCardType : uint8
{
	Neutral                                  = 0,
	Good                                     = 1,
	Bad                                      = 2,
	EEffectCardType_MAX                      = 3,
};

// Enum DBDSharedTypes.EEffectCardState
// NumValues: 0x0005
enum class EEffectCardState : uint8
{
	Current                                  = 0,
	Previous                                 = 1,
	Next                                     = 2,
	Future                                   = 3,
	EEffectCardState_MAX                     = 4,
};

// Enum DBDSharedTypes.ELoadingTransitionType
// NumValues: 0x0004
enum class ELoadingTransitionType : uint8
{
	TravelToMainMenu                         = 0,
	TravelToInGame                           = 1,
	TravelToSplash                           = 2,
	ELoadingTransitionType_MAX               = 3,
};

// Enum DBDSharedTypes.EEventObjectiveItemState
// NumValues: 0x0009
enum class EEventObjectiveItemState : uint8
{
	Inactive                                 = 0,
	Active                                   = 1,
	Usable                                   = 2,
	Cooldown                                 = 3,
	Rewarded                                 = 4,
	Lost                                     = 5,
	CanPickUp                                = 6,
	Blocked                                  = 7,
	EEventObjectiveItemState_MAX             = 8,
};

// Enum DBDSharedTypes.EFPSLimit
// NumValues: 0x0008
enum class EFPSLimit : uint8
{
	Off                                      = 0,
	Limit30                                  = 30,
	Limit59                                  = 59,
	Limit60                                  = 60,
	Limit90                                  = 90,
	Limit120                                 = 120,
	Default                                  = 60,
	EFPSLimit_MAX                            = 121,
};

// Enum DBDSharedTypes.EFriendshipStatus
// NumValues: 0x0005
enum class EFriendshipStatus : uint8
{
	None                                     = 0,
	RequestSent                              = 1,
	RequestReceived                          = 2,
	Friend                                   = 3,
	EFriendshipStatus_MAX                    = 4,
};

// Enum DBDSharedTypes.EFriendSuggestionType
// NumValues: 0x0004
enum class EFriendSuggestionType : uint8
{
	None                                     = 0,
	Facebook                                 = 1,
	Google                                   = 2,
	EFriendSuggestionType_MAX                = 3,
};

// Enum DBDSharedTypes.EStatusEffectType
// NumValues: 0x0005
enum class EStatusEffectType : uint8
{
	None                                     = 0,
	Buff                                     = 1,
	Debuff                                   = 2,
	Count                                    = 3,
	EStatusEffectType_MAX                    = 4,
};

// Enum DBDSharedTypes.EMatchingStatusEffectType
// NumValues: 0x0006
enum class EMatchingStatusEffectType : uint8
{
	None                                     = 0,
	Buff                                     = 1,
	Debuff                                   = 2,
	Any                                      = 3,
	Count                                    = 4,
	EMatchingStatusEffectType_MAX            = 5,
};

// Enum DBDSharedTypes.EStatusEffectTarget
// NumValues: 0x0008
enum class EStatusEffectTarget : uint8
{
	Self                                     = 0,
	AllSurvivors                             = 1,
	AllSurvivorsExceptOriginatingPlayer      = 2,
	OtherSurvivors                           = 3,
	AllKillers                               = 4,
	OtherKillers                             = 5,
	AllPlayer                                = 6,
	EStatusEffectTarget_MAX                  = 7,
};

// Enum DBDSharedTypes.EBarColor
// NumValues: 0x0004
enum class EBarColor : uint8
{
	Default                                  = 0,
	Yellow                                   = 1,
	Red                                      = 2,
	EBarColor_MAX                            = 3,
};

// Enum DBDSharedTypes.EHudScreenIndicatorType
// NumValues: 0x0008
enum class EHudScreenIndicatorType : uint8
{
	None                                     = 0,
	LoudNoise                                = 1,
	StealthBroken                            = 2,
	Objective                                = 3,
	TerrorRadiusVisualFeedback               = 4,
	K33NoiseDetection                        = 5,
	Accessibility                            = 6,
	EHudScreenIndicatorType_MAX              = 7,
};

// Enum DBDSharedTypes.EHudParentContainerType
// NumValues: 0x0004
enum class EHudParentContainerType : uint8
{
	Widget                                   = 0,
	Outer                                    = 1,
	Spectate                                 = 2,
	EHudParentContainerType_MAX              = 3,
};

// Enum DBDSharedTypes.EInteractionLayer
// NumValues: 0x0003
enum class EInteractionLayer : uint8
{
	VE_Camper                                = 0,
	VE_Slasher                               = 1,
	VE_MAX                                   = 2,
};

// Enum DBDSharedTypes.ECustomizationModifier
// NumValues: 0x0005
enum class ECustomizationModifier : uint8
{
	None                                     = 0,
	Variant                                  = 1,
	Bloodstained                             = 2,
	Count                                    = 3,
	ECustomizationModifier_MAX               = 4,
};

// Enum DBDSharedTypes.ECustomizationSpecialProperty
// NumValues: 0x000D
enum class ECustomizationSpecialProperty : uint16
{
	None                                     = 0,
	UniqueMori                               = 1,
	PowerChange                              = 2,
	UniqueThemeMusic                         = 4,
	NewVoice                                 = 8,
	NewVoiceLinesInMenu                      = 16,
	NewVoiceLinesInMatch                     = 32,
	SpecialVFX                               = 64,
	UniqueMenuAnimation                      = 128,
	ModelChange                              = 256,
	UnlocksCosmetics                         = 512,
	SpecialSFX                               = 1024,
	ECustomizationSpecialProperty_MAX        = 1025,
};

// Enum DBDSharedTypes.ELoadoutPartState
// NumValues: 0x0007
enum class ELoadoutPartState : uint8
{
	None                                     = 0,
	Default                                  = 1,
	InProgress                               = 2,
	Ready                                    = 3,
	Active                                   = 4,
	Vanished                                 = 5,
	ELoadoutPartState_MAX                    = 6,
};

// Enum DBDSharedTypes.EItemSorting
// NumValues: 0x0004
enum class EItemSorting : uint8
{
	ByRarity                                 = 0,
	ByParentOutfitName                       = 1,
	ByItemName                               = 2,
	EItemSorting_MAX                         = 3,
};

// Enum DBDSharedTypes.EKillerHeight
// NumValues: 0x0004
enum class EKillerHeight : uint8
{
	Short                                    = 0,
	Average                                  = 1,
	Tall                                     = 2,
	EKillerHeight_MAX                        = 3,
};

// Enum DBDSharedTypes.ELoadoutTypePermission
// NumValues: 0x0006
enum class ELoadoutTypePermission : uint8
{
	Forbidden                                = 0,
	Inventory                                = 1,
	Allowed                                  = 2,
	Locked                                   = 3,
	Random                                   = 4,
	ELoadoutTypePermission_MAX               = 5,
};

// Enum DBDSharedTypes.EOnboardingStepStatus
// NumValues: 0x0004
enum class EOnboardingStepStatus : uint8
{
	Unavailable                              = 0,
	Open                                     = 1,
	Completed                                = 2,
	EOnboardingStepStatus_MAX                = 3,
};

// Enum DBDSharedTypes.EOnboardingTutorialButtonStyle
// NumValues: 0x0006
enum class EOnboardingTutorialButtonStyle : uint8
{
	Default                                  = 0,
	Survivor                                 = 1,
	Killer                                   = 2,
	Reward                                   = 3,
	GoToMainMenu                             = 4,
	EOnboardingTutorialButtonStyle_MAX       = 5,
};

// Enum DBDSharedTypes.EOnboardingTutorialType
// NumValues: 0x0005
enum class EOnboardingTutorialType : uint8
{
	TutorialLevel                            = 0,
	BotMatchLevel                            = 1,
	FinalReward                              = 2,
	GoToMainMenu                             = 3,
	EOnboardingTutorialType_MAX              = 4,
};

// Enum DBDSharedTypes.EConnectionQuality
// NumValues: 0x0004
enum class EConnectionQuality : uint8
{
	Good                                     = 0,
	Bad                                      = 1,
	Awful                                    = 2,
	EConnectionQuality_MAX                   = 3,
};

// Enum DBDSharedTypes.EPlayerProfileFilter
// NumValues: 0x0004
enum class EPlayerProfileFilter : uint8
{
	Wallet                                   = 1,
	PlayerName                               = 2,
	PlayerCard                               = 4,
	EPlayerProfileFilter_MAX                 = 5,
};

// Enum DBDSharedTypes.EWalletCurrencyFilter
// NumValues: 0x0006
enum class EWalletCurrencyFilter : uint8
{
	None                                     = 0,
	BloodPoints                              = 1,
	FearTokens                               = 2,
	Cells                                    = 4,
	EventCurrency                            = 8,
	EWalletCurrencyFilter_MAX                = 9,
};

// Enum DBDSharedTypes.EObsessionUIState
// NumValues: 0x0005
enum class EObsessionUIState : uint8
{
	Off                                      = 0,
	Target                                   = 1,
	Chased                                   = 2,
	Dead                                     = 3,
	EObsessionUIState_MAX                    = 4,
};

// Enum DBDSharedTypes.ESleepingUIState
// NumValues: 0x0004
enum class ESleepingUIState : uint8
{
	Off                                      = 0,
	FallingAsleep                            = 1,
	Asleep                                   = 2,
	ESleepingUIState_MAX                     = 3,
};

// Enum DBDSharedTypes.EReverseBearTrapUIState
// NumValues: 0x0004
enum class EReverseBearTrapUIState : uint8
{
	Off                                      = 0,
	Stage1                                   = 1,
	Stage2                                   = 2,
	EReverseBearTrapUIState_MAX              = 3,
};

// Enum DBDSharedTypes.EPlayerStatus
// NumValues: 0x000D
enum class EPlayerStatus : uint8
{
	Default                                  = 0,
	Hook                                     = 1,
	Trap                                     = 2,
	Dead                                     = 3,
	Escaped                                  = 4,
	Injured                                  = 5,
	Carried                                  = 6,
	Crawling                                 = 7,
	Sacrificed                               = 8,
	Disconnected                             = 9,
	InDeathBed                               = 10,
	DogStruggle                              = 11,
	EPlayerStatus_MAX                        = 12,
};

// Enum DBDSharedTypes.EBloodDisplayType
// NumValues: 0x0004
enum class EBloodDisplayType : uint8
{
	Hidden                                   = 0,
	Bottom                                   = 1,
	Top                                      = 2,
	EBloodDisplayType_MAX                    = 3,
};

// Enum DBDSharedTypes.EAfflictionLevel
// NumValues: 0x0005
enum class EAfflictionLevel : uint8
{
	Off                                      = 0,
	Level1                                   = 1,
	Level2                                   = 2,
	Level3                                   = 3,
	EAfflictionLevel_MAX                     = 4,
};

// Enum DBDSharedTypes.ESicknessLevel
// NumValues: 0x0004
enum class ESicknessLevel : uint8
{
	Off                                      = 0,
	InProgress                               = 1,
	Full                                     = 2,
	ESicknessLevel_MAX                       = 3,
};

// Enum DBDSharedTypes.EPlayerStateChangeType
// NumValues: 0x0005
enum class EPlayerStateChangeType : uint8
{
	None                                     = 0,
	Negative                                 = 1,
	Neutral                                  = 2,
	Positive                                 = 3,
	EPlayerStateChangeType_MAX               = 4,
};

// Enum DBDSharedTypes.EPlayerCardAnimationMode
// NumValues: 0x0004
enum class EPlayerCardAnimationMode : uint8
{
	AlwaysAnimate                            = 0,
	AnimateOnHover                           = 1,
	NeverAnimate                             = 2,
	EPlayerCardAnimationMode_MAX             = 3,
};

// Enum DBDSharedTypes.EPlayerStatusTemplate
// NumValues: 0x0003
enum class EPlayerStatusTemplate : uint8
{
	Default                                  = 0,
	Small                                    = 1,
	EPlayerStatusTemplate_MAX                = 2,
};

// Enum DBDSharedTypes.EThemeColorId
// NumValues: 0x0005
enum class EThemeColorId : uint8
{
	Invalid                                  = 0,
	Blue                                     = 1,
	Green                                    = 2,
	Yellow                                   = 3,
	EThemeColorId_MAX                        = 4,
};

// Enum DBDSharedTypes.EArchiveNodeType
// NumValues: 0x0007
enum class EArchiveNodeType : uint8
{
	Narrative                                = 0,
	Task                                     = 1,
	Challenge                                = 2,
	Contextual                               = 3,
	Reward                                   = 4,
	None                                     = 255,
	EArchiveNodeType_MAX                     = 256,
};

// Enum DBDSharedTypes.EQuestProgressionType
// NumValues: 0x0005
enum class EQuestProgressionType : uint8
{
	None                                     = 0,
	Action                                   = 1,
	Percentage                               = 2,
	Time                                     = 3,
	EQuestProgressionType_MAX                = 4,
};

// Enum DBDSharedTypes.EQuestOperationType
// NumValues: 0x0007
enum class EQuestOperationType : uint8
{
	EQ                                       = 0,
	GEQ                                      = 1,
	LEQ                                      = 2,
	G                                        = 3,
	L                                        = 4,
	None                                     = 255,
	EQuestOperationType_MAX                  = 256,
};

// Enum DBDSharedTypes.ERewardType
// NumValues: 0x0008
enum class ERewardType : uint8
{
	None                                     = 0,
	Character                                = 1,
	Currency                                 = 2,
	Customization                            = 3,
	Outfit                                   = 4,
	Progression                              = 5,
	InventoryBundle                          = 6,
	ERewardType_MAX                          = 7,
};

// Enum DBDSharedTypes.EProgressionType
// NumValues: 0x0009
enum class EProgressionType : uint8
{
	None                                     = 0,
	Stars                                    = 1,
	ArchiveRiftPass                          = 2,
	ArchiveRiftTiers                         = 3,
	ChallengeRiftFragments                   = 4,
	ChallengeRiftPass                        = 5,
	ChallengeRewardTrack                     = 6,
	RiftTiers                                = 7,
	EProgressionType_MAX                     = 8,
};

// Enum DBDSharedTypes.ERewardPopupType
// NumValues: 0x0009
enum class ERewardPopupType : uint8
{
	None                                     = 0,
	Currency                                 = 1,
	Progression                              = 2,
	Inventory                                = 3,
	AuricCellsBundle                         = 4,
	Pack                                     = 5,
	RewardList                               = 6,
	Count                                    = 7,
	ERewardPopupType_MAX                     = 8,
};

// Enum DBDSharedTypes.ESecurityCameraState
// NumValues: 0x0007
enum class ESecurityCameraState : uint8
{
	Invalid                                  = 0,
	Inactive                                 = 1,
	Transitioning                            = 2,
	Active                                   = 3,
	Unavailable                              = 4,
	Disabled                                 = 5,
	ESecurityCameraState_MAX                 = 6,
};

// Enum DBDSharedTypes.ESecurityCameraMapState
// NumValues: 0x0006
enum class ESecurityCameraMapState : uint8
{
	Invalid                                  = 0,
	Free                                     = 1,
	CurrentlyObserved                        = 2,
	Occupied                                 = 3,
	Disabled                                 = 4,
	ESecurityCameraMapState_MAX              = 5,
};

// Enum DBDSharedTypes.EOverlayMode
// NumValues: 0x0005
enum class EOverlayMode : uint8
{
	Default                                  = 0,
	TrialOrTally                             = 1,
	TutorialLevel                            = 2,
	TutorialBotMatch                         = 3,
	EOverlayMode_MAX                         = 4,
};

// Enum DBDSharedTypes.EOverlayTabs
// NumValues: 0x0006
enum class EOverlayTabs : uint8
{
	Settings                                 = 0,
	Controls                                 = 1,
	Help                                     = 2,
	Survivors                                = 3,
	CoreTabCount                             = 4,
	EOverlayTabs_MAX                         = 5,
};

// Enum DBDSharedTypes.EDetailsTabLayout
// NumValues: 0x0004
enum class EDetailsTabLayout : uint8
{
	Text_and_image                           = 0,
	Double_texts                             = 1,
	Text_and_EffectCards                     = 2,
	EDetailsTabLayout_MAX                    = 3,
};

// Enum DBDSharedTypes.ESubtitlesPosition
// NumValues: 0x0005
enum class ESubtitlesPosition : uint8
{
	HUD                                      = 0,
	Menus                                    = 1,
	Cinematics                               = 2,
	Splash                                   = 3,
	ESubtitlesPosition_MAX                   = 4,
};

// Enum DBDSharedTypes.ESubtitlesBackgroundOpacity
// NumValues: 0x0005
enum class ESubtitlesBackgroundOpacity : uint8
{
	None                                     = 0,
	Default                                  = 1,
	High                                     = 2,
	Opaque                                   = 3,
	ESubtitlesBackgroundOpacity_MAX          = 4,
};

// Enum DBDSharedTypes.ESubtitlesSize
// NumValues: 0x0005
enum class ESubtitlesSize : uint8
{
	Small                                    = 0,
	Default                                  = 1,
	Large                                    = 2,
	Huge                                     = 3,
	ESubtitlesSize_MAX                       = 4,
};

// Enum DBDSharedTypes.ETutorialObjectivePlayerActionMapping
// NumValues: 0x0016
enum class ETutorialObjectivePlayerActionMapping : uint8
{
	None                                     = 0,
	Action_Camper                            = 1,
	Interact_Camper                          = 2,
	Interact_Slasher                         = 3,
	Run_Camper                               = 4,
	Attack_Slasher                           = 5,
	SecondaryAction_Camper                   = 6,
	AbilityTwo_Camper                        = 7,
	ItemUse_Camper                           = 8,
	Crouch                                   = 9,
	ItemDrop_Camper                          = 10,
	ItemUse_Slasher                          = 11,
	ItemDrop_Slasher                         = 12,
	Mash_Camper                              = 13,
	FastInteract_Camper                      = 14,
	SecondaryAction_Slasher                  = 15,
	Action_Slasher                           = 16,
	Struggle                                 = 17,
	MoveAxes                                 = 18,
	LookAxes                                 = 19,
	Count                                    = 20,
	ETutorialObjectivePlayerActionMapping_MAX = 21,
};

// Enum DBDSharedTypes.EStickerType
// NumValues: 0x0004
enum class EStickerType : uint8
{
	None                                     = 0,
	Emoji                                    = 1,
	Text                                     = 2,
	EStickerType_MAX                         = 3,
};

// Enum DBDSharedTypes.EChatType
// NumValues: 0x0005
enum class EChatType : uint8
{
	None                                     = 0,
	PreGame                                  = 1,
	PostGame                                 = 2,
	Party                                    = 3,
	EChatType_MAX                            = 4,
};

// Enum DBDSharedTypes.ELobbyState
// NumValues: 0x0005
enum class ELobbyState : uint8
{
	Searching                                = 0,
	Joined                                   = 1,
	Offering                                 = 2,
	Fog                                      = 3,
	ELobbyState_MAX                          = 4,
};

// Enum DBDSharedTypes.ETestBuildType
// NumValues: 0x0005
enum class ETestBuildType : uint8
{
	None                                     = 0,
	PublicTestBuild                          = 1,
	PaxBuild                                 = 2,
	ConsolePreAlphaBuild                     = 3,
	ETestBuildType_MAX                       = 4,
};

// Enum DBDSharedTypes.EHudComponent
// NumValues: 0x0019
enum class EHudComponent : uint8
{
	ACTION_PROMPT                            = 0,
	ACTION_PROGRESS_BAR                      = 1,
	GENERATOR_ICON                           = 2,
	HATCH_ICON                               = 3,
	EXIT_ICON                                = 4,
	LOCAL_PLAYER_STATUS                      = 5,
	OTHER_PLAYER_STATUSES                    = 6,
	SURVIVOR_HOOK_COUNT                      = 7,
	CROUCH_BUTTON                            = 8,
	CENTER_INTERACT_BUTTON                   = 9,
	DIRECTIONAL_STICK                        = 10,
	WIGGLE_BUTTONS                           = 11,
	STRUGGLE_BUTTONS                         = 12,
	POWER_BUTTON                             = 13,
	ATTACK_BUTTON                            = 14,
	OBJECTIVES                               = 15,
	LOUD_NOISE_INDICATOR                     = 16,
	SECOND_ABILITY_BUTTON                    = 17,
	ACTION_BUTTON                            = 18,
	CANCEL_BUTTON                            = 19,
	DROP_SURVIVOR_BUTTON                     = 20,
	LOOK_BACK_BUTTON                         = 21,
	CENTER_ITEM_CONTAINER                    = 22,
	MOVEMENT_LOCK                            = 23,
	EHudComponent_MAX                        = 24,
};

// Enum DBDSharedTypes.EPopupPriority
// NumValues: 0x0008
enum class EPopupPriority : uint8
{
	ErrorSystem                              = 0,
	ErrorGameHigh                            = 1,
	ErrorGameLow                             = 2,
	InfoHigh                                 = 3,
	InfoLow                                  = 4,
	ErrorUIThreshold                         = 2,
	LowestPriority                           = 4,
	EPopupPriority_MAX                       = 5,
};

// Enum DBDSharedTypes.ERightStickMode
// NumValues: 0x0004
enum class ERightStickMode : uint8
{
	None                                     = 0,
	Scrolling                                = 1,
	Rotation                                 = 2,
	ERightStickMode_MAX                      = 3,
};

// Enum DBDSharedTypes.EXeSSMode
// NumValues: 0x0009
enum class EXeSSMode : uint8
{
	Off                                      = 0,
	UltraPerformance                         = 1,
	Performance                              = 2,
	Balanced                                 = 3,
	Quality                                  = 4,
	UltraQuality                             = 5,
	UltraQualityPlus                         = 6,
	AntiAliasing                             = 7,
	EXeSSMode_MAX                            = 8,
};

// ScriptStruct DBDSharedTypes.EffectCard
// 0x00F8 (0x0100 - 0x0008)
struct FEffectCard final : public FDBDTableRowBase
{
public:
	class FString                                 _cardId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                   _cardName;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	class FText                                   _cardDescription;                                  // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	class FText                                   _cardSubTitle;                                     // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UTexture2D>              _cardIcon;                                         // 0x0060(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMaterialInstance>       _cardBackground;                                   // 0x0098(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EEffectAppliedOn                              _effectAppliedOn;                                  // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EEffectCardType                               _effectType;                                       // 0x00D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isTimed;                                          // 0x00D2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _timer;                                            // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 _positionsToExclude;                               // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 _positionsToPrioritize;                            // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          _isActive;                                         // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _maxTimesCanBeDrawn;                               // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEffectCard) == 0x000008, "Wrong alignment on FEffectCard");
static_assert(sizeof(FEffectCard) == 0x000100, "Wrong size on FEffectCard");
static_assert(offsetof(FEffectCard, _cardId) == 0x000008, "Member 'FEffectCard::_cardId' has a wrong offset!");
static_assert(offsetof(FEffectCard, _cardName) == 0x000018, "Member 'FEffectCard::_cardName' has a wrong offset!");
static_assert(offsetof(FEffectCard, _cardDescription) == 0x000030, "Member 'FEffectCard::_cardDescription' has a wrong offset!");
static_assert(offsetof(FEffectCard, _cardSubTitle) == 0x000048, "Member 'FEffectCard::_cardSubTitle' has a wrong offset!");
static_assert(offsetof(FEffectCard, _cardIcon) == 0x000060, "Member 'FEffectCard::_cardIcon' has a wrong offset!");
static_assert(offsetof(FEffectCard, _cardBackground) == 0x000098, "Member 'FEffectCard::_cardBackground' has a wrong offset!");
static_assert(offsetof(FEffectCard, _effectAppliedOn) == 0x0000D0, "Member 'FEffectCard::_effectAppliedOn' has a wrong offset!");
static_assert(offsetof(FEffectCard, _effectType) == 0x0000D1, "Member 'FEffectCard::_effectType' has a wrong offset!");
static_assert(offsetof(FEffectCard, _isTimed) == 0x0000D2, "Member 'FEffectCard::_isTimed' has a wrong offset!");
static_assert(offsetof(FEffectCard, _timer) == 0x0000D4, "Member 'FEffectCard::_timer' has a wrong offset!");
static_assert(offsetof(FEffectCard, _positionsToExclude) == 0x0000D8, "Member 'FEffectCard::_positionsToExclude' has a wrong offset!");
static_assert(offsetof(FEffectCard, _positionsToPrioritize) == 0x0000E8, "Member 'FEffectCard::_positionsToPrioritize' has a wrong offset!");
static_assert(offsetof(FEffectCard, _isActive) == 0x0000F8, "Member 'FEffectCard::_isActive' has a wrong offset!");
static_assert(offsetof(FEffectCard, _maxTimesCanBeDrawn) == 0x0000FC, "Member 'FEffectCard::_maxTimesCanBeDrawn' has a wrong offset!");

// ScriptStruct DBDSharedTypes.SpecialEventDetailsTabContentData
// 0x0070 (0x0070 - 0x0000)
struct FSpecialEventDetailsTabContentData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EPlayerTeam                                   Role;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEffectCard>                    EffectCards;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   EventName;                                         // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 EventBannerLabel;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialEventDetailsTabContentData) == 0x000008, "Wrong alignment on FSpecialEventDetailsTabContentData");
static_assert(sizeof(FSpecialEventDetailsTabContentData) == 0x000070, "Wrong size on FSpecialEventDetailsTabContentData");
static_assert(offsetof(FSpecialEventDetailsTabContentData, Title) == 0x000000, "Member 'FSpecialEventDetailsTabContentData::Title' has a wrong offset!");
static_assert(offsetof(FSpecialEventDetailsTabContentData, Description) == 0x000018, "Member 'FSpecialEventDetailsTabContentData::Description' has a wrong offset!");
static_assert(offsetof(FSpecialEventDetailsTabContentData, Role) == 0x000030, "Member 'FSpecialEventDetailsTabContentData::Role' has a wrong offset!");
static_assert(offsetof(FSpecialEventDetailsTabContentData, EffectCards) == 0x000038, "Member 'FSpecialEventDetailsTabContentData::EffectCards' has a wrong offset!");
static_assert(offsetof(FSpecialEventDetailsTabContentData, EventName) == 0x000048, "Member 'FSpecialEventDetailsTabContentData::EventName' has a wrong offset!");
static_assert(offsetof(FSpecialEventDetailsTabContentData, EventBannerLabel) == 0x000060, "Member 'FSpecialEventDetailsTabContentData::EventBannerLabel' has a wrong offset!");

// ScriptStruct DBDSharedTypes.DBDFeatureLockProgress
// 0x000C (0x000C - 0x0000)
struct FDBDFeatureLockProgress final
{
public:
	bool                                          _wasSeen;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _totalSteps;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _remainingSteps;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FDBDFeatureLockProgress) == 0x000004, "Wrong alignment on FDBDFeatureLockProgress");
static_assert(sizeof(FDBDFeatureLockProgress) == 0x00000C, "Wrong size on FDBDFeatureLockProgress");
static_assert(offsetof(FDBDFeatureLockProgress, _wasSeen) == 0x000000, "Member 'FDBDFeatureLockProgress::_wasSeen' has a wrong offset!");
static_assert(offsetof(FDBDFeatureLockProgress, _totalSteps) == 0x000004, "Member 'FDBDFeatureLockProgress::_totalSteps' has a wrong offset!");
static_assert(offsetof(FDBDFeatureLockProgress, _remainingSteps) == 0x000008, "Member 'FDBDFeatureLockProgress::_remainingSteps' has a wrong offset!");

// ScriptStruct DBDSharedTypes.PlayerSocialOptionViewData
// 0x0048 (0x0048 - 0x0000)
struct FPlayerSocialOptionViewData final
{
public:
	class FString                                 KrakenId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESocialPlayerOption                           Option;                                            // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerSocialOptionViewData) == 0x000008, "Wrong alignment on FPlayerSocialOptionViewData");
static_assert(sizeof(FPlayerSocialOptionViewData) == 0x000048, "Wrong size on FPlayerSocialOptionViewData");
static_assert(offsetof(FPlayerSocialOptionViewData, KrakenId) == 0x000000, "Member 'FPlayerSocialOptionViewData::KrakenId' has a wrong offset!");
static_assert(offsetof(FPlayerSocialOptionViewData, PlayerId) == 0x000010, "Member 'FPlayerSocialOptionViewData::PlayerId' has a wrong offset!");
static_assert(offsetof(FPlayerSocialOptionViewData, Name) == 0x000020, "Member 'FPlayerSocialOptionViewData::Name' has a wrong offset!");
static_assert(offsetof(FPlayerSocialOptionViewData, Description) == 0x000030, "Member 'FPlayerSocialOptionViewData::Description' has a wrong offset!");
static_assert(offsetof(FPlayerSocialOptionViewData, IsEnabled) == 0x000040, "Member 'FPlayerSocialOptionViewData::IsEnabled' has a wrong offset!");
static_assert(offsetof(FPlayerSocialOptionViewData, Option) == 0x000041, "Member 'FPlayerSocialOptionViewData::Option' has a wrong offset!");

// ScriptStruct DBDSharedTypes.FriendData
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FFriendData final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendData) == 0x000008, "Wrong alignment on FFriendData");
static_assert(sizeof(FFriendData) == 0x000060, "Wrong size on FFriendData");

// ScriptStruct DBDSharedTypes.SpecialEventCommunityChallengeData
// 0x0070 (0x0070 - 0x0000)
struct FSpecialEventCommunityChallengeData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ECurrencyType                                 CurrencyRewardType;                                // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ObjectiveIcon;                                     // 0x0038(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialEventCommunityChallengeData) == 0x000008, "Wrong alignment on FSpecialEventCommunityChallengeData");
static_assert(sizeof(FSpecialEventCommunityChallengeData) == 0x000070, "Wrong size on FSpecialEventCommunityChallengeData");
static_assert(offsetof(FSpecialEventCommunityChallengeData, Title) == 0x000000, "Member 'FSpecialEventCommunityChallengeData::Title' has a wrong offset!");
static_assert(offsetof(FSpecialEventCommunityChallengeData, Description) == 0x000018, "Member 'FSpecialEventCommunityChallengeData::Description' has a wrong offset!");
static_assert(offsetof(FSpecialEventCommunityChallengeData, CurrencyRewardType) == 0x000030, "Member 'FSpecialEventCommunityChallengeData::CurrencyRewardType' has a wrong offset!");
static_assert(offsetof(FSpecialEventCommunityChallengeData, ObjectiveIcon) == 0x000038, "Member 'FSpecialEventCommunityChallengeData::ObjectiveIcon' has a wrong offset!");

// ScriptStruct DBDSharedTypes.StoreRedirectionData
// 0x0058 (0x0058 - 0x0000)
struct FStoreRedirectionData final
{
public:
	int32                                         characterIndex;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomizationCategory                        category;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemId;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedCharmSlotIndex;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   PlayerRole;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 packId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollectionId;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStorePackType                                PackType;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CrossPromoId;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreRedirectionData) == 0x000008, "Wrong alignment on FStoreRedirectionData");
static_assert(sizeof(FStoreRedirectionData) == 0x000058, "Wrong size on FStoreRedirectionData");
static_assert(offsetof(FStoreRedirectionData, characterIndex) == 0x000000, "Member 'FStoreRedirectionData::characterIndex' has a wrong offset!");
static_assert(offsetof(FStoreRedirectionData, category) == 0x000004, "Member 'FStoreRedirectionData::category' has a wrong offset!");
static_assert(offsetof(FStoreRedirectionData, ItemId) == 0x000008, "Member 'FStoreRedirectionData::ItemId' has a wrong offset!");
static_assert(offsetof(FStoreRedirectionData, SelectedCharmSlotIndex) == 0x000014, "Member 'FStoreRedirectionData::SelectedCharmSlotIndex' has a wrong offset!");
static_assert(offsetof(FStoreRedirectionData, PlayerRole) == 0x000018, "Member 'FStoreRedirectionData::PlayerRole' has a wrong offset!");
static_assert(offsetof(FStoreRedirectionData, packId) == 0x000020, "Member 'FStoreRedirectionData::packId' has a wrong offset!");
static_assert(offsetof(FStoreRedirectionData, CollectionId) == 0x000030, "Member 'FStoreRedirectionData::CollectionId' has a wrong offset!");
static_assert(offsetof(FStoreRedirectionData, PackType) == 0x000040, "Member 'FStoreRedirectionData::PackType' has a wrong offset!");
static_assert(offsetof(FStoreRedirectionData, CrossPromoId) == 0x000048, "Member 'FStoreRedirectionData::CrossPromoId' has a wrong offset!");

// ScriptStruct DBDSharedTypes.EmblemProgressionDescriptionByQuality
// 0x0020 (0x0020 - 0x0000)
struct FEmblemProgressionDescriptionByQuality final
{
public:
	EEmblemQuality                                EmblemQuality;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmblemProgressionDescriptionByQuality) == 0x000008, "Wrong alignment on FEmblemProgressionDescriptionByQuality");
static_assert(sizeof(FEmblemProgressionDescriptionByQuality) == 0x000020, "Wrong size on FEmblemProgressionDescriptionByQuality");
static_assert(offsetof(FEmblemProgressionDescriptionByQuality, EmblemQuality) == 0x000000, "Member 'FEmblemProgressionDescriptionByQuality::EmblemQuality' has a wrong offset!");
static_assert(offsetof(FEmblemProgressionDescriptionByQuality, Description) == 0x000008, "Member 'FEmblemProgressionDescriptionByQuality::Description' has a wrong offset!");

// ScriptStruct DBDSharedTypes.Loadout
// 0x0020 (0x0020 - 0x0000)
struct FLoadout final
{
public:
	TArray<class FName>                           Data;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoadout) == 0x000008, "Wrong alignment on FLoadout");
static_assert(sizeof(FLoadout) == 0x000020, "Wrong size on FLoadout");
static_assert(offsetof(FLoadout, Data) == 0x000000, "Member 'FLoadout::Data' has a wrong offset!");

// ScriptStruct DBDSharedTypes.ChallengeTrackerSkinData
// 0x0050 (0x0050 - 0x0000)
struct FChallengeTrackerSkinData final
{
public:
	class UTexture2D*                             BackgroundTexture;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ProgressBarSkinMaterial;                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseColorAndOpacity;                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HighlightColorAndOpacity;                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ConstantsColorAndOpacity;                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CompletionColorAndOpacity;                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeTrackerSkinData) == 0x000008, "Wrong alignment on FChallengeTrackerSkinData");
static_assert(sizeof(FChallengeTrackerSkinData) == 0x000050, "Wrong size on FChallengeTrackerSkinData");
static_assert(offsetof(FChallengeTrackerSkinData, BackgroundTexture) == 0x000000, "Member 'FChallengeTrackerSkinData::BackgroundTexture' has a wrong offset!");
static_assert(offsetof(FChallengeTrackerSkinData, ProgressBarSkinMaterial) == 0x000008, "Member 'FChallengeTrackerSkinData::ProgressBarSkinMaterial' has a wrong offset!");
static_assert(offsetof(FChallengeTrackerSkinData, BaseColorAndOpacity) == 0x000010, "Member 'FChallengeTrackerSkinData::BaseColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FChallengeTrackerSkinData, HighlightColorAndOpacity) == 0x000020, "Member 'FChallengeTrackerSkinData::HighlightColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FChallengeTrackerSkinData, ConstantsColorAndOpacity) == 0x000030, "Member 'FChallengeTrackerSkinData::ConstantsColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FChallengeTrackerSkinData, CompletionColorAndOpacity) == 0x000040, "Member 'FChallengeTrackerSkinData::CompletionColorAndOpacity' has a wrong offset!");

// ScriptStruct DBDSharedTypes.KillerAttributes
// 0x000C (0x000C - 0x0000)
struct FKillerAttributes final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TerrorRadius;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKillerHeight                                 Height;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKillerAttributes) == 0x000004, "Wrong alignment on FKillerAttributes");
static_assert(sizeof(FKillerAttributes) == 0x00000C, "Wrong size on FKillerAttributes");
static_assert(offsetof(FKillerAttributes, Speed) == 0x000000, "Member 'FKillerAttributes::Speed' has a wrong offset!");
static_assert(offsetof(FKillerAttributes, TerrorRadius) == 0x000004, "Member 'FKillerAttributes::TerrorRadius' has a wrong offset!");
static_assert(offsetof(FKillerAttributes, Height) == 0x000008, "Member 'FKillerAttributes::Height' has a wrong offset!");

// ScriptStruct DBDSharedTypes.AlertRewardEventSkinData
// 0x0020 (0x0020 - 0x0000)
struct FAlertRewardEventSkinData final
{
public:
	class UTexture2D*                             BackgroundTexture;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             QuestBackgroundTextureOverride;                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ProgressBarSkinMaterial;                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     QuestProgressBarSkinMaterialOverride;              // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlertRewardEventSkinData) == 0x000008, "Wrong alignment on FAlertRewardEventSkinData");
static_assert(sizeof(FAlertRewardEventSkinData) == 0x000020, "Wrong size on FAlertRewardEventSkinData");
static_assert(offsetof(FAlertRewardEventSkinData, BackgroundTexture) == 0x000000, "Member 'FAlertRewardEventSkinData::BackgroundTexture' has a wrong offset!");
static_assert(offsetof(FAlertRewardEventSkinData, QuestBackgroundTextureOverride) == 0x000008, "Member 'FAlertRewardEventSkinData::QuestBackgroundTextureOverride' has a wrong offset!");
static_assert(offsetof(FAlertRewardEventSkinData, ProgressBarSkinMaterial) == 0x000010, "Member 'FAlertRewardEventSkinData::ProgressBarSkinMaterial' has a wrong offset!");
static_assert(offsetof(FAlertRewardEventSkinData, QuestProgressBarSkinMaterialOverride) == 0x000018, "Member 'FAlertRewardEventSkinData::QuestProgressBarSkinMaterialOverride' has a wrong offset!");

// ScriptStruct DBDSharedTypes.AlertRewardEventSkinUIDataRow
// 0x0030 (0x0038 - 0x0008)
struct FAlertRewardEventSkinUIDataRow final : public FTableRowBase
{
public:
	class FString                                 EventThemeLabel;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAlertRewardEventSkinData              AlertRewardEventSkinData;                          // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlertRewardEventSkinUIDataRow) == 0x000008, "Wrong alignment on FAlertRewardEventSkinUIDataRow");
static_assert(sizeof(FAlertRewardEventSkinUIDataRow) == 0x000038, "Wrong size on FAlertRewardEventSkinUIDataRow");
static_assert(offsetof(FAlertRewardEventSkinUIDataRow, EventThemeLabel) == 0x000008, "Member 'FAlertRewardEventSkinUIDataRow::EventThemeLabel' has a wrong offset!");
static_assert(offsetof(FAlertRewardEventSkinUIDataRow, AlertRewardEventSkinData) == 0x000018, "Member 'FAlertRewardEventSkinUIDataRow::AlertRewardEventSkinData' has a wrong offset!");

// ScriptStruct DBDSharedTypes.DirectionalMiniGameDefinition
// 0x0020 (0x0020 - 0x0000)
struct FDirectionalMiniGameDefinition final
{
public:
	int32                                         KeysPerSequenceCount;                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSequenceRandom;                                  // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EDirectionalInputKey>                  Sequence;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EDirectionalMiniGameType                      Type;                                              // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDirectionalMiniGameDefinition) == 0x000008, "Wrong alignment on FDirectionalMiniGameDefinition");
static_assert(sizeof(FDirectionalMiniGameDefinition) == 0x000020, "Wrong size on FDirectionalMiniGameDefinition");
static_assert(offsetof(FDirectionalMiniGameDefinition, KeysPerSequenceCount) == 0x000000, "Member 'FDirectionalMiniGameDefinition::KeysPerSequenceCount' has a wrong offset!");
static_assert(offsetof(FDirectionalMiniGameDefinition, IsSequenceRandom) == 0x000004, "Member 'FDirectionalMiniGameDefinition::IsSequenceRandom' has a wrong offset!");
static_assert(offsetof(FDirectionalMiniGameDefinition, Sequence) == 0x000008, "Member 'FDirectionalMiniGameDefinition::Sequence' has a wrong offset!");
static_assert(offsetof(FDirectionalMiniGameDefinition, Type) == 0x000018, "Member 'FDirectionalMiniGameDefinition::Type' has a wrong offset!");

// ScriptStruct DBDSharedTypes.ChallengeTrackerSkinUIDataRow
// 0x0058 (0x0060 - 0x0008)
struct FChallengeTrackerSkinUIDataRow final : public FTableRowBase
{
public:
	EChallengeSetType                             ChallengeSetId;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChallengeTrackerSkinData              ChallengeTrackerSkinData;                          // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeTrackerSkinUIDataRow) == 0x000008, "Wrong alignment on FChallengeTrackerSkinUIDataRow");
static_assert(sizeof(FChallengeTrackerSkinUIDataRow) == 0x000060, "Wrong size on FChallengeTrackerSkinUIDataRow");
static_assert(offsetof(FChallengeTrackerSkinUIDataRow, ChallengeSetId) == 0x000008, "Member 'FChallengeTrackerSkinUIDataRow::ChallengeSetId' has a wrong offset!");
static_assert(offsetof(FChallengeTrackerSkinUIDataRow, ChallengeTrackerSkinData) == 0x000010, "Member 'FChallengeTrackerSkinUIDataRow::ChallengeTrackerSkinData' has a wrong offset!");

// ScriptStruct DBDSharedTypes.CurrencyProgressionUIData
// 0x0110 (0x0110 - 0x0000)
struct FCurrencyProgressionUIData final
{
public:
	class FText                                   TooltipTitle;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   TooltipDescription;                                // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      TooltipHeaderMaterial;                             // 0x0030(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TooltipDecorationIcon;                             // 0x0068(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      RewardBackgroundMaterial;                          // 0x00A0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RewardIcon;                                        // 0x00D8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyProgressionUIData) == 0x000008, "Wrong alignment on FCurrencyProgressionUIData");
static_assert(sizeof(FCurrencyProgressionUIData) == 0x000110, "Wrong size on FCurrencyProgressionUIData");
static_assert(offsetof(FCurrencyProgressionUIData, TooltipTitle) == 0x000000, "Member 'FCurrencyProgressionUIData::TooltipTitle' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionUIData, TooltipDescription) == 0x000018, "Member 'FCurrencyProgressionUIData::TooltipDescription' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionUIData, TooltipHeaderMaterial) == 0x000030, "Member 'FCurrencyProgressionUIData::TooltipHeaderMaterial' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionUIData, TooltipDecorationIcon) == 0x000068, "Member 'FCurrencyProgressionUIData::TooltipDecorationIcon' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionUIData, RewardBackgroundMaterial) == 0x0000A0, "Member 'FCurrencyProgressionUIData::RewardBackgroundMaterial' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionUIData, RewardIcon) == 0x0000D8, "Member 'FCurrencyProgressionUIData::RewardIcon' has a wrong offset!");

// ScriptStruct DBDSharedTypes.CurrencyUIDataRow
// 0x0118 (0x0120 - 0x0008)
struct FCurrencyUIDataRow final : public FDBDTableRowBase
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurrencyProgressionUIData             CurrencyProgressionUIData;                         // 0x0010(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyUIDataRow) == 0x000008, "Wrong alignment on FCurrencyUIDataRow");
static_assert(sizeof(FCurrencyUIDataRow) == 0x000120, "Wrong size on FCurrencyUIDataRow");
static_assert(offsetof(FCurrencyUIDataRow, currencyType) == 0x000008, "Member 'FCurrencyUIDataRow::currencyType' has a wrong offset!");
static_assert(offsetof(FCurrencyUIDataRow, CurrencyProgressionUIData) == 0x000010, "Member 'FCurrencyUIDataRow::CurrencyProgressionUIData' has a wrong offset!");

// ScriptStruct DBDSharedTypes.ProgressionUIDataRow
// 0x0118 (0x0120 - 0x0008)
struct FProgressionUIDataRow final : public FDBDTableRowBase
{
public:
	EProgressionType                              ProgressionType;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurrencyProgressionUIData             CurrencyProgressionUIData;                         // 0x0010(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProgressionUIDataRow) == 0x000008, "Wrong alignment on FProgressionUIDataRow");
static_assert(sizeof(FProgressionUIDataRow) == 0x000120, "Wrong size on FProgressionUIDataRow");
static_assert(offsetof(FProgressionUIDataRow, ProgressionType) == 0x000008, "Member 'FProgressionUIDataRow::ProgressionType' has a wrong offset!");
static_assert(offsetof(FProgressionUIDataRow, CurrencyProgressionUIData) == 0x000010, "Member 'FProgressionUIDataRow::CurrencyProgressionUIData' has a wrong offset!");

// ScriptStruct DBDSharedTypes.CustomTransformation
// 0x0028 (0x0028 - 0x0000)
struct FCustomTransformation final
{
public:
	bool                                          UseCustomTransformation;                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CustomScale;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              CustomTranslation;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCustomTransformation) == 0x000008, "Wrong alignment on FCustomTransformation");
static_assert(sizeof(FCustomTransformation) == 0x000028, "Wrong size on FCustomTransformation");
static_assert(offsetof(FCustomTransformation, UseCustomTransformation) == 0x000000, "Member 'FCustomTransformation::UseCustomTransformation' has a wrong offset!");
static_assert(offsetof(FCustomTransformation, CustomScale) == 0x000008, "Member 'FCustomTransformation::CustomScale' has a wrong offset!");
static_assert(offsetof(FCustomTransformation, CustomTranslation) == 0x000018, "Member 'FCustomTransformation::CustomTranslation' has a wrong offset!");

// ScriptStruct DBDSharedTypes.EmblemProgressionID
// 0x0030 (0x0030 - 0x0000)
struct FEmblemProgressionID final
{
public:
	EEmblemProgressionType                        EmblemProgressionType;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DefaultDescription;                                // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FEmblemProgressionDescriptionByQuality> DescriptionsByQuality;                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmblemProgressionID) == 0x000008, "Wrong alignment on FEmblemProgressionID");
static_assert(sizeof(FEmblemProgressionID) == 0x000030, "Wrong size on FEmblemProgressionID");
static_assert(offsetof(FEmblemProgressionID, EmblemProgressionType) == 0x000000, "Member 'FEmblemProgressionID::EmblemProgressionType' has a wrong offset!");
static_assert(offsetof(FEmblemProgressionID, DefaultDescription) == 0x000008, "Member 'FEmblemProgressionID::DefaultDescription' has a wrong offset!");
static_assert(offsetof(FEmblemProgressionID, DescriptionsByQuality) == 0x000020, "Member 'FEmblemProgressionID::DescriptionsByQuality' has a wrong offset!");

// ScriptStruct DBDSharedTypes.DBDEmblemDefinition
// 0x0078 (0x0080 - 0x0008)
struct FDBDEmblemDefinition final : public FDBDTableRowBase
{
public:
	class FName                                   ID;                                                // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<EPlayerRole>                           Roles;                                             // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         IconFilePaths;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EEmblemEvaluation                             EmblemEvaluation;                                  // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEmblemProgressionID>           EmblemProgressionData;                             // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDBDEmblemDefinition) == 0x000008, "Wrong alignment on FDBDEmblemDefinition");
static_assert(sizeof(FDBDEmblemDefinition) == 0x000080, "Wrong size on FDBDEmblemDefinition");
static_assert(offsetof(FDBDEmblemDefinition, ID) == 0x000008, "Member 'FDBDEmblemDefinition::ID' has a wrong offset!");
static_assert(offsetof(FDBDEmblemDefinition, Name) == 0x000018, "Member 'FDBDEmblemDefinition::Name' has a wrong offset!");
static_assert(offsetof(FDBDEmblemDefinition, Description) == 0x000030, "Member 'FDBDEmblemDefinition::Description' has a wrong offset!");
static_assert(offsetof(FDBDEmblemDefinition, Roles) == 0x000048, "Member 'FDBDEmblemDefinition::Roles' has a wrong offset!");
static_assert(offsetof(FDBDEmblemDefinition, IconFilePaths) == 0x000058, "Member 'FDBDEmblemDefinition::IconFilePaths' has a wrong offset!");
static_assert(offsetof(FDBDEmblemDefinition, EmblemEvaluation) == 0x000068, "Member 'FDBDEmblemDefinition::EmblemEvaluation' has a wrong offset!");
static_assert(offsetof(FDBDEmblemDefinition, Enabled) == 0x000069, "Member 'FDBDEmblemDefinition::Enabled' has a wrong offset!");
static_assert(offsetof(FDBDEmblemDefinition, EmblemProgressionData) == 0x000070, "Member 'FDBDEmblemDefinition::EmblemProgressionData' has a wrong offset!");

// ScriptStruct DBDSharedTypes.EffectCardViewData
// 0x00D8 (0x00D8 - 0x0000)
struct FEffectCardViewData final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   subtitle;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CardIcon;                                          // 0x0058(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       CardBackground;                                    // 0x0090(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectCardState                              State;                                             // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTimed;                                           // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timer;                                             // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasSheen;                                          // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEffectCardViewData) == 0x000008, "Wrong alignment on FEffectCardViewData");
static_assert(sizeof(FEffectCardViewData) == 0x0000D8, "Wrong size on FEffectCardViewData");
static_assert(offsetof(FEffectCardViewData, ID) == 0x000000, "Member 'FEffectCardViewData::ID' has a wrong offset!");
static_assert(offsetof(FEffectCardViewData, Title) == 0x000010, "Member 'FEffectCardViewData::Title' has a wrong offset!");
static_assert(offsetof(FEffectCardViewData, subtitle) == 0x000028, "Member 'FEffectCardViewData::subtitle' has a wrong offset!");
static_assert(offsetof(FEffectCardViewData, Description) == 0x000040, "Member 'FEffectCardViewData::Description' has a wrong offset!");
static_assert(offsetof(FEffectCardViewData, CardIcon) == 0x000058, "Member 'FEffectCardViewData::CardIcon' has a wrong offset!");
static_assert(offsetof(FEffectCardViewData, CardBackground) == 0x000090, "Member 'FEffectCardViewData::CardBackground' has a wrong offset!");
static_assert(offsetof(FEffectCardViewData, State) == 0x0000C8, "Member 'FEffectCardViewData::State' has a wrong offset!");
static_assert(offsetof(FEffectCardViewData, IsTimed) == 0x0000C9, "Member 'FEffectCardViewData::IsTimed' has a wrong offset!");
static_assert(offsetof(FEffectCardViewData, Timer) == 0x0000CC, "Member 'FEffectCardViewData::Timer' has a wrong offset!");
static_assert(offsetof(FEffectCardViewData, HasSheen) == 0x0000D0, "Member 'FEffectCardViewData::HasSheen' has a wrong offset!");

// ScriptStruct DBDSharedTypes.EventProgressionData
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FEventProgressionData final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventProgressionData) == 0x000004, "Wrong alignment on FEventProgressionData");
static_assert(sizeof(FEventProgressionData) == 0x000014, "Wrong size on FEventProgressionData");

// ScriptStruct DBDSharedTypes.StatusEffectSkinData
// 0x0158 (0x0158 - 0x0000)
struct FStatusEffectSkinData final
{
public:
	class UMaterialInterface*                     StatusEffectMaterial;                              // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      ItemPowerMaterial;                                 // 0x0008(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      AddonMaterial;                                     // 0x0040(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      OfferingMaterial;                                  // 0x0078(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      PerkMaterial;                                      // 0x00B0(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      ClassMaterial;                                     // 0x00E8(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      SkillMaterial;                                     // 0x0120(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatusEffectSkinData) == 0x000008, "Wrong alignment on FStatusEffectSkinData");
static_assert(sizeof(FStatusEffectSkinData) == 0x000158, "Wrong size on FStatusEffectSkinData");
static_assert(offsetof(FStatusEffectSkinData, StatusEffectMaterial) == 0x000000, "Member 'FStatusEffectSkinData::StatusEffectMaterial' has a wrong offset!");
static_assert(offsetof(FStatusEffectSkinData, ItemPowerMaterial) == 0x000008, "Member 'FStatusEffectSkinData::ItemPowerMaterial' has a wrong offset!");
static_assert(offsetof(FStatusEffectSkinData, AddonMaterial) == 0x000040, "Member 'FStatusEffectSkinData::AddonMaterial' has a wrong offset!");
static_assert(offsetof(FStatusEffectSkinData, OfferingMaterial) == 0x000078, "Member 'FStatusEffectSkinData::OfferingMaterial' has a wrong offset!");
static_assert(offsetof(FStatusEffectSkinData, PerkMaterial) == 0x0000B0, "Member 'FStatusEffectSkinData::PerkMaterial' has a wrong offset!");
static_assert(offsetof(FStatusEffectSkinData, ClassMaterial) == 0x0000E8, "Member 'FStatusEffectSkinData::ClassMaterial' has a wrong offset!");
static_assert(offsetof(FStatusEffectSkinData, SkillMaterial) == 0x000120, "Member 'FStatusEffectSkinData::SkillMaterial' has a wrong offset!");

// ScriptStruct DBDSharedTypes.StatusEffectSkinDataRow
// 0x0160 (0x0168 - 0x0008)
struct FStatusEffectSkinDataRow final : public FDBDTableRowBase
{
public:
	EStatusEffectType                             StatusEffectType;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStatusEffectSkinData                  StatusEffectData;                                  // 0x0010(0x0158)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatusEffectSkinDataRow) == 0x000008, "Wrong alignment on FStatusEffectSkinDataRow");
static_assert(sizeof(FStatusEffectSkinDataRow) == 0x000168, "Wrong size on FStatusEffectSkinDataRow");
static_assert(offsetof(FStatusEffectSkinDataRow, StatusEffectType) == 0x000008, "Member 'FStatusEffectSkinDataRow::StatusEffectType' has a wrong offset!");
static_assert(offsetof(FStatusEffectSkinDataRow, StatusEffectData) == 0x000010, "Member 'FStatusEffectSkinDataRow::StatusEffectData' has a wrong offset!");

// ScriptStruct DBDSharedTypes.HelpTopicData
// 0x0098 (0x00A0 - 0x0008)
struct FHelpTopicData final : public FDBDTableRowBase
{
public:
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ImagePath;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IconPath;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoId;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0068(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHelpTopicData) == 0x000008, "Wrong alignment on FHelpTopicData");
static_assert(sizeof(FHelpTopicData) == 0x0000A0, "Wrong size on FHelpTopicData");
static_assert(offsetof(FHelpTopicData, Title) == 0x000008, "Member 'FHelpTopicData::Title' has a wrong offset!");
static_assert(offsetof(FHelpTopicData, Description) == 0x000020, "Member 'FHelpTopicData::Description' has a wrong offset!");
static_assert(offsetof(FHelpTopicData, ImagePath) == 0x000038, "Member 'FHelpTopicData::ImagePath' has a wrong offset!");
static_assert(offsetof(FHelpTopicData, IconPath) == 0x000048, "Member 'FHelpTopicData::IconPath' has a wrong offset!");
static_assert(offsetof(FHelpTopicData, VideoId) == 0x000058, "Member 'FHelpTopicData::VideoId' has a wrong offset!");
static_assert(offsetof(FHelpTopicData, Icon) == 0x000068, "Member 'FHelpTopicData::Icon' has a wrong offset!");

// ScriptStruct DBDSharedTypes.HelpContextMappingData
// 0x0020 (0x0028 - 0x0008)
struct FHelpContextMappingData final : public FDBDTableRowBase
{
public:
	class FString                                 ContextName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TopicIds;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHelpContextMappingData) == 0x000008, "Wrong alignment on FHelpContextMappingData");
static_assert(sizeof(FHelpContextMappingData) == 0x000028, "Wrong size on FHelpContextMappingData");
static_assert(offsetof(FHelpContextMappingData, ContextName) == 0x000008, "Member 'FHelpContextMappingData::ContextName' has a wrong offset!");
static_assert(offsetof(FHelpContextMappingData, TopicIds) == 0x000018, "Member 'FHelpContextMappingData::TopicIds' has a wrong offset!");

// ScriptStruct DBDSharedTypes.HelpCategoryData
// 0x0048 (0x0050 - 0x0008)
struct FHelpCategoryData final : public FDBDTableRowBase
{
public:
	EHelpType                                     Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FName>                           TopicIds;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHelpCategoryData) == 0x000008, "Wrong alignment on FHelpCategoryData");
static_assert(sizeof(FHelpCategoryData) == 0x000050, "Wrong size on FHelpCategoryData");
static_assert(offsetof(FHelpCategoryData, Type) == 0x000008, "Member 'FHelpCategoryData::Type' has a wrong offset!");
static_assert(offsetof(FHelpCategoryData, Title) == 0x000010, "Member 'FHelpCategoryData::Title' has a wrong offset!");
static_assert(offsetof(FHelpCategoryData, Description) == 0x000028, "Member 'FHelpCategoryData::Description' has a wrong offset!");
static_assert(offsetof(FHelpCategoryData, TopicIds) == 0x000040, "Member 'FHelpCategoryData::TopicIds' has a wrong offset!");

// ScriptStruct DBDSharedTypes.InboxSkinUIData
// 0x0038 (0x0038 - 0x0000)
struct FInboxSkinUIData final
{
public:
	TSoftObjectPtr<class UMenuSkinDataAsset>      MenuSkinData;                                      // 0x0000(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInboxSkinUIData) == 0x000008, "Wrong alignment on FInboxSkinUIData");
static_assert(sizeof(FInboxSkinUIData) == 0x000038, "Wrong size on FInboxSkinUIData");
static_assert(offsetof(FInboxSkinUIData, MenuSkinData) == 0x000000, "Member 'FInboxSkinUIData::MenuSkinData' has a wrong offset!");

// ScriptStruct DBDSharedTypes.InboxSkinUIDataRow
// 0x0048 (0x0050 - 0x0008)
struct FInboxSkinUIDataRow final : public FDBDTableRowBase
{
public:
	class FString                                 label;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInboxSkinUIData                       InboxSkinUIData;                                   // 0x0018(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInboxSkinUIDataRow) == 0x000008, "Wrong alignment on FInboxSkinUIDataRow");
static_assert(sizeof(FInboxSkinUIDataRow) == 0x000050, "Wrong size on FInboxSkinUIDataRow");
static_assert(offsetof(FInboxSkinUIDataRow, label) == 0x000008, "Member 'FInboxSkinUIDataRow::label' has a wrong offset!");
static_assert(offsetof(FInboxSkinUIDataRow, InboxSkinUIData) == 0x000018, "Member 'FInboxSkinUIDataRow::InboxSkinUIData' has a wrong offset!");

// ScriptStruct DBDSharedTypes.InputPromptDataRow
// 0x0078 (0x0080 - 0x0008)
struct FInputPromptDataRow final : public FDBDTableRowBase
{
public:
	class FText                                   InputLabel;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FKey                                   InputKey;                                          // 0x0020(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              PromptTexture;                                     // 0x0040(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowLabel;                                         // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputPromptDataRow) == 0x000008, "Wrong alignment on FInputPromptDataRow");
static_assert(sizeof(FInputPromptDataRow) == 0x000080, "Wrong size on FInputPromptDataRow");
static_assert(offsetof(FInputPromptDataRow, InputLabel) == 0x000008, "Member 'FInputPromptDataRow::InputLabel' has a wrong offset!");
static_assert(offsetof(FInputPromptDataRow, InputKey) == 0x000020, "Member 'FInputPromptDataRow::InputKey' has a wrong offset!");
static_assert(offsetof(FInputPromptDataRow, PromptTexture) == 0x000040, "Member 'FInputPromptDataRow::PromptTexture' has a wrong offset!");
static_assert(offsetof(FInputPromptDataRow, ShowLabel) == 0x000078, "Member 'FInputPromptDataRow::ShowLabel' has a wrong offset!");

// ScriptStruct DBDSharedTypes.RarityMaterialData
// 0x0188 (0x0188 - 0x0000)
struct FRarityMaterialData final
{
public:
	class UMaterialInterface*                     LoadoutPartMaterial;                               // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CustomizationMaterial;                             // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     TooltipHeaderMaterial;                             // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      ItemPowerMaterial;                                 // 0x0018(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      AddonMaterial;                                     // 0x0050(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      OfferingMaterial;                                  // 0x0088(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      PerkMaterial;                                      // 0x00C0(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      ClassMaterial;                                     // 0x00F8(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      SkillMaterial;                                     // 0x0130(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RarityTint;                                        // 0x0168(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RarityTextColor;                                   // 0x0178(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRarityMaterialData) == 0x000008, "Wrong alignment on FRarityMaterialData");
static_assert(sizeof(FRarityMaterialData) == 0x000188, "Wrong size on FRarityMaterialData");
static_assert(offsetof(FRarityMaterialData, LoadoutPartMaterial) == 0x000000, "Member 'FRarityMaterialData::LoadoutPartMaterial' has a wrong offset!");
static_assert(offsetof(FRarityMaterialData, CustomizationMaterial) == 0x000008, "Member 'FRarityMaterialData::CustomizationMaterial' has a wrong offset!");
static_assert(offsetof(FRarityMaterialData, TooltipHeaderMaterial) == 0x000010, "Member 'FRarityMaterialData::TooltipHeaderMaterial' has a wrong offset!");
static_assert(offsetof(FRarityMaterialData, ItemPowerMaterial) == 0x000018, "Member 'FRarityMaterialData::ItemPowerMaterial' has a wrong offset!");
static_assert(offsetof(FRarityMaterialData, AddonMaterial) == 0x000050, "Member 'FRarityMaterialData::AddonMaterial' has a wrong offset!");
static_assert(offsetof(FRarityMaterialData, OfferingMaterial) == 0x000088, "Member 'FRarityMaterialData::OfferingMaterial' has a wrong offset!");
static_assert(offsetof(FRarityMaterialData, PerkMaterial) == 0x0000C0, "Member 'FRarityMaterialData::PerkMaterial' has a wrong offset!");
static_assert(offsetof(FRarityMaterialData, ClassMaterial) == 0x0000F8, "Member 'FRarityMaterialData::ClassMaterial' has a wrong offset!");
static_assert(offsetof(FRarityMaterialData, SkillMaterial) == 0x000130, "Member 'FRarityMaterialData::SkillMaterial' has a wrong offset!");
static_assert(offsetof(FRarityMaterialData, RarityTint) == 0x000168, "Member 'FRarityMaterialData::RarityTint' has a wrong offset!");
static_assert(offsetof(FRarityMaterialData, RarityTextColor) == 0x000178, "Member 'FRarityMaterialData::RarityTextColor' has a wrong offset!");

// ScriptStruct DBDSharedTypes.RarityMaterialDataRow
// 0x0190 (0x0198 - 0x0008)
struct FRarityMaterialDataRow final : public FDBDTableRowBase
{
public:
	EItemRarity                                   Rarity;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRarityMaterialData                    RarityData;                                        // 0x0010(0x0188)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRarityMaterialDataRow) == 0x000008, "Wrong alignment on FRarityMaterialDataRow");
static_assert(sizeof(FRarityMaterialDataRow) == 0x000198, "Wrong size on FRarityMaterialDataRow");
static_assert(offsetof(FRarityMaterialDataRow, Rarity) == 0x000008, "Member 'FRarityMaterialDataRow::Rarity' has a wrong offset!");
static_assert(offsetof(FRarityMaterialDataRow, RarityData) == 0x000010, "Member 'FRarityMaterialDataRow::RarityData' has a wrong offset!");

// ScriptStruct DBDSharedTypes.TooltipEventSkinUIDataRow
// 0x0018 (0x0020 - 0x0008)
struct FTooltipEventSkinUIDataRow final : public FTableRowBase
{
public:
	class FString                                 EventBannerLabel;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             HeaderDecorationTexture;                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTooltipEventSkinUIDataRow) == 0x000008, "Wrong alignment on FTooltipEventSkinUIDataRow");
static_assert(sizeof(FTooltipEventSkinUIDataRow) == 0x000020, "Wrong size on FTooltipEventSkinUIDataRow");
static_assert(offsetof(FTooltipEventSkinUIDataRow, EventBannerLabel) == 0x000008, "Member 'FTooltipEventSkinUIDataRow::EventBannerLabel' has a wrong offset!");
static_assert(offsetof(FTooltipEventSkinUIDataRow, HeaderDecorationTexture) == 0x000018, "Member 'FTooltipEventSkinUIDataRow::HeaderDecorationTexture' has a wrong offset!");

// ScriptStruct DBDSharedTypes.LobbyRedirectionData
// 0x0001 (0x0001 - 0x0000)
struct FLobbyRedirectionData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbyRedirectionData) == 0x000001, "Wrong alignment on FLobbyRedirectionData");
static_assert(sizeof(FLobbyRedirectionData) == 0x000001, "Wrong size on FLobbyRedirectionData");

// ScriptStruct DBDSharedTypes.ReportFeedbackData
// 0x0040 (0x0040 - 0x0000)
struct FReportFeedbackData final
{
public:
	struct FDateTime                              BanTimestamp;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Reason;                                            // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	TArray<int64>                                 MessageIds;                                        // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RecipientId;                                       // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReportFeedbackData) == 0x000008, "Wrong alignment on FReportFeedbackData");
static_assert(sizeof(FReportFeedbackData) == 0x000040, "Wrong size on FReportFeedbackData");
static_assert(offsetof(FReportFeedbackData, BanTimestamp) == 0x000000, "Member 'FReportFeedbackData::BanTimestamp' has a wrong offset!");
static_assert(offsetof(FReportFeedbackData, Reason) == 0x000008, "Member 'FReportFeedbackData::Reason' has a wrong offset!");
static_assert(offsetof(FReportFeedbackData, MessageIds) == 0x000020, "Member 'FReportFeedbackData::MessageIds' has a wrong offset!");
static_assert(offsetof(FReportFeedbackData, RecipientId) == 0x000030, "Member 'FReportFeedbackData::RecipientId' has a wrong offset!");

// ScriptStruct DBDSharedTypes.ScreenIndicatorViewData
// 0x0050 (0x0050 - 0x0000)
struct FScreenIndicatorViewData final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHudScreenIndicatorType                       IndicatorType;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ViewportSize;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInFront;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScreenPosition;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                AdditionalData;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScreenIndicatorViewData) == 0x000008, "Wrong alignment on FScreenIndicatorViewData");
static_assert(sizeof(FScreenIndicatorViewData) == 0x000050, "Wrong size on FScreenIndicatorViewData");
static_assert(offsetof(FScreenIndicatorViewData, ID) == 0x000000, "Member 'FScreenIndicatorViewData::ID' has a wrong offset!");
static_assert(offsetof(FScreenIndicatorViewData, IndicatorType) == 0x000010, "Member 'FScreenIndicatorViewData::IndicatorType' has a wrong offset!");
static_assert(offsetof(FScreenIndicatorViewData, ViewportSize) == 0x000018, "Member 'FScreenIndicatorViewData::ViewportSize' has a wrong offset!");
static_assert(offsetof(FScreenIndicatorViewData, IsInFront) == 0x000028, "Member 'FScreenIndicatorViewData::IsInFront' has a wrong offset!");
static_assert(offsetof(FScreenIndicatorViewData, ScreenPosition) == 0x000030, "Member 'FScreenIndicatorViewData::ScreenPosition' has a wrong offset!");
static_assert(offsetof(FScreenIndicatorViewData, Distance) == 0x000040, "Member 'FScreenIndicatorViewData::Distance' has a wrong offset!");
static_assert(offsetof(FScreenIndicatorViewData, AdditionalData) == 0x000048, "Member 'FScreenIndicatorViewData::AdditionalData' has a wrong offset!");

// ScriptStruct DBDSharedTypes.PlayerInfoData
// 0x0038 (0x0038 - 0x0000)
struct FPlayerInfoData final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountName;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOffNetwork;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBot;                                             // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   PlayerRole;                                        // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerInfoData) == 0x000008, "Wrong alignment on FPlayerInfoData");
static_assert(sizeof(FPlayerInfoData) == 0x000038, "Wrong size on FPlayerInfoData");
static_assert(offsetof(FPlayerInfoData, PlayerId) == 0x000000, "Member 'FPlayerInfoData::PlayerId' has a wrong offset!");
static_assert(offsetof(FPlayerInfoData, CharacterName) == 0x000010, "Member 'FPlayerInfoData::CharacterName' has a wrong offset!");
static_assert(offsetof(FPlayerInfoData, AccountName) == 0x000020, "Member 'FPlayerInfoData::AccountName' has a wrong offset!");
static_assert(offsetof(FPlayerInfoData, IsOffNetwork) == 0x000030, "Member 'FPlayerInfoData::IsOffNetwork' has a wrong offset!");
static_assert(offsetof(FPlayerInfoData, IsBot) == 0x000031, "Member 'FPlayerInfoData::IsBot' has a wrong offset!");
static_assert(offsetof(FPlayerInfoData, PlayerRole) == 0x000032, "Member 'FPlayerInfoData::PlayerRole' has a wrong offset!");

// ScriptStruct DBDSharedTypes.SpecialEventDetailsTabData
// 0x0050 (0x0050 - 0x0000)
struct FSpecialEventDetailsTabData final
{
public:
	EDetailsTabLayout                             Layout;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpecialEventDetailsTabContentData> Content;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0018(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialEventDetailsTabData) == 0x000008, "Wrong alignment on FSpecialEventDetailsTabData");
static_assert(sizeof(FSpecialEventDetailsTabData) == 0x000050, "Wrong size on FSpecialEventDetailsTabData");
static_assert(offsetof(FSpecialEventDetailsTabData, Layout) == 0x000000, "Member 'FSpecialEventDetailsTabData::Layout' has a wrong offset!");
static_assert(offsetof(FSpecialEventDetailsTabData, Content) == 0x000008, "Member 'FSpecialEventDetailsTabData::Content' has a wrong offset!");
static_assert(offsetof(FSpecialEventDetailsTabData, Image) == 0x000018, "Member 'FSpecialEventDetailsTabData::Image' has a wrong offset!");

// ScriptStruct DBDSharedTypes.TooltipTriggerGeometry
// 0x0060 (0x0060 - 0x0000)
struct FTooltipTriggerGeometry final
{
public:
	struct FVector2D                              AbsolutePosition;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AbsoluteSize;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x3C];                                      // 0x0024(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTooltipTriggerGeometry) == 0x000008, "Wrong alignment on FTooltipTriggerGeometry");
static_assert(sizeof(FTooltipTriggerGeometry) == 0x000060, "Wrong size on FTooltipTriggerGeometry");
static_assert(offsetof(FTooltipTriggerGeometry, AbsolutePosition) == 0x000000, "Member 'FTooltipTriggerGeometry::AbsolutePosition' has a wrong offset!");
static_assert(offsetof(FTooltipTriggerGeometry, AbsoluteSize) == 0x000010, "Member 'FTooltipTriggerGeometry::AbsoluteSize' has a wrong offset!");
static_assert(offsetof(FTooltipTriggerGeometry, Scale) == 0x000020, "Member 'FTooltipTriggerGeometry::Scale' has a wrong offset!");

}

