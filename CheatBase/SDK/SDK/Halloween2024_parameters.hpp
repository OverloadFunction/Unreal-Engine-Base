#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Halloween2024

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_structs.hpp"


namespace SDK::Params
{

// Function Halloween2024.EscapeChaseAfterVoidBombQEEvaluator.OnChaseEnd
// 0x0040 (0x0040 - 0x0000)
struct EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd) == 0x000008, "Wrong alignment on EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd");
static_assert(sizeof(EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd) == 0x000040, "Wrong size on EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd");
static_assert(offsetof(EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd, gameEventType) == 0x000000, "Member 'EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd::gameEventType' has a wrong offset!");
static_assert(offsetof(EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd, GameEventData) == 0x000010, "Member 'EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd::GameEventData' has a wrong offset!");

// Function Halloween2024.EscapeChaseAfterVoidBombQEEvaluator.OnVoidBombDropped
// 0x0040 (0x0040 - 0x0000)
struct EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped) == 0x000008, "Wrong alignment on EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped");
static_assert(sizeof(EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped) == 0x000040, "Wrong size on EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped");
static_assert(offsetof(EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped, gameEventType) == 0x000000, "Member 'EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped::gameEventType' has a wrong offset!");
static_assert(offsetof(EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped, GameEventData) == 0x000010, "Member 'EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped::GameEventData' has a wrong offset!");

// Function Halloween2024.Halloween2024EventCheatComponent.DBD_SetVoidBombCrafted
// 0x0001 (0x0001 - 0x0000)
struct Halloween2024EventCheatComponent_DBD_SetVoidBombCrafted final
{
public:
	bool                                          crafted;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Halloween2024EventCheatComponent_DBD_SetVoidBombCrafted) == 0x000001, "Wrong alignment on Halloween2024EventCheatComponent_DBD_SetVoidBombCrafted");
static_assert(sizeof(Halloween2024EventCheatComponent_DBD_SetVoidBombCrafted) == 0x000001, "Wrong size on Halloween2024EventCheatComponent_DBD_SetVoidBombCrafted");
static_assert(offsetof(Halloween2024EventCheatComponent_DBD_SetVoidBombCrafted, crafted) == 0x000000, "Member 'Halloween2024EventCheatComponent_DBD_SetVoidBombCrafted::crafted' has a wrong offset!");

// Function Halloween2024.VoidEmpowermentWidgetComponent.OnInteractorLockChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent final
{
public:
	bool                                          interacting;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             interactingPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent) == 0x000008, "Wrong alignment on VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent");
static_assert(sizeof(VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent) == 0x000010, "Wrong size on VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent");
static_assert(offsetof(VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent, interacting) == 0x000000, "Member 'VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent::interacting' has a wrong offset!");
static_assert(offsetof(VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent, interactingPlayer) == 0x000008, "Member 'VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent::interactingPlayer' has a wrong offset!");

// Function Halloween2024.VoidStation.Cosmetic_OnItemCrafted
// 0x0002 (0x0002 - 0x0000)
struct VoidStation_Cosmetic_OnItemCrafted final
{
public:
	bool                                          itemCrafted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          killerItem;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidStation_Cosmetic_OnItemCrafted) == 0x000001, "Wrong alignment on VoidStation_Cosmetic_OnItemCrafted");
static_assert(sizeof(VoidStation_Cosmetic_OnItemCrafted) == 0x000002, "Wrong size on VoidStation_Cosmetic_OnItemCrafted");
static_assert(offsetof(VoidStation_Cosmetic_OnItemCrafted, itemCrafted) == 0x000000, "Member 'VoidStation_Cosmetic_OnItemCrafted::itemCrafted' has a wrong offset!");
static_assert(offsetof(VoidStation_Cosmetic_OnItemCrafted, killerItem) == 0x000001, "Member 'VoidStation_Cosmetic_OnItemCrafted::killerItem' has a wrong offset!");

// Function Halloween2024.VoidStation.Cosmetic_OnPlayerDepositingEnergyChanged
// 0x0001 (0x0001 - 0x0000)
struct VoidStation_Cosmetic_OnPlayerDepositingEnergyChanged final
{
public:
	bool                                          IsInteracting;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidStation_Cosmetic_OnPlayerDepositingEnergyChanged) == 0x000001, "Wrong alignment on VoidStation_Cosmetic_OnPlayerDepositingEnergyChanged");
static_assert(sizeof(VoidStation_Cosmetic_OnPlayerDepositingEnergyChanged) == 0x000001, "Wrong size on VoidStation_Cosmetic_OnPlayerDepositingEnergyChanged");
static_assert(offsetof(VoidStation_Cosmetic_OnPlayerDepositingEnergyChanged, IsInteracting) == 0x000000, "Member 'VoidStation_Cosmetic_OnPlayerDepositingEnergyChanged::IsInteracting' has a wrong offset!");

// Function Halloween2024.VoidStation.GetIsVoidBombSpawned
// 0x0001 (0x0001 - 0x0000)
struct VoidStation_GetIsVoidBombSpawned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidStation_GetIsVoidBombSpawned) == 0x000001, "Wrong alignment on VoidStation_GetIsVoidBombSpawned");
static_assert(sizeof(VoidStation_GetIsVoidBombSpawned) == 0x000001, "Wrong size on VoidStation_GetIsVoidBombSpawned");
static_assert(offsetof(VoidStation_GetIsVoidBombSpawned, ReturnValue) == 0x000000, "Member 'VoidStation_GetIsVoidBombSpawned::ReturnValue' has a wrong offset!");

}

