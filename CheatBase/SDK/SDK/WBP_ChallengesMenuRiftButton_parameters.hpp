#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ChallengesMenuRiftButton

#include "Basic.hpp"

#include "DBDUIViewInterfaces_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_ChallengesMenuRiftButton.WBP_ChallengesMenuRiftButton_C.ExecuteUbergraph_WBP_ChallengesMenuRiftButton
// 0x0090 (0x0090 - 0x0000)
struct WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETierType                                     Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_isPremiumPass_1;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_percentage;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              K2Node_Select_Default;                             // 0x0010(0x0038)(UObjectWrapper, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETierType                                     K2Node_Event_tier_1;                               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_isPremiumPass;                        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETierType                                     K2Node_Event_tier;                                 // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Map_Find_Value;                           // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0068(0x0014)()
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_isLocked;                             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton) == 0x000008, "Wrong alignment on WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton");
static_assert(sizeof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton) == 0x000090, "Wrong size on WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, EntryPoint) == 0x000000, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, Temp_bool_Variable) == 0x000004, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, Temp_byte_Variable) == 0x000005, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, K2Node_Event_isPremiumPass_1) == 0x000006, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::K2Node_Event_isPremiumPass_1' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, K2Node_Event_percentage) == 0x000008, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::K2Node_Event_percentage' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, K2Node_Select_Default) == 0x000010, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000048, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, K2Node_Event_tier_1) == 0x000050, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::K2Node_Event_tier_1' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, K2Node_Event_isPremiumPass) == 0x000051, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::K2Node_Event_isPremiumPass' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, K2Node_Event_tier) == 0x000052, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::K2Node_Event_tier' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, CallFunc_Map_Find_Value) == 0x000054, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, CallFunc_Map_Find_ReturnValue) == 0x000064, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, K2Node_MakeStruct_SlateColor) == 0x000068, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, K2Node_Select_Default_1) == 0x000080, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton, K2Node_Event_isLocked) == 0x000088, "Member 'WBP_ChallengesMenuRiftButton_C_ExecuteUbergraph_WBP_ChallengesMenuRiftButton::K2Node_Event_isLocked' has a wrong offset!");

// Function WBP_ChallengesMenuRiftButton.WBP_ChallengesMenuRiftButton_C.SetBackgroundVisuals
// 0x0002 (0x0002 - 0x0000)
struct WBP_ChallengesMenuRiftButton_C_SetBackgroundVisuals final
{
public:
	bool                                          isPremiumPass;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETierType                                     tier;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ChallengesMenuRiftButton_C_SetBackgroundVisuals) == 0x000001, "Wrong alignment on WBP_ChallengesMenuRiftButton_C_SetBackgroundVisuals");
static_assert(sizeof(WBP_ChallengesMenuRiftButton_C_SetBackgroundVisuals) == 0x000002, "Wrong size on WBP_ChallengesMenuRiftButton_C_SetBackgroundVisuals");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_SetBackgroundVisuals, isPremiumPass) == 0x000000, "Member 'WBP_ChallengesMenuRiftButton_C_SetBackgroundVisuals::isPremiumPass' has a wrong offset!");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_SetBackgroundVisuals, tier) == 0x000001, "Member 'WBP_ChallengesMenuRiftButton_C_SetBackgroundVisuals::tier' has a wrong offset!");

// Function WBP_ChallengesMenuRiftButton.WBP_ChallengesMenuRiftButton_C.SetLockedVisuals
// 0x0001 (0x0001 - 0x0000)
struct WBP_ChallengesMenuRiftButton_C_SetLockedVisuals final
{
public:
	bool                                          IsLocked;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ChallengesMenuRiftButton_C_SetLockedVisuals) == 0x000001, "Wrong alignment on WBP_ChallengesMenuRiftButton_C_SetLockedVisuals");
static_assert(sizeof(WBP_ChallengesMenuRiftButton_C_SetLockedVisuals) == 0x000001, "Wrong size on WBP_ChallengesMenuRiftButton_C_SetLockedVisuals");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_SetLockedVisuals, IsLocked) == 0x000000, "Member 'WBP_ChallengesMenuRiftButton_C_SetLockedVisuals::IsLocked' has a wrong offset!");

// Function WBP_ChallengesMenuRiftButton.WBP_ChallengesMenuRiftButton_C.SetRiftPassTrackIcon
// 0x0001 (0x0001 - 0x0000)
struct WBP_ChallengesMenuRiftButton_C_SetRiftPassTrackIcon final
{
public:
	bool                                          isPremiumPass;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ChallengesMenuRiftButton_C_SetRiftPassTrackIcon) == 0x000001, "Wrong alignment on WBP_ChallengesMenuRiftButton_C_SetRiftPassTrackIcon");
static_assert(sizeof(WBP_ChallengesMenuRiftButton_C_SetRiftPassTrackIcon) == 0x000001, "Wrong size on WBP_ChallengesMenuRiftButton_C_SetRiftPassTrackIcon");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_SetRiftPassTrackIcon, isPremiumPass) == 0x000000, "Member 'WBP_ChallengesMenuRiftButton_C_SetRiftPassTrackIcon::isPremiumPass' has a wrong offset!");

// Function WBP_ChallengesMenuRiftButton.WBP_ChallengesMenuRiftButton_C.SetRiftProgressionColor
// 0x0001 (0x0001 - 0x0000)
struct WBP_ChallengesMenuRiftButton_C_SetRiftProgressionColor final
{
public:
	ETierType                                     tier;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ChallengesMenuRiftButton_C_SetRiftProgressionColor) == 0x000001, "Wrong alignment on WBP_ChallengesMenuRiftButton_C_SetRiftProgressionColor");
static_assert(sizeof(WBP_ChallengesMenuRiftButton_C_SetRiftProgressionColor) == 0x000001, "Wrong size on WBP_ChallengesMenuRiftButton_C_SetRiftProgressionColor");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_SetRiftProgressionColor, tier) == 0x000000, "Member 'WBP_ChallengesMenuRiftButton_C_SetRiftProgressionColor::tier' has a wrong offset!");

// Function WBP_ChallengesMenuRiftButton.WBP_ChallengesMenuRiftButton_C.SetRiftProgressionImage
// 0x0004 (0x0004 - 0x0000)
struct WBP_ChallengesMenuRiftButton_C_SetRiftProgressionImage final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ChallengesMenuRiftButton_C_SetRiftProgressionImage) == 0x000004, "Wrong alignment on WBP_ChallengesMenuRiftButton_C_SetRiftProgressionImage");
static_assert(sizeof(WBP_ChallengesMenuRiftButton_C_SetRiftProgressionImage) == 0x000004, "Wrong size on WBP_ChallengesMenuRiftButton_C_SetRiftProgressionImage");
static_assert(offsetof(WBP_ChallengesMenuRiftButton_C_SetRiftProgressionImage, Percentage) == 0x000000, "Member 'WBP_ChallengesMenuRiftButton_C_SetRiftProgressionImage::Percentage' has a wrong offset!");

}

