#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK39

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "TheK39_structs.hpp"
#include "GameplayUtilities_classes.hpp"
#include "DBDAnimation_classes.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "DBDGameplay_classes.hpp"
#include "DBDCosmetic_classes.hpp"
#include "DBDCompetence_classes.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "StatSystem_structs.hpp"
#include "AnimationUtilities_structs.hpp"


namespace SDK
{

// Class TheK39.K39KillerCosmeticHelperActor
// 0x0060 (0x0348 - 0x02E8)
class AK39KillerCosmeticHelperActor final : public ADBDPlayerCosmeticHelperActor
{
public:
	uint8                                         Pad_2E8[0x58];                                     // 0x02E8(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class UKillerPowerElementsSpawnedDelegate*    _killerPowerElementsSpawnedDelegate;               // 0x0340(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Cosmetic_OnAdjustingAlmostComplete();
	void Cosmetic_OnAdjustingStateEntered();
	void Cosmetic_OnAdjustingTimeExpired();
	void Cosmetic_OnCancelChargeTentacleSwing();
	void Cosmetic_OnMoriStarted();
	void Cosmetic_OnMoriStopped();
	void Cosmetic_OnMovementStarted();
	void Cosmetic_OnMovementStopped();
	void Cosmetic_OnPowerCooldownEnded();
	void Cosmetic_OnPowerUpModeAdded(bool inWithdrawal, float withdrawalTime);
	void Cosmetic_OnPowerUpModeRemoved();
	void Cosmetic_OnQuickTimeEventFailed();
	void Cosmetic_OnQuickTimeEventSucceded();
	void Cosmetic_OnStartChargeTentacleSwing();
	void Cosmetic_OnSurvivorRemovedInfected(class ASurvivor* Survivor);
	void Cosmetic_OnTentacleAttached(class ASurvivor* Survivor, const struct FVector& Location, bool isNonDamaging, class UPhysicalMaterial* PhysicalMaterial, const struct FVector& SurfaceNormal);
	void Cosmetic_OnTentacleLaunched(const bool isSuccess);
	void Cosmetic_OnTentacleRetracting(const struct FVector& Location);
	void Cosmetic_OnTentacleSwingCancelled();
	void Cosmetic_OnTentacleSwingCharged();
	void Cosmetic_OnTentacleSwingEnded();
	void Cosmetic_OnTentacleSwingEndedHitCollision();
	void Cosmetic_OnVaultDamageSurvivor(class ASurvivor* hitSurvivor);
	void Cosmetic_OnWithdrawalEnd(bool isInPowerupMode);
	void Cosmetic_OnWithdrawalPause();
	void Cosmetic_OnWithdrawalStart(float withdrawalTime);
	void Cosmetic_OnWithdrawalUnpause();
	void Cosmetic_UpdateTentacle(const struct FK39TentacleCosmeticSettings& Settings);

	class AK39TentaclesActor* GetTentaclesActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39KillerCosmeticHelperActor">();
	}
	static class AK39KillerCosmeticHelperActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AK39KillerCosmeticHelperActor>();
	}
};
static_assert(alignof(AK39KillerCosmeticHelperActor) == 0x000008, "Wrong alignment on AK39KillerCosmeticHelperActor");
static_assert(sizeof(AK39KillerCosmeticHelperActor) == 0x000348, "Wrong size on AK39KillerCosmeticHelperActor");
static_assert(offsetof(AK39KillerCosmeticHelperActor, _killerPowerElementsSpawnedDelegate) == 0x000340, "Member 'AK39KillerCosmeticHelperActor::_killerPowerElementsSpawnedDelegate' has a wrong offset!");

// Class TheK39.K39AnimInstance
// 0x00A0 (0x07C0 - 0x0720)
class UK39AnimInstance final : public UKillerAnimInstance
{
public:
	bool                                          _isAdjusting;                                      // 0x0720(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isSliding;                                        // 0x0721(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isLaunchingTentacle;                              // 0x0722(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingPulled;                                    // 0x0723(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _useBottomTentacles;                               // 0x0724(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _canLaunchSwing;                                   // 0x0725(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _canAttack;                                        // 0x0726(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EK39TentacleSwingResult                       _tentacleSwingResult;                              // 0x0727(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChargingSwing;                                  // 0x0728(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInPowerMode;                                    // 0x0729(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isStunned;                                        // 0x072A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isNearHitLocation;                                // 0x072B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _isNearHitLocationThreshold;                       // 0x072C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _swingHeightModifier;                              // 0x0730(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_734[0x4];                                      // 0x0734(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      _canLaunchSwingQuery;                              // 0x0738(0x0048)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	bool                                          _isObstructed;                                     // 0x0780(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_781[0x7];                                      // 0x0781(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UKillerPowerElementsSpawnedDelegate*    _killerElementsSpawnedDelegate;                    // 0x0788(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_790[0x30];                                     // 0x0790(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39AnimInstance">();
	}
	static class UK39AnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39AnimInstance>();
	}
};
static_assert(alignof(UK39AnimInstance) == 0x000010, "Wrong alignment on UK39AnimInstance");
static_assert(sizeof(UK39AnimInstance) == 0x0007C0, "Wrong size on UK39AnimInstance");
static_assert(offsetof(UK39AnimInstance, _isAdjusting) == 0x000720, "Member 'UK39AnimInstance::_isAdjusting' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _isSliding) == 0x000721, "Member 'UK39AnimInstance::_isSliding' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _isLaunchingTentacle) == 0x000722, "Member 'UK39AnimInstance::_isLaunchingTentacle' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _isBeingPulled) == 0x000723, "Member 'UK39AnimInstance::_isBeingPulled' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _useBottomTentacles) == 0x000724, "Member 'UK39AnimInstance::_useBottomTentacles' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _canLaunchSwing) == 0x000725, "Member 'UK39AnimInstance::_canLaunchSwing' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _canAttack) == 0x000726, "Member 'UK39AnimInstance::_canAttack' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _tentacleSwingResult) == 0x000727, "Member 'UK39AnimInstance::_tentacleSwingResult' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _isChargingSwing) == 0x000728, "Member 'UK39AnimInstance::_isChargingSwing' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _isInPowerMode) == 0x000729, "Member 'UK39AnimInstance::_isInPowerMode' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _isStunned) == 0x00072A, "Member 'UK39AnimInstance::_isStunned' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _isNearHitLocation) == 0x00072B, "Member 'UK39AnimInstance::_isNearHitLocation' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _isNearHitLocationThreshold) == 0x00072C, "Member 'UK39AnimInstance::_isNearHitLocationThreshold' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _swingHeightModifier) == 0x000730, "Member 'UK39AnimInstance::_swingHeightModifier' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _canLaunchSwingQuery) == 0x000738, "Member 'UK39AnimInstance::_canLaunchSwingQuery' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _isObstructed) == 0x000780, "Member 'UK39AnimInstance::_isObstructed' has a wrong offset!");
static_assert(offsetof(UK39AnimInstance, _killerElementsSpawnedDelegate) == 0x000788, "Member 'UK39AnimInstance::_killerElementsSpawnedDelegate' has a wrong offset!");

// Class TheK39.K39BaseTentacleSwingState
// 0x0068 (0x00B8 - 0x0050)
class UK39BaseTentacleSwingState : public UBaseReplicatedState
{
public:
	class UK39TentacleSwingAbilityData*           _abilityData;                                      // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x20];                                      // 0x0058(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  _stateTags;                                        // 0x0078(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _modifierFlags;                                    // 0x0098(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39BaseTentacleSwingState">();
	}
	static class UK39BaseTentacleSwingState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39BaseTentacleSwingState>();
	}
};
static_assert(alignof(UK39BaseTentacleSwingState) == 0x000008, "Wrong alignment on UK39BaseTentacleSwingState");
static_assert(sizeof(UK39BaseTentacleSwingState) == 0x0000B8, "Wrong size on UK39BaseTentacleSwingState");
static_assert(offsetof(UK39BaseTentacleSwingState, _abilityData) == 0x000050, "Member 'UK39BaseTentacleSwingState::_abilityData' has a wrong offset!");
static_assert(offsetof(UK39BaseTentacleSwingState, _stateTags) == 0x000078, "Member 'UK39BaseTentacleSwingState::_stateTags' has a wrong offset!");
static_assert(offsetof(UK39BaseTentacleSwingState, _modifierFlags) == 0x000098, "Member 'UK39BaseTentacleSwingState::_modifierFlags' has a wrong offset!");

// Class TheK39.K39CancelSwingInteractionDefinition
// 0x0030 (0x07A0 - 0x0770)
class UK39CancelSwingInteractionDefinition final : public UTransientInteractionDefinition
{
public:
	uint8                                         Pad_770[0x30];                                     // 0x0770(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39CancelSwingInteractionDefinition">();
	}
	static class UK39CancelSwingInteractionDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39CancelSwingInteractionDefinition>();
	}
};
static_assert(alignof(UK39CancelSwingInteractionDefinition) == 0x000010, "Wrong alignment on UK39CancelSwingInteractionDefinition");
static_assert(sizeof(UK39CancelSwingInteractionDefinition) == 0x0007A0, "Wrong size on UK39CancelSwingInteractionDefinition");

// Class TheK39.K39CancelTentacleSwingAbilityPowerWidgetComponent
// 0x0018 (0x00E8 - 0x00D0)
class UK39CancelTentacleSwingAbilityPowerWidgetComponent final : public UPowerWidgetPresentationComponent
{
public:
	uint8                                         Pad_D0[0x18];                                      // 0x00D0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39CancelTentacleSwingAbilityPowerWidgetComponent">();
	}
	static class UK39CancelTentacleSwingAbilityPowerWidgetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39CancelTentacleSwingAbilityPowerWidgetComponent>();
	}
};
static_assert(alignof(UK39CancelTentacleSwingAbilityPowerWidgetComponent) == 0x000008, "Wrong alignment on UK39CancelTentacleSwingAbilityPowerWidgetComponent");
static_assert(sizeof(UK39CancelTentacleSwingAbilityPowerWidgetComponent) == 0x0000E8, "Wrong size on UK39CancelTentacleSwingAbilityPowerWidgetComponent");

// Class TheK39.K39ChargeTentacleSwingInteractionDefinition
// 0x0060 (0x0920 - 0x08C0)
class UK39ChargeTentacleSwingInteractionDefinition final : public UChargeableInteractionDefinition
{
public:
	class UCurveFloat*                            _speedCurve;                                       // 0x08C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChargeableComponent*                   _replicatedChargeableComponent;                    // 0x08C8(0x0008)(ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UK39TentacleSwingAbilityData*           _abilityData;                                      // 0x08D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8D8[0x48];                                     // 0x08D8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_ReplicatedChargeableComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39ChargeTentacleSwingInteractionDefinition">();
	}
	static class UK39ChargeTentacleSwingInteractionDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39ChargeTentacleSwingInteractionDefinition>();
	}
};
static_assert(alignof(UK39ChargeTentacleSwingInteractionDefinition) == 0x000010, "Wrong alignment on UK39ChargeTentacleSwingInteractionDefinition");
static_assert(sizeof(UK39ChargeTentacleSwingInteractionDefinition) == 0x000920, "Wrong size on UK39ChargeTentacleSwingInteractionDefinition");
static_assert(offsetof(UK39ChargeTentacleSwingInteractionDefinition, _speedCurve) == 0x0008C0, "Member 'UK39ChargeTentacleSwingInteractionDefinition::_speedCurve' has a wrong offset!");
static_assert(offsetof(UK39ChargeTentacleSwingInteractionDefinition, _replicatedChargeableComponent) == 0x0008C8, "Member 'UK39ChargeTentacleSwingInteractionDefinition::_replicatedChargeableComponent' has a wrong offset!");
static_assert(offsetof(UK39ChargeTentacleSwingInteractionDefinition, _abilityData) == 0x0008D0, "Member 'UK39ChargeTentacleSwingInteractionDefinition::_abilityData' has a wrong offset!");

// Class TheK39.K39CheatComponent
// 0x0008 (0x00C0 - 0x00B8)
class UK39CheatComponent final : public UDLCCheatComponent
{
public:
	TSubclassOf<class UStatusEffect>              _k39KillerPowerupModeEffectClass;                  // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DBD_K39ActivatePowerupEffect();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39CheatComponent">();
	}
	static class UK39CheatComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39CheatComponent>();
	}
};
static_assert(alignof(UK39CheatComponent) == 0x000008, "Wrong alignment on UK39CheatComponent");
static_assert(sizeof(UK39CheatComponent) == 0x0000C0, "Wrong size on UK39CheatComponent");
static_assert(offsetof(UK39CheatComponent, _k39KillerPowerupModeEffectClass) == 0x0000B8, "Member 'UK39CheatComponent::_k39KillerPowerupModeEffectClass' has a wrong offset!");

// Class TheK39.K39GateBlockerEffect
// 0x0040 (0x03D8 - 0x0398)
class UK39GateBlockerEffect final : public UStatusEffect
{
public:
	TSubclassOf<class UStatusEffect>              _gateBlockerEffectClass;                           // 0x0398(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UK39TentacleSwingAbilityData*           _tentacleSwingAbilityData;                         // 0x03A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A8[0x30];                                     // 0x03A8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39GateBlockerEffect">();
	}
	static class UK39GateBlockerEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39GateBlockerEffect>();
	}
};
static_assert(alignof(UK39GateBlockerEffect) == 0x000008, "Wrong alignment on UK39GateBlockerEffect");
static_assert(sizeof(UK39GateBlockerEffect) == 0x0003D8, "Wrong size on UK39GateBlockerEffect");
static_assert(offsetof(UK39GateBlockerEffect, _gateBlockerEffectClass) == 0x000398, "Member 'UK39GateBlockerEffect::_gateBlockerEffectClass' has a wrong offset!");
static_assert(offsetof(UK39GateBlockerEffect, _tentacleSwingAbilityData) == 0x0003A0, "Member 'UK39GateBlockerEffect::_tentacleSwingAbilityData' has a wrong offset!");

// Class TheK39.K39KillerPowerupModeEffect
// 0x0098 (0x0430 - 0x0398)
class UK39KillerPowerupModeEffect final : public UStatusEffect
{
public:
	class UK39TentacleSwingAbilityData*           _abilityData;                                      // 0x0398(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A0[0x80];                                     // 0x03A0(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	EK39PowerupModeStatus                         _powerupStatus;                                    // 0x0420(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_421[0xF];                                      // 0x0421(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_PowerupStatus();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39KillerPowerupModeEffect">();
	}
	static class UK39KillerPowerupModeEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39KillerPowerupModeEffect>();
	}
};
static_assert(alignof(UK39KillerPowerupModeEffect) == 0x000008, "Wrong alignment on UK39KillerPowerupModeEffect");
static_assert(sizeof(UK39KillerPowerupModeEffect) == 0x000430, "Wrong size on UK39KillerPowerupModeEffect");
static_assert(offsetof(UK39KillerPowerupModeEffect, _abilityData) == 0x000398, "Member 'UK39KillerPowerupModeEffect::_abilityData' has a wrong offset!");
static_assert(offsetof(UK39KillerPowerupModeEffect, _powerupStatus) == 0x000420, "Member 'UK39KillerPowerupModeEffect::_powerupStatus' has a wrong offset!");

// Class TheK39.K39LaunchTentacleInteractionDefinition
// 0x0030 (0x07A0 - 0x0770)
class UK39LaunchTentacleInteractionDefinition final : public UInteractionDefinition
{
public:
	uint8                                         Pad_768[0x38];                                     // 0x0768(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39LaunchTentacleInteractionDefinition">();
	}
	static class UK39LaunchTentacleInteractionDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39LaunchTentacleInteractionDefinition>();
	}
};
static_assert(alignof(UK39LaunchTentacleInteractionDefinition) == 0x000010, "Wrong alignment on UK39LaunchTentacleInteractionDefinition");
static_assert(sizeof(UK39LaunchTentacleInteractionDefinition) == 0x0007A0, "Wrong size on UK39LaunchTentacleInteractionDefinition");

// Class TheK39.K39P01
// 0x0040 (0x0520 - 0x04E0)
class UK39P01 final : public UHexPerk
{
public:
	class ATotem*                                 _boundTotem;                                       // 0x04E0(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _survivorBasicHitsCount;                           // 0x04E8(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _survivorBasicHitsRequired[0x3];                   // 0x04EC(0x0004)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _hinderedStatusEffectClass;                        // 0x04F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _hinderedAmount[0x3];                              // 0x0500(0x0004)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _hinderedDuration[0x3];                            // 0x050C(0x0004)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_518[0x8];                                      // 0x0518(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Client_UpdateHudIcon(float Percent) const;
	void OnRep_SurvivorBasicHitsCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39P01">();
	}
	static class UK39P01* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39P01>();
	}
};
static_assert(alignof(UK39P01) == 0x000008, "Wrong alignment on UK39P01");
static_assert(sizeof(UK39P01) == 0x000520, "Wrong size on UK39P01");
static_assert(offsetof(UK39P01, _boundTotem) == 0x0004E0, "Member 'UK39P01::_boundTotem' has a wrong offset!");
static_assert(offsetof(UK39P01, _survivorBasicHitsCount) == 0x0004E8, "Member 'UK39P01::_survivorBasicHitsCount' has a wrong offset!");
static_assert(offsetof(UK39P01, _survivorBasicHitsRequired) == 0x0004EC, "Member 'UK39P01::_survivorBasicHitsRequired' has a wrong offset!");
static_assert(offsetof(UK39P01, _hinderedStatusEffectClass) == 0x0004F8, "Member 'UK39P01::_hinderedStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UK39P01, _hinderedAmount) == 0x000500, "Member 'UK39P01::_hinderedAmount' has a wrong offset!");
static_assert(offsetof(UK39P01, _hinderedDuration) == 0x00050C, "Member 'UK39P01::_hinderedDuration' has a wrong offset!");

// Class TheK39.K39P02
// 0x0018 (0x0478 - 0x0460)
class UK39P02 final : public UPerk
{
public:
	TSubclassOf<class UStatusEffect>              _K39P02StatusEffectClass;                          // 0x0460(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _maxTokenAmount[0x3];                              // 0x0468(0x0004)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39P02">();
	}
	static class UK39P02* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39P02>();
	}
};
static_assert(alignof(UK39P02) == 0x000008, "Wrong alignment on UK39P02");
static_assert(sizeof(UK39P02) == 0x000478, "Wrong size on UK39P02");
static_assert(offsetof(UK39P02, _K39P02StatusEffectClass) == 0x000460, "Member 'UK39P02::_K39P02StatusEffectClass' has a wrong offset!");
static_assert(offsetof(UK39P02, _maxTokenAmount) == 0x000468, "Member 'UK39P02::_maxTokenAmount' has a wrong offset!");

// Class TheK39.K39P02StatusEffect
// 0x0008 (0x03A0 - 0x0398)
class UK39P02StatusEffect final : public UStatusEffect
{
public:
	float                                         _effectAmountPerToken;                             // 0x0398(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39P02StatusEffect">();
	}
	static class UK39P02StatusEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39P02StatusEffect>();
	}
};
static_assert(alignof(UK39P02StatusEffect) == 0x000008, "Wrong alignment on UK39P02StatusEffect");
static_assert(sizeof(UK39P02StatusEffect) == 0x0003A0, "Wrong size on UK39P02StatusEffect");
static_assert(offsetof(UK39P02StatusEffect, _effectAmountPerToken) == 0x000398, "Member 'UK39P02StatusEffect::_effectAmountPerToken' has a wrong offset!");

// Class TheK39.K39P03
// 0x0028 (0x0488 - 0x0460)
class UK39P03 final : public UPerk
{
public:
	TArray<class ADBDPlayer*>                     _hookedPlayers;                                    // 0x0460(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	float                                         _blockDurationPerToken[0x3];                       // 0x0470(0x0004)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _survivorStatusEffectClass;                        // 0x0480(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39P03">();
	}
	static class UK39P03* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39P03>();
	}
};
static_assert(alignof(UK39P03) == 0x000008, "Wrong alignment on UK39P03");
static_assert(sizeof(UK39P03) == 0x000488, "Wrong size on UK39P03");
static_assert(offsetof(UK39P03, _hookedPlayers) == 0x000460, "Member 'UK39P03::_hookedPlayers' has a wrong offset!");
static_assert(offsetof(UK39P03, _blockDurationPerToken) == 0x000470, "Member 'UK39P03::_blockDurationPerToken' has a wrong offset!");
static_assert(offsetof(UK39P03, _survivorStatusEffectClass) == 0x000480, "Member 'UK39P03::_survivorStatusEffectClass' has a wrong offset!");

// Class TheK39.K39Power
// 0x0008 (0x0618 - 0x0610)
class AK39Power final : public AKillerPower
{
public:
	class AK39TentaclesActor*                     _tentaclesActor;                                   // 0x0610(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class AK39TentaclesActor* GetTentaclesActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39Power">();
	}
	static class AK39Power* GetDefaultObj()
	{
		return GetDefaultObjImpl<AK39Power>();
	}
};
static_assert(alignof(AK39Power) == 0x000008, "Wrong alignment on AK39Power");
static_assert(sizeof(AK39Power) == 0x000618, "Wrong size on AK39Power");
static_assert(offsetof(AK39Power, _tentaclesActor) == 0x000610, "Member 'AK39Power::_tentaclesActor' has a wrong offset!");

// Class TheK39.K39PowerAddon04
// 0x0018 (0x0318 - 0x0300)
class UK39PowerAddon04 final : public UItemAddon
{
public:
	struct FGameplayTag                           _tentacleSwingSpeedIncreaseTag;                    // 0x0300(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingSpeedIncreaseValue;                  // 0x030C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingSpeedIncreasePercentage;             // 0x0310(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39PowerAddon04">();
	}
	static class UK39PowerAddon04* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39PowerAddon04>();
	}
};
static_assert(alignof(UK39PowerAddon04) == 0x000008, "Wrong alignment on UK39PowerAddon04");
static_assert(sizeof(UK39PowerAddon04) == 0x000318, "Wrong size on UK39PowerAddon04");
static_assert(offsetof(UK39PowerAddon04, _tentacleSwingSpeedIncreaseTag) == 0x000300, "Member 'UK39PowerAddon04::_tentacleSwingSpeedIncreaseTag' has a wrong offset!");
static_assert(offsetof(UK39PowerAddon04, _tentacleSwingSpeedIncreaseValue) == 0x00030C, "Member 'UK39PowerAddon04::_tentacleSwingSpeedIncreaseValue' has a wrong offset!");
static_assert(offsetof(UK39PowerAddon04, _tentacleSwingSpeedIncreasePercentage) == 0x000310, "Member 'UK39PowerAddon04::_tentacleSwingSpeedIncreasePercentage' has a wrong offset!");

// Class TheK39.K39PowerAddon06
// 0x0018 (0x0318 - 0x0300)
class UK39PowerAddon06 final : public UItemAddon
{
public:
	struct FGameplayTag                           _tentacleSwingSpeedIncreaseTag;                    // 0x0300(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingSpeedIncreaseValue;                  // 0x030C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingSpeedIncreasePercentage;             // 0x0310(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isPoweredUp;                                      // 0x0314(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39PowerAddon06">();
	}
	static class UK39PowerAddon06* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39PowerAddon06>();
	}
};
static_assert(alignof(UK39PowerAddon06) == 0x000008, "Wrong alignment on UK39PowerAddon06");
static_assert(sizeof(UK39PowerAddon06) == 0x000318, "Wrong size on UK39PowerAddon06");
static_assert(offsetof(UK39PowerAddon06, _tentacleSwingSpeedIncreaseTag) == 0x000300, "Member 'UK39PowerAddon06::_tentacleSwingSpeedIncreaseTag' has a wrong offset!");
static_assert(offsetof(UK39PowerAddon06, _tentacleSwingSpeedIncreaseValue) == 0x00030C, "Member 'UK39PowerAddon06::_tentacleSwingSpeedIncreaseValue' has a wrong offset!");
static_assert(offsetof(UK39PowerAddon06, _tentacleSwingSpeedIncreasePercentage) == 0x000310, "Member 'UK39PowerAddon06::_tentacleSwingSpeedIncreasePercentage' has a wrong offset!");
static_assert(offsetof(UK39PowerAddon06, _isPoweredUp) == 0x000314, "Member 'UK39PowerAddon06::_isPoweredUp' has a wrong offset!");

// Class TheK39.K39PowerAddon10
// 0x0010 (0x0310 - 0x0300)
class UK39PowerAddon10 final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _exhaustedEffectClass;                             // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _exhaustedEffectDuration;                          // 0x0308(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39PowerAddon10">();
	}
	static class UK39PowerAddon10* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39PowerAddon10>();
	}
};
static_assert(alignof(UK39PowerAddon10) == 0x000008, "Wrong alignment on UK39PowerAddon10");
static_assert(sizeof(UK39PowerAddon10) == 0x000310, "Wrong size on UK39PowerAddon10");
static_assert(offsetof(UK39PowerAddon10, _exhaustedEffectClass) == 0x000300, "Member 'UK39PowerAddon10::_exhaustedEffectClass' has a wrong offset!");
static_assert(offsetof(UK39PowerAddon10, _exhaustedEffectDuration) == 0x000308, "Member 'UK39PowerAddon10::_exhaustedEffectDuration' has a wrong offset!");

// Class TheK39.K39PowerAddon12
// 0x0010 (0x0310 - 0x0300)
class UK39PowerAddon12 final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _auraRevealEffectClass;                            // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _auraRevealEffectDuration;                         // 0x0308(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39PowerAddon12">();
	}
	static class UK39PowerAddon12* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39PowerAddon12>();
	}
};
static_assert(alignof(UK39PowerAddon12) == 0x000008, "Wrong alignment on UK39PowerAddon12");
static_assert(sizeof(UK39PowerAddon12) == 0x000310, "Wrong size on UK39PowerAddon12");
static_assert(offsetof(UK39PowerAddon12, _auraRevealEffectClass) == 0x000300, "Member 'UK39PowerAddon12::_auraRevealEffectClass' has a wrong offset!");
static_assert(offsetof(UK39PowerAddon12, _auraRevealEffectDuration) == 0x000308, "Member 'UK39PowerAddon12::_auraRevealEffectDuration' has a wrong offset!");

// Class TheK39.K39PowerAddon13
// 0x0010 (0x0310 - 0x0300)
class UK39PowerAddon13 final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _effectClass;                                      // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _effectDuration;                                   // 0x0308(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39PowerAddon13">();
	}
	static class UK39PowerAddon13* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39PowerAddon13>();
	}
};
static_assert(alignof(UK39PowerAddon13) == 0x000008, "Wrong alignment on UK39PowerAddon13");
static_assert(sizeof(UK39PowerAddon13) == 0x000310, "Wrong size on UK39PowerAddon13");
static_assert(offsetof(UK39PowerAddon13, _effectClass) == 0x000300, "Member 'UK39PowerAddon13::_effectClass' has a wrong offset!");
static_assert(offsetof(UK39PowerAddon13, _effectDuration) == 0x000308, "Member 'UK39PowerAddon13::_effectDuration' has a wrong offset!");

// Class TheK39.K39PowerAddon15
// 0x0010 (0x0310 - 0x0300)
class UK39PowerAddon15 final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _hemorrhageStatusEffectClass;                      // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _hemorrhageStatusEffectDuration;                   // 0x0308(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39PowerAddon15">();
	}
	static class UK39PowerAddon15* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39PowerAddon15>();
	}
};
static_assert(alignof(UK39PowerAddon15) == 0x000008, "Wrong alignment on UK39PowerAddon15");
static_assert(sizeof(UK39PowerAddon15) == 0x000310, "Wrong size on UK39PowerAddon15");
static_assert(offsetof(UK39PowerAddon15, _hemorrhageStatusEffectClass) == 0x000300, "Member 'UK39PowerAddon15::_hemorrhageStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UK39PowerAddon15, _hemorrhageStatusEffectDuration) == 0x000308, "Member 'UK39PowerAddon15::_hemorrhageStatusEffectDuration' has a wrong offset!");

// Class TheK39.K39PowerAddon16
// 0x0010 (0x0310 - 0x0300)
class UK39PowerAddon16 final : public UItemAddon
{
public:
	float                                         _auraRevealRange;                                  // 0x0300(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _auraRevealDuration;                               // 0x0304(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _auraRevealEffectClass;                            // 0x0308(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39PowerAddon16">();
	}
	static class UK39PowerAddon16* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39PowerAddon16>();
	}
};
static_assert(alignof(UK39PowerAddon16) == 0x000008, "Wrong alignment on UK39PowerAddon16");
static_assert(sizeof(UK39PowerAddon16) == 0x000310, "Wrong size on UK39PowerAddon16");
static_assert(offsetof(UK39PowerAddon16, _auraRevealRange) == 0x000300, "Member 'UK39PowerAddon16::_auraRevealRange' has a wrong offset!");
static_assert(offsetof(UK39PowerAddon16, _auraRevealDuration) == 0x000304, "Member 'UK39PowerAddon16::_auraRevealDuration' has a wrong offset!");
static_assert(offsetof(UK39PowerAddon16, _auraRevealEffectClass) == 0x000308, "Member 'UK39PowerAddon16::_auraRevealEffectClass' has a wrong offset!");

// Class TheK39.K39PowerAddon17
// 0x0008 (0x0308 - 0x0300)
class UK39PowerAddon17 final : public UItemAddon
{
public:
	float                                         _blockDuration;                                    // 0x0300(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39PowerAddon17">();
	}
	static class UK39PowerAddon17* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39PowerAddon17>();
	}
};
static_assert(alignof(UK39PowerAddon17) == 0x000008, "Wrong alignment on UK39PowerAddon17");
static_assert(sizeof(UK39PowerAddon17) == 0x000308, "Wrong size on UK39PowerAddon17");
static_assert(offsetof(UK39PowerAddon17, _blockDuration) == 0x000300, "Member 'UK39PowerAddon17::_blockDuration' has a wrong offset!");

// Class TheK39.K39PowerAddon18
// 0x0010 (0x0310 - 0x0300)
class UK39PowerAddon18 final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _hasteStatusEffectClass;                           // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _hasteStatusEffectAmount;                          // 0x0308(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _hasteStatusEffectDuration;                        // 0x030C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39PowerAddon18">();
	}
	static class UK39PowerAddon18* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39PowerAddon18>();
	}
};
static_assert(alignof(UK39PowerAddon18) == 0x000008, "Wrong alignment on UK39PowerAddon18");
static_assert(sizeof(UK39PowerAddon18) == 0x000310, "Wrong size on UK39PowerAddon18");
static_assert(offsetof(UK39PowerAddon18, _hasteStatusEffectClass) == 0x000300, "Member 'UK39PowerAddon18::_hasteStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UK39PowerAddon18, _hasteStatusEffectAmount) == 0x000308, "Member 'UK39PowerAddon18::_hasteStatusEffectAmount' has a wrong offset!");
static_assert(offsetof(UK39PowerAddon18, _hasteStatusEffectDuration) == 0x00030C, "Member 'UK39PowerAddon18::_hasteStatusEffectDuration' has a wrong offset!");

// Class TheK39.K39PowerAddon19
// 0x0010 (0x0310 - 0x0300)
class UK39PowerAddon19 final : public UItemAddon
{
public:
	float                                         _addonEffectRange;                                 // 0x0300(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _screamDuration;                                   // 0x0308(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multicast_SurvivorScream(const class ASurvivor* Survivor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39PowerAddon19">();
	}
	static class UK39PowerAddon19* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39PowerAddon19>();
	}
};
static_assert(alignof(UK39PowerAddon19) == 0x000008, "Wrong alignment on UK39PowerAddon19");
static_assert(sizeof(UK39PowerAddon19) == 0x000310, "Wrong size on UK39PowerAddon19");
static_assert(offsetof(UK39PowerAddon19, _addonEffectRange) == 0x000300, "Member 'UK39PowerAddon19::_addonEffectRange' has a wrong offset!");
static_assert(offsetof(UK39PowerAddon19, _screamDuration) == 0x000308, "Member 'UK39PowerAddon19::_screamDuration' has a wrong offset!");

// Class TheK39.K39PowerAddon20
// 0x0008 (0x0308 - 0x0300)
class UK39PowerAddon20 final : public UItemAddon
{
public:
	bool                                          _isOnLastSwing;                                    // 0x0300(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multicast_DestroyPallet(class APallet* Pallet);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39PowerAddon20">();
	}
	static class UK39PowerAddon20* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39PowerAddon20>();
	}
};
static_assert(alignof(UK39PowerAddon20) == 0x000008, "Wrong alignment on UK39PowerAddon20");
static_assert(sizeof(UK39PowerAddon20) == 0x000308, "Wrong size on UK39PowerAddon20");
static_assert(offsetof(UK39PowerAddon20, _isOnLastSwing) == 0x000300, "Member 'UK39PowerAddon20::_isOnLastSwing' has a wrong offset!");

// Class TheK39.K39QuickTimeEventPlayerComponent
// 0x0048 (0x0120 - 0x00D8)
class UK39QuickTimeEventPlayerComponent final : public UQuickTimeEventPlayerComponent
{
public:
	uint8                                         Pad_D8[0x18];                                      // 0x00D8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UKillerPowerElementsSpawnedDelegate*    _killerElementsSpawnedDelegate;                    // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x28];                                      // 0x00F8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39QuickTimeEventPlayerComponent">();
	}
	static class UK39QuickTimeEventPlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39QuickTimeEventPlayerComponent>();
	}
};
static_assert(alignof(UK39QuickTimeEventPlayerComponent) == 0x000008, "Wrong alignment on UK39QuickTimeEventPlayerComponent");
static_assert(sizeof(UK39QuickTimeEventPlayerComponent) == 0x000120, "Wrong size on UK39QuickTimeEventPlayerComponent");
static_assert(offsetof(UK39QuickTimeEventPlayerComponent, _killerElementsSpawnedDelegate) == 0x0000F0, "Member 'UK39QuickTimeEventPlayerComponent::_killerElementsSpawnedDelegate' has a wrong offset!");

// Class TheK39.K39ScoringComponent
// 0x00B8 (0x0170 - 0x00B8)
class UK39ScoringComponent final : public UActorComponent
{
public:
	float                                         _windowToHitSurvivorDuration;                      // 0x00B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0xB4];                                      // 0x00BC(0x00B4)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39ScoringComponent">();
	}
	static class UK39ScoringComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39ScoringComponent>();
	}
};
static_assert(alignof(UK39ScoringComponent) == 0x000008, "Wrong alignment on UK39ScoringComponent");
static_assert(sizeof(UK39ScoringComponent) == 0x000170, "Wrong size on UK39ScoringComponent");
static_assert(offsetof(UK39ScoringComponent, _windowToHitSurvivorDuration) == 0x0000B8, "Member 'UK39ScoringComponent::_windowToHitSurvivorDuration' has a wrong offset!");

// Class TheK39.K39SlideComponent
// 0x0088 (0x0140 - 0x00B8)
class UK39SlideComponent final : public UActorComponent
{
public:
	class UK39TentacleSwingAbilityData*           _abilityData;                                      // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  _slidingStateTags;                                 // 0x00C0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _slidingSpeedCurve;                                // 0x00E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x50];                                      // 0x00E8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AKiller>                 _killer;                                           // 0x0138(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39SlideComponent">();
	}
	static class UK39SlideComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39SlideComponent>();
	}
};
static_assert(alignof(UK39SlideComponent) == 0x000008, "Wrong alignment on UK39SlideComponent");
static_assert(sizeof(UK39SlideComponent) == 0x000140, "Wrong size on UK39SlideComponent");
static_assert(offsetof(UK39SlideComponent, _abilityData) == 0x0000B8, "Member 'UK39SlideComponent::_abilityData' has a wrong offset!");
static_assert(offsetof(UK39SlideComponent, _slidingStateTags) == 0x0000C0, "Member 'UK39SlideComponent::_slidingStateTags' has a wrong offset!");
static_assert(offsetof(UK39SlideComponent, _slidingSpeedCurve) == 0x0000E0, "Member 'UK39SlideComponent::_slidingSpeedCurve' has a wrong offset!");
static_assert(offsetof(UK39SlideComponent, _killer) == 0x000138, "Member 'UK39SlideComponent::_killer' has a wrong offset!");

// Class TheK39.K39SurvivorCosmeticHelperActor
// 0x0040 (0x0398 - 0x0358)
class AK39SurvivorCosmeticHelperActor final : public ASurvivorCosmeticHelperActor
{
public:
	uint8                                         Pad_358[0x38];                                     // 0x0358(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UKillerPowerElementsSpawnedDelegate*    _killerPowerElementsSpawnedDelegate;               // 0x0390(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Cosmetic_OnInfectedAdded();
	void Cosmetic_OnInfectedRemoved();
	void Cosmetic_OnUpdateTargetingReticle(const struct FVector& Location, class ASurvivor* targetedSurvivor, const bool IsNonDamagingSwing, const struct FVector& SurfaceNormal);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39SurvivorCosmeticHelperActor">();
	}
	static class AK39SurvivorCosmeticHelperActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AK39SurvivorCosmeticHelperActor>();
	}
};
static_assert(alignof(AK39SurvivorCosmeticHelperActor) == 0x000008, "Wrong alignment on AK39SurvivorCosmeticHelperActor");
static_assert(sizeof(AK39SurvivorCosmeticHelperActor) == 0x000398, "Wrong size on AK39SurvivorCosmeticHelperActor");
static_assert(offsetof(AK39SurvivorCosmeticHelperActor, _killerPowerElementsSpawnedDelegate) == 0x000390, "Member 'AK39SurvivorCosmeticHelperActor::_killerPowerElementsSpawnedDelegate' has a wrong offset!");

// Class TheK39.K39SurvivorInfectedComponent
// 0x0010 (0x00C8 - 0x00B8)
class UK39SurvivorInfectedComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39SurvivorInfectedComponent">();
	}
	static class UK39SurvivorInfectedComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39SurvivorInfectedComponent>();
	}
};
static_assert(alignof(UK39SurvivorInfectedComponent) == 0x000008, "Wrong alignment on UK39SurvivorInfectedComponent");
static_assert(sizeof(UK39SurvivorInfectedComponent) == 0x0000C8, "Wrong size on UK39SurvivorInfectedComponent");

// Class TheK39.K39TentacleAnimInstance
// 0x0120 (0x0490 - 0x0370)
class UK39TentacleAnimInstance : public UDynamicAccessoryAnimInstance
{
public:
	class AKiller*                                _owningKiller;                                     // 0x0368(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AK39TentaclesActor*                     _tentaclesActor;                                   // 0x0370(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isLevelReadyToPlay;                               // 0x0378(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isIntroComplete;                                  // 0x0379(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isMoving;                                         // 0x037A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isLaunchingTentacle;                              // 0x037B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingPulled;                                    // 0x037C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_37D[0x3];                                      // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _hitLocationTop;                                   // 0x0380(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                _hitLocationBot;                                   // 0x0398(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EK39TentacleSwingResult                       _tentacleSwingResult;                              // 0x03B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _firstPersonView;                                  // 0x03B1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInAir;                                          // 0x03B2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B3[0x1];                                      // 0x03B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _forwardVelocity;                                  // 0x03B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _lateralVelocity;                                  // 0x03B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCarrying;                                       // 0x03BC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAttackSubstate                               _attackState;                                      // 0x03BD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChargingSwing;                                  // 0x03BE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInPowerMode;                                    // 0x03BF(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _canLaunchSwing;                                   // 0x03C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _useBottomTentacles;                               // 0x03C1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _canAttack;                                        // 0x03C2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C3[0x1];                                      // 0x03C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _tentacleDistanceTop;                              // 0x03C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _tentacleDistanceBot;                              // 0x03C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isStunned;                                        // 0x03CC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isNearHitLocation;                                // 0x03CD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3CE[0x2];                                      // 0x03CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _isNearHitLocationThreshold;                       // 0x03D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _hitLocationLingeringDuration;                     // 0x03D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagQuery                      _canLaunchSwingQuery;                              // 0x03D8(0x0048)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	bool                                          _isSliding;                                        // 0x0420(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isObstructed;                                     // 0x0421(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_422[0x6E];                                     // 0x0422(0x006E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnIntroCompleted();
	void OnLevelReadyToPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39TentacleAnimInstance">();
	}
	static class UK39TentacleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39TentacleAnimInstance>();
	}
};
static_assert(alignof(UK39TentacleAnimInstance) == 0x000010, "Wrong alignment on UK39TentacleAnimInstance");
static_assert(sizeof(UK39TentacleAnimInstance) == 0x000490, "Wrong size on UK39TentacleAnimInstance");
static_assert(offsetof(UK39TentacleAnimInstance, _owningKiller) == 0x000368, "Member 'UK39TentacleAnimInstance::_owningKiller' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _tentaclesActor) == 0x000370, "Member 'UK39TentacleAnimInstance::_tentaclesActor' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _isLevelReadyToPlay) == 0x000378, "Member 'UK39TentacleAnimInstance::_isLevelReadyToPlay' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _isIntroComplete) == 0x000379, "Member 'UK39TentacleAnimInstance::_isIntroComplete' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _isMoving) == 0x00037A, "Member 'UK39TentacleAnimInstance::_isMoving' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _isLaunchingTentacle) == 0x00037B, "Member 'UK39TentacleAnimInstance::_isLaunchingTentacle' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _isBeingPulled) == 0x00037C, "Member 'UK39TentacleAnimInstance::_isBeingPulled' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _hitLocationTop) == 0x000380, "Member 'UK39TentacleAnimInstance::_hitLocationTop' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _hitLocationBot) == 0x000398, "Member 'UK39TentacleAnimInstance::_hitLocationBot' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _tentacleSwingResult) == 0x0003B0, "Member 'UK39TentacleAnimInstance::_tentacleSwingResult' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _firstPersonView) == 0x0003B1, "Member 'UK39TentacleAnimInstance::_firstPersonView' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _isInAir) == 0x0003B2, "Member 'UK39TentacleAnimInstance::_isInAir' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _forwardVelocity) == 0x0003B4, "Member 'UK39TentacleAnimInstance::_forwardVelocity' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _lateralVelocity) == 0x0003B8, "Member 'UK39TentacleAnimInstance::_lateralVelocity' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _isCarrying) == 0x0003BC, "Member 'UK39TentacleAnimInstance::_isCarrying' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _attackState) == 0x0003BD, "Member 'UK39TentacleAnimInstance::_attackState' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _isChargingSwing) == 0x0003BE, "Member 'UK39TentacleAnimInstance::_isChargingSwing' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _isInPowerMode) == 0x0003BF, "Member 'UK39TentacleAnimInstance::_isInPowerMode' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _canLaunchSwing) == 0x0003C0, "Member 'UK39TentacleAnimInstance::_canLaunchSwing' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _useBottomTentacles) == 0x0003C1, "Member 'UK39TentacleAnimInstance::_useBottomTentacles' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _canAttack) == 0x0003C2, "Member 'UK39TentacleAnimInstance::_canAttack' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _tentacleDistanceTop) == 0x0003C4, "Member 'UK39TentacleAnimInstance::_tentacleDistanceTop' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _tentacleDistanceBot) == 0x0003C8, "Member 'UK39TentacleAnimInstance::_tentacleDistanceBot' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _isStunned) == 0x0003CC, "Member 'UK39TentacleAnimInstance::_isStunned' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _isNearHitLocation) == 0x0003CD, "Member 'UK39TentacleAnimInstance::_isNearHitLocation' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _isNearHitLocationThreshold) == 0x0003D0, "Member 'UK39TentacleAnimInstance::_isNearHitLocationThreshold' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _hitLocationLingeringDuration) == 0x0003D4, "Member 'UK39TentacleAnimInstance::_hitLocationLingeringDuration' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _canLaunchSwingQuery) == 0x0003D8, "Member 'UK39TentacleAnimInstance::_canLaunchSwingQuery' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _isSliding) == 0x000420, "Member 'UK39TentacleAnimInstance::_isSliding' has a wrong offset!");
static_assert(offsetof(UK39TentacleAnimInstance, _isObstructed) == 0x000421, "Member 'UK39TentacleAnimInstance::_isObstructed' has a wrong offset!");

// Class TheK39.K39TentaclesActor
// 0x0160 (0x0400 - 0x02A0)
class AK39TentaclesActor : public AActor
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDSkeletalMeshComponentBudgeted*      _skeletalMeshComponent;                            // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDSkeletalMeshComponentBudgeted*      _longTentaclesMeshComponent;                       // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDOutlineComponent*                   _outlineComponentShortTentacles;                   // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDOutlineComponent*                   _outlineComponentLongTentacles;                    // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimationMontageSlave*                 _montageFollower;                                  // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMontagePlayer*                         _montagePlayer;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FK39TentacleSkin                       _defaultSkin;                                      // 0x02D8(0x0070)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FK39TentacleSkin>    _skinOverrides;                                    // 0x0348(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagQuery                      _shouldShowLongTentaclesTagQuery;                  // 0x0398(0x0048)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E0[0x8];                                      // 0x03E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        _rootComponent;                                    // 0x03E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TScriptInterface<class IObjectStateProvider>  _stateProvider;                                    // 0x03F0(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleOwningPlayerCustomizationsChanged();
	void SetLongTentaclesVisibility(bool IsVisible);

	class UDBDSkeletalMeshComponentBudgeted* GetLongTentaclesMesh() const;
	class UDBDSkeletalMeshComponentBudgeted* GetMesh() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39TentaclesActor">();
	}
	static class AK39TentaclesActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AK39TentaclesActor>();
	}
};
static_assert(alignof(AK39TentaclesActor) == 0x000008, "Wrong alignment on AK39TentaclesActor");
static_assert(sizeof(AK39TentaclesActor) == 0x000400, "Wrong size on AK39TentaclesActor");
static_assert(offsetof(AK39TentaclesActor, _skeletalMeshComponent) == 0x0002A8, "Member 'AK39TentaclesActor::_skeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(AK39TentaclesActor, _longTentaclesMeshComponent) == 0x0002B0, "Member 'AK39TentaclesActor::_longTentaclesMeshComponent' has a wrong offset!");
static_assert(offsetof(AK39TentaclesActor, _outlineComponentShortTentacles) == 0x0002B8, "Member 'AK39TentaclesActor::_outlineComponentShortTentacles' has a wrong offset!");
static_assert(offsetof(AK39TentaclesActor, _outlineComponentLongTentacles) == 0x0002C0, "Member 'AK39TentaclesActor::_outlineComponentLongTentacles' has a wrong offset!");
static_assert(offsetof(AK39TentaclesActor, _montageFollower) == 0x0002C8, "Member 'AK39TentaclesActor::_montageFollower' has a wrong offset!");
static_assert(offsetof(AK39TentaclesActor, _montagePlayer) == 0x0002D0, "Member 'AK39TentaclesActor::_montagePlayer' has a wrong offset!");
static_assert(offsetof(AK39TentaclesActor, _defaultSkin) == 0x0002D8, "Member 'AK39TentaclesActor::_defaultSkin' has a wrong offset!");
static_assert(offsetof(AK39TentaclesActor, _skinOverrides) == 0x000348, "Member 'AK39TentaclesActor::_skinOverrides' has a wrong offset!");
static_assert(offsetof(AK39TentaclesActor, _shouldShowLongTentaclesTagQuery) == 0x000398, "Member 'AK39TentaclesActor::_shouldShowLongTentaclesTagQuery' has a wrong offset!");
static_assert(offsetof(AK39TentaclesActor, _rootComponent) == 0x0003E8, "Member 'AK39TentaclesActor::_rootComponent' has a wrong offset!");
static_assert(offsetof(AK39TentaclesActor, _stateProvider) == 0x0003F0, "Member 'AK39TentaclesActor::_stateProvider' has a wrong offset!");

// Class TheK39.K39TentacleSwingAbility
// 0x04A8 (0x0688 - 0x01E0)
class UK39TentacleSwingAbility final : public UKillerAbilityComponent
{
public:
	uint8                                         Pad_1E0[0x48];                                     // 0x01E0(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AK39TentacleTargetIndicator> _tentacleTargetIndicatorClass;                    // 0x0228(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AK39TentacleTargetIndicator*            _tentacleTargetIndicator;                          // 0x0230(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UInteractionDefinition>     _chargeTentacleInteractionClass;                   // 0x0238(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UInteractionDefinition>     _launchTentacleInteractionClass;                   // 0x0240(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UInteractionDefinition>     _cancelSwingInteractionClass;                      // 0x0248(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_250[0x20];                                     // 0x0250(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FK39TentacleSwingData                  _cachedTentacleSwingData;                          // 0x0270(0x0070)(Net, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          _hasSuccessfullySwungAtLeastOnce;                  // 0x02E0(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EK39TentacleSwingResult                       _cachedTentacleSwingResult;                        // 0x02E1(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E2[0x6];                                      // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNonTunableStat                        _maximumTentacleSwingRange;                        // 0x02E8(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FNonTunableStat                        _maximumSwingCount;                                // 0x0348(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FNonTunableStat                        _adjustingStateDuration;                           // 0x03A8(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FNonTunableStat                        _slidingDuration;                                  // 0x0408(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UTurnLimitationStrategy*                _turnLimitationStrategy;                           // 0x0468(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _mouseLimitationCurve;                             // 0x0470(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _controllerLimitationCurve;                        // 0x0478(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _angleDistanceCurve;                               // 0x0480(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _swingHeightCurve;                                 // 0x0488(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _swingHeightCurveSurvivor;                         // 0x0490(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _stunFailSafeDuration;                             // 0x0498(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49C[0xFC];                                     // 0x049C(0x00FC)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimerObject*                           _recentlySwingingTimer;                            // 0x0598(0x0008)(ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _k39KillerPowerupModeEffectClass;                  // 0x05A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _swingCooldownStateTags;                           // 0x05A8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C8[0x10];                                     // 0x05C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _powerupWithdrawalAdditionalTimer;                 // 0x05D8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _hasBegunQuickTimeEvent;                           // 0x05DC(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5DD[0xAB];                                     // 0x05DD(0x00AB)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_HasBegunQuickTimeEvent();
	void OnStun(const struct FGameplayTag& GameplayTag, const struct FGameEventData& GameEventData);
	void Server_CacheSwingData(const struct FK39TentacleSwingData& swingData, EK39TentacleSwingResult swingResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39TentacleSwingAbility">();
	}
	static class UK39TentacleSwingAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39TentacleSwingAbility>();
	}
};
static_assert(alignof(UK39TentacleSwingAbility) == 0x000008, "Wrong alignment on UK39TentacleSwingAbility");
static_assert(sizeof(UK39TentacleSwingAbility) == 0x000688, "Wrong size on UK39TentacleSwingAbility");
static_assert(offsetof(UK39TentacleSwingAbility, _tentacleTargetIndicatorClass) == 0x000228, "Member 'UK39TentacleSwingAbility::_tentacleTargetIndicatorClass' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _tentacleTargetIndicator) == 0x000230, "Member 'UK39TentacleSwingAbility::_tentacleTargetIndicator' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _chargeTentacleInteractionClass) == 0x000238, "Member 'UK39TentacleSwingAbility::_chargeTentacleInteractionClass' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _launchTentacleInteractionClass) == 0x000240, "Member 'UK39TentacleSwingAbility::_launchTentacleInteractionClass' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _cancelSwingInteractionClass) == 0x000248, "Member 'UK39TentacleSwingAbility::_cancelSwingInteractionClass' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _cachedTentacleSwingData) == 0x000270, "Member 'UK39TentacleSwingAbility::_cachedTentacleSwingData' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _hasSuccessfullySwungAtLeastOnce) == 0x0002E0, "Member 'UK39TentacleSwingAbility::_hasSuccessfullySwungAtLeastOnce' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _cachedTentacleSwingResult) == 0x0002E1, "Member 'UK39TentacleSwingAbility::_cachedTentacleSwingResult' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _maximumTentacleSwingRange) == 0x0002E8, "Member 'UK39TentacleSwingAbility::_maximumTentacleSwingRange' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _maximumSwingCount) == 0x000348, "Member 'UK39TentacleSwingAbility::_maximumSwingCount' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _adjustingStateDuration) == 0x0003A8, "Member 'UK39TentacleSwingAbility::_adjustingStateDuration' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _slidingDuration) == 0x000408, "Member 'UK39TentacleSwingAbility::_slidingDuration' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _turnLimitationStrategy) == 0x000468, "Member 'UK39TentacleSwingAbility::_turnLimitationStrategy' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _mouseLimitationCurve) == 0x000470, "Member 'UK39TentacleSwingAbility::_mouseLimitationCurve' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _controllerLimitationCurve) == 0x000478, "Member 'UK39TentacleSwingAbility::_controllerLimitationCurve' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _angleDistanceCurve) == 0x000480, "Member 'UK39TentacleSwingAbility::_angleDistanceCurve' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _swingHeightCurve) == 0x000488, "Member 'UK39TentacleSwingAbility::_swingHeightCurve' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _swingHeightCurveSurvivor) == 0x000490, "Member 'UK39TentacleSwingAbility::_swingHeightCurveSurvivor' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _stunFailSafeDuration) == 0x000498, "Member 'UK39TentacleSwingAbility::_stunFailSafeDuration' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _recentlySwingingTimer) == 0x000598, "Member 'UK39TentacleSwingAbility::_recentlySwingingTimer' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _k39KillerPowerupModeEffectClass) == 0x0005A0, "Member 'UK39TentacleSwingAbility::_k39KillerPowerupModeEffectClass' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _swingCooldownStateTags) == 0x0005A8, "Member 'UK39TentacleSwingAbility::_swingCooldownStateTags' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _powerupWithdrawalAdditionalTimer) == 0x0005D8, "Member 'UK39TentacleSwingAbility::_powerupWithdrawalAdditionalTimer' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbility, _hasBegunQuickTimeEvent) == 0x0005DC, "Member 'UK39TentacleSwingAbility::_hasBegunQuickTimeEvent' has a wrong offset!");

// Class TheK39.K39TentacleSwingAbilityData
// 0x0190 (0x0200 - 0x0070)
class UK39TentacleSwingAbilityData final : public UKillerAbilityData
{
public:
	float                                         _maximumTentacleSwingRange;                        // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _maximumTentacleSwingRelativeHeight;               // 0x0074(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _maximumTentacleSwingPitch;                        // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _worldDetectionSphereSize;                         // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _survivorDetectionSphereSize;                      // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _survivorDetectionNonDamagingSphereSize;           // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _invalidShowDelay;                                 // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _invalidSwingToSurvivorShowDelay;                  // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _surfaceMinDegreesThreshold;                       // 0x0090(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _surfaceMaxDegreesThreshold;                       // 0x0094(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _minimumSwingDistance;                             // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _minimumSwingDistanceSurvivorFirstSwing;           // 0x009C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _destinationDistanceBuffer;                        // 0x00A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _wallTargetMinimumDegrees;                         // 0x00A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _wallTargetMaximumDegrees;                         // 0x00A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingChargeSpeedCurveDuration;            // 0x00AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                _killerEyePositionOffsetFromFeet;                  // 0x00B0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingSecondsToCharge;                     // 0x00C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingChargeCancelThreshold;               // 0x00CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingAttachingDuration;                   // 0x00D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingRetractingDuration;                  // 0x00D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingMovementSpeedMultiplier;             // 0x00D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingAccelerationMultiplier;              // 0x00DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingCapsuleSize;                         // 0x00E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingCollisionCheckRange;                 // 0x00E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingCollisionCheckCapsuleRadius;         // 0x00E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _tentacleSwingCollisionCheckCapsuleHeight;         // 0x00EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _adjustingDuration;                                // 0x00F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _timeBeforeAdjustingComplete;                      // 0x00F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _adjustingSpeedModifier;                           // 0x00F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _slidingDuration;                                  // 0x00FC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _kakuganModeWithdrawalDuration;                    // 0x0100(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _baseWindowTentacleVaultSpeedSeconds;              // 0x0104(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _basePalletTentacleVaultSpeedSeconds;              // 0x0108(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _powerupSwingCooldownModifier;                     // 0x010C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _powerupAdditionalSwingsModifier;                  // 0x0110(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _powerupTentacleVaultSpeedMultiplier;              // 0x0114(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _firstGrabSurvivorHinderedAmount;                  // 0x0118(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _firstGrabSpeedMultiplier;                         // 0x011C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, struct FTentacleSwingCooldownSettings> _cooldownMap;                   // 0x0120(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         _firstGrabMovementSpeedMultiplier;                 // 0x0170(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _firstGrabAccelerationMultiplier;                  // 0x0174(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _firstGrabSurvivorEffectClass;                     // 0x0178(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _successQuickTimeEventWithdrawalTime;              // 0x0180(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  _secondSwingGrabSurvivorStateTags;                 // 0x0188(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         _maxDistanceToTriggerQuickTimeEvent;               // 0x01A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _palletVaultAngleVariability;                      // 0x01AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _windowVaultAngleVariability;                      // 0x01B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _survivorSlowdownLingerTime;                       // 0x01B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _survivorSlowdownLingerTimeFromVault;              // 0x01B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _recentlySwingingLingerDuration;                   // 0x01BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _swingingStrafeMagnitudeRatio;                     // 0x01C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _preTentacleShotBufferDuration;                    // 0x01C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FQuickTimeEventDefinition              _quickTimeEventDefinition;                         // 0x01C8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         _survivorRotationTimeWhenGrabbed;                  // 0x01D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _swingMotionGracePeriod;                           // 0x01D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _swingMotionUnstuckThresholdTime;                  // 0x01DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _swingMinimumDistancePerTickToNotBeStuck;          // 0x01E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _distanceFromSurvivorOnDamagingGrab;               // 0x01E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _grabLookAtTime;                                   // 0x01E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _gateBlockerDuration;                              // 0x01EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _adjustingGracePeriodDuration;                     // 0x01F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _slideMovementControlStrengthRatio;                // 0x01F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _tokensToSetOnDestroyPallet;                       // 0x01F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39TentacleSwingAbilityData">();
	}
	static class UK39TentacleSwingAbilityData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39TentacleSwingAbilityData>();
	}
};
static_assert(alignof(UK39TentacleSwingAbilityData) == 0x000008, "Wrong alignment on UK39TentacleSwingAbilityData");
static_assert(sizeof(UK39TentacleSwingAbilityData) == 0x000200, "Wrong size on UK39TentacleSwingAbilityData");
static_assert(offsetof(UK39TentacleSwingAbilityData, _maximumTentacleSwingRange) == 0x000070, "Member 'UK39TentacleSwingAbilityData::_maximumTentacleSwingRange' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _maximumTentacleSwingRelativeHeight) == 0x000074, "Member 'UK39TentacleSwingAbilityData::_maximumTentacleSwingRelativeHeight' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _maximumTentacleSwingPitch) == 0x000078, "Member 'UK39TentacleSwingAbilityData::_maximumTentacleSwingPitch' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _worldDetectionSphereSize) == 0x00007C, "Member 'UK39TentacleSwingAbilityData::_worldDetectionSphereSize' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _survivorDetectionSphereSize) == 0x000080, "Member 'UK39TentacleSwingAbilityData::_survivorDetectionSphereSize' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _survivorDetectionNonDamagingSphereSize) == 0x000084, "Member 'UK39TentacleSwingAbilityData::_survivorDetectionNonDamagingSphereSize' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _invalidShowDelay) == 0x000088, "Member 'UK39TentacleSwingAbilityData::_invalidShowDelay' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _invalidSwingToSurvivorShowDelay) == 0x00008C, "Member 'UK39TentacleSwingAbilityData::_invalidSwingToSurvivorShowDelay' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _surfaceMinDegreesThreshold) == 0x000090, "Member 'UK39TentacleSwingAbilityData::_surfaceMinDegreesThreshold' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _surfaceMaxDegreesThreshold) == 0x000094, "Member 'UK39TentacleSwingAbilityData::_surfaceMaxDegreesThreshold' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _minimumSwingDistance) == 0x000098, "Member 'UK39TentacleSwingAbilityData::_minimumSwingDistance' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _minimumSwingDistanceSurvivorFirstSwing) == 0x00009C, "Member 'UK39TentacleSwingAbilityData::_minimumSwingDistanceSurvivorFirstSwing' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _destinationDistanceBuffer) == 0x0000A0, "Member 'UK39TentacleSwingAbilityData::_destinationDistanceBuffer' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _wallTargetMinimumDegrees) == 0x0000A4, "Member 'UK39TentacleSwingAbilityData::_wallTargetMinimumDegrees' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _wallTargetMaximumDegrees) == 0x0000A8, "Member 'UK39TentacleSwingAbilityData::_wallTargetMaximumDegrees' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _tentacleSwingChargeSpeedCurveDuration) == 0x0000AC, "Member 'UK39TentacleSwingAbilityData::_tentacleSwingChargeSpeedCurveDuration' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _killerEyePositionOffsetFromFeet) == 0x0000B0, "Member 'UK39TentacleSwingAbilityData::_killerEyePositionOffsetFromFeet' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _tentacleSwingSecondsToCharge) == 0x0000C8, "Member 'UK39TentacleSwingAbilityData::_tentacleSwingSecondsToCharge' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _tentacleSwingChargeCancelThreshold) == 0x0000CC, "Member 'UK39TentacleSwingAbilityData::_tentacleSwingChargeCancelThreshold' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _tentacleSwingAttachingDuration) == 0x0000D0, "Member 'UK39TentacleSwingAbilityData::_tentacleSwingAttachingDuration' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _tentacleSwingRetractingDuration) == 0x0000D4, "Member 'UK39TentacleSwingAbilityData::_tentacleSwingRetractingDuration' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _tentacleSwingMovementSpeedMultiplier) == 0x0000D8, "Member 'UK39TentacleSwingAbilityData::_tentacleSwingMovementSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _tentacleSwingAccelerationMultiplier) == 0x0000DC, "Member 'UK39TentacleSwingAbilityData::_tentacleSwingAccelerationMultiplier' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _tentacleSwingCapsuleSize) == 0x0000E0, "Member 'UK39TentacleSwingAbilityData::_tentacleSwingCapsuleSize' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _tentacleSwingCollisionCheckRange) == 0x0000E4, "Member 'UK39TentacleSwingAbilityData::_tentacleSwingCollisionCheckRange' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _tentacleSwingCollisionCheckCapsuleRadius) == 0x0000E8, "Member 'UK39TentacleSwingAbilityData::_tentacleSwingCollisionCheckCapsuleRadius' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _tentacleSwingCollisionCheckCapsuleHeight) == 0x0000EC, "Member 'UK39TentacleSwingAbilityData::_tentacleSwingCollisionCheckCapsuleHeight' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _adjustingDuration) == 0x0000F0, "Member 'UK39TentacleSwingAbilityData::_adjustingDuration' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _timeBeforeAdjustingComplete) == 0x0000F4, "Member 'UK39TentacleSwingAbilityData::_timeBeforeAdjustingComplete' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _adjustingSpeedModifier) == 0x0000F8, "Member 'UK39TentacleSwingAbilityData::_adjustingSpeedModifier' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _slidingDuration) == 0x0000FC, "Member 'UK39TentacleSwingAbilityData::_slidingDuration' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _kakuganModeWithdrawalDuration) == 0x000100, "Member 'UK39TentacleSwingAbilityData::_kakuganModeWithdrawalDuration' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _baseWindowTentacleVaultSpeedSeconds) == 0x000104, "Member 'UK39TentacleSwingAbilityData::_baseWindowTentacleVaultSpeedSeconds' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _basePalletTentacleVaultSpeedSeconds) == 0x000108, "Member 'UK39TentacleSwingAbilityData::_basePalletTentacleVaultSpeedSeconds' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _powerupSwingCooldownModifier) == 0x00010C, "Member 'UK39TentacleSwingAbilityData::_powerupSwingCooldownModifier' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _powerupAdditionalSwingsModifier) == 0x000110, "Member 'UK39TentacleSwingAbilityData::_powerupAdditionalSwingsModifier' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _powerupTentacleVaultSpeedMultiplier) == 0x000114, "Member 'UK39TentacleSwingAbilityData::_powerupTentacleVaultSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _firstGrabSurvivorHinderedAmount) == 0x000118, "Member 'UK39TentacleSwingAbilityData::_firstGrabSurvivorHinderedAmount' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _firstGrabSpeedMultiplier) == 0x00011C, "Member 'UK39TentacleSwingAbilityData::_firstGrabSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _cooldownMap) == 0x000120, "Member 'UK39TentacleSwingAbilityData::_cooldownMap' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _firstGrabMovementSpeedMultiplier) == 0x000170, "Member 'UK39TentacleSwingAbilityData::_firstGrabMovementSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _firstGrabAccelerationMultiplier) == 0x000174, "Member 'UK39TentacleSwingAbilityData::_firstGrabAccelerationMultiplier' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _firstGrabSurvivorEffectClass) == 0x000178, "Member 'UK39TentacleSwingAbilityData::_firstGrabSurvivorEffectClass' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _successQuickTimeEventWithdrawalTime) == 0x000180, "Member 'UK39TentacleSwingAbilityData::_successQuickTimeEventWithdrawalTime' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _secondSwingGrabSurvivorStateTags) == 0x000188, "Member 'UK39TentacleSwingAbilityData::_secondSwingGrabSurvivorStateTags' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _maxDistanceToTriggerQuickTimeEvent) == 0x0001A8, "Member 'UK39TentacleSwingAbilityData::_maxDistanceToTriggerQuickTimeEvent' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _palletVaultAngleVariability) == 0x0001AC, "Member 'UK39TentacleSwingAbilityData::_palletVaultAngleVariability' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _windowVaultAngleVariability) == 0x0001B0, "Member 'UK39TentacleSwingAbilityData::_windowVaultAngleVariability' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _survivorSlowdownLingerTime) == 0x0001B4, "Member 'UK39TentacleSwingAbilityData::_survivorSlowdownLingerTime' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _survivorSlowdownLingerTimeFromVault) == 0x0001B8, "Member 'UK39TentacleSwingAbilityData::_survivorSlowdownLingerTimeFromVault' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _recentlySwingingLingerDuration) == 0x0001BC, "Member 'UK39TentacleSwingAbilityData::_recentlySwingingLingerDuration' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _swingingStrafeMagnitudeRatio) == 0x0001C0, "Member 'UK39TentacleSwingAbilityData::_swingingStrafeMagnitudeRatio' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _preTentacleShotBufferDuration) == 0x0001C4, "Member 'UK39TentacleSwingAbilityData::_preTentacleShotBufferDuration' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _quickTimeEventDefinition) == 0x0001C8, "Member 'UK39TentacleSwingAbilityData::_quickTimeEventDefinition' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _survivorRotationTimeWhenGrabbed) == 0x0001D4, "Member 'UK39TentacleSwingAbilityData::_survivorRotationTimeWhenGrabbed' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _swingMotionGracePeriod) == 0x0001D8, "Member 'UK39TentacleSwingAbilityData::_swingMotionGracePeriod' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _swingMotionUnstuckThresholdTime) == 0x0001DC, "Member 'UK39TentacleSwingAbilityData::_swingMotionUnstuckThresholdTime' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _swingMinimumDistancePerTickToNotBeStuck) == 0x0001E0, "Member 'UK39TentacleSwingAbilityData::_swingMinimumDistancePerTickToNotBeStuck' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _distanceFromSurvivorOnDamagingGrab) == 0x0001E4, "Member 'UK39TentacleSwingAbilityData::_distanceFromSurvivorOnDamagingGrab' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _grabLookAtTime) == 0x0001E8, "Member 'UK39TentacleSwingAbilityData::_grabLookAtTime' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _gateBlockerDuration) == 0x0001EC, "Member 'UK39TentacleSwingAbilityData::_gateBlockerDuration' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _adjustingGracePeriodDuration) == 0x0001F0, "Member 'UK39TentacleSwingAbilityData::_adjustingGracePeriodDuration' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _slideMovementControlStrengthRatio) == 0x0001F4, "Member 'UK39TentacleSwingAbilityData::_slideMovementControlStrengthRatio' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAbilityData, _tokensToSetOnDestroyPallet) == 0x0001F8, "Member 'UK39TentacleSwingAbilityData::_tokensToSetOnDestroyPallet' has a wrong offset!");

// Class TheK39.K39TentacleSwingAbilityPowerWidgetComponent
// 0x0010 (0x00E0 - 0x00D0)
class UK39TentacleSwingAbilityPowerWidgetComponent final : public UPowerWidgetPresentationComponent
{
public:
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39TentacleSwingAbilityPowerWidgetComponent">();
	}
	static class UK39TentacleSwingAbilityPowerWidgetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39TentacleSwingAbilityPowerWidgetComponent>();
	}
};
static_assert(alignof(UK39TentacleSwingAbilityPowerWidgetComponent) == 0x000008, "Wrong alignment on UK39TentacleSwingAbilityPowerWidgetComponent");
static_assert(sizeof(UK39TentacleSwingAbilityPowerWidgetComponent) == 0x0000E0, "Wrong size on UK39TentacleSwingAbilityPowerWidgetComponent");

// Class TheK39.K39TentacleSwingAdjustingState
// 0x00E8 (0x01A0 - 0x00B8)
class UK39TentacleSwingAdjustingState final : public UK39BaseTentacleSwingState
{
public:
	struct FGameplayTagContainer                  _slidingStateTags;                                 // 0x00B8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _slidingSpeedCurve;                                // 0x00D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _allowedInteractionSemanticTagsDuringAdjusting;    // 0x00E0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _allowedInteractionSemanticTagsDuringNotRecentlySwinging; // 0x0100(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0x80];                                     // 0x0120(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39TentacleSwingAdjustingState">();
	}
	static class UK39TentacleSwingAdjustingState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39TentacleSwingAdjustingState>();
	}
};
static_assert(alignof(UK39TentacleSwingAdjustingState) == 0x000008, "Wrong alignment on UK39TentacleSwingAdjustingState");
static_assert(sizeof(UK39TentacleSwingAdjustingState) == 0x0001A0, "Wrong size on UK39TentacleSwingAdjustingState");
static_assert(offsetof(UK39TentacleSwingAdjustingState, _slidingStateTags) == 0x0000B8, "Member 'UK39TentacleSwingAdjustingState::_slidingStateTags' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAdjustingState, _slidingSpeedCurve) == 0x0000D8, "Member 'UK39TentacleSwingAdjustingState::_slidingSpeedCurve' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAdjustingState, _allowedInteractionSemanticTagsDuringAdjusting) == 0x0000E0, "Member 'UK39TentacleSwingAdjustingState::_allowedInteractionSemanticTagsDuringAdjusting' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAdjustingState, _allowedInteractionSemanticTagsDuringNotRecentlySwinging) == 0x000100, "Member 'UK39TentacleSwingAdjustingState::_allowedInteractionSemanticTagsDuringNotRecentlySwinging' has a wrong offset!");

// Class TheK39.K39TentacleSwingAttachingState
// 0x00C8 (0x0180 - 0x00B8)
class UK39TentacleSwingAttachingState final : public UK39BaseTentacleSwingState
{
public:
	struct FAnimationMontageDescriptor            _survivorReactionMontage;                          // 0x00B8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FAnimationMontageDescriptor            _survivorStruggleMontage;                          // 0x00D8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         _maximumSurvivorHinderedTimeFailsafe;              // 0x00F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FC[0x84];                                      // 0x00FC(0x0084)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39TentacleSwingAttachingState">();
	}
	static class UK39TentacleSwingAttachingState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39TentacleSwingAttachingState>();
	}
};
static_assert(alignof(UK39TentacleSwingAttachingState) == 0x000008, "Wrong alignment on UK39TentacleSwingAttachingState");
static_assert(sizeof(UK39TentacleSwingAttachingState) == 0x000180, "Wrong size on UK39TentacleSwingAttachingState");
static_assert(offsetof(UK39TentacleSwingAttachingState, _survivorReactionMontage) == 0x0000B8, "Member 'UK39TentacleSwingAttachingState::_survivorReactionMontage' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAttachingState, _survivorStruggleMontage) == 0x0000D8, "Member 'UK39TentacleSwingAttachingState::_survivorStruggleMontage' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingAttachingState, _maximumSurvivorHinderedTimeFailsafe) == 0x0000F8, "Member 'UK39TentacleSwingAttachingState::_maximumSurvivorHinderedTimeFailsafe' has a wrong offset!");

// Class TheK39.K39TentacleSwingCooldownState
// 0x0068 (0x0120 - 0x00B8)
class UK39TentacleSwingCooldownState final : public UK39BaseTentacleSwingState
{
public:
	struct FGameplayTag                           _transitionToStateTag;                             // 0x00B8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C4[0x3C];                                      // 0x00C4(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  _allowedInteractionSemanticTagsDuringAdjustingGracePeriod; // 0x0100(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39TentacleSwingCooldownState">();
	}
	static class UK39TentacleSwingCooldownState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39TentacleSwingCooldownState>();
	}
};
static_assert(alignof(UK39TentacleSwingCooldownState) == 0x000008, "Wrong alignment on UK39TentacleSwingCooldownState");
static_assert(sizeof(UK39TentacleSwingCooldownState) == 0x000120, "Wrong size on UK39TentacleSwingCooldownState");
static_assert(offsetof(UK39TentacleSwingCooldownState, _transitionToStateTag) == 0x0000B8, "Member 'UK39TentacleSwingCooldownState::_transitionToStateTag' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingCooldownState, _allowedInteractionSemanticTagsDuringAdjustingGracePeriod) == 0x000100, "Member 'UK39TentacleSwingCooldownState::_allowedInteractionSemanticTagsDuringAdjustingGracePeriod' has a wrong offset!");

// Class TheK39.K39TentacleSwingGrabState
// 0x0178 (0x0230 - 0x00B8)
class UK39TentacleSwingGrabState final : public UK39BaseTentacleSwingState
{
public:
	TSubclassOf<class UStatusEffect>              _k39SurvivorInfectedEffectClass;                   // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C0[0x98];                                      // 0x00C0(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimationMontageDescriptor            _killerGrabMontage;                                // 0x0158(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FAnimationMontageDescriptor            _quickTimeEventSuccessMontage;                     // 0x0178(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FAnimationMontageDescriptor            _quickTimeEventFailMontage;                        // 0x0198(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FAnimationMontageDescriptor            _quickTimeEventCooldownMontage;                    // 0x01B8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FAnimationMontageDescriptor            _survivorQTESuccessMontage;                        // 0x01D8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FAnimationMontageDescriptor            _survivorQTEFailMontage;                           // 0x01F8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_218[0x18];                                     // 0x0218(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39TentacleSwingGrabState">();
	}
	static class UK39TentacleSwingGrabState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39TentacleSwingGrabState>();
	}
};
static_assert(alignof(UK39TentacleSwingGrabState) == 0x000008, "Wrong alignment on UK39TentacleSwingGrabState");
static_assert(sizeof(UK39TentacleSwingGrabState) == 0x000230, "Wrong size on UK39TentacleSwingGrabState");
static_assert(offsetof(UK39TentacleSwingGrabState, _k39SurvivorInfectedEffectClass) == 0x0000B8, "Member 'UK39TentacleSwingGrabState::_k39SurvivorInfectedEffectClass' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingGrabState, _killerGrabMontage) == 0x000158, "Member 'UK39TentacleSwingGrabState::_killerGrabMontage' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingGrabState, _quickTimeEventSuccessMontage) == 0x000178, "Member 'UK39TentacleSwingGrabState::_quickTimeEventSuccessMontage' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingGrabState, _quickTimeEventFailMontage) == 0x000198, "Member 'UK39TentacleSwingGrabState::_quickTimeEventFailMontage' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingGrabState, _quickTimeEventCooldownMontage) == 0x0001B8, "Member 'UK39TentacleSwingGrabState::_quickTimeEventCooldownMontage' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingGrabState, _survivorQTESuccessMontage) == 0x0001D8, "Member 'UK39TentacleSwingGrabState::_survivorQTESuccessMontage' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingGrabState, _survivorQTEFailMontage) == 0x0001F8, "Member 'UK39TentacleSwingGrabState::_survivorQTEFailMontage' has a wrong offset!");

// Class TheK39.K39TentacleSwingPowerCooldownState
// 0x0040 (0x00F8 - 0x00B8)
class UK39TentacleSwingPowerCooldownState final : public UK39BaseTentacleSwingState
{
public:
	struct FGameplayTagContainer                  _killerStateTagsToRemove;                          // 0x00B8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FAnimationMontageDescriptor            _survivorStruggleMontage;                          // 0x00D8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39TentacleSwingPowerCooldownState">();
	}
	static class UK39TentacleSwingPowerCooldownState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39TentacleSwingPowerCooldownState>();
	}
};
static_assert(alignof(UK39TentacleSwingPowerCooldownState) == 0x000008, "Wrong alignment on UK39TentacleSwingPowerCooldownState");
static_assert(sizeof(UK39TentacleSwingPowerCooldownState) == 0x0000F8, "Wrong size on UK39TentacleSwingPowerCooldownState");
static_assert(offsetof(UK39TentacleSwingPowerCooldownState, _killerStateTagsToRemove) == 0x0000B8, "Member 'UK39TentacleSwingPowerCooldownState::_killerStateTagsToRemove' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingPowerCooldownState, _survivorStruggleMontage) == 0x0000D8, "Member 'UK39TentacleSwingPowerCooldownState::_survivorStruggleMontage' has a wrong offset!");

// Class TheK39.K39TentacleSwingReadyState
// 0x0000 (0x00B8 - 0x00B8)
class UK39TentacleSwingReadyState final : public UK39BaseTentacleSwingState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39TentacleSwingReadyState">();
	}
	static class UK39TentacleSwingReadyState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39TentacleSwingReadyState>();
	}
};
static_assert(alignof(UK39TentacleSwingReadyState) == 0x000008, "Wrong alignment on UK39TentacleSwingReadyState");
static_assert(sizeof(UK39TentacleSwingReadyState) == 0x0000B8, "Wrong size on UK39TentacleSwingReadyState");

// Class TheK39.K39TentacleSwingSwingingState
// 0x0150 (0x0208 - 0x00B8)
class UK39TentacleSwingSwingingState final : public UK39BaseTentacleSwingState
{
public:
	class UCurveFloat*                            _fovCurve;                                         // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _fovCurvePoweredUp;                                // 0x00C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _allowedInteractionSemanticTagsDuringSwing;        // 0x00C8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _ignoreCollisionWithPlayerTags;                    // 0x00E8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         _endSwingDestinationDistanceThreshold;             // 0x0108(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10C[0xFC];                                     // 0x010C(0x00FC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSurvivorInOwnerRangeChanged(const bool inRange);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39TentacleSwingSwingingState">();
	}
	static class UK39TentacleSwingSwingingState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39TentacleSwingSwingingState>();
	}
};
static_assert(alignof(UK39TentacleSwingSwingingState) == 0x000008, "Wrong alignment on UK39TentacleSwingSwingingState");
static_assert(sizeof(UK39TentacleSwingSwingingState) == 0x000208, "Wrong size on UK39TentacleSwingSwingingState");
static_assert(offsetof(UK39TentacleSwingSwingingState, _fovCurve) == 0x0000B8, "Member 'UK39TentacleSwingSwingingState::_fovCurve' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingSwingingState, _fovCurvePoweredUp) == 0x0000C0, "Member 'UK39TentacleSwingSwingingState::_fovCurvePoweredUp' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingSwingingState, _allowedInteractionSemanticTagsDuringSwing) == 0x0000C8, "Member 'UK39TentacleSwingSwingingState::_allowedInteractionSemanticTagsDuringSwing' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingSwingingState, _ignoreCollisionWithPlayerTags) == 0x0000E8, "Member 'UK39TentacleSwingSwingingState::_ignoreCollisionWithPlayerTags' has a wrong offset!");
static_assert(offsetof(UK39TentacleSwingSwingingState, _endSwingDestinationDistanceThreshold) == 0x000108, "Member 'UK39TentacleSwingSwingingState::_endSwingDestinationDistanceThreshold' has a wrong offset!");

// Class TheK39.K39TentacleTargetIndicator
// 0x0038 (0x02D8 - 0x02A0)
class AK39TentacleTargetIndicator final : public AActor
{
public:
	struct FK39TentacleTargetIndicatorSettings    _settings;                                         // 0x02A0(0x0038)(NoDestructor, NativeAccessSpecifierPrivate)

public:
	void Cosmetic_OnReticleBufferChanged(float bufferPercent);
	void Cosmetic_OnSettingsChanged(const struct FK39TentacleTargetIndicatorSettings& previousSettings, const struct FK39TentacleTargetIndicatorSettings& Settings);
	void Cosmetic_UpdateIndicatorStrength(float distanceModifier);

	struct FK39TentacleTargetIndicatorSettings GetSettings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39TentacleTargetIndicator">();
	}
	static class AK39TentacleTargetIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<AK39TentacleTargetIndicator>();
	}
};
static_assert(alignof(AK39TentacleTargetIndicator) == 0x000008, "Wrong alignment on AK39TentacleTargetIndicator");
static_assert(sizeof(AK39TentacleTargetIndicator) == 0x0002D8, "Wrong size on AK39TentacleTargetIndicator");
static_assert(offsetof(AK39TentacleTargetIndicator, _settings) == 0x0002A0, "Member 'AK39TentacleTargetIndicator::_settings' has a wrong offset!");

// Class TheK39.K39TentacleTargetingComponent
// 0x0190 (0x0248 - 0x00B8)
class UK39TentacleTargetingComponent final : public UActorComponent
{
public:
	class FName                                   _traceProfile;                                     // 0x00B8(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C4[0x15C];                                     // 0x00C4(0x015C)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _aimingProfile;                                    // 0x0220(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22C[0xC];                                      // 0x022C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class UK39TentacleSwingAbilityData*           _abilityData;                                      // 0x0238(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _survivorReticleOffset;                            // 0x0240(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FK39TentacleSwingData MakeGrabSurvivorSwingData(const struct FVector& HitLocation, const struct FVector& Destination, const struct FVector& CameraDirection, class ASurvivor** TargetSurvivor) const;
	struct FK39TentacleSwingData MakeInvalidSurfaceSwingData(const struct FVector& IndicatorLocation, const struct FVector& SurfaceNormal, const struct FVector& CameraDirection) const;
	struct FK39TentacleSwingData MakeInvalidSwingData(const struct FVector& IndicatorLocation, const struct FVector& CameraDirection) const;
	struct FK39TentacleSwingData MakeValidSwingData(const struct FVector& Destination, const struct FVector& SurfaceNormal, const struct FVector& CollisionPoint, const struct FVector& CameraDirection, class UPhysicalMaterial* PhysicalMaterial) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39TentacleTargetingComponent">();
	}
	static class UK39TentacleTargetingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39TentacleTargetingComponent>();
	}
};
static_assert(alignof(UK39TentacleTargetingComponent) == 0x000008, "Wrong alignment on UK39TentacleTargetingComponent");
static_assert(sizeof(UK39TentacleTargetingComponent) == 0x000248, "Wrong size on UK39TentacleTargetingComponent");
static_assert(offsetof(UK39TentacleTargetingComponent, _traceProfile) == 0x0000B8, "Member 'UK39TentacleTargetingComponent::_traceProfile' has a wrong offset!");
static_assert(offsetof(UK39TentacleTargetingComponent, _aimingProfile) == 0x000220, "Member 'UK39TentacleTargetingComponent::_aimingProfile' has a wrong offset!");
static_assert(offsetof(UK39TentacleTargetingComponent, _abilityData) == 0x000238, "Member 'UK39TentacleTargetingComponent::_abilityData' has a wrong offset!");
static_assert(offsetof(UK39TentacleTargetingComponent, _survivorReticleOffset) == 0x000240, "Member 'UK39TentacleTargetingComponent::_survivorReticleOffset' has a wrong offset!");

// Class TheK39.K39Utilities
// 0x0000 (0x0030 - 0x0030)
class UK39Utilities final : public UBlueprintFunctionLibrary
{
public:
	static bool IsSurvivorAbleToBeAffectedByPower(const class ASurvivor* Survivor, const class AKiller* Killer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39Utilities">();
	}
	static class UK39Utilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39Utilities>();
	}
};
static_assert(alignof(UK39Utilities) == 0x000008, "Wrong alignment on UK39Utilities");
static_assert(sizeof(UK39Utilities) == 0x000030, "Wrong size on UK39Utilities");

// Class TheK39.K39VaultInteraction
// 0x00F0 (0x0950 - 0x0860)
class UK39VaultInteraction final : public UKillerVaultDefinition
{
public:
	class UK39TentacleSwingAbilityData*           _abilityData;                                      // 0x0860(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UStatusEffect>              _k39SurvivorInfectedEffectClass;                   // 0x0868(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_870[0xE0];                                     // 0x0870(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnTentacleGrabDamage(class ASurvivor* hitSurvivor, const bool isDowned);
	void Multicast_DamageWithTentacle(class ADBDPlayer* Player, class ASurvivor* hitSurvivor, const bool isDowned);
	void Multicast_WillHitSurvivor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K39VaultInteraction">();
	}
	static class UK39VaultInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK39VaultInteraction>();
	}
};
static_assert(alignof(UK39VaultInteraction) == 0x000010, "Wrong alignment on UK39VaultInteraction");
static_assert(sizeof(UK39VaultInteraction) == 0x000950, "Wrong size on UK39VaultInteraction");
static_assert(offsetof(UK39VaultInteraction, _abilityData) == 0x000860, "Member 'UK39VaultInteraction::_abilityData' has a wrong offset!");
static_assert(offsetof(UK39VaultInteraction, _k39SurvivorInfectedEffectClass) == 0x000868, "Member 'UK39VaultInteraction::_k39SurvivorInfectedEffectClass' has a wrong offset!");

}

