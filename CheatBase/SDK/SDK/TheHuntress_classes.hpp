#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheHuntress

#include "Basic.hpp"

#include "DeadByDaylight_classes.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"
#include "DBDInteraction_classes.hpp"
#include "DataTableUtilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DBDCompetence_classes.hpp"


namespace SDK
{

// Class TheHuntress.BeastOfPrey
// 0x0060 (0x04C0 - 0x0460)
class UBeastOfPrey final : public UPerk
{
public:
	float                                         _undetectableActivationDuration[0x3];              // 0x0460(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _undetectableStatusEffect;                         // 0x0470(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_478[0x48];                                     // 0x0478(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnBloodlustEntered();
	float GetUndetectableActivationDuration();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeastOfPrey">();
	}
	static class UBeastOfPrey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeastOfPrey>();
	}
};
static_assert(alignof(UBeastOfPrey) == 0x000008, "Wrong alignment on UBeastOfPrey");
static_assert(sizeof(UBeastOfPrey) == 0x0004C0, "Wrong size on UBeastOfPrey");
static_assert(offsetof(UBeastOfPrey, _undetectableActivationDuration) == 0x000460, "Member 'UBeastOfPrey::_undetectableActivationDuration' has a wrong offset!");
static_assert(offsetof(UBeastOfPrey, _undetectableStatusEffect) == 0x000470, "Member 'UBeastOfPrey::_undetectableStatusEffect' has a wrong offset!");

// Class TheHuntress.HexHuntressLullabyPerk
// 0x0050 (0x0530 - 0x04E0)
class UHexHuntressLullabyPerk final : public UHexPerk
{
public:
	uint8                                         Pad_4E0[0x18];                                     // 0x04E0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _huntressLullabyStatusEffect;                      // 0x04F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _possiblePlayerStateTagsInProgress;                // 0x0500(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<class UStatusEffect*>                  _huntressLullabyStatusEffects;                     // 0x0520(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HexHuntressLullabyPerk">();
	}
	static class UHexHuntressLullabyPerk* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHexHuntressLullabyPerk>();
	}
};
static_assert(alignof(UHexHuntressLullabyPerk) == 0x000008, "Wrong alignment on UHexHuntressLullabyPerk");
static_assert(sizeof(UHexHuntressLullabyPerk) == 0x000530, "Wrong size on UHexHuntressLullabyPerk");
static_assert(offsetof(UHexHuntressLullabyPerk, _huntressLullabyStatusEffect) == 0x0004F8, "Member 'UHexHuntressLullabyPerk::_huntressLullabyStatusEffect' has a wrong offset!");
static_assert(offsetof(UHexHuntressLullabyPerk, _possiblePlayerStateTagsInProgress) == 0x000500, "Member 'UHexHuntressLullabyPerk::_possiblePlayerStateTagsInProgress' has a wrong offset!");
static_assert(offsetof(UHexHuntressLullabyPerk, _huntressLullabyStatusEffects) == 0x000520, "Member 'UHexHuntressLullabyPerk::_huntressLullabyStatusEffects' has a wrong offset!");

// Class TheHuntress.HatchetProjectile
// 0x0060 (0x0438 - 0x03D8)
class AHatchetProjectile final : public AKillerProjectile
{
public:
	class UPoolableProjectileComponent*           _poolableProjectile;                               // 0x03D8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URotatingMovementComponent*             _rotatingMovement;                                 // 0x03E0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UKillerProjectileDodgeComponent*        _killerProjectileDodge;                            // 0x03E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       _collision;                                        // 0x03F0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       _targetDetector;                                   // 0x03F8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _rotationSpeed;                                    // 0x0400(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     _hatchetImpactClass;                               // 0x0408(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AActor>                     _enhancedExplosionHitClass;                        // 0x0410(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AActor>                     _explosionHitClass;                                // 0x0418(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AActor>                     _enhancedExplosionMissClass;                       // 0x0420(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AActor>                     _explosionMissClass;                               // 0x0428(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFloatValueStrategy*                    _hatchetFarHitDistance;                            // 0x0430(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Cosmetic_OnCollisionDetected(EPhysicalSurface SurfaceType);
	void Cosmetic_OnLaunchNoImpact();
	void Cosmetic_OnPlayerDetected();
	void Cosmetic_OnSlashableDetected();
	bool IsHatchetStrengthEnhanced();
	void OnAcquiredChanged(bool IsAcquired);
	void OnActivationChanged(bool Enabled);
	void OnComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& NormalImpulse, const struct FHitResult& HitResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HatchetProjectile">();
	}
	static class AHatchetProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHatchetProjectile>();
	}
};
static_assert(alignof(AHatchetProjectile) == 0x000008, "Wrong alignment on AHatchetProjectile");
static_assert(sizeof(AHatchetProjectile) == 0x000438, "Wrong size on AHatchetProjectile");
static_assert(offsetof(AHatchetProjectile, _poolableProjectile) == 0x0003D8, "Member 'AHatchetProjectile::_poolableProjectile' has a wrong offset!");
static_assert(offsetof(AHatchetProjectile, _rotatingMovement) == 0x0003E0, "Member 'AHatchetProjectile::_rotatingMovement' has a wrong offset!");
static_assert(offsetof(AHatchetProjectile, _killerProjectileDodge) == 0x0003E8, "Member 'AHatchetProjectile::_killerProjectileDodge' has a wrong offset!");
static_assert(offsetof(AHatchetProjectile, _collision) == 0x0003F0, "Member 'AHatchetProjectile::_collision' has a wrong offset!");
static_assert(offsetof(AHatchetProjectile, _targetDetector) == 0x0003F8, "Member 'AHatchetProjectile::_targetDetector' has a wrong offset!");
static_assert(offsetof(AHatchetProjectile, _rotationSpeed) == 0x000400, "Member 'AHatchetProjectile::_rotationSpeed' has a wrong offset!");
static_assert(offsetof(AHatchetProjectile, _hatchetImpactClass) == 0x000408, "Member 'AHatchetProjectile::_hatchetImpactClass' has a wrong offset!");
static_assert(offsetof(AHatchetProjectile, _enhancedExplosionHitClass) == 0x000410, "Member 'AHatchetProjectile::_enhancedExplosionHitClass' has a wrong offset!");
static_assert(offsetof(AHatchetProjectile, _explosionHitClass) == 0x000418, "Member 'AHatchetProjectile::_explosionHitClass' has a wrong offset!");
static_assert(offsetof(AHatchetProjectile, _enhancedExplosionMissClass) == 0x000420, "Member 'AHatchetProjectile::_enhancedExplosionMissClass' has a wrong offset!");
static_assert(offsetof(AHatchetProjectile, _explosionMissClass) == 0x000428, "Member 'AHatchetProjectile::_explosionMissClass' has a wrong offset!");
static_assert(offsetof(AHatchetProjectile, _hatchetFarHitDistance) == 0x000430, "Member 'AHatchetProjectile::_hatchetFarHitDistance' has a wrong offset!");

// Class TheHuntress.HatchetCooldown
// 0x0000 (0x0770 - 0x0770)
class UHatchetCooldown final : public UInteractionDefinition
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HatchetCooldown">();
	}
	static class UHatchetCooldown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHatchetCooldown>();
	}
};
static_assert(alignof(UHatchetCooldown) == 0x000010, "Wrong alignment on UHatchetCooldown");
static_assert(sizeof(UHatchetCooldown) == 0x000770, "Wrong size on UHatchetCooldown");

// Class TheHuntress.HatchetThrow
// 0x0030 (0x0900 - 0x08D0)
class UHatchetThrow final : public UThrowInteraction
{
public:
	struct FDBDTunableRowHandle                   _hatchetThrowCancellationCooldown;                 // 0x08D0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_8F8[0x8];                                      // 0x08F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class ATheHuntressPower* GetOwningHatchetSpawner() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HatchetThrow">();
	}
	static class UHatchetThrow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHatchetThrow>();
	}
};
static_assert(alignof(UHatchetThrow) == 0x000010, "Wrong alignment on UHatchetThrow");
static_assert(sizeof(UHatchetThrow) == 0x000900, "Wrong size on UHatchetThrow");
static_assert(offsetof(UHatchetThrow, _hatchetThrowCancellationCooldown) == 0x0008D0, "Member 'UHatchetThrow::_hatchetThrowCancellationCooldown' has a wrong offset!");

// Class TheHuntress.HatchetLauncher
// 0x0140 (0x02E8 - 0x01A8)
class UHatchetLauncher final : public UKillerProjectileLauncher
{
public:
	struct FRotator                               _angleOffset;                                      // 0x01A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _angleOffsetCurve;                                 // 0x01C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _speedCurve;                                       // 0x01C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _hatchetSpeedWhenThrowFullyCharged;                // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _hatchetPitchCurve;                                // 0x01D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _hatchetMinAngleOffset;                            // 0x01E0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _hatchetMaxAngleOffset;                            // 0x0208(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _hatchetMinSpeed;                                  // 0x0230(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _hatchetMaxSpeed;                                  // 0x0258(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _hatchetLaunchPitchMin;                            // 0x0280(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _hatchetLaunchPitchMax;                            // 0x02A8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FVector                                _hatchetLaunchPositionOffsetFromCamera;            // 0x02D0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HatchetLauncher">();
	}
	static class UHatchetLauncher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHatchetLauncher>();
	}
};
static_assert(alignof(UHatchetLauncher) == 0x000008, "Wrong alignment on UHatchetLauncher");
static_assert(sizeof(UHatchetLauncher) == 0x0002E8, "Wrong size on UHatchetLauncher");
static_assert(offsetof(UHatchetLauncher, _angleOffset) == 0x0001A8, "Member 'UHatchetLauncher::_angleOffset' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _angleOffsetCurve) == 0x0001C0, "Member 'UHatchetLauncher::_angleOffsetCurve' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _speedCurve) == 0x0001C8, "Member 'UHatchetLauncher::_speedCurve' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetSpeedWhenThrowFullyCharged) == 0x0001D0, "Member 'UHatchetLauncher::_hatchetSpeedWhenThrowFullyCharged' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetPitchCurve) == 0x0001D8, "Member 'UHatchetLauncher::_hatchetPitchCurve' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetMinAngleOffset) == 0x0001E0, "Member 'UHatchetLauncher::_hatchetMinAngleOffset' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetMaxAngleOffset) == 0x000208, "Member 'UHatchetLauncher::_hatchetMaxAngleOffset' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetMinSpeed) == 0x000230, "Member 'UHatchetLauncher::_hatchetMinSpeed' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetMaxSpeed) == 0x000258, "Member 'UHatchetLauncher::_hatchetMaxSpeed' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetLaunchPitchMin) == 0x000280, "Member 'UHatchetLauncher::_hatchetLaunchPitchMin' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetLaunchPitchMax) == 0x0002A8, "Member 'UHatchetLauncher::_hatchetLaunchPitchMax' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetLaunchPositionOffsetFromCamera) == 0x0002D0, "Member 'UHatchetLauncher::_hatchetLaunchPositionOffsetFromCamera' has a wrong offset!");

// Class TheHuntress.HatchetRack
// 0x0000 (0x02C8 - 0x02C8)
class AHatchetRack final : public ABaseLockerItem
{
public:
	void SetMovableHatchetVisibility(bool Visible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HatchetRack">();
	}
	static class AHatchetRack* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHatchetRack>();
	}
};
static_assert(alignof(AHatchetRack) == 0x000008, "Wrong alignment on AHatchetRack");
static_assert(sizeof(AHatchetRack) == 0x0002C8, "Wrong size on AHatchetRack");

// Class TheHuntress.HexHuntressLullabyEffect
// 0x0008 (0x03A0 - 0x0398)
class UHexHuntressLullabyEffect final : public UStatusEffect
{
public:
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HexHuntressLullabyEffect">();
	}
	static class UHexHuntressLullabyEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHexHuntressLullabyEffect>();
	}
};
static_assert(alignof(UHexHuntressLullabyEffect) == 0x000008, "Wrong alignment on UHexHuntressLullabyEffect");
static_assert(sizeof(UHexHuntressLullabyEffect) == 0x0003A0, "Wrong size on UHexHuntressLullabyEffect");

// Class TheHuntress.HuntressPowerSubAnimInstance
// 0x0040 (0x0390 - 0x0350)
class UHuntressPowerSubAnimInstance final : public UAnimInstance
{
public:
	bool                                          _powerIsActive;                                    // 0x0350(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _powerIsReleased;                                  // 0x0351(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _powerIsCancelled;                                 // 0x0352(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _powerIsInCooldown;                                // 0x0353(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _aimingPlayRate;                                   // 0x0354(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _launchPlayRate;                                   // 0x0358(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _cancelPlayRate;                                   // 0x035C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _cooldownPlayRate;                                 // 0x0360(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          _aimingAnimationSequence;                          // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _launchAnimationSequence;                          // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _cancelAnimationSequence;                          // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _cooldownAnimationSequence;                        // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HuntressPowerSubAnimInstance">();
	}
	static class UHuntressPowerSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHuntressPowerSubAnimInstance>();
	}
};
static_assert(alignof(UHuntressPowerSubAnimInstance) == 0x000010, "Wrong alignment on UHuntressPowerSubAnimInstance");
static_assert(sizeof(UHuntressPowerSubAnimInstance) == 0x000390, "Wrong size on UHuntressPowerSubAnimInstance");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _powerIsActive) == 0x000350, "Member 'UHuntressPowerSubAnimInstance::_powerIsActive' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _powerIsReleased) == 0x000351, "Member 'UHuntressPowerSubAnimInstance::_powerIsReleased' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _powerIsCancelled) == 0x000352, "Member 'UHuntressPowerSubAnimInstance::_powerIsCancelled' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _powerIsInCooldown) == 0x000353, "Member 'UHuntressPowerSubAnimInstance::_powerIsInCooldown' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _aimingPlayRate) == 0x000354, "Member 'UHuntressPowerSubAnimInstance::_aimingPlayRate' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _launchPlayRate) == 0x000358, "Member 'UHuntressPowerSubAnimInstance::_launchPlayRate' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _cancelPlayRate) == 0x00035C, "Member 'UHuntressPowerSubAnimInstance::_cancelPlayRate' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _cooldownPlayRate) == 0x000360, "Member 'UHuntressPowerSubAnimInstance::_cooldownPlayRate' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _aimingAnimationSequence) == 0x000368, "Member 'UHuntressPowerSubAnimInstance::_aimingAnimationSequence' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _launchAnimationSequence) == 0x000370, "Member 'UHuntressPowerSubAnimInstance::_launchAnimationSequence' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _cancelAnimationSequence) == 0x000378, "Member 'UHuntressPowerSubAnimInstance::_cancelAnimationSequence' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _cooldownAnimationSequence) == 0x000380, "Member 'UHuntressPowerSubAnimInstance::_cooldownAnimationSequence' has a wrong offset!");

// Class TheHuntress.ReloadHatchet
// 0x0000 (0x07A0 - 0x07A0)
class UReloadHatchet final : public UBaseLockerInteraction
{
public:
	bool IsInteractionPossible_Shared(const class ADBDPlayer* Player) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReloadHatchet">();
	}
	static class UReloadHatchet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReloadHatchet>();
	}
};
static_assert(alignof(UReloadHatchet) == 0x000010, "Wrong alignment on UReloadHatchet");
static_assert(sizeof(UReloadHatchet) == 0x0007A0, "Wrong size on UReloadHatchet");

// Class TheHuntress.TerritorialImperative
// 0x0058 (0x04B8 - 0x0460)
class UTerritorialImperative final : public UPerk
{
public:
	TSubclassOf<class UStatusEffect>              _revealSurvivorStatusEffect;                       // 0x0460(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _survivorRevealedTime[0x3];                        // 0x0468(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _killerMinimumDistance;                            // 0x0474(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _perkCooldown;                                     // 0x0478(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          perkAudioEvent;                                    // 0x0480(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_488[0x30];                                     // 0x0488(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multicast_OnPerkTriggered(class ADBDPlayer* triggerer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TerritorialImperative">();
	}
	static class UTerritorialImperative* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTerritorialImperative>();
	}
};
static_assert(alignof(UTerritorialImperative) == 0x000008, "Wrong alignment on UTerritorialImperative");
static_assert(sizeof(UTerritorialImperative) == 0x0004B8, "Wrong size on UTerritorialImperative");
static_assert(offsetof(UTerritorialImperative, _revealSurvivorStatusEffect) == 0x000460, "Member 'UTerritorialImperative::_revealSurvivorStatusEffect' has a wrong offset!");
static_assert(offsetof(UTerritorialImperative, _survivorRevealedTime) == 0x000468, "Member 'UTerritorialImperative::_survivorRevealedTime' has a wrong offset!");
static_assert(offsetof(UTerritorialImperative, _killerMinimumDistance) == 0x000474, "Member 'UTerritorialImperative::_killerMinimumDistance' has a wrong offset!");
static_assert(offsetof(UTerritorialImperative, _perkCooldown) == 0x000478, "Member 'UTerritorialImperative::_perkCooldown' has a wrong offset!");
static_assert(offsetof(UTerritorialImperative, perkAudioEvent) == 0x000480, "Member 'UTerritorialImperative::perkAudioEvent' has a wrong offset!");

// Class TheHuntress.TheHuntressPower
// 0x0010 (0x0568 - 0x0558)
class ATheHuntressPower final : public ACollectable
{
public:
	TSubclassOf<class UReloadHatchet>             _reloadHatchetClass;                               // 0x0558(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_560[0x8];                                      // 0x0560(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnThrowInteractionCancelled();
	void Cosmetic_OnThrowInteractionStart();
	void PrintDebugThrowInfo();
	void SetHatchetVisible(const bool Visible);
	void SetPercentThrowStrength(const float percentStrength);
	void StartHatchetShineCosmetic();

	class UAkComponent* GetAkAudioHatchetSpawner() const;
	class UHatchetCooldown* GetHatchetCooldown() const;
	class UBaseProjectileLauncher* GetHatchetProjectileLauncher() const;
	class AKiller* GetOwningKiller() const;
	bool HasHatchet() const;
	bool IsHatchetThrowFullyCharged() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TheHuntressPower">();
	}
	static class ATheHuntressPower* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATheHuntressPower>();
	}
};
static_assert(alignof(ATheHuntressPower) == 0x000008, "Wrong alignment on ATheHuntressPower");
static_assert(sizeof(ATheHuntressPower) == 0x000568, "Wrong size on ATheHuntressPower");
static_assert(offsetof(ATheHuntressPower, _reloadHatchetClass) == 0x000558, "Member 'ATheHuntressPower::_reloadHatchetClass' has a wrong offset!");

}

