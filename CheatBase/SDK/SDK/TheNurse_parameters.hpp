#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheNurse

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TheNurse_structs.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK::Params
{

// Function TheNurse.BlinkPlayerComponent.Local_OnMovementModeChanged
// 0x0010 (0x0010 - 0x0000)
struct BlinkPlayerComponent_Local_OnMovementModeChanged final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PrevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlinkPlayerComponent_Local_OnMovementModeChanged) == 0x000008, "Wrong alignment on BlinkPlayerComponent_Local_OnMovementModeChanged");
static_assert(sizeof(BlinkPlayerComponent_Local_OnMovementModeChanged) == 0x000010, "Wrong size on BlinkPlayerComponent_Local_OnMovementModeChanged");
static_assert(offsetof(BlinkPlayerComponent_Local_OnMovementModeChanged, Character) == 0x000000, "Member 'BlinkPlayerComponent_Local_OnMovementModeChanged::Character' has a wrong offset!");
static_assert(offsetof(BlinkPlayerComponent_Local_OnMovementModeChanged, PrevMovementMode) == 0x000008, "Member 'BlinkPlayerComponent_Local_OnMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(BlinkPlayerComponent_Local_OnMovementModeChanged, PreviousCustomMode) == 0x000009, "Member 'BlinkPlayerComponent_Local_OnMovementModeChanged::PreviousCustomMode' has a wrong offset!");

// Function TheNurse.BlinkPlayerComponent.Multicast_StartBlink
// 0x0020 (0x0020 - 0x0000)
struct BlinkPlayerComponent_Multicast_StartBlink final
{
public:
	struct FBlinkParams                           params;                                            // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPlayerComponent_Multicast_StartBlink) == 0x000008, "Wrong alignment on BlinkPlayerComponent_Multicast_StartBlink");
static_assert(sizeof(BlinkPlayerComponent_Multicast_StartBlink) == 0x000020, "Wrong size on BlinkPlayerComponent_Multicast_StartBlink");
static_assert(offsetof(BlinkPlayerComponent_Multicast_StartBlink, params) == 0x000000, "Member 'BlinkPlayerComponent_Multicast_StartBlink::params' has a wrong offset!");

// Function TheNurse.BlinkPlayerComponent.Server_NotifyBlinkCharge
// 0x0004 (0x0004 - 0x0000)
struct BlinkPlayerComponent_Server_NotifyBlinkCharge final
{
public:
	float                                         charge;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPlayerComponent_Server_NotifyBlinkCharge) == 0x000004, "Wrong alignment on BlinkPlayerComponent_Server_NotifyBlinkCharge");
static_assert(sizeof(BlinkPlayerComponent_Server_NotifyBlinkCharge) == 0x000004, "Wrong size on BlinkPlayerComponent_Server_NotifyBlinkCharge");
static_assert(offsetof(BlinkPlayerComponent_Server_NotifyBlinkCharge, charge) == 0x000000, "Member 'BlinkPlayerComponent_Server_NotifyBlinkCharge::charge' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.OnAttackFinished
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_OnAttackFinished final
{
public:
	EAttackType                                   attackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_OnAttackFinished) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_OnAttackFinished");
static_assert(sizeof(BlinkPowerPlayerComponent_OnAttackFinished) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_OnAttackFinished");
static_assert(offsetof(BlinkPowerPlayerComponent_OnAttackFinished, attackType) == 0x000000, "Member 'BlinkPowerPlayerComponent_OnAttackFinished::attackType' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.OnAttackStarted
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_OnAttackStarted final
{
public:
	EAttackType                                   attackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_OnAttackStarted) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_OnAttackStarted");
static_assert(sizeof(BlinkPowerPlayerComponent_OnAttackStarted) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_OnAttackStarted");
static_assert(offsetof(BlinkPowerPlayerComponent_OnAttackStarted, attackType) == 0x000000, "Member 'BlinkPowerPlayerComponent_OnAttackStarted::attackType' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.OnRep_BlinkState
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_OnRep_BlinkState final
{
public:
	EBlinkPowerState                              oldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_OnRep_BlinkState) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_OnRep_BlinkState");
static_assert(sizeof(BlinkPowerPlayerComponent_OnRep_BlinkState) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_OnRep_BlinkState");
static_assert(offsetof(BlinkPowerPlayerComponent_OnRep_BlinkState, oldState) == 0x000000, "Member 'BlinkPowerPlayerComponent_OnRep_BlinkState::oldState' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.Server_InterruptDuringChainBlink
// 0x0008 (0x0008 - 0x0000)
struct BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink final
{
public:
	class AActor*                                 interruptedPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink) == 0x000008, "Wrong alignment on BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink");
static_assert(sizeof(BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink) == 0x000008, "Wrong size on BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink");
static_assert(offsetof(BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink, interruptedPlayer) == 0x000000, "Member 'BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink::interruptedPlayer' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetBlinkCharges
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetBlinkCharges final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetBlinkCharges) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetBlinkCharges");
static_assert(sizeof(BlinkPowerPlayerComponent_GetBlinkCharges) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetBlinkCharges");
static_assert(offsetof(BlinkPowerPlayerComponent_GetBlinkCharges, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetBlinkCharges::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetChainBlinkProgressPercent
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetChainBlinkProgressPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetChainBlinkProgressPercent) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetChainBlinkProgressPercent");
static_assert(sizeof(BlinkPowerPlayerComponent_GetChainBlinkProgressPercent) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetChainBlinkProgressPercent");
static_assert(offsetof(BlinkPowerPlayerComponent_GetChainBlinkProgressPercent, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetChainBlinkProgressPercent::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetChainBlinkRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetChainBlinkRemainingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetChainBlinkRemainingTime) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetChainBlinkRemainingTime");
static_assert(sizeof(BlinkPowerPlayerComponent_GetChainBlinkRemainingTime) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetChainBlinkRemainingTime");
static_assert(offsetof(BlinkPowerPlayerComponent_GetChainBlinkRemainingTime, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetChainBlinkRemainingTime::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetChainBlinkTimerDuration
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetChainBlinkTimerDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetChainBlinkTimerDuration) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetChainBlinkTimerDuration");
static_assert(sizeof(BlinkPowerPlayerComponent_GetChainBlinkTimerDuration) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetChainBlinkTimerDuration");
static_assert(offsetof(BlinkPowerPlayerComponent_GetChainBlinkTimerDuration, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetChainBlinkTimerDuration::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetCooldownProgressPercent
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetCooldownProgressPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetCooldownProgressPercent) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetCooldownProgressPercent");
static_assert(sizeof(BlinkPowerPlayerComponent_GetCooldownProgressPercent) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetCooldownProgressPercent");
static_assert(offsetof(BlinkPowerPlayerComponent_GetCooldownProgressPercent, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetCooldownProgressPercent::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetCooldownRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetCooldownRemainingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetCooldownRemainingTime) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetCooldownRemainingTime");
static_assert(sizeof(BlinkPowerPlayerComponent_GetCooldownRemainingTime) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetCooldownRemainingTime");
static_assert(offsetof(BlinkPowerPlayerComponent_GetCooldownRemainingTime, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetCooldownRemainingTime::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetCooldownTimerDuration
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetCooldownTimerDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetCooldownTimerDuration) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetCooldownTimerDuration");
static_assert(sizeof(BlinkPowerPlayerComponent_GetCooldownTimerDuration) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetCooldownTimerDuration");
static_assert(offsetof(BlinkPowerPlayerComponent_GetCooldownTimerDuration, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetCooldownTimerDuration::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetPowerState
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_GetPowerState final
{
public:
	EBlinkPowerState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetPowerState) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_GetPowerState");
static_assert(sizeof(BlinkPowerPlayerComponent_GetPowerState) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_GetPowerState");
static_assert(offsetof(BlinkPowerPlayerComponent_GetPowerState, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetPowerState::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetRechargeProgressPercent
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetRechargeProgressPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetRechargeProgressPercent) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetRechargeProgressPercent");
static_assert(sizeof(BlinkPowerPlayerComponent_GetRechargeProgressPercent) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetRechargeProgressPercent");
static_assert(offsetof(BlinkPowerPlayerComponent_GetRechargeProgressPercent, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetRechargeProgressPercent::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.IsBlinking
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_IsBlinking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_IsBlinking) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_IsBlinking");
static_assert(sizeof(BlinkPowerPlayerComponent_IsBlinking) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_IsBlinking");
static_assert(offsetof(BlinkPowerPlayerComponent_IsBlinking, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_IsBlinking::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.IsChargeFull
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_IsChargeFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_IsChargeFull) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_IsChargeFull");
static_assert(sizeof(BlinkPowerPlayerComponent_IsChargeFull) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_IsChargeFull");
static_assert(offsetof(BlinkPowerPlayerComponent_IsChargeFull, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_IsChargeFull::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.IsChargingBlink
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_IsChargingBlink final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_IsChargingBlink) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_IsChargingBlink");
static_assert(sizeof(BlinkPowerPlayerComponent_IsChargingBlink) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_IsChargingBlink");
static_assert(offsetof(BlinkPowerPlayerComponent_IsChargingBlink, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_IsChargingBlink::ReturnValue' has a wrong offset!");

// Function TheNurse.NurseFXInterface.Cosmetic_OnSpasmodicBreathAddonEffectActive
// 0x0001 (0x0001 - 0x0000)
struct NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive final
{
public:
	bool                                          activeValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive) == 0x000001, "Wrong alignment on NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive");
static_assert(sizeof(NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive) == 0x000001, "Wrong size on NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive");
static_assert(offsetof(NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive, activeValue) == 0x000000, "Member 'NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive::activeValue' has a wrong offset!");

// Function TheNurse.NurseHelper.GetBlinkPowerItem
// 0x0010 (0x0010 - 0x0000)
struct NurseHelper_GetBlinkPowerItem final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABlinkPowerItem*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NurseHelper_GetBlinkPowerItem) == 0x000008, "Wrong alignment on NurseHelper_GetBlinkPowerItem");
static_assert(sizeof(NurseHelper_GetBlinkPowerItem) == 0x000010, "Wrong size on NurseHelper_GetBlinkPowerItem");
static_assert(offsetof(NurseHelper_GetBlinkPowerItem, Player) == 0x000000, "Member 'NurseHelper_GetBlinkPowerItem::Player' has a wrong offset!");
static_assert(offsetof(NurseHelper_GetBlinkPowerItem, ReturnValue) == 0x000008, "Member 'NurseHelper_GetBlinkPowerItem::ReturnValue' has a wrong offset!");

// Function TheNurse.TeleportNearSurvivorScream.OnDetectorOverlapBegin
// 0x0110 (0x0110 - 0x0000)
struct TeleportNearSurvivorScream_OnDetectorOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeleportNearSurvivorScream_OnDetectorOverlapBegin) == 0x000008, "Wrong alignment on TeleportNearSurvivorScream_OnDetectorOverlapBegin");
static_assert(sizeof(TeleportNearSurvivorScream_OnDetectorOverlapBegin) == 0x000110, "Wrong size on TeleportNearSurvivorScream_OnDetectorOverlapBegin");
static_assert(offsetof(TeleportNearSurvivorScream_OnDetectorOverlapBegin, OverlappedComponent) == 0x000000, "Member 'TeleportNearSurvivorScream_OnDetectorOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TeleportNearSurvivorScream_OnDetectorOverlapBegin, OtherActor) == 0x000008, "Member 'TeleportNearSurvivorScream_OnDetectorOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(TeleportNearSurvivorScream_OnDetectorOverlapBegin, OtherComp) == 0x000010, "Member 'TeleportNearSurvivorScream_OnDetectorOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(TeleportNearSurvivorScream_OnDetectorOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'TeleportNearSurvivorScream_OnDetectorOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TeleportNearSurvivorScream_OnDetectorOverlapBegin, bFromSweep) == 0x00001C, "Member 'TeleportNearSurvivorScream_OnDetectorOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(TeleportNearSurvivorScream_OnDetectorOverlapBegin, SweepResult) == 0x000020, "Member 'TeleportNearSurvivorScream_OnDetectorOverlapBegin::SweepResult' has a wrong offset!");

// Function TheNurse.ThanatophobiaPerk.GetActionSpeedModifierAtLevel
// 0x0004 (0x0004 - 0x0000)
struct ThanatophobiaPerk_GetActionSpeedModifierAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThanatophobiaPerk_GetActionSpeedModifierAtLevel) == 0x000004, "Wrong alignment on ThanatophobiaPerk_GetActionSpeedModifierAtLevel");
static_assert(sizeof(ThanatophobiaPerk_GetActionSpeedModifierAtLevel) == 0x000004, "Wrong size on ThanatophobiaPerk_GetActionSpeedModifierAtLevel");
static_assert(offsetof(ThanatophobiaPerk_GetActionSpeedModifierAtLevel, ReturnValue) == 0x000000, "Member 'ThanatophobiaPerk_GetActionSpeedModifierAtLevel::ReturnValue' has a wrong offset!");

// Function TheNurse.ThanatophobiaPerk.GetAdditionalActionSpeedModifierAtLevel
// 0x0004 (0x0004 - 0x0000)
struct ThanatophobiaPerk_GetAdditionalActionSpeedModifierAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThanatophobiaPerk_GetAdditionalActionSpeedModifierAtLevel) == 0x000004, "Wrong alignment on ThanatophobiaPerk_GetAdditionalActionSpeedModifierAtLevel");
static_assert(sizeof(ThanatophobiaPerk_GetAdditionalActionSpeedModifierAtLevel) == 0x000004, "Wrong size on ThanatophobiaPerk_GetAdditionalActionSpeedModifierAtLevel");
static_assert(offsetof(ThanatophobiaPerk_GetAdditionalActionSpeedModifierAtLevel, ReturnValue) == 0x000000, "Member 'ThanatophobiaPerk_GetAdditionalActionSpeedModifierAtLevel::ReturnValue' has a wrong offset!");

// Function TheNurse.ThanatophobiaPerk.GetNumSurvivorsForAdditionalSpeedModifier
// 0x0004 (0x0004 - 0x0000)
struct ThanatophobiaPerk_GetNumSurvivorsForAdditionalSpeedModifier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThanatophobiaPerk_GetNumSurvivorsForAdditionalSpeedModifier) == 0x000004, "Wrong alignment on ThanatophobiaPerk_GetNumSurvivorsForAdditionalSpeedModifier");
static_assert(sizeof(ThanatophobiaPerk_GetNumSurvivorsForAdditionalSpeedModifier) == 0x000004, "Wrong size on ThanatophobiaPerk_GetNumSurvivorsForAdditionalSpeedModifier");
static_assert(offsetof(ThanatophobiaPerk_GetNumSurvivorsForAdditionalSpeedModifier, ReturnValue) == 0x000000, "Member 'ThanatophobiaPerk_GetNumSurvivorsForAdditionalSpeedModifier::ReturnValue' has a wrong offset!");

}

