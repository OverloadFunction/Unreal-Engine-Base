#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewsCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Slate_structs.hpp"
#include "DBDUIViewsCore_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "DBDUIManagers_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "UITween_structs.hpp"
#include "SlateCore_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DBDInput_structs.hpp"
#include "NewsAndMessagesCommon_structs.hpp"
#include "InputCore_structs.hpp"
#include "CoreCommonUIUtils_structs.hpp"


namespace SDK
{

// Class DBDUIViewsCore.CoreBaseUserWidget
// 0x0078 (0x0320 - 0x02A8)
class UCoreBaseUserWidget : public UUserWidget
{
public:
	uint8                                         Pad_2A8[0x10];                                     // 0x02A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UScaleBox*                              ScaleContainer;                                    // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInteractive;                                     // 0x02C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EControlMode                                  _controlMode;                                      // 0x02C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EScaleType                                    ScaleType;                                         // 0x02C2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C3[0xD];                                      // 0x02C3(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UWidgetAnimation*>    _animationMap;                                     // 0x02D0(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	void DeregisterFromInput();
	void OnControlModeChangedBP(EControlMode controlMode);
	bool PlayAnimationByName(class FName animName, float starttime, int32 loopcount, EUMGSequencePlayMode PlayMode, float PlaybackSpeed);
	const class UWidgetAnimation* PlayAnimationByNameWithFinishedDelegate(class FName animName, TDelegate<void()> animationFinishedDelegate, float starttime, int32 loopcount, EUMGSequencePlayMode PlayMode, float PlaybackSpeed);
	void RegisterForInput();
	bool StopAnimationByName(class FName animName);
	void UpdateScale(float Scale);

	class UWidgetAnimation* GetAnimationByName(class FName animName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreBaseUserWidget">();
	}
	static class UCoreBaseUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreBaseUserWidget>();
	}
};
static_assert(alignof(UCoreBaseUserWidget) == 0x000008, "Wrong alignment on UCoreBaseUserWidget");
static_assert(sizeof(UCoreBaseUserWidget) == 0x000320, "Wrong size on UCoreBaseUserWidget");
static_assert(offsetof(UCoreBaseUserWidget, ScaleContainer) == 0x0002B8, "Member 'UCoreBaseUserWidget::ScaleContainer' has a wrong offset!");
static_assert(offsetof(UCoreBaseUserWidget, IsInteractive) == 0x0002C0, "Member 'UCoreBaseUserWidget::IsInteractive' has a wrong offset!");
static_assert(offsetof(UCoreBaseUserWidget, _controlMode) == 0x0002C1, "Member 'UCoreBaseUserWidget::_controlMode' has a wrong offset!");
static_assert(offsetof(UCoreBaseUserWidget, ScaleType) == 0x0002C2, "Member 'UCoreBaseUserWidget::ScaleType' has a wrong offset!");
static_assert(offsetof(UCoreBaseUserWidget, _animationMap) == 0x0002D0, "Member 'UCoreBaseUserWidget::_animationMap' has a wrong offset!");

// Class DBDUIViewsCore.CoreOnboardingButtonHolderWidget
// 0x0030 (0x0350 - 0x0320)
class UCoreOnboardingButtonHolderWidget final : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void(class UCoreButtonWidget* clickedTutorialButton)> OnTutorialButtonClickedDelegate; // 0x0320(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnSetDataAnimationCompleteDelegate;                // 0x0330(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TArray<class UCoreOnboardingTutorialButtonWidget*> TutorialButtons;                              // 0x0340(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	class FString GetStepId();
	void OnButtonSetDataAnimationCompleteDelegate();
	void OnClickedTutorialButton(class UCoreButtonWidget* clickedTutorialButton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOnboardingButtonHolderWidget">();
	}
	static class UCoreOnboardingButtonHolderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOnboardingButtonHolderWidget>();
	}
};
static_assert(alignof(UCoreOnboardingButtonHolderWidget) == 0x000008, "Wrong alignment on UCoreOnboardingButtonHolderWidget");
static_assert(sizeof(UCoreOnboardingButtonHolderWidget) == 0x000350, "Wrong size on UCoreOnboardingButtonHolderWidget");
static_assert(offsetof(UCoreOnboardingButtonHolderWidget, OnTutorialButtonClickedDelegate) == 0x000320, "Member 'UCoreOnboardingButtonHolderWidget::OnTutorialButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingButtonHolderWidget, OnSetDataAnimationCompleteDelegate) == 0x000330, "Member 'UCoreOnboardingButtonHolderWidget::OnSetDataAnimationCompleteDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingButtonHolderWidget, TutorialButtons) == 0x000340, "Member 'UCoreOnboardingButtonHolderWidget::TutorialButtons' has a wrong offset!");

// Class DBDUIViewsCore.CoreBinkVideoPlayerWidget
// 0x00E0 (0x0400 - 0x0320)
class UCoreBinkVideoPlayerWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           VideoBinkCanvas;                                   // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDImage*                              VideoBinkBG;                                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USizeBox*                               VideoBinkSizeBox;                                  // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScaleBox*                              VideoBinkScaleBox;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 VideoBinkImage;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreInputSwitcherWidget*               SkipInputSwitcher;                                 // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBinkMediaPlayer*                       _binkMediaPlayer;                                  // 0x0360(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_368[0x98];                                     // 0x0368(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FadeInAnimation_Implementation(const float FadeInDuration, const float Delay);
	void FadeOutAnimation_Implementation(const float FadeOutDuration, const float Delay);
	void OnEndReached();
	void OnFadeInAnimationComplete(class UUITweenInstance* tween);
	void OnFadeOutAnimationComplete(class UUITweenInstance* tween);
	void OnMediaClosed();
	void OnMediaOpened(const class FString& OpenedUrl);
	void OnSkipInputSwitcherTriggered();
	void OnSubtitlesChanged(const TArray<class FString>& subtitlesText);
	void SetSize_Implementation(const struct FVector2D& Size);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreBinkVideoPlayerWidget">();
	}
	static class UCoreBinkVideoPlayerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreBinkVideoPlayerWidget>();
	}
};
static_assert(alignof(UCoreBinkVideoPlayerWidget) == 0x000008, "Wrong alignment on UCoreBinkVideoPlayerWidget");
static_assert(sizeof(UCoreBinkVideoPlayerWidget) == 0x000400, "Wrong size on UCoreBinkVideoPlayerWidget");
static_assert(offsetof(UCoreBinkVideoPlayerWidget, VideoBinkCanvas) == 0x000330, "Member 'UCoreBinkVideoPlayerWidget::VideoBinkCanvas' has a wrong offset!");
static_assert(offsetof(UCoreBinkVideoPlayerWidget, VideoBinkBG) == 0x000338, "Member 'UCoreBinkVideoPlayerWidget::VideoBinkBG' has a wrong offset!");
static_assert(offsetof(UCoreBinkVideoPlayerWidget, VideoBinkSizeBox) == 0x000340, "Member 'UCoreBinkVideoPlayerWidget::VideoBinkSizeBox' has a wrong offset!");
static_assert(offsetof(UCoreBinkVideoPlayerWidget, VideoBinkScaleBox) == 0x000348, "Member 'UCoreBinkVideoPlayerWidget::VideoBinkScaleBox' has a wrong offset!");
static_assert(offsetof(UCoreBinkVideoPlayerWidget, VideoBinkImage) == 0x000350, "Member 'UCoreBinkVideoPlayerWidget::VideoBinkImage' has a wrong offset!");
static_assert(offsetof(UCoreBinkVideoPlayerWidget, SkipInputSwitcher) == 0x000358, "Member 'UCoreBinkVideoPlayerWidget::SkipInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreBinkVideoPlayerWidget, _binkMediaPlayer) == 0x000360, "Member 'UCoreBinkVideoPlayerWidget::_binkMediaPlayer' has a wrong offset!");

// Class DBDUIViewsCore.AnimationDelegates
// 0x0000 (0x0030 - 0x0030)
class UAnimationDelegates final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimationDelegates">();
	}
	static class UAnimationDelegates* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimationDelegates>();
	}
};
static_assert(alignof(UAnimationDelegates) == 0x000008, "Wrong alignment on UAnimationDelegates");
static_assert(sizeof(UAnimationDelegates) == 0x000030, "Wrong size on UAnimationDelegates");

// Class DBDUIViewsCore.CoreBasePopupWidget
// 0x0020 (0x0340 - 0x0320)
class UCoreBasePopupWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDRichTextBlock*                      TitleText;                                         // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      MessageText;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                BackgroundOverlay;                                 // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Hide();
	void Show(class UBasePopupViewData* Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreBasePopupWidget">();
	}
	static class UCoreBasePopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreBasePopupWidget>();
	}
};
static_assert(alignof(UCoreBasePopupWidget) == 0x000008, "Wrong alignment on UCoreBasePopupWidget");
static_assert(sizeof(UCoreBasePopupWidget) == 0x000340, "Wrong size on UCoreBasePopupWidget");
static_assert(offsetof(UCoreBasePopupWidget, TitleText) == 0x000328, "Member 'UCoreBasePopupWidget::TitleText' has a wrong offset!");
static_assert(offsetof(UCoreBasePopupWidget, MessageText) == 0x000330, "Member 'UCoreBasePopupWidget::MessageText' has a wrong offset!");
static_assert(offsetof(UCoreBasePopupWidget, BackgroundOverlay) == 0x000338, "Member 'UCoreBasePopupWidget::BackgroundOverlay' has a wrong offset!");

// Class DBDUIViewsCore.CoreGenericPopupWidget
// 0x0048 (0x0388 - 0x0340)
class UCoreGenericPopupWidget : public UCoreBasePopupWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               ProgressionButton;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RegressionButton;                                  // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               AlternativeButton;                                 // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ButtonDisabledOpacity;                             // 0x0360(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ButtonEnabledOpacity;                              // 0x0364(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EPopupButtonType popupAction)> _popupActionDelegate;               // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _popupBackActionDelegate;                          // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	void OnAlternativeAction();
	void OnProgressionAction();
	void OnRegressionAction();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreGenericPopupWidget">();
	}
	static class UCoreGenericPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreGenericPopupWidget>();
	}
};
static_assert(alignof(UCoreGenericPopupWidget) == 0x000008, "Wrong alignment on UCoreGenericPopupWidget");
static_assert(sizeof(UCoreGenericPopupWidget) == 0x000388, "Wrong size on UCoreGenericPopupWidget");
static_assert(offsetof(UCoreGenericPopupWidget, ProgressionButton) == 0x000348, "Member 'UCoreGenericPopupWidget::ProgressionButton' has a wrong offset!");
static_assert(offsetof(UCoreGenericPopupWidget, RegressionButton) == 0x000350, "Member 'UCoreGenericPopupWidget::RegressionButton' has a wrong offset!");
static_assert(offsetof(UCoreGenericPopupWidget, AlternativeButton) == 0x000358, "Member 'UCoreGenericPopupWidget::AlternativeButton' has a wrong offset!");
static_assert(offsetof(UCoreGenericPopupWidget, ButtonDisabledOpacity) == 0x000360, "Member 'UCoreGenericPopupWidget::ButtonDisabledOpacity' has a wrong offset!");
static_assert(offsetof(UCoreGenericPopupWidget, ButtonEnabledOpacity) == 0x000364, "Member 'UCoreGenericPopupWidget::ButtonEnabledOpacity' has a wrong offset!");
static_assert(offsetof(UCoreGenericPopupWidget, _popupActionDelegate) == 0x000368, "Member 'UCoreGenericPopupWidget::_popupActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreGenericPopupWidget, _popupBackActionDelegate) == 0x000378, "Member 'UCoreGenericPopupWidget::_popupBackActionDelegate' has a wrong offset!");

// Class DBDUIViewsCore.ReportFeedbackPopupWidget
// 0x0028 (0x03B0 - 0x0388)
class UReportFeedbackPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UReportFeedbackInfoWidget>  InfoWidgetClass;                                   // 0x0390(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          BanTimestampSubtitleTB;                            // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ReasonSubtitleTB;                                  // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          ReportFeedbackInfoScrollBox;                       // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReportFeedbackPopupWidget">();
	}
	static class UReportFeedbackPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReportFeedbackPopupWidget>();
	}
};
static_assert(alignof(UReportFeedbackPopupWidget) == 0x000008, "Wrong alignment on UReportFeedbackPopupWidget");
static_assert(sizeof(UReportFeedbackPopupWidget) == 0x0003B0, "Wrong size on UReportFeedbackPopupWidget");
static_assert(offsetof(UReportFeedbackPopupWidget, InfoWidgetClass) == 0x000390, "Member 'UReportFeedbackPopupWidget::InfoWidgetClass' has a wrong offset!");
static_assert(offsetof(UReportFeedbackPopupWidget, BanTimestampSubtitleTB) == 0x000398, "Member 'UReportFeedbackPopupWidget::BanTimestampSubtitleTB' has a wrong offset!");
static_assert(offsetof(UReportFeedbackPopupWidget, ReasonSubtitleTB) == 0x0003A0, "Member 'UReportFeedbackPopupWidget::ReasonSubtitleTB' has a wrong offset!");
static_assert(offsetof(UReportFeedbackPopupWidget, ReportFeedbackInfoScrollBox) == 0x0003A8, "Member 'UReportFeedbackPopupWidget::ReportFeedbackInfoScrollBox' has a wrong offset!");

// Class DBDUIViewsCore.TooltipWidget
// 0x0010 (0x0330 - 0x0320)
class UTooltipWidget : public UCoreBaseUserWidget
{
public:
	struct FMargin                                _tooltipMargin;                                    // 0x0320(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnHideTooltip();
	void OnShowTooltip();

	ETooltipPriority GetPriority() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TooltipWidget">();
	}
	static class UTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTooltipWidget>();
	}
};
static_assert(alignof(UTooltipWidget) == 0x000008, "Wrong alignment on UTooltipWidget");
static_assert(sizeof(UTooltipWidget) == 0x000330, "Wrong size on UTooltipWidget");
static_assert(offsetof(UTooltipWidget, _tooltipMargin) == 0x000320, "Member 'UTooltipWidget::_tooltipMargin' has a wrong offset!");

// Class DBDUIViewsCore.ArchiveCompendiumTooltipWidget
// 0x0018 (0x0348 - 0x0330)
class UArchiveCompendiumTooltipWidget final : public UTooltipWidget
{
public:
	class UDBDTextBlock*                          TomeTitleTB;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          DescriptionTB;                                     // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoryLevelsSelectorWidget*         StoryLevelsSelector;                               // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Reset();
	void SetTooltipData(const struct FCompendiumButtonData& tooltipViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveCompendiumTooltipWidget">();
	}
	static class UArchiveCompendiumTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveCompendiumTooltipWidget>();
	}
};
static_assert(alignof(UArchiveCompendiumTooltipWidget) == 0x000008, "Wrong alignment on UArchiveCompendiumTooltipWidget");
static_assert(sizeof(UArchiveCompendiumTooltipWidget) == 0x000348, "Wrong size on UArchiveCompendiumTooltipWidget");
static_assert(offsetof(UArchiveCompendiumTooltipWidget, TomeTitleTB) == 0x000330, "Member 'UArchiveCompendiumTooltipWidget::TomeTitleTB' has a wrong offset!");
static_assert(offsetof(UArchiveCompendiumTooltipWidget, DescriptionTB) == 0x000338, "Member 'UArchiveCompendiumTooltipWidget::DescriptionTB' has a wrong offset!");
static_assert(offsetof(UArchiveCompendiumTooltipWidget, StoryLevelsSelector) == 0x000340, "Member 'UArchiveCompendiumTooltipWidget::StoryLevelsSelector' has a wrong offset!");

// Class DBDUIViewsCore.ArchiveNodeTooltipWidget
// 0x0050 (0x0380 - 0x0330)
class UArchiveNodeTooltipWidget final : public UTooltipWidget
{
public:
	class UDBDImage*                              BackgroundIMG;                                     // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              RarityIMG;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          NodeTitleTB;                                       // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SubtitleTB;                                        // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      NodeDescriptionRTB;                                // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreArchiveObjectiveWidget> ObjectiveWidgetClass;                             // 0x0358(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreCurrencyForTooltipsWidget> RewardWidgetClass;                             // 0x0360(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           ArchiveObjectivesContainer;                        // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         RewardsContainer;                                  // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      VignetteRTB;                                       // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Reset();
	void SetNodeType(EArchiveNodeType Type);
	void SetTooltipData(const struct FArchiveNodeViewData& NodeViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveNodeTooltipWidget">();
	}
	static class UArchiveNodeTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveNodeTooltipWidget>();
	}
};
static_assert(alignof(UArchiveNodeTooltipWidget) == 0x000008, "Wrong alignment on UArchiveNodeTooltipWidget");
static_assert(sizeof(UArchiveNodeTooltipWidget) == 0x000380, "Wrong size on UArchiveNodeTooltipWidget");
static_assert(offsetof(UArchiveNodeTooltipWidget, BackgroundIMG) == 0x000330, "Member 'UArchiveNodeTooltipWidget::BackgroundIMG' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, RarityIMG) == 0x000338, "Member 'UArchiveNodeTooltipWidget::RarityIMG' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, NodeTitleTB) == 0x000340, "Member 'UArchiveNodeTooltipWidget::NodeTitleTB' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, SubtitleTB) == 0x000348, "Member 'UArchiveNodeTooltipWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, NodeDescriptionRTB) == 0x000350, "Member 'UArchiveNodeTooltipWidget::NodeDescriptionRTB' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, ObjectiveWidgetClass) == 0x000358, "Member 'UArchiveNodeTooltipWidget::ObjectiveWidgetClass' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, RewardWidgetClass) == 0x000360, "Member 'UArchiveNodeTooltipWidget::RewardWidgetClass' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, ArchiveObjectivesContainer) == 0x000368, "Member 'UArchiveNodeTooltipWidget::ArchiveObjectivesContainer' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, RewardsContainer) == 0x000370, "Member 'UArchiveNodeTooltipWidget::RewardsContainer' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, VignetteRTB) == 0x000378, "Member 'UArchiveNodeTooltipWidget::VignetteRTB' has a wrong offset!");

// Class DBDUIViewsCore.ArchivePassTooltipWidget
// 0x0028 (0x0358 - 0x0330)
class UArchivePassTooltipWidget final : public UTooltipWidget
{
public:
	float                                         _priceTagScaleFactor;                              // 0x0330(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          TitleTB;                                           // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SubtitleTB;                                        // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      DescriptionRTB;                                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePriceTagWidget*                    PriceTag;                                          // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetTooltipData(const struct FArchivePassTooltipViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchivePassTooltipWidget">();
	}
	static class UArchivePassTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchivePassTooltipWidget>();
	}
};
static_assert(alignof(UArchivePassTooltipWidget) == 0x000008, "Wrong alignment on UArchivePassTooltipWidget");
static_assert(sizeof(UArchivePassTooltipWidget) == 0x000358, "Wrong size on UArchivePassTooltipWidget");
static_assert(offsetof(UArchivePassTooltipWidget, _priceTagScaleFactor) == 0x000330, "Member 'UArchivePassTooltipWidget::_priceTagScaleFactor' has a wrong offset!");
static_assert(offsetof(UArchivePassTooltipWidget, TitleTB) == 0x000338, "Member 'UArchivePassTooltipWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UArchivePassTooltipWidget, SubtitleTB) == 0x000340, "Member 'UArchivePassTooltipWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UArchivePassTooltipWidget, DescriptionRTB) == 0x000348, "Member 'UArchivePassTooltipWidget::DescriptionRTB' has a wrong offset!");
static_assert(offsetof(UArchivePassTooltipWidget, PriceTag) == 0x000350, "Member 'UArchivePassTooltipWidget::PriceTag' has a wrong offset!");

// Class DBDUIViewsCore.ArchiveRewardNodeTooltipWidget
// 0x0010 (0x0340 - 0x0330)
class UArchiveRewardNodeTooltipWidget final : public UTooltipWidget
{
public:
	class UCustomizationTooltipWidget*            CustomizationTooltip;                              // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurrencyProgressionTooltipWidget*      CurrencyProgressionTooltip;                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveRewardNodeTooltipWidget">();
	}
	static class UArchiveRewardNodeTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveRewardNodeTooltipWidget>();
	}
};
static_assert(alignof(UArchiveRewardNodeTooltipWidget) == 0x000008, "Wrong alignment on UArchiveRewardNodeTooltipWidget");
static_assert(sizeof(UArchiveRewardNodeTooltipWidget) == 0x000340, "Wrong size on UArchiveRewardNodeTooltipWidget");
static_assert(offsetof(UArchiveRewardNodeTooltipWidget, CustomizationTooltip) == 0x000330, "Member 'UArchiveRewardNodeTooltipWidget::CustomizationTooltip' has a wrong offset!");
static_assert(offsetof(UArchiveRewardNodeTooltipWidget, CurrencyProgressionTooltip) == 0x000338, "Member 'UArchiveRewardNodeTooltipWidget::CurrencyProgressionTooltip' has a wrong offset!");

// Class DBDUIViewsCore.AspectRatioBox
// 0x0018 (0x01A0 - 0x0188)
class UAspectRatioBox final : public UContentWidget
{
public:
	float                                         AspectRatio;                                       // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsAspectRatioOverridden : 1;                       // 0x018C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_18D[0x13];                                     // 0x018D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearAspectRatio();
	void SetAspectRatio(float inAspectRatio);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AspectRatioBox">();
	}
	static class UAspectRatioBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAspectRatioBox>();
	}
};
static_assert(alignof(UAspectRatioBox) == 0x000008, "Wrong alignment on UAspectRatioBox");
static_assert(sizeof(UAspectRatioBox) == 0x0001A0, "Wrong size on UAspectRatioBox");
static_assert(offsetof(UAspectRatioBox, AspectRatio) == 0x000188, "Member 'UAspectRatioBox::AspectRatio' has a wrong offset!");

// Class DBDUIViewsCore.SeasonEndRankRewardsPopupWidget
// 0x0050 (0x03D8 - 0x0388)
class USeasonEndRankRewardsPopupWidget : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDRichTextBlock*                      SurvivorSeasonHighRTB;                             // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      KillerSeasonHighRTB;                               // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      DisclaimerMessageRTB;                              // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      SurvivorRankRTB;                                   // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      KillerRankRTB;                                     // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePlayerRankWidget*                  SurvivorRank;                                      // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreCurrencyProgressionRewardWidget*   SurvivorReward;                                    // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePlayerRankWidget*                  KillerRank;                                        // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreCurrencyProgressionRewardWidget*   KillerReward;                                      // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SeasonEndRankRewardsPopupWidget">();
	}
	static class USeasonEndRankRewardsPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USeasonEndRankRewardsPopupWidget>();
	}
};
static_assert(alignof(USeasonEndRankRewardsPopupWidget) == 0x000008, "Wrong alignment on USeasonEndRankRewardsPopupWidget");
static_assert(sizeof(USeasonEndRankRewardsPopupWidget) == 0x0003D8, "Wrong size on USeasonEndRankRewardsPopupWidget");
static_assert(offsetof(USeasonEndRankRewardsPopupWidget, SurvivorSeasonHighRTB) == 0x000390, "Member 'USeasonEndRankRewardsPopupWidget::SurvivorSeasonHighRTB' has a wrong offset!");
static_assert(offsetof(USeasonEndRankRewardsPopupWidget, KillerSeasonHighRTB) == 0x000398, "Member 'USeasonEndRankRewardsPopupWidget::KillerSeasonHighRTB' has a wrong offset!");
static_assert(offsetof(USeasonEndRankRewardsPopupWidget, DisclaimerMessageRTB) == 0x0003A0, "Member 'USeasonEndRankRewardsPopupWidget::DisclaimerMessageRTB' has a wrong offset!");
static_assert(offsetof(USeasonEndRankRewardsPopupWidget, SurvivorRankRTB) == 0x0003A8, "Member 'USeasonEndRankRewardsPopupWidget::SurvivorRankRTB' has a wrong offset!");
static_assert(offsetof(USeasonEndRankRewardsPopupWidget, KillerRankRTB) == 0x0003B0, "Member 'USeasonEndRankRewardsPopupWidget::KillerRankRTB' has a wrong offset!");
static_assert(offsetof(USeasonEndRankRewardsPopupWidget, SurvivorRank) == 0x0003B8, "Member 'USeasonEndRankRewardsPopupWidget::SurvivorRank' has a wrong offset!");
static_assert(offsetof(USeasonEndRankRewardsPopupWidget, SurvivorReward) == 0x0003C0, "Member 'USeasonEndRankRewardsPopupWidget::SurvivorReward' has a wrong offset!");
static_assert(offsetof(USeasonEndRankRewardsPopupWidget, KillerRank) == 0x0003C8, "Member 'USeasonEndRankRewardsPopupWidget::KillerRank' has a wrong offset!");
static_assert(offsetof(USeasonEndRankRewardsPopupWidget, KillerReward) == 0x0003D0, "Member 'USeasonEndRankRewardsPopupWidget::KillerReward' has a wrong offset!");

// Class DBDUIViewsCore.AspectRatioBoxSlot
// 0x0028 (0x0068 - 0x0040)
class UAspectRatioBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x16];                                      // 0x0052(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment inHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment inVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AspectRatioBoxSlot">();
	}
	static class UAspectRatioBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAspectRatioBoxSlot>();
	}
};
static_assert(alignof(UAspectRatioBoxSlot) == 0x000008, "Wrong alignment on UAspectRatioBoxSlot");
static_assert(sizeof(UAspectRatioBoxSlot) == 0x000068, "Wrong size on UAspectRatioBoxSlot");
static_assert(offsetof(UAspectRatioBoxSlot, Padding) == 0x000040, "Member 'UAspectRatioBoxSlot::Padding' has a wrong offset!");
static_assert(offsetof(UAspectRatioBoxSlot, HorizontalAlignment) == 0x000050, "Member 'UAspectRatioBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UAspectRatioBoxSlot, VerticalAlignment) == 0x000051, "Member 'UAspectRatioBoxSlot::VerticalAlignment' has a wrong offset!");

// Class DBDUIViewsCore.AudioEventWrapper
// 0x0018 (0x0048 - 0x0030)
class UAudioEventWrapper final : public UObject
{
public:
	class FString                                 SfxName;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          SfxEvent;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void PostAudioEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioEventWrapper">();
	}
	static class UAudioEventWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioEventWrapper>();
	}
};
static_assert(alignof(UAudioEventWrapper) == 0x000008, "Wrong alignment on UAudioEventWrapper");
static_assert(sizeof(UAudioEventWrapper) == 0x000048, "Wrong size on UAudioEventWrapper");
static_assert(offsetof(UAudioEventWrapper, SfxName) == 0x000030, "Member 'UAudioEventWrapper::SfxName' has a wrong offset!");
static_assert(offsetof(UAudioEventWrapper, SfxEvent) == 0x000040, "Member 'UAudioEventWrapper::SfxEvent' has a wrong offset!");

// Class DBDUIViewsCore.BaseFilterWidget
// 0x0078 (0x0398 - 0x0320)
class UBaseFilterWidget : public UCoreBaseUserWidget
{
public:
	class UDBDTextBlock*                          TitleTB;                                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreButtonWidget*                      ClearFiltersButton;                                // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           CheckBoxesContainer;                               // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _defaultFilterAvailable;                           // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _defaultFilterOwned;                               // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33A[0x2];                                      // 0x033A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _sortingOptions;                                   // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESortingOption                                _defaultSortingOption;                             // 0x0340(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESortingOrder                                 _defaultSortingOrder;                              // 0x0342(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_343[0x5];                                      // 0x0343(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCoreFilterButtonWidget*>        _filtersCheckBoxArray;                             // 0x0348(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UWidget*>                        _ignoreClickWidgets;                               // 0x0358(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          _isShowing;                                        // 0x0368(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreSortingWidget*                     SortButton;                                        // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const ESlateVisibility newVisibility)> _onWidgetVisibilityChanged; // 0x0378(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	uint8                                         Pad_388[0x10];                                     // 0x0388(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCheckBoxToggled();
	void OnPlayerClick(const struct FPointerEvent& PointerEvent);
	void OnWidgetVisibilityChanged(ESlateVisibility newVisibility);
	void ToggleWidgetVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseFilterWidget">();
	}
	static class UBaseFilterWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseFilterWidget>();
	}
};
static_assert(alignof(UBaseFilterWidget) == 0x000008, "Wrong alignment on UBaseFilterWidget");
static_assert(sizeof(UBaseFilterWidget) == 0x000398, "Wrong size on UBaseFilterWidget");
static_assert(offsetof(UBaseFilterWidget, TitleTB) == 0x000320, "Member 'UBaseFilterWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UBaseFilterWidget, ClearFiltersButton) == 0x000328, "Member 'UBaseFilterWidget::ClearFiltersButton' has a wrong offset!");
static_assert(offsetof(UBaseFilterWidget, CheckBoxesContainer) == 0x000330, "Member 'UBaseFilterWidget::CheckBoxesContainer' has a wrong offset!");
static_assert(offsetof(UBaseFilterWidget, _defaultFilterAvailable) == 0x000338, "Member 'UBaseFilterWidget::_defaultFilterAvailable' has a wrong offset!");
static_assert(offsetof(UBaseFilterWidget, _defaultFilterOwned) == 0x000339, "Member 'UBaseFilterWidget::_defaultFilterOwned' has a wrong offset!");
static_assert(offsetof(UBaseFilterWidget, _sortingOptions) == 0x00033C, "Member 'UBaseFilterWidget::_sortingOptions' has a wrong offset!");
static_assert(offsetof(UBaseFilterWidget, _defaultSortingOption) == 0x000340, "Member 'UBaseFilterWidget::_defaultSortingOption' has a wrong offset!");
static_assert(offsetof(UBaseFilterWidget, _defaultSortingOrder) == 0x000342, "Member 'UBaseFilterWidget::_defaultSortingOrder' has a wrong offset!");
static_assert(offsetof(UBaseFilterWidget, _filtersCheckBoxArray) == 0x000348, "Member 'UBaseFilterWidget::_filtersCheckBoxArray' has a wrong offset!");
static_assert(offsetof(UBaseFilterWidget, _ignoreClickWidgets) == 0x000358, "Member 'UBaseFilterWidget::_ignoreClickWidgets' has a wrong offset!");
static_assert(offsetof(UBaseFilterWidget, _isShowing) == 0x000368, "Member 'UBaseFilterWidget::_isShowing' has a wrong offset!");
static_assert(offsetof(UBaseFilterWidget, SortButton) == 0x000370, "Member 'UBaseFilterWidget::SortButton' has a wrong offset!");
static_assert(offsetof(UBaseFilterWidget, _onWidgetVisibilityChanged) == 0x000378, "Member 'UBaseFilterWidget::_onWidgetVisibilityChanged' has a wrong offset!");

// Class DBDUIViewsCore.BloodpointBonusLabelWidget
// 0x0000 (0x0320 - 0x0320)
class UBloodpointBonusLabelWidget final : public UCoreBaseUserWidget
{
public:
	void SetData(const struct FBloodpointBonus& ViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BloodpointBonusLabelWidget">();
	}
	static class UBloodpointBonusLabelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBloodpointBonusLabelWidget>();
	}
};
static_assert(alignof(UBloodpointBonusLabelWidget) == 0x000008, "Wrong alignment on UBloodpointBonusLabelWidget");
static_assert(sizeof(UBloodpointBonusLabelWidget) == 0x000320, "Wrong size on UBloodpointBonusLabelWidget");

// Class DBDUIViewsCore.BloodpointBonusTooltip
// 0x0038 (0x0368 - 0x0330)
class UBloodpointBonusTooltip final : public UTooltipWidget
{
public:
	class UDBDTextBlock*                          TitleTB;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TotalTB;                                           // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TotalBonusTB;                                      // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           LabelsVerticalBox;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UBloodpointBonusLabelWidget> BonusLabelWidgetClass;                            // 0x0350(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedLabelsCount;                        // 0x0358(0x0004)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCorePreConstructableList*              _bonusLabels;                                      // 0x0360(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetTooltipData(const struct FBloodpointBonusTooltipViewData& ViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BloodpointBonusTooltip">();
	}
	static class UBloodpointBonusTooltip* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBloodpointBonusTooltip>();
	}
};
static_assert(alignof(UBloodpointBonusTooltip) == 0x000008, "Wrong alignment on UBloodpointBonusTooltip");
static_assert(sizeof(UBloodpointBonusTooltip) == 0x000368, "Wrong size on UBloodpointBonusTooltip");
static_assert(offsetof(UBloodpointBonusTooltip, TitleTB) == 0x000330, "Member 'UBloodpointBonusTooltip::TitleTB' has a wrong offset!");
static_assert(offsetof(UBloodpointBonusTooltip, TotalTB) == 0x000338, "Member 'UBloodpointBonusTooltip::TotalTB' has a wrong offset!");
static_assert(offsetof(UBloodpointBonusTooltip, TotalBonusTB) == 0x000340, "Member 'UBloodpointBonusTooltip::TotalBonusTB' has a wrong offset!");
static_assert(offsetof(UBloodpointBonusTooltip, LabelsVerticalBox) == 0x000348, "Member 'UBloodpointBonusTooltip::LabelsVerticalBox' has a wrong offset!");
static_assert(offsetof(UBloodpointBonusTooltip, BonusLabelWidgetClass) == 0x000350, "Member 'UBloodpointBonusTooltip::BonusLabelWidgetClass' has a wrong offset!");
static_assert(offsetof(UBloodpointBonusTooltip, _preConstructedLabelsCount) == 0x000358, "Member 'UBloodpointBonusTooltip::_preConstructedLabelsCount' has a wrong offset!");
static_assert(offsetof(UBloodpointBonusTooltip, _bonusLabels) == 0x000360, "Member 'UBloodpointBonusTooltip::_bonusLabels' has a wrong offset!");

// Class DBDUIViewsCore.BotLoadoutWidget
// 0x0088 (0x0330 - 0x02A8)
class UBotLoadoutWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          BotRoleIndexText;                                  // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      PresetTitleRTB;                                    // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDDropDownListWidget*                 DropDownListWidget;                                // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDDropDownListButton*                 DropDownListTrigger;                               // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePresetContainerWidget*             PresetContainer;                                   // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLoadoutWidget*                     Loadout;                                           // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RegressionButton;                                  // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               AlternativeButton;                                 // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URichTextBlock*                         TitleText;                                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 presetId)> _onBotLoadoutPresetSlotClickedDelegate;           // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 SelectedCharacter)> _onSelectedCharacterChangedDelegate;     // 0x0308(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool isDropdownVisible)> _onCharacterSelectionDropdownVisibilityChangedDelegate; // 0x0318(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	ETooltipHorizontalAlignment                   HorizontalAlignment;                               // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETooltipVerticalAlignment                     VerticalAlignment;                                 // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32A[0x6];                                      // 0x032A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAcceptAction();
	void OnBackAction();
	void OnDropDownListSelectedOptionChanged(const struct FTabWidgetData& buttonData);
	void OnDropdownSelected(ESlateVisibility InVisibility);
	void OnPresetClicked(const int32 SelectedPresetId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BotLoadoutWidget">();
	}
	static class UBotLoadoutWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBotLoadoutWidget>();
	}
};
static_assert(alignof(UBotLoadoutWidget) == 0x000008, "Wrong alignment on UBotLoadoutWidget");
static_assert(sizeof(UBotLoadoutWidget) == 0x000330, "Wrong size on UBotLoadoutWidget");
static_assert(offsetof(UBotLoadoutWidget, BotRoleIndexText) == 0x0002B0, "Member 'UBotLoadoutWidget::BotRoleIndexText' has a wrong offset!");
static_assert(offsetof(UBotLoadoutWidget, PresetTitleRTB) == 0x0002B8, "Member 'UBotLoadoutWidget::PresetTitleRTB' has a wrong offset!");
static_assert(offsetof(UBotLoadoutWidget, DropDownListWidget) == 0x0002C0, "Member 'UBotLoadoutWidget::DropDownListWidget' has a wrong offset!");
static_assert(offsetof(UBotLoadoutWidget, DropDownListTrigger) == 0x0002C8, "Member 'UBotLoadoutWidget::DropDownListTrigger' has a wrong offset!");
static_assert(offsetof(UBotLoadoutWidget, PresetContainer) == 0x0002D0, "Member 'UBotLoadoutWidget::PresetContainer' has a wrong offset!");
static_assert(offsetof(UBotLoadoutWidget, Loadout) == 0x0002D8, "Member 'UBotLoadoutWidget::Loadout' has a wrong offset!");
static_assert(offsetof(UBotLoadoutWidget, RegressionButton) == 0x0002E0, "Member 'UBotLoadoutWidget::RegressionButton' has a wrong offset!");
static_assert(offsetof(UBotLoadoutWidget, AlternativeButton) == 0x0002E8, "Member 'UBotLoadoutWidget::AlternativeButton' has a wrong offset!");
static_assert(offsetof(UBotLoadoutWidget, TitleText) == 0x0002F0, "Member 'UBotLoadoutWidget::TitleText' has a wrong offset!");
static_assert(offsetof(UBotLoadoutWidget, _onBotLoadoutPresetSlotClickedDelegate) == 0x0002F8, "Member 'UBotLoadoutWidget::_onBotLoadoutPresetSlotClickedDelegate' has a wrong offset!");
static_assert(offsetof(UBotLoadoutWidget, _onSelectedCharacterChangedDelegate) == 0x000308, "Member 'UBotLoadoutWidget::_onSelectedCharacterChangedDelegate' has a wrong offset!");
static_assert(offsetof(UBotLoadoutWidget, _onCharacterSelectionDropdownVisibilityChangedDelegate) == 0x000318, "Member 'UBotLoadoutWidget::_onCharacterSelectionDropdownVisibilityChangedDelegate' has a wrong offset!");
static_assert(offsetof(UBotLoadoutWidget, HorizontalAlignment) == 0x000328, "Member 'UBotLoadoutWidget::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UBotLoadoutWidget, VerticalAlignment) == 0x000329, "Member 'UBotLoadoutWidget::VerticalAlignment' has a wrong offset!");

// Class DBDUIViewsCore.CoreTabContentWidget
// 0x0020 (0x0340 - 0x0320)
class UCoreTabContentWidget : public UCoreBaseUserWidget
{
public:
	TArray<class UWidget*>                        ContentWidgets;                                    // 0x0320(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         _contentFadeInTime;                                // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   _contentFadeInEasing;                              // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_335[0x3];                                      // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _contentFadeOutTime;                               // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   _contentFadeOutEasing;                             // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33D[0x3];                                      // 0x033D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FadeInContent();
	void FadeOutContent();
	void ResetFade();
	void StopFadeInTweening(float opacityValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTabContentWidget">();
	}
	static class UCoreTabContentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTabContentWidget>();
	}
};
static_assert(alignof(UCoreTabContentWidget) == 0x000008, "Wrong alignment on UCoreTabContentWidget");
static_assert(sizeof(UCoreTabContentWidget) == 0x000340, "Wrong size on UCoreTabContentWidget");
static_assert(offsetof(UCoreTabContentWidget, ContentWidgets) == 0x000320, "Member 'UCoreTabContentWidget::ContentWidgets' has a wrong offset!");
static_assert(offsetof(UCoreTabContentWidget, _contentFadeInTime) == 0x000330, "Member 'UCoreTabContentWidget::_contentFadeInTime' has a wrong offset!");
static_assert(offsetof(UCoreTabContentWidget, _contentFadeInEasing) == 0x000334, "Member 'UCoreTabContentWidget::_contentFadeInEasing' has a wrong offset!");
static_assert(offsetof(UCoreTabContentWidget, _contentFadeOutTime) == 0x000338, "Member 'UCoreTabContentWidget::_contentFadeOutTime' has a wrong offset!");
static_assert(offsetof(UCoreTabContentWidget, _contentFadeOutEasing) == 0x00033C, "Member 'UCoreTabContentWidget::_contentFadeOutEasing' has a wrong offset!");

// Class DBDUIViewsCore.ChallengesMenuChallengeSetWidget
// 0x00D0 (0x0410 - 0x0340)
class UChallengesMenuChallengeSetWidget : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreTabContainerWidget*                TabsContainer;                                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        TabContentSwitcher;                                // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChallengesMenuRitualsWidget*           ChallengesMenuRituals;                             // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             _eventSkinDataTable;                               // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FChallengeSkinUIData                   _skinData;                                         // 0x0368(0x0098)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const EChallengesMenuChallengeSetState State)> _challengeSetTabSelectedDelegate; // 0x0400(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void OnChallengeSetTabSelected(class UCoreSelectableButtonWidget* selectedButton);
	void RefreshMenuSkin();

	const struct FChallengeSkinUIData GetSkinData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengesMenuChallengeSetWidget">();
	}
	static class UChallengesMenuChallengeSetWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengesMenuChallengeSetWidget>();
	}
};
static_assert(alignof(UChallengesMenuChallengeSetWidget) == 0x000008, "Wrong alignment on UChallengesMenuChallengeSetWidget");
static_assert(sizeof(UChallengesMenuChallengeSetWidget) == 0x000410, "Wrong size on UChallengesMenuChallengeSetWidget");
static_assert(offsetof(UChallengesMenuChallengeSetWidget, TabsContainer) == 0x000348, "Member 'UChallengesMenuChallengeSetWidget::TabsContainer' has a wrong offset!");
static_assert(offsetof(UChallengesMenuChallengeSetWidget, TabContentSwitcher) == 0x000350, "Member 'UChallengesMenuChallengeSetWidget::TabContentSwitcher' has a wrong offset!");
static_assert(offsetof(UChallengesMenuChallengeSetWidget, ChallengesMenuRituals) == 0x000358, "Member 'UChallengesMenuChallengeSetWidget::ChallengesMenuRituals' has a wrong offset!");
static_assert(offsetof(UChallengesMenuChallengeSetWidget, _eventSkinDataTable) == 0x000360, "Member 'UChallengesMenuChallengeSetWidget::_eventSkinDataTable' has a wrong offset!");
static_assert(offsetof(UChallengesMenuChallengeSetWidget, _skinData) == 0x000368, "Member 'UChallengesMenuChallengeSetWidget::_skinData' has a wrong offset!");
static_assert(offsetof(UChallengesMenuChallengeSetWidget, _challengeSetTabSelectedDelegate) == 0x000400, "Member 'UChallengesMenuChallengeSetWidget::_challengeSetTabSelectedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.ChallengesMenuRewardTrackTierItem
// 0x0040 (0x02E8 - 0x02A8)
class UChallengesMenuRewardTrackTierItem final : public UUserWidget
{
public:
	TSubclassOf<class UCoreRewardWrapperWidget>   RewardWrapperWidgetClass;                          // 0x02A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 tier, class UCoreButtonWidget* selectedReward, int32 Index)> _itemClickedDelegate; // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UGridPanel*                             RewardsContainer;                                  // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreRewardWrapperWidget*>       _rewardWidgets;                                    // 0x02C8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          _unlockAnimationCompleteSound;                     // 0x02D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E0[0x8];                                      // 0x02E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Clear();
	void OnRewardClicked(class UCoreButtonWidget* Button);
	void SetGenericData(const struct FChallengeSetRewardTrackTierInfoViewData& Data);
	void SetLockedState(const bool IsLocked);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengesMenuRewardTrackTierItem">();
	}
	static class UChallengesMenuRewardTrackTierItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengesMenuRewardTrackTierItem>();
	}
};
static_assert(alignof(UChallengesMenuRewardTrackTierItem) == 0x000008, "Wrong alignment on UChallengesMenuRewardTrackTierItem");
static_assert(sizeof(UChallengesMenuRewardTrackTierItem) == 0x0002E8, "Wrong size on UChallengesMenuRewardTrackTierItem");
static_assert(offsetof(UChallengesMenuRewardTrackTierItem, RewardWrapperWidgetClass) == 0x0002A8, "Member 'UChallengesMenuRewardTrackTierItem::RewardWrapperWidgetClass' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackTierItem, _itemClickedDelegate) == 0x0002B0, "Member 'UChallengesMenuRewardTrackTierItem::_itemClickedDelegate' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackTierItem, RewardsContainer) == 0x0002C0, "Member 'UChallengesMenuRewardTrackTierItem::RewardsContainer' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackTierItem, _rewardWidgets) == 0x0002C8, "Member 'UChallengesMenuRewardTrackTierItem::_rewardWidgets' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackTierItem, _unlockAnimationCompleteSound) == 0x0002D8, "Member 'UChallengesMenuRewardTrackTierItem::_unlockAnimationCompleteSound' has a wrong offset!");

// Class DBDUIViewsCore.ChallengesMenuRewardTrackWidget
// 0x06F8 (0x0A38 - 0x0340)
class UChallengesMenuRewardTrackWidget final : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             _eventSkinDataTable;                               // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UChallengesMenuRewardTrackTierItem> RewardTrackTierItemClass;                  // 0x0350(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxTierItemsPerPage;                               // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PageSwitchFadeDuration;                            // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   PageSwitchFadeTweenEasing;                         // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBox*                         TierItemGrid;                                      // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PaginationTB;                                      // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               PaginationPreviousButton;                          // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               PaginationNextButton;                              // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreImagePreviewAreaWidget*            PreviewArea;                                       // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLargeCurrencyIconWidget*           CurrencyPreview;                                   // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      AdditionalDescriptionText;                         // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UChallengesMenuRewardTrackTierItem*> TierItemPool;                                  // 0x03A0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	int32                                         CurrentPage;                                       // 0x03B0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B4[0x4];                                      // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUITweenInstance*                       PageSwitchVisibilityTween;                         // 0x03B8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreSelectableButtonWidget*            CurrentSelectedReward;                             // 0x03C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class FName ItemId)> _rewardItemClickedDelegate;                   // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(ECurrencyType currencyId)> _rewardCurrencyClickedDelegate;         // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	struct FRewardWrapperViewData                 _rewardWrapperViewDataToSelect;                    // 0x03E8(0x0590)(Transient, NativeAccessSpecifierPrivate)
	struct FChallengeSkinUIData                   _skinData;                                         // 0x0978(0x0098)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A10[0x28];                                     // 0x0A10(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayPage(class UUITweenInstance* tween);
	void OnNextButtonClicked();
	void OnPreviousButtonClicked();
	void OnRewardItemClicked(int32 tier, class UCoreButtonWidget* Button, int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengesMenuRewardTrackWidget">();
	}
	static class UChallengesMenuRewardTrackWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengesMenuRewardTrackWidget>();
	}
};
static_assert(alignof(UChallengesMenuRewardTrackWidget) == 0x000008, "Wrong alignment on UChallengesMenuRewardTrackWidget");
static_assert(sizeof(UChallengesMenuRewardTrackWidget) == 0x000A38, "Wrong size on UChallengesMenuRewardTrackWidget");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, _eventSkinDataTable) == 0x000348, "Member 'UChallengesMenuRewardTrackWidget::_eventSkinDataTable' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, RewardTrackTierItemClass) == 0x000350, "Member 'UChallengesMenuRewardTrackWidget::RewardTrackTierItemClass' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, MaxTierItemsPerPage) == 0x000358, "Member 'UChallengesMenuRewardTrackWidget::MaxTierItemsPerPage' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, PageSwitchFadeDuration) == 0x00035C, "Member 'UChallengesMenuRewardTrackWidget::PageSwitchFadeDuration' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, PageSwitchFadeTweenEasing) == 0x000360, "Member 'UChallengesMenuRewardTrackWidget::PageSwitchFadeTweenEasing' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, TierItemGrid) == 0x000368, "Member 'UChallengesMenuRewardTrackWidget::TierItemGrid' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, PaginationTB) == 0x000370, "Member 'UChallengesMenuRewardTrackWidget::PaginationTB' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, PaginationPreviousButton) == 0x000378, "Member 'UChallengesMenuRewardTrackWidget::PaginationPreviousButton' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, PaginationNextButton) == 0x000380, "Member 'UChallengesMenuRewardTrackWidget::PaginationNextButton' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, PreviewArea) == 0x000388, "Member 'UChallengesMenuRewardTrackWidget::PreviewArea' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, CurrencyPreview) == 0x000390, "Member 'UChallengesMenuRewardTrackWidget::CurrencyPreview' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, AdditionalDescriptionText) == 0x000398, "Member 'UChallengesMenuRewardTrackWidget::AdditionalDescriptionText' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, TierItemPool) == 0x0003A0, "Member 'UChallengesMenuRewardTrackWidget::TierItemPool' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, CurrentPage) == 0x0003B0, "Member 'UChallengesMenuRewardTrackWidget::CurrentPage' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, PageSwitchVisibilityTween) == 0x0003B8, "Member 'UChallengesMenuRewardTrackWidget::PageSwitchVisibilityTween' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, CurrentSelectedReward) == 0x0003C0, "Member 'UChallengesMenuRewardTrackWidget::CurrentSelectedReward' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, _rewardItemClickedDelegate) == 0x0003C8, "Member 'UChallengesMenuRewardTrackWidget::_rewardItemClickedDelegate' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, _rewardCurrencyClickedDelegate) == 0x0003D8, "Member 'UChallengesMenuRewardTrackWidget::_rewardCurrencyClickedDelegate' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, _rewardWrapperViewDataToSelect) == 0x0003E8, "Member 'UChallengesMenuRewardTrackWidget::_rewardWrapperViewDataToSelect' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRewardTrackWidget, _skinData) == 0x000978, "Member 'UChallengesMenuRewardTrackWidget::_skinData' has a wrong offset!");

// Class DBDUIViewsCore.CoreButtonWidget
// 0x0190 (0x04B0 - 0x0320)
class UCoreButtonWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDImage*                              BackgroundIMG;                                     // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDImage*                              AdditionalIconIMG;                                 // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreButtonWidget* buttonTarget)> OnHoveredDelegate;         // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreButtonWidget* buttonTarget)> OnUnhoveredDelegate;       // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreButtonWidget* buttonTarget)> OnPressedDelegate;         // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreButtonWidget* buttonTarget)> OnReleasedDelegate;        // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreButtonWidget* buttonTarget)> OnClickedDelegate;         // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const EButtonWidgetVisibility previousVisibility, const EButtonWidgetVisibility newVisibility)> OnButtonVisibilityChangedDelegate; // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EAnalogCursorStickiness                       AnalogCursorStickiness;                            // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDButton*                             HitzoneButton;                                     // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LabelTB;                                           // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextJustify                                  _alignment;                                        // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HoveredSfxName;                                    // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          HoveredSfx;                                        // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 PressedSfxName;                                    // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          PressedSfx;                                        // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 StartedChargingSfxName;                            // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          StartedChargingSfx;                                // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CancelledChargingSfxName;                          // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          CancelledChargingSfx;                              // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CompletedChargingSfxName;                          // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          CompletedChargingSfx;                              // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ClickedSfxName;                                    // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ClickedSfx;                                        // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDFeatureLockProgress                _lockedFeatureData;                                // 0x0448(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isFeatureGatingEnabled;                           // 0x0454(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EDBDFeatureType                               _lockedFeatureType;                                // 0x0455(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_456[0x2];                                      // 0x0456(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _chargingAnimCurve;                                // 0x0458(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_460[0x10];                                     // 0x0460(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _repetitionDelayCurve;                             // 0x0470(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_478[0x10];                                     // 0x0478(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          _debugAnalyticsTB;                                 // 0x0488(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _sendAnalyticsData;                                // 0x0490(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _analyticsName;                                    // 0x0498(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _prependCurrentTabNameToAnalyticsName;             // 0x04A8(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAlignmentChanged(ETextJustify newAlignment);
	void OnButtonVisibilityChanged(const EButtonWidgetVisibility previousVisibility, const EButtonWidgetVisibility newVisibility);
	void OnChargingComplete();
	void OnChargingTick(float Progress);
	void OnClickableChanged(bool IsClickable);
	void OnClicked();
	void OnEnabledChanged(bool IsEnabled);
	void OnHovered();
	void OnInternalClicked();
	void OnInternalHovered();
	void OnInternalLongPressed();
	void OnInternalPressed();
	void OnInternalReleased();
	void OnInternalUnhovered();
	void OnLongPressed();
	void OnPressed();
	void OnReleased();
	void OnUnhovered();
	void SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> iconTexture);
	void SetAlignment(ETextJustify newAlignment);
	void SetBackground(TSoftObjectPtr<class UMaterialInstance> backgroundMaterial);
	void SetChargeable(bool isChargeable, class UCurveFloat* holdingAnimCurve, float Duration);
	void SetClickable(bool IsClickable);
	void SetEnabled(bool IsEnabled);
	void SetHoldable(bool isHoldable);
	void SetHoverable(bool isHoverable);
	void SetLabel(const class FText& label);
	void SetPressable(bool isPressable);
	void SetRepeatable(bool isRepeatable, class UCurveFloat* repetitionDelayCurve);
	void SetVisible(EButtonWidgetVisibility Visible);
	void UpdateLockedFeatureVisuals(bool IsLockedFeature);

	const struct FGeometry GetHitzonePaintSpaceGeometry() const;
	bool HasValidLockedFeatureData() const;
	bool IsClickable() const;
	bool IsEnabled() const;
	bool IsPressed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreButtonWidget">();
	}
	static class UCoreButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreButtonWidget>();
	}
};
static_assert(alignof(UCoreButtonWidget) == 0x000008, "Wrong alignment on UCoreButtonWidget");
static_assert(sizeof(UCoreButtonWidget) == 0x0004B0, "Wrong size on UCoreButtonWidget");
static_assert(offsetof(UCoreButtonWidget, BackgroundIMG) == 0x000328, "Member 'UCoreButtonWidget::BackgroundIMG' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, AdditionalIconIMG) == 0x000330, "Member 'UCoreButtonWidget::AdditionalIconIMG' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, OnHoveredDelegate) == 0x000338, "Member 'UCoreButtonWidget::OnHoveredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, OnUnhoveredDelegate) == 0x000348, "Member 'UCoreButtonWidget::OnUnhoveredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, OnPressedDelegate) == 0x000358, "Member 'UCoreButtonWidget::OnPressedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, OnReleasedDelegate) == 0x000368, "Member 'UCoreButtonWidget::OnReleasedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, OnClickedDelegate) == 0x000378, "Member 'UCoreButtonWidget::OnClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, OnButtonVisibilityChangedDelegate) == 0x000388, "Member 'UCoreButtonWidget::OnButtonVisibilityChangedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, AnalogCursorStickiness) == 0x000398, "Member 'UCoreButtonWidget::AnalogCursorStickiness' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, HitzoneButton) == 0x0003A0, "Member 'UCoreButtonWidget::HitzoneButton' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, LabelTB) == 0x0003A8, "Member 'UCoreButtonWidget::LabelTB' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, _alignment) == 0x0003B0, "Member 'UCoreButtonWidget::_alignment' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, HoveredSfxName) == 0x0003B8, "Member 'UCoreButtonWidget::HoveredSfxName' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, HoveredSfx) == 0x0003C8, "Member 'UCoreButtonWidget::HoveredSfx' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, PressedSfxName) == 0x0003D0, "Member 'UCoreButtonWidget::PressedSfxName' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, PressedSfx) == 0x0003E0, "Member 'UCoreButtonWidget::PressedSfx' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, StartedChargingSfxName) == 0x0003E8, "Member 'UCoreButtonWidget::StartedChargingSfxName' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, StartedChargingSfx) == 0x0003F8, "Member 'UCoreButtonWidget::StartedChargingSfx' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, CancelledChargingSfxName) == 0x000400, "Member 'UCoreButtonWidget::CancelledChargingSfxName' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, CancelledChargingSfx) == 0x000410, "Member 'UCoreButtonWidget::CancelledChargingSfx' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, CompletedChargingSfxName) == 0x000418, "Member 'UCoreButtonWidget::CompletedChargingSfxName' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, CompletedChargingSfx) == 0x000428, "Member 'UCoreButtonWidget::CompletedChargingSfx' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, ClickedSfxName) == 0x000430, "Member 'UCoreButtonWidget::ClickedSfxName' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, ClickedSfx) == 0x000440, "Member 'UCoreButtonWidget::ClickedSfx' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, _lockedFeatureData) == 0x000448, "Member 'UCoreButtonWidget::_lockedFeatureData' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, _isFeatureGatingEnabled) == 0x000454, "Member 'UCoreButtonWidget::_isFeatureGatingEnabled' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, _lockedFeatureType) == 0x000455, "Member 'UCoreButtonWidget::_lockedFeatureType' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, _chargingAnimCurve) == 0x000458, "Member 'UCoreButtonWidget::_chargingAnimCurve' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, _repetitionDelayCurve) == 0x000470, "Member 'UCoreButtonWidget::_repetitionDelayCurve' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, _debugAnalyticsTB) == 0x000488, "Member 'UCoreButtonWidget::_debugAnalyticsTB' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, _sendAnalyticsData) == 0x000490, "Member 'UCoreButtonWidget::_sendAnalyticsData' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, _analyticsName) == 0x000498, "Member 'UCoreButtonWidget::_analyticsName' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, _prependCurrentTabNameToAnalyticsName) == 0x0004A8, "Member 'UCoreButtonWidget::_prependCurrentTabNameToAnalyticsName' has a wrong offset!");

// Class DBDUIViewsCore.ChallengesMenuRiftButtonWidget
// 0x00A0 (0x0550 - 0x04B0)
class UChallengesMenuRiftButtonWidget : public UCoreButtonWidget
{
public:
	TSoftObjectPtr<class UTexture2D>              _freeRiftPassIcon;                                 // 0x04B0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              _premiumRiftPassIcon;                              // 0x04E8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RiftPassTitleTB;                                   // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CurrentTierTB;                                     // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              RiftProgressionImage;                              // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RiftProgressionTB;                                 // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          NextTierTitleTB;                                   // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreRewardWrapperWidget*               NextTierReward;                                    // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetBackgroundVisuals(bool isPremiumPass, ETierType tier);
	void SetLockedVisuals(bool IsLocked);
	void SetRiftPassTrackIcon(bool isPremiumPass);
	void SetRiftProgressionColor(ETierType tier);
	void SetRiftProgressionImage(float Percentage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengesMenuRiftButtonWidget">();
	}
	static class UChallengesMenuRiftButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengesMenuRiftButtonWidget>();
	}
};
static_assert(alignof(UChallengesMenuRiftButtonWidget) == 0x000008, "Wrong alignment on UChallengesMenuRiftButtonWidget");
static_assert(sizeof(UChallengesMenuRiftButtonWidget) == 0x000550, "Wrong size on UChallengesMenuRiftButtonWidget");
static_assert(offsetof(UChallengesMenuRiftButtonWidget, _freeRiftPassIcon) == 0x0004B0, "Member 'UChallengesMenuRiftButtonWidget::_freeRiftPassIcon' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRiftButtonWidget, _premiumRiftPassIcon) == 0x0004E8, "Member 'UChallengesMenuRiftButtonWidget::_premiumRiftPassIcon' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRiftButtonWidget, RiftPassTitleTB) == 0x000520, "Member 'UChallengesMenuRiftButtonWidget::RiftPassTitleTB' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRiftButtonWidget, CurrentTierTB) == 0x000528, "Member 'UChallengesMenuRiftButtonWidget::CurrentTierTB' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRiftButtonWidget, RiftProgressionImage) == 0x000530, "Member 'UChallengesMenuRiftButtonWidget::RiftProgressionImage' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRiftButtonWidget, RiftProgressionTB) == 0x000538, "Member 'UChallengesMenuRiftButtonWidget::RiftProgressionTB' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRiftButtonWidget, NextTierTitleTB) == 0x000540, "Member 'UChallengesMenuRiftButtonWidget::NextTierTitleTB' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRiftButtonWidget, NextTierReward) == 0x000548, "Member 'UChallengesMenuRiftButtonWidget::NextTierReward' has a wrong offset!");

// Class DBDUIViewsCore.ChallengesMenuRitualsWidget
// 0x0328 (0x0668 - 0x0340)
class UChallengesMenuRitualsWidget : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreChallengeMenuSubListWidget> ChallengeListWidgetClass;                     // 0x0348(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreChallengeCardWidget>   ChallengeCardWidgetClass;                          // 0x0350(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _sortingOptions;                                   // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedChallengeSubListCount;              // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _challengeCardSubListPadding;                      // 0x0360(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         _lastChallengeCardSubListBottomPadding;            // 0x0370(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDScrollBox*                          ChallengeCardsScrollBox;                           // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           ChallengeCardsVerticalBox;                         // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSearchBarWidget*                   SearchBar;                                         // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreIconToggleWidget*                  FiltersButton;                                     // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreChallengeFilterWidget*             FiltersWidget;                                     // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInfoMessageWidget*                 MessageWidget;                                     // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FChallengeSetMenuViewData              _challengeSetData;                                 // 0x03A8(0x01D8)(Protected, NativeAccessSpecifierProtected)
	TScriptInterface<class ISearchBarViewInterface> _searchBar;                                      // 0x0580(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _challengeSubListPreConstructableList;             // 0x0590(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreChallengeCardWidget*>       _activeChallengeCards;                             // 0x0598(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<class FString, class UCoreChallengeMenuSubListWidget*> _challengeSubLists;                  // 0x05A8(0x0050)(ExportObject, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UCoreFooterInputSwitcherWidget*         _followChallengeInputSwitcher;                     // 0x05F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreChallengeCardWidget*               _hoveredChallengeCardWidget;                       // 0x0600(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreChallengeCardWidget*>       _challengeCardPool;                                // 0x0608(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_618[0x50];                                     // 0x0618(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnChallengeCardClicked(class UCoreButtonWidget* targetButton);
	void OnChallengeCardHovered(class UCoreButtonWidget* targetButton);
	void OnChallengeCardUnhovered(class UCoreButtonWidget* targetButton);
	void OnFiltersButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnFollowChallengeInputSwitcherTriggered();
	void OnSortingChanged();
	void ScrollToSelectedItem(const class FName& selectedItemId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengesMenuRitualsWidget">();
	}
	static class UChallengesMenuRitualsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengesMenuRitualsWidget>();
	}
};
static_assert(alignof(UChallengesMenuRitualsWidget) == 0x000008, "Wrong alignment on UChallengesMenuRitualsWidget");
static_assert(sizeof(UChallengesMenuRitualsWidget) == 0x000668, "Wrong size on UChallengesMenuRitualsWidget");
static_assert(offsetof(UChallengesMenuRitualsWidget, ChallengeListWidgetClass) == 0x000348, "Member 'UChallengesMenuRitualsWidget::ChallengeListWidgetClass' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, ChallengeCardWidgetClass) == 0x000350, "Member 'UChallengesMenuRitualsWidget::ChallengeCardWidgetClass' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, _sortingOptions) == 0x000358, "Member 'UChallengesMenuRitualsWidget::_sortingOptions' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, _preConstructedChallengeSubListCount) == 0x00035C, "Member 'UChallengesMenuRitualsWidget::_preConstructedChallengeSubListCount' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, _challengeCardSubListPadding) == 0x000360, "Member 'UChallengesMenuRitualsWidget::_challengeCardSubListPadding' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, _lastChallengeCardSubListBottomPadding) == 0x000370, "Member 'UChallengesMenuRitualsWidget::_lastChallengeCardSubListBottomPadding' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, ChallengeCardsScrollBox) == 0x000378, "Member 'UChallengesMenuRitualsWidget::ChallengeCardsScrollBox' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, ChallengeCardsVerticalBox) == 0x000380, "Member 'UChallengesMenuRitualsWidget::ChallengeCardsVerticalBox' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, SearchBar) == 0x000388, "Member 'UChallengesMenuRitualsWidget::SearchBar' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, FiltersButton) == 0x000390, "Member 'UChallengesMenuRitualsWidget::FiltersButton' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, FiltersWidget) == 0x000398, "Member 'UChallengesMenuRitualsWidget::FiltersWidget' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, MessageWidget) == 0x0003A0, "Member 'UChallengesMenuRitualsWidget::MessageWidget' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, _challengeSetData) == 0x0003A8, "Member 'UChallengesMenuRitualsWidget::_challengeSetData' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, _searchBar) == 0x000580, "Member 'UChallengesMenuRitualsWidget::_searchBar' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, _challengeSubListPreConstructableList) == 0x000590, "Member 'UChallengesMenuRitualsWidget::_challengeSubListPreConstructableList' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, _activeChallengeCards) == 0x000598, "Member 'UChallengesMenuRitualsWidget::_activeChallengeCards' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, _challengeSubLists) == 0x0005A8, "Member 'UChallengesMenuRitualsWidget::_challengeSubLists' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, _followChallengeInputSwitcher) == 0x0005F8, "Member 'UChallengesMenuRitualsWidget::_followChallengeInputSwitcher' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, _hoveredChallengeCardWidget) == 0x000600, "Member 'UChallengesMenuRitualsWidget::_hoveredChallengeCardWidget' has a wrong offset!");
static_assert(offsetof(UChallengesMenuRitualsWidget, _challengeCardPool) == 0x000608, "Member 'UChallengesMenuRitualsWidget::_challengeCardPool' has a wrong offset!");

// Class DBDUIViewsCore.ChallengesMenuUtilities
// 0x0000 (0x0030 - 0x0030)
class UChallengesMenuUtilities final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengesMenuUtilities">();
	}
	static class UChallengesMenuUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengesMenuUtilities>();
	}
};
static_assert(alignof(UChallengesMenuUtilities) == 0x000008, "Wrong alignment on UChallengesMenuUtilities");
static_assert(sizeof(UChallengesMenuUtilities) == 0x000030, "Wrong size on UChallengesMenuUtilities");

// Class DBDUIViewsCore.ChallengeTooltipWidget
// 0x0010 (0x0340 - 0x0330)
class UChallengeTooltipWidget final : public UTooltipWidget
{
public:
	class UDBDTextBlock*                          SubtitleTB;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      ObjectivesTB;                                      // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeTooltipWidget">();
	}
	static class UChallengeTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeTooltipWidget>();
	}
};
static_assert(alignof(UChallengeTooltipWidget) == 0x000008, "Wrong alignment on UChallengeTooltipWidget");
static_assert(sizeof(UChallengeTooltipWidget) == 0x000340, "Wrong size on UChallengeTooltipWidget");
static_assert(offsetof(UChallengeTooltipWidget, SubtitleTB) == 0x000330, "Member 'UChallengeTooltipWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UChallengeTooltipWidget, ObjectivesTB) == 0x000338, "Member 'UChallengeTooltipWidget::ObjectivesTB' has a wrong offset!");

// Class DBDUIViewsCore.CharacterTooltipWidget
// 0x00F0 (0x0420 - 0x0330)
class UCharacterTooltipWidget final : public UTooltipWidget
{
public:
	class UDBDTextBlock*                          InstructionTB;                                     // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LevelTB;                                           // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LockDetailsTB;                                     // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TrialCharacterDetailsTB;                           // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCharacterTooltipViewData              _characterTooltipViewData;                         // 0x0350(0x00C0)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_410[0x10];                                     // 0x0410(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLevel(int32 Level);
	void SetLockDetails(const struct FCharacterTooltipViewData& CharacterViewData);
	void SetTooltipData(const struct FCharacterTooltipViewData& CharacterViewData);
	void SetTrialCharacterDetails(const struct FCharacterTooltipViewData& CharacterViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterTooltipWidget">();
	}
	static class UCharacterTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterTooltipWidget>();
	}
};
static_assert(alignof(UCharacterTooltipWidget) == 0x000008, "Wrong alignment on UCharacterTooltipWidget");
static_assert(sizeof(UCharacterTooltipWidget) == 0x000420, "Wrong size on UCharacterTooltipWidget");
static_assert(offsetof(UCharacterTooltipWidget, InstructionTB) == 0x000330, "Member 'UCharacterTooltipWidget::InstructionTB' has a wrong offset!");
static_assert(offsetof(UCharacterTooltipWidget, LevelTB) == 0x000338, "Member 'UCharacterTooltipWidget::LevelTB' has a wrong offset!");
static_assert(offsetof(UCharacterTooltipWidget, LockDetailsTB) == 0x000340, "Member 'UCharacterTooltipWidget::LockDetailsTB' has a wrong offset!");
static_assert(offsetof(UCharacterTooltipWidget, TrialCharacterDetailsTB) == 0x000348, "Member 'UCharacterTooltipWidget::TrialCharacterDetailsTB' has a wrong offset!");
static_assert(offsetof(UCharacterTooltipWidget, _characterTooltipViewData) == 0x000350, "Member 'UCharacterTooltipWidget::_characterTooltipViewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreBaseHudWidget
// 0x0030 (0x0350 - 0x0320)
class UCoreBaseHudWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FocusAnimationDuration;                            // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FocusAnimationDelay;                               // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   FocusAnimationEasing;                              // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FocusAnimationMaxOpacity;                          // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FocusAnimationMinOpacity;                          // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               ForcedInvisibilityContainer;                       // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         _forcedHudWidgetInvisibility;                      // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         _currentForcedHudWidgetInvisibility;               // 0x0349(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34A[0x6];                                      // 0x034A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayFocusAnimation();

	bool ShouldPlayFocusAnimation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreBaseHudWidget">();
	}
	static class UCoreBaseHudWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreBaseHudWidget>();
	}
};
static_assert(alignof(UCoreBaseHudWidget) == 0x000008, "Wrong alignment on UCoreBaseHudWidget");
static_assert(sizeof(UCoreBaseHudWidget) == 0x000350, "Wrong size on UCoreBaseHudWidget");
static_assert(offsetof(UCoreBaseHudWidget, FocusAnimationDuration) == 0x000328, "Member 'UCoreBaseHudWidget::FocusAnimationDuration' has a wrong offset!");
static_assert(offsetof(UCoreBaseHudWidget, FocusAnimationDelay) == 0x00032C, "Member 'UCoreBaseHudWidget::FocusAnimationDelay' has a wrong offset!");
static_assert(offsetof(UCoreBaseHudWidget, FocusAnimationEasing) == 0x000330, "Member 'UCoreBaseHudWidget::FocusAnimationEasing' has a wrong offset!");
static_assert(offsetof(UCoreBaseHudWidget, FocusAnimationMaxOpacity) == 0x000334, "Member 'UCoreBaseHudWidget::FocusAnimationMaxOpacity' has a wrong offset!");
static_assert(offsetof(UCoreBaseHudWidget, FocusAnimationMinOpacity) == 0x000338, "Member 'UCoreBaseHudWidget::FocusAnimationMinOpacity' has a wrong offset!");
static_assert(offsetof(UCoreBaseHudWidget, ForcedInvisibilityContainer) == 0x000340, "Member 'UCoreBaseHudWidget::ForcedInvisibilityContainer' has a wrong offset!");
static_assert(offsetof(UCoreBaseHudWidget, _forcedHudWidgetInvisibility) == 0x000348, "Member 'UCoreBaseHudWidget::_forcedHudWidgetInvisibility' has a wrong offset!");
static_assert(offsetof(UCoreBaseHudWidget, _currentForcedHudWidgetInvisibility) == 0x000349, "Member 'UCoreBaseHudWidget::_currentForcedHudWidgetInvisibility' has a wrong offset!");

// Class DBDUIViewsCore.CompetenceContainerWidget
// 0x0050 (0x03A0 - 0x0350)
class UCompetenceContainerWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCorePerkWidget*>                PerkWidgets;                                       // 0x0358(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UCoreSkillWidget*>               SkillWidgets;                                      // 0x0368(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<TScriptInterface<class IPerkViewInterface>> _perkViewInterfaces;                          // 0x0378(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TScriptInterface<class ISkillViewInterface>> _skillViewInterfaces;                        // 0x0388(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPerkRevealed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CompetenceContainerWidget">();
	}
	static class UCompetenceContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompetenceContainerWidget>();
	}
};
static_assert(alignof(UCompetenceContainerWidget) == 0x000008, "Wrong alignment on UCompetenceContainerWidget");
static_assert(sizeof(UCompetenceContainerWidget) == 0x0003A0, "Wrong size on UCompetenceContainerWidget");
static_assert(offsetof(UCompetenceContainerWidget, PerkWidgets) == 0x000358, "Member 'UCompetenceContainerWidget::PerkWidgets' has a wrong offset!");
static_assert(offsetof(UCompetenceContainerWidget, SkillWidgets) == 0x000368, "Member 'UCompetenceContainerWidget::SkillWidgets' has a wrong offset!");
static_assert(offsetof(UCompetenceContainerWidget, _perkViewInterfaces) == 0x000378, "Member 'UCompetenceContainerWidget::_perkViewInterfaces' has a wrong offset!");
static_assert(offsetof(UCompetenceContainerWidget, _skillViewInterfaces) == 0x000388, "Member 'UCompetenceContainerWidget::_skillViewInterfaces' has a wrong offset!");

// Class DBDUIViewsCore.CoreBaseLoadoutPartWidget
// 0x0030 (0x0350 - 0x0320)
class UCoreBaseLoadoutPartWidget : public UCoreBaseUserWidget
{
public:
	class UDBDImage*                              ImageRarity;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ImageIcon;                                         // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TextStackCount;                                    // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ImageBuff;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ImageDebuff;                                       // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELoadoutSlot                                  slotIndex;                                         // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetActiveState(bool IsActive);
	void SetLoadoutPartIcon(TSoftObjectPtr<class UTexture2D> Icon);
	void SetLoadoutPartRarity(EItemRarity Rarity, EItemSourceTag ItemSourceTags);
	void SetLoadoutStackCount(int32 StackCount);
	void SetStatusEffect(EStatusEffectType StatusEffectType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreBaseLoadoutPartWidget">();
	}
	static class UCoreBaseLoadoutPartWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreBaseLoadoutPartWidget>();
	}
};
static_assert(alignof(UCoreBaseLoadoutPartWidget) == 0x000008, "Wrong alignment on UCoreBaseLoadoutPartWidget");
static_assert(sizeof(UCoreBaseLoadoutPartWidget) == 0x000350, "Wrong size on UCoreBaseLoadoutPartWidget");
static_assert(offsetof(UCoreBaseLoadoutPartWidget, ImageRarity) == 0x000320, "Member 'UCoreBaseLoadoutPartWidget::ImageRarity' has a wrong offset!");
static_assert(offsetof(UCoreBaseLoadoutPartWidget, ImageIcon) == 0x000328, "Member 'UCoreBaseLoadoutPartWidget::ImageIcon' has a wrong offset!");
static_assert(offsetof(UCoreBaseLoadoutPartWidget, TextStackCount) == 0x000330, "Member 'UCoreBaseLoadoutPartWidget::TextStackCount' has a wrong offset!");
static_assert(offsetof(UCoreBaseLoadoutPartWidget, ImageBuff) == 0x000338, "Member 'UCoreBaseLoadoutPartWidget::ImageBuff' has a wrong offset!");
static_assert(offsetof(UCoreBaseLoadoutPartWidget, ImageDebuff) == 0x000340, "Member 'UCoreBaseLoadoutPartWidget::ImageDebuff' has a wrong offset!");
static_assert(offsetof(UCoreBaseLoadoutPartWidget, slotIndex) == 0x000348, "Member 'UCoreBaseLoadoutPartWidget::slotIndex' has a wrong offset!");

// Class DBDUIViewsCore.CoreAddonWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreAddonWidget final : public UCoreBaseLoadoutPartWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreAddonWidget">();
	}
	static class UCoreAddonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreAddonWidget>();
	}
};
static_assert(alignof(UCoreAddonWidget) == 0x000008, "Wrong alignment on UCoreAddonWidget");
static_assert(sizeof(UCoreAddonWidget) == 0x000358, "Wrong size on UCoreAddonWidget");

// Class DBDUIViewsCore.LoadoutTooltipWidget
// 0x00A0 (0x03D0 - 0x0330)
class ULoadoutTooltipWidget final : public UTooltipWidget
{
public:
	class FText                                   TagJoinSeparator;                                  // 0x0330(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TooltipTitle;                                      // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      ToolTipDescriptionRTB;                             // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SpecialEventTitle;                                 // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SpecialEventDescription;                           // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          UnlockInstructionText;                             // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RarityTypeSubtitle;                                // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ItemTypeSubtitle;                                  // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TagsTB;                                            // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              RarityBG;                                          // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              EventHeader;                                       // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              Separator;                                         // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              HeaderSeparator;                                   // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                SubtitleBox;                                       // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               TagsContainer;                                     // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UTexture2D*>                     LevelTextures;                                     // 0x03B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      ToolTipWarning;                                    // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Reset();
	void SetKillSwitchWarning(EDisabledItemOption disabledType, const class FText& DisabledMessage);
	void SetLoadoutTooltipLockedState();
	void SetTooltipData(const struct FLoadoutTooltipData& tooltipViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadoutTooltipWidget">();
	}
	static class ULoadoutTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadoutTooltipWidget>();
	}
};
static_assert(alignof(ULoadoutTooltipWidget) == 0x000008, "Wrong alignment on ULoadoutTooltipWidget");
static_assert(sizeof(ULoadoutTooltipWidget) == 0x0003D0, "Wrong size on ULoadoutTooltipWidget");
static_assert(offsetof(ULoadoutTooltipWidget, TagJoinSeparator) == 0x000330, "Member 'ULoadoutTooltipWidget::TagJoinSeparator' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, TooltipTitle) == 0x000348, "Member 'ULoadoutTooltipWidget::TooltipTitle' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, ToolTipDescriptionRTB) == 0x000350, "Member 'ULoadoutTooltipWidget::ToolTipDescriptionRTB' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, SpecialEventTitle) == 0x000358, "Member 'ULoadoutTooltipWidget::SpecialEventTitle' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, SpecialEventDescription) == 0x000360, "Member 'ULoadoutTooltipWidget::SpecialEventDescription' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, UnlockInstructionText) == 0x000368, "Member 'ULoadoutTooltipWidget::UnlockInstructionText' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, RarityTypeSubtitle) == 0x000370, "Member 'ULoadoutTooltipWidget::RarityTypeSubtitle' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, ItemTypeSubtitle) == 0x000378, "Member 'ULoadoutTooltipWidget::ItemTypeSubtitle' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, TagsTB) == 0x000380, "Member 'ULoadoutTooltipWidget::TagsTB' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, RarityBG) == 0x000388, "Member 'ULoadoutTooltipWidget::RarityBG' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, EventHeader) == 0x000390, "Member 'ULoadoutTooltipWidget::EventHeader' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, Separator) == 0x000398, "Member 'ULoadoutTooltipWidget::Separator' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, HeaderSeparator) == 0x0003A0, "Member 'ULoadoutTooltipWidget::HeaderSeparator' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, SubtitleBox) == 0x0003A8, "Member 'ULoadoutTooltipWidget::SubtitleBox' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, TagsContainer) == 0x0003B0, "Member 'ULoadoutTooltipWidget::TagsContainer' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, LevelTextures) == 0x0003B8, "Member 'ULoadoutTooltipWidget::LevelTextures' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, ToolTipWarning) == 0x0003C8, "Member 'ULoadoutTooltipWidget::ToolTipWarning' has a wrong offset!");

// Class DBDUIViewsCore.CoreAlertsWidget
// 0x0198 (0x04B8 - 0x0320)
class UCoreAlertsWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x18];                                     // 0x0320(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreRewardWrapperWidget>   RewardWidgetClass;                                 // 0x0338(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         container;                                         // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDImage*                              BackgroundImage;                                   // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreInputSwitcherWidget*               SkipButton;                                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   HorizontalAlignment;                               // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     VerticalAlignment;                                 // 0x0359(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35A[0x6];                                      // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          SoundEffectCurrency;                               // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundEffectCommon;                                 // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundEffectUncommon;                               // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundEffectRare;                                   // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundEffectVeryRare;                               // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundEffectUltraRare;                              // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundEffectAscended;                               // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundEffectLegendary;                              // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundEffectVisceral;                               // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundEffectCharacter;                              // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundEffectSpecialEvent;                           // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundEffectProgression;                            // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundEffectDisappear;                              // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundEffectProgressBarStart;                       // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundEffectProgressBarEnd;                         // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InputBlockerId;                                    // 0x03D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             _eventSkinDataTable;                               // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardSequencePlaying                        _sequencePlaying;                                  // 0x03F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F1[0x3];                                      // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _showRewardsPauseDuration;                         // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAlertsViewData                        _alertsViewData;                                   // 0x03F8(0x0070)(NativeAccessSpecifierPrivate)
	TArray<class UCoreRewardWrapperWidget*>       _alertRewardWidgets;                               // 0x0468(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_478[0x40];                                     // 0x0478(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddElementsToSequence(const struct FAlertsViewData& AlertsViewData);
	void BaseRewardsSequenceCompleted();
	void ChallengesCompletedSequenceCompleted();
	void ChallengesRewardsSequenceCompleted();
	void DisplayNextBaseRewardsSequence();
	void DisplayNextChallengesRewardsSequence();
	void DisplayNextCompletedChallengesSequence();
	void DisplayNextRiftRewardsSequence();
	void DisplayNextRiftTierUpSequence();
	void EndChallengesCompletedSequenceAnimation();
	void EndFadeOutRewardsSequenceAnimation();
	void EndInterSequenceAnimation();
	void EndRiftTierUpSequenceAnimation();
	void OnRewardHovered(class UCoreButtonWidget* buttonTarget);
	void OnRewardUnhovered(class UCoreButtonWidget* buttonTarget);
	void OnSkipTriggered();
	void PlayDisappearRewardSound();
	void PlayDisplayRewardSound(const struct FRewardWrapperViewData& RewardData);
	void PlayEndSequenceAnimation();
	void PlayFadeOutRewardsSequenceAnimation();
	void PlayInterSequenceAnimation();
	void PlayNextChallengesCompletedSequenceAnimation(const TArray<struct FCompletedChallengeViewData>& challengesCompleted);
	void PlayNextRewardsSequenceAnimation(const TArray<struct FRewardWrapperViewData>& Rewards, const class FString& eventFrameLabel);
	void PlayNextRiftTierUpSequenceAnimation(const TArray<struct FRiftTierUpViewData>& riftTierUpData, const class FString& eventFrameLabel, const class FText& riftTierUpText);
	void PlayProgressBarSoundEffect(const float Duration);
	void PlayRewardsDelaySequenceAnimation();
	void PlaySoundEffect(class UAkAudioEvent* soundFx);
	void RegisterRewardEvents(class UCoreRewardWidget* rewardWidget);
	void RiftRewardsSequenceCompleted();
	void RiftTierUpSequenceCompleted();
	void SetCanSkipSequence(const bool canSkipSequence);
	void SkipSequence();
	void SkipSequenceCompleted();
	void StartAlertRewards();

	void EndEndSequenceAnimation() const;
	TSoftObjectPtr<class UTexture2D> GetChallengeSetIcon(const class FString& eventFrameLabel) const;
	class UAkAudioEvent* GetDisplayRewardSound(const struct FRewardWrapperViewData& RewardData) const;
	bool IsChallengeCompleted(const struct FChallengeViewData& challenge) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreAlertsWidget">();
	}
	static class UCoreAlertsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreAlertsWidget>();
	}
};
static_assert(alignof(UCoreAlertsWidget) == 0x000008, "Wrong alignment on UCoreAlertsWidget");
static_assert(sizeof(UCoreAlertsWidget) == 0x0004B8, "Wrong size on UCoreAlertsWidget");
static_assert(offsetof(UCoreAlertsWidget, RewardWidgetClass) == 0x000338, "Member 'UCoreAlertsWidget::RewardWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, container) == 0x000340, "Member 'UCoreAlertsWidget::container' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, BackgroundImage) == 0x000348, "Member 'UCoreAlertsWidget::BackgroundImage' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SkipButton) == 0x000350, "Member 'UCoreAlertsWidget::SkipButton' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, HorizontalAlignment) == 0x000358, "Member 'UCoreAlertsWidget::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, VerticalAlignment) == 0x000359, "Member 'UCoreAlertsWidget::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectCurrency) == 0x000360, "Member 'UCoreAlertsWidget::SoundEffectCurrency' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectCommon) == 0x000368, "Member 'UCoreAlertsWidget::SoundEffectCommon' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectUncommon) == 0x000370, "Member 'UCoreAlertsWidget::SoundEffectUncommon' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectRare) == 0x000378, "Member 'UCoreAlertsWidget::SoundEffectRare' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectVeryRare) == 0x000380, "Member 'UCoreAlertsWidget::SoundEffectVeryRare' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectUltraRare) == 0x000388, "Member 'UCoreAlertsWidget::SoundEffectUltraRare' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectAscended) == 0x000390, "Member 'UCoreAlertsWidget::SoundEffectAscended' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectLegendary) == 0x000398, "Member 'UCoreAlertsWidget::SoundEffectLegendary' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectVisceral) == 0x0003A0, "Member 'UCoreAlertsWidget::SoundEffectVisceral' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectCharacter) == 0x0003A8, "Member 'UCoreAlertsWidget::SoundEffectCharacter' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectSpecialEvent) == 0x0003B0, "Member 'UCoreAlertsWidget::SoundEffectSpecialEvent' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectProgression) == 0x0003B8, "Member 'UCoreAlertsWidget::SoundEffectProgression' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectDisappear) == 0x0003C0, "Member 'UCoreAlertsWidget::SoundEffectDisappear' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectProgressBarStart) == 0x0003C8, "Member 'UCoreAlertsWidget::SoundEffectProgressBarStart' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, SoundEffectProgressBarEnd) == 0x0003D0, "Member 'UCoreAlertsWidget::SoundEffectProgressBarEnd' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, InputBlockerId) == 0x0003D8, "Member 'UCoreAlertsWidget::InputBlockerId' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, _eventSkinDataTable) == 0x0003E8, "Member 'UCoreAlertsWidget::_eventSkinDataTable' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, _sequencePlaying) == 0x0003F0, "Member 'UCoreAlertsWidget::_sequencePlaying' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, _showRewardsPauseDuration) == 0x0003F4, "Member 'UCoreAlertsWidget::_showRewardsPauseDuration' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, _alertsViewData) == 0x0003F8, "Member 'UCoreAlertsWidget::_alertsViewData' has a wrong offset!");
static_assert(offsetof(UCoreAlertsWidget, _alertRewardWidgets) == 0x000468, "Member 'UCoreAlertsWidget::_alertRewardWidgets' has a wrong offset!");

// Class DBDUIViewsCore.CoreAnimationPreviewWidget
// 0x0008 (0x0328 - 0x0320)
class UCoreAnimationPreviewWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreAnimationPreviewWidget">();
	}
	static class UCoreAnimationPreviewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreAnimationPreviewWidget>();
	}
};
static_assert(alignof(UCoreAnimationPreviewWidget) == 0x000008, "Wrong alignment on UCoreAnimationPreviewWidget");
static_assert(sizeof(UCoreAnimationPreviewWidget) == 0x000328, "Wrong size on UCoreAnimationPreviewWidget");

// Class DBDUIViewsCore.FriendSearchPopupWidget
// 0x0100 (0x0488 - 0x0388)
class UFriendSearchPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x80];                                     // 0x0388(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               FriendSearchWidget;                                // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          FriendSearchScrollBox;                             // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFriendItemWidget>          FriendItemWidgetClass;                             // 0x0418(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FString, class UFriendItemWidget*> _friendsMap;                                       // 0x0420(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TScriptInterface<class ISearchBarViewInterface> _searchBar;                                      // 0x0470(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSearchBarWidget*                   SearchBar;                                         // 0x0480(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnFriendClicked(class UCoreButtonWidget* buttonTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendSearchPopupWidget">();
	}
	static class UFriendSearchPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendSearchPopupWidget>();
	}
};
static_assert(alignof(UFriendSearchPopupWidget) == 0x000008, "Wrong alignment on UFriendSearchPopupWidget");
static_assert(sizeof(UFriendSearchPopupWidget) == 0x000488, "Wrong size on UFriendSearchPopupWidget");
static_assert(offsetof(UFriendSearchPopupWidget, FriendSearchWidget) == 0x000408, "Member 'UFriendSearchPopupWidget::FriendSearchWidget' has a wrong offset!");
static_assert(offsetof(UFriendSearchPopupWidget, FriendSearchScrollBox) == 0x000410, "Member 'UFriendSearchPopupWidget::FriendSearchScrollBox' has a wrong offset!");
static_assert(offsetof(UFriendSearchPopupWidget, FriendItemWidgetClass) == 0x000418, "Member 'UFriendSearchPopupWidget::FriendItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UFriendSearchPopupWidget, _friendsMap) == 0x000420, "Member 'UFriendSearchPopupWidget::_friendsMap' has a wrong offset!");
static_assert(offsetof(UFriendSearchPopupWidget, _searchBar) == 0x000470, "Member 'UFriendSearchPopupWidget::_searchBar' has a wrong offset!");
static_assert(offsetof(UFriendSearchPopupWidget, SearchBar) == 0x000480, "Member 'UFriendSearchPopupWidget::SearchBar' has a wrong offset!");

// Class DBDUIViewsCore.CoreSelectableButtonWidget
// 0x0028 (0x04D8 - 0x04B0)
class UCoreSelectableButtonWidget : public UCoreButtonWidget
{
public:
	TMulticastInlineDelegate<void(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected)> OnSelectedChangedDelegate; // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreSelectableButtonWidget* buttonTarget)> OnSelectedAgainDelegate; // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D0[0x8];                                      // 0x04D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSelectedChanged(bool IsSelected, bool withAnimation);
	void SetSelectable(bool IsSelectable);
	void SetSelected(bool IsSelected, bool performAction);
	void UpdateBackgroundSkin(class UMaterialInterface* skinMaterial);

	bool IsSelectable() const;
	bool IsSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSelectableButtonWidget">();
	}
	static class UCoreSelectableButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSelectableButtonWidget>();
	}
};
static_assert(alignof(UCoreSelectableButtonWidget) == 0x000008, "Wrong alignment on UCoreSelectableButtonWidget");
static_assert(sizeof(UCoreSelectableButtonWidget) == 0x0004D8, "Wrong size on UCoreSelectableButtonWidget");
static_assert(offsetof(UCoreSelectableButtonWidget, OnSelectedChangedDelegate) == 0x0004B0, "Member 'UCoreSelectableButtonWidget::OnSelectedChangedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreSelectableButtonWidget, OnSelectedAgainDelegate) == 0x0004C0, "Member 'UCoreSelectableButtonWidget::OnSelectedAgainDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget
// 0x0068 (0x0540 - 0x04D8)
class UCoreArchiveChallengeReminderSlotWidget final : public UCoreSelectableButtonWidget
{
public:
	class UCoreArchiveQuestNodeWidget*            Node;                                              // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              EmptySlotImage;                                    // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              InactiveBG;                                        // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ActiveBG;                                          // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              SmokeBackground;                                   // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ProgressBar;                                       // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              SelectorHighlight;                                 // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TitleTB;                                           // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SubtitleTB;                                        // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          InactiveTitleTB;                                   // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          InactiveSubtitleTB;                                // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPlayerRole                                   _slotRole;                                         // 0x0538(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hasActiveHoverEffect;                             // 0x0539(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_53A[0x6];                                      // 0x053A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearData();
	void Init(EPlayerRole Role);
	void InitVisualState();
	void SetData(const struct FArchiveChallengeReminderViewData& Data);
	void SetQuestNodeHoverEffect(bool IsHovered_0);
	void SetSlotSelectorState(bool isSelectorOpen);
	void SwapChallenge(const struct FArchiveChallengeReminderViewData& Data);
	void UpdateActiveState(bool IsActive, bool PlayAnimation_0);
	void UpdateProgressBar(float Progress);
	void UpdateVisualState(const struct FArchiveChallengeReminderViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveChallengeReminderSlotWidget">();
	}
	static class UCoreArchiveChallengeReminderSlotWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveChallengeReminderSlotWidget>();
	}
};
static_assert(alignof(UCoreArchiveChallengeReminderSlotWidget) == 0x000008, "Wrong alignment on UCoreArchiveChallengeReminderSlotWidget");
static_assert(sizeof(UCoreArchiveChallengeReminderSlotWidget) == 0x000540, "Wrong size on UCoreArchiveChallengeReminderSlotWidget");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, Node) == 0x0004D8, "Member 'UCoreArchiveChallengeReminderSlotWidget::Node' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, EmptySlotImage) == 0x0004E0, "Member 'UCoreArchiveChallengeReminderSlotWidget::EmptySlotImage' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, InactiveBG) == 0x0004E8, "Member 'UCoreArchiveChallengeReminderSlotWidget::InactiveBG' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, ActiveBG) == 0x0004F0, "Member 'UCoreArchiveChallengeReminderSlotWidget::ActiveBG' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, SmokeBackground) == 0x0004F8, "Member 'UCoreArchiveChallengeReminderSlotWidget::SmokeBackground' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, ProgressBar) == 0x000500, "Member 'UCoreArchiveChallengeReminderSlotWidget::ProgressBar' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, SelectorHighlight) == 0x000508, "Member 'UCoreArchiveChallengeReminderSlotWidget::SelectorHighlight' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, TitleTB) == 0x000510, "Member 'UCoreArchiveChallengeReminderSlotWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, SubtitleTB) == 0x000518, "Member 'UCoreArchiveChallengeReminderSlotWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, InactiveTitleTB) == 0x000520, "Member 'UCoreArchiveChallengeReminderSlotWidget::InactiveTitleTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, InactiveSubtitleTB) == 0x000528, "Member 'UCoreArchiveChallengeReminderSlotWidget::InactiveSubtitleTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, OnHoverBorder) == 0x000530, "Member 'UCoreArchiveChallengeReminderSlotWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, _slotRole) == 0x000538, "Member 'UCoreArchiveChallengeReminderSlotWidget::_slotRole' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, _hasActiveHoverEffect) == 0x000539, "Member 'UCoreArchiveChallengeReminderSlotWidget::_hasActiveHoverEffect' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveCompendiumButtonWidget
// 0x0090 (0x0540 - 0x04B0)
class UCoreArchiveCompendiumButtonWidget final : public UCoreButtonWidget
{
public:
	ETooltipHorizontalAlignment                   HorizontalAlignment;                               // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     VerticalAlignment;                                 // 0x04B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B2[0x6];                                      // 0x04B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDImage*                              TomeProgressStyleTexture;                          // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          VolumeIndex;                                       // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCompendiumButtonData                  _compendiumButtonData;                             // 0x04C8(0x0078)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	class FString GetTomeId();
	void OnButtonHovered();
	void OnButtonUnhovered();
	void ResetVisuals();
	void SetButtonData(const struct FCompendiumButtonData& buttonData);
	void SetButtonVisual(const struct FCompendiumButtonData& buttonData);
	void SetGhostStory(bool isGhostStory);
	void SetLevelProgressionVisual(int32 buttonLevel, EArchivesStoryLevelStatus levelStatus);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveCompendiumButtonWidget">();
	}
	static class UCoreArchiveCompendiumButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveCompendiumButtonWidget>();
	}
};
static_assert(alignof(UCoreArchiveCompendiumButtonWidget) == 0x000008, "Wrong alignment on UCoreArchiveCompendiumButtonWidget");
static_assert(sizeof(UCoreArchiveCompendiumButtonWidget) == 0x000540, "Wrong size on UCoreArchiveCompendiumButtonWidget");
static_assert(offsetof(UCoreArchiveCompendiumButtonWidget, HorizontalAlignment) == 0x0004B0, "Member 'UCoreArchiveCompendiumButtonWidget::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumButtonWidget, VerticalAlignment) == 0x0004B1, "Member 'UCoreArchiveCompendiumButtonWidget::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumButtonWidget, TomeProgressStyleTexture) == 0x0004B8, "Member 'UCoreArchiveCompendiumButtonWidget::TomeProgressStyleTexture' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumButtonWidget, VolumeIndex) == 0x0004C0, "Member 'UCoreArchiveCompendiumButtonWidget::VolumeIndex' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumButtonWidget, _compendiumButtonData) == 0x0004C8, "Member 'UCoreArchiveCompendiumButtonWidget::_compendiumButtonData' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveCompendiumWidget
// 0x0058 (0x0398 - 0x0340)
class UCoreArchiveCompendiumWidget final : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreArchiveCompendiumButtonWidget> _compendiumButtonWidgetClass;              // 0x0348(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FString& tomeId)> _onCompendiumClickedDelegate;        // 0x0350(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UGridPanel*                             CompendiumGrid;                                    // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          CompendiumScroll;                                  // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreArchiveCompendiumButtonWidget*> _compendiumButtonWidgetPool;                   // 0x0370(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreArchiveCompendiumButtonWidget*> _compendiumButtonWidgetList;                   // 0x0380(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	int32                                         _columnsCount;                                     // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCoreArchiveCompendiumButtonWidget* CreateAndAddButtonToGrid(int32 Index_0);
	void CreateGhostStories(const int32 currentStoryNum);
	void OnPastStoryClicked(class UCoreButtonWidget* Button);
	void Reset();
	void ResetScroll();
	void SetGridSlot(class UGridSlot* GridSlot, int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveCompendiumWidget">();
	}
	static class UCoreArchiveCompendiumWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveCompendiumWidget>();
	}
};
static_assert(alignof(UCoreArchiveCompendiumWidget) == 0x000008, "Wrong alignment on UCoreArchiveCompendiumWidget");
static_assert(sizeof(UCoreArchiveCompendiumWidget) == 0x000398, "Wrong size on UCoreArchiveCompendiumWidget");
static_assert(offsetof(UCoreArchiveCompendiumWidget, _compendiumButtonWidgetClass) == 0x000348, "Member 'UCoreArchiveCompendiumWidget::_compendiumButtonWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumWidget, _onCompendiumClickedDelegate) == 0x000350, "Member 'UCoreArchiveCompendiumWidget::_onCompendiumClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumWidget, CompendiumGrid) == 0x000360, "Member 'UCoreArchiveCompendiumWidget::CompendiumGrid' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumWidget, CompendiumScroll) == 0x000368, "Member 'UCoreArchiveCompendiumWidget::CompendiumScroll' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumWidget, _compendiumButtonWidgetPool) == 0x000370, "Member 'UCoreArchiveCompendiumWidget::_compendiumButtonWidgetPool' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumWidget, _compendiumButtonWidgetList) == 0x000380, "Member 'UCoreArchiveCompendiumWidget::_compendiumButtonWidgetList' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumWidget, _columnsCount) == 0x000390, "Member 'UCoreArchiveCompendiumWidget::_columnsCount' has a wrong offset!");

// Class DBDUIViewsCore.LabelTooltipWidget
// 0x0008 (0x0338 - 0x0330)
class ULabelTooltipWidget final : public UTooltipWidget
{
public:
	class UDBDRichTextBlock*                      LabelRTB;                                          // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Reset();
	void SetTooltipData(const class FText& labelText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LabelTooltipWidget">();
	}
	static class ULabelTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULabelTooltipWidget>();
	}
};
static_assert(alignof(ULabelTooltipWidget) == 0x000008, "Wrong alignment on ULabelTooltipWidget");
static_assert(sizeof(ULabelTooltipWidget) == 0x000338, "Wrong size on ULabelTooltipWidget");
static_assert(offsetof(ULabelTooltipWidget, LabelRTB) == 0x000330, "Member 'ULabelTooltipWidget::LabelRTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveJournalImageViewerWidget
// 0x0058 (0x0398 - 0x0340)
class UCoreArchiveJournalImageViewerWidget final : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreInputSwitcherWidget*               TextVisibilityInputSwitcher;                       // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              _backActionDelegate;                               // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _imageViewerTextVisibilityActionDelegate;          // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _imageViewerVoiceOverPlayedDelegate;               // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const bool autoplayVoiceOver)> _imageViewerVoiceOverAutoplayDelegate; // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	void OnTextVisibilityChanged();
	void OnVoiceOverAutoPlay(bool autoplay);
	void OnVoiceOverPlay();
	void SetData(const struct FArchivesVignetteEntryViewData& Data, const bool hasTitle, const bool hasDescription);
	void SetScrollData(const class FText& journalEntryScrollPromptText);
	void SetTextVisibilityInputText(const class FText& displayText, const class FText& hideText);
	void SetVoiceOverText(const class FText& playVoiceOverText, const class FText& stopVoiceOverText, const class FText& autoplayVoiceOverText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveJournalImageViewerWidget">();
	}
	static class UCoreArchiveJournalImageViewerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveJournalImageViewerWidget>();
	}
};
static_assert(alignof(UCoreArchiveJournalImageViewerWidget) == 0x000008, "Wrong alignment on UCoreArchiveJournalImageViewerWidget");
static_assert(sizeof(UCoreArchiveJournalImageViewerWidget) == 0x000398, "Wrong size on UCoreArchiveJournalImageViewerWidget");
static_assert(offsetof(UCoreArchiveJournalImageViewerWidget, BackInputSwitcher) == 0x000348, "Member 'UCoreArchiveJournalImageViewerWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalImageViewerWidget, TextVisibilityInputSwitcher) == 0x000350, "Member 'UCoreArchiveJournalImageViewerWidget::TextVisibilityInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalImageViewerWidget, _backActionDelegate) == 0x000358, "Member 'UCoreArchiveJournalImageViewerWidget::_backActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalImageViewerWidget, _imageViewerTextVisibilityActionDelegate) == 0x000368, "Member 'UCoreArchiveJournalImageViewerWidget::_imageViewerTextVisibilityActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalImageViewerWidget, _imageViewerVoiceOverPlayedDelegate) == 0x000378, "Member 'UCoreArchiveJournalImageViewerWidget::_imageViewerVoiceOverPlayedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalImageViewerWidget, _imageViewerVoiceOverAutoplayDelegate) == 0x000388, "Member 'UCoreArchiveJournalImageViewerWidget::_imageViewerVoiceOverAutoplayDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveJournalWidget
// 0x00F8 (0x0438 - 0x0340)
class UCoreArchiveJournalWidget final : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreArchiveVignetteButtonContainerWidget* VignetteButtonContainer;                        // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreArchiveVignetteEntryContainerWidget* VignetteEntryContainer;                          // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreArchiveVignetteCinematicContainerWidget* VignetteCinematicsContainer;                 // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               LeftArrowInputSwitcher;                            // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RightArrowInputSwitcher;                           // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AreInputsEnabled;                                  // 0x0370(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              DebugRewardImage;                                  // 0x0378(0x0038)(Edit, BlueprintVisible, Transient, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         RewardImageMaxDescriptionLength;                   // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& vignetteId)> _vignetteSelectedDelegate;       // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const int32 vignetteEntryIndex)> _vignetteEntrySelectedDelegate;   // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const int32 cinematicId)> _vignetteCinematicPlayedDelegate;        // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const int32 vignetteEntry)> _vignetteVoiceOverPlayedDelegate;      // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const bool autoplayVoiceOver, const int32 vignetteEntry)> _vignetteVoiceOverAutoplayDelegate; // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _vignetteShowImageViewerDelegate;                  // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_418[0x20];                                     // 0x0418(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeArrow(class UCoreInputSwitcherWidget* arrowWidget, bool Active);
	void OnFirstJournalEntryUnlocked();
	void OnJournalEntriesUnlocked();
	void OnLeftArrowTriggered();
	void OnRewardImageLoaded(TSoftObjectPtr<class UTexture2D> LoadedTexture, bool Success, const class FText& TitleText, const class FText& descriptionText, float textureOffset);
	void OnRightArrowTriggered();
	void OnVignetteButtonSelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnVignetteCinematicSelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnVignetteEntrySelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnVoiceOverAutoPlay(bool autoplay);
	void OnVoiceOverPlay();
	void SetArrowButtons();
	void SetBottomFogOffset(bool HasAudio);
	void SetEntryImage(const class FText& TitleText, const class FText& descriptionText, const TSoftObjectPtr<class UTexture2D>& RewardImage, float textureOffset);
	void SetEntryText(const class FText& TitleText, const class FText& descriptionText);
	void SetTopFogOffset(bool hasTitle, bool hasDescription);
	void SetVignetteText(const class FText& TitleText, const class FText& SubtitleText);
	void SetVoiceOverButtonsVisibility(const bool IsVisible_0);
	void SetVoiceOverText(const class FText& playVoiceOverText, const class FText& stopVoiceOverText, const class FText& autoplayVoiceOverText);
	void ShowImageViewer();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveJournalWidget">();
	}
	static class UCoreArchiveJournalWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveJournalWidget>();
	}
};
static_assert(alignof(UCoreArchiveJournalWidget) == 0x000008, "Wrong alignment on UCoreArchiveJournalWidget");
static_assert(sizeof(UCoreArchiveJournalWidget) == 0x000438, "Wrong size on UCoreArchiveJournalWidget");
static_assert(offsetof(UCoreArchiveJournalWidget, VignetteButtonContainer) == 0x000348, "Member 'UCoreArchiveJournalWidget::VignetteButtonContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, VignetteEntryContainer) == 0x000350, "Member 'UCoreArchiveJournalWidget::VignetteEntryContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, VignetteCinematicsContainer) == 0x000358, "Member 'UCoreArchiveJournalWidget::VignetteCinematicsContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, LeftArrowInputSwitcher) == 0x000360, "Member 'UCoreArchiveJournalWidget::LeftArrowInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, RightArrowInputSwitcher) == 0x000368, "Member 'UCoreArchiveJournalWidget::RightArrowInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, AreInputsEnabled) == 0x000370, "Member 'UCoreArchiveJournalWidget::AreInputsEnabled' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, DebugRewardImage) == 0x000378, "Member 'UCoreArchiveJournalWidget::DebugRewardImage' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, RewardImageMaxDescriptionLength) == 0x0003B0, "Member 'UCoreArchiveJournalWidget::RewardImageMaxDescriptionLength' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, _vignetteSelectedDelegate) == 0x0003B8, "Member 'UCoreArchiveJournalWidget::_vignetteSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, _vignetteEntrySelectedDelegate) == 0x0003C8, "Member 'UCoreArchiveJournalWidget::_vignetteEntrySelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, _vignetteCinematicPlayedDelegate) == 0x0003D8, "Member 'UCoreArchiveJournalWidget::_vignetteCinematicPlayedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, _vignetteVoiceOverPlayedDelegate) == 0x0003E8, "Member 'UCoreArchiveJournalWidget::_vignetteVoiceOverPlayedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, _vignetteVoiceOverAutoplayDelegate) == 0x0003F8, "Member 'UCoreArchiveJournalWidget::_vignetteVoiceOverAutoplayDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, _vignetteShowImageViewerDelegate) == 0x000408, "Member 'UCoreArchiveJournalWidget::_vignetteShowImageViewerDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveLevelProgressionWidget
// 0x0068 (0x0388 - 0x0320)
class UCoreArchiveLevelProgressionWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 Level)>   _levelSelectedDelegate;                            // 0x0328(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _levelAnimationDoneDelegate;                       // 0x0338(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _levelRewardAnimationDoneDelegate;                 // 0x0348(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _levelUnlockedAnimationDoneDelegate;               // 0x0358(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UCoreStoryLevelsSelectorWidget*         StoryLevelsSelector;                               // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LevelNumberTF;                                     // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LevelCompletionTF;                                 // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               SideContent;                                       // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnStoryLevelSelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnTomeLevelUnlockedAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveLevelProgressionWidget">();
	}
	static class UCoreArchiveLevelProgressionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveLevelProgressionWidget>();
	}
};
static_assert(alignof(UCoreArchiveLevelProgressionWidget) == 0x000008, "Wrong alignment on UCoreArchiveLevelProgressionWidget");
static_assert(sizeof(UCoreArchiveLevelProgressionWidget) == 0x000388, "Wrong size on UCoreArchiveLevelProgressionWidget");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, _levelSelectedDelegate) == 0x000328, "Member 'UCoreArchiveLevelProgressionWidget::_levelSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, _levelAnimationDoneDelegate) == 0x000338, "Member 'UCoreArchiveLevelProgressionWidget::_levelAnimationDoneDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, _levelRewardAnimationDoneDelegate) == 0x000348, "Member 'UCoreArchiveLevelProgressionWidget::_levelRewardAnimationDoneDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, _levelUnlockedAnimationDoneDelegate) == 0x000358, "Member 'UCoreArchiveLevelProgressionWidget::_levelUnlockedAnimationDoneDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, StoryLevelsSelector) == 0x000368, "Member 'UCoreArchiveLevelProgressionWidget::StoryLevelsSelector' has a wrong offset!");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, LevelNumberTF) == 0x000370, "Member 'UCoreArchiveLevelProgressionWidget::LevelNumberTF' has a wrong offset!");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, LevelCompletionTF) == 0x000378, "Member 'UCoreArchiveLevelProgressionWidget::LevelCompletionTF' has a wrong offset!");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, SideContent) == 0x000380, "Member 'UCoreArchiveLevelProgressionWidget::SideContent' has a wrong offset!");

// Class DBDUIViewsCore.CorePrestigeTooltipWidget
// 0x0010 (0x0340 - 0x0330)
class UCorePrestigeTooltipWidget final : public UTooltipWidget
{
public:
	class UDBDTextBlock*                          TitleTB;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      DescriptionRTB;                                    // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetTooltipData(const struct FPrestigeViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePrestigeTooltipWidget">();
	}
	static class UCorePrestigeTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePrestigeTooltipWidget>();
	}
};
static_assert(alignof(UCorePrestigeTooltipWidget) == 0x000008, "Wrong alignment on UCorePrestigeTooltipWidget");
static_assert(sizeof(UCorePrestigeTooltipWidget) == 0x000340, "Wrong size on UCorePrestigeTooltipWidget");
static_assert(offsetof(UCorePrestigeTooltipWidget, TitleTB) == 0x000330, "Member 'UCorePrestigeTooltipWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCorePrestigeTooltipWidget, DescriptionRTB) == 0x000338, "Member 'UCorePrestigeTooltipWidget::DescriptionRTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveObjectiveWidget
// 0x0030 (0x0350 - 0x0320)
class UCoreArchiveObjectiveWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDRichTextBlock*                      ObjectiveDescriptionRTB;                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ProgressBar;                                       // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CurrentProgressTB;                                 // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          MaxProgressTB;                                     // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         BonusCommunityProgressContainer;                   // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          BonusCommunityProgressTB;                          // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetData(const struct FArchiveNodeObjectiveViewData& objectiveData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveObjectiveWidget">();
	}
	static class UCoreArchiveObjectiveWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveObjectiveWidget>();
	}
};
static_assert(alignof(UCoreArchiveObjectiveWidget) == 0x000008, "Wrong alignment on UCoreArchiveObjectiveWidget");
static_assert(sizeof(UCoreArchiveObjectiveWidget) == 0x000350, "Wrong size on UCoreArchiveObjectiveWidget");
static_assert(offsetof(UCoreArchiveObjectiveWidget, ObjectiveDescriptionRTB) == 0x000320, "Member 'UCoreArchiveObjectiveWidget::ObjectiveDescriptionRTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveObjectiveWidget, ProgressBar) == 0x000328, "Member 'UCoreArchiveObjectiveWidget::ProgressBar' has a wrong offset!");
static_assert(offsetof(UCoreArchiveObjectiveWidget, CurrentProgressTB) == 0x000330, "Member 'UCoreArchiveObjectiveWidget::CurrentProgressTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveObjectiveWidget, MaxProgressTB) == 0x000338, "Member 'UCoreArchiveObjectiveWidget::MaxProgressTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveObjectiveWidget, BonusCommunityProgressContainer) == 0x000340, "Member 'UCoreArchiveObjectiveWidget::BonusCommunityProgressContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveObjectiveWidget, BonusCommunityProgressTB) == 0x000348, "Member 'UCoreArchiveObjectiveWidget::BonusCommunityProgressTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchivePassBannerWidget
// 0x0178 (0x0628 - 0x04B0)
class UCoreArchivePassBannerWidget final : public UCoreButtonWidget
{
public:
	class UDBDTextBlock*                          TitleTB;                                           // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SubtitleTB;                                        // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreTimerFlagWidget*                   TimerFlag;                                         // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FStoreArchivePassViewData              _viewData;                                         // 0x04D0(0x0158)(Transient, NativeAccessSpecifierPrivate)

public:
	void SetData(const struct FStoreArchivePassViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchivePassBannerWidget">();
	}
	static class UCoreArchivePassBannerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchivePassBannerWidget>();
	}
};
static_assert(alignof(UCoreArchivePassBannerWidget) == 0x000008, "Wrong alignment on UCoreArchivePassBannerWidget");
static_assert(sizeof(UCoreArchivePassBannerWidget) == 0x000628, "Wrong size on UCoreArchivePassBannerWidget");
static_assert(offsetof(UCoreArchivePassBannerWidget, TitleTB) == 0x0004B0, "Member 'UCoreArchivePassBannerWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassBannerWidget, SubtitleTB) == 0x0004B8, "Member 'UCoreArchivePassBannerWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassBannerWidget, OnHoverBorder) == 0x0004C0, "Member 'UCoreArchivePassBannerWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassBannerWidget, TimerFlag) == 0x0004C8, "Member 'UCoreArchivePassBannerWidget::TimerFlag' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassBannerWidget, _viewData) == 0x0004D0, "Member 'UCoreArchivePassBannerWidget::_viewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreLobbyLoadoutWidget
// 0x0028 (0x0348 - 0x0320)
class UCoreLobbyLoadoutWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreLoadoutWidget*                     Loadout;                                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePresetContainerWidget*             PresetContainer;                                   // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_338[0x10];                                     // 0x0338(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPresetClicked(const int32 SelectedPresetId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLobbyLoadoutWidget">();
	}
	static class UCoreLobbyLoadoutWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLobbyLoadoutWidget>();
	}
};
static_assert(alignof(UCoreLobbyLoadoutWidget) == 0x000008, "Wrong alignment on UCoreLobbyLoadoutWidget");
static_assert(sizeof(UCoreLobbyLoadoutWidget) == 0x000348, "Wrong size on UCoreLobbyLoadoutWidget");
static_assert(offsetof(UCoreLobbyLoadoutWidget, Loadout) == 0x000328, "Member 'UCoreLobbyLoadoutWidget::Loadout' has a wrong offset!");
static_assert(offsetof(UCoreLobbyLoadoutWidget, PresetContainer) == 0x000330, "Member 'UCoreLobbyLoadoutWidget::PresetContainer' has a wrong offset!");

// Class DBDUIViewsCore.CoreQuickTimeEventWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreQuickTimeEventWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreQuickTimeEventWidget">();
	}
	static class UCoreQuickTimeEventWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreQuickTimeEventWidget>();
	}
};
static_assert(alignof(UCoreQuickTimeEventWidget) == 0x000008, "Wrong alignment on UCoreQuickTimeEventWidget");
static_assert(sizeof(UCoreQuickTimeEventWidget) == 0x000358, "Wrong size on UCoreQuickTimeEventWidget");

// Class DBDUIViewsCore.CoreArchivePassPurchasePopupWidget
// 0x0078 (0x0400 - 0x0388)
class UCoreArchivePassPurchasePopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          UnlockTB;                                          // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreCurrencyInputSwitcherWidget*       UnlockButton;                                      // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          UnlockPackTB;                                      // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          UnlockPackDescriptionTB;                           // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreCurrencyInputSwitcherWidget*       UnlockPackButton;                                  // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          AvailableTB;                                       // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          DateTB;                                            // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              BackgroundKeyArtIMG;                               // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         RewardsContainer;                                  // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _rewardSpacing;                                    // 0x03D8(0x0004)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreRewardWrapperWidget>   RewardWidgetClass;                                 // 0x03E0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UArchivePassPurchasePopupViewData*      _viewData;                                         // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F0[0x10];                                     // 0x03F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPurchaseBundleClicked(ECurrencyType currencyType);
	void OnPurchaseClicked(ECurrencyType currencyType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchivePassPurchasePopupWidget">();
	}
	static class UCoreArchivePassPurchasePopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchivePassPurchasePopupWidget>();
	}
};
static_assert(alignof(UCoreArchivePassPurchasePopupWidget) == 0x000008, "Wrong alignment on UCoreArchivePassPurchasePopupWidget");
static_assert(sizeof(UCoreArchivePassPurchasePopupWidget) == 0x000400, "Wrong size on UCoreArchivePassPurchasePopupWidget");
static_assert(offsetof(UCoreArchivePassPurchasePopupWidget, UnlockTB) == 0x000390, "Member 'UCoreArchivePassPurchasePopupWidget::UnlockTB' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassPurchasePopupWidget, UnlockButton) == 0x000398, "Member 'UCoreArchivePassPurchasePopupWidget::UnlockButton' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassPurchasePopupWidget, UnlockPackTB) == 0x0003A0, "Member 'UCoreArchivePassPurchasePopupWidget::UnlockPackTB' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassPurchasePopupWidget, UnlockPackDescriptionTB) == 0x0003A8, "Member 'UCoreArchivePassPurchasePopupWidget::UnlockPackDescriptionTB' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassPurchasePopupWidget, UnlockPackButton) == 0x0003B0, "Member 'UCoreArchivePassPurchasePopupWidget::UnlockPackButton' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassPurchasePopupWidget, AvailableTB) == 0x0003B8, "Member 'UCoreArchivePassPurchasePopupWidget::AvailableTB' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassPurchasePopupWidget, DateTB) == 0x0003C0, "Member 'UCoreArchivePassPurchasePopupWidget::DateTB' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassPurchasePopupWidget, BackgroundKeyArtIMG) == 0x0003C8, "Member 'UCoreArchivePassPurchasePopupWidget::BackgroundKeyArtIMG' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassPurchasePopupWidget, RewardsContainer) == 0x0003D0, "Member 'UCoreArchivePassPurchasePopupWidget::RewardsContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassPurchasePopupWidget, _rewardSpacing) == 0x0003D8, "Member 'UCoreArchivePassPurchasePopupWidget::_rewardSpacing' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassPurchasePopupWidget, RewardWidgetClass) == 0x0003E0, "Member 'UCoreArchivePassPurchasePopupWidget::RewardWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreArchivePassPurchasePopupWidget, _viewData) == 0x0003E8, "Member 'UCoreArchivePassPurchasePopupWidget::_viewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveQuestMapWidget
// 0x0180 (0x04C0 - 0x0340)
class UCoreArchiveQuestMapWidget final : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           ChallengesContainer;                               // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreArchiveQuestNodeWidget> ArchiveQuestNodeWidgetClass;                      // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreArchiveQuestPathWidget> ArchiveQuestPathWidgetClass;                      // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxDisplayedNodes;                                 // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxDisplayedPaths;                                 // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         QuestMapRevealDuration;                            // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NodeRevealDuration;                                // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PathRevealDuration;                                // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   NodeRevealEasingType;                              // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   PathRevealEasingType;                              // 0x0375(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_376[0x2];                                      // 0x0376(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          QuestMapGenerationSound;                           // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FArchiveNodeGraphViewData>      _nodeGraphDataList;                                // 0x0380(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FArchiveMapPathViewData>        _pathDataList;                                     // 0x0390(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _questMapCreatedDelegate;                          // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EPlayerRole Role)> _questNodeHoveredDelegate;                      // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EPlayerRole Role)> _questNodeUnhoveredDelegate;                    // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FName& NodeId, EPlayerRole Role, const struct FVector2D& Position)> _questNodeSelectedDelegate; // 0x03D0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMap<class FName, class UCoreArchiveQuestNodeWidget*> _nodeDictionary;                           // 0x03E0(0x0050)(ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class UCoreArchiveQuestPathWidget*> _pathDictionary;                           // 0x0430(0x0050)(ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UCoreArchiveQuestNodeWidget*>    _nodeWidgetPool;                                   // 0x0480(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreArchiveQuestPathWidget*>    _pathWidgetPool;                                   // 0x0490(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A0[0x20];                                     // 0x04A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindToNode(class UCoreArchiveQuestNodeWidget* Node);
	void BindToPath(class UCoreArchiveQuestPathWidget* Path);
	void OnNodeClicked(class UCoreButtonWidget* buttonTarget);
	void OnNodeHovered(class UCoreButtonWidget* buttonTarget);
	void OnNodesRevealCompleted();
	void OnNodeUnhovered(class UCoreButtonWidget* buttonTarget);
	void SetupNode(const struct FArchiveNodeGraphViewData& NodeData);
	void SetupPath(const struct FArchiveMapPathViewData& PathData);
	void UnbindFromNode(class UCoreArchiveQuestNodeWidget* Node);
	void UnbindFromPath(class UCoreArchiveQuestPathWidget* Path);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveQuestMapWidget">();
	}
	static class UCoreArchiveQuestMapWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveQuestMapWidget>();
	}
};
static_assert(alignof(UCoreArchiveQuestMapWidget) == 0x000008, "Wrong alignment on UCoreArchiveQuestMapWidget");
static_assert(sizeof(UCoreArchiveQuestMapWidget) == 0x0004C0, "Wrong size on UCoreArchiveQuestMapWidget");
static_assert(offsetof(UCoreArchiveQuestMapWidget, ChallengesContainer) == 0x000348, "Member 'UCoreArchiveQuestMapWidget::ChallengesContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, ArchiveQuestNodeWidgetClass) == 0x000350, "Member 'UCoreArchiveQuestMapWidget::ArchiveQuestNodeWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, ArchiveQuestPathWidgetClass) == 0x000358, "Member 'UCoreArchiveQuestMapWidget::ArchiveQuestPathWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, MaxDisplayedNodes) == 0x000360, "Member 'UCoreArchiveQuestMapWidget::MaxDisplayedNodes' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, MaxDisplayedPaths) == 0x000364, "Member 'UCoreArchiveQuestMapWidget::MaxDisplayedPaths' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, QuestMapRevealDuration) == 0x000368, "Member 'UCoreArchiveQuestMapWidget::QuestMapRevealDuration' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, NodeRevealDuration) == 0x00036C, "Member 'UCoreArchiveQuestMapWidget::NodeRevealDuration' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, PathRevealDuration) == 0x000370, "Member 'UCoreArchiveQuestMapWidget::PathRevealDuration' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, NodeRevealEasingType) == 0x000374, "Member 'UCoreArchiveQuestMapWidget::NodeRevealEasingType' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, PathRevealEasingType) == 0x000375, "Member 'UCoreArchiveQuestMapWidget::PathRevealEasingType' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, QuestMapGenerationSound) == 0x000378, "Member 'UCoreArchiveQuestMapWidget::QuestMapGenerationSound' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _nodeGraphDataList) == 0x000380, "Member 'UCoreArchiveQuestMapWidget::_nodeGraphDataList' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _pathDataList) == 0x000390, "Member 'UCoreArchiveQuestMapWidget::_pathDataList' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _questMapCreatedDelegate) == 0x0003A0, "Member 'UCoreArchiveQuestMapWidget::_questMapCreatedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _questNodeHoveredDelegate) == 0x0003B0, "Member 'UCoreArchiveQuestMapWidget::_questNodeHoveredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _questNodeUnhoveredDelegate) == 0x0003C0, "Member 'UCoreArchiveQuestMapWidget::_questNodeUnhoveredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _questNodeSelectedDelegate) == 0x0003D0, "Member 'UCoreArchiveQuestMapWidget::_questNodeSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _nodeDictionary) == 0x0003E0, "Member 'UCoreArchiveQuestMapWidget::_nodeDictionary' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _pathDictionary) == 0x000430, "Member 'UCoreArchiveQuestMapWidget::_pathDictionary' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _nodeWidgetPool) == 0x000480, "Member 'UCoreArchiveQuestMapWidget::_nodeWidgetPool' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _pathWidgetPool) == 0x000490, "Member 'UCoreArchiveQuestMapWidget::_pathWidgetPool' has a wrong offset!");

// Class DBDUIViewsCore.CoreButtonSelector
// 0x0070 (0x0390 - 0x0320)
class UCoreButtonSelector : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void(class UCoreButtonWidget* buttonTarget)> OnClickedDelegate;         // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreSelectableButtonWidget* selectedButton)> OnSelectedChangedDelegate; // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreSelectableButtonWidget* selectedButton)> OnSelectedDelegate; // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreSelectableButtonWidget* selectedButton)> OnSelectedAgainDelegate; // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreSelectableButtonWidget* unselectedButton)> OnUnselectedDelegate; // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UCoreSelectableButtonWidget*>    _buttons;                                          // 0x0370(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_380[0x10];                                     // 0x0380(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonClicked(class UCoreButtonWidget* Button);
	void OnButtonSelectedAgain(class UCoreSelectableButtonWidget* selectedButton);
	void OnButtonSelectedChanged(class UCoreSelectableButtonWidget* selectedButton, bool IsSelected);
	bool Select(class UCoreSelectableButtonWidget* buttonToSelect, bool performAction);
	bool SelectAtIndex(int32 Index_0, bool performAction);
	bool SelectNext();
	bool SelectPrevious();
	void SetAllEnabled(bool Enabled);
	void SetInputsEnabled(bool Enabled);
	void UnselectCurrent(bool performAction);

	bool GetInputsEnabled() const;
	bool HasSelection() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreButtonSelector">();
	}
	static class UCoreButtonSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreButtonSelector>();
	}
};
static_assert(alignof(UCoreButtonSelector) == 0x000008, "Wrong alignment on UCoreButtonSelector");
static_assert(sizeof(UCoreButtonSelector) == 0x000390, "Wrong size on UCoreButtonSelector");
static_assert(offsetof(UCoreButtonSelector, OnClickedDelegate) == 0x000320, "Member 'UCoreButtonSelector::OnClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonSelector, OnSelectedChangedDelegate) == 0x000330, "Member 'UCoreButtonSelector::OnSelectedChangedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonSelector, OnSelectedDelegate) == 0x000340, "Member 'UCoreButtonSelector::OnSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonSelector, OnSelectedAgainDelegate) == 0x000350, "Member 'UCoreButtonSelector::OnSelectedAgainDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonSelector, OnUnselectedDelegate) == 0x000360, "Member 'UCoreButtonSelector::OnUnselectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonSelector, _buttons) == 0x000370, "Member 'UCoreButtonSelector::_buttons' has a wrong offset!");

// Class DBDUIViewsCore.CorePresetContainerWidget
// 0x0050 (0x03E0 - 0x0390)
class UCorePresetContainerWidget final : public UCoreButtonSelector
{
public:
	TMulticastInlineDelegate<void(int32 selectedPreset)> OnSelectedPresetDelegate;                   // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         PresetsContainer;                                  // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCorePresetWidget>          _presetItemWidgetClass;                            // 0x03A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedPresetsCount;                       // 0x03B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _presetsPadding;                                   // 0x03B4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCorePresetWidget*>              _presetWidgets;                                    // 0x03C8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UCorePreConstructableList*              _presetList;                                       // 0x03D8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BroadcastSelectedPreset(class UCoreSelectableButtonWidget* selectedButton);
	void SetPresetData(const TArray<int32>& presetData, const int32 selectedPreset);

	class UCorePresetWidget* GetSelectedPreset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePresetContainerWidget">();
	}
	static class UCorePresetContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePresetContainerWidget>();
	}
};
static_assert(alignof(UCorePresetContainerWidget) == 0x000008, "Wrong alignment on UCorePresetContainerWidget");
static_assert(sizeof(UCorePresetContainerWidget) == 0x0003E0, "Wrong size on UCorePresetContainerWidget");
static_assert(offsetof(UCorePresetContainerWidget, OnSelectedPresetDelegate) == 0x000390, "Member 'UCorePresetContainerWidget::OnSelectedPresetDelegate' has a wrong offset!");
static_assert(offsetof(UCorePresetContainerWidget, PresetsContainer) == 0x0003A0, "Member 'UCorePresetContainerWidget::PresetsContainer' has a wrong offset!");
static_assert(offsetof(UCorePresetContainerWidget, _presetItemWidgetClass) == 0x0003A8, "Member 'UCorePresetContainerWidget::_presetItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCorePresetContainerWidget, _preConstructedPresetsCount) == 0x0003B0, "Member 'UCorePresetContainerWidget::_preConstructedPresetsCount' has a wrong offset!");
static_assert(offsetof(UCorePresetContainerWidget, _presetsPadding) == 0x0003B4, "Member 'UCorePresetContainerWidget::_presetsPadding' has a wrong offset!");
static_assert(offsetof(UCorePresetContainerWidget, _presetWidgets) == 0x0003C8, "Member 'UCorePresetContainerWidget::_presetWidgets' has a wrong offset!");
static_assert(offsetof(UCorePresetContainerWidget, _presetList) == 0x0003D8, "Member 'UCorePresetContainerWidget::_presetList' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveQuestNodeWidget
// 0x0168 (0x0618 - 0x04B0)
class UCoreArchiveQuestNodeWidget final : public UCoreButtonWidget
{
public:
	uint8                                         Pad_4B0[0x10];                                     // 0x04B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	ETooltipHorizontalAlignment                   HorizontalAlignment;                               // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     VerticalAlignment;                                 // 0x04C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C2[0x6];                                      // 0x04C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDImage*                              Icon;                                              // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               VignetteTextIndicatorOverlay;                      // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               VignetteImageIndicatorOverlay;                     // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               VignetteCurrencyAmountOverlay;                     // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      VignetteCurrencyAmountText;                        // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ENodeStatusChange, class UAkAudioEvent*> StatusChangeAudioEvents;                           // 0x04F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FArchiveNodeViewData                   _nodeData;                                         // 0x0540(0x00B8)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FName                                   _nodeId;                                           // 0x05F8(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChallengeReminderNode;                          // 0x0604(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isDraggable;                                      // 0x0605(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_606[0x12];                                     // 0x0606(0x0012)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BroadcastDragBegin();
	void HandleStatusChange(const EStoryNodeState prevStatus, const EStoryNodeState currentStatus);
	void InitNode(const class FName& NodeId, const struct FArchiveNodeViewData& Data, bool isChallengeReminderNode);
	void OnInit();
	void OnReset();
	void OnStatusChanged(ENodeStatusChange nodeStatusChange);
	void Reset();
	void SetCurrencyRewardBackground(ECurrencyType currencyType);
	void SetCustomizationRewardRarity(EItemRarity Rarity);
	void SetIcon(bool isReward, const TSoftObjectPtr<class UTexture2D>& iconTexture);
	void ShowRewardNodeTooltip();
	void UpdateAllStoryIndicators();
	void UpdateNode(const struct FArchiveNodeViewData& Data);
	void UpdateStoryIndicatorOpacity(bool IsImageReward, bool IsCompleted);

	bool IsSelectableNode() const;
	bool IsValidNode() const;
	bool NeedsChallengeReminderHoverAnimation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveQuestNodeWidget">();
	}
	static class UCoreArchiveQuestNodeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveQuestNodeWidget>();
	}
};
static_assert(alignof(UCoreArchiveQuestNodeWidget) == 0x000008, "Wrong alignment on UCoreArchiveQuestNodeWidget");
static_assert(sizeof(UCoreArchiveQuestNodeWidget) == 0x000618, "Wrong size on UCoreArchiveQuestNodeWidget");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, HorizontalAlignment) == 0x0004C0, "Member 'UCoreArchiveQuestNodeWidget::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, VerticalAlignment) == 0x0004C1, "Member 'UCoreArchiveQuestNodeWidget::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, Icon) == 0x0004C8, "Member 'UCoreArchiveQuestNodeWidget::Icon' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, VignetteTextIndicatorOverlay) == 0x0004D0, "Member 'UCoreArchiveQuestNodeWidget::VignetteTextIndicatorOverlay' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, VignetteImageIndicatorOverlay) == 0x0004D8, "Member 'UCoreArchiveQuestNodeWidget::VignetteImageIndicatorOverlay' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, VignetteCurrencyAmountOverlay) == 0x0004E0, "Member 'UCoreArchiveQuestNodeWidget::VignetteCurrencyAmountOverlay' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, VignetteCurrencyAmountText) == 0x0004E8, "Member 'UCoreArchiveQuestNodeWidget::VignetteCurrencyAmountText' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, StatusChangeAudioEvents) == 0x0004F0, "Member 'UCoreArchiveQuestNodeWidget::StatusChangeAudioEvents' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, _nodeData) == 0x000540, "Member 'UCoreArchiveQuestNodeWidget::_nodeData' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, _nodeId) == 0x0005F8, "Member 'UCoreArchiveQuestNodeWidget::_nodeId' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, _isChallengeReminderNode) == 0x000604, "Member 'UCoreArchiveQuestNodeWidget::_isChallengeReminderNode' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, _isDraggable) == 0x000605, "Member 'UCoreArchiveQuestNodeWidget::_isDraggable' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveQuestPathWidget
// 0x0068 (0x0518 - 0x04B0)
class UCoreArchiveQuestPathWidget final : public UCoreButtonWidget
{
public:
	class UOverlay*                               PathOverlay;                                       // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              PathImage;                                         // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EArchivePathStatus                            _status;                                           // 0x04C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArchiveMapPathViewData                _data;                                             // 0x04C8(0x0040)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_508[0x10];                                     // 0x0508(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitPath(const struct FArchiveMapPathViewData& Data);
	void Reset();
	void SetVisualState(const EArchivePathStatus& pathStatus);
	void UpdatePath(const struct FArchiveMapPathViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveQuestPathWidget">();
	}
	static class UCoreArchiveQuestPathWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveQuestPathWidget>();
	}
};
static_assert(alignof(UCoreArchiveQuestPathWidget) == 0x000008, "Wrong alignment on UCoreArchiveQuestPathWidget");
static_assert(sizeof(UCoreArchiveQuestPathWidget) == 0x000518, "Wrong size on UCoreArchiveQuestPathWidget");
static_assert(offsetof(UCoreArchiveQuestPathWidget, PathOverlay) == 0x0004B0, "Member 'UCoreArchiveQuestPathWidget::PathOverlay' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestPathWidget, PathImage) == 0x0004B8, "Member 'UCoreArchiveQuestPathWidget::PathImage' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestPathWidget, _status) == 0x0004C0, "Member 'UCoreArchiveQuestPathWidget::_status' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestPathWidget, _data) == 0x0004C8, "Member 'UCoreArchiveQuestPathWidget::_data' has a wrong offset!");

// Class DBDUIViewsCore.CoreLoadoutWidget
// 0x0198 (0x04B8 - 0x0320)
class UCoreLoadoutWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ELoadoutSlot slotIndex)> _onLoadoutSlotClicked;                    // 0x0328(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(ELoadoutSlot ItemIndex, const class FName ItemId)> _onLoadoutInventorySlotClicked; // 0x0338(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _onPaginationAnimationCompleted;                   // 0x0348(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	int32                                         _debugLoadoutLayoutMask;                           // 0x0358(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPlayerRole                                   _debugPlayerRole;                                  // 0x035C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35D[0x3];                                      // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreLoadoutItemAndOfferingSectionWidget* ItemAndOfferingSection;                          // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLoadoutCharacterClassSectionWidget* CharacterClassSection;                            // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLoadoutPerksSectionWidget*         PerksSection;                                      // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLoadoutSkillsSectionWidget*        SkillsSection;                                     // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          InventoryTitleTB;                                  // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          InventorySubtitleTB;                               // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSearchBarWidget*                   SearchBar;                                         // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             InventoryGridContainer;                            // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               PaginationOverlay;                                 // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePaginationContainerWidget*         PaginationGridContainer;                           // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               LeftArrow;                                         // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RightArrow;                                        // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               InventoryDisabledOverlay;                          // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          InventoryDisabledTB;                               // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuLoadoutPartWidget> _loadoutPowerClass;                                // 0x03D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuLoadoutPartWidget> _loadoutItemWidgetClass;                           // 0x03D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuAddonWidget>       _loadoutAddonClass;                                // 0x03E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuLoadoutPartWidget> _loadoutOfferingClass;                             // 0x03E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuPerkWidget>        _loadoutPerkClass;                                 // 0x03F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuClassWidget>       _loadoutCharacterClassClass;                       // 0x03F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuSkillWidget>       _loadoutSkillClass;                                // 0x0400(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _inventoryPerRow;                                  // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _inventoryPerColumn;                               // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _cellsPerRow;                                      // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _inventorySemiTransparentOpacity;                  // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _inventoryItemPadding;                             // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                _inventoryPerkPadding;                             // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                _inventoryOfferingPadding;                         // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                _inventoryCharacterClassesPadding;                 // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         _inventoryPerkExtraNudge;                          // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _inventoryOfferingExtraNudge;                      // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _inventoryCharacterClassesExtraNudge;              // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _stopAnimation;                                    // 0x0464(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          _inventorySlotHorizontalAlignment;                 // 0x0465(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            _inventorySlotVerticalAlignment;                   // 0x0466(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_467[0x1];                                      // 0x0467(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCoreMenuLoadoutPartWidget*>     _inventoryItemWidgetList;                          // 0x0468(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	ELoadoutSlot                                  _loadoutSelectedSlot;                              // 0x0478(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULoadoutItemViewData*>           _inventoryViewData;                                // 0x0480(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_490[0x28];                                     // 0x0490(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCoreMenuLoadoutPartWidget* CreateInventoryGrid(int32 Index_0, TSubclassOf<class UCoreMenuLoadoutPartWidget> currentLoadoutClass);
	void OnInventoryItemClicked(class UCoreButtonWidget* itemWidget);
	void OnInventoryItemHovered(class UCoreButtonWidget* buttonTarget);
	void OnInventoryItemUnhovered(class UCoreButtonWidget* buttonTarget);
	void OnInventoryLeftArrowClicked();
	void OnInventoryRightArrowClicked();
	void OnPaginationAnimationCompleted();
	void OnPaginationSelected(const int32 CurrentPage, bool isUpdate);
	void OnSlotClicked(ELoadoutSlot clickedLoadoutSlot);
	void PlayPaginationOutAnimation(bool isNextPage);
	void StopPaginationAnimation(const float inventoryElementsOpacity);
	void UpdateInventoryGridContent();
	bool UpdateInventoryStatus(const ELoadoutInventoryDisabledReason InventoryDisabledReason, const int32 numberOfPages);
	void UpdateLoadoutLayout();

	bool IsLayoutSectionEnabled(const int32 loadoutLayoutMask) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLoadoutWidget">();
	}
	static class UCoreLoadoutWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLoadoutWidget>();
	}
};
static_assert(alignof(UCoreLoadoutWidget) == 0x000008, "Wrong alignment on UCoreLoadoutWidget");
static_assert(sizeof(UCoreLoadoutWidget) == 0x0004B8, "Wrong size on UCoreLoadoutWidget");
static_assert(offsetof(UCoreLoadoutWidget, _onLoadoutSlotClicked) == 0x000328, "Member 'UCoreLoadoutWidget::_onLoadoutSlotClicked' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _onLoadoutInventorySlotClicked) == 0x000338, "Member 'UCoreLoadoutWidget::_onLoadoutInventorySlotClicked' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _onPaginationAnimationCompleted) == 0x000348, "Member 'UCoreLoadoutWidget::_onPaginationAnimationCompleted' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _debugLoadoutLayoutMask) == 0x000358, "Member 'UCoreLoadoutWidget::_debugLoadoutLayoutMask' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _debugPlayerRole) == 0x00035C, "Member 'UCoreLoadoutWidget::_debugPlayerRole' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, ItemAndOfferingSection) == 0x000360, "Member 'UCoreLoadoutWidget::ItemAndOfferingSection' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, CharacterClassSection) == 0x000368, "Member 'UCoreLoadoutWidget::CharacterClassSection' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, PerksSection) == 0x000370, "Member 'UCoreLoadoutWidget::PerksSection' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, SkillsSection) == 0x000378, "Member 'UCoreLoadoutWidget::SkillsSection' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, InventoryTitleTB) == 0x000380, "Member 'UCoreLoadoutWidget::InventoryTitleTB' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, InventorySubtitleTB) == 0x000388, "Member 'UCoreLoadoutWidget::InventorySubtitleTB' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, SearchBar) == 0x000390, "Member 'UCoreLoadoutWidget::SearchBar' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, InventoryGridContainer) == 0x000398, "Member 'UCoreLoadoutWidget::InventoryGridContainer' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, PaginationOverlay) == 0x0003A0, "Member 'UCoreLoadoutWidget::PaginationOverlay' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, PaginationGridContainer) == 0x0003A8, "Member 'UCoreLoadoutWidget::PaginationGridContainer' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, LeftArrow) == 0x0003B0, "Member 'UCoreLoadoutWidget::LeftArrow' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, RightArrow) == 0x0003B8, "Member 'UCoreLoadoutWidget::RightArrow' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, InventoryDisabledOverlay) == 0x0003C0, "Member 'UCoreLoadoutWidget::InventoryDisabledOverlay' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, InventoryDisabledTB) == 0x0003C8, "Member 'UCoreLoadoutWidget::InventoryDisabledTB' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _loadoutPowerClass) == 0x0003D0, "Member 'UCoreLoadoutWidget::_loadoutPowerClass' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _loadoutItemWidgetClass) == 0x0003D8, "Member 'UCoreLoadoutWidget::_loadoutItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _loadoutAddonClass) == 0x0003E0, "Member 'UCoreLoadoutWidget::_loadoutAddonClass' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _loadoutOfferingClass) == 0x0003E8, "Member 'UCoreLoadoutWidget::_loadoutOfferingClass' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _loadoutPerkClass) == 0x0003F0, "Member 'UCoreLoadoutWidget::_loadoutPerkClass' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _loadoutCharacterClassClass) == 0x0003F8, "Member 'UCoreLoadoutWidget::_loadoutCharacterClassClass' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _loadoutSkillClass) == 0x000400, "Member 'UCoreLoadoutWidget::_loadoutSkillClass' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _inventoryPerRow) == 0x000408, "Member 'UCoreLoadoutWidget::_inventoryPerRow' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _inventoryPerColumn) == 0x00040C, "Member 'UCoreLoadoutWidget::_inventoryPerColumn' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _cellsPerRow) == 0x000410, "Member 'UCoreLoadoutWidget::_cellsPerRow' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _inventorySemiTransparentOpacity) == 0x000414, "Member 'UCoreLoadoutWidget::_inventorySemiTransparentOpacity' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _inventoryItemPadding) == 0x000418, "Member 'UCoreLoadoutWidget::_inventoryItemPadding' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _inventoryPerkPadding) == 0x000428, "Member 'UCoreLoadoutWidget::_inventoryPerkPadding' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _inventoryOfferingPadding) == 0x000438, "Member 'UCoreLoadoutWidget::_inventoryOfferingPadding' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _inventoryCharacterClassesPadding) == 0x000448, "Member 'UCoreLoadoutWidget::_inventoryCharacterClassesPadding' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _inventoryPerkExtraNudge) == 0x000458, "Member 'UCoreLoadoutWidget::_inventoryPerkExtraNudge' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _inventoryOfferingExtraNudge) == 0x00045C, "Member 'UCoreLoadoutWidget::_inventoryOfferingExtraNudge' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _inventoryCharacterClassesExtraNudge) == 0x000460, "Member 'UCoreLoadoutWidget::_inventoryCharacterClassesExtraNudge' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _stopAnimation) == 0x000464, "Member 'UCoreLoadoutWidget::_stopAnimation' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _inventorySlotHorizontalAlignment) == 0x000465, "Member 'UCoreLoadoutWidget::_inventorySlotHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _inventorySlotVerticalAlignment) == 0x000466, "Member 'UCoreLoadoutWidget::_inventorySlotVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _inventoryItemWidgetList) == 0x000468, "Member 'UCoreLoadoutWidget::_inventoryItemWidgetList' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _loadoutSelectedSlot) == 0x000478, "Member 'UCoreLoadoutWidget::_loadoutSelectedSlot' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutWidget, _inventoryViewData) == 0x000480, "Member 'UCoreLoadoutWidget::_inventoryViewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveRiftTierItem
// 0x0068 (0x0310 - 0x02A8)
class UCoreArchiveRiftTierItem final : public UUserWidget
{
public:
	TMulticastInlineDelegate<void(int32 tier, class UCoreButtonWidget* selectedReward, bool isPremium, int32 Index)> _itemClickedDelegate; // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _unlockAnimationCompleteDelegate;                  // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UGridPanel*                             FreeRewardsContainer;                              // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             PremiumRewardsContainer;                           // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreRewardWrapperWidget*>       _freeRewardWidgets;                                // 0x02D8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UCoreRewardWrapperWidget*>       _premiumRewardWidgets;                             // 0x02E8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          _unlockAnimationCompleteSound;                     // 0x02F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _currencyAndProgressionRewardScale;                // 0x0300(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _characterAndCustomizationRewardScale;             // 0x0304(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Clear();
	void OnRewardClicked(class UCoreButtonWidget* Button);
	void PlayUnlockanimation(bool IsPremiumUnlocked, float Delay);
	void SetGenericData(const struct FArchiveRiftTierRewardsViewData& Data);
	void SetLockedState(const bool IsLocked, const bool hasPremium);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveRiftTierItem">();
	}
	static class UCoreArchiveRiftTierItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveRiftTierItem>();
	}
};
static_assert(alignof(UCoreArchiveRiftTierItem) == 0x000008, "Wrong alignment on UCoreArchiveRiftTierItem");
static_assert(sizeof(UCoreArchiveRiftTierItem) == 0x000310, "Wrong size on UCoreArchiveRiftTierItem");
static_assert(offsetof(UCoreArchiveRiftTierItem, _itemClickedDelegate) == 0x0002A8, "Member 'UCoreArchiveRiftTierItem::_itemClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftTierItem, _unlockAnimationCompleteDelegate) == 0x0002B8, "Member 'UCoreArchiveRiftTierItem::_unlockAnimationCompleteDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftTierItem, FreeRewardsContainer) == 0x0002C8, "Member 'UCoreArchiveRiftTierItem::FreeRewardsContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftTierItem, PremiumRewardsContainer) == 0x0002D0, "Member 'UCoreArchiveRiftTierItem::PremiumRewardsContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftTierItem, _freeRewardWidgets) == 0x0002D8, "Member 'UCoreArchiveRiftTierItem::_freeRewardWidgets' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftTierItem, _premiumRewardWidgets) == 0x0002E8, "Member 'UCoreArchiveRiftTierItem::_premiumRewardWidgets' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftTierItem, _unlockAnimationCompleteSound) == 0x0002F8, "Member 'UCoreArchiveRiftTierItem::_unlockAnimationCompleteSound' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftTierItem, _currencyAndProgressionRewardScale) == 0x000300, "Member 'UCoreArchiveRiftTierItem::_currencyAndProgressionRewardScale' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftTierItem, _characterAndCustomizationRewardScale) == 0x000304, "Member 'UCoreArchiveRiftTierItem::_characterAndCustomizationRewardScale' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveSlotSelectorWidget
// 0x0048 (0x0368 - 0x0320)
class UCoreArchiveSlotSelectorWidget final : public UCoreBaseUserWidget
{
public:
	class UArchiveNodeTooltipWidget*              NodeTooltip;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      SurvivorSlotPromptWidget;                          // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      BothSlotPromptWidget;                              // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      KillerSlotPromptWidget;                            // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               CancelPromptWidget;                                // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_348[0x20];                                     // 0x0348(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBothSelection();
	void OnCancelSelection();
	void OnKillerSelection();
	void OnSurvivorSelection();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveSlotSelectorWidget">();
	}
	static class UCoreArchiveSlotSelectorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveSlotSelectorWidget>();
	}
};
static_assert(alignof(UCoreArchiveSlotSelectorWidget) == 0x000008, "Wrong alignment on UCoreArchiveSlotSelectorWidget");
static_assert(sizeof(UCoreArchiveSlotSelectorWidget) == 0x000368, "Wrong size on UCoreArchiveSlotSelectorWidget");
static_assert(offsetof(UCoreArchiveSlotSelectorWidget, NodeTooltip) == 0x000320, "Member 'UCoreArchiveSlotSelectorWidget::NodeTooltip' has a wrong offset!");
static_assert(offsetof(UCoreArchiveSlotSelectorWidget, SurvivorSlotPromptWidget) == 0x000328, "Member 'UCoreArchiveSlotSelectorWidget::SurvivorSlotPromptWidget' has a wrong offset!");
static_assert(offsetof(UCoreArchiveSlotSelectorWidget, BothSlotPromptWidget) == 0x000330, "Member 'UCoreArchiveSlotSelectorWidget::BothSlotPromptWidget' has a wrong offset!");
static_assert(offsetof(UCoreArchiveSlotSelectorWidget, KillerSlotPromptWidget) == 0x000338, "Member 'UCoreArchiveSlotSelectorWidget::KillerSlotPromptWidget' has a wrong offset!");
static_assert(offsetof(UCoreArchiveSlotSelectorWidget, CancelPromptWidget) == 0x000340, "Member 'UCoreArchiveSlotSelectorWidget::CancelPromptWidget' has a wrong offset!");

// Class DBDUIViewsCore.CoreMainMenuWidget
// 0x02B0 (0x05D0 - 0x0320)
class UCoreMainMenuWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x118];                                    // 0x0320(0x0118)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreMainMenuButtonWidget>  _mainMenuButtonWidgetClass;                        // 0x0438(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _mainButtonWidgetPadding;                          // 0x0440(0x0010)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UVerticalBox*                           PlayLimitedTimeEventButtonContainer;               // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMainMenuButtonWidget*              PlayButton;                                        // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMainMenuButtonWidget*              TutorialButton;                                    // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMainMenuButtonWidget*              RiftButton;                                        // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMainMenuButtonWidget*              StoreButton;                                       // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMainMenuButtonWidget*              ChallengesButton;                                  // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMainMenuButtonWidget*              PlayKillerButton;                                  // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMainMenuButtonWidget*              PlaySurvivorButton;                                // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMainMenuButtonWidget*              PlayCustomGameButton;                              // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMainMenuButtonWidget*              PlayLimitedTimeEventKillerButton;                  // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMainMenuButtonWidget*              PlayLimitedTimeEventSurvivorButton;                // 0x04A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMainMenuButtonWidget*              EventButton;                                       // 0x04A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterButtonWidget*                ArchivesButton;                                    // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterButtonWidget*                FriendsButton;                                     // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterButtonWidget*                SettingsButton;                                    // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterButtonWidget*                InboxButton;                                       // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterButtonWidget*                CreditsButton;                                     // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               ExitButton;                                        // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               ChangeAccountInputSwitcher;                        // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           _eventNames;                                       // 0x04E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          _isChallengesButtonAvailable;                      // 0x04F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreMainMenuButtonWidget*              _selectedPlayLimitedTimeEventButton;               // 0x0500(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreMainMenuButtonWidget*>      _playLimitedTimeEventButtons;                      // 0x0508(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnChangeAccountButtonClickedDelegate;              // 0x0518(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMap<class FName, class UCoreMainMenuButtonWidget*> PlayKillerButtons;                           // 0x0528(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class FName, class UCoreMainMenuButtonWidget*> PlaySurvivorButtons;                         // 0x0578(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C8[0x8];                                      // 0x05C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCoreBaseUserWidget* GetButton(EMainMenuButtonType Button, int32 Index_0);
	void OnArchivesButtonClicked(class UCoreButtonWidget* Target);
	void OnChallengesButtonClicked(class UCoreButtonWidget* Target);
	void OnCreditsButtonClicked(class UCoreButtonWidget* Target);
	void OnEventButtonClicked(class UCoreButtonWidget* Target);
	void OnExitButtonClicked(class UCoreButtonWidget* Target);
	void OnExitButtonTriggered();
	void OnFriendsButtonClicked(class UCoreButtonWidget* Target);
	void OnInboxButtonClicked(class UCoreButtonWidget* Target);
	void OnPlayButtonClicked(class UCoreButtonWidget* Target);
	void OnPlayCustomButtonClicked(class UCoreButtonWidget* Target);
	void OnPlayKillerButtonClicked(class UCoreButtonWidget* Target);
	void OnPlayLimitedTimeEventButtonClicked(class UCoreButtonWidget* Target);
	void OnPlayLimitedTimeEventKillerButtonClicked(class UCoreButtonWidget* Target);
	void OnPlayLimitedTimeEventSurvivorButtonClicked(class UCoreButtonWidget* Target);
	void OnPlaySurvivorButtonClicked(class UCoreButtonWidget* Target);
	void OnRiftButtonClicked(class UCoreButtonWidget* Target);
	void OnSettingsButtonClicked(class UCoreButtonWidget* Target);
	void OnStoreButtonClicked(class UCoreButtonWidget* Target);
	void OnTutorialButtonClicked(class UCoreButtonWidget* Target);
	void ShowLimitedTimeEventSubMenu(bool Open);
	void ShowPlaySubMenu(bool Open);
	void ShowUiTakeover(bool Show);

	bool HasActiveLTE() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMainMenuWidget">();
	}
	static class UCoreMainMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMainMenuWidget>();
	}
};
static_assert(alignof(UCoreMainMenuWidget) == 0x000008, "Wrong alignment on UCoreMainMenuWidget");
static_assert(sizeof(UCoreMainMenuWidget) == 0x0005D0, "Wrong size on UCoreMainMenuWidget");
static_assert(offsetof(UCoreMainMenuWidget, _mainMenuButtonWidgetClass) == 0x000438, "Member 'UCoreMainMenuWidget::_mainMenuButtonWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, _mainButtonWidgetPadding) == 0x000440, "Member 'UCoreMainMenuWidget::_mainButtonWidgetPadding' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, PlayLimitedTimeEventButtonContainer) == 0x000450, "Member 'UCoreMainMenuWidget::PlayLimitedTimeEventButtonContainer' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, PlayButton) == 0x000458, "Member 'UCoreMainMenuWidget::PlayButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, TutorialButton) == 0x000460, "Member 'UCoreMainMenuWidget::TutorialButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, RiftButton) == 0x000468, "Member 'UCoreMainMenuWidget::RiftButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, StoreButton) == 0x000470, "Member 'UCoreMainMenuWidget::StoreButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, ChallengesButton) == 0x000478, "Member 'UCoreMainMenuWidget::ChallengesButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, PlayKillerButton) == 0x000480, "Member 'UCoreMainMenuWidget::PlayKillerButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, PlaySurvivorButton) == 0x000488, "Member 'UCoreMainMenuWidget::PlaySurvivorButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, PlayCustomGameButton) == 0x000490, "Member 'UCoreMainMenuWidget::PlayCustomGameButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, PlayLimitedTimeEventKillerButton) == 0x000498, "Member 'UCoreMainMenuWidget::PlayLimitedTimeEventKillerButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, PlayLimitedTimeEventSurvivorButton) == 0x0004A0, "Member 'UCoreMainMenuWidget::PlayLimitedTimeEventSurvivorButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, EventButton) == 0x0004A8, "Member 'UCoreMainMenuWidget::EventButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, ArchivesButton) == 0x0004B0, "Member 'UCoreMainMenuWidget::ArchivesButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, FriendsButton) == 0x0004B8, "Member 'UCoreMainMenuWidget::FriendsButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, SettingsButton) == 0x0004C0, "Member 'UCoreMainMenuWidget::SettingsButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, InboxButton) == 0x0004C8, "Member 'UCoreMainMenuWidget::InboxButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, CreditsButton) == 0x0004D0, "Member 'UCoreMainMenuWidget::CreditsButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, ExitButton) == 0x0004D8, "Member 'UCoreMainMenuWidget::ExitButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, ChangeAccountInputSwitcher) == 0x0004E0, "Member 'UCoreMainMenuWidget::ChangeAccountInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, _eventNames) == 0x0004E8, "Member 'UCoreMainMenuWidget::_eventNames' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, _isChallengesButtonAvailable) == 0x0004F8, "Member 'UCoreMainMenuWidget::_isChallengesButtonAvailable' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, _selectedPlayLimitedTimeEventButton) == 0x000500, "Member 'UCoreMainMenuWidget::_selectedPlayLimitedTimeEventButton' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, _playLimitedTimeEventButtons) == 0x000508, "Member 'UCoreMainMenuWidget::_playLimitedTimeEventButtons' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, OnChangeAccountButtonClickedDelegate) == 0x000518, "Member 'UCoreMainMenuWidget::OnChangeAccountButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, PlayKillerButtons) == 0x000528, "Member 'UCoreMainMenuWidget::PlayKillerButtons' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuWidget, PlaySurvivorButtons) == 0x000578, "Member 'UCoreMainMenuWidget::PlaySurvivorButtons' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchivesWidget
// 0x0250 (0x0570 - 0x0320)
class UCoreArchivesWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreArchiveChallengeReminderSlotWidget* SurvivorChallengeSlot;                            // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreArchiveChallengeReminderSlotWidget* KillerChallengeSlot;                              // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreArchiveSlotSelectorWidget*         SlotSelector;                                      // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreFooterButtonWidget*                SettingsButton;                                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreFooterButtonWidget*                InfoButton;                                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              _backButtonClickedDelegate;                        // 0x0358(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _settingsButtonClickedDelegate;                    // 0x0368(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _infoButtonClickedDelegate;                        // 0x0378(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _slotSelectorClosedDelegate;                       // 0x0388(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EPlayerRole Role)> _challengeReminderClickedDelegate;              // 0x0398(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EPlayerRole Role)> _slotSelectionSelectedDelegate;                 // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B8[0x1B8];                                    // 0x03B8(0x01B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackButtonClicked();
	void OnChallengeReminderClick(class UCoreButtonWidget* Button);
	void OnInfoButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnSettingsButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnSlotSelected(EPlayerRole Role);
	void OnSlotSelectionCancelled();
	void SetScrollData(const class FText& vignetteListScrollPromptText, const class FText& journalEntryScrollPromptText);
	void SetSubtitle(const class FText& subtitle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchivesWidget">();
	}
	static class UCoreArchivesWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchivesWidget>();
	}
};
static_assert(alignof(UCoreArchivesWidget) == 0x000008, "Wrong alignment on UCoreArchivesWidget");
static_assert(sizeof(UCoreArchivesWidget) == 0x000570, "Wrong size on UCoreArchivesWidget");
static_assert(offsetof(UCoreArchivesWidget, SurvivorChallengeSlot) == 0x000328, "Member 'UCoreArchivesWidget::SurvivorChallengeSlot' has a wrong offset!");
static_assert(offsetof(UCoreArchivesWidget, KillerChallengeSlot) == 0x000330, "Member 'UCoreArchivesWidget::KillerChallengeSlot' has a wrong offset!");
static_assert(offsetof(UCoreArchivesWidget, SlotSelector) == 0x000338, "Member 'UCoreArchivesWidget::SlotSelector' has a wrong offset!");
static_assert(offsetof(UCoreArchivesWidget, BackInputSwitcher) == 0x000340, "Member 'UCoreArchivesWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchivesWidget, SettingsButton) == 0x000348, "Member 'UCoreArchivesWidget::SettingsButton' has a wrong offset!");
static_assert(offsetof(UCoreArchivesWidget, InfoButton) == 0x000350, "Member 'UCoreArchivesWidget::InfoButton' has a wrong offset!");
static_assert(offsetof(UCoreArchivesWidget, _backButtonClickedDelegate) == 0x000358, "Member 'UCoreArchivesWidget::_backButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchivesWidget, _settingsButtonClickedDelegate) == 0x000368, "Member 'UCoreArchivesWidget::_settingsButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchivesWidget, _infoButtonClickedDelegate) == 0x000378, "Member 'UCoreArchivesWidget::_infoButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchivesWidget, _slotSelectorClosedDelegate) == 0x000388, "Member 'UCoreArchivesWidget::_slotSelectorClosedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchivesWidget, _challengeReminderClickedDelegate) == 0x000398, "Member 'UCoreArchivesWidget::_challengeReminderClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchivesWidget, _slotSelectionSelectedDelegate) == 0x0003A8, "Member 'UCoreArchivesWidget::_slotSelectionSelectedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget
// 0x0098 (0x0420 - 0x0388)
class UCoreArchiveTierPurchasePopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               LessInputSwitcher;                                 // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               MoreInputSwitcher;                                 // 0x0398(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreCurrencyInputSwitcherWidget*       PurchaseButton;                                    // 0x03A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      CurrentQuantityText;                               // 0x03A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ImageContainer;                                    // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _quantityCurve;                                    // 0x03B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _deepTierStyleName;                                // 0x03C0(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   _infiniteTierStyleName;                            // 0x03D8(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   _infinitySignText;                                 // 0x03F0(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UArchiveTierPurchasePopupViewData*      _viewData;                                         // 0x0408(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 tiersToPurchaseNumber, bool isPurchasingInfiniteTiers)> _confirmPurchase; // 0x0410(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)

public:
	void OnLessInputTriggered();
	void OnMoreInputTriggered();
	void OnPurchaseClicked(ECurrencyType currencyType);
	void SetVisualData(const class UArchiveTierPurchasePopupViewData* ViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveTierPurchasePopupWidget">();
	}
	static class UCoreArchiveTierPurchasePopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveTierPurchasePopupWidget>();
	}
};
static_assert(alignof(UCoreArchiveTierPurchasePopupWidget) == 0x000008, "Wrong alignment on UCoreArchiveTierPurchasePopupWidget");
static_assert(sizeof(UCoreArchiveTierPurchasePopupWidget) == 0x000420, "Wrong size on UCoreArchiveTierPurchasePopupWidget");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, LessInputSwitcher) == 0x000390, "Member 'UCoreArchiveTierPurchasePopupWidget::LessInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, MoreInputSwitcher) == 0x000398, "Member 'UCoreArchiveTierPurchasePopupWidget::MoreInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, PurchaseButton) == 0x0003A0, "Member 'UCoreArchiveTierPurchasePopupWidget::PurchaseButton' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, CurrentQuantityText) == 0x0003A8, "Member 'UCoreArchiveTierPurchasePopupWidget::CurrentQuantityText' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, ImageContainer) == 0x0003B0, "Member 'UCoreArchiveTierPurchasePopupWidget::ImageContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, _quantityCurve) == 0x0003B8, "Member 'UCoreArchiveTierPurchasePopupWidget::_quantityCurve' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, _deepTierStyleName) == 0x0003C0, "Member 'UCoreArchiveTierPurchasePopupWidget::_deepTierStyleName' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, _infiniteTierStyleName) == 0x0003D8, "Member 'UCoreArchiveTierPurchasePopupWidget::_infiniteTierStyleName' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, _infinitySignText) == 0x0003F0, "Member 'UCoreArchiveTierPurchasePopupWidget::_infinitySignText' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, _viewData) == 0x000408, "Member 'UCoreArchiveTierPurchasePopupWidget::_viewData' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, _confirmPurchase) == 0x000410, "Member 'UCoreArchiveTierPurchasePopupWidget::_confirmPurchase' has a wrong offset!");

// Class DBDUIViewsCore.CoreLobbySidePanelButton
// 0x0148 (0x0620 - 0x04D8)
class UCoreLobbySidePanelButton final : public UCoreSelectableButtonWidget
{
public:
	class UDBDImage*                              Icon;                                              // 0x04D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              ButtonIconTexture;                                 // 0x04E0(0x0038)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              DisabledButtonIconTexture;                         // 0x0518(0x0038)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreTimerFlagWidget*                   LimitedTimeTimerFlag;                              // 0x0550(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreTimerFlagWidget*                   SaleTimerFlag;                                     // 0x0558(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            NewNotification;                                   // 0x0560(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbySidePanelButtonId                       _panelButtonId;                                    // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbySidePanelButtonTemplate                 ButtonTemplate;                                    // 0x0569(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_56A[0x6];                                      // 0x056A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      defaultIconBackground;                             // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstance*                      nonTabIconBackground;                              // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_580[0xA0];                                     // 0x0580(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceUnselectButton();
	void OnButtonHovered(class UCoreButtonWidget* buttonTarget);
	void OnButtonUnhovered(class UCoreButtonWidget* buttonTarget);
	void SetDecoration(const class FString& decorationId);
	void SetIcon(const class FString& eventBannerId);

	bool IsDisabledButInteractable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLobbySidePanelButton">();
	}
	static class UCoreLobbySidePanelButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLobbySidePanelButton>();
	}
};
static_assert(alignof(UCoreLobbySidePanelButton) == 0x000008, "Wrong alignment on UCoreLobbySidePanelButton");
static_assert(sizeof(UCoreLobbySidePanelButton) == 0x000620, "Wrong size on UCoreLobbySidePanelButton");
static_assert(offsetof(UCoreLobbySidePanelButton, Icon) == 0x0004D8, "Member 'UCoreLobbySidePanelButton::Icon' has a wrong offset!");
static_assert(offsetof(UCoreLobbySidePanelButton, ButtonIconTexture) == 0x0004E0, "Member 'UCoreLobbySidePanelButton::ButtonIconTexture' has a wrong offset!");
static_assert(offsetof(UCoreLobbySidePanelButton, DisabledButtonIconTexture) == 0x000518, "Member 'UCoreLobbySidePanelButton::DisabledButtonIconTexture' has a wrong offset!");
static_assert(offsetof(UCoreLobbySidePanelButton, LimitedTimeTimerFlag) == 0x000550, "Member 'UCoreLobbySidePanelButton::LimitedTimeTimerFlag' has a wrong offset!");
static_assert(offsetof(UCoreLobbySidePanelButton, SaleTimerFlag) == 0x000558, "Member 'UCoreLobbySidePanelButton::SaleTimerFlag' has a wrong offset!");
static_assert(offsetof(UCoreLobbySidePanelButton, NewNotification) == 0x000560, "Member 'UCoreLobbySidePanelButton::NewNotification' has a wrong offset!");
static_assert(offsetof(UCoreLobbySidePanelButton, _panelButtonId) == 0x000568, "Member 'UCoreLobbySidePanelButton::_panelButtonId' has a wrong offset!");
static_assert(offsetof(UCoreLobbySidePanelButton, ButtonTemplate) == 0x000569, "Member 'UCoreLobbySidePanelButton::ButtonTemplate' has a wrong offset!");
static_assert(offsetof(UCoreLobbySidePanelButton, defaultIconBackground) == 0x000570, "Member 'UCoreLobbySidePanelButton::defaultIconBackground' has a wrong offset!");
static_assert(offsetof(UCoreLobbySidePanelButton, nonTabIconBackground) == 0x000578, "Member 'UCoreLobbySidePanelButton::nonTabIconBackground' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveTomeWidget
// 0x0020 (0x0360 - 0x0340)
class UCoreArchiveTomeWidget final : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreTabContainerWidget*                ArchiveTomeSubTabsContainer;                       // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const EArchiveTomeMenuState menuState)> MenuTabSelectedDelegate;   // 0x0350(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveTomeWidget">();
	}
	static class UCoreArchiveTomeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveTomeWidget>();
	}
};
static_assert(alignof(UCoreArchiveTomeWidget) == 0x000008, "Wrong alignment on UCoreArchiveTomeWidget");
static_assert(sizeof(UCoreArchiveTomeWidget) == 0x000360, "Wrong size on UCoreArchiveTomeWidget");
static_assert(offsetof(UCoreArchiveTomeWidget, ArchiveTomeSubTabsContainer) == 0x000348, "Member 'UCoreArchiveTomeWidget::ArchiveTomeSubTabsContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTomeWidget, MenuTabSelectedDelegate) == 0x000350, "Member 'UCoreArchiveTomeWidget::MenuTabSelectedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreBaseLoadoutSectionWidget
// 0x0028 (0x0348 - 0x0320)
class UCoreBaseLoadoutSectionWidget : public UCoreBaseUserWidget
{
public:
	TArray<class UCoreMenuLoadoutPartWidget*>     _loadoutSlotWidgets;                               // 0x0320(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(ELoadoutSlot slotIndex)> _onLoadoutSlotClicked;                    // 0x0330(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideTooltip(class UCoreButtonWidget* unhoveredSlotWidget);
	void OnSlotClicked(class UCoreButtonWidget* Button);
	void ShowTooltip(class UCoreButtonWidget* hoveredSlotWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreBaseLoadoutSectionWidget">();
	}
	static class UCoreBaseLoadoutSectionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreBaseLoadoutSectionWidget>();
	}
};
static_assert(alignof(UCoreBaseLoadoutSectionWidget) == 0x000008, "Wrong alignment on UCoreBaseLoadoutSectionWidget");
static_assert(sizeof(UCoreBaseLoadoutSectionWidget) == 0x000348, "Wrong size on UCoreBaseLoadoutSectionWidget");
static_assert(offsetof(UCoreBaseLoadoutSectionWidget, _loadoutSlotWidgets) == 0x000320, "Member 'UCoreBaseLoadoutSectionWidget::_loadoutSlotWidgets' has a wrong offset!");
static_assert(offsetof(UCoreBaseLoadoutSectionWidget, _onLoadoutSlotClicked) == 0x000330, "Member 'UCoreBaseLoadoutSectionWidget::_onLoadoutSlotClicked' has a wrong offset!");

// Class DBDUIViewsCore.CoreLoadoutPerksSectionWidget
// 0x0038 (0x0380 - 0x0348)
class UCoreLoadoutPerksSectionWidget final : public UCoreBaseLoadoutSectionWidget
{
public:
	TArray<class UCoreMenuPerkWidget*>            PerkSlots;                                         // 0x0348(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          PerksLabelTB;                                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuPerkWidget*                    Perk1Slot;                                         // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuPerkWidget*                    Perk2Slot;                                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuPerkWidget*                    Perk3Slot;                                         // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuPerkWidget*                    Perk4Slot;                                         // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLoadoutPerksSectionWidget">();
	}
	static class UCoreLoadoutPerksSectionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLoadoutPerksSectionWidget>();
	}
};
static_assert(alignof(UCoreLoadoutPerksSectionWidget) == 0x000008, "Wrong alignment on UCoreLoadoutPerksSectionWidget");
static_assert(sizeof(UCoreLoadoutPerksSectionWidget) == 0x000380, "Wrong size on UCoreLoadoutPerksSectionWidget");
static_assert(offsetof(UCoreLoadoutPerksSectionWidget, PerkSlots) == 0x000348, "Member 'UCoreLoadoutPerksSectionWidget::PerkSlots' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutPerksSectionWidget, PerksLabelTB) == 0x000358, "Member 'UCoreLoadoutPerksSectionWidget::PerksLabelTB' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutPerksSectionWidget, Perk1Slot) == 0x000360, "Member 'UCoreLoadoutPerksSectionWidget::Perk1Slot' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutPerksSectionWidget, Perk2Slot) == 0x000368, "Member 'UCoreLoadoutPerksSectionWidget::Perk2Slot' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutPerksSectionWidget, Perk3Slot) == 0x000370, "Member 'UCoreLoadoutPerksSectionWidget::Perk3Slot' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutPerksSectionWidget, Perk4Slot) == 0x000378, "Member 'UCoreLoadoutPerksSectionWidget::Perk4Slot' has a wrong offset!");

// Class DBDUIViewsCore.CoreTabContainerWidget
// 0x0048 (0x03D8 - 0x0390)
class UCoreTabContainerWidget : public UCoreButtonSelector
{
public:
	class UCoreInputSwitcherWidget*               NextInputSwitcher;                                 // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreInputSwitcherWidget*               PreviousInputSwitcher;                             // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          InputPromptTriggeredSfx;                           // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlignHorizontally;                                 // 0x03A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A9[0x3];                                      // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                TabPadding;                                        // 0x03AC(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreTabWidget>             CoreTabClass;                                      // 0x03C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             TabContainer;                                      // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseControllerTabSwitching;                         // 0x03D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanLoop;                                           // 0x03D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FillContainerSpace;                                // 0x03D2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SendAnalyticsData;                                 // 0x03D3(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Init(const TArray<struct FTabWidgetData>& tabsData);
	void LayOutTabs();
	void OnTabSelected(class UCoreSelectableButtonWidget* selectedButton);
	void RemoveTabs();
	void SelectNextOrPreviousTab(const bool isSelectingNextTab);
	void SetNotificationVisibility(const int32 Key, const bool HasNotification);
	void SetTabEnabled(const int32 Key, const bool Enabled);
	void SetTabVisible(const int32 Key, const bool Visible);
	void SetUseControllerTabSwitching(const bool Enabled);
	void UpdateBackgroundSkin(const int32 Key, class UMaterialInterface* skinMaterial);
	void UpdateInputSwitchers();

	class UCoreTabWidget* GetTab(int32 Key) const;
	int32 GetTabIndex(int32 Key) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTabContainerWidget">();
	}
	static class UCoreTabContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTabContainerWidget>();
	}
};
static_assert(alignof(UCoreTabContainerWidget) == 0x000008, "Wrong alignment on UCoreTabContainerWidget");
static_assert(sizeof(UCoreTabContainerWidget) == 0x0003D8, "Wrong size on UCoreTabContainerWidget");
static_assert(offsetof(UCoreTabContainerWidget, NextInputSwitcher) == 0x000390, "Member 'UCoreTabContainerWidget::NextInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, PreviousInputSwitcher) == 0x000398, "Member 'UCoreTabContainerWidget::PreviousInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, InputPromptTriggeredSfx) == 0x0003A0, "Member 'UCoreTabContainerWidget::InputPromptTriggeredSfx' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, AlignHorizontally) == 0x0003A8, "Member 'UCoreTabContainerWidget::AlignHorizontally' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, TabPadding) == 0x0003AC, "Member 'UCoreTabContainerWidget::TabPadding' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, CoreTabClass) == 0x0003C0, "Member 'UCoreTabContainerWidget::CoreTabClass' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, TabContainer) == 0x0003C8, "Member 'UCoreTabContainerWidget::TabContainer' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, UseControllerTabSwitching) == 0x0003D0, "Member 'UCoreTabContainerWidget::UseControllerTabSwitching' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, CanLoop) == 0x0003D1, "Member 'UCoreTabContainerWidget::CanLoop' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, FillContainerSpace) == 0x0003D2, "Member 'UCoreTabContainerWidget::FillContainerSpace' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, SendAnalyticsData) == 0x0003D3, "Member 'UCoreTabContainerWidget::SendAnalyticsData' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveVignetteButtonContainerWidget
// 0x0000 (0x03D8 - 0x03D8)
class UCoreArchiveVignetteButtonContainerWidget final : public UCoreTabContainerWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveVignetteButtonContainerWidget">();
	}
	static class UCoreArchiveVignetteButtonContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveVignetteButtonContainerWidget>();
	}
};
static_assert(alignof(UCoreArchiveVignetteButtonContainerWidget) == 0x000008, "Wrong alignment on UCoreArchiveVignetteButtonContainerWidget");
static_assert(sizeof(UCoreArchiveVignetteButtonContainerWidget) == 0x0003D8, "Wrong size on UCoreArchiveVignetteButtonContainerWidget");

// Class DBDUIViewsCore.CoreLockedOverlayWidget
// 0x0000 (0x0320 - 0x0320)
class UCoreLockedOverlayWidget : public UCoreBaseUserWidget
{
public:
	void SetIsLocked(bool IsLocked, bool useAnimation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLockedOverlayWidget">();
	}
	static class UCoreLockedOverlayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLockedOverlayWidget>();
	}
};
static_assert(alignof(UCoreLockedOverlayWidget) == 0x000008, "Wrong alignment on UCoreLockedOverlayWidget");
static_assert(sizeof(UCoreLockedOverlayWidget) == 0x000320, "Wrong size on UCoreLockedOverlayWidget");

// Class DBDUIViewsCore.CoreTabWidget
// 0x0038 (0x0510 - 0x04D8)
class UCoreTabWidget : public UCoreSelectableButtonWidget
{
public:
	class UDBDTextBlock*                          TabTextField;                                      // 0x04D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              TabImage;                                          // 0x04E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                NotificationWidget;                                // 0x04E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   LabelTooltipText;                                  // 0x04F0(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_508[0x8];                                      // 0x0508(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool HasLabelTooltip();
	void PostInit();
	void SetIconSoftTexture(TSoftObjectPtr<class UTexture2D> iconTexture, const struct FVector2D& forcedIconSize);
	void SetIconTexture(class UTexture2D* iconTexture, const struct FVector2D& forcedIconSize);
	void SetNotificationVisibility(bool HasNotification);

	int32 GetKey() const;
	class FText GetTabText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTabWidget">();
	}
	static class UCoreTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTabWidget>();
	}
};
static_assert(alignof(UCoreTabWidget) == 0x000008, "Wrong alignment on UCoreTabWidget");
static_assert(sizeof(UCoreTabWidget) == 0x000510, "Wrong size on UCoreTabWidget");
static_assert(offsetof(UCoreTabWidget, TabTextField) == 0x0004D8, "Member 'UCoreTabWidget::TabTextField' has a wrong offset!");
static_assert(offsetof(UCoreTabWidget, TabImage) == 0x0004E0, "Member 'UCoreTabWidget::TabImage' has a wrong offset!");
static_assert(offsetof(UCoreTabWidget, NotificationWidget) == 0x0004E8, "Member 'UCoreTabWidget::NotificationWidget' has a wrong offset!");
static_assert(offsetof(UCoreTabWidget, LabelTooltipText) == 0x0004F0, "Member 'UCoreTabWidget::LabelTooltipText' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveVignetteButtonWidget
// 0x0078 (0x0588 - 0x0510)
class UCoreArchiveVignetteButtonWidget final : public UCoreTabWidget
{
public:
	uint8                                         Pad_510[0x10];                                     // 0x0510(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArchivesVignetteViewData              _vignetteData;                                     // 0x0520(0x0060)(Transient, NativeAccessSpecifierPrivate)
	int32                                         _subtitleMaxLength;                                // 0x0580(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_584[0x4];                                      // 0x0584(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetData(const struct FArchivesVignetteViewData& vignetteDataList);
	void SetVignetteRead(const bool IsRead);
	void SetVisualData(const class FText& vignetteTitle, const class FText& vignetteSubtitle, const class FText& vignetteProgressText, const bool displayProgress, const float vignetteProgress, const bool isUnread, const class FText& unreadIndicatorText, const bool showCinematics, const bool lockCinematics);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveVignetteButtonWidget">();
	}
	static class UCoreArchiveVignetteButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveVignetteButtonWidget>();
	}
};
static_assert(alignof(UCoreArchiveVignetteButtonWidget) == 0x000008, "Wrong alignment on UCoreArchiveVignetteButtonWidget");
static_assert(sizeof(UCoreArchiveVignetteButtonWidget) == 0x000588, "Wrong size on UCoreArchiveVignetteButtonWidget");
static_assert(offsetof(UCoreArchiveVignetteButtonWidget, _vignetteData) == 0x000520, "Member 'UCoreArchiveVignetteButtonWidget::_vignetteData' has a wrong offset!");
static_assert(offsetof(UCoreArchiveVignetteButtonWidget, _subtitleMaxLength) == 0x000580, "Member 'UCoreArchiveVignetteButtonWidget::_subtitleMaxLength' has a wrong offset!");

// Class DBDUIViewsCore.CoreMenuLoadoutPartWidget
// 0x00D8 (0x05B0 - 0x04D8)
class UCoreMenuLoadoutPartWidget : public UCoreSelectableButtonWidget
{
public:
	ELoadoutSlot                                  slotIndex;                                         // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   HorizontalAlignment;                               // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     VerticalAlignment;                                 // 0x04DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldOverrideWidgetScale;                         // 0x04DB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WidgetScaleOverrideValue;                          // 0x04DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShouldOverrideStackCountFontSize;                  // 0x04E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E1[0x3];                                      // 0x04E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StackCountFontSizeOverrideValue;                   // 0x04E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShowShadowOffset;                                  // 0x04E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E9[0x3];                                      // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnavailableRenderOpacity;                          // 0x04EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ELoadoutSlotDisplayLocation, struct FLoadoutSlotDisplayLocationConfig> _configPerDisplayLocation; // 0x04F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UGridPanel*                             MainContent;                                       // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              RarityIMG;                                         // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              IconIMG;                                           // 0x0550(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              KillSwitchIMG;                                     // 0x0558(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               DisabledOverlay;                                   // 0x0560(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              LockedIcon;                                        // 0x0568(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              Background;                                        // 0x0570(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ShadowOffset;                                      // 0x0578(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              Selected;                                          // 0x0580(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x0588(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             StackCountTB;                                      // 0x0590(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              PlusSignIcon;                                      // 0x0598(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMenuLoadoutPartViewData*               _loadoutPartData;                                  // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELoadoutSlotDisplayLocation                   _currentDisplayLocation;                           // 0x05A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5A9[0x7];                                      // 0x05A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAvailabilityVisuals(const bool IsAvailable);
	void SetDisplayLocation(const ELoadoutSlotDisplayLocation displayLocation);
	void SetEmptyWidget();
	void SetInventoryData(const class UMenuLoadoutPartViewData* Data);
	void SetLoadoutPartData(const class UMenuLoadoutPartViewData* Data);
	void SetPlusSignVisibilityWhenEmpty(const bool showPlusSignWhenEmpty);
	void SetSelectedState(bool selectedState);
	void UpdateBackgroundImage();

	class FText GetBeginnerModeTooltipText() const;
	bool GetLoadoutPartCanBeSelected() const;
	const class UMenuLoadoutPartViewData* GetLoadoutPartData() const;
	bool GetSelectedState() const;
	struct FLoadoutTooltipData GetTooltipData() const;
	class FName GetWidgetItemId() const;
	bool GetWidgetLockedState() const;
	bool ShouldShowAvailabilityVisuals() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMenuLoadoutPartWidget">();
	}
	static class UCoreMenuLoadoutPartWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMenuLoadoutPartWidget>();
	}
};
static_assert(alignof(UCoreMenuLoadoutPartWidget) == 0x000008, "Wrong alignment on UCoreMenuLoadoutPartWidget");
static_assert(sizeof(UCoreMenuLoadoutPartWidget) == 0x0005B0, "Wrong size on UCoreMenuLoadoutPartWidget");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, slotIndex) == 0x0004D8, "Member 'UCoreMenuLoadoutPartWidget::slotIndex' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, HorizontalAlignment) == 0x0004D9, "Member 'UCoreMenuLoadoutPartWidget::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, VerticalAlignment) == 0x0004DA, "Member 'UCoreMenuLoadoutPartWidget::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, ShouldOverrideWidgetScale) == 0x0004DB, "Member 'UCoreMenuLoadoutPartWidget::ShouldOverrideWidgetScale' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, WidgetScaleOverrideValue) == 0x0004DC, "Member 'UCoreMenuLoadoutPartWidget::WidgetScaleOverrideValue' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, ShouldOverrideStackCountFontSize) == 0x0004E0, "Member 'UCoreMenuLoadoutPartWidget::ShouldOverrideStackCountFontSize' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, StackCountFontSizeOverrideValue) == 0x0004E4, "Member 'UCoreMenuLoadoutPartWidget::StackCountFontSizeOverrideValue' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, ShowShadowOffset) == 0x0004E8, "Member 'UCoreMenuLoadoutPartWidget::ShowShadowOffset' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, UnavailableRenderOpacity) == 0x0004EC, "Member 'UCoreMenuLoadoutPartWidget::UnavailableRenderOpacity' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, _configPerDisplayLocation) == 0x0004F0, "Member 'UCoreMenuLoadoutPartWidget::_configPerDisplayLocation' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, MainContent) == 0x000540, "Member 'UCoreMenuLoadoutPartWidget::MainContent' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, RarityIMG) == 0x000548, "Member 'UCoreMenuLoadoutPartWidget::RarityIMG' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, IconIMG) == 0x000550, "Member 'UCoreMenuLoadoutPartWidget::IconIMG' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, KillSwitchIMG) == 0x000558, "Member 'UCoreMenuLoadoutPartWidget::KillSwitchIMG' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, DisabledOverlay) == 0x000560, "Member 'UCoreMenuLoadoutPartWidget::DisabledOverlay' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, LockedIcon) == 0x000568, "Member 'UCoreMenuLoadoutPartWidget::LockedIcon' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, Background) == 0x000570, "Member 'UCoreMenuLoadoutPartWidget::Background' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, ShadowOffset) == 0x000578, "Member 'UCoreMenuLoadoutPartWidget::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, Selected) == 0x000580, "Member 'UCoreMenuLoadoutPartWidget::Selected' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, OnHoverBorder) == 0x000588, "Member 'UCoreMenuLoadoutPartWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, StackCountTB) == 0x000590, "Member 'UCoreMenuLoadoutPartWidget::StackCountTB' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, PlusSignIcon) == 0x000598, "Member 'UCoreMenuLoadoutPartWidget::PlusSignIcon' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, _loadoutPartData) == 0x0005A0, "Member 'UCoreMenuLoadoutPartWidget::_loadoutPartData' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, _currentDisplayLocation) == 0x0005A8, "Member 'UCoreMenuLoadoutPartWidget::_currentDisplayLocation' has a wrong offset!");

// Class DBDUIViewsCore.CoreMenuItemWidget
// 0x0000 (0x05B0 - 0x05B0)
class UCoreMenuItemWidget final : public UCoreMenuLoadoutPartWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMenuItemWidget">();
	}
	static class UCoreMenuItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMenuItemWidget>();
	}
};
static_assert(alignof(UCoreMenuItemWidget) == 0x000008, "Wrong alignment on UCoreMenuItemWidget");
static_assert(sizeof(UCoreMenuItemWidget) == 0x0005B0, "Wrong size on UCoreMenuItemWidget");

// Class DBDUIViewsCore.CoreArchiveVignetteCinematicButton
// 0x0008 (0x0518 - 0x0510)
class UCoreArchiveVignetteCinematicButton final : public UCoreTabWidget
{
public:
	bool                                          isForceDisabled;                                   // 0x0510(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_511[0x7];                                      // 0x0511(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIsForceDisabled(bool isForceDisabled_0);
	void UnlockCinematic();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveVignetteCinematicButton">();
	}
	static class UCoreArchiveVignetteCinematicButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveVignetteCinematicButton>();
	}
};
static_assert(alignof(UCoreArchiveVignetteCinematicButton) == 0x000008, "Wrong alignment on UCoreArchiveVignetteCinematicButton");
static_assert(sizeof(UCoreArchiveVignetteCinematicButton) == 0x000518, "Wrong size on UCoreArchiveVignetteCinematicButton");
static_assert(offsetof(UCoreArchiveVignetteCinematicButton, isForceDisabled) == 0x000510, "Member 'UCoreArchiveVignetteCinematicButton::isForceDisabled' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveVignetteCinematicContainerWidget
// 0x0000 (0x03D8 - 0x03D8)
class UCoreArchiveVignetteCinematicContainerWidget final : public UCoreTabContainerWidget
{
public:
	void UnlockCinematics();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveVignetteCinematicContainerWidget">();
	}
	static class UCoreArchiveVignetteCinematicContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveVignetteCinematicContainerWidget>();
	}
};
static_assert(alignof(UCoreArchiveVignetteCinematicContainerWidget) == 0x000008, "Wrong alignment on UCoreArchiveVignetteCinematicContainerWidget");
static_assert(sizeof(UCoreArchiveVignetteCinematicContainerWidget) == 0x0003D8, "Wrong size on UCoreArchiveVignetteCinematicContainerWidget");

// Class DBDUIViewsCore.CoreMatchmakingReadyMarkerWidget
// 0x0150 (0x0470 - 0x0320)
class UCoreMatchmakingReadyMarkerWidget final : public UCoreBaseUserWidget
{
public:
	TSubclassOf<class UDBDImage>                  _readyMarkerClass;                                 // 0x0320(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           _emptyColor;                                       // 0x0328(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           _joinedColor;                                      // 0x0338(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           _readyColor;                                       // 0x0348(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _readyMarkerMargins;                               // 0x0358(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            _readyMarkerBrush;                                 // 0x0370(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         ReadyMarkerContainer;                              // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UDBDImage*>                      _readyMarkers;                                     // 0x0448(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_458[0x18];                                     // 0x0458(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetNumberOfMarkers(int32 numberOfMarkers);
	void SetReadyStatus(const struct FMatchmakingReadyStatusViewData& status);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMatchmakingReadyMarkerWidget">();
	}
	static class UCoreMatchmakingReadyMarkerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMatchmakingReadyMarkerWidget>();
	}
};
static_assert(alignof(UCoreMatchmakingReadyMarkerWidget) == 0x000010, "Wrong alignment on UCoreMatchmakingReadyMarkerWidget");
static_assert(sizeof(UCoreMatchmakingReadyMarkerWidget) == 0x000470, "Wrong size on UCoreMatchmakingReadyMarkerWidget");
static_assert(offsetof(UCoreMatchmakingReadyMarkerWidget, _readyMarkerClass) == 0x000320, "Member 'UCoreMatchmakingReadyMarkerWidget::_readyMarkerClass' has a wrong offset!");
static_assert(offsetof(UCoreMatchmakingReadyMarkerWidget, _emptyColor) == 0x000328, "Member 'UCoreMatchmakingReadyMarkerWidget::_emptyColor' has a wrong offset!");
static_assert(offsetof(UCoreMatchmakingReadyMarkerWidget, _joinedColor) == 0x000338, "Member 'UCoreMatchmakingReadyMarkerWidget::_joinedColor' has a wrong offset!");
static_assert(offsetof(UCoreMatchmakingReadyMarkerWidget, _readyColor) == 0x000348, "Member 'UCoreMatchmakingReadyMarkerWidget::_readyColor' has a wrong offset!");
static_assert(offsetof(UCoreMatchmakingReadyMarkerWidget, _readyMarkerMargins) == 0x000358, "Member 'UCoreMatchmakingReadyMarkerWidget::_readyMarkerMargins' has a wrong offset!");
static_assert(offsetof(UCoreMatchmakingReadyMarkerWidget, _readyMarkerBrush) == 0x000370, "Member 'UCoreMatchmakingReadyMarkerWidget::_readyMarkerBrush' has a wrong offset!");
static_assert(offsetof(UCoreMatchmakingReadyMarkerWidget, ReadyMarkerContainer) == 0x000440, "Member 'UCoreMatchmakingReadyMarkerWidget::ReadyMarkerContainer' has a wrong offset!");
static_assert(offsetof(UCoreMatchmakingReadyMarkerWidget, _readyMarkers) == 0x000448, "Member 'UCoreMatchmakingReadyMarkerWidget::_readyMarkers' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget
// 0x0018 (0x0528 - 0x0510)
class UCoreArchiveVignetteEntryButtonWidget final : public UCoreTabWidget
{
public:
	class UTexture2D*                             TextIcon;                                          // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             ImageIcon;                                         // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_520[0x8];                                      // 0x0520(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetData(const int32 entryNumber, const bool IsRead, const bool isImage);
	void SetVisualData(const int32 entryNumber, const bool IsRead, const class FText& unreadIndicatorText, const bool isImage);
	void UnlockEntry();

	const int32 GetEntryNumber() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveVignetteEntryButtonWidget">();
	}
	static class UCoreArchiveVignetteEntryButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveVignetteEntryButtonWidget>();
	}
};
static_assert(alignof(UCoreArchiveVignetteEntryButtonWidget) == 0x000008, "Wrong alignment on UCoreArchiveVignetteEntryButtonWidget");
static_assert(sizeof(UCoreArchiveVignetteEntryButtonWidget) == 0x000528, "Wrong size on UCoreArchiveVignetteEntryButtonWidget");
static_assert(offsetof(UCoreArchiveVignetteEntryButtonWidget, TextIcon) == 0x000510, "Member 'UCoreArchiveVignetteEntryButtonWidget::TextIcon' has a wrong offset!");
static_assert(offsetof(UCoreArchiveVignetteEntryButtonWidget, ImageIcon) == 0x000518, "Member 'UCoreArchiveVignetteEntryButtonWidget::ImageIcon' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveVignetteEntryContainerWidget
// 0x0040 (0x0418 - 0x03D8)
class UCoreArchiveVignetteEntryContainerWidget final : public UCoreTabContainerWidget
{
public:
	uint8                                         Pad_3D8[0x20];                                     // 0x03D8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UProgressBar*                           JournalProgressBar;                                // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   AnimationEasing;                                   // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_401[0x3];                                      // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProgressAnimationDuration;                         // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UUITweenInstance*>               _activeTweens;                                     // 0x0408(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void OnUnlockComplete(class UUITweenInstance* tween);
	void OnUnlockProgress(class UUITweenInstance* tween);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveVignetteEntryContainerWidget">();
	}
	static class UCoreArchiveVignetteEntryContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveVignetteEntryContainerWidget>();
	}
};
static_assert(alignof(UCoreArchiveVignetteEntryContainerWidget) == 0x000008, "Wrong alignment on UCoreArchiveVignetteEntryContainerWidget");
static_assert(sizeof(UCoreArchiveVignetteEntryContainerWidget) == 0x000418, "Wrong size on UCoreArchiveVignetteEntryContainerWidget");
static_assert(offsetof(UCoreArchiveVignetteEntryContainerWidget, JournalProgressBar) == 0x0003F8, "Member 'UCoreArchiveVignetteEntryContainerWidget::JournalProgressBar' has a wrong offset!");
static_assert(offsetof(UCoreArchiveVignetteEntryContainerWidget, AnimationEasing) == 0x000400, "Member 'UCoreArchiveVignetteEntryContainerWidget::AnimationEasing' has a wrong offset!");
static_assert(offsetof(UCoreArchiveVignetteEntryContainerWidget, ProgressAnimationDuration) == 0x000404, "Member 'UCoreArchiveVignetteEntryContainerWidget::ProgressAnimationDuration' has a wrong offset!");
static_assert(offsetof(UCoreArchiveVignetteEntryContainerWidget, _activeTweens) == 0x000408, "Member 'UCoreArchiveVignetteEntryContainerWidget::_activeTweens' has a wrong offset!");

// Class DBDUIViewsCore.CoreLobbyTitleWidget
// 0x00F0 (0x0410 - 0x0320)
class UCoreLobbyTitleWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _LobbyTitleFadeAnimOnPrestigeUpDuration;           // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _LobbyTitleFadeInDelay;                            // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _lobbyTitleUpdateDelay;                            // 0x0330(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCorePrestigeWidget*                    Prestige;                                          // 0x0338(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TitleTB;                                           // 0x0340(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      SubtitleRTB;                                       // 0x0348(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      SharedPerksTitleRTB;                               // 0x0350(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSharedPerksDisplayWidget*          PerksContainer;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      BloodPointBulkSpendingTitleRTB;                    // 0x0360(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreIconButtonWidget*                  BloodPointBulkSpendingButton;                      // 0x0368(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              Separator;                                         // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _bloodPointBulkSpendingButtonClickedDelegate;      // 0x0378(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _levelUpAnimationDoneDelegate;                     // 0x0388(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	struct FSharedPerksTooltipViewData            SharedPerksTooltipViewData;                        // 0x0398(0x0002)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_39A[0x6];                                      // 0x039A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           _lobbyTitleUpdateTimerHandle;                      // 0x03A0(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLobbyTitleViewData                    _currentLobbyTitleViewData;                        // 0x03A8(0x0068)(Transient, NativeAccessSpecifierPrivate)

public:
	void OnBloodPointBulkSpendingButtonClicked();
	void OnBloodPointBulkSpendingButtonHovered(class UCoreButtonWidget* buttonTarget);
	void OnBloodPointBulkSpendingButtonUnhovered(class UCoreButtonWidget* buttonTarget);
	void OnFadeInAnimationComplete(class UUITweenInstance* tween);
	void OnFadeOutAnimationComplete(class UUITweenInstance* tween);
	void OnPrestigeHovered(class UCoreButtonWidget* buttonTarget);
	void OnPrestigeUnhovered(class UCoreButtonWidget* buttonTarget);
	void PlayLevelUpAnimation(const bool isPrestigeUp);
	void SetData(const struct FLobbyTitleViewData& LobbyTitleViewData);
	void SetLobbyTitleFadeOutAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLobbyTitleWidget">();
	}
	static class UCoreLobbyTitleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLobbyTitleWidget>();
	}
};
static_assert(alignof(UCoreLobbyTitleWidget) == 0x000008, "Wrong alignment on UCoreLobbyTitleWidget");
static_assert(sizeof(UCoreLobbyTitleWidget) == 0x000410, "Wrong size on UCoreLobbyTitleWidget");
static_assert(offsetof(UCoreLobbyTitleWidget, _LobbyTitleFadeAnimOnPrestigeUpDuration) == 0x000328, "Member 'UCoreLobbyTitleWidget::_LobbyTitleFadeAnimOnPrestigeUpDuration' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, _LobbyTitleFadeInDelay) == 0x00032C, "Member 'UCoreLobbyTitleWidget::_LobbyTitleFadeInDelay' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, _lobbyTitleUpdateDelay) == 0x000330, "Member 'UCoreLobbyTitleWidget::_lobbyTitleUpdateDelay' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, Prestige) == 0x000338, "Member 'UCoreLobbyTitleWidget::Prestige' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, TitleTB) == 0x000340, "Member 'UCoreLobbyTitleWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, SubtitleRTB) == 0x000348, "Member 'UCoreLobbyTitleWidget::SubtitleRTB' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, SharedPerksTitleRTB) == 0x000350, "Member 'UCoreLobbyTitleWidget::SharedPerksTitleRTB' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, PerksContainer) == 0x000358, "Member 'UCoreLobbyTitleWidget::PerksContainer' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, BloodPointBulkSpendingTitleRTB) == 0x000360, "Member 'UCoreLobbyTitleWidget::BloodPointBulkSpendingTitleRTB' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, BloodPointBulkSpendingButton) == 0x000368, "Member 'UCoreLobbyTitleWidget::BloodPointBulkSpendingButton' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, Separator) == 0x000370, "Member 'UCoreLobbyTitleWidget::Separator' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, _bloodPointBulkSpendingButtonClickedDelegate) == 0x000378, "Member 'UCoreLobbyTitleWidget::_bloodPointBulkSpendingButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, _levelUpAnimationDoneDelegate) == 0x000388, "Member 'UCoreLobbyTitleWidget::_levelUpAnimationDoneDelegate' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, SharedPerksTooltipViewData) == 0x000398, "Member 'UCoreLobbyTitleWidget::SharedPerksTooltipViewData' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, _lobbyTitleUpdateTimerHandle) == 0x0003A0, "Member 'UCoreLobbyTitleWidget::_lobbyTitleUpdateTimerHandle' has a wrong offset!");
static_assert(offsetof(UCoreLobbyTitleWidget, _currentLobbyTitleViewData) == 0x0003A8, "Member 'UCoreLobbyTitleWidget::_currentLobbyTitleViewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreAuricCellsBundleWidget
// 0x0068 (0x0540 - 0x04D8)
class UCoreAuricCellsBundleWidget final : public UCoreSelectableButtonWidget
{
public:
	TMulticastInlineDelegate<void(class FName bundleId)> _buyActionDelegate;                         // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UCorePremiumCurrencyButtonWidget*       BuyButton;                                         // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          BaseAmountTextBlock;                               // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          AmountTextBlock;                                   // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TitleTextBlock;                                    // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           BonusPanel;                                        // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          BonusTextBlock;                                    // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          InfoTextBlock;                                     // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              IconImage;                                         // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_530[0x10];                                     // 0x0530(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBuyButtonClicked(class UCoreButtonWidget* buttonTarget);
	void SetData(const struct FAuricCellsBundleViewData& BundleData);
	void SetRewardHighlight(bool rewardHighlight);
	void SetupAsReward();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreAuricCellsBundleWidget">();
	}
	static class UCoreAuricCellsBundleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreAuricCellsBundleWidget>();
	}
};
static_assert(alignof(UCoreAuricCellsBundleWidget) == 0x000008, "Wrong alignment on UCoreAuricCellsBundleWidget");
static_assert(sizeof(UCoreAuricCellsBundleWidget) == 0x000540, "Wrong size on UCoreAuricCellsBundleWidget");
static_assert(offsetof(UCoreAuricCellsBundleWidget, _buyActionDelegate) == 0x0004D8, "Member 'UCoreAuricCellsBundleWidget::_buyActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsBundleWidget, BuyButton) == 0x0004E8, "Member 'UCoreAuricCellsBundleWidget::BuyButton' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsBundleWidget, BaseAmountTextBlock) == 0x0004F0, "Member 'UCoreAuricCellsBundleWidget::BaseAmountTextBlock' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsBundleWidget, AmountTextBlock) == 0x0004F8, "Member 'UCoreAuricCellsBundleWidget::AmountTextBlock' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsBundleWidget, TitleTextBlock) == 0x000500, "Member 'UCoreAuricCellsBundleWidget::TitleTextBlock' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsBundleWidget, BonusPanel) == 0x000508, "Member 'UCoreAuricCellsBundleWidget::BonusPanel' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsBundleWidget, BonusTextBlock) == 0x000510, "Member 'UCoreAuricCellsBundleWidget::BonusTextBlock' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsBundleWidget, InfoTextBlock) == 0x000518, "Member 'UCoreAuricCellsBundleWidget::InfoTextBlock' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsBundleWidget, IconImage) == 0x000520, "Member 'UCoreAuricCellsBundleWidget::IconImage' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsBundleWidget, OnHoverBorder) == 0x000528, "Member 'UCoreAuricCellsBundleWidget::OnHoverBorder' has a wrong offset!");

// Class DBDUIViewsCore.CoreAuricCellsContainerWidget
// 0x0040 (0x0360 - 0x0320)
class UCoreAuricCellsContainerWidget final : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void(class FName bundleId)> _buyActionDelegate;                         // 0x0320(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreAuricCellsBundleWidget> _tileWidgetClass;                                 // 0x0330(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _tilePadding;                                      // 0x0338(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         container;                                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreAuricCellsBundleWidget*>    _tiles;                                            // 0x0350(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void OnBuyAction(class FName bundleId);
	void SetData(const TArray<struct FAuricCellsBundleViewData>& bundlesData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreAuricCellsContainerWidget">();
	}
	static class UCoreAuricCellsContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreAuricCellsContainerWidget>();
	}
};
static_assert(alignof(UCoreAuricCellsContainerWidget) == 0x000008, "Wrong alignment on UCoreAuricCellsContainerWidget");
static_assert(sizeof(UCoreAuricCellsContainerWidget) == 0x000360, "Wrong size on UCoreAuricCellsContainerWidget");
static_assert(offsetof(UCoreAuricCellsContainerWidget, _buyActionDelegate) == 0x000320, "Member 'UCoreAuricCellsContainerWidget::_buyActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsContainerWidget, _tileWidgetClass) == 0x000330, "Member 'UCoreAuricCellsContainerWidget::_tileWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsContainerWidget, _tilePadding) == 0x000338, "Member 'UCoreAuricCellsContainerWidget::_tilePadding' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsContainerWidget, container) == 0x000348, "Member 'UCoreAuricCellsContainerWidget::container' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsContainerWidget, _tiles) == 0x000350, "Member 'UCoreAuricCellsContainerWidget::_tiles' has a wrong offset!");

// Class DBDUIViewsCore.CoreMenuAddonWidget
// 0x0010 (0x05C0 - 0x05B0)
class UCoreMenuAddonWidget final : public UCoreMenuLoadoutPartWidget
{
public:
	class UDBDImage*                              AddOnPlusIcon;                                     // 0x05B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _addonInventoryScale;                              // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5BC[0x4];                                      // 0x05BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetAddonInventoryScale();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMenuAddonWidget">();
	}
	static class UCoreMenuAddonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMenuAddonWidget>();
	}
};
static_assert(alignof(UCoreMenuAddonWidget) == 0x000008, "Wrong alignment on UCoreMenuAddonWidget");
static_assert(sizeof(UCoreMenuAddonWidget) == 0x0005C0, "Wrong size on UCoreMenuAddonWidget");
static_assert(offsetof(UCoreMenuAddonWidget, AddOnPlusIcon) == 0x0005B0, "Member 'UCoreMenuAddonWidget::AddOnPlusIcon' has a wrong offset!");
static_assert(offsetof(UCoreMenuAddonWidget, _addonInventoryScale) == 0x0005B8, "Member 'UCoreMenuAddonWidget::_addonInventoryScale' has a wrong offset!");

// Class DBDUIViewsCore.CoreAuricCellsWidget
// 0x0088 (0x03A8 - 0x0320)
class UCoreAuricCellsWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              _backActionDelegate;                               // 0x0328(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class FName bundleId)> _buyActionDelegate;                         // 0x0338(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _supportACreatorActionDelegate;                    // 0x0348(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreAuricCellsContainerWidget*         container;                                         // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TitleTB;                                           // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          EmptyBundlesTitleTB;                               // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          EmptyBundlesDescriptionTB;                         // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           SupportACreatorSection;                            // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               SupportACreatorInputSwitcher;                      // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SupportACreatorTB;                                 // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioEventWrapper*                     _openSfx;                                          // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioEventWrapper*                     _closeSfx;                                         // 0x03A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnBuyAction(class FName bundleId);
	void OnSupportACreatorInputSwitcherClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreAuricCellsWidget">();
	}
	static class UCoreAuricCellsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreAuricCellsWidget>();
	}
};
static_assert(alignof(UCoreAuricCellsWidget) == 0x000008, "Wrong alignment on UCoreAuricCellsWidget");
static_assert(sizeof(UCoreAuricCellsWidget) == 0x0003A8, "Wrong size on UCoreAuricCellsWidget");
static_assert(offsetof(UCoreAuricCellsWidget, _backActionDelegate) == 0x000328, "Member 'UCoreAuricCellsWidget::_backActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsWidget, _buyActionDelegate) == 0x000338, "Member 'UCoreAuricCellsWidget::_buyActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsWidget, _supportACreatorActionDelegate) == 0x000348, "Member 'UCoreAuricCellsWidget::_supportACreatorActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsWidget, BackInputSwitcher) == 0x000358, "Member 'UCoreAuricCellsWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsWidget, container) == 0x000360, "Member 'UCoreAuricCellsWidget::container' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsWidget, TitleTB) == 0x000368, "Member 'UCoreAuricCellsWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsWidget, EmptyBundlesTitleTB) == 0x000370, "Member 'UCoreAuricCellsWidget::EmptyBundlesTitleTB' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsWidget, EmptyBundlesDescriptionTB) == 0x000378, "Member 'UCoreAuricCellsWidget::EmptyBundlesDescriptionTB' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsWidget, SupportACreatorSection) == 0x000380, "Member 'UCoreAuricCellsWidget::SupportACreatorSection' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsWidget, SupportACreatorInputSwitcher) == 0x000388, "Member 'UCoreAuricCellsWidget::SupportACreatorInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsWidget, SupportACreatorTB) == 0x000390, "Member 'UCoreAuricCellsWidget::SupportACreatorTB' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsWidget, _openSfx) == 0x000398, "Member 'UCoreAuricCellsWidget::_openSfx' has a wrong offset!");
static_assert(offsetof(UCoreAuricCellsWidget, _closeSfx) == 0x0003A0, "Member 'UCoreAuricCellsWidget::_closeSfx' has a wrong offset!");

// Class DBDUIViewsCore.CoreBloodPointBulkSpendingPopupWidget
// 0x0140 (0x04C8 - 0x0388)
class UCoreBloodPointBulkSpendingPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DefaultInputTextColor;                             // 0x0390(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DisabledInputTextColor;                            // 0x03A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _levelChangeTimeCurve;                             // 0x03B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _levelChangeUnitCurve;                             // 0x03B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               MinInputSwitcher;                                  // 0x03C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               LessInputSwitcher;                                 // 0x03C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               MoreInputSwitcher;                                 // 0x03D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               MaxInputSwitcher;                                  // 0x03D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LevelsTitleTB;                                     // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDEditableTextBox*                    InputTextBox;                                      // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePrestigeWidget*                    CurrentPrestige;                                   // 0x03F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CurrentPrestigeLevelTB;                            // 0x03F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CurrentLevelTB;                                    // 0x0400(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePrestigeWidget*                    expectedPrestige;                                  // 0x0408(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ExpectedPrestigeLevelTB;                           // 0x0410(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ExpectedLevelTB;                                   // 0x0418(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ErrorMessageTB;                                    // 0x0420(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreCurrencyInputSwitcherWidget*       ConfirmButton;                                     // 0x0428(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDButton*                             HitzoneButton;                                     // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBloodPointBulkSpendingPopupViewData*   _viewData;                                         // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_440[0x88];                                     // 0x0440(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnConfirmButtonHovered(class UCoreButtonWidget* buttonTarget);
	void OnConfirmButtonUnhovered(class UCoreButtonWidget* buttonTarget);
	void OnConfirmClicked(ECurrencyType currencyType);
	void OnHitzoneHovered();
	void OnHitzoneUnhovered();
	void OnInputButtonPressed(class UCoreButtonWidget* buttonTarget);
	void OnInputButtonReleased(class UCoreButtonWidget* buttonTarget);
	void OnInputChanged();
	void OnInputPromptPressed();
	void OnInputPromptReleased();
	void OnLessInputTriggered();
	void OnMaxInputTriggered();
	void OnMinInputTriggered();
	void OnMoreInputTriggered();
	void OnValueChanged(const class FText& InText);
	void OnValueCommitted(const class FText& InText, ETextCommit inCommitType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreBloodPointBulkSpendingPopupWidget">();
	}
	static class UCoreBloodPointBulkSpendingPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreBloodPointBulkSpendingPopupWidget>();
	}
};
static_assert(alignof(UCoreBloodPointBulkSpendingPopupWidget) == 0x000008, "Wrong alignment on UCoreBloodPointBulkSpendingPopupWidget");
static_assert(sizeof(UCoreBloodPointBulkSpendingPopupWidget) == 0x0004C8, "Wrong size on UCoreBloodPointBulkSpendingPopupWidget");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, DefaultInputTextColor) == 0x000390, "Member 'UCoreBloodPointBulkSpendingPopupWidget::DefaultInputTextColor' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, DisabledInputTextColor) == 0x0003A0, "Member 'UCoreBloodPointBulkSpendingPopupWidget::DisabledInputTextColor' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, _levelChangeTimeCurve) == 0x0003B0, "Member 'UCoreBloodPointBulkSpendingPopupWidget::_levelChangeTimeCurve' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, _levelChangeUnitCurve) == 0x0003B8, "Member 'UCoreBloodPointBulkSpendingPopupWidget::_levelChangeUnitCurve' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, MinInputSwitcher) == 0x0003C0, "Member 'UCoreBloodPointBulkSpendingPopupWidget::MinInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, LessInputSwitcher) == 0x0003C8, "Member 'UCoreBloodPointBulkSpendingPopupWidget::LessInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, MoreInputSwitcher) == 0x0003D0, "Member 'UCoreBloodPointBulkSpendingPopupWidget::MoreInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, MaxInputSwitcher) == 0x0003D8, "Member 'UCoreBloodPointBulkSpendingPopupWidget::MaxInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, LevelsTitleTB) == 0x0003E0, "Member 'UCoreBloodPointBulkSpendingPopupWidget::LevelsTitleTB' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, InputTextBox) == 0x0003E8, "Member 'UCoreBloodPointBulkSpendingPopupWidget::InputTextBox' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, CurrentPrestige) == 0x0003F0, "Member 'UCoreBloodPointBulkSpendingPopupWidget::CurrentPrestige' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, CurrentPrestigeLevelTB) == 0x0003F8, "Member 'UCoreBloodPointBulkSpendingPopupWidget::CurrentPrestigeLevelTB' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, CurrentLevelTB) == 0x000400, "Member 'UCoreBloodPointBulkSpendingPopupWidget::CurrentLevelTB' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, expectedPrestige) == 0x000408, "Member 'UCoreBloodPointBulkSpendingPopupWidget::expectedPrestige' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, ExpectedPrestigeLevelTB) == 0x000410, "Member 'UCoreBloodPointBulkSpendingPopupWidget::ExpectedPrestigeLevelTB' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, ExpectedLevelTB) == 0x000418, "Member 'UCoreBloodPointBulkSpendingPopupWidget::ExpectedLevelTB' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, ErrorMessageTB) == 0x000420, "Member 'UCoreBloodPointBulkSpendingPopupWidget::ErrorMessageTB' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, ConfirmButton) == 0x000428, "Member 'UCoreBloodPointBulkSpendingPopupWidget::ConfirmButton' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, HitzoneButton) == 0x000430, "Member 'UCoreBloodPointBulkSpendingPopupWidget::HitzoneButton' has a wrong offset!");
static_assert(offsetof(UCoreBloodPointBulkSpendingPopupWidget, _viewData) == 0x000438, "Member 'UCoreBloodPointBulkSpendingPopupWidget::_viewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreMenuPerkWidget
// 0x0018 (0x05C8 - 0x05B0)
class UCoreMenuPerkWidget final : public UCoreMenuLoadoutPartWidget
{
public:
	class UDBDImage*                              LevelImage;                                        // 0x05B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          UnlockLevelLabelTB;                                // 0x05B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               RandomPerkOverlay;                                 // 0x05C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void PlayEmptySlotAnimation();
	void PlayUnlockanimation();
	void SetMenuPerkLevel(int32 Level);
	void SetPerkLocked(const int32 perkUnlockLevel);
	void SetPerkUnlocked();
	void StopAllUnlockAnimations();
	void StopEmptySlotAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMenuPerkWidget">();
	}
	static class UCoreMenuPerkWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMenuPerkWidget>();
	}
};
static_assert(alignof(UCoreMenuPerkWidget) == 0x000008, "Wrong alignment on UCoreMenuPerkWidget");
static_assert(sizeof(UCoreMenuPerkWidget) == 0x0005C8, "Wrong size on UCoreMenuPerkWidget");
static_assert(offsetof(UCoreMenuPerkWidget, LevelImage) == 0x0005B0, "Member 'UCoreMenuPerkWidget::LevelImage' has a wrong offset!");
static_assert(offsetof(UCoreMenuPerkWidget, UnlockLevelLabelTB) == 0x0005B8, "Member 'UCoreMenuPerkWidget::UnlockLevelLabelTB' has a wrong offset!");
static_assert(offsetof(UCoreMenuPerkWidget, RandomPerkOverlay) == 0x0005C0, "Member 'UCoreMenuPerkWidget::RandomPerkOverlay' has a wrong offset!");

// Class DBDUIViewsCore.CoreChallengeAddFollowedWidget
// 0x0008 (0x0328 - 0x0320)
class UCoreChallengeAddFollowedWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDRichTextBlock*                      MessageRTB;                                        // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChallengeAddFollowedWidget">();
	}
	static class UCoreChallengeAddFollowedWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChallengeAddFollowedWidget>();
	}
};
static_assert(alignof(UCoreChallengeAddFollowedWidget) == 0x000008, "Wrong alignment on UCoreChallengeAddFollowedWidget");
static_assert(sizeof(UCoreChallengeAddFollowedWidget) == 0x000328, "Wrong size on UCoreChallengeAddFollowedWidget");
static_assert(offsetof(UCoreChallengeAddFollowedWidget, MessageRTB) == 0x000320, "Member 'UCoreChallengeAddFollowedWidget::MessageRTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreChallengeCardListWidget
// 0x0070 (0x0390 - 0x0320)
class UCoreChallengeCardListWidget final : public UCoreBaseUserWidget
{
public:
	TSubclassOf<class UCoreChallengeCardWidget>   ChallengeCardWidgetClass;                          // 0x0320(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreChallengeAddFollowedWidget> AddFollowedWidgetClass;                       // 0x0328(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _registerScrollBoxForInput;                        // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                _challengeCardPadding;                             // 0x0334(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         _firstCardExtraTopPadding;                         // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedItemsCount;                         // 0x0348(0x0004)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDScrollBox*                          ChallengeCardsScrollBox;                           // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           ChallengeCardsVerticalBox;                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInfoMessageWidget*                 EmptyInfoMessage;                                  // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               DisabledOverlay;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          DisabledTB;                                        // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _challengeCards;                                   // 0x0378(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreChallengeAddFollowedWidget*        _addFollowedWidget;                                // 0x0380(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnIsScrollableChanged(const bool IsScrollable);
	void SetVisuals(bool IsEmpty);
	void UpdateBackgroundVisuals();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChallengeCardListWidget">();
	}
	static class UCoreChallengeCardListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChallengeCardListWidget>();
	}
};
static_assert(alignof(UCoreChallengeCardListWidget) == 0x000008, "Wrong alignment on UCoreChallengeCardListWidget");
static_assert(sizeof(UCoreChallengeCardListWidget) == 0x000390, "Wrong size on UCoreChallengeCardListWidget");
static_assert(offsetof(UCoreChallengeCardListWidget, ChallengeCardWidgetClass) == 0x000320, "Member 'UCoreChallengeCardListWidget::ChallengeCardWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardListWidget, AddFollowedWidgetClass) == 0x000328, "Member 'UCoreChallengeCardListWidget::AddFollowedWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardListWidget, _registerScrollBoxForInput) == 0x000330, "Member 'UCoreChallengeCardListWidget::_registerScrollBoxForInput' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardListWidget, _challengeCardPadding) == 0x000334, "Member 'UCoreChallengeCardListWidget::_challengeCardPadding' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardListWidget, _firstCardExtraTopPadding) == 0x000344, "Member 'UCoreChallengeCardListWidget::_firstCardExtraTopPadding' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardListWidget, _preConstructedItemsCount) == 0x000348, "Member 'UCoreChallengeCardListWidget::_preConstructedItemsCount' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardListWidget, ChallengeCardsScrollBox) == 0x000350, "Member 'UCoreChallengeCardListWidget::ChallengeCardsScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardListWidget, ChallengeCardsVerticalBox) == 0x000358, "Member 'UCoreChallengeCardListWidget::ChallengeCardsVerticalBox' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardListWidget, EmptyInfoMessage) == 0x000360, "Member 'UCoreChallengeCardListWidget::EmptyInfoMessage' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardListWidget, DisabledOverlay) == 0x000368, "Member 'UCoreChallengeCardListWidget::DisabledOverlay' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardListWidget, DisabledTB) == 0x000370, "Member 'UCoreChallengeCardListWidget::DisabledTB' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardListWidget, _challengeCards) == 0x000378, "Member 'UCoreChallengeCardListWidget::_challengeCards' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardListWidget, _addFollowedWidget) == 0x000380, "Member 'UCoreChallengeCardListWidget::_addFollowedWidget' has a wrong offset!");

// Class DBDUIViewsCore.CoreMatchResultWidget
// 0x00D8 (0x0428 - 0x0350)
class UCoreMatchResultWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _survivorDefaultResultText;                        // 0x0358(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<EGameState, class FText>                 _survivorResultTexts;                              // 0x0370(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   _killerDefaultResultText;                          // 0x03C0(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<EKillerMatchResult, class FText>         _killerResultTexts;                                // 0x03D8(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMatchResultWidget">();
	}
	static class UCoreMatchResultWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMatchResultWidget>();
	}
};
static_assert(alignof(UCoreMatchResultWidget) == 0x000008, "Wrong alignment on UCoreMatchResultWidget");
static_assert(sizeof(UCoreMatchResultWidget) == 0x000428, "Wrong size on UCoreMatchResultWidget");
static_assert(offsetof(UCoreMatchResultWidget, _survivorDefaultResultText) == 0x000358, "Member 'UCoreMatchResultWidget::_survivorDefaultResultText' has a wrong offset!");
static_assert(offsetof(UCoreMatchResultWidget, _survivorResultTexts) == 0x000370, "Member 'UCoreMatchResultWidget::_survivorResultTexts' has a wrong offset!");
static_assert(offsetof(UCoreMatchResultWidget, _killerDefaultResultText) == 0x0003C0, "Member 'UCoreMatchResultWidget::_killerDefaultResultText' has a wrong offset!");
static_assert(offsetof(UCoreMatchResultWidget, _killerResultTexts) == 0x0003D8, "Member 'UCoreMatchResultWidget::_killerResultTexts' has a wrong offset!");

// Class DBDUIViewsCore.CoreChallengeCardWidget
// 0x0D10 (0x11C0 - 0x04B0)
class UCoreChallengeCardWidget : public UCoreButtonWidget
{
public:
	struct FChallengeViewData                     _challengeData;                                    // 0x04B0(0x0C78)(Protected, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SubtitleTB;                                        // 0x1128(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreChallengeIconWidget*               ChallengeIconWidget;                               // 0x1130(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           ProgressBarContainer;                              // 0x1138(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               CompletedOverlay;                                  // 0x1140(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreToggleButtonWidget*                FollowButton;                                      // 0x1148(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         RewardsHorizontalBox;                              // 0x1150(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            NewNotification;                                   // 0x1158(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreRewardWrapperWidget>   RewardWidgetClass;                                 // 0x1160(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreChallengeProgressBarWidget> _challengeProgressBarWidgetClass;             // 0x1168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedProgressBarCount;                   // 0x1170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _progressBarShortTitleCharacterLimit;              // 0x1174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _progressBarLongTitleCharacterLimit;               // 0x1178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _progressBarPadding;                               // 0x117C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                RewardPadding;                                     // 0x118C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_119C[0x4];                                     // 0x119C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCorePreConstructableList*              _progressBarList;                                  // 0x11A0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreRewardWrapperWidget*>       _rewardWidgets;                                    // 0x11A8(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          _isInMatchDetails;                                 // 0x11B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11B9[0x7];                                     // 0x11B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRewardHoveredCallback(class UCoreButtonWidget* targetButton);
	void OnRewardUnhoveredCallback(class UCoreButtonWidget* targetButton);
	void UpdateHeaderBackground(EPlayerRole Role);
	void UpdateRewardVisuals();
	void UpdateVisuals(bool IsCompleted, bool IsHovered_0);

	class FText GetLabelTooltipText() const;
	bool IsChallengeCompleted() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChallengeCardWidget">();
	}
	static class UCoreChallengeCardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChallengeCardWidget>();
	}
};
static_assert(alignof(UCoreChallengeCardWidget) == 0x000008, "Wrong alignment on UCoreChallengeCardWidget");
static_assert(sizeof(UCoreChallengeCardWidget) == 0x0011C0, "Wrong size on UCoreChallengeCardWidget");
static_assert(offsetof(UCoreChallengeCardWidget, _challengeData) == 0x0004B0, "Member 'UCoreChallengeCardWidget::_challengeData' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, SubtitleTB) == 0x001128, "Member 'UCoreChallengeCardWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, ChallengeIconWidget) == 0x001130, "Member 'UCoreChallengeCardWidget::ChallengeIconWidget' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, ProgressBarContainer) == 0x001138, "Member 'UCoreChallengeCardWidget::ProgressBarContainer' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, CompletedOverlay) == 0x001140, "Member 'UCoreChallengeCardWidget::CompletedOverlay' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, FollowButton) == 0x001148, "Member 'UCoreChallengeCardWidget::FollowButton' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, RewardsHorizontalBox) == 0x001150, "Member 'UCoreChallengeCardWidget::RewardsHorizontalBox' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, NewNotification) == 0x001158, "Member 'UCoreChallengeCardWidget::NewNotification' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, RewardWidgetClass) == 0x001160, "Member 'UCoreChallengeCardWidget::RewardWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, _challengeProgressBarWidgetClass) == 0x001168, "Member 'UCoreChallengeCardWidget::_challengeProgressBarWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, _preConstructedProgressBarCount) == 0x001170, "Member 'UCoreChallengeCardWidget::_preConstructedProgressBarCount' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, _progressBarShortTitleCharacterLimit) == 0x001174, "Member 'UCoreChallengeCardWidget::_progressBarShortTitleCharacterLimit' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, _progressBarLongTitleCharacterLimit) == 0x001178, "Member 'UCoreChallengeCardWidget::_progressBarLongTitleCharacterLimit' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, _progressBarPadding) == 0x00117C, "Member 'UCoreChallengeCardWidget::_progressBarPadding' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, RewardPadding) == 0x00118C, "Member 'UCoreChallengeCardWidget::RewardPadding' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, _progressBarList) == 0x0011A0, "Member 'UCoreChallengeCardWidget::_progressBarList' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, _rewardWidgets) == 0x0011A8, "Member 'UCoreChallengeCardWidget::_rewardWidgets' has a wrong offset!");
static_assert(offsetof(UCoreChallengeCardWidget, _isInMatchDetails) == 0x0011B8, "Member 'UCoreChallengeCardWidget::_isInMatchDetails' has a wrong offset!");

// Class DBDUIViewsCore.CoreChallengeFilterWidget
// 0x0020 (0x03B8 - 0x0398)
class UCoreChallengeFilterWidget : public UBaseFilterWidget
{
public:
	TMulticastInlineDelegate<void()>              _onClearFiltersClicked;                            // 0x0398(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _onFiltersChanged;                                 // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void OnClearFiltersClicked(class UCoreButtonWidget* buttonTarget);
	void OnSortingChanged(ESortingOption sorting, ESortingOrder Order);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChallengeFilterWidget">();
	}
	static class UCoreChallengeFilterWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChallengeFilterWidget>();
	}
};
static_assert(alignof(UCoreChallengeFilterWidget) == 0x000008, "Wrong alignment on UCoreChallengeFilterWidget");
static_assert(sizeof(UCoreChallengeFilterWidget) == 0x0003B8, "Wrong size on UCoreChallengeFilterWidget");
static_assert(offsetof(UCoreChallengeFilterWidget, _onClearFiltersClicked) == 0x000398, "Member 'UCoreChallengeFilterWidget::_onClearFiltersClicked' has a wrong offset!");
static_assert(offsetof(UCoreChallengeFilterWidget, _onFiltersChanged) == 0x0003A8, "Member 'UCoreChallengeFilterWidget::_onFiltersChanged' has a wrong offset!");

// Class DBDUIViewsCore.CoreChallengeIconWidget
// 0x0018 (0x0338 - 0x0320)
class UCoreChallengeIconWidget : public UCoreBaseUserWidget
{
public:
	class UDBDImage*                              ChallengeIcon;                                     // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              Shadow;                                            // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextureLoadingWrapper*                 _imageLoader;                                      // 0x0330(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetChallengeData(const struct FChallengeViewData& ChallengeData);
	void SetDefaultVisuals(EPlayerRole Role);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChallengeIconWidget">();
	}
	static class UCoreChallengeIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChallengeIconWidget>();
	}
};
static_assert(alignof(UCoreChallengeIconWidget) == 0x000008, "Wrong alignment on UCoreChallengeIconWidget");
static_assert(sizeof(UCoreChallengeIconWidget) == 0x000338, "Wrong size on UCoreChallengeIconWidget");
static_assert(offsetof(UCoreChallengeIconWidget, ChallengeIcon) == 0x000320, "Member 'UCoreChallengeIconWidget::ChallengeIcon' has a wrong offset!");
static_assert(offsetof(UCoreChallengeIconWidget, Shadow) == 0x000328, "Member 'UCoreChallengeIconWidget::Shadow' has a wrong offset!");
static_assert(offsetof(UCoreChallengeIconWidget, _imageLoader) == 0x000330, "Member 'UCoreChallengeIconWidget::_imageLoader' has a wrong offset!");

// Class DBDUIViewsCore.CoreExpandableListWidget
// 0x0018 (0x04C8 - 0x04B0)
class UCoreExpandableListWidget : public UCoreButtonWidget
{
public:
	class UDBDTextBlock*                          TitleTB;                                           // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           ContentContainer;                                  // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C0[0x8];                                      // 0x04C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetExpandable(bool IsExpandable);
	void SetExpanded(bool shouldBeExpanded);
	void SetInitialVisuals(bool IsExpanded);
	void UpdateVisuals();

	bool IsExpandable() const;
	bool IsExpanded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreExpandableListWidget">();
	}
	static class UCoreExpandableListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreExpandableListWidget>();
	}
};
static_assert(alignof(UCoreExpandableListWidget) == 0x000008, "Wrong alignment on UCoreExpandableListWidget");
static_assert(sizeof(UCoreExpandableListWidget) == 0x0004C8, "Wrong size on UCoreExpandableListWidget");
static_assert(offsetof(UCoreExpandableListWidget, TitleTB) == 0x0004B0, "Member 'UCoreExpandableListWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreExpandableListWidget, ContentContainer) == 0x0004B8, "Member 'UCoreExpandableListWidget::ContentContainer' has a wrong offset!");

// Class DBDUIViewsCore.CorePerkWidget
// 0x0018 (0x0368 - 0x0350)
class UCorePerkWidget final : public UCoreBaseLoadoutPartWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnPerkRevealed;                                    // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePerkWidget">();
	}
	static class UCorePerkWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePerkWidget>();
	}
};
static_assert(alignof(UCorePerkWidget) == 0x000008, "Wrong alignment on UCorePerkWidget");
static_assert(sizeof(UCorePerkWidget) == 0x000368, "Wrong size on UCorePerkWidget");
static_assert(offsetof(UCorePerkWidget, OnPerkRevealed) == 0x000358, "Member 'UCorePerkWidget::OnPerkRevealed' has a wrong offset!");

// Class DBDUIViewsCore.CoreChallengeMenuSubListWidget
// 0x0018 (0x04E0 - 0x04C8)
class UCoreChallengeMenuSubListWidget : public UCoreExpandableListWidget
{
public:
	class UDBDTextBlock*                          ProgressTB;                                        // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          AvailableTB;                                       // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D8[0x8];                                      // 0x04D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsCompleted() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChallengeMenuSubListWidget">();
	}
	static class UCoreChallengeMenuSubListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChallengeMenuSubListWidget>();
	}
};
static_assert(alignof(UCoreChallengeMenuSubListWidget) == 0x000008, "Wrong alignment on UCoreChallengeMenuSubListWidget");
static_assert(sizeof(UCoreChallengeMenuSubListWidget) == 0x0004E0, "Wrong size on UCoreChallengeMenuSubListWidget");
static_assert(offsetof(UCoreChallengeMenuSubListWidget, ProgressTB) == 0x0004C8, "Member 'UCoreChallengeMenuSubListWidget::ProgressTB' has a wrong offset!");
static_assert(offsetof(UCoreChallengeMenuSubListWidget, AvailableTB) == 0x0004D0, "Member 'UCoreChallengeMenuSubListWidget::AvailableTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreChallengeProgressBarWidget
// 0x0018 (0x0338 - 0x0320)
class UCoreChallengeProgressBarWidget : public UCoreBaseUserWidget
{
public:
	class UDBDRichTextBlock*                      TitleRTB;                                          // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ProgressBar;                                       // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ProgressionTB;                                     // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetChallengeData(const class FText& descriptionText, const float progressFraction, const class FText& ProgressText, int32 titleCharacterLimit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChallengeProgressBarWidget">();
	}
	static class UCoreChallengeProgressBarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChallengeProgressBarWidget>();
	}
};
static_assert(alignof(UCoreChallengeProgressBarWidget) == 0x000008, "Wrong alignment on UCoreChallengeProgressBarWidget");
static_assert(sizeof(UCoreChallengeProgressBarWidget) == 0x000338, "Wrong size on UCoreChallengeProgressBarWidget");
static_assert(offsetof(UCoreChallengeProgressBarWidget, TitleRTB) == 0x000320, "Member 'UCoreChallengeProgressBarWidget::TitleRTB' has a wrong offset!");
static_assert(offsetof(UCoreChallengeProgressBarWidget, ProgressBar) == 0x000328, "Member 'UCoreChallengeProgressBarWidget::ProgressBar' has a wrong offset!");
static_assert(offsetof(UCoreChallengeProgressBarWidget, ProgressionTB) == 0x000330, "Member 'UCoreChallengeProgressBarWidget::ProgressionTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreChallengeSetItemWidget
// 0x00A0 (0x0578 - 0x04D8)
class UCoreChallengeSetItemWidget : public UCoreSelectableButtonWidget
{
public:
	class UMaterialInstance*                      _headerBackgroundColorMaterial;                    // 0x04D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              IconImage;                                         // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              HeaderBackground;                                  // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TitleTB;                                           // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      RiftExpiredRTB;                                    // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         TimerHorizontalBox;                                // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TimerTB;                                           // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CompletedQuestsTB;                                 // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            NewNotification;                                   // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isExpired;                                        // 0x0528(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _showNew;                                          // 0x0529(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_52A[0x6];                                      // 0x052A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureLoadingWrapper*                 _imageLoader;                                      // 0x0530(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextureLoadingWrapper*                 _imageBackgroundLoader;                            // 0x0538(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_540[0x38];                                     // 0x0540(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetChallengeSetData(const struct FChallengeSetMenuViewData& ViewData, const struct FChallengeSkinUIData& challengeSkinData);
	void SetColorBackground(class UColorTripleDataAsset* Color);
	void SetExpiredStateVisuals(bool isExpired);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChallengeSetItemWidget">();
	}
	static class UCoreChallengeSetItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChallengeSetItemWidget>();
	}
};
static_assert(alignof(UCoreChallengeSetItemWidget) == 0x000008, "Wrong alignment on UCoreChallengeSetItemWidget");
static_assert(sizeof(UCoreChallengeSetItemWidget) == 0x000578, "Wrong size on UCoreChallengeSetItemWidget");
static_assert(offsetof(UCoreChallengeSetItemWidget, _headerBackgroundColorMaterial) == 0x0004D8, "Member 'UCoreChallengeSetItemWidget::_headerBackgroundColorMaterial' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetItemWidget, OnHoverBorder) == 0x0004E0, "Member 'UCoreChallengeSetItemWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetItemWidget, IconImage) == 0x0004E8, "Member 'UCoreChallengeSetItemWidget::IconImage' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetItemWidget, HeaderBackground) == 0x0004F0, "Member 'UCoreChallengeSetItemWidget::HeaderBackground' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetItemWidget, TitleTB) == 0x0004F8, "Member 'UCoreChallengeSetItemWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetItemWidget, RiftExpiredRTB) == 0x000500, "Member 'UCoreChallengeSetItemWidget::RiftExpiredRTB' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetItemWidget, TimerHorizontalBox) == 0x000508, "Member 'UCoreChallengeSetItemWidget::TimerHorizontalBox' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetItemWidget, TimerTB) == 0x000510, "Member 'UCoreChallengeSetItemWidget::TimerTB' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetItemWidget, CompletedQuestsTB) == 0x000518, "Member 'UCoreChallengeSetItemWidget::CompletedQuestsTB' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetItemWidget, NewNotification) == 0x000520, "Member 'UCoreChallengeSetItemWidget::NewNotification' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetItemWidget, _isExpired) == 0x000528, "Member 'UCoreChallengeSetItemWidget::_isExpired' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetItemWidget, _showNew) == 0x000529, "Member 'UCoreChallengeSetItemWidget::_showNew' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetItemWidget, _imageLoader) == 0x000530, "Member 'UCoreChallengeSetItemWidget::_imageLoader' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetItemWidget, _imageBackgroundLoader) == 0x000538, "Member 'UCoreChallengeSetItemWidget::_imageBackgroundLoader' has a wrong offset!");

// Class DBDUIViewsCore.CoreChallengeSetListWidget
// 0x0060 (0x03F0 - 0x0390)
class UCoreChallengeSetListWidget : public UCoreButtonSelector
{
public:
	uint8                                         Pad_390[0x10];                                     // 0x0390(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _preConstructedItemsCount;                         // 0x03A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreChallengeSetItemWidget> _itemWidgetClass;                                 // 0x03A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _itemMargin;                                       // 0x03B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          ItemsScrollBox;                                    // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           ItemsContainer;                                    // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _itemList;                                         // 0x03D0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreChallengeSetItemWidget*            _selectedItemWidget;                               // 0x03D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UCoreChallengeSetItemWidget*>    _challengeSetButtons;                              // 0x03E0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void OnItemSelected(class UCoreSelectableButtonWidget* Button, bool IsSelected);
	void SetChallengeSetData(const TArray<struct FChallengeSetMenuViewData>& challengeSetArray, class UDataTable* eventSkinDataTable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChallengeSetListWidget">();
	}
	static class UCoreChallengeSetListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChallengeSetListWidget>();
	}
};
static_assert(alignof(UCoreChallengeSetListWidget) == 0x000008, "Wrong alignment on UCoreChallengeSetListWidget");
static_assert(sizeof(UCoreChallengeSetListWidget) == 0x0003F0, "Wrong size on UCoreChallengeSetListWidget");
static_assert(offsetof(UCoreChallengeSetListWidget, _preConstructedItemsCount) == 0x0003A0, "Member 'UCoreChallengeSetListWidget::_preConstructedItemsCount' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetListWidget, _itemWidgetClass) == 0x0003A8, "Member 'UCoreChallengeSetListWidget::_itemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetListWidget, _itemMargin) == 0x0003B0, "Member 'UCoreChallengeSetListWidget::_itemMargin' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetListWidget, ItemsScrollBox) == 0x0003C0, "Member 'UCoreChallengeSetListWidget::ItemsScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetListWidget, ItemsContainer) == 0x0003C8, "Member 'UCoreChallengeSetListWidget::ItemsContainer' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetListWidget, _itemList) == 0x0003D0, "Member 'UCoreChallengeSetListWidget::_itemList' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetListWidget, _selectedItemWidget) == 0x0003D8, "Member 'UCoreChallengeSetListWidget::_selectedItemWidget' has a wrong offset!");
static_assert(offsetof(UCoreChallengeSetListWidget, _challengeSetButtons) == 0x0003E0, "Member 'UCoreChallengeSetListWidget::_challengeSetButtons' has a wrong offset!");

// Class DBDUIViewsCore.CoreChallengesMenuWidget
// 0x00E8 (0x0408 - 0x0320)
class UCoreChallengesMenuWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          TitleTB;                                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SubtitleTB;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        TabContentSwitcher;                                // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               ContentsOverlay;                                   // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterButtonWidget*                SettingsButton;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterButtonWidget*                InfoButton;                                        // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterInputSwitcherWidget*         FollowChallengeInputSwitcher;                      // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               GoToRiftPassInputSwitcher;                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               GoToEventInputSwitcher;                            // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreChallengeSetListWidget*            ChallengeSetList;                                  // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChallengesMenuRiftButtonWidget*        ChallengesMenuRiftButton;                          // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UChallengesMenuChallengeSetWidget> ChallengeSetWidgetClass;                    // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             _eventSkinDataTable;                               // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _backButtonClickedDelegate;                        // 0x0398(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FString& ID, const class FString& eventFrameLabel)> _challengeSetSelectedDelegate; // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _settingsButtonClickedDelegate;                    // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _goToEventButtonClickedDelegate;                   // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _goToRiftPassButtonClickedDelegate;                // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _onInfoButtonClicked;                              // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const int32 SelectedKey)> _tabSelectedDelegate;                    // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void OnBackButtonClicked();
	void OnChallengeSetSelected(const class FString& ChallengeSetId, const class FString& eventFrameLabel);
	void OnGoToEventButtonClicked();
	void OnGoToRiftPassButtonClicked();
	void OnInfoButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnRiftButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnSettingsButtonClicked(class UCoreButtonWidget* Button);
	void SetUiTakeoverVisuals(bool IsActive);
	void UpdateChallengeMenuVisuals(const struct FChallengeSkinUIData& challengeSkinData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChallengesMenuWidget">();
	}
	static class UCoreChallengesMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChallengesMenuWidget>();
	}
};
static_assert(alignof(UCoreChallengesMenuWidget) == 0x000008, "Wrong alignment on UCoreChallengesMenuWidget");
static_assert(sizeof(UCoreChallengesMenuWidget) == 0x000408, "Wrong size on UCoreChallengesMenuWidget");
static_assert(offsetof(UCoreChallengesMenuWidget, TitleTB) == 0x000328, "Member 'UCoreChallengesMenuWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, SubtitleTB) == 0x000330, "Member 'UCoreChallengesMenuWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, TabContentSwitcher) == 0x000338, "Member 'UCoreChallengesMenuWidget::TabContentSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, ContentsOverlay) == 0x000340, "Member 'UCoreChallengesMenuWidget::ContentsOverlay' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, BackInputSwitcher) == 0x000348, "Member 'UCoreChallengesMenuWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, SettingsButton) == 0x000350, "Member 'UCoreChallengesMenuWidget::SettingsButton' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, InfoButton) == 0x000358, "Member 'UCoreChallengesMenuWidget::InfoButton' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, FollowChallengeInputSwitcher) == 0x000360, "Member 'UCoreChallengesMenuWidget::FollowChallengeInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, GoToRiftPassInputSwitcher) == 0x000368, "Member 'UCoreChallengesMenuWidget::GoToRiftPassInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, GoToEventInputSwitcher) == 0x000370, "Member 'UCoreChallengesMenuWidget::GoToEventInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, ChallengeSetList) == 0x000378, "Member 'UCoreChallengesMenuWidget::ChallengeSetList' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, ChallengesMenuRiftButton) == 0x000380, "Member 'UCoreChallengesMenuWidget::ChallengesMenuRiftButton' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, ChallengeSetWidgetClass) == 0x000388, "Member 'UCoreChallengesMenuWidget::ChallengeSetWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, _eventSkinDataTable) == 0x000390, "Member 'UCoreChallengesMenuWidget::_eventSkinDataTable' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, _backButtonClickedDelegate) == 0x000398, "Member 'UCoreChallengesMenuWidget::_backButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, _challengeSetSelectedDelegate) == 0x0003A8, "Member 'UCoreChallengesMenuWidget::_challengeSetSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, _settingsButtonClickedDelegate) == 0x0003B8, "Member 'UCoreChallengesMenuWidget::_settingsButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, _goToEventButtonClickedDelegate) == 0x0003C8, "Member 'UCoreChallengesMenuWidget::_goToEventButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, _goToRiftPassButtonClickedDelegate) == 0x0003D8, "Member 'UCoreChallengesMenuWidget::_goToRiftPassButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, _onInfoButtonClicked) == 0x0003E8, "Member 'UCoreChallengesMenuWidget::_onInfoButtonClicked' has a wrong offset!");
static_assert(offsetof(UCoreChallengesMenuWidget, _tabSelectedDelegate) == 0x0003F8, "Member 'UCoreChallengesMenuWidget::_tabSelectedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreChallengeTrackerContainerWidget
// 0x01B8 (0x0508 - 0x0350)
class UCoreChallengeTrackerContainerWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                ChallengeTrackerWidgetClass;                       // 0x0358(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOverlay*                               ChallengeTrackerWidgetsContainer;                  // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ReadingTimeDelaySec;                               // 0x0368(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreChallengeTrackerWidget*            _challengeTrackerWidget;                           // 0x0370(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_378[0x190];                                    // 0x0378(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnReadingTimeDelayDone();
	void OnWidgetClosingDone(class UCoreChallengeTrackerWidget* trackerWidget);
	void OnWidgetOpeningDone(class UCoreChallengeTrackerWidget* trackerWidget);
	void OnWidgetProgressingDone(class UCoreChallengeTrackerWidget* trackerWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChallengeTrackerContainerWidget">();
	}
	static class UCoreChallengeTrackerContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChallengeTrackerContainerWidget>();
	}
};
static_assert(alignof(UCoreChallengeTrackerContainerWidget) == 0x000008, "Wrong alignment on UCoreChallengeTrackerContainerWidget");
static_assert(sizeof(UCoreChallengeTrackerContainerWidget) == 0x000508, "Wrong size on UCoreChallengeTrackerContainerWidget");
static_assert(offsetof(UCoreChallengeTrackerContainerWidget, ChallengeTrackerWidgetClass) == 0x000358, "Member 'UCoreChallengeTrackerContainerWidget::ChallengeTrackerWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerContainerWidget, ChallengeTrackerWidgetsContainer) == 0x000360, "Member 'UCoreChallengeTrackerContainerWidget::ChallengeTrackerWidgetsContainer' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerContainerWidget, ReadingTimeDelaySec) == 0x000368, "Member 'UCoreChallengeTrackerContainerWidget::ReadingTimeDelaySec' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerContainerWidget, _challengeTrackerWidget) == 0x000370, "Member 'UCoreChallengeTrackerContainerWidget::_challengeTrackerWidget' has a wrong offset!");

// Class DBDUIViewsCore.CoreOwnedTagWidget
// 0x0008 (0x0328 - 0x0320)
class UCoreOwnedTagWidget : public UCoreBaseUserWidget
{
public:
	class UDBDTextBlock*                          OwnedTB;                                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOwnedTagWidget">();
	}
	static class UCoreOwnedTagWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOwnedTagWidget>();
	}
};
static_assert(alignof(UCoreOwnedTagWidget) == 0x000008, "Wrong alignment on UCoreOwnedTagWidget");
static_assert(sizeof(UCoreOwnedTagWidget) == 0x000328, "Wrong size on UCoreOwnedTagWidget");
static_assert(offsetof(UCoreOwnedTagWidget, OwnedTB) == 0x000320, "Member 'UCoreOwnedTagWidget::OwnedTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreChallengeTrackerWidget
// 0x0070 (0x03C0 - 0x0350)
class UCoreChallengeTrackerWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             _eventSkinDataTable;                               // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreChallengeTrackerWidget* trackerWidget)> OnTrackerOpeningDone; // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreChallengeTrackerWidget* trackerWidget)> OnTrackerClosingDone; // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreChallengeTrackerWidget* trackerWidget)> OnTrackerProgressAnimationDone; // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          OpenSfx;                                           // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          CloseSfx;                                          // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ProgressionSfx;                                    // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          CompleteSfx;                                       // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ProgressionAudioRTPC;                              // 0x03B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TSoftObjectPtr<class UTexture2D> GetChallengeSetIcon(const class FString& eventFrameLabel) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChallengeTrackerWidget">();
	}
	static class UCoreChallengeTrackerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChallengeTrackerWidget>();
	}
};
static_assert(alignof(UCoreChallengeTrackerWidget) == 0x000008, "Wrong alignment on UCoreChallengeTrackerWidget");
static_assert(sizeof(UCoreChallengeTrackerWidget) == 0x0003C0, "Wrong size on UCoreChallengeTrackerWidget");
static_assert(offsetof(UCoreChallengeTrackerWidget, _eventSkinDataTable) == 0x000358, "Member 'UCoreChallengeTrackerWidget::_eventSkinDataTable' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, OnTrackerOpeningDone) == 0x000360, "Member 'UCoreChallengeTrackerWidget::OnTrackerOpeningDone' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, OnTrackerClosingDone) == 0x000370, "Member 'UCoreChallengeTrackerWidget::OnTrackerClosingDone' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, OnTrackerProgressAnimationDone) == 0x000380, "Member 'UCoreChallengeTrackerWidget::OnTrackerProgressAnimationDone' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, OpenSfx) == 0x000390, "Member 'UCoreChallengeTrackerWidget::OpenSfx' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, CloseSfx) == 0x000398, "Member 'UCoreChallengeTrackerWidget::CloseSfx' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, ProgressionSfx) == 0x0003A0, "Member 'UCoreChallengeTrackerWidget::ProgressionSfx' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, CompleteSfx) == 0x0003A8, "Member 'UCoreChallengeTrackerWidget::CompleteSfx' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, ProgressionAudioRTPC) == 0x0003B0, "Member 'UCoreChallengeTrackerWidget::ProgressionAudioRTPC' has a wrong offset!");

// Class DBDUIViewsCore.CoreCharacterPerksWidget
// 0x0028 (0x0348 - 0x0320)
class UCoreCharacterPerksWidget final : public UCoreBaseUserWidget
{
public:
	class UCoreMenuLoadoutPartWidget*             CoreKillerPower;                                   // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreMenuPerkWidget*                    CorePerk1;                                         // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreMenuPerkWidget*                    CorePerk2;                                         // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreMenuPerkWidget*                    CorePerk3;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideTooltip(class UCoreButtonWidget* unhoveredSlotWidget);
	void SetData(const TArray<class UMenuPerkViewData*>& CharacterUniquePerksViewData, const EPlayerRole Role, class UMenuPowerViewData* KillerPowerViewData, const bool keepKillerPowerSizeWhenNotVisible);
	void SetPerkData(class UCoreMenuPerkWidget* perkWidget, class UMenuPerkViewData* PerkViewData);
	void ShowTooltip(class UCoreButtonWidget* hoveredSlotWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCharacterPerksWidget">();
	}
	static class UCoreCharacterPerksWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCharacterPerksWidget>();
	}
};
static_assert(alignof(UCoreCharacterPerksWidget) == 0x000008, "Wrong alignment on UCoreCharacterPerksWidget");
static_assert(sizeof(UCoreCharacterPerksWidget) == 0x000348, "Wrong size on UCoreCharacterPerksWidget");
static_assert(offsetof(UCoreCharacterPerksWidget, CoreKillerPower) == 0x000320, "Member 'UCoreCharacterPerksWidget::CoreKillerPower' has a wrong offset!");
static_assert(offsetof(UCoreCharacterPerksWidget, CorePerk1) == 0x000328, "Member 'UCoreCharacterPerksWidget::CorePerk1' has a wrong offset!");
static_assert(offsetof(UCoreCharacterPerksWidget, CorePerk2) == 0x000330, "Member 'UCoreCharacterPerksWidget::CorePerk2' has a wrong offset!");
static_assert(offsetof(UCoreCharacterPerksWidget, CorePerk3) == 0x000338, "Member 'UCoreCharacterPerksWidget::CorePerk3' has a wrong offset!");

// Class DBDUIViewsCore.CorePlayerProfileWidget
// 0x0050 (0x0370 - 0x0320)
class UCorePlayerProfileWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreButtonWidget*                      PlayerCardButton;                                  // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreWalletWidget*                      Wallet;                                            // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePlayerNameWidget*                  PlayerName;                                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDButton*                             PlayerCardHoverZone;                               // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _onPlayerProfileClickedDelegate;                   // 0x0348(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	float                                         _playerCardEnabledOpacity;                         // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _playerCardDisabledOpacity;                        // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _playerProfileFocusOpacity;                        // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _playerProfileUnfocusOpacity;                      // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isProfileMenuContextEntered;                      // 0x0368(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerCardBannerHovered();
	void OnPlayerCardBannerUnhovered();
	void OnPlayerCardButtonHovered(class UCoreButtonWidget* Button);
	void OnPlayerCardButtonUnhovered(class UCoreButtonWidget* Button);
	void OnPlayerProfileClicked(class UCoreButtonWidget* Button);
	void SetBadgeBannerData(const struct FPlayerCardViewData& Badge, const struct FPlayerCardViewData& Banner, const bool showBanner);
	void SetPlayerCardAnimation(const bool IsAnimationPlaying_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerProfileWidget">();
	}
	static class UCorePlayerProfileWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerProfileWidget>();
	}
};
static_assert(alignof(UCorePlayerProfileWidget) == 0x000008, "Wrong alignment on UCorePlayerProfileWidget");
static_assert(sizeof(UCorePlayerProfileWidget) == 0x000370, "Wrong size on UCorePlayerProfileWidget");
static_assert(offsetof(UCorePlayerProfileWidget, PlayerCardButton) == 0x000328, "Member 'UCorePlayerProfileWidget::PlayerCardButton' has a wrong offset!");
static_assert(offsetof(UCorePlayerProfileWidget, Wallet) == 0x000330, "Member 'UCorePlayerProfileWidget::Wallet' has a wrong offset!");
static_assert(offsetof(UCorePlayerProfileWidget, PlayerName) == 0x000338, "Member 'UCorePlayerProfileWidget::PlayerName' has a wrong offset!");
static_assert(offsetof(UCorePlayerProfileWidget, PlayerCardHoverZone) == 0x000340, "Member 'UCorePlayerProfileWidget::PlayerCardHoverZone' has a wrong offset!");
static_assert(offsetof(UCorePlayerProfileWidget, _onPlayerProfileClickedDelegate) == 0x000348, "Member 'UCorePlayerProfileWidget::_onPlayerProfileClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCorePlayerProfileWidget, _playerCardEnabledOpacity) == 0x000358, "Member 'UCorePlayerProfileWidget::_playerCardEnabledOpacity' has a wrong offset!");
static_assert(offsetof(UCorePlayerProfileWidget, _playerCardDisabledOpacity) == 0x00035C, "Member 'UCorePlayerProfileWidget::_playerCardDisabledOpacity' has a wrong offset!");
static_assert(offsetof(UCorePlayerProfileWidget, _playerProfileFocusOpacity) == 0x000360, "Member 'UCorePlayerProfileWidget::_playerProfileFocusOpacity' has a wrong offset!");
static_assert(offsetof(UCorePlayerProfileWidget, _playerProfileUnfocusOpacity) == 0x000364, "Member 'UCorePlayerProfileWidget::_playerProfileUnfocusOpacity' has a wrong offset!");
static_assert(offsetof(UCorePlayerProfileWidget, _isProfileMenuContextEntered) == 0x000368, "Member 'UCorePlayerProfileWidget::_isProfileMenuContextEntered' has a wrong offset!");

// Class DBDUIViewsCore.CoreRewardWidget
// 0x0028 (0x0500 - 0x04D8)
class UCoreRewardWidget : public UCoreSelectableButtonWidget
{
public:
	class UScaleBox*                              LayoutScale;                                       // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                SelectedOverlay;                                   // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLockedOverlayWidget*               LockedOverlay;                                     // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETooltipHorizontalAlignment                   _tooltipAlignment;                                 // 0x04F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindHoverBorder(const bool bind);
	void OnButtonHovered(class UCoreButtonWidget* targetButton);
	void OnButtonSelectedChanged(class UCoreSelectableButtonWidget* targetButton, bool IsSelected_0);
	void OnButtonUnhovered(class UCoreButtonWidget* targetButton);
	void SetIsLocked(bool IsLocked, bool useAnimation);
	void SetRewardData(const struct FRewardViewData& RewardData);
	void SetRewardScale(float Scale);
	void SetTooltipAlignment(const ETooltipHorizontalAlignment Alignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreRewardWidget">();
	}
	static class UCoreRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreRewardWidget>();
	}
};
static_assert(alignof(UCoreRewardWidget) == 0x000008, "Wrong alignment on UCoreRewardWidget");
static_assert(sizeof(UCoreRewardWidget) == 0x000500, "Wrong size on UCoreRewardWidget");
static_assert(offsetof(UCoreRewardWidget, LayoutScale) == 0x0004D8, "Member 'UCoreRewardWidget::LayoutScale' has a wrong offset!");
static_assert(offsetof(UCoreRewardWidget, SelectedOverlay) == 0x0004E0, "Member 'UCoreRewardWidget::SelectedOverlay' has a wrong offset!");
static_assert(offsetof(UCoreRewardWidget, LockedOverlay) == 0x0004E8, "Member 'UCoreRewardWidget::LockedOverlay' has a wrong offset!");
static_assert(offsetof(UCoreRewardWidget, OnHoverBorder) == 0x0004F0, "Member 'UCoreRewardWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreRewardWidget, _tooltipAlignment) == 0x0004F8, "Member 'UCoreRewardWidget::_tooltipAlignment' has a wrong offset!");

// Class DBDUIViewsCore.CoreCharacterRewardWidget
// 0x0148 (0x0648 - 0x0500)
class UCoreCharacterRewardWidget : public UCoreRewardWidget
{
public:
	struct FCharacterRewardViewData               _data;                                             // 0x0500(0x0148)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void SetCharacterRewardData(const struct FCharacterRewardViewData& CharacterRewardViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCharacterRewardWidget">();
	}
	static class UCoreCharacterRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCharacterRewardWidget>();
	}
};
static_assert(alignof(UCoreCharacterRewardWidget) == 0x000008, "Wrong alignment on UCoreCharacterRewardWidget");
static_assert(sizeof(UCoreCharacterRewardWidget) == 0x000648, "Wrong size on UCoreCharacterRewardWidget");
static_assert(offsetof(UCoreCharacterRewardWidget, _data) == 0x000500, "Member 'UCoreCharacterRewardWidget::_data' has a wrong offset!");

// Class DBDUIViewsCore.CorePlayerCardAnimationWidget
// 0x0018 (0x0338 - 0x0320)
class UCorePlayerCardAnimationWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDBDImage*>                      _animatedImages;                                   // 0x0328(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void SetMaterialAnimated(bool IsAnimated);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerCardAnimationWidget">();
	}
	static class UCorePlayerCardAnimationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerCardAnimationWidget>();
	}
};
static_assert(alignof(UCorePlayerCardAnimationWidget) == 0x000008, "Wrong alignment on UCorePlayerCardAnimationWidget");
static_assert(sizeof(UCorePlayerCardAnimationWidget) == 0x000338, "Wrong size on UCorePlayerCardAnimationWidget");
static_assert(offsetof(UCorePlayerCardAnimationWidget, _animatedImages) == 0x000328, "Member 'UCorePlayerCardAnimationWidget::_animatedImages' has a wrong offset!");

// Class DBDUIViewsCore.CoreChatMessageWidget
// 0x0020 (0x0340 - 0x0320)
class UCoreChatMessageWidget final : public UCoreBaseUserWidget
{
public:
	TArray<struct FColor>                         _playerNameColors;                                 // 0x0320(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear, Protected, NativeAccessSpecifierProtected)
	struct FColor                                 _systemMessageColor;                               // 0x0330(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 _systemWarningMessageColor;                        // 0x0334(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      MessageRTB;                                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetPlayerMessage(const int32 PlayerIndex, const class FString& PlayerName, const class FString& Message) const;
	void SetSystemMessage(const class FString& Message) const;
	void SetSystemWarningMessage(const class FString& Message) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChatMessageWidget">();
	}
	static class UCoreChatMessageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChatMessageWidget>();
	}
};
static_assert(alignof(UCoreChatMessageWidget) == 0x000008, "Wrong alignment on UCoreChatMessageWidget");
static_assert(sizeof(UCoreChatMessageWidget) == 0x000340, "Wrong size on UCoreChatMessageWidget");
static_assert(offsetof(UCoreChatMessageWidget, _playerNameColors) == 0x000320, "Member 'UCoreChatMessageWidget::_playerNameColors' has a wrong offset!");
static_assert(offsetof(UCoreChatMessageWidget, _systemMessageColor) == 0x000330, "Member 'UCoreChatMessageWidget::_systemMessageColor' has a wrong offset!");
static_assert(offsetof(UCoreChatMessageWidget, _systemWarningMessageColor) == 0x000334, "Member 'UCoreChatMessageWidget::_systemWarningMessageColor' has a wrong offset!");
static_assert(offsetof(UCoreChatMessageWidget, MessageRTB) == 0x000338, "Member 'UCoreChatMessageWidget::MessageRTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreChatWidget
// 0x0098 (0x03B8 - 0x0320)
class UCoreChatWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnChatLogHovered;                                  // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnChatLogUnhovered;                                // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UCoreChatMessageWidget>     _chatMessageClass;                                 // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                               ContentSizeBox;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           ChatLogBox;                                        // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          ChatLogScrollBox;                                  // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDEditableTextBox*                    ChatInputEditableTB;                               // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreIconButtonWidget*                  ExpandButton;                                      // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreIconButtonWidget*                  CollapseButton;                                    // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _chatLogMessagesLimit;                             // 0x0380(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_384[0x34];                                     // 0x0384(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnChatScrollBoxHovered();
	void OnChatScrollBoxUnHovered();
	void OnCollapseClicked(class UCoreButtonWidget* CoreButtonWidget);
	void OnExpandClicked(class UCoreButtonWidget* CoreButtonWidget);
	void OnIsScrollableChanged(const bool IsScrollable);
	void OnTextCommitted(const class FText& Text, ETextCommit CommitMethod);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChatWidget">();
	}
	static class UCoreChatWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChatWidget>();
	}
};
static_assert(alignof(UCoreChatWidget) == 0x000008, "Wrong alignment on UCoreChatWidget");
static_assert(sizeof(UCoreChatWidget) == 0x0003B8, "Wrong size on UCoreChatWidget");
static_assert(offsetof(UCoreChatWidget, OnChatLogHovered) == 0x000328, "Member 'UCoreChatWidget::OnChatLogHovered' has a wrong offset!");
static_assert(offsetof(UCoreChatWidget, OnChatLogUnhovered) == 0x000338, "Member 'UCoreChatWidget::OnChatLogUnhovered' has a wrong offset!");
static_assert(offsetof(UCoreChatWidget, _chatMessageClass) == 0x000348, "Member 'UCoreChatWidget::_chatMessageClass' has a wrong offset!");
static_assert(offsetof(UCoreChatWidget, ContentSizeBox) == 0x000350, "Member 'UCoreChatWidget::ContentSizeBox' has a wrong offset!");
static_assert(offsetof(UCoreChatWidget, ChatLogBox) == 0x000358, "Member 'UCoreChatWidget::ChatLogBox' has a wrong offset!");
static_assert(offsetof(UCoreChatWidget, ChatLogScrollBox) == 0x000360, "Member 'UCoreChatWidget::ChatLogScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreChatWidget, ChatInputEditableTB) == 0x000368, "Member 'UCoreChatWidget::ChatInputEditableTB' has a wrong offset!");
static_assert(offsetof(UCoreChatWidget, ExpandButton) == 0x000370, "Member 'UCoreChatWidget::ExpandButton' has a wrong offset!");
static_assert(offsetof(UCoreChatWidget, CollapseButton) == 0x000378, "Member 'UCoreChatWidget::CollapseButton' has a wrong offset!");
static_assert(offsetof(UCoreChatWidget, _chatLogMessagesLimit) == 0x000380, "Member 'UCoreChatWidget::_chatLogMessagesLimit' has a wrong offset!");

// Class DBDUIViewsCore.CoreOnboardingTutorialPanelWidget
// 0x0070 (0x0390 - 0x0320)
class UCoreOnboardingTutorialPanelWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UOverlay*>                       OnboardingButtonHolderContainers;                  // 0x0328(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FString& stepId, const class FString& tutorialId)> TutorialSelectedDelegate; // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UUserWidget*                            LoadingWidget;                                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _arrowHighlightRenderOpacity;                      // 0x0350(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _arrowUnhighlightRenderOpacity;                    // 0x0354(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreOnboardingButtonHolderWidget> _oneTutorialButtonHolderWidgetClass;        // 0x0358(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreOnboardingButtonHolderWidget> _twoTutorialButtonHolderWidgetClass;        // 0x0360(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreOnboardingButtonHolderWidget*> _onboardingButtonHolderWidgets;                 // 0x0368(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPendingStepData>               _pendingData;                                      // 0x0378(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckNextPendingButtonUpdate();
	void NextPendingButtonUpdated();
	void SetTutorialDescription(const class FText& Description, bool isWarning);
	void SetTutorialSeparators(const class FString& completedStepId);
	void TryBroadcastSelectedTutorial(class UCoreButtonWidget* buttonTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOnboardingTutorialPanelWidget">();
	}
	static class UCoreOnboardingTutorialPanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOnboardingTutorialPanelWidget>();
	}
};
static_assert(alignof(UCoreOnboardingTutorialPanelWidget) == 0x000008, "Wrong alignment on UCoreOnboardingTutorialPanelWidget");
static_assert(sizeof(UCoreOnboardingTutorialPanelWidget) == 0x000390, "Wrong size on UCoreOnboardingTutorialPanelWidget");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, OnboardingButtonHolderContainers) == 0x000328, "Member 'UCoreOnboardingTutorialPanelWidget::OnboardingButtonHolderContainers' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, TutorialSelectedDelegate) == 0x000338, "Member 'UCoreOnboardingTutorialPanelWidget::TutorialSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, LoadingWidget) == 0x000348, "Member 'UCoreOnboardingTutorialPanelWidget::LoadingWidget' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, _arrowHighlightRenderOpacity) == 0x000350, "Member 'UCoreOnboardingTutorialPanelWidget::_arrowHighlightRenderOpacity' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, _arrowUnhighlightRenderOpacity) == 0x000354, "Member 'UCoreOnboardingTutorialPanelWidget::_arrowUnhighlightRenderOpacity' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, _oneTutorialButtonHolderWidgetClass) == 0x000358, "Member 'UCoreOnboardingTutorialPanelWidget::_oneTutorialButtonHolderWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, _twoTutorialButtonHolderWidgetClass) == 0x000360, "Member 'UCoreOnboardingTutorialPanelWidget::_twoTutorialButtonHolderWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, _onboardingButtonHolderWidgets) == 0x000368, "Member 'UCoreOnboardingTutorialPanelWidget::_onboardingButtonHolderWidgets' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, _pendingData) == 0x000378, "Member 'UCoreOnboardingTutorialPanelWidget::_pendingData' has a wrong offset!");

// Class DBDUIViewsCore.CoreCreditsWidget
// 0x0040 (0x0360 - 0x0320)
class UCoreCreditsWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScrollSpeed;                                       // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      CreditsTextBlock;                                  // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _backActionDelegate;                               // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	class UUITweenInstance*                       _tween;                                            // 0x0350(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnScrollEnd(class UUITweenInstance* tween);
	void ScrollText();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCreditsWidget">();
	}
	static class UCoreCreditsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCreditsWidget>();
	}
};
static_assert(alignof(UCoreCreditsWidget) == 0x000008, "Wrong alignment on UCoreCreditsWidget");
static_assert(sizeof(UCoreCreditsWidget) == 0x000360, "Wrong size on UCoreCreditsWidget");
static_assert(offsetof(UCoreCreditsWidget, ScrollSpeed) == 0x000328, "Member 'UCoreCreditsWidget::ScrollSpeed' has a wrong offset!");
static_assert(offsetof(UCoreCreditsWidget, BackInputSwitcher) == 0x000330, "Member 'UCoreCreditsWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreCreditsWidget, CreditsTextBlock) == 0x000338, "Member 'UCoreCreditsWidget::CreditsTextBlock' has a wrong offset!");
static_assert(offsetof(UCoreCreditsWidget, _backActionDelegate) == 0x000340, "Member 'UCoreCreditsWidget::_backActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreCreditsWidget, _tween) == 0x000350, "Member 'UCoreCreditsWidget::_tween' has a wrong offset!");

// Class DBDUIViewsCore.CoreKeyListenerButtonWidget
// 0x0038 (0x04E8 - 0x04B0)
class UCoreKeyListenerButtonWidget : public UCoreButtonWidget
{
public:
	bool                                          IsKeyboardLabelVisible;                            // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          InputNameTB;                                       // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C0[0x28];                                     // 0x04C0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetKeyOverride(const struct FKey& keyOverride);
	void SetUIAction(const EUIActionType ActionType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreKeyListenerButtonWidget">();
	}
	static class UCoreKeyListenerButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreKeyListenerButtonWidget>();
	}
};
static_assert(alignof(UCoreKeyListenerButtonWidget) == 0x000008, "Wrong alignment on UCoreKeyListenerButtonWidget");
static_assert(sizeof(UCoreKeyListenerButtonWidget) == 0x0004E8, "Wrong size on UCoreKeyListenerButtonWidget");
static_assert(offsetof(UCoreKeyListenerButtonWidget, IsKeyboardLabelVisible) == 0x0004B0, "Member 'UCoreKeyListenerButtonWidget::IsKeyboardLabelVisible' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerButtonWidget, InputNameTB) == 0x0004B8, "Member 'UCoreKeyListenerButtonWidget::InputNameTB' has a wrong offset!");

// Class DBDUIViewsCore.CorePlayerLevelWidget
// 0x0000 (0x04B0 - 0x04B0)
class UCorePlayerLevelWidget : public UCoreButtonWidget
{
public:
	void AnimateLevelUp();
	void SetData(const struct FPlayerLevelViewData& ViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerLevelWidget">();
	}
	static class UCorePlayerLevelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerLevelWidget>();
	}
};
static_assert(alignof(UCorePlayerLevelWidget) == 0x000008, "Wrong alignment on UCorePlayerLevelWidget");
static_assert(sizeof(UCorePlayerLevelWidget) == 0x0004B0, "Wrong size on UCorePlayerLevelWidget");

// Class DBDUIViewsCore.CoreCurrencyButtonWidget
// 0x0068 (0x0550 - 0x04E8)
class UCoreCurrencyButtonWidget final : public UCoreKeyListenerButtonWidget
{
public:
	class UCorePriceTagWidget*                    PriceTag;                                          // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _chargeToUnlockCurve;                              // 0x04F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _chargeToUnlockDuration;                           // 0x04F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4FC[0x54];                                     // 0x04FC(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCurrencyButtonPressed(class UCoreButtonWidget* Button);
	void SetCurrencyData(const struct FPriceTagViewData& CurrencyData);
	void SetModalEnabled(const bool IsEnabled_0);

	ECurrencyType GetCurrencyType() const;
	void SetBackgroundVisible(const bool ShowBackground) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCurrencyButtonWidget">();
	}
	static class UCoreCurrencyButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCurrencyButtonWidget>();
	}
};
static_assert(alignof(UCoreCurrencyButtonWidget) == 0x000008, "Wrong alignment on UCoreCurrencyButtonWidget");
static_assert(sizeof(UCoreCurrencyButtonWidget) == 0x000550, "Wrong size on UCoreCurrencyButtonWidget");
static_assert(offsetof(UCoreCurrencyButtonWidget, PriceTag) == 0x0004E8, "Member 'UCoreCurrencyButtonWidget::PriceTag' has a wrong offset!");
static_assert(offsetof(UCoreCurrencyButtonWidget, _chargeToUnlockCurve) == 0x0004F0, "Member 'UCoreCurrencyButtonWidget::_chargeToUnlockCurve' has a wrong offset!");
static_assert(offsetof(UCoreCurrencyButtonWidget, _chargeToUnlockDuration) == 0x0004F8, "Member 'UCoreCurrencyButtonWidget::_chargeToUnlockDuration' has a wrong offset!");

// Class DBDUIViewsCore.CoreCurrencyExpirationLabelWidget
// 0x0000 (0x0320 - 0x0320)
class UCoreCurrencyExpirationLabelWidget final : public UCoreBaseUserWidget
{
public:
	void SetData(const struct FCurrencyExpirationLabelViewData& ViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCurrencyExpirationLabelWidget">();
	}
	static class UCoreCurrencyExpirationLabelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCurrencyExpirationLabelWidget>();
	}
};
static_assert(alignof(UCoreCurrencyExpirationLabelWidget) == 0x000008, "Wrong alignment on UCoreCurrencyExpirationLabelWidget");
static_assert(sizeof(UCoreCurrencyExpirationLabelWidget) == 0x000320, "Wrong size on UCoreCurrencyExpirationLabelWidget");

// Class DBDUIViewsCore.CorePowerBundleWidget
// 0x0050 (0x0370 - 0x0320)
class UCorePowerBundleWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCorePowerWidget>           PowerWidgetSubClass;                               // 0x0328(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCorePowerWidget*                       Power;                                             // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreAddonWidget*                       Addon1;                                            // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreAddonWidget*                       Addon2;                                            // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUniformGridPanel*                      SecondaryPowerWidgetContainer;                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUniformGridPanel*                      TertiaryPowerWidgetContainer;                      // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _preConstructedPowersCount;                        // 0x0358(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCorePreConstructableList*              _secondaryPowerList;                               // 0x0360(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCorePreConstructableList*              _tertiaryPowerList;                                // 0x0368(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetActiveState(bool IsActive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePowerBundleWidget">();
	}
	static class UCorePowerBundleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePowerBundleWidget>();
	}
};
static_assert(alignof(UCorePowerBundleWidget) == 0x000008, "Wrong alignment on UCorePowerBundleWidget");
static_assert(sizeof(UCorePowerBundleWidget) == 0x000370, "Wrong size on UCorePowerBundleWidget");
static_assert(offsetof(UCorePowerBundleWidget, PowerWidgetSubClass) == 0x000328, "Member 'UCorePowerBundleWidget::PowerWidgetSubClass' has a wrong offset!");
static_assert(offsetof(UCorePowerBundleWidget, Power) == 0x000330, "Member 'UCorePowerBundleWidget::Power' has a wrong offset!");
static_assert(offsetof(UCorePowerBundleWidget, Addon1) == 0x000338, "Member 'UCorePowerBundleWidget::Addon1' has a wrong offset!");
static_assert(offsetof(UCorePowerBundleWidget, Addon2) == 0x000340, "Member 'UCorePowerBundleWidget::Addon2' has a wrong offset!");
static_assert(offsetof(UCorePowerBundleWidget, SecondaryPowerWidgetContainer) == 0x000348, "Member 'UCorePowerBundleWidget::SecondaryPowerWidgetContainer' has a wrong offset!");
static_assert(offsetof(UCorePowerBundleWidget, TertiaryPowerWidgetContainer) == 0x000350, "Member 'UCorePowerBundleWidget::TertiaryPowerWidgetContainer' has a wrong offset!");
static_assert(offsetof(UCorePowerBundleWidget, _preConstructedPowersCount) == 0x000358, "Member 'UCorePowerBundleWidget::_preConstructedPowersCount' has a wrong offset!");
static_assert(offsetof(UCorePowerBundleWidget, _secondaryPowerList) == 0x000360, "Member 'UCorePowerBundleWidget::_secondaryPowerList' has a wrong offset!");
static_assert(offsetof(UCorePowerBundleWidget, _tertiaryPowerList) == 0x000368, "Member 'UCorePowerBundleWidget::_tertiaryPowerList' has a wrong offset!");

// Class DBDUIViewsCore.CoreCurrencyForTooltipsWidget
// 0x0000 (0x0320 - 0x0320)
class UCoreCurrencyForTooltipsWidget final : public UCoreBaseUserWidget
{
public:
	void SetData(const struct FCurrencyProgressionRewardViewData& currencyRewardViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCurrencyForTooltipsWidget">();
	}
	static class UCoreCurrencyForTooltipsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCurrencyForTooltipsWidget>();
	}
};
static_assert(alignof(UCoreCurrencyForTooltipsWidget) == 0x000008, "Wrong alignment on UCoreCurrencyForTooltipsWidget");
static_assert(sizeof(UCoreCurrencyForTooltipsWidget) == 0x000320, "Wrong size on UCoreCurrencyForTooltipsWidget");

// Class DBDUIViewsCore.CoreKeyListenerInputPromptWidget
// 0x0120 (0x0440 - 0x0320)
class UCoreKeyListenerInputPromptWidget : public UCoreBaseUserWidget
{
public:
	struct FAnalyticsComponent                    Analytics;                                         // 0x0320(0x0040)(Edit, DisableEditOnTemplate, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UCoreInputPromptWidget*                 InputPrompt;                                       // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LabelTB;                                           // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              AdditionalIconIMG;                                 // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextJustify                                  _alignment;                                        // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ClickedSfxName;                                    // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ClickedSfx;                                        // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 StartedChargingSfxName;                            // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          StartedChargingSfx;                                // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CancelledChargingSfxName;                          // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          CancelledChargingSfx;                              // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CompletedChargingSfxName;                          // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          CompletedChargingSfx;                              // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _onKeyListenerInputPromptTriggeredDelegate;        // 0x03E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _onKeyListenerInputPromptPressedDelegate;          // 0x03F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _onKeyListenerInputPromptReleasedDelegate;         // 0x0400(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_410[0x8];                                      // 0x0410(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _repetitionDelayCurve;                             // 0x0418(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_420[0x8];                                      // 0x0420(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _chargingAnimCurve;                                // 0x0428(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_430[0x10];                                     // 0x0430(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAlignmentChanged(ETextJustify newAlignment);
	void OnChargingComplete();
	void OnChargingTick(float Progress);
	void OnEnabledChanged(bool IsEnabled);
	void SendAnalyticsData();
	void SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> iconTexture);
	void SetAlignment(ETextJustify newAlignment);
	void SetBetaFeatureOverlayVisible(bool IsVisible_0);
	void SetChargeable(bool isChargeable, class UCurveFloat* holdingAnimCurve, float Duration);
	void SetEnabled(bool IsEnabled);
	void SetKeyOverride(const struct FKey& keyOverride);
	void SetLabel(const class FText& label);
	void SetRepeatable(bool isRepeatable, class UCurveFloat* repetitionDelayCurve);
	void SetUIAction(const EUIActionType ActionType);

	bool IsCharging() const;
	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreKeyListenerInputPromptWidget">();
	}
	static class UCoreKeyListenerInputPromptWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreKeyListenerInputPromptWidget>();
	}
};
static_assert(alignof(UCoreKeyListenerInputPromptWidget) == 0x000008, "Wrong alignment on UCoreKeyListenerInputPromptWidget");
static_assert(sizeof(UCoreKeyListenerInputPromptWidget) == 0x000440, "Wrong size on UCoreKeyListenerInputPromptWidget");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, Analytics) == 0x000320, "Member 'UCoreKeyListenerInputPromptWidget::Analytics' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, InputPrompt) == 0x000360, "Member 'UCoreKeyListenerInputPromptWidget::InputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, LabelTB) == 0x000368, "Member 'UCoreKeyListenerInputPromptWidget::LabelTB' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, AdditionalIconIMG) == 0x000370, "Member 'UCoreKeyListenerInputPromptWidget::AdditionalIconIMG' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, _alignment) == 0x000378, "Member 'UCoreKeyListenerInputPromptWidget::_alignment' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, ClickedSfxName) == 0x000380, "Member 'UCoreKeyListenerInputPromptWidget::ClickedSfxName' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, ClickedSfx) == 0x000390, "Member 'UCoreKeyListenerInputPromptWidget::ClickedSfx' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, StartedChargingSfxName) == 0x000398, "Member 'UCoreKeyListenerInputPromptWidget::StartedChargingSfxName' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, StartedChargingSfx) == 0x0003A8, "Member 'UCoreKeyListenerInputPromptWidget::StartedChargingSfx' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, CancelledChargingSfxName) == 0x0003B0, "Member 'UCoreKeyListenerInputPromptWidget::CancelledChargingSfxName' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, CancelledChargingSfx) == 0x0003C0, "Member 'UCoreKeyListenerInputPromptWidget::CancelledChargingSfx' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, CompletedChargingSfxName) == 0x0003C8, "Member 'UCoreKeyListenerInputPromptWidget::CompletedChargingSfxName' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, CompletedChargingSfx) == 0x0003D8, "Member 'UCoreKeyListenerInputPromptWidget::CompletedChargingSfx' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, _onKeyListenerInputPromptTriggeredDelegate) == 0x0003E0, "Member 'UCoreKeyListenerInputPromptWidget::_onKeyListenerInputPromptTriggeredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, _onKeyListenerInputPromptPressedDelegate) == 0x0003F0, "Member 'UCoreKeyListenerInputPromptWidget::_onKeyListenerInputPromptPressedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, _onKeyListenerInputPromptReleasedDelegate) == 0x000400, "Member 'UCoreKeyListenerInputPromptWidget::_onKeyListenerInputPromptReleasedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, _repetitionDelayCurve) == 0x000418, "Member 'UCoreKeyListenerInputPromptWidget::_repetitionDelayCurve' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, _chargingAnimCurve) == 0x000428, "Member 'UCoreKeyListenerInputPromptWidget::_chargingAnimCurve' has a wrong offset!");

// Class DBDUIViewsCore.CorePlayerSocialOptionButtonWidget
// 0x0058 (0x0508 - 0x04B0)
class UCorePlayerSocialOptionButtonWidget final : public UCoreButtonWidget
{
public:
	class UDBDTextBlock*                          OptionNameTB;                                      // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          DescriptionTB;                                     // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPlayerSocialOptionViewData            _data;                                             // 0x04C0(0x0048)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void SetData(const struct FPlayerSocialOptionViewData& Data);
	void UpdateVisual();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerSocialOptionButtonWidget">();
	}
	static class UCorePlayerSocialOptionButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerSocialOptionButtonWidget>();
	}
};
static_assert(alignof(UCorePlayerSocialOptionButtonWidget) == 0x000008, "Wrong alignment on UCorePlayerSocialOptionButtonWidget");
static_assert(sizeof(UCorePlayerSocialOptionButtonWidget) == 0x000508, "Wrong size on UCorePlayerSocialOptionButtonWidget");
static_assert(offsetof(UCorePlayerSocialOptionButtonWidget, OptionNameTB) == 0x0004B0, "Member 'UCorePlayerSocialOptionButtonWidget::OptionNameTB' has a wrong offset!");
static_assert(offsetof(UCorePlayerSocialOptionButtonWidget, DescriptionTB) == 0x0004B8, "Member 'UCorePlayerSocialOptionButtonWidget::DescriptionTB' has a wrong offset!");
static_assert(offsetof(UCorePlayerSocialOptionButtonWidget, _data) == 0x0004C0, "Member 'UCorePlayerSocialOptionButtonWidget::_data' has a wrong offset!");

// Class DBDUIViewsCore.CoreCurrencyInputPromptWidget
// 0x0068 (0x04A8 - 0x0440)
class UCoreCurrencyInputPromptWidget final : public UCoreKeyListenerInputPromptWidget
{
public:
	class UCorePriceTagWidget*                    PriceTag;                                          // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _chargeToUnlockCurve;                              // 0x0448(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _chargeToUnlockDuration;                           // 0x0450(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_454[0x54];                                     // 0x0454(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCurrencyData(const struct FPriceTagViewData& CurrencyData);
	void SetModalEnabled(const bool IsEnabled_0);

	ECurrencyType GetCurrencyType() const;
	void SetBackgroundVisible(const bool ShowBackground) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCurrencyInputPromptWidget">();
	}
	static class UCoreCurrencyInputPromptWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCurrencyInputPromptWidget>();
	}
};
static_assert(alignof(UCoreCurrencyInputPromptWidget) == 0x000008, "Wrong alignment on UCoreCurrencyInputPromptWidget");
static_assert(sizeof(UCoreCurrencyInputPromptWidget) == 0x0004A8, "Wrong size on UCoreCurrencyInputPromptWidget");
static_assert(offsetof(UCoreCurrencyInputPromptWidget, PriceTag) == 0x000440, "Member 'UCoreCurrencyInputPromptWidget::PriceTag' has a wrong offset!");
static_assert(offsetof(UCoreCurrencyInputPromptWidget, _chargeToUnlockCurve) == 0x000448, "Member 'UCoreCurrencyInputPromptWidget::_chargeToUnlockCurve' has a wrong offset!");
static_assert(offsetof(UCoreCurrencyInputPromptWidget, _chargeToUnlockDuration) == 0x000450, "Member 'UCoreCurrencyInputPromptWidget::_chargeToUnlockDuration' has a wrong offset!");

// Class DBDUIViewsCore.CoreInputSwitcherWidget
// 0x00E0 (0x0400 - 0x0320)
class UCoreInputSwitcherWidget : public UCoreBaseUserWidget
{
public:
	EInputSwitcherDisplayRule                     ButtonDisplayRule;                                 // 0x0320(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputSwitcherDisplayRule                     InputPromptDisplayRule;                            // 0x0321(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_322[0x6];                                      // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreKeyListenerInputPromptWidget*      InputPrompt;                                       // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreButtonWidget*                      Button;                                            // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _shouldRegisterForInputInConstruct;                // 0x0338(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextJustify                                  _alignment;                                        // 0x0339(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isEnabled;                                        // 0x033A(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33B[0x5];                                      // 0x033B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ButtonPressedSfxName;                              // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ButtonPressedSfx;                                  // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ButtonHoveredSfxName;                              // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ButtonHoveredSfx;                                  // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 InputTriggeredSfxName;                             // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          InputTriggeredSfx;                                 // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ButtonStartedChargingSfxName;                      // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ButtonStartedChargingSfx;                          // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ButtonCancelledChargingSfxName;                    // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ButtonCancelledChargingSfx;                        // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ButtonCompletedChargingSfxName;                    // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ButtonCompletedChargingSfx;                        // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _onInputSwitcherTriggeredDelegate;                 // 0x03D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E0[0x1];                                      // 0x03E0(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _sendAnalyticsData;                                // 0x03E1(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E2[0x6];                                      // 0x03E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _analyticsName;                                    // 0x03E8(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _prependCurrentTabNameToAnalyticsName;             // 0x03F8(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAlignmentChanged(ETextJustify newAlignment);
	void OnButtonClicked(class UCoreButtonWidget* Target);
	void OnInputPromptTriggered();
	void SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> iconTexture);
	void SetAlignment(ETextJustify newAlignment);
	void SetBackground(TSoftObjectPtr<class UMaterialInstance> backgroundMaterial);
	void SetChargeable(bool isChargeable, class UCurveFloat* holdingAnimCurve, float Duration);
	void SetEnabled(bool IsEnabled);
	void SetKeyOverride(const struct FKey& keyOverride);
	void SetLabel(const class FText& label);
	void SetRepeatable(bool isRepeatable, class UCurveFloat* repetitionDelayCurve);
	void SetUIAction(const EUIActionType ActionType);

	class UCoreButtonWidget* GetButton() const;
	bool GetEnabled() const;
	class UCoreKeyListenerInputPromptWidget* GetInputPrompt() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInputSwitcherWidget">();
	}
	static class UCoreInputSwitcherWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInputSwitcherWidget>();
	}
};
static_assert(alignof(UCoreInputSwitcherWidget) == 0x000008, "Wrong alignment on UCoreInputSwitcherWidget");
static_assert(sizeof(UCoreInputSwitcherWidget) == 0x000400, "Wrong size on UCoreInputSwitcherWidget");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonDisplayRule) == 0x000320, "Member 'UCoreInputSwitcherWidget::ButtonDisplayRule' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, InputPromptDisplayRule) == 0x000321, "Member 'UCoreInputSwitcherWidget::InputPromptDisplayRule' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, InputPrompt) == 0x000328, "Member 'UCoreInputSwitcherWidget::InputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, Button) == 0x000330, "Member 'UCoreInputSwitcherWidget::Button' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, _shouldRegisterForInputInConstruct) == 0x000338, "Member 'UCoreInputSwitcherWidget::_shouldRegisterForInputInConstruct' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, _alignment) == 0x000339, "Member 'UCoreInputSwitcherWidget::_alignment' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, _isEnabled) == 0x00033A, "Member 'UCoreInputSwitcherWidget::_isEnabled' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonPressedSfxName) == 0x000340, "Member 'UCoreInputSwitcherWidget::ButtonPressedSfxName' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonPressedSfx) == 0x000350, "Member 'UCoreInputSwitcherWidget::ButtonPressedSfx' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonHoveredSfxName) == 0x000358, "Member 'UCoreInputSwitcherWidget::ButtonHoveredSfxName' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonHoveredSfx) == 0x000368, "Member 'UCoreInputSwitcherWidget::ButtonHoveredSfx' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, InputTriggeredSfxName) == 0x000370, "Member 'UCoreInputSwitcherWidget::InputTriggeredSfxName' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, InputTriggeredSfx) == 0x000380, "Member 'UCoreInputSwitcherWidget::InputTriggeredSfx' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonStartedChargingSfxName) == 0x000388, "Member 'UCoreInputSwitcherWidget::ButtonStartedChargingSfxName' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonStartedChargingSfx) == 0x000398, "Member 'UCoreInputSwitcherWidget::ButtonStartedChargingSfx' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonCancelledChargingSfxName) == 0x0003A0, "Member 'UCoreInputSwitcherWidget::ButtonCancelledChargingSfxName' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonCancelledChargingSfx) == 0x0003B0, "Member 'UCoreInputSwitcherWidget::ButtonCancelledChargingSfx' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonCompletedChargingSfxName) == 0x0003B8, "Member 'UCoreInputSwitcherWidget::ButtonCompletedChargingSfxName' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonCompletedChargingSfx) == 0x0003C8, "Member 'UCoreInputSwitcherWidget::ButtonCompletedChargingSfx' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, _onInputSwitcherTriggeredDelegate) == 0x0003D0, "Member 'UCoreInputSwitcherWidget::_onInputSwitcherTriggeredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, _sendAnalyticsData) == 0x0003E1, "Member 'UCoreInputSwitcherWidget::_sendAnalyticsData' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, _analyticsName) == 0x0003E8, "Member 'UCoreInputSwitcherWidget::_analyticsName' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, _prependCurrentTabNameToAnalyticsName) == 0x0003F8, "Member 'UCoreInputSwitcherWidget::_prependCurrentTabNameToAnalyticsName' has a wrong offset!");

// Class DBDUIViewsCore.CorePlayerExpGaugeWidget
// 0x0048 (0x0368 - 0x0320)
class UCorePlayerExpGaugeWidget : public UCoreBaseUserWidget
{
public:
	TDelegate<void()>                             _onPlayerExpUpdateCompletedDelegate;               // 0x0320(0x0014)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   XpText;                                            // 0x0338(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ProgressText;                                      // 0x0350(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void Add(const int32 bonusXp);
	void OnUpdateComplete(class UUITweenInstance* tween);
	void OnUpdateProgress(class UUITweenInstance* tween);
	void SetViewData(const struct FPlayerLevelViewData& playerViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerExpGaugeWidget">();
	}
	static class UCorePlayerExpGaugeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerExpGaugeWidget>();
	}
};
static_assert(alignof(UCorePlayerExpGaugeWidget) == 0x000008, "Wrong alignment on UCorePlayerExpGaugeWidget");
static_assert(sizeof(UCorePlayerExpGaugeWidget) == 0x000368, "Wrong size on UCorePlayerExpGaugeWidget");
static_assert(offsetof(UCorePlayerExpGaugeWidget, _onPlayerExpUpdateCompletedDelegate) == 0x000320, "Member 'UCorePlayerExpGaugeWidget::_onPlayerExpUpdateCompletedDelegate' has a wrong offset!");
static_assert(offsetof(UCorePlayerExpGaugeWidget, XpText) == 0x000338, "Member 'UCorePlayerExpGaugeWidget::XpText' has a wrong offset!");
static_assert(offsetof(UCorePlayerExpGaugeWidget, ProgressText) == 0x000350, "Member 'UCorePlayerExpGaugeWidget::ProgressText' has a wrong offset!");

// Class DBDUIViewsCore.CoreCurrencyInputSwitcherWidget
// 0x0018 (0x0418 - 0x0400)
class UCoreCurrencyInputSwitcherWidget final : public UCoreInputSwitcherWidget
{
public:
	uint8                                         Pad_400[0x18];                                     // 0x0400(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInputSwitcherTriggered();
	void SetBackgroundVisible(const bool ShowBackground);
	void SetCurrencyData(const struct FPriceTagViewData& CurrencyData);

	ECurrencyType GetCurrencyType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCurrencyInputSwitcherWidget">();
	}
	static class UCoreCurrencyInputSwitcherWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCurrencyInputSwitcherWidget>();
	}
};
static_assert(alignof(UCoreCurrencyInputSwitcherWidget) == 0x000008, "Wrong alignment on UCoreCurrencyInputSwitcherWidget");
static_assert(sizeof(UCoreCurrencyInputSwitcherWidget) == 0x000418, "Wrong size on UCoreCurrencyInputSwitcherWidget");

// Class DBDUIViewsCore.CoreCurrencyLabelWidget
// 0x0000 (0x04B0 - 0x04B0)
class UCoreCurrencyLabelWidget final : public UCoreButtonWidget
{
public:
	void PlayNotEnoughCurrency();
	void SetData(const struct FCurrencyLabelViewData& ViewData);
	void UpdateCurrency(int32 newBalance, int32 previousBalance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCurrencyLabelWidget">();
	}
	static class UCoreCurrencyLabelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCurrencyLabelWidget>();
	}
};
static_assert(alignof(UCoreCurrencyLabelWidget) == 0x000008, "Wrong alignment on UCoreCurrencyLabelWidget");
static_assert(sizeof(UCoreCurrencyLabelWidget) == 0x0004B0, "Wrong size on UCoreCurrencyLabelWidget");

// Class DBDUIViewsCore.CorePlayerStatusKillerEffectWidget
// 0x0000 (0x0350 - 0x0350)
class UCorePlayerStatusKillerEffectWidget : public UCoreBaseHudWidget
{
public:
	void ClearVisual();
	void SetKillerData(const struct FPlayerStatusViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerStatusKillerEffectWidget">();
	}
	static class UCorePlayerStatusKillerEffectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerStatusKillerEffectWidget>();
	}
};
static_assert(alignof(UCorePlayerStatusKillerEffectWidget) == 0x000008, "Wrong alignment on UCorePlayerStatusKillerEffectWidget");
static_assert(sizeof(UCorePlayerStatusKillerEffectWidget) == 0x000350, "Wrong size on UCorePlayerStatusKillerEffectWidget");

// Class DBDUIViewsCore.CorePlayerStatusKillerEffectK07Widget
// 0x0000 (0x0350 - 0x0350)
class UCorePlayerStatusKillerEffectK07Widget final : public UCorePlayerStatusKillerEffectWidget
{
public:
	void AfflictionHit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerStatusKillerEffectK07Widget">();
	}
	static class UCorePlayerStatusKillerEffectK07Widget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerStatusKillerEffectK07Widget>();
	}
};
static_assert(alignof(UCorePlayerStatusKillerEffectK07Widget) == 0x000008, "Wrong alignment on UCorePlayerStatusKillerEffectK07Widget");
static_assert(sizeof(UCorePlayerStatusKillerEffectK07Widget) == 0x000350, "Wrong size on UCorePlayerStatusKillerEffectK07Widget");

// Class DBDUIViewsCore.CoreCurrencyProgressionRewardWidget
// 0x01B8 (0x06B8 - 0x0500)
class UCoreCurrencyProgressionRewardWidget : public UCoreRewardWidget
{
public:
	struct FCurrencyProgressionRewardViewData     _data;                                             // 0x0500(0x01B8)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void SetCurrencyProgressionRewardData(const struct FCurrencyProgressionRewardViewData& CurrencyProgressionRewardViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCurrencyProgressionRewardWidget">();
	}
	static class UCoreCurrencyProgressionRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCurrencyProgressionRewardWidget>();
	}
};
static_assert(alignof(UCoreCurrencyProgressionRewardWidget) == 0x000008, "Wrong alignment on UCoreCurrencyProgressionRewardWidget");
static_assert(sizeof(UCoreCurrencyProgressionRewardWidget) == 0x0006B8, "Wrong size on UCoreCurrencyProgressionRewardWidget");
static_assert(offsetof(UCoreCurrencyProgressionRewardWidget, _data) == 0x000500, "Member 'UCoreCurrencyProgressionRewardWidget::_data' has a wrong offset!");

// Class DBDUIViewsCore.CoreCustomizationItemSlotWrapper
// 0x0008 (0x0328 - 0x0320)
class UCoreCustomizationItemSlotWrapper : public UCoreBaseUserWidget
{
public:
	class UCoreStoreCustomizationItemWidget*      CustomizationItemWidget;                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetAsEmptySlot(const bool isEmptySlot);

	class UCoreStoreCustomizationItemWidget* GetCustomizationItemWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCustomizationItemSlotWrapper">();
	}
	static class UCoreCustomizationItemSlotWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCustomizationItemSlotWrapper>();
	}
};
static_assert(alignof(UCoreCustomizationItemSlotWrapper) == 0x000008, "Wrong alignment on UCoreCustomizationItemSlotWrapper");
static_assert(sizeof(UCoreCustomizationItemSlotWrapper) == 0x000328, "Wrong size on UCoreCustomizationItemSlotWrapper");
static_assert(offsetof(UCoreCustomizationItemSlotWrapper, CustomizationItemWidget) == 0x000320, "Member 'UCoreCustomizationItemSlotWrapper::CustomizationItemWidget' has a wrong offset!");

// Class DBDUIViewsCore.CorePriceTagWidget
// 0x0018 (0x0338 - 0x0320)
class UCorePriceTagWidget : public UCoreBaseUserWidget
{
public:
	float                                         _discountTagSpacing;                               // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDImage*                              CurrencyIcon;                                      // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShowBackground;                                    // 0x0330(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBackgroundVisible(const bool ShowBackground_0);
	void SetData(const struct FPriceTagViewData& ViewData);
	void SetDiscountTagSpacing(const float bottomPadding);
	void SetHighlightInsufficientCurrency(const bool Highlight);
	void UpdatePriceTagScale(const float priceTagScale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePriceTagWidget">();
	}
	static class UCorePriceTagWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePriceTagWidget>();
	}
};
static_assert(alignof(UCorePriceTagWidget) == 0x000008, "Wrong alignment on UCorePriceTagWidget");
static_assert(sizeof(UCorePriceTagWidget) == 0x000338, "Wrong size on UCorePriceTagWidget");
static_assert(offsetof(UCorePriceTagWidget, _discountTagSpacing) == 0x000320, "Member 'UCorePriceTagWidget::_discountTagSpacing' has a wrong offset!");
static_assert(offsetof(UCorePriceTagWidget, CurrencyIcon) == 0x000328, "Member 'UCorePriceTagWidget::CurrencyIcon' has a wrong offset!");
static_assert(offsetof(UCorePriceTagWidget, ShowBackground) == 0x000330, "Member 'UCorePriceTagWidget::ShowBackground' has a wrong offset!");

// Class DBDUIViewsCore.CoreCustomizationRewardWidget
// 0x0250 (0x0750 - 0x0500)
class UCoreCustomizationRewardWidget : public UCoreRewardWidget
{
public:
	class UDBDImage*                              RarityIMG;                                         // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCustomizationRewardViewData           _data;                                             // 0x0508(0x0240)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_748[0x8];                                      // 0x0748(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCustomizationRewardData(const struct FCustomizationRewardViewData& CustomizationRewardViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCustomizationRewardWidget">();
	}
	static class UCoreCustomizationRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCustomizationRewardWidget>();
	}
};
static_assert(alignof(UCoreCustomizationRewardWidget) == 0x000008, "Wrong alignment on UCoreCustomizationRewardWidget");
static_assert(sizeof(UCoreCustomizationRewardWidget) == 0x000750, "Wrong size on UCoreCustomizationRewardWidget");
static_assert(offsetof(UCoreCustomizationRewardWidget, RarityIMG) == 0x000500, "Member 'UCoreCustomizationRewardWidget::RarityIMG' has a wrong offset!");
static_assert(offsetof(UCoreCustomizationRewardWidget, _data) == 0x000508, "Member 'UCoreCustomizationRewardWidget::_data' has a wrong offset!");

// Class DBDUIViewsCore.CoreDisabledStateOverlayWidget
// 0x0058 (0x0378 - 0x0320)
class UCoreDisabledStateOverlayWidget : public UCoreBaseUserWidget
{
public:
	struct FCoreDisabledStateWidgetConfiguration  _widgetConfiguration;                              // 0x0320(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	class UDBDImage*                              DisabledOverlay;                                   // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetOverlayImage(const EDisabledItemOption DisabledItemOption);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreDisabledStateOverlayWidget">();
	}
	static class UCoreDisabledStateOverlayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreDisabledStateOverlayWidget>();
	}
};
static_assert(alignof(UCoreDisabledStateOverlayWidget) == 0x000008, "Wrong alignment on UCoreDisabledStateOverlayWidget");
static_assert(sizeof(UCoreDisabledStateOverlayWidget) == 0x000378, "Wrong size on UCoreDisabledStateOverlayWidget");
static_assert(offsetof(UCoreDisabledStateOverlayWidget, _widgetConfiguration) == 0x000320, "Member 'UCoreDisabledStateOverlayWidget::_widgetConfiguration' has a wrong offset!");
static_assert(offsetof(UCoreDisabledStateOverlayWidget, DisabledOverlay) == 0x000370, "Member 'UCoreDisabledStateOverlayWidget::DisabledOverlay' has a wrong offset!");

// Class DBDUIViewsCore.CorePreConstructableList
// 0x00C0 (0x00F0 - 0x0030)
class alignas(0x10) UCorePreConstructableList final : public UObject
{
public:
	class UUserWidget*                            _owningObject;                                     // 0x0030(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UUserWidget*>                    _widgetList;                                       // 0x0038(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UUserWidget*>                    _shownWidgetList;                                  // 0x0048(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TSubclassOf<class UUserWidget>                _userWidgetClass;                                  // 0x0058(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPanelWidget*                           _container;                                        // 0x0060(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0x88];                                      // 0x0068(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePreConstructableList">();
	}
	static class UCorePreConstructableList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePreConstructableList>();
	}
};
static_assert(alignof(UCorePreConstructableList) == 0x000010, "Wrong alignment on UCorePreConstructableList");
static_assert(sizeof(UCorePreConstructableList) == 0x0000F0, "Wrong size on UCorePreConstructableList");
static_assert(offsetof(UCorePreConstructableList, _owningObject) == 0x000030, "Member 'UCorePreConstructableList::_owningObject' has a wrong offset!");
static_assert(offsetof(UCorePreConstructableList, _widgetList) == 0x000038, "Member 'UCorePreConstructableList::_widgetList' has a wrong offset!");
static_assert(offsetof(UCorePreConstructableList, _shownWidgetList) == 0x000048, "Member 'UCorePreConstructableList::_shownWidgetList' has a wrong offset!");
static_assert(offsetof(UCorePreConstructableList, _userWidgetClass) == 0x000058, "Member 'UCorePreConstructableList::_userWidgetClass' has a wrong offset!");
static_assert(offsetof(UCorePreConstructableList, _container) == 0x000060, "Member 'UCorePreConstructableList::_container' has a wrong offset!");

// Class DBDUIViewsCore.CoreDisplayStandWidget
// 0x0050 (0x0370 - 0x0320)
class UCoreDisplayStandWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float Distance)> _onDisplayStandRotated;                           // 0x0328(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UDragZone*                              DragZone;                                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _useControllerRotation;                            // 0x0340(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _rotationSpeed;                                    // 0x0344(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _showDisplayPrompt;                                // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _displayPromptText;                                // 0x0350(0x0018)(BlueprintVisible, NoClear, Protected, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      _displayPrompt;                                    // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnDrag(const struct FVector2D& cursorDelta);
	void SetDisplayPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt);
	void SetDisplayPromptText(const class FText& displayPromptText);
	void SetDisplayPromptVisibility(const bool IsVisible_0);
	void SetUseControllerRotation(const bool UseControllerRotation);
	void UpdateDisplayPrompt();

	bool GetUseControllerRotation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreDisplayStandWidget">();
	}
	static class UCoreDisplayStandWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreDisplayStandWidget>();
	}
};
static_assert(alignof(UCoreDisplayStandWidget) == 0x000008, "Wrong alignment on UCoreDisplayStandWidget");
static_assert(sizeof(UCoreDisplayStandWidget) == 0x000370, "Wrong size on UCoreDisplayStandWidget");
static_assert(offsetof(UCoreDisplayStandWidget, _onDisplayStandRotated) == 0x000328, "Member 'UCoreDisplayStandWidget::_onDisplayStandRotated' has a wrong offset!");
static_assert(offsetof(UCoreDisplayStandWidget, DragZone) == 0x000338, "Member 'UCoreDisplayStandWidget::DragZone' has a wrong offset!");
static_assert(offsetof(UCoreDisplayStandWidget, _useControllerRotation) == 0x000340, "Member 'UCoreDisplayStandWidget::_useControllerRotation' has a wrong offset!");
static_assert(offsetof(UCoreDisplayStandWidget, _rotationSpeed) == 0x000344, "Member 'UCoreDisplayStandWidget::_rotationSpeed' has a wrong offset!");
static_assert(offsetof(UCoreDisplayStandWidget, _showDisplayPrompt) == 0x000348, "Member 'UCoreDisplayStandWidget::_showDisplayPrompt' has a wrong offset!");
static_assert(offsetof(UCoreDisplayStandWidget, _displayPromptText) == 0x000350, "Member 'UCoreDisplayStandWidget::_displayPromptText' has a wrong offset!");
static_assert(offsetof(UCoreDisplayStandWidget, _displayPrompt) == 0x000368, "Member 'UCoreDisplayStandWidget::_displayPrompt' has a wrong offset!");

// Class DBDUIViewsCore.CoreEffectCardWidget
// 0x0180 (0x04A0 - 0x0320)
class UCoreEffectCardWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDImage*                              Background;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBorder*                                BorderState;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomizationTooltipViewData          TooltipData;                                       // 0x0338(0x0158)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MaxTimer;                                          // 0x0490(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         currentTimer;                                      // 0x0494(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectCardState                              CurrentState;                                      // 0x0498(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   HorizontalAlignment;                               // 0x0499(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     VerticalAlignment;                                 // 0x049A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49B[0x5];                                      // 0x049B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTooltipData(const struct FCustomizationTooltipViewData& Data);
	void UpdateCardState(const EEffectCardState State);

	void UpdateTimer(const float currentTimer_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreEffectCardWidget">();
	}
	static class UCoreEffectCardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreEffectCardWidget>();
	}
};
static_assert(alignof(UCoreEffectCardWidget) == 0x000008, "Wrong alignment on UCoreEffectCardWidget");
static_assert(sizeof(UCoreEffectCardWidget) == 0x0004A0, "Wrong size on UCoreEffectCardWidget");
static_assert(offsetof(UCoreEffectCardWidget, Background) == 0x000328, "Member 'UCoreEffectCardWidget::Background' has a wrong offset!");
static_assert(offsetof(UCoreEffectCardWidget, BorderState) == 0x000330, "Member 'UCoreEffectCardWidget::BorderState' has a wrong offset!");
static_assert(offsetof(UCoreEffectCardWidget, TooltipData) == 0x000338, "Member 'UCoreEffectCardWidget::TooltipData' has a wrong offset!");
static_assert(offsetof(UCoreEffectCardWidget, MaxTimer) == 0x000490, "Member 'UCoreEffectCardWidget::MaxTimer' has a wrong offset!");
static_assert(offsetof(UCoreEffectCardWidget, currentTimer) == 0x000494, "Member 'UCoreEffectCardWidget::currentTimer' has a wrong offset!");
static_assert(offsetof(UCoreEffectCardWidget, CurrentState) == 0x000498, "Member 'UCoreEffectCardWidget::CurrentState' has a wrong offset!");
static_assert(offsetof(UCoreEffectCardWidget, HorizontalAlignment) == 0x000499, "Member 'UCoreEffectCardWidget::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreEffectCardWidget, VerticalAlignment) == 0x00049A, "Member 'UCoreEffectCardWidget::VerticalAlignment' has a wrong offset!");

// Class DBDUIViewsCore.CorePlayerStatusesContainerWidget
// 0x0040 (0x0390 - 0x0350)
class UCorePlayerStatusesContainerWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBox*                           PlayerStatusVerticalBox;                           // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCorePlayerStatusWidget*>        PlayerStatusWidgets;                               // 0x0368(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<TScriptInterface<class IPlayerStatusViewInterface>> _playerStatusViewInterfaces;          // 0x0378(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSubclassOf<class UCorePlayerStatusWidget>    _playerStatusWidgetClass;                          // 0x0388(0x0008)(Edit, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerStatusesContainerWidget">();
	}
	static class UCorePlayerStatusesContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerStatusesContainerWidget>();
	}
};
static_assert(alignof(UCorePlayerStatusesContainerWidget) == 0x000008, "Wrong alignment on UCorePlayerStatusesContainerWidget");
static_assert(sizeof(UCorePlayerStatusesContainerWidget) == 0x000390, "Wrong size on UCorePlayerStatusesContainerWidget");
static_assert(offsetof(UCorePlayerStatusesContainerWidget, PlayerStatusVerticalBox) == 0x000360, "Member 'UCorePlayerStatusesContainerWidget::PlayerStatusVerticalBox' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusesContainerWidget, PlayerStatusWidgets) == 0x000368, "Member 'UCorePlayerStatusesContainerWidget::PlayerStatusWidgets' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusesContainerWidget, _playerStatusViewInterfaces) == 0x000378, "Member 'UCorePlayerStatusesContainerWidget::_playerStatusViewInterfaces' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusesContainerWidget, _playerStatusWidgetClass) == 0x000388, "Member 'UCorePlayerStatusesContainerWidget::_playerStatusWidgetClass' has a wrong offset!");

// Class DBDUIViewsCore.CoreEndGameCollapseBarWidget
// 0x0078 (0x03C8 - 0x0350)
class UCoreEndGameCollapseBarWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _progressBarInterpSpeed;                           // 0x0358(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35C[0x6C];                                     // 0x035C(0x006C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayToZeroAnimation();
	void UpdateBarProgression(const float Progress);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreEndGameCollapseBarWidget">();
	}
	static class UCoreEndGameCollapseBarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreEndGameCollapseBarWidget>();
	}
};
static_assert(alignof(UCoreEndGameCollapseBarWidget) == 0x000008, "Wrong alignment on UCoreEndGameCollapseBarWidget");
static_assert(sizeof(UCoreEndGameCollapseBarWidget) == 0x0003C8, "Wrong size on UCoreEndGameCollapseBarWidget");
static_assert(offsetof(UCoreEndGameCollapseBarWidget, _progressBarInterpSpeed) == 0x000358, "Member 'UCoreEndGameCollapseBarWidget::_progressBarInterpSpeed' has a wrong offset!");

// Class DBDUIViewsCore.CoreEndGameCollapseProgressWidget
// 0x0048 (0x0368 - 0x0320)
class UCoreEndGameCollapseProgressWidget final : public UCoreBaseUserWidget
{
public:
	class UProgressBar*                           ProgressBar;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           MarkerLeftCanvas;                                  // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           MarkerRightCanvas;                                 // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBoxSlot*                     _markerLeftBox;                                    // 0x0338(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHorizontalBoxSlot*                     _markerRightBox;                                   // 0x0340(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_348[0x20];                                     // 0x0348(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreEndGameCollapseProgressWidget">();
	}
	static class UCoreEndGameCollapseProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreEndGameCollapseProgressWidget>();
	}
};
static_assert(alignof(UCoreEndGameCollapseProgressWidget) == 0x000008, "Wrong alignment on UCoreEndGameCollapseProgressWidget");
static_assert(sizeof(UCoreEndGameCollapseProgressWidget) == 0x000368, "Wrong size on UCoreEndGameCollapseProgressWidget");
static_assert(offsetof(UCoreEndGameCollapseProgressWidget, ProgressBar) == 0x000320, "Member 'UCoreEndGameCollapseProgressWidget::ProgressBar' has a wrong offset!");
static_assert(offsetof(UCoreEndGameCollapseProgressWidget, MarkerLeftCanvas) == 0x000328, "Member 'UCoreEndGameCollapseProgressWidget::MarkerLeftCanvas' has a wrong offset!");
static_assert(offsetof(UCoreEndGameCollapseProgressWidget, MarkerRightCanvas) == 0x000330, "Member 'UCoreEndGameCollapseProgressWidget::MarkerRightCanvas' has a wrong offset!");
static_assert(offsetof(UCoreEndGameCollapseProgressWidget, _markerLeftBox) == 0x000338, "Member 'UCoreEndGameCollapseProgressWidget::_markerLeftBox' has a wrong offset!");
static_assert(offsetof(UCoreEndGameCollapseProgressWidget, _markerRightBox) == 0x000340, "Member 'UCoreEndGameCollapseProgressWidget::_markerRightBox' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreSpecialPackDetailsWidget
// 0x0130 (0x0450 - 0x0320)
class UCoreStoreSpecialPackDetailsWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x28];                                     // 0x0320(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class URetainerBox*                           MaskEffect;                                        // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              PackIMG;                                           // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PackTitleTB;                                       // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          OwnedTB;                                           // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      SubTextRTB;                                        // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUniformGridPanel*                      ContentPanel;                                      // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          BuyActionLabelTB;                                  // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreCurrencyInputSwitcherWidget*       CurrencyBuyButton;                                 // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               PremiumBuyButton;                                  // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreArchivePassItemWidget*        ArchivePassItem;                                   // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreRiftTierItemWidget*           RiftTierItem;                                      // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          PackDetailsScrollBox;                              // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      DescriptionRTB;                                    // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreStoreCharacterItemWidget> _characterItemWidgetClass;                      // 0x03B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _characterPoolSize;                                // 0x03B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreStoreCustomizationItemWidget> _customizationItemWidgetClass;              // 0x03C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _customizationPoolSize;                            // 0x03C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _numOfColumns;                                     // 0x03CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _itemScale;                                        // 0x03D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _itemsLayoutMask;                                  // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStoreSpecialPackViewData*              _data;                                             // 0x03D8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _characterList;                                    // 0x03E0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCorePreConstructableList*              _customizationList;                                // 0x03E8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextureLoadingWrapper*                 _imageLoader;                                      // 0x03F0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULocalTextureLoader*                    _localTextureLoader;                               // 0x03F8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_400[0x50];                                     // 0x0400(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimateHide();
	void AnimateShow();
	void OnArchivePassClicked(class UCoreButtonWidget* Button);
	void OnCharacterClicked(class UCoreButtonWidget* Button);
	void OnCurrencyButtonClicked(ECurrencyType currencyType);
	void OnCustomizationClicked(class UCoreButtonWidget* Button);
	void OnHideAnimationFinished();
	void OnPremiumButtonClicked();
	void OnShowAnimationFinished();
	void SetSpecialPackImageUsingComposition(const int32 numberOfItems, const TArray<class UStorePackContentData*>& Data, const TMap<class FName, class UTexture2D*>& icons);

	void LoadPackImage(const TSoftObjectPtr<class UTexture2D>& localPtr, struct FSoftRemoteContentCacheObjectPtr* remotePtr) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreSpecialPackDetailsWidget">();
	}
	static class UCoreStoreSpecialPackDetailsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreSpecialPackDetailsWidget>();
	}
};
static_assert(alignof(UCoreStoreSpecialPackDetailsWidget) == 0x000008, "Wrong alignment on UCoreStoreSpecialPackDetailsWidget");
static_assert(sizeof(UCoreStoreSpecialPackDetailsWidget) == 0x000450, "Wrong size on UCoreStoreSpecialPackDetailsWidget");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, MaskEffect) == 0x000348, "Member 'UCoreStoreSpecialPackDetailsWidget::MaskEffect' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, PackIMG) == 0x000350, "Member 'UCoreStoreSpecialPackDetailsWidget::PackIMG' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, PackTitleTB) == 0x000358, "Member 'UCoreStoreSpecialPackDetailsWidget::PackTitleTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, OwnedTB) == 0x000360, "Member 'UCoreStoreSpecialPackDetailsWidget::OwnedTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, SubTextRTB) == 0x000368, "Member 'UCoreStoreSpecialPackDetailsWidget::SubTextRTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, ContentPanel) == 0x000370, "Member 'UCoreStoreSpecialPackDetailsWidget::ContentPanel' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, BuyActionLabelTB) == 0x000378, "Member 'UCoreStoreSpecialPackDetailsWidget::BuyActionLabelTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, CurrencyBuyButton) == 0x000380, "Member 'UCoreStoreSpecialPackDetailsWidget::CurrencyBuyButton' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, PremiumBuyButton) == 0x000388, "Member 'UCoreStoreSpecialPackDetailsWidget::PremiumBuyButton' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, ArchivePassItem) == 0x000390, "Member 'UCoreStoreSpecialPackDetailsWidget::ArchivePassItem' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, RiftTierItem) == 0x000398, "Member 'UCoreStoreSpecialPackDetailsWidget::RiftTierItem' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, PackDetailsScrollBox) == 0x0003A0, "Member 'UCoreStoreSpecialPackDetailsWidget::PackDetailsScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, DescriptionRTB) == 0x0003A8, "Member 'UCoreStoreSpecialPackDetailsWidget::DescriptionRTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, _characterItemWidgetClass) == 0x0003B0, "Member 'UCoreStoreSpecialPackDetailsWidget::_characterItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, _characterPoolSize) == 0x0003B8, "Member 'UCoreStoreSpecialPackDetailsWidget::_characterPoolSize' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, _customizationItemWidgetClass) == 0x0003C0, "Member 'UCoreStoreSpecialPackDetailsWidget::_customizationItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, _customizationPoolSize) == 0x0003C8, "Member 'UCoreStoreSpecialPackDetailsWidget::_customizationPoolSize' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, _numOfColumns) == 0x0003CC, "Member 'UCoreStoreSpecialPackDetailsWidget::_numOfColumns' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, _itemScale) == 0x0003D0, "Member 'UCoreStoreSpecialPackDetailsWidget::_itemScale' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, _itemsLayoutMask) == 0x0003D4, "Member 'UCoreStoreSpecialPackDetailsWidget::_itemsLayoutMask' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, _data) == 0x0003D8, "Member 'UCoreStoreSpecialPackDetailsWidget::_data' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, _characterList) == 0x0003E0, "Member 'UCoreStoreSpecialPackDetailsWidget::_characterList' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, _customizationList) == 0x0003E8, "Member 'UCoreStoreSpecialPackDetailsWidget::_customizationList' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, _imageLoader) == 0x0003F0, "Member 'UCoreStoreSpecialPackDetailsWidget::_imageLoader' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPackDetailsWidget, _localTextureLoader) == 0x0003F8, "Member 'UCoreStoreSpecialPackDetailsWidget::_localTextureLoader' has a wrong offset!");

// Class DBDUIViewsCore.CoreEquippedItemWidget
// 0x0018 (0x0368 - 0x0350)
class UCoreEquippedItemWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBox*                         ItemContainer;                                     // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ItemDisappearSfx;                                  // 0x0360(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreEquippedItemWidget">();
	}
	static class UCoreEquippedItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreEquippedItemWidget>();
	}
};
static_assert(alignof(UCoreEquippedItemWidget) == 0x000008, "Wrong alignment on UCoreEquippedItemWidget");
static_assert(sizeof(UCoreEquippedItemWidget) == 0x000368, "Wrong size on UCoreEquippedItemWidget");
static_assert(offsetof(UCoreEquippedItemWidget, ItemContainer) == 0x000358, "Member 'UCoreEquippedItemWidget::ItemContainer' has a wrong offset!");
static_assert(offsetof(UCoreEquippedItemWidget, ItemDisappearSfx) == 0x000360, "Member 'UCoreEquippedItemWidget::ItemDisappearSfx' has a wrong offset!");

// Class DBDUIViewsCore.CoreEquippedPowerWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreEquippedPowerWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreEquippedPowerWidget">();
	}
	static class UCoreEquippedPowerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreEquippedPowerWidget>();
	}
};
static_assert(alignof(UCoreEquippedPowerWidget) == 0x000008, "Wrong alignment on UCoreEquippedPowerWidget");
static_assert(sizeof(UCoreEquippedPowerWidget) == 0x000358, "Wrong size on UCoreEquippedPowerWidget");

// Class DBDUIViewsCore.CoreScreenIndicatorWidget
// 0x0030 (0x0350 - 0x0320)
class UCoreScreenIndicatorWidget final : public UCoreBaseUserWidget
{
public:
	float                                         InactiveTime;                                      // 0x0320(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              IndicatorPadding;                                  // 0x0328(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DistanceClamping;                                  // 0x0338(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceRatio;                                  // 0x0348(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceAlpha;                                  // 0x034C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ClearData();
	void SetData(const struct FScreenIndicatorViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreScreenIndicatorWidget">();
	}
	static class UCoreScreenIndicatorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreScreenIndicatorWidget>();
	}
};
static_assert(alignof(UCoreScreenIndicatorWidget) == 0x000008, "Wrong alignment on UCoreScreenIndicatorWidget");
static_assert(sizeof(UCoreScreenIndicatorWidget) == 0x000350, "Wrong size on UCoreScreenIndicatorWidget");
static_assert(offsetof(UCoreScreenIndicatorWidget, InactiveTime) == 0x000320, "Member 'UCoreScreenIndicatorWidget::InactiveTime' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorWidget, IndicatorPadding) == 0x000328, "Member 'UCoreScreenIndicatorWidget::IndicatorPadding' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorWidget, DistanceClamping) == 0x000338, "Member 'UCoreScreenIndicatorWidget::DistanceClamping' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorWidget, MinDistanceRatio) == 0x000348, "Member 'UCoreScreenIndicatorWidget::MinDistanceRatio' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorWidget, MinDistanceAlpha) == 0x00034C, "Member 'UCoreScreenIndicatorWidget::MinDistanceAlpha' has a wrong offset!");

// Class DBDUIViewsCore.CoreEventEntryWidget
// 0x0220 (0x0540 - 0x0320)
class UCoreEventEntryWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UEventEntryViewData*                    _viewData;                                         // 0x0328(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             _eventSkinDataTable;                               // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FEventEntryPopupSkinUIData             _skinData;                                         // 0x0338(0x01A8)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UDBDImage*                              TitleBanner;                                       // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              TitleImage;                                        // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          EventDateText;                                     // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreTabContainerWidget*                TabsContainer;                                     // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMilestoneTrackerWidget*                MilestoneTracker;                                  // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      ScrollPrompt;                                      // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const int32 Key)> _eventEntryTabSelectedEvent;                     // 0x0510(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _backActionDelegate;                               // 0x0520(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RegressionButton;                                  // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URichTextBlock*                         TitleText;                                         // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnBackAction();
	void OnEnter();
	void OnLeave();
	void OnShow();
	void OnTabSelected(class UCoreSelectableButtonWidget* selectedButton);
	void SetTabsVisuals();
	void SetUiTakeoverActive(bool IsActive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreEventEntryWidget">();
	}
	static class UCoreEventEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreEventEntryWidget>();
	}
};
static_assert(alignof(UCoreEventEntryWidget) == 0x000008, "Wrong alignment on UCoreEventEntryWidget");
static_assert(sizeof(UCoreEventEntryWidget) == 0x000540, "Wrong size on UCoreEventEntryWidget");
static_assert(offsetof(UCoreEventEntryWidget, _viewData) == 0x000328, "Member 'UCoreEventEntryWidget::_viewData' has a wrong offset!");
static_assert(offsetof(UCoreEventEntryWidget, _eventSkinDataTable) == 0x000330, "Member 'UCoreEventEntryWidget::_eventSkinDataTable' has a wrong offset!");
static_assert(offsetof(UCoreEventEntryWidget, _skinData) == 0x000338, "Member 'UCoreEventEntryWidget::_skinData' has a wrong offset!");
static_assert(offsetof(UCoreEventEntryWidget, TitleBanner) == 0x0004E0, "Member 'UCoreEventEntryWidget::TitleBanner' has a wrong offset!");
static_assert(offsetof(UCoreEventEntryWidget, TitleImage) == 0x0004E8, "Member 'UCoreEventEntryWidget::TitleImage' has a wrong offset!");
static_assert(offsetof(UCoreEventEntryWidget, EventDateText) == 0x0004F0, "Member 'UCoreEventEntryWidget::EventDateText' has a wrong offset!");
static_assert(offsetof(UCoreEventEntryWidget, TabsContainer) == 0x0004F8, "Member 'UCoreEventEntryWidget::TabsContainer' has a wrong offset!");
static_assert(offsetof(UCoreEventEntryWidget, MilestoneTracker) == 0x000500, "Member 'UCoreEventEntryWidget::MilestoneTracker' has a wrong offset!");
static_assert(offsetof(UCoreEventEntryWidget, ScrollPrompt) == 0x000508, "Member 'UCoreEventEntryWidget::ScrollPrompt' has a wrong offset!");
static_assert(offsetof(UCoreEventEntryWidget, _eventEntryTabSelectedEvent) == 0x000510, "Member 'UCoreEventEntryWidget::_eventEntryTabSelectedEvent' has a wrong offset!");
static_assert(offsetof(UCoreEventEntryWidget, _backActionDelegate) == 0x000520, "Member 'UCoreEventEntryWidget::_backActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreEventEntryWidget, RegressionButton) == 0x000530, "Member 'UCoreEventEntryWidget::RegressionButton' has a wrong offset!");
static_assert(offsetof(UCoreEventEntryWidget, TitleText) == 0x000538, "Member 'UCoreEventEntryWidget::TitleText' has a wrong offset!");

// Class DBDUIViewsCore.CoreExampleWidget
// 0x0098 (0x03E8 - 0x0350)
class UCoreExampleWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EditAnywhere;                                      // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EditDefaultsOnly;                                  // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EditInstanceOnly;                                  // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EditNoBlueprint;                                   // 0x0388(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EditDefaultsOnlyBlueprintReadOnly;                 // 0x0398(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VisibleAnywhere;                                   // 0x03A8(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VisibleDefaultsOnly;                               // 0x03B8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VisibleInstanceOnly;                               // 0x03C8(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ExampleButtonClickDelegate;                        // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreExampleWidget">();
	}
	static class UCoreExampleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreExampleWidget>();
	}
};
static_assert(alignof(UCoreExampleWidget) == 0x000008, "Wrong alignment on UCoreExampleWidget");
static_assert(sizeof(UCoreExampleWidget) == 0x0003E8, "Wrong size on UCoreExampleWidget");
static_assert(offsetof(UCoreExampleWidget, EditAnywhere) == 0x000358, "Member 'UCoreExampleWidget::EditAnywhere' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, EditDefaultsOnly) == 0x000368, "Member 'UCoreExampleWidget::EditDefaultsOnly' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, EditInstanceOnly) == 0x000378, "Member 'UCoreExampleWidget::EditInstanceOnly' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, EditNoBlueprint) == 0x000388, "Member 'UCoreExampleWidget::EditNoBlueprint' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, EditDefaultsOnlyBlueprintReadOnly) == 0x000398, "Member 'UCoreExampleWidget::EditDefaultsOnlyBlueprintReadOnly' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, VisibleAnywhere) == 0x0003A8, "Member 'UCoreExampleWidget::VisibleAnywhere' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, VisibleDefaultsOnly) == 0x0003B8, "Member 'UCoreExampleWidget::VisibleDefaultsOnly' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, VisibleInstanceOnly) == 0x0003C8, "Member 'UCoreExampleWidget::VisibleInstanceOnly' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, ExampleButtonClickDelegate) == 0x0003D8, "Member 'UCoreExampleWidget::ExampleButtonClickDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreUnlockConfirmationPopupWidget
// 0x0018 (0x03A0 - 0x0388)
class UCoreStoreUnlockConfirmationPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreCurrencyInputSwitcherWidget*       UnlockInputSwitcher;                               // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          UnlockTB;                                          // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnUnlockAction(const ECurrencyType currencyType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreUnlockConfirmationPopupWidget">();
	}
	static class UCoreStoreUnlockConfirmationPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreUnlockConfirmationPopupWidget>();
	}
};
static_assert(alignof(UCoreStoreUnlockConfirmationPopupWidget) == 0x000008, "Wrong alignment on UCoreStoreUnlockConfirmationPopupWidget");
static_assert(sizeof(UCoreStoreUnlockConfirmationPopupWidget) == 0x0003A0, "Wrong size on UCoreStoreUnlockConfirmationPopupWidget");
static_assert(offsetof(UCoreStoreUnlockConfirmationPopupWidget, UnlockInputSwitcher) == 0x000390, "Member 'UCoreStoreUnlockConfirmationPopupWidget::UnlockInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreStoreUnlockConfirmationPopupWidget, UnlockTB) == 0x000398, "Member 'UCoreStoreUnlockConfirmationPopupWidget::UnlockTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreExternalEffectsWidget
// 0x0348 (0x0698 - 0x0350)
class UCoreExternalEffectsWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              GridSlotSize;                                      // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AddonScaleRatio;                                   // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SpacingBetweenRows;                                // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SpacingPerks;                                      // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SpacingSkills;                                     // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SpacingAddons;                                     // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SpacingBetweenPerksAndAddons;                      // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCorePerkWidget>            PerkWidgetClass;                                   // 0x0380(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreSkillWidget>           SkillWidgetClass;                                  // 0x0388(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreAddonWidget>           AddonWidgetClass;                                  // 0x0390(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             container;                                         // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A0[0x8];                                      // 0x03A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPerkViewData>                  _perkData;                                         // 0x03A8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class UCorePerkWidget*>     _perkWidgets;                                      // 0x03B8(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCorePerkWidget*>                _perkPool;                                         // 0x0408(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class FName, TScriptInterface<class IPerkViewInterface>> _perkViewInterfaces;               // 0x0418(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FSkillViewData>                 _skillData;                                        // 0x0468(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class UCoreSkillWidget*>    _skillWidgets;                                     // 0x0478(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreSkillWidget*>               _skillPool;                                        // 0x04C8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class FName, TScriptInterface<class ISkillViewInterface>> _skillViewInterfaces;             // 0x04D8(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FAddonViewData>                 _addonData;                                        // 0x0528(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class UCoreAddonWidget*>    _addonWidgets;                                     // 0x0538(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreAddonWidget*>               _addonPool;                                        // 0x0588(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class FName, TScriptInterface<class IAddonViewInterface>> _addonViewInterfaces;             // 0x0598(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FTimerHandle>        _timerHandleMap;                                   // 0x05E8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class USpacer*>             _spacerWidgets;                                    // 0x0638(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USpacer*>                        _spacerPool;                                       // 0x0688(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void HideExternalAddon_Implementation(const class FName ItemId);
	void HideExternalPerk_Implementation(const class FName ItemId);
	void HideExternalSkill_Implementation(const class FName ItemId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreExternalEffectsWidget">();
	}
	static class UCoreExternalEffectsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreExternalEffectsWidget>();
	}
};
static_assert(alignof(UCoreExternalEffectsWidget) == 0x000008, "Wrong alignment on UCoreExternalEffectsWidget");
static_assert(sizeof(UCoreExternalEffectsWidget) == 0x000698, "Wrong size on UCoreExternalEffectsWidget");
static_assert(offsetof(UCoreExternalEffectsWidget, GridSlotSize) == 0x000358, "Member 'UCoreExternalEffectsWidget::GridSlotSize' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, AddonScaleRatio) == 0x000368, "Member 'UCoreExternalEffectsWidget::AddonScaleRatio' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, SpacingBetweenRows) == 0x00036C, "Member 'UCoreExternalEffectsWidget::SpacingBetweenRows' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, SpacingPerks) == 0x000370, "Member 'UCoreExternalEffectsWidget::SpacingPerks' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, SpacingSkills) == 0x000374, "Member 'UCoreExternalEffectsWidget::SpacingSkills' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, SpacingAddons) == 0x000378, "Member 'UCoreExternalEffectsWidget::SpacingAddons' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, SpacingBetweenPerksAndAddons) == 0x00037C, "Member 'UCoreExternalEffectsWidget::SpacingBetweenPerksAndAddons' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, PerkWidgetClass) == 0x000380, "Member 'UCoreExternalEffectsWidget::PerkWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, SkillWidgetClass) == 0x000388, "Member 'UCoreExternalEffectsWidget::SkillWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, AddonWidgetClass) == 0x000390, "Member 'UCoreExternalEffectsWidget::AddonWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, container) == 0x000398, "Member 'UCoreExternalEffectsWidget::container' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _perkData) == 0x0003A8, "Member 'UCoreExternalEffectsWidget::_perkData' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _perkWidgets) == 0x0003B8, "Member 'UCoreExternalEffectsWidget::_perkWidgets' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _perkPool) == 0x000408, "Member 'UCoreExternalEffectsWidget::_perkPool' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _perkViewInterfaces) == 0x000418, "Member 'UCoreExternalEffectsWidget::_perkViewInterfaces' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _skillData) == 0x000468, "Member 'UCoreExternalEffectsWidget::_skillData' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _skillWidgets) == 0x000478, "Member 'UCoreExternalEffectsWidget::_skillWidgets' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _skillPool) == 0x0004C8, "Member 'UCoreExternalEffectsWidget::_skillPool' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _skillViewInterfaces) == 0x0004D8, "Member 'UCoreExternalEffectsWidget::_skillViewInterfaces' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _addonData) == 0x000528, "Member 'UCoreExternalEffectsWidget::_addonData' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _addonWidgets) == 0x000538, "Member 'UCoreExternalEffectsWidget::_addonWidgets' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _addonPool) == 0x000588, "Member 'UCoreExternalEffectsWidget::_addonPool' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _addonViewInterfaces) == 0x000598, "Member 'UCoreExternalEffectsWidget::_addonViewInterfaces' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _timerHandleMap) == 0x0005E8, "Member 'UCoreExternalEffectsWidget::_timerHandleMap' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _spacerWidgets) == 0x000638, "Member 'UCoreExternalEffectsWidget::_spacerWidgets' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _spacerPool) == 0x000688, "Member 'UCoreExternalEffectsWidget::_spacerPool' has a wrong offset!");

// Class DBDUIViewsCore.CoreFearMarketWidget
// 0x0030 (0x03B8 - 0x0388)
class UCoreFearMarketWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreMenuPerkWidget*                    MenuPerk;                                          // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         BloodpointsRewardContainer;                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          BloodpointsValueTB;                                // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CostTextTB;                                        // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          AvailableTextTB;                                   // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreFearMarketWidget">();
	}
	static class UCoreFearMarketWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreFearMarketWidget>();
	}
};
static_assert(alignof(UCoreFearMarketWidget) == 0x000008, "Wrong alignment on UCoreFearMarketWidget");
static_assert(sizeof(UCoreFearMarketWidget) == 0x0003B8, "Wrong size on UCoreFearMarketWidget");
static_assert(offsetof(UCoreFearMarketWidget, MenuPerk) == 0x000390, "Member 'UCoreFearMarketWidget::MenuPerk' has a wrong offset!");
static_assert(offsetof(UCoreFearMarketWidget, BloodpointsRewardContainer) == 0x000398, "Member 'UCoreFearMarketWidget::BloodpointsRewardContainer' has a wrong offset!");
static_assert(offsetof(UCoreFearMarketWidget, BloodpointsValueTB) == 0x0003A0, "Member 'UCoreFearMarketWidget::BloodpointsValueTB' has a wrong offset!");
static_assert(offsetof(UCoreFearMarketWidget, CostTextTB) == 0x0003A8, "Member 'UCoreFearMarketWidget::CostTextTB' has a wrong offset!");
static_assert(offsetof(UCoreFearMarketWidget, AvailableTextTB) == 0x0003B0, "Member 'UCoreFearMarketWidget::AvailableTextTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreMenuWidget
// 0x00D8 (0x03F8 - 0x0320)
class UCoreStoreMenuWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreTabContainerWidget*                StoreMenuTabs;                                     // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreInputSwitcherWidget*               RedeemCodeInputSwitcher;                           // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreInputSwitcherWidget*               GetAuricCellsInputSwitcher;                        // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreKeyListenerInputPromptWidget*      ToggleRightStickModeInputPrompt;                   // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreKeyListenerInputPromptWidget*      ScrollInputPrompt;                                 // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreKeyListenerInputPromptWidget*      RotateInputPrompt;                                 // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreDisplayStandWidget*                StoreDisplayStand;                                 // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreStoreFeaturedWidget*               FeaturedSubPage;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreSpecialsWidget*               SpecialsSubPage;                                   // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCollectionsWidget*            CollectionsSubPage;                                // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreSpecialPacksWidget*           SpecialPacksSubPage;                               // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCharactersWidget*             KillersSubPage;                                    // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCharactersWidget*             SurvivorsSubPage;                                  // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UToggleableWidgetPromptController*      _toggleableWidgetPromptController;                 // 0x0398(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStoreMenuState                               _currentMenuState;                                 // 0x03A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EStoreMenuState menuState)> _menuTabSelectedDelegate;              // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EStoreMenuState menuState)> _menuTabSelectedAgainDelegate;         // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _backActionDelegate;                               // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _redeemCodeButtonDelegate;                         // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _getAuricCellsButtonDelegate;                      // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void OnBackAction();
	void OnGetAuricCellsInputSwitcherTriggered();
	void OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnMenuTabSelectedAgain(class UCoreSelectableButtonWidget* selectedButton);
	void OnRedeemCodeInputSwitcherTriggered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreMenuWidget">();
	}
	static class UCoreStoreMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreMenuWidget>();
	}
};
static_assert(alignof(UCoreStoreMenuWidget) == 0x000008, "Wrong alignment on UCoreStoreMenuWidget");
static_assert(sizeof(UCoreStoreMenuWidget) == 0x0003F8, "Wrong size on UCoreStoreMenuWidget");
static_assert(offsetof(UCoreStoreMenuWidget, StoreMenuTabs) == 0x000328, "Member 'UCoreStoreMenuWidget::StoreMenuTabs' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, RedeemCodeInputSwitcher) == 0x000330, "Member 'UCoreStoreMenuWidget::RedeemCodeInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, GetAuricCellsInputSwitcher) == 0x000338, "Member 'UCoreStoreMenuWidget::GetAuricCellsInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, BackInputSwitcher) == 0x000340, "Member 'UCoreStoreMenuWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, ToggleRightStickModeInputPrompt) == 0x000348, "Member 'UCoreStoreMenuWidget::ToggleRightStickModeInputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, ScrollInputPrompt) == 0x000350, "Member 'UCoreStoreMenuWidget::ScrollInputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, RotateInputPrompt) == 0x000358, "Member 'UCoreStoreMenuWidget::RotateInputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, StoreDisplayStand) == 0x000360, "Member 'UCoreStoreMenuWidget::StoreDisplayStand' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, FeaturedSubPage) == 0x000368, "Member 'UCoreStoreMenuWidget::FeaturedSubPage' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, SpecialsSubPage) == 0x000370, "Member 'UCoreStoreMenuWidget::SpecialsSubPage' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, CollectionsSubPage) == 0x000378, "Member 'UCoreStoreMenuWidget::CollectionsSubPage' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, SpecialPacksSubPage) == 0x000380, "Member 'UCoreStoreMenuWidget::SpecialPacksSubPage' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, KillersSubPage) == 0x000388, "Member 'UCoreStoreMenuWidget::KillersSubPage' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, SurvivorsSubPage) == 0x000390, "Member 'UCoreStoreMenuWidget::SurvivorsSubPage' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, _toggleableWidgetPromptController) == 0x000398, "Member 'UCoreStoreMenuWidget::_toggleableWidgetPromptController' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, _currentMenuState) == 0x0003A0, "Member 'UCoreStoreMenuWidget::_currentMenuState' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, _menuTabSelectedDelegate) == 0x0003A8, "Member 'UCoreStoreMenuWidget::_menuTabSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, _menuTabSelectedAgainDelegate) == 0x0003B8, "Member 'UCoreStoreMenuWidget::_menuTabSelectedAgainDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, _backActionDelegate) == 0x0003C8, "Member 'UCoreStoreMenuWidget::_backActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, _redeemCodeButtonDelegate) == 0x0003D8, "Member 'UCoreStoreMenuWidget::_redeemCodeButtonDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreMenuWidget, _getAuricCellsButtonDelegate) == 0x0003E8, "Member 'UCoreStoreMenuWidget::_getAuricCellsButtonDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreFilterButtonWidget
// 0x0020 (0x04D0 - 0x04B0)
class UCoreFilterButtonWidget final : public UCoreButtonWidget
{
public:
	class UDBDImage*                              BackgroundColorFill;                               // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isAvailableOption;                                // 0x04B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isOwnedOption;                                    // 0x04B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EItemRarity                                   _itemRarityFilterOption;                           // 0x04BA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EItemSourceTag                                _itemSourceTagFilterOption;                        // 0x04BB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isToggled;                                        // 0x04BC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _defaultToggleState;                               // 0x04BD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4BE[0x12];                                     // 0x04BE(0x0012)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetToggledState(bool IsToggled);
	void UpdateVisualState();

	bool IsToggled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreFilterButtonWidget">();
	}
	static class UCoreFilterButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreFilterButtonWidget>();
	}
};
static_assert(alignof(UCoreFilterButtonWidget) == 0x000008, "Wrong alignment on UCoreFilterButtonWidget");
static_assert(sizeof(UCoreFilterButtonWidget) == 0x0004D0, "Wrong size on UCoreFilterButtonWidget");
static_assert(offsetof(UCoreFilterButtonWidget, BackgroundColorFill) == 0x0004B0, "Member 'UCoreFilterButtonWidget::BackgroundColorFill' has a wrong offset!");
static_assert(offsetof(UCoreFilterButtonWidget, _isAvailableOption) == 0x0004B8, "Member 'UCoreFilterButtonWidget::_isAvailableOption' has a wrong offset!");
static_assert(offsetof(UCoreFilterButtonWidget, _isOwnedOption) == 0x0004B9, "Member 'UCoreFilterButtonWidget::_isOwnedOption' has a wrong offset!");
static_assert(offsetof(UCoreFilterButtonWidget, _itemRarityFilterOption) == 0x0004BA, "Member 'UCoreFilterButtonWidget::_itemRarityFilterOption' has a wrong offset!");
static_assert(offsetof(UCoreFilterButtonWidget, _itemSourceTagFilterOption) == 0x0004BB, "Member 'UCoreFilterButtonWidget::_itemSourceTagFilterOption' has a wrong offset!");
static_assert(offsetof(UCoreFilterButtonWidget, _isToggled) == 0x0004BC, "Member 'UCoreFilterButtonWidget::_isToggled' has a wrong offset!");
static_assert(offsetof(UCoreFilterButtonWidget, _defaultToggleState) == 0x0004BD, "Member 'UCoreFilterButtonWidget::_defaultToggleState' has a wrong offset!");

// Class DBDUIViewsCore.CoreFooterButtonWidget
// 0x0058 (0x0540 - 0x04E8)
class UCoreFooterButtonWidget : public UCoreKeyListenerButtonWidget
{
public:
	uint8                                         Pad_4E8[0x10];                                     // 0x04E8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _isUsingSubPanel;                                  // 0x04F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EButtonDisableState                           _buttonDisableState;                               // 0x04F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4FA[0x6];                                      // 0x04FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _tooltipLabelText;                                 // 0x0500(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   _betaFeatureText;                                  // 0x0518(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UDBDImage*                              IconIMG;                                           // 0x0530(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_538[0x8];                                      // 0x0538(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBetaFeatureOverlayVisible(bool IsVisible_0);
	void SetHoveredColor();
	void SetIconTexture(class UTexture2D* iconTexture);
	void SetSubPanelText(const class FText& Title, const class FText& Description);
	void SetUnhoveredColor();

	bool IsLocked() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreFooterButtonWidget">();
	}
	static class UCoreFooterButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreFooterButtonWidget>();
	}
};
static_assert(alignof(UCoreFooterButtonWidget) == 0x000008, "Wrong alignment on UCoreFooterButtonWidget");
static_assert(sizeof(UCoreFooterButtonWidget) == 0x000540, "Wrong size on UCoreFooterButtonWidget");
static_assert(offsetof(UCoreFooterButtonWidget, _isUsingSubPanel) == 0x0004F8, "Member 'UCoreFooterButtonWidget::_isUsingSubPanel' has a wrong offset!");
static_assert(offsetof(UCoreFooterButtonWidget, _buttonDisableState) == 0x0004F9, "Member 'UCoreFooterButtonWidget::_buttonDisableState' has a wrong offset!");
static_assert(offsetof(UCoreFooterButtonWidget, _tooltipLabelText) == 0x000500, "Member 'UCoreFooterButtonWidget::_tooltipLabelText' has a wrong offset!");
static_assert(offsetof(UCoreFooterButtonWidget, _betaFeatureText) == 0x000518, "Member 'UCoreFooterButtonWidget::_betaFeatureText' has a wrong offset!");
static_assert(offsetof(UCoreFooterButtonWidget, IconIMG) == 0x000530, "Member 'UCoreFooterButtonWidget::IconIMG' has a wrong offset!");

// Class DBDUIViewsCore.CoreRiftWidget
// 0x0408 (0x0748 - 0x0340)
class UCoreRiftWidget final : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               GoToQuestsInputSwitcher;                           // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreDisplayStandWidget*                DisplayStandArea;                                  // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           RiftPackContainer;                                 // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RiftPackButton;                                    // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterButtonWidget*                SettingsButton;                                    // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterButtonWidget*                InfoButton;                                        // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class FName ItemId)> _rewardItemClickedDelegate;                   // 0x0380(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(ECurrencyType currencyId)> _rewardCurrencyClickedDelegate;         // 0x0390(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _purchasePremiumPassClickedDelegate;               // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _purchaseTierClickedDelegate;                      // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _purchaseInfiniteTierClickedDelegate;              // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _outfitClickedDelegate;                            // 0x03D0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _playMoriClickedDelegate;                          // 0x03E0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _playSecondMoriClickedDelegate;                    // 0x03F0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	struct FArchivesRiftGenericViewData           _genericData;                                      // 0x0400(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FArchiveRiftTierRewardsViewData> _riftTiersData;                                   // 0x0420(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         _currentPage;                                      // 0x0430(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _maxTierItemsPerPage;                              // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _animationItemDelay;                               // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _animationPremiumTrackDelay;                       // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _pageSwitchFadeDuration;                           // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   _pageSwitchFadeTweenEasing;                        // 0x0444(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_445[0x3];                                      // 0x0445(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreArchiveRiftTierItem>   _archiveRiftTierItemClass;                         // 0x0448(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _freePurchaseButtonText;                           // 0x0450(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class FText                                   _freePurchaseDescriptionText;                      // 0x0468(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class FText                                   _premiumPurchaseButtonText;                        // 0x0480(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class FText                                   _premiumPurchaseDescriptionText;                   // 0x0498(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class FText                                   _premiumInfinitePurchaseButtonText;                // 0x04B0(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class FText                                   _premiumInfinitePurchaseDescriptionText;           // 0x04C8(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class FText                                   _currentProgressInfoText;                          // 0x04E0(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class FText                                   _playSecondaryMoriTooltipText;                     // 0x04F8(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	struct FCurrencyProgressionTooltipViewData    _riftFragmentTooltipViewData;                      // 0x0510(0x0100)(BlueprintVisible, Transient, Protected, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      HeaderTitle;                                       // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      HeaderSubtitle;                                    // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RiftPackDescription;                               // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreToggleButtonWidget*                OutfitButton;                                      // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreIconButtonWidget*                  PlayMoriButton;                                    // 0x0630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreIconButtonWidget*                  PlaySecondMoriButton;                              // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               PurchaseButton;                                    // 0x0640(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         RewardGrid;                                        // 0x0648(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TierInfoTopTB;                                     // 0x0650(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TierInfoBottomTB;                                  // 0x0658(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          FreeTrackLabelTB;                                  // 0x0660(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PremiumTrackLabelTB;                               // 0x0668(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          BonusTiersLabelTB;                                 // 0x0670(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PaginationTB;                                      // 0x0678(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               PaginationPreviousButton;                          // 0x0680(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               PaginationNextButton;                              // 0x0688(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreImagePreviewAreaWidget*            ImagePreviewArea;                                  // 0x0690(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _backButtonClickedDelegate;                        // 0x0698(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _goToQuestsButtonClickedDelegate;                  // 0x06A8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _riftPackButtonClickedDelegate;                    // 0x06B8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _settingsButtonClickedDelegate;                    // 0x06C8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _infoButtonClickedDelegate;                        // 0x06D8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TArray<class UCoreArchiveRiftTierItem*>       _tierItemPool;                                     // 0x06E8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UUITweenInstance*                       _contentVisbilityTween;                            // 0x06F8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUITweenInstance*                       _pageSwitchVisbilityTween;                         // 0x0700(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreSelectableButtonWidget*            _currentSelectedReward;                            // 0x0708(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_710[0x38];                                     // 0x0710(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayPage(class UUITweenInstance* tween);
	void OnBackButtonClicked();
	void OnCurrentPageAnimationCompleted();
	void OnGoToQuestsButtonClicked();
	void OnInfoButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnNextButtonClicked();
	void OnOutfitButtonClicked(class UCoreButtonWidget* Button);
	void OnOutfitButtonHovered(class UCoreButtonWidget* Button);
	void OnOutfitButtonUnhovered(class UCoreButtonWidget* Button);
	void OnPlayMoriButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnPlayMoriButtonHovered(class UCoreButtonWidget* buttonTarget);
	void OnPlayMoriButtonUnhovered(class UCoreButtonWidget* buttonTarget);
	void OnPlaySecondMoriButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnPlaySecondMoriButtonHovered(class UCoreButtonWidget* buttonTarget);
	void OnPlaySecondMoriButtonUnhovered(class UCoreButtonWidget* buttonTarget);
	void OnPreviousButtonClicked();
	void OnRewardAnimationCompleted();
	void OnRewardItemClicked(int32 tier, class UCoreButtonWidget* Button, bool isPremium, int32 Index_0);
	void OnRiftPackButtonClicked();
	void OnSettingsButtonClicked(class UCoreButtonWidget* buttonTarget);
	void PlayPremiumTrackUnlockAnimation();
	void SetTierVisuals(ETierType TierType);
	void SetVisualData(const struct FArchivesRiftGenericViewData& Data);
	void UpdateMoriButtonVisual(const bool HasUniqueMori);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreRiftWidget">();
	}
	static class UCoreRiftWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreRiftWidget>();
	}
};
static_assert(alignof(UCoreRiftWidget) == 0x000008, "Wrong alignment on UCoreRiftWidget");
static_assert(sizeof(UCoreRiftWidget) == 0x000748, "Wrong size on UCoreRiftWidget");
static_assert(offsetof(UCoreRiftWidget, BackInputSwitcher) == 0x000348, "Member 'UCoreRiftWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, GoToQuestsInputSwitcher) == 0x000350, "Member 'UCoreRiftWidget::GoToQuestsInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, DisplayStandArea) == 0x000358, "Member 'UCoreRiftWidget::DisplayStandArea' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, RiftPackContainer) == 0x000360, "Member 'UCoreRiftWidget::RiftPackContainer' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, RiftPackButton) == 0x000368, "Member 'UCoreRiftWidget::RiftPackButton' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, SettingsButton) == 0x000370, "Member 'UCoreRiftWidget::SettingsButton' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, InfoButton) == 0x000378, "Member 'UCoreRiftWidget::InfoButton' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _rewardItemClickedDelegate) == 0x000380, "Member 'UCoreRiftWidget::_rewardItemClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _rewardCurrencyClickedDelegate) == 0x000390, "Member 'UCoreRiftWidget::_rewardCurrencyClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _purchasePremiumPassClickedDelegate) == 0x0003A0, "Member 'UCoreRiftWidget::_purchasePremiumPassClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _purchaseTierClickedDelegate) == 0x0003B0, "Member 'UCoreRiftWidget::_purchaseTierClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _purchaseInfiniteTierClickedDelegate) == 0x0003C0, "Member 'UCoreRiftWidget::_purchaseInfiniteTierClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _outfitClickedDelegate) == 0x0003D0, "Member 'UCoreRiftWidget::_outfitClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _playMoriClickedDelegate) == 0x0003E0, "Member 'UCoreRiftWidget::_playMoriClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _playSecondMoriClickedDelegate) == 0x0003F0, "Member 'UCoreRiftWidget::_playSecondMoriClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _genericData) == 0x000400, "Member 'UCoreRiftWidget::_genericData' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _riftTiersData) == 0x000420, "Member 'UCoreRiftWidget::_riftTiersData' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _currentPage) == 0x000430, "Member 'UCoreRiftWidget::_currentPage' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _maxTierItemsPerPage) == 0x000434, "Member 'UCoreRiftWidget::_maxTierItemsPerPage' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _animationItemDelay) == 0x000438, "Member 'UCoreRiftWidget::_animationItemDelay' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _animationPremiumTrackDelay) == 0x00043C, "Member 'UCoreRiftWidget::_animationPremiumTrackDelay' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _pageSwitchFadeDuration) == 0x000440, "Member 'UCoreRiftWidget::_pageSwitchFadeDuration' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _pageSwitchFadeTweenEasing) == 0x000444, "Member 'UCoreRiftWidget::_pageSwitchFadeTweenEasing' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _archiveRiftTierItemClass) == 0x000448, "Member 'UCoreRiftWidget::_archiveRiftTierItemClass' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _freePurchaseButtonText) == 0x000450, "Member 'UCoreRiftWidget::_freePurchaseButtonText' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _freePurchaseDescriptionText) == 0x000468, "Member 'UCoreRiftWidget::_freePurchaseDescriptionText' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _premiumPurchaseButtonText) == 0x000480, "Member 'UCoreRiftWidget::_premiumPurchaseButtonText' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _premiumPurchaseDescriptionText) == 0x000498, "Member 'UCoreRiftWidget::_premiumPurchaseDescriptionText' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _premiumInfinitePurchaseButtonText) == 0x0004B0, "Member 'UCoreRiftWidget::_premiumInfinitePurchaseButtonText' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _premiumInfinitePurchaseDescriptionText) == 0x0004C8, "Member 'UCoreRiftWidget::_premiumInfinitePurchaseDescriptionText' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _currentProgressInfoText) == 0x0004E0, "Member 'UCoreRiftWidget::_currentProgressInfoText' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _playSecondaryMoriTooltipText) == 0x0004F8, "Member 'UCoreRiftWidget::_playSecondaryMoriTooltipText' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _riftFragmentTooltipViewData) == 0x000510, "Member 'UCoreRiftWidget::_riftFragmentTooltipViewData' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, HeaderTitle) == 0x000610, "Member 'UCoreRiftWidget::HeaderTitle' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, HeaderSubtitle) == 0x000618, "Member 'UCoreRiftWidget::HeaderSubtitle' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, RiftPackDescription) == 0x000620, "Member 'UCoreRiftWidget::RiftPackDescription' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, OutfitButton) == 0x000628, "Member 'UCoreRiftWidget::OutfitButton' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, PlayMoriButton) == 0x000630, "Member 'UCoreRiftWidget::PlayMoriButton' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, PlaySecondMoriButton) == 0x000638, "Member 'UCoreRiftWidget::PlaySecondMoriButton' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, PurchaseButton) == 0x000640, "Member 'UCoreRiftWidget::PurchaseButton' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, RewardGrid) == 0x000648, "Member 'UCoreRiftWidget::RewardGrid' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, TierInfoTopTB) == 0x000650, "Member 'UCoreRiftWidget::TierInfoTopTB' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, TierInfoBottomTB) == 0x000658, "Member 'UCoreRiftWidget::TierInfoBottomTB' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, FreeTrackLabelTB) == 0x000660, "Member 'UCoreRiftWidget::FreeTrackLabelTB' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, PremiumTrackLabelTB) == 0x000668, "Member 'UCoreRiftWidget::PremiumTrackLabelTB' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, BonusTiersLabelTB) == 0x000670, "Member 'UCoreRiftWidget::BonusTiersLabelTB' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, PaginationTB) == 0x000678, "Member 'UCoreRiftWidget::PaginationTB' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, PaginationPreviousButton) == 0x000680, "Member 'UCoreRiftWidget::PaginationPreviousButton' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, PaginationNextButton) == 0x000688, "Member 'UCoreRiftWidget::PaginationNextButton' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, ImagePreviewArea) == 0x000690, "Member 'UCoreRiftWidget::ImagePreviewArea' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _backButtonClickedDelegate) == 0x000698, "Member 'UCoreRiftWidget::_backButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _goToQuestsButtonClickedDelegate) == 0x0006A8, "Member 'UCoreRiftWidget::_goToQuestsButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _riftPackButtonClickedDelegate) == 0x0006B8, "Member 'UCoreRiftWidget::_riftPackButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _settingsButtonClickedDelegate) == 0x0006C8, "Member 'UCoreRiftWidget::_settingsButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _infoButtonClickedDelegate) == 0x0006D8, "Member 'UCoreRiftWidget::_infoButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _tierItemPool) == 0x0006E8, "Member 'UCoreRiftWidget::_tierItemPool' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _contentVisbilityTween) == 0x0006F8, "Member 'UCoreRiftWidget::_contentVisbilityTween' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _pageSwitchVisbilityTween) == 0x000700, "Member 'UCoreRiftWidget::_pageSwitchVisbilityTween' has a wrong offset!");
static_assert(offsetof(UCoreRiftWidget, _currentSelectedReward) == 0x000708, "Member 'UCoreRiftWidget::_currentSelectedReward' has a wrong offset!");

// Class DBDUIViewsCore.CoreFooterInputSwitcherWidget
// 0x0008 (0x0408 - 0x0400)
class UCoreFooterInputSwitcherWidget : public UCoreInputSwitcherWidget
{
public:
	class UTexture2D*                             _iconTexture;                                      // 0x0400(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetBetaFeatureOverlayVisible(bool IsVisible_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreFooterInputSwitcherWidget">();
	}
	static class UCoreFooterInputSwitcherWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreFooterInputSwitcherWidget>();
	}
};
static_assert(alignof(UCoreFooterInputSwitcherWidget) == 0x000008, "Wrong alignment on UCoreFooterInputSwitcherWidget");
static_assert(sizeof(UCoreFooterInputSwitcherWidget) == 0x000408, "Wrong size on UCoreFooterInputSwitcherWidget");
static_assert(offsetof(UCoreFooterInputSwitcherWidget, _iconTexture) == 0x000400, "Member 'UCoreFooterInputSwitcherWidget::_iconTexture' has a wrong offset!");

// Class DBDUIViewsCore.CoreGameManualCategoryButton
// 0x0030 (0x04E0 - 0x04B0)
class UCoreGameManualCategoryButton final : public UCoreButtonWidget
{
public:
	class UDBDTextBlock*                          Title;                                             // 0x04B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          Description;                                       // 0x04B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDImage*                              Icon;                                              // 0x04C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDImage*                              Background;                                        // 0x04C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             iconTexture;                                       // 0x04D0(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BackgroundTexture;                                 // 0x04D8(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetText(const class FText& Title_0, const class FText& Description_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreGameManualCategoryButton">();
	}
	static class UCoreGameManualCategoryButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreGameManualCategoryButton>();
	}
};
static_assert(alignof(UCoreGameManualCategoryButton) == 0x000008, "Wrong alignment on UCoreGameManualCategoryButton");
static_assert(sizeof(UCoreGameManualCategoryButton) == 0x0004E0, "Wrong size on UCoreGameManualCategoryButton");
static_assert(offsetof(UCoreGameManualCategoryButton, Title) == 0x0004B0, "Member 'UCoreGameManualCategoryButton::Title' has a wrong offset!");
static_assert(offsetof(UCoreGameManualCategoryButton, Description) == 0x0004B8, "Member 'UCoreGameManualCategoryButton::Description' has a wrong offset!");
static_assert(offsetof(UCoreGameManualCategoryButton, Icon) == 0x0004C0, "Member 'UCoreGameManualCategoryButton::Icon' has a wrong offset!");
static_assert(offsetof(UCoreGameManualCategoryButton, Background) == 0x0004C8, "Member 'UCoreGameManualCategoryButton::Background' has a wrong offset!");
static_assert(offsetof(UCoreGameManualCategoryButton, iconTexture) == 0x0004D0, "Member 'UCoreGameManualCategoryButton::iconTexture' has a wrong offset!");
static_assert(offsetof(UCoreGameManualCategoryButton, BackgroundTexture) == 0x0004D8, "Member 'UCoreGameManualCategoryButton::BackgroundTexture' has a wrong offset!");

// Class DBDUIViewsCore.CoreSharedPerksDisplayWidget
// 0x0018 (0x0338 - 0x0320)
class UCoreSharedPerksDisplayWidget final : public UCoreBaseUserWidget
{
public:
	TArray<class UCoreMenuPerkWidget*>            _perkWidgets;                                      // 0x0320(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FSharedPerksTooltipViewData            SharedPerksTooltipViewData;                        // 0x0330(0x0002)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_332[0x6];                                      // 0x0332(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPerkHovered(class UCoreButtonWidget* hoveredPerk);
	void OnPerkUnhovered(class UCoreButtonWidget* unhoveredPerk);
	void SetLockedVisual(const bool IsVisible_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSharedPerksDisplayWidget">();
	}
	static class UCoreSharedPerksDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSharedPerksDisplayWidget>();
	}
};
static_assert(alignof(UCoreSharedPerksDisplayWidget) == 0x000008, "Wrong alignment on UCoreSharedPerksDisplayWidget");
static_assert(sizeof(UCoreSharedPerksDisplayWidget) == 0x000338, "Wrong size on UCoreSharedPerksDisplayWidget");
static_assert(offsetof(UCoreSharedPerksDisplayWidget, _perkWidgets) == 0x000320, "Member 'UCoreSharedPerksDisplayWidget::_perkWidgets' has a wrong offset!");
static_assert(offsetof(UCoreSharedPerksDisplayWidget, SharedPerksTooltipViewData) == 0x000330, "Member 'UCoreSharedPerksDisplayWidget::SharedPerksTooltipViewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreGameManualPanelWidget
// 0x00D8 (0x03F8 - 0x0320)
class UCoreGameManualPanelWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EGameManualMenuState                          _currentSelectedManualMenu;                        // 0x0328(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHelpType                                     _currentGameManualTopic;                           // 0x0329(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32A[0x6];                                      // 0x032A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           CategoryPanel;                                     // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreGameManualCategoryButton*          GameCategoryButton;                                // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreGameManualCategoryButton*          SurvivorCategoryButton;                            // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreGameManualCategoryButton*          KillerCategoryButton;                              // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           TopicsPanel;                                       // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreTabContainerWidget*                GameManualTopicsTabs;                              // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          GameManualContentTitle;                            // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          GameManualContentSubtitle;                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      GameManualContentText;                             // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class FText subtitle)> _onSetOnboardingMenuSubtitleDelegate;       // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _onResetOnboardingMenuSubtitleDelegate;            // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_398[0x60];                                     // 0x0398(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTopicsTabSelected(class UCoreSelectableButtonWidget* selectedButton);
	void ResetScrolls(bool resetTopicsScroll);
	void SetCurrentOnbardingMenuSubtitle();
	void SetGameManualMenuState(EGameManualMenuState menuState);
	void ShowHelpTopics(EHelpType categoryType);
	void ToggleGameManualMenuState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreGameManualPanelWidget">();
	}
	static class UCoreGameManualPanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreGameManualPanelWidget>();
	}
};
static_assert(alignof(UCoreGameManualPanelWidget) == 0x000008, "Wrong alignment on UCoreGameManualPanelWidget");
static_assert(sizeof(UCoreGameManualPanelWidget) == 0x0003F8, "Wrong size on UCoreGameManualPanelWidget");
static_assert(offsetof(UCoreGameManualPanelWidget, _currentSelectedManualMenu) == 0x000328, "Member 'UCoreGameManualPanelWidget::_currentSelectedManualMenu' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, _currentGameManualTopic) == 0x000329, "Member 'UCoreGameManualPanelWidget::_currentGameManualTopic' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, CategoryPanel) == 0x000330, "Member 'UCoreGameManualPanelWidget::CategoryPanel' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, GameCategoryButton) == 0x000338, "Member 'UCoreGameManualPanelWidget::GameCategoryButton' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, SurvivorCategoryButton) == 0x000340, "Member 'UCoreGameManualPanelWidget::SurvivorCategoryButton' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, KillerCategoryButton) == 0x000348, "Member 'UCoreGameManualPanelWidget::KillerCategoryButton' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, TopicsPanel) == 0x000350, "Member 'UCoreGameManualPanelWidget::TopicsPanel' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, GameManualTopicsTabs) == 0x000358, "Member 'UCoreGameManualPanelWidget::GameManualTopicsTabs' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, GameManualContentTitle) == 0x000360, "Member 'UCoreGameManualPanelWidget::GameManualContentTitle' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, GameManualContentSubtitle) == 0x000368, "Member 'UCoreGameManualPanelWidget::GameManualContentSubtitle' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, GameManualContentText) == 0x000370, "Member 'UCoreGameManualPanelWidget::GameManualContentText' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, _onSetOnboardingMenuSubtitleDelegate) == 0x000378, "Member 'UCoreGameManualPanelWidget::_onSetOnboardingMenuSubtitleDelegate' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, _onResetOnboardingMenuSubtitleDelegate) == 0x000388, "Member 'UCoreGameManualPanelWidget::_onResetOnboardingMenuSubtitleDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreGammaSettingsPopupWidget
// 0x0088 (0x0410 - 0x0388)
class UCoreGammaSettingsPopupWidget : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDImage*                              ImagePreview1;                                     // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ImagePreview2;                                     // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ImagePreview3;                                     // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ImagePreview4;                                     // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ImagePreview5;                                     // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSliderWidget*                      GammaSlider;                                       // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          GammaTB;                                           // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RestoreDefaultsButton;                             // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      AdjustPrompt;                                      // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGammaSettingsPopupViewData*            _viewData;                                         // 0x03D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E0[0x30];                                     // 0x03E0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGammaValueChanged(float gamma);
	void OnResetTriggered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreGammaSettingsPopupWidget">();
	}
	static class UCoreGammaSettingsPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreGammaSettingsPopupWidget>();
	}
};
static_assert(alignof(UCoreGammaSettingsPopupWidget) == 0x000008, "Wrong alignment on UCoreGammaSettingsPopupWidget");
static_assert(sizeof(UCoreGammaSettingsPopupWidget) == 0x000410, "Wrong size on UCoreGammaSettingsPopupWidget");
static_assert(offsetof(UCoreGammaSettingsPopupWidget, ImagePreview1) == 0x000390, "Member 'UCoreGammaSettingsPopupWidget::ImagePreview1' has a wrong offset!");
static_assert(offsetof(UCoreGammaSettingsPopupWidget, ImagePreview2) == 0x000398, "Member 'UCoreGammaSettingsPopupWidget::ImagePreview2' has a wrong offset!");
static_assert(offsetof(UCoreGammaSettingsPopupWidget, ImagePreview3) == 0x0003A0, "Member 'UCoreGammaSettingsPopupWidget::ImagePreview3' has a wrong offset!");
static_assert(offsetof(UCoreGammaSettingsPopupWidget, ImagePreview4) == 0x0003A8, "Member 'UCoreGammaSettingsPopupWidget::ImagePreview4' has a wrong offset!");
static_assert(offsetof(UCoreGammaSettingsPopupWidget, ImagePreview5) == 0x0003B0, "Member 'UCoreGammaSettingsPopupWidget::ImagePreview5' has a wrong offset!");
static_assert(offsetof(UCoreGammaSettingsPopupWidget, GammaSlider) == 0x0003B8, "Member 'UCoreGammaSettingsPopupWidget::GammaSlider' has a wrong offset!");
static_assert(offsetof(UCoreGammaSettingsPopupWidget, GammaTB) == 0x0003C0, "Member 'UCoreGammaSettingsPopupWidget::GammaTB' has a wrong offset!");
static_assert(offsetof(UCoreGammaSettingsPopupWidget, RestoreDefaultsButton) == 0x0003C8, "Member 'UCoreGammaSettingsPopupWidget::RestoreDefaultsButton' has a wrong offset!");
static_assert(offsetof(UCoreGammaSettingsPopupWidget, AdjustPrompt) == 0x0003D0, "Member 'UCoreGammaSettingsPopupWidget::AdjustPrompt' has a wrong offset!");
static_assert(offsetof(UCoreGammaSettingsPopupWidget, _viewData) == 0x0003D8, "Member 'UCoreGammaSettingsPopupWidget::_viewData' has a wrong offset!");

// Class DBDUIViewsCore.SettingsMatchDetailsWidget
// 0x0060 (0x0380 - 0x0320)
class USettingsMatchDetailsWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreSettingsPlayerInfoContainerWidget* SurvivorInfoContainer;                             // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSettingsPlayerInfoContainerWidget* KillerInfoContainer;                               // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSettingsPerksDisplayWidget*        PerksDisplay;                                      // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSettingsSkillsDisplayWidget*       SkillsDisplay;                                     // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreChallengeCardListWidget*           ChallengeCardList;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGameType                                     _debugGameType;                                    // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _debugNumSurvivors;                                // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _debugNumKillers;                                  // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& PlayerId)> _onPlayerInfoClickDelegate;        // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_370[0x10];                                     // 0x0370(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMouseWheelInput(const struct FPointerEvent& PointerEvent);
	void OnSurvivorInfoButtonClicked(class UCoreButtonWidget* Button);
	void UpdateCenterSeparator();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingsMatchDetailsWidget">();
	}
	static class USettingsMatchDetailsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingsMatchDetailsWidget>();
	}
};
static_assert(alignof(USettingsMatchDetailsWidget) == 0x000008, "Wrong alignment on USettingsMatchDetailsWidget");
static_assert(sizeof(USettingsMatchDetailsWidget) == 0x000380, "Wrong size on USettingsMatchDetailsWidget");
static_assert(offsetof(USettingsMatchDetailsWidget, SurvivorInfoContainer) == 0x000328, "Member 'USettingsMatchDetailsWidget::SurvivorInfoContainer' has a wrong offset!");
static_assert(offsetof(USettingsMatchDetailsWidget, KillerInfoContainer) == 0x000330, "Member 'USettingsMatchDetailsWidget::KillerInfoContainer' has a wrong offset!");
static_assert(offsetof(USettingsMatchDetailsWidget, PerksDisplay) == 0x000338, "Member 'USettingsMatchDetailsWidget::PerksDisplay' has a wrong offset!");
static_assert(offsetof(USettingsMatchDetailsWidget, SkillsDisplay) == 0x000340, "Member 'USettingsMatchDetailsWidget::SkillsDisplay' has a wrong offset!");
static_assert(offsetof(USettingsMatchDetailsWidget, ChallengeCardList) == 0x000348, "Member 'USettingsMatchDetailsWidget::ChallengeCardList' has a wrong offset!");
static_assert(offsetof(USettingsMatchDetailsWidget, _debugGameType) == 0x000350, "Member 'USettingsMatchDetailsWidget::_debugGameType' has a wrong offset!");
static_assert(offsetof(USettingsMatchDetailsWidget, _debugNumSurvivors) == 0x000354, "Member 'USettingsMatchDetailsWidget::_debugNumSurvivors' has a wrong offset!");
static_assert(offsetof(USettingsMatchDetailsWidget, _debugNumKillers) == 0x000358, "Member 'USettingsMatchDetailsWidget::_debugNumKillers' has a wrong offset!");
static_assert(offsetof(USettingsMatchDetailsWidget, _onPlayerInfoClickDelegate) == 0x000360, "Member 'USettingsMatchDetailsWidget::_onPlayerInfoClickDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreGenericRefreshingPopupWidget
// 0x0010 (0x0398 - 0x0388)
class UCoreGenericRefreshingPopupWidget : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGenericRefreshingPopupViewData*        _refreshingData;                                   // 0x0390(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreGenericRefreshingPopupWidget">();
	}
	static class UCoreGenericRefreshingPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreGenericRefreshingPopupWidget>();
	}
};
static_assert(alignof(UCoreGenericRefreshingPopupWidget) == 0x000008, "Wrong alignment on UCoreGenericRefreshingPopupWidget");
static_assert(sizeof(UCoreGenericRefreshingPopupWidget) == 0x000398, "Wrong size on UCoreGenericRefreshingPopupWidget");
static_assert(offsetof(UCoreGenericRefreshingPopupWidget, _refreshingData) == 0x000390, "Member 'UCoreGenericRefreshingPopupWidget::_refreshingData' has a wrong offset!");

// Class DBDUIViewsCore.CoreGenericTextInputPopupWidget
// 0x0078 (0x0400 - 0x0388)
class UCoreGenericTextInputPopupWidget : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x40];                                     // 0x0388(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDEditableTextBox*                    InputTextBox;                                      // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          MessageScrollBox;                                  // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ErrorIcon;                                         // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      ErrorMessageTextBlock;                             // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      CharacterCounterRTB;                               // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDButton*                             KeyboardButton;                                    // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F8[0x8];                                      // 0x03F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonHovered(class UCoreButtonWidget* Button);
	void OnButtonUnhovered(class UCoreButtonWidget* Button);
	void OnKeyboardButtonClicked();
	void OnTextChanged(const class FText& InText);
	void OnTextCommitted(const class FText& InText, ETextCommit inCommitType);
	void OnTextEntered(EPopupButtonType selectedButtonType, const class FString& inputText);
	void OnTextInputChoiceSelected(EPopupButtonType selectedButtonType, const class FString& inputText);
	void UpdateCharacterCounterVisual(bool limitReached);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreGenericTextInputPopupWidget">();
	}
	static class UCoreGenericTextInputPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreGenericTextInputPopupWidget>();
	}
};
static_assert(alignof(UCoreGenericTextInputPopupWidget) == 0x000008, "Wrong alignment on UCoreGenericTextInputPopupWidget");
static_assert(sizeof(UCoreGenericTextInputPopupWidget) == 0x000400, "Wrong size on UCoreGenericTextInputPopupWidget");
static_assert(offsetof(UCoreGenericTextInputPopupWidget, InputTextBox) == 0x0003C8, "Member 'UCoreGenericTextInputPopupWidget::InputTextBox' has a wrong offset!");
static_assert(offsetof(UCoreGenericTextInputPopupWidget, MessageScrollBox) == 0x0003D0, "Member 'UCoreGenericTextInputPopupWidget::MessageScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreGenericTextInputPopupWidget, ErrorIcon) == 0x0003D8, "Member 'UCoreGenericTextInputPopupWidget::ErrorIcon' has a wrong offset!");
static_assert(offsetof(UCoreGenericTextInputPopupWidget, ErrorMessageTextBlock) == 0x0003E0, "Member 'UCoreGenericTextInputPopupWidget::ErrorMessageTextBlock' has a wrong offset!");
static_assert(offsetof(UCoreGenericTextInputPopupWidget, CharacterCounterRTB) == 0x0003E8, "Member 'UCoreGenericTextInputPopupWidget::CharacterCounterRTB' has a wrong offset!");
static_assert(offsetof(UCoreGenericTextInputPopupWidget, KeyboardButton) == 0x0003F0, "Member 'UCoreGenericTextInputPopupWidget::KeyboardButton' has a wrong offset!");

// Class DBDUIViewsCore.CoreRewardPopupWidget
// 0x00C8 (0x0450 - 0x0388)
class UCoreRewardPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               NextButton;                                        // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDButton*                             BackgroundButton;                                  // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                RewardListContent;                                 // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         RewardListContentPanel;                            // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          RewardListScrollBox;                               // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      ScrollInputPrompt;                                 // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _rewardListPadding;                                // 0x03C0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreRewardWrapperWidget>   _rewardWrapperWidgetClass;                         // 0x03D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _rewardListPoolSize;                               // 0x03D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCorePreConstructableList*              _rewardList;                                       // 0x03E0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URewardPopupViewData*                   _viewData;                                         // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _currentRewardIndex;                               // 0x03F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EItemRarity, class UAudioEventWrapper*>  _sfxPerRarity;                                     // 0x03F8(0x0050)(Edit, ExportObject, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_448[0x8];                                      // 0x0448(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimateHideReward();
	void OnHideRewardAnimationFinished();
	void OnNextClicked();
	void PlaySfx(const EItemRarity Rarity);
	void SetRewardData(class UGrantedRewardPopupViewData* RewardData);
	bool SetRewardList(class URewardListRewardPopupViewData* rewardListData);
	bool SetRewardWrapperData(class UCoreRewardWrapperWidget* targetWidget, class URewardWrapperRewardPopupViewData* RewardData);
	void ShowNextReward();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreRewardPopupWidget">();
	}
	static class UCoreRewardPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreRewardPopupWidget>();
	}
};
static_assert(alignof(UCoreRewardPopupWidget) == 0x000008, "Wrong alignment on UCoreRewardPopupWidget");
static_assert(sizeof(UCoreRewardPopupWidget) == 0x000450, "Wrong size on UCoreRewardPopupWidget");
static_assert(offsetof(UCoreRewardPopupWidget, NextButton) == 0x000390, "Member 'UCoreRewardPopupWidget::NextButton' has a wrong offset!");
static_assert(offsetof(UCoreRewardPopupWidget, BackgroundButton) == 0x000398, "Member 'UCoreRewardPopupWidget::BackgroundButton' has a wrong offset!");
static_assert(offsetof(UCoreRewardPopupWidget, RewardListContent) == 0x0003A0, "Member 'UCoreRewardPopupWidget::RewardListContent' has a wrong offset!");
static_assert(offsetof(UCoreRewardPopupWidget, RewardListContentPanel) == 0x0003A8, "Member 'UCoreRewardPopupWidget::RewardListContentPanel' has a wrong offset!");
static_assert(offsetof(UCoreRewardPopupWidget, RewardListScrollBox) == 0x0003B0, "Member 'UCoreRewardPopupWidget::RewardListScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreRewardPopupWidget, ScrollInputPrompt) == 0x0003B8, "Member 'UCoreRewardPopupWidget::ScrollInputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreRewardPopupWidget, _rewardListPadding) == 0x0003C0, "Member 'UCoreRewardPopupWidget::_rewardListPadding' has a wrong offset!");
static_assert(offsetof(UCoreRewardPopupWidget, _rewardWrapperWidgetClass) == 0x0003D0, "Member 'UCoreRewardPopupWidget::_rewardWrapperWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreRewardPopupWidget, _rewardListPoolSize) == 0x0003D8, "Member 'UCoreRewardPopupWidget::_rewardListPoolSize' has a wrong offset!");
static_assert(offsetof(UCoreRewardPopupWidget, _rewardList) == 0x0003E0, "Member 'UCoreRewardPopupWidget::_rewardList' has a wrong offset!");
static_assert(offsetof(UCoreRewardPopupWidget, _viewData) == 0x0003E8, "Member 'UCoreRewardPopupWidget::_viewData' has a wrong offset!");
static_assert(offsetof(UCoreRewardPopupWidget, _currentRewardIndex) == 0x0003F0, "Member 'UCoreRewardPopupWidget::_currentRewardIndex' has a wrong offset!");
static_assert(offsetof(UCoreRewardPopupWidget, _sfxPerRarity) == 0x0003F8, "Member 'UCoreRewardPopupWidget::_sfxPerRarity' has a wrong offset!");

// Class DBDUIViewsCore.CoreGlobalProcessingIconWidget
// 0x0008 (0x0328 - 0x0320)
class UCoreGlobalProcessingIconWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreGlobalProcessingIconWidget">();
	}
	static class UCoreGlobalProcessingIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreGlobalProcessingIconWidget>();
	}
};
static_assert(alignof(UCoreGlobalProcessingIconWidget) == 0x000008, "Wrong alignment on UCoreGlobalProcessingIconWidget");
static_assert(sizeof(UCoreGlobalProcessingIconWidget) == 0x000328, "Wrong size on UCoreGlobalProcessingIconWidget");

// Class DBDUIViewsCore.CoreHookCountWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreHookCountWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHookCountWidget">();
	}
	static class UCoreHookCountWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHookCountWidget>();
	}
};
static_assert(alignof(UCoreHookCountWidget) == 0x000008, "Wrong alignment on UCoreHookCountWidget");
static_assert(sizeof(UCoreHookCountWidget) == 0x000358, "Wrong size on UCoreHookCountWidget");

// Class DBDUIViewsCore.CoreSettingsPlayerInfoContainerWidget
// 0x0090 (0x03B0 - 0x0320)
class UCoreSettingsPlayerInfoContainerWidget final : public UCoreBaseUserWidget
{
public:
	TSubclassOf<class UCoreSettingsPlayerInfoButtonWidget> _settingsPlayerButtonWidgetClass;         // 0x0320(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _buttonPadding;                                    // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UGridPanel*                             PlayerInfoContainer;                               // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UCoreButtonWidget* Button)> _onPlayerInfoButtonClickedDelegate; // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMap<class FString, class UCoreSettingsPlayerInfoButtonWidget*> _playerInfoButtonWidgetMapping;  // 0x0350(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A0[0x10];                                     // 0x03A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerInfoButtonClicked(class UCoreButtonWidget* Button);
	void SetButtonPadding(const struct FMargin& ButtonPadding);
	void SetPlayerInfoMaxNumberOfColumns(int32 NumberOfColumns);
	void SetPlayerInfoOfferingVisibility(bool IsVisible_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSettingsPlayerInfoContainerWidget">();
	}
	static class UCoreSettingsPlayerInfoContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSettingsPlayerInfoContainerWidget>();
	}
};
static_assert(alignof(UCoreSettingsPlayerInfoContainerWidget) == 0x000008, "Wrong alignment on UCoreSettingsPlayerInfoContainerWidget");
static_assert(sizeof(UCoreSettingsPlayerInfoContainerWidget) == 0x0003B0, "Wrong size on UCoreSettingsPlayerInfoContainerWidget");
static_assert(offsetof(UCoreSettingsPlayerInfoContainerWidget, _settingsPlayerButtonWidgetClass) == 0x000320, "Member 'UCoreSettingsPlayerInfoContainerWidget::_settingsPlayerButtonWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreSettingsPlayerInfoContainerWidget, _buttonPadding) == 0x000328, "Member 'UCoreSettingsPlayerInfoContainerWidget::_buttonPadding' has a wrong offset!");
static_assert(offsetof(UCoreSettingsPlayerInfoContainerWidget, PlayerInfoContainer) == 0x000338, "Member 'UCoreSettingsPlayerInfoContainerWidget::PlayerInfoContainer' has a wrong offset!");
static_assert(offsetof(UCoreSettingsPlayerInfoContainerWidget, _onPlayerInfoButtonClickedDelegate) == 0x000340, "Member 'UCoreSettingsPlayerInfoContainerWidget::_onPlayerInfoButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreSettingsPlayerInfoContainerWidget, _playerInfoButtonWidgetMapping) == 0x000350, "Member 'UCoreSettingsPlayerInfoContainerWidget::_playerInfoButtonWidgetMapping' has a wrong offset!");

// Class DBDUIViewsCore.CoreHudAimingCrosshairWidget
// 0x0010 (0x0360 - 0x0350)
class UCoreHudAimingCrosshairWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EAimingCrosshairState GetPreviousState() const;
	float GetProgress() const;
	EAimingCrosshairState GetState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudAimingCrosshairWidget">();
	}
	static class UCoreHudAimingCrosshairWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudAimingCrosshairWidget>();
	}
};
static_assert(alignof(UCoreHudAimingCrosshairWidget) == 0x000008, "Wrong alignment on UCoreHudAimingCrosshairWidget");
static_assert(sizeof(UCoreHudAimingCrosshairWidget) == 0x000360, "Wrong size on UCoreHudAimingCrosshairWidget");

// Class DBDUIViewsCore.CoreHudAlertWidget
// 0x0090 (0x03E0 - 0x0350)
class UCoreHudAlertWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxDisplayedItems;                                 // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SecondaryAlpha;                                    // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FullAlertDuration;                                 // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PendingAlertDuration;                              // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnimationDuration;                                 // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   AnimationEasing;                                   // 0x036C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36D[0x3];                                      // 0x036D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationTranslationY;                             // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreHudScoreAlertItem>     CoreHudScoreAlertItemClass;                        // 0x0378(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreHudStatusEffectAlertItem> CoreHudStatusEffectAlertItemClass;              // 0x0380(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             AlertContainer;                                    // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreBaseUserWidget*>            _alerts;                                           // 0x0390(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreBaseUserWidget*>            _pendingAlerts;                                    // 0x03A0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreHudScoreAlertItem*>         _scoreAlertPool;                                   // 0x03B0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreHudStatusEffectAlertItem*>  _statusEffectAlertPool;                            // 0x03C0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D0[0x10];                                     // 0x03D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearAlerts();
	void OnClearAlertsComplete(class UUITweenInstance* tween);
	void OnPopAlertComplete(class UUITweenInstance* tween);
	void PopAlert();

	TArray<class UCoreBaseUserWidget*> GetAlerts() const;
	TArray<class UCoreBaseUserWidget*> GetPendingAlerts() const;
	float GetRemainingTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudAlertWidget">();
	}
	static class UCoreHudAlertWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudAlertWidget>();
	}
};
static_assert(alignof(UCoreHudAlertWidget) == 0x000008, "Wrong alignment on UCoreHudAlertWidget");
static_assert(sizeof(UCoreHudAlertWidget) == 0x0003E0, "Wrong size on UCoreHudAlertWidget");
static_assert(offsetof(UCoreHudAlertWidget, MaxDisplayedItems) == 0x000358, "Member 'UCoreHudAlertWidget::MaxDisplayedItems' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, SecondaryAlpha) == 0x00035C, "Member 'UCoreHudAlertWidget::SecondaryAlpha' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, FullAlertDuration) == 0x000360, "Member 'UCoreHudAlertWidget::FullAlertDuration' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, PendingAlertDuration) == 0x000364, "Member 'UCoreHudAlertWidget::PendingAlertDuration' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, AnimationDuration) == 0x000368, "Member 'UCoreHudAlertWidget::AnimationDuration' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, AnimationEasing) == 0x00036C, "Member 'UCoreHudAlertWidget::AnimationEasing' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, AnimationTranslationY) == 0x000370, "Member 'UCoreHudAlertWidget::AnimationTranslationY' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, CoreHudScoreAlertItemClass) == 0x000378, "Member 'UCoreHudAlertWidget::CoreHudScoreAlertItemClass' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, CoreHudStatusEffectAlertItemClass) == 0x000380, "Member 'UCoreHudAlertWidget::CoreHudStatusEffectAlertItemClass' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, AlertContainer) == 0x000388, "Member 'UCoreHudAlertWidget::AlertContainer' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, _alerts) == 0x000390, "Member 'UCoreHudAlertWidget::_alerts' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, _pendingAlerts) == 0x0003A0, "Member 'UCoreHudAlertWidget::_pendingAlerts' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, _scoreAlertPool) == 0x0003B0, "Member 'UCoreHudAlertWidget::_scoreAlertPool' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, _statusEffectAlertPool) == 0x0003C0, "Member 'UCoreHudAlertWidget::_statusEffectAlertPool' has a wrong offset!");

// Class DBDUIViewsCore.CoreSortingWidget
// 0x0048 (0x0368 - 0x0320)
class UCoreSortingWidget : public UCoreBaseUserWidget
{
public:
	int32                                         _sortingOptions;                                   // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreButtonWidget*                      SortingOptionButton;                               // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreIconButtonWidget*                  SortingOrderButton;                                // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _sortingTooltipText;                               // 0x0338(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x18];                                     // 0x0350(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnNextSortingOptionClick(class UCoreButtonWidget* buttonTarget);
	void OnPreviousSortingOptionClick(class UCoreButtonWidget* buttonTarget);
	void OnSortingOrderClick(class UCoreButtonWidget* buttonTarget);
	void SetSortingOrderButtonVisibility(bool showSortingOrderButton);
	ESortingOrder ToggleSortingOrder();
	void UpdateSortingOrderButton(ESortingOrder sortingOrder);

	bool IsOptionEnabled(ESortingOption Option) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSortingWidget">();
	}
	static class UCoreSortingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSortingWidget>();
	}
};
static_assert(alignof(UCoreSortingWidget) == 0x000008, "Wrong alignment on UCoreSortingWidget");
static_assert(sizeof(UCoreSortingWidget) == 0x000368, "Wrong size on UCoreSortingWidget");
static_assert(offsetof(UCoreSortingWidget, _sortingOptions) == 0x000320, "Member 'UCoreSortingWidget::_sortingOptions' has a wrong offset!");
static_assert(offsetof(UCoreSortingWidget, SortingOptionButton) == 0x000328, "Member 'UCoreSortingWidget::SortingOptionButton' has a wrong offset!");
static_assert(offsetof(UCoreSortingWidget, SortingOrderButton) == 0x000330, "Member 'UCoreSortingWidget::SortingOrderButton' has a wrong offset!");
static_assert(offsetof(UCoreSortingWidget, _sortingTooltipText) == 0x000338, "Member 'UCoreSortingWidget::_sortingTooltipText' has a wrong offset!");

// Class DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget
// 0x0000 (0x0350 - 0x0350)
class UCoreHudDirectionalMiniGameItemWidget final : public UCoreBaseHudWidget
{
public:
	void Init(EDirectionalInputKey Direction);
	void RevealDirection(bool withAnimation);
	void UpdateFinaleVisualState(bool IsSuccessful);
	void UpdateResult(bool IsSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudDirectionalMiniGameItemWidget">();
	}
	static class UCoreHudDirectionalMiniGameItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudDirectionalMiniGameItemWidget>();
	}
};
static_assert(alignof(UCoreHudDirectionalMiniGameItemWidget) == 0x000008, "Wrong alignment on UCoreHudDirectionalMiniGameItemWidget");
static_assert(sizeof(UCoreHudDirectionalMiniGameItemWidget) == 0x000350, "Wrong size on UCoreHudDirectionalMiniGameItemWidget");

// Class DBDUIViewsCore.CoreHudDirectionalMiniGameWidget
// 0x0038 (0x0388 - 0x0350)
class UCoreHudDirectionalMiniGameWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreHudDirectionalMiniGameItemWidget> SkullMerchantItemWidgetClass;           // 0x0358(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreHudDirectionalMiniGameItemWidget> WormholeItemWidgetClass;                // 0x0360(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         container;                                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreHudDirectionalMiniGameItemWidget*> _widgets;                                   // 0x0370(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	EDirectionalMiniGameType                      _currentType;                                      // 0x0380(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class UCoreHudDirectionalMiniGameItemWidget*> GetWidgets();
	void ShowVisual();

	EDirectionalMiniGameType GetCurrentType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudDirectionalMiniGameWidget">();
	}
	static class UCoreHudDirectionalMiniGameWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudDirectionalMiniGameWidget>();
	}
};
static_assert(alignof(UCoreHudDirectionalMiniGameWidget) == 0x000008, "Wrong alignment on UCoreHudDirectionalMiniGameWidget");
static_assert(sizeof(UCoreHudDirectionalMiniGameWidget) == 0x000388, "Wrong size on UCoreHudDirectionalMiniGameWidget");
static_assert(offsetof(UCoreHudDirectionalMiniGameWidget, SkullMerchantItemWidgetClass) == 0x000358, "Member 'UCoreHudDirectionalMiniGameWidget::SkullMerchantItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreHudDirectionalMiniGameWidget, WormholeItemWidgetClass) == 0x000360, "Member 'UCoreHudDirectionalMiniGameWidget::WormholeItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreHudDirectionalMiniGameWidget, container) == 0x000368, "Member 'UCoreHudDirectionalMiniGameWidget::container' has a wrong offset!");
static_assert(offsetof(UCoreHudDirectionalMiniGameWidget, _widgets) == 0x000370, "Member 'UCoreHudDirectionalMiniGameWidget::_widgets' has a wrong offset!");
static_assert(offsetof(UCoreHudDirectionalMiniGameWidget, _currentType) == 0x000380, "Member 'UCoreHudDirectionalMiniGameWidget::_currentType' has a wrong offset!");

// Class DBDUIViewsCore.CoreShrineOfSecretsItemWidget
// 0x0260 (0x0580 - 0x0320)
class UCoreShrineOfSecretsItemWidget final : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void(const struct FShrineOfSecretsItemViewData& ShrineOfSecretsItemViewData)> PurchaseButtonClickedDelegate; // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCoreMenuPerkWidget*                    Perk;                                              // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              CheckmarkIMG;                                      // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PerkNameTB;                                        // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CharacterNameTB;                                   // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      BPConversionRTB;                                   // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      DescriptionRTB;                                    // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreCurrencyButtonWidget*              CurrencyButton;                                    // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PerkMaxedTB;                                       // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          ScrollBox;                                         // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FShrineOfSecretsItemViewData           _shrineOfSecretsItemViewData;                      // 0x0378(0x0208)(Transient, NativeAccessSpecifierPrivate)

public:
	void OnPurchaseButtonClicked(class UCoreButtonWidget* buttonTarget);
	void PlayUnlockanimation();
	void SetEventDiscountVisualData(const struct FShrineOfSecretsDiscountUIInfo& discountInfo);
	void SetVisuals(const struct FShrineOfSecretsItemViewData& ShrineOfSecretsItemViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreShrineOfSecretsItemWidget">();
	}
	static class UCoreShrineOfSecretsItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreShrineOfSecretsItemWidget>();
	}
};
static_assert(alignof(UCoreShrineOfSecretsItemWidget) == 0x000008, "Wrong alignment on UCoreShrineOfSecretsItemWidget");
static_assert(sizeof(UCoreShrineOfSecretsItemWidget) == 0x000580, "Wrong size on UCoreShrineOfSecretsItemWidget");
static_assert(offsetof(UCoreShrineOfSecretsItemWidget, PurchaseButtonClickedDelegate) == 0x000320, "Member 'UCoreShrineOfSecretsItemWidget::PurchaseButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsItemWidget, Perk) == 0x000330, "Member 'UCoreShrineOfSecretsItemWidget::Perk' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsItemWidget, CheckmarkIMG) == 0x000338, "Member 'UCoreShrineOfSecretsItemWidget::CheckmarkIMG' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsItemWidget, PerkNameTB) == 0x000340, "Member 'UCoreShrineOfSecretsItemWidget::PerkNameTB' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsItemWidget, CharacterNameTB) == 0x000348, "Member 'UCoreShrineOfSecretsItemWidget::CharacterNameTB' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsItemWidget, BPConversionRTB) == 0x000350, "Member 'UCoreShrineOfSecretsItemWidget::BPConversionRTB' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsItemWidget, DescriptionRTB) == 0x000358, "Member 'UCoreShrineOfSecretsItemWidget::DescriptionRTB' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsItemWidget, CurrencyButton) == 0x000360, "Member 'UCoreShrineOfSecretsItemWidget::CurrencyButton' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsItemWidget, PerkMaxedTB) == 0x000368, "Member 'UCoreShrineOfSecretsItemWidget::PerkMaxedTB' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsItemWidget, ScrollBox) == 0x000370, "Member 'UCoreShrineOfSecretsItemWidget::ScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsItemWidget, _shrineOfSecretsItemViewData) == 0x000378, "Member 'UCoreShrineOfSecretsItemWidget::_shrineOfSecretsItemViewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreHudEventObjectiveItemWidget
// 0x0030 (0x0380 - 0x0350)
class UCoreHudEventObjectiveItemWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x20];                                     // 0x0350(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	EEventObjectiveItemState                      _currentState;                                     // 0x0370(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _charges;                                          // 0x0374(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _maxCharges;                                       // 0x0378(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudEventObjectiveItemWidget">();
	}
	static class UCoreHudEventObjectiveItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudEventObjectiveItemWidget>();
	}
};
static_assert(alignof(UCoreHudEventObjectiveItemWidget) == 0x000008, "Wrong alignment on UCoreHudEventObjectiveItemWidget");
static_assert(sizeof(UCoreHudEventObjectiveItemWidget) == 0x000380, "Wrong size on UCoreHudEventObjectiveItemWidget");
static_assert(offsetof(UCoreHudEventObjectiveItemWidget, _currentState) == 0x000370, "Member 'UCoreHudEventObjectiveItemWidget::_currentState' has a wrong offset!");
static_assert(offsetof(UCoreHudEventObjectiveItemWidget, _charges) == 0x000374, "Member 'UCoreHudEventObjectiveItemWidget::_charges' has a wrong offset!");
static_assert(offsetof(UCoreHudEventObjectiveItemWidget, _maxCharges) == 0x000378, "Member 'UCoreHudEventObjectiveItemWidget::_maxCharges' has a wrong offset!");

// Class DBDUIViewsCore.CoreHudEventProgression2023Widget
// 0x0008 (0x0358 - 0x0350)
class UCoreHudEventProgression2023Widget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudEventProgression2023Widget">();
	}
	static class UCoreHudEventProgression2023Widget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudEventProgression2023Widget>();
	}
};
static_assert(alignof(UCoreHudEventProgression2023Widget) == 0x000008, "Wrong alignment on UCoreHudEventProgression2023Widget");
static_assert(sizeof(UCoreHudEventProgression2023Widget) == 0x000358, "Wrong size on UCoreHudEventProgression2023Widget");

// Class DBDUIViewsCore.CoreSettingsPerksDisplayWidget
// 0x0028 (0x0348 - 0x0320)
class UCoreSettingsPerksDisplayWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCoreMenuPerkWidget*>            _perkWidgets;                                      // 0x0330(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UAudioEventWrapper*                     _perkUnlockAudioEvent;                             // 0x0340(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnPerkClicked(class UCoreButtonWidget* Button);
	void OnPerkHovered(class UCoreButtonWidget* hoveredPerk);
	void OnPerkUnhovered(class UCoreButtonWidget* unhoveredPerk);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSettingsPerksDisplayWidget">();
	}
	static class UCoreSettingsPerksDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSettingsPerksDisplayWidget>();
	}
};
static_assert(alignof(UCoreSettingsPerksDisplayWidget) == 0x000008, "Wrong alignment on UCoreSettingsPerksDisplayWidget");
static_assert(sizeof(UCoreSettingsPerksDisplayWidget) == 0x000348, "Wrong size on UCoreSettingsPerksDisplayWidget");
static_assert(offsetof(UCoreSettingsPerksDisplayWidget, _perkWidgets) == 0x000330, "Member 'UCoreSettingsPerksDisplayWidget::_perkWidgets' has a wrong offset!");
static_assert(offsetof(UCoreSettingsPerksDisplayWidget, _perkUnlockAudioEvent) == 0x000340, "Member 'UCoreSettingsPerksDisplayWidget::_perkUnlockAudioEvent' has a wrong offset!");

// Class DBDUIViewsCore.CoreHudEventProgressionWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreHudEventProgressionWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudEventProgressionWidget">();
	}
	static class UCoreHudEventProgressionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudEventProgressionWidget>();
	}
};
static_assert(alignof(UCoreHudEventProgressionWidget) == 0x000008, "Wrong alignment on UCoreHudEventProgressionWidget");
static_assert(sizeof(UCoreHudEventProgressionWidget) == 0x000358, "Wrong size on UCoreHudEventProgressionWidget");

// Class DBDUIViewsCore.CoreHudObjectivesWidget
// 0x0018 (0x0368 - 0x0350)
class UCoreHudObjectivesWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          SpecialSpacer;                                     // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudObjectivesWidget">();
	}
	static class UCoreHudObjectivesWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudObjectivesWidget>();
	}
};
static_assert(alignof(UCoreHudObjectivesWidget) == 0x000008, "Wrong alignment on UCoreHudObjectivesWidget");
static_assert(sizeof(UCoreHudObjectivesWidget) == 0x000368, "Wrong size on UCoreHudObjectivesWidget");
static_assert(offsetof(UCoreHudObjectivesWidget, SpecialSpacer) == 0x000360, "Member 'UCoreHudObjectivesWidget::SpecialSpacer' has a wrong offset!");

// Class DBDUIViewsCore.CoreSkillWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreSkillWidget final : public UCoreBaseLoadoutPartWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSkillWidget">();
	}
	static class UCoreSkillWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSkillWidget>();
	}
};
static_assert(alignof(UCoreSkillWidget) == 0x000008, "Wrong alignment on UCoreSkillWidget");
static_assert(sizeof(UCoreSkillWidget) == 0x000358, "Wrong size on UCoreSkillWidget");

// Class DBDUIViewsCore.CoreHudScoreAlertItem
// 0x0000 (0x0320 - 0x0320)
class UCoreHudScoreAlertItem final : public UCoreBaseUserWidget
{
public:
	void SetData(const struct FScoreAlertViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudScoreAlertItem">();
	}
	static class UCoreHudScoreAlertItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudScoreAlertItem>();
	}
};
static_assert(alignof(UCoreHudScoreAlertItem) == 0x000008, "Wrong alignment on UCoreHudScoreAlertItem");
static_assert(sizeof(UCoreHudScoreAlertItem) == 0x000320, "Wrong size on UCoreHudScoreAlertItem");

// Class DBDUIViewsCore.CoreHudStatusEffectAlertItem
// 0x0000 (0x0320 - 0x0320)
class UCoreHudStatusEffectAlertItem final : public UCoreBaseUserWidget
{
public:
	void SetData(const struct FStatusEffectAlertViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudStatusEffectAlertItem">();
	}
	static class UCoreHudStatusEffectAlertItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudStatusEffectAlertItem>();
	}
};
static_assert(alignof(UCoreHudStatusEffectAlertItem) == 0x000008, "Wrong alignment on UCoreHudStatusEffectAlertItem");
static_assert(sizeof(UCoreHudStatusEffectAlertItem) == 0x000320, "Wrong size on UCoreHudStatusEffectAlertItem");

// Class DBDUIViewsCore.CoreStoreArchivePassItemWidget
// 0x0178 (0x0650 - 0x04D8)
class UCoreStoreArchivePassItemWidget final : public UCoreSelectableButtonWidget
{
public:
	class UDBDImage*                              IconIMG;                                           // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TitleTB;                                           // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SubtitleTB;                                        // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FStoreArchivePassViewData              _viewData;                                         // 0x04F8(0x0158)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void OnButtonHovered(class UCoreButtonWidget* targetButton);
	void OnButtonUnhovered(class UCoreButtonWidget* targetButton);
	void SetData(const struct FStoreArchivePassViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreArchivePassItemWidget">();
	}
	static class UCoreStoreArchivePassItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreArchivePassItemWidget>();
	}
};
static_assert(alignof(UCoreStoreArchivePassItemWidget) == 0x000008, "Wrong alignment on UCoreStoreArchivePassItemWidget");
static_assert(sizeof(UCoreStoreArchivePassItemWidget) == 0x000650, "Wrong size on UCoreStoreArchivePassItemWidget");
static_assert(offsetof(UCoreStoreArchivePassItemWidget, IconIMG) == 0x0004D8, "Member 'UCoreStoreArchivePassItemWidget::IconIMG' has a wrong offset!");
static_assert(offsetof(UCoreStoreArchivePassItemWidget, TitleTB) == 0x0004E0, "Member 'UCoreStoreArchivePassItemWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreArchivePassItemWidget, SubtitleTB) == 0x0004E8, "Member 'UCoreStoreArchivePassItemWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreArchivePassItemWidget, OnHoverBorder) == 0x0004F0, "Member 'UCoreStoreArchivePassItemWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreStoreArchivePassItemWidget, _viewData) == 0x0004F8, "Member 'UCoreStoreArchivePassItemWidget::_viewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreIconButtonWidget
// 0x0040 (0x04F0 - 0x04B0)
class UCoreIconButtonWidget : public UCoreButtonWidget
{
public:
	TSoftObjectPtr<class UTexture2D>              iconTexture;                                       // 0x04B0(0x0038)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              IconIMG;                                           // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetIconTexture(const TSoftObjectPtr<class UTexture2D> iconTexture_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreIconButtonWidget">();
	}
	static class UCoreIconButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreIconButtonWidget>();
	}
};
static_assert(alignof(UCoreIconButtonWidget) == 0x000008, "Wrong alignment on UCoreIconButtonWidget");
static_assert(sizeof(UCoreIconButtonWidget) == 0x0004F0, "Wrong size on UCoreIconButtonWidget");
static_assert(offsetof(UCoreIconButtonWidget, iconTexture) == 0x0004B0, "Member 'UCoreIconButtonWidget::iconTexture' has a wrong offset!");
static_assert(offsetof(UCoreIconButtonWidget, IconIMG) == 0x0004E8, "Member 'UCoreIconButtonWidget::IconIMG' has a wrong offset!");

// Class DBDUIViewsCore.CoreToggleButtonWidget
// 0x0008 (0x04B8 - 0x04B0)
class UCoreToggleButtonWidget : public UCoreButtonWidget
{
public:
	bool                                          DefaultToggleState;                                // 0x04B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetActiveVisualState(bool IsActive);
	void SetToDefaultState();

	bool IsToggled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreToggleButtonWidget">();
	}
	static class UCoreToggleButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreToggleButtonWidget>();
	}
};
static_assert(alignof(UCoreToggleButtonWidget) == 0x000008, "Wrong alignment on UCoreToggleButtonWidget");
static_assert(sizeof(UCoreToggleButtonWidget) == 0x0004B8, "Wrong size on UCoreToggleButtonWidget");
static_assert(offsetof(UCoreToggleButtonWidget, DefaultToggleState) == 0x0004B0, "Member 'UCoreToggleButtonWidget::DefaultToggleState' has a wrong offset!");

// Class DBDUIViewsCore.CoreSpecialEventLoadingScreenWidget
// 0x0088 (0x03A8 - 0x0320)
class UCoreSpecialEventLoadingScreenWidget : public UCoreBaseUserWidget
{
public:
	bool                                          _overrideLoadingHintsColors;                       // 0x0320(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           _loadingHintsTitleOverrideColor;                   // 0x0324(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           _loadingHintsDescriptionOverrideColor;             // 0x0334(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _overrideProgressBarColors;                        // 0x0344(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           _progressBarOverridePrimaryColor;                  // 0x0348(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           _progressBarOverrideSecondaryColor;                // 0x0358(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _overrideLoadingLogoColor;                         // 0x0368(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_369[0x3];                                      // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           _loadingLogoOverrideColor;                         // 0x036C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreLoadingHintsDisplayWidget*         LoadingHintsDisplay;                               // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ProgressBar;                                       // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLoadingLogoWidget*                 LoadingLogo;                                       // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnLoadingHintsFadeSequenceCompletedDelegate;       // 0x0398(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void OnLoadingHintsFadeSequenceCompleted();
	void SetData(const struct FSpecialEventLoadingScreenViewData& Data);
	void SetLoadingHint(const struct FLoadingHintViewData& loadingHintData);
	void UpdateProgress(float Progress);

	void SetLoadingLogoColor(const struct FLinearColor& FillingColor) const;
	void SetProgressBarColors(const struct FLinearColor& MainColor, const struct FLinearColor& secondaryColor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSpecialEventLoadingScreenWidget">();
	}
	static class UCoreSpecialEventLoadingScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSpecialEventLoadingScreenWidget>();
	}
};
static_assert(alignof(UCoreSpecialEventLoadingScreenWidget) == 0x000008, "Wrong alignment on UCoreSpecialEventLoadingScreenWidget");
static_assert(sizeof(UCoreSpecialEventLoadingScreenWidget) == 0x0003A8, "Wrong size on UCoreSpecialEventLoadingScreenWidget");
static_assert(offsetof(UCoreSpecialEventLoadingScreenWidget, _overrideLoadingHintsColors) == 0x000320, "Member 'UCoreSpecialEventLoadingScreenWidget::_overrideLoadingHintsColors' has a wrong offset!");
static_assert(offsetof(UCoreSpecialEventLoadingScreenWidget, _loadingHintsTitleOverrideColor) == 0x000324, "Member 'UCoreSpecialEventLoadingScreenWidget::_loadingHintsTitleOverrideColor' has a wrong offset!");
static_assert(offsetof(UCoreSpecialEventLoadingScreenWidget, _loadingHintsDescriptionOverrideColor) == 0x000334, "Member 'UCoreSpecialEventLoadingScreenWidget::_loadingHintsDescriptionOverrideColor' has a wrong offset!");
static_assert(offsetof(UCoreSpecialEventLoadingScreenWidget, _overrideProgressBarColors) == 0x000344, "Member 'UCoreSpecialEventLoadingScreenWidget::_overrideProgressBarColors' has a wrong offset!");
static_assert(offsetof(UCoreSpecialEventLoadingScreenWidget, _progressBarOverridePrimaryColor) == 0x000348, "Member 'UCoreSpecialEventLoadingScreenWidget::_progressBarOverridePrimaryColor' has a wrong offset!");
static_assert(offsetof(UCoreSpecialEventLoadingScreenWidget, _progressBarOverrideSecondaryColor) == 0x000358, "Member 'UCoreSpecialEventLoadingScreenWidget::_progressBarOverrideSecondaryColor' has a wrong offset!");
static_assert(offsetof(UCoreSpecialEventLoadingScreenWidget, _overrideLoadingLogoColor) == 0x000368, "Member 'UCoreSpecialEventLoadingScreenWidget::_overrideLoadingLogoColor' has a wrong offset!");
static_assert(offsetof(UCoreSpecialEventLoadingScreenWidget, _loadingLogoOverrideColor) == 0x00036C, "Member 'UCoreSpecialEventLoadingScreenWidget::_loadingLogoOverrideColor' has a wrong offset!");
static_assert(offsetof(UCoreSpecialEventLoadingScreenWidget, LoadingHintsDisplay) == 0x000380, "Member 'UCoreSpecialEventLoadingScreenWidget::LoadingHintsDisplay' has a wrong offset!");
static_assert(offsetof(UCoreSpecialEventLoadingScreenWidget, ProgressBar) == 0x000388, "Member 'UCoreSpecialEventLoadingScreenWidget::ProgressBar' has a wrong offset!");
static_assert(offsetof(UCoreSpecialEventLoadingScreenWidget, LoadingLogo) == 0x000390, "Member 'UCoreSpecialEventLoadingScreenWidget::LoadingLogo' has a wrong offset!");
static_assert(offsetof(UCoreSpecialEventLoadingScreenWidget, OnLoadingHintsFadeSequenceCompletedDelegate) == 0x000398, "Member 'UCoreSpecialEventLoadingScreenWidget::OnLoadingHintsFadeSequenceCompletedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreIconToggleWidget
// 0x0000 (0x04B8 - 0x04B8)
class UCoreIconToggleWidget : public UCoreToggleButtonWidget
{
public:
	void SetNotificationIconVisibility(bool ShowNotification);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreIconToggleWidget">();
	}
	static class UCoreIconToggleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreIconToggleWidget>();
	}
};
static_assert(alignof(UCoreIconToggleWidget) == 0x000008, "Wrong alignment on UCoreIconToggleWidget");
static_assert(sizeof(UCoreIconToggleWidget) == 0x0004B8, "Wrong size on UCoreIconToggleWidget");

// Class DBDUIViewsCore.CoreImagePreviewAreaWidget
// 0x0038 (0x0358 - 0x0320)
class UCoreImagePreviewAreaWidget : public UCoreBaseUserWidget
{
public:
	class UDBDImage*                              PreviewArea;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePlayerCardWidget*                  AnimatedCardContainer;                             // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      ItemContainerText;                                 // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCustomizationItemGridContainer*        ItemContainer;                                     // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDPreviewWorldImage*                  ItemRenderer;                                      // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_348[0x10];                                     // 0x0348(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnItemClicked(const int32 selectedIndex);
	void SetAnimatedPreviewData(const class UStoreCustomizationItemViewData* previewItemData);
	void SetData(const struct FCustomizationItemPreviewAreaViewData& ViewData);
	void SetPreviewContainerVisual(const ECustomizationCategory CustomizationCategory);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreImagePreviewAreaWidget">();
	}
	static class UCoreImagePreviewAreaWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreImagePreviewAreaWidget>();
	}
};
static_assert(alignof(UCoreImagePreviewAreaWidget) == 0x000008, "Wrong alignment on UCoreImagePreviewAreaWidget");
static_assert(sizeof(UCoreImagePreviewAreaWidget) == 0x000358, "Wrong size on UCoreImagePreviewAreaWidget");
static_assert(offsetof(UCoreImagePreviewAreaWidget, PreviewArea) == 0x000320, "Member 'UCoreImagePreviewAreaWidget::PreviewArea' has a wrong offset!");
static_assert(offsetof(UCoreImagePreviewAreaWidget, AnimatedCardContainer) == 0x000328, "Member 'UCoreImagePreviewAreaWidget::AnimatedCardContainer' has a wrong offset!");
static_assert(offsetof(UCoreImagePreviewAreaWidget, ItemContainerText) == 0x000330, "Member 'UCoreImagePreviewAreaWidget::ItemContainerText' has a wrong offset!");
static_assert(offsetof(UCoreImagePreviewAreaWidget, ItemContainer) == 0x000338, "Member 'UCoreImagePreviewAreaWidget::ItemContainer' has a wrong offset!");
static_assert(offsetof(UCoreImagePreviewAreaWidget, ItemRenderer) == 0x000340, "Member 'UCoreImagePreviewAreaWidget::ItemRenderer' has a wrong offset!");

// Class DBDUIViewsCore.CoreSkillCheckWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreSkillCheckWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSkillCheckWidget">();
	}
	static class UCoreSkillCheckWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSkillCheckWidget>();
	}
};
static_assert(alignof(UCoreSkillCheckWidget) == 0x000008, "Wrong alignment on UCoreSkillCheckWidget");
static_assert(sizeof(UCoreSkillCheckWidget) == 0x000358, "Wrong size on UCoreSkillCheckWidget");

// Class DBDUIViewsCore.CoreInboxBodySectionBaseWidget
// 0x0000 (0x0320 - 0x0320)
class UCoreInboxBodySectionBaseWidget : public UCoreBaseUserWidget
{
public:
	ENewsAndMessagesSectionType GetSectionType();
	bool SetData(class UInboxBodySectionViewData* ViewData);
	void SetSkin(const struct FInboxSkinUIData& skinUIData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInboxBodySectionBaseWidget">();
	}
	static class UCoreInboxBodySectionBaseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInboxBodySectionBaseWidget>();
	}
};
static_assert(alignof(UCoreInboxBodySectionBaseWidget) == 0x000008, "Wrong alignment on UCoreInboxBodySectionBaseWidget");
static_assert(sizeof(UCoreInboxBodySectionBaseWidget) == 0x000320, "Wrong size on UCoreInboxBodySectionBaseWidget");

// Class DBDUIViewsCore.CoreInboxBodySectionHeaderWidget
// 0x0008 (0x0328 - 0x0320)
class UCoreInboxBodySectionHeaderWidget final : public UCoreInboxBodySectionBaseWidget
{
public:
	class UDBDRichTextBlock*                      TextRTB;                                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInboxBodySectionHeaderWidget">();
	}
	static class UCoreInboxBodySectionHeaderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInboxBodySectionHeaderWidget>();
	}
};
static_assert(alignof(UCoreInboxBodySectionHeaderWidget) == 0x000008, "Wrong alignment on UCoreInboxBodySectionHeaderWidget");
static_assert(sizeof(UCoreInboxBodySectionHeaderWidget) == 0x000328, "Wrong size on UCoreInboxBodySectionHeaderWidget");
static_assert(offsetof(UCoreInboxBodySectionHeaderWidget, TextRTB) == 0x000320, "Member 'UCoreInboxBodySectionHeaderWidget::TextRTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreOfferingInteractionWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreOfferingInteractionWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOfferingInteractionWidget">();
	}
	static class UCoreOfferingInteractionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOfferingInteractionWidget>();
	}
};
static_assert(alignof(UCoreOfferingInteractionWidget) == 0x000008, "Wrong alignment on UCoreOfferingInteractionWidget");
static_assert(sizeof(UCoreOfferingInteractionWidget) == 0x000358, "Wrong size on UCoreOfferingInteractionWidget");

// Class DBDUIViewsCore.CoreInboxBodySectionImageWidget
// 0x0018 (0x0338 - 0x0320)
class UCoreInboxBodySectionImageWidget final : public UCoreInboxBodySectionBaseWidget
{
public:
	class UDBDRichTextBlock*                      TextRTB;                                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ImageIMG;                                          // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextureLoadingWrapper*                 _imageLoader;                                      // 0x0330(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInboxBodySectionImageWidget">();
	}
	static class UCoreInboxBodySectionImageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInboxBodySectionImageWidget>();
	}
};
static_assert(alignof(UCoreInboxBodySectionImageWidget) == 0x000008, "Wrong alignment on UCoreInboxBodySectionImageWidget");
static_assert(sizeof(UCoreInboxBodySectionImageWidget) == 0x000338, "Wrong size on UCoreInboxBodySectionImageWidget");
static_assert(offsetof(UCoreInboxBodySectionImageWidget, TextRTB) == 0x000320, "Member 'UCoreInboxBodySectionImageWidget::TextRTB' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodySectionImageWidget, ImageIMG) == 0x000328, "Member 'UCoreInboxBodySectionImageWidget::ImageIMG' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodySectionImageWidget, _imageLoader) == 0x000330, "Member 'UCoreInboxBodySectionImageWidget::_imageLoader' has a wrong offset!");

// Class DBDUIViewsCore.CoreInboxBodySectionItemShowcaseWidget
// 0x0090 (0x03B0 - 0x0320)
class UCoreInboxBodySectionItemShowcaseWidget final : public UCoreInboxBodySectionBaseWidget
{
public:
	class UDBDRichTextBlock*                      TextRTB;                                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             ContentBox;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedItemsCount;                         // 0x0330(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreRewardWrapperWidget>   _rewardWidgetClass;                                // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _columnsPerRow;                                    // 0x0340(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _itemsMargins;                                     // 0x0344(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ERewardType, float>                      _scalePerRewardTypeMap;                            // 0x0358(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _rewardList;                                       // 0x03A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInboxBodySectionItemShowcaseWidget">();
	}
	static class UCoreInboxBodySectionItemShowcaseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInboxBodySectionItemShowcaseWidget>();
	}
};
static_assert(alignof(UCoreInboxBodySectionItemShowcaseWidget) == 0x000008, "Wrong alignment on UCoreInboxBodySectionItemShowcaseWidget");
static_assert(sizeof(UCoreInboxBodySectionItemShowcaseWidget) == 0x0003B0, "Wrong size on UCoreInboxBodySectionItemShowcaseWidget");
static_assert(offsetof(UCoreInboxBodySectionItemShowcaseWidget, TextRTB) == 0x000320, "Member 'UCoreInboxBodySectionItemShowcaseWidget::TextRTB' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodySectionItemShowcaseWidget, ContentBox) == 0x000328, "Member 'UCoreInboxBodySectionItemShowcaseWidget::ContentBox' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodySectionItemShowcaseWidget, _preConstructedItemsCount) == 0x000330, "Member 'UCoreInboxBodySectionItemShowcaseWidget::_preConstructedItemsCount' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodySectionItemShowcaseWidget, _rewardWidgetClass) == 0x000338, "Member 'UCoreInboxBodySectionItemShowcaseWidget::_rewardWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodySectionItemShowcaseWidget, _columnsPerRow) == 0x000340, "Member 'UCoreInboxBodySectionItemShowcaseWidget::_columnsPerRow' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodySectionItemShowcaseWidget, _itemsMargins) == 0x000344, "Member 'UCoreInboxBodySectionItemShowcaseWidget::_itemsMargins' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodySectionItemShowcaseWidget, _scalePerRewardTypeMap) == 0x000358, "Member 'UCoreInboxBodySectionItemShowcaseWidget::_scalePerRewardTypeMap' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodySectionItemShowcaseWidget, _rewardList) == 0x0003A8, "Member 'UCoreInboxBodySectionItemShowcaseWidget::_rewardList' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreCharactersCustomizationsWidget
// 0x0130 (0x0450 - 0x0320)
class UCoreStoreCharactersCustomizationsWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FName customizationId)> _customizationSelectedDelegate; // 0x0328(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FName customizationId)> _customizationSelectedAgainDelegate; // 0x0338(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const ECustomizationCategory category)> _categorySelectedDelegate; // 0x0348(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const ECustomizationCategory category)> _categorySelectedAgainDelegate; // 0x0358(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const int32 presetId)> _presetSelectedDelegate;                    // 0x0368(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreStoreCustomizationItemWidget> _customizationItemWidgetClass;              // 0x0378(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreStoreCategoryWidget>   _categoryItemWidgetClass;                          // 0x0380(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCorePresetWidget>          _presetItemWidgetClass;                            // 0x0388(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _numberOfColumns;                                  // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _customizationItemScale;                           // 0x0394(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _layoutMask;                                       // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _defaultFilterAvailable;                           // 0x039C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _defaultFilterOwned;                               // 0x039D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39E[0x2];                                      // 0x039E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _sortingOptions;                                   // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESortingOption                                _defaultSortingOption;                             // 0x03A4(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESortingOrder                                 _defaultSortingOrder;                              // 0x03A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A7[0x1];                                      // 0x03A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UUniformGridPanel*                      CustomizationsContainer;                           // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUniformGridPanel*                      CategoriesContainer;                               // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCharmSlotListWidget*          CharmSlots;                                        // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCharactersFilterWidget*       FiltersWidget;                                     // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreIconToggleWidget*                  FiltersButton;                                     // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSearchBarWidget*                   SearchBar;                                         // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInfoMessageWidget*                 EmptyContentWidget;                                // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCustomizationItemWidget*      _selectedCustomizationItem;                        // 0x03E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCategoryWidget*               _selectedCategoryItem;                             // 0x03E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePresetContainerWidget*             PresetsContainer;                                  // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedCategoriesCount;                    // 0x03F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedCustomizationsCount;                // 0x03FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _filtersTooltipText;                               // 0x0400(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   _closeFiltersTooltipText;                          // 0x0418(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          CharacterCustomizationsScrollBox;                  // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCorePreConstructableList*              _categoryList;                                     // 0x0438(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCorePreConstructableList*              _customizationList;                                // 0x0440(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ERightStickMode                               _rightStickMode;                                   // 0x0448(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCategoryButtonHovered(class UCoreButtonWidget* buttonTarget);
	void OnCategoryButtonUnhovered(class UCoreButtonWidget* buttonTarget);
	void OnCategorySelected(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected);
	void OnCategorySelectedAgain(class UCoreSelectableButtonWidget* buttonTarget);
	void OnClearFiltersClicked();
	void OnCustomizationSelected(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected);
	void OnCustomizationSelectedAgain(class UCoreSelectableButtonWidget* buttonTarget);
	void OnFiltersButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnFiltersChanged(const struct FStoreCharactersFiltersData& storeFiltersData);
	void OnFiltersWidgetVisibilityChanged(const ESlateVisibility newVisibility);
	void OnPresetSelected(const int32 SelectedPresetId);
	void SetRightStickMode(ERightStickMode rightStickMode);

	class UDBDScrollBox* GetCharacterCustomizationsScrollBox() const;
	ERightStickMode GetRightStickMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCharactersCustomizationsWidget">();
	}
	static class UCoreStoreCharactersCustomizationsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCharactersCustomizationsWidget>();
	}
};
static_assert(alignof(UCoreStoreCharactersCustomizationsWidget) == 0x000008, "Wrong alignment on UCoreStoreCharactersCustomizationsWidget");
static_assert(sizeof(UCoreStoreCharactersCustomizationsWidget) == 0x000450, "Wrong size on UCoreStoreCharactersCustomizationsWidget");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _customizationSelectedDelegate) == 0x000328, "Member 'UCoreStoreCharactersCustomizationsWidget::_customizationSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _customizationSelectedAgainDelegate) == 0x000338, "Member 'UCoreStoreCharactersCustomizationsWidget::_customizationSelectedAgainDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _categorySelectedDelegate) == 0x000348, "Member 'UCoreStoreCharactersCustomizationsWidget::_categorySelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _categorySelectedAgainDelegate) == 0x000358, "Member 'UCoreStoreCharactersCustomizationsWidget::_categorySelectedAgainDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _presetSelectedDelegate) == 0x000368, "Member 'UCoreStoreCharactersCustomizationsWidget::_presetSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _customizationItemWidgetClass) == 0x000378, "Member 'UCoreStoreCharactersCustomizationsWidget::_customizationItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _categoryItemWidgetClass) == 0x000380, "Member 'UCoreStoreCharactersCustomizationsWidget::_categoryItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _presetItemWidgetClass) == 0x000388, "Member 'UCoreStoreCharactersCustomizationsWidget::_presetItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _numberOfColumns) == 0x000390, "Member 'UCoreStoreCharactersCustomizationsWidget::_numberOfColumns' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _customizationItemScale) == 0x000394, "Member 'UCoreStoreCharactersCustomizationsWidget::_customizationItemScale' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _layoutMask) == 0x000398, "Member 'UCoreStoreCharactersCustomizationsWidget::_layoutMask' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _defaultFilterAvailable) == 0x00039C, "Member 'UCoreStoreCharactersCustomizationsWidget::_defaultFilterAvailable' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _defaultFilterOwned) == 0x00039D, "Member 'UCoreStoreCharactersCustomizationsWidget::_defaultFilterOwned' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _sortingOptions) == 0x0003A0, "Member 'UCoreStoreCharactersCustomizationsWidget::_sortingOptions' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _defaultSortingOption) == 0x0003A4, "Member 'UCoreStoreCharactersCustomizationsWidget::_defaultSortingOption' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _defaultSortingOrder) == 0x0003A6, "Member 'UCoreStoreCharactersCustomizationsWidget::_defaultSortingOrder' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, CustomizationsContainer) == 0x0003A8, "Member 'UCoreStoreCharactersCustomizationsWidget::CustomizationsContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, CategoriesContainer) == 0x0003B0, "Member 'UCoreStoreCharactersCustomizationsWidget::CategoriesContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, CharmSlots) == 0x0003B8, "Member 'UCoreStoreCharactersCustomizationsWidget::CharmSlots' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, FiltersWidget) == 0x0003C0, "Member 'UCoreStoreCharactersCustomizationsWidget::FiltersWidget' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, FiltersButton) == 0x0003C8, "Member 'UCoreStoreCharactersCustomizationsWidget::FiltersButton' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, SearchBar) == 0x0003D0, "Member 'UCoreStoreCharactersCustomizationsWidget::SearchBar' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, EmptyContentWidget) == 0x0003D8, "Member 'UCoreStoreCharactersCustomizationsWidget::EmptyContentWidget' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _selectedCustomizationItem) == 0x0003E0, "Member 'UCoreStoreCharactersCustomizationsWidget::_selectedCustomizationItem' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _selectedCategoryItem) == 0x0003E8, "Member 'UCoreStoreCharactersCustomizationsWidget::_selectedCategoryItem' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, PresetsContainer) == 0x0003F0, "Member 'UCoreStoreCharactersCustomizationsWidget::PresetsContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _preConstructedCategoriesCount) == 0x0003F8, "Member 'UCoreStoreCharactersCustomizationsWidget::_preConstructedCategoriesCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _preConstructedCustomizationsCount) == 0x0003FC, "Member 'UCoreStoreCharactersCustomizationsWidget::_preConstructedCustomizationsCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _filtersTooltipText) == 0x000400, "Member 'UCoreStoreCharactersCustomizationsWidget::_filtersTooltipText' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _closeFiltersTooltipText) == 0x000418, "Member 'UCoreStoreCharactersCustomizationsWidget::_closeFiltersTooltipText' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, CharacterCustomizationsScrollBox) == 0x000430, "Member 'UCoreStoreCharactersCustomizationsWidget::CharacterCustomizationsScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _categoryList) == 0x000438, "Member 'UCoreStoreCharactersCustomizationsWidget::_categoryList' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _customizationList) == 0x000440, "Member 'UCoreStoreCharactersCustomizationsWidget::_customizationList' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersCustomizationsWidget, _rightStickMode) == 0x000448, "Member 'UCoreStoreCharactersCustomizationsWidget::_rightStickMode' has a wrong offset!");

// Class DBDUIViewsCore.CoreInboxBodySectionQRCodeWidget
// 0x0008 (0x0328 - 0x0320)
class UCoreInboxBodySectionQRCodeWidget final : public UCoreInboxBodySectionBaseWidget
{
public:
	class UCoreInboxCallToActionWidget*           CallToAction;                                      // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInboxBodySectionQRCodeWidget">();
	}
	static class UCoreInboxBodySectionQRCodeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInboxBodySectionQRCodeWidget>();
	}
};
static_assert(alignof(UCoreInboxBodySectionQRCodeWidget) == 0x000008, "Wrong alignment on UCoreInboxBodySectionQRCodeWidget");
static_assert(sizeof(UCoreInboxBodySectionQRCodeWidget) == 0x000328, "Wrong size on UCoreInboxBodySectionQRCodeWidget");
static_assert(offsetof(UCoreInboxBodySectionQRCodeWidget, CallToAction) == 0x000320, "Member 'UCoreInboxBodySectionQRCodeWidget::CallToAction' has a wrong offset!");

// Class DBDUIViewsCore.CoreInboxBodySectionTextWidget
// 0x0008 (0x0328 - 0x0320)
class UCoreInboxBodySectionTextWidget final : public UCoreInboxBodySectionBaseWidget
{
public:
	class UDBDRichTextBlock*                      TextRTB;                                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInboxBodySectionTextWidget">();
	}
	static class UCoreInboxBodySectionTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInboxBodySectionTextWidget>();
	}
};
static_assert(alignof(UCoreInboxBodySectionTextWidget) == 0x000008, "Wrong alignment on UCoreInboxBodySectionTextWidget");
static_assert(sizeof(UCoreInboxBodySectionTextWidget) == 0x000328, "Wrong size on UCoreInboxBodySectionTextWidget");
static_assert(offsetof(UCoreInboxBodySectionTextWidget, TextRTB) == 0x000320, "Member 'UCoreInboxBodySectionTextWidget::TextRTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreOnboardingMenuWidget
// 0x00A0 (0x03C0 - 0x0320)
class UCoreOnboardingMenuWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreTabContainerWidget*                OnboardingMenuTabs;                                // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreOnboardingMenuTitleWidget*         menuTitle;                                         // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterInputSwitcherWidget*         SettingsInputSwitcher;                             // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterInputSwitcherWidget*         QuitGameInputSwitcher;                             // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               ChangeAccountInputSwitcher;                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              BackActionDelegate;                                // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              SettingsActionDelegate;                            // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              QuitGameActionDelegate;                            // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              ChangeAccountActionDelegate;                       // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(EOnboardingMenuState menuState)> MenuTabSelectedDelegate;          // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(EOnboardingMenuState selectedTabIndex)> MenuTabSelectedAgainDelegate; // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B8[0x8];                                      // 0x03B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnMenuTabSelectedAgain(class UCoreSelectableButtonWidget* selectedButton);
	void SetBackButton(const bool isFTUE);
	void SetTitleText(const bool IsInTutorial);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOnboardingMenuWidget">();
	}
	static class UCoreOnboardingMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOnboardingMenuWidget>();
	}
};
static_assert(alignof(UCoreOnboardingMenuWidget) == 0x000008, "Wrong alignment on UCoreOnboardingMenuWidget");
static_assert(sizeof(UCoreOnboardingMenuWidget) == 0x0003C0, "Wrong size on UCoreOnboardingMenuWidget");
static_assert(offsetof(UCoreOnboardingMenuWidget, OnboardingMenuTabs) == 0x000328, "Member 'UCoreOnboardingMenuWidget::OnboardingMenuTabs' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, menuTitle) == 0x000330, "Member 'UCoreOnboardingMenuWidget::menuTitle' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, BackInputSwitcher) == 0x000338, "Member 'UCoreOnboardingMenuWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, SettingsInputSwitcher) == 0x000340, "Member 'UCoreOnboardingMenuWidget::SettingsInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, QuitGameInputSwitcher) == 0x000348, "Member 'UCoreOnboardingMenuWidget::QuitGameInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, ChangeAccountInputSwitcher) == 0x000350, "Member 'UCoreOnboardingMenuWidget::ChangeAccountInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, BackActionDelegate) == 0x000358, "Member 'UCoreOnboardingMenuWidget::BackActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, SettingsActionDelegate) == 0x000368, "Member 'UCoreOnboardingMenuWidget::SettingsActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, QuitGameActionDelegate) == 0x000378, "Member 'UCoreOnboardingMenuWidget::QuitGameActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, ChangeAccountActionDelegate) == 0x000388, "Member 'UCoreOnboardingMenuWidget::ChangeAccountActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, MenuTabSelectedDelegate) == 0x000398, "Member 'UCoreOnboardingMenuWidget::MenuTabSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, MenuTabSelectedAgainDelegate) == 0x0003A8, "Member 'UCoreOnboardingMenuWidget::MenuTabSelectedAgainDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreInboxBodySectionWrapperWidget
// 0x0060 (0x0380 - 0x0320)
class UCoreInboxBodySectionWrapperWidget final : public UCoreBaseUserWidget
{
public:
	TMap<ENewsAndMessagesSectionType, TSubclassOf<class UCoreInboxBodySectionBaseWidget>> SectionClasses; // 0x0320(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UPanelWidget*                           SectionWidgetContainer;                            // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInboxBodySectionBaseWidget*        _currentSectionWidget;                             // 0x0378(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CreateSectionOfType(const ENewsAndMessagesSectionType Type);
	void DestroyCurrentSection();
	bool SetData(class UInboxBodySectionViewData* ViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInboxBodySectionWrapperWidget">();
	}
	static class UCoreInboxBodySectionWrapperWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInboxBodySectionWrapperWidget>();
	}
};
static_assert(alignof(UCoreInboxBodySectionWrapperWidget) == 0x000008, "Wrong alignment on UCoreInboxBodySectionWrapperWidget");
static_assert(sizeof(UCoreInboxBodySectionWrapperWidget) == 0x000380, "Wrong size on UCoreInboxBodySectionWrapperWidget");
static_assert(offsetof(UCoreInboxBodySectionWrapperWidget, SectionClasses) == 0x000320, "Member 'UCoreInboxBodySectionWrapperWidget::SectionClasses' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodySectionWrapperWidget, SectionWidgetContainer) == 0x000370, "Member 'UCoreInboxBodySectionWrapperWidget::SectionWidgetContainer' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodySectionWrapperWidget, _currentSectionWidget) == 0x000378, "Member 'UCoreInboxBodySectionWrapperWidget::_currentSectionWidget' has a wrong offset!");

// Class DBDUIViewsCore.CoreInboxBodyWidget
// 0x0088 (0x03A8 - 0x0320)
class UCoreInboxBodyWidget final : public UCoreBaseUserWidget
{
public:
	int32                                         _preConstructedItemsCount;                         // 0x0320(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreInboxBodySectionWrapperWidget> _sectionWidgetClass;                       // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _sectionMargin;                                    // 0x0330(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UVerticalBox*                           ContentContainer;                                  // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          SectionsScrollBox;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           SectionsContainer;                                 // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               EmptyBodyContainer;                                // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               ErrorMessageContainer;                             // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInfoMessageWidget*                 InfoMessageWidget;                                 // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      TitleRTB;                                          // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      ExpirationRTB;                                     // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                LoadingContainer;                                  // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LoadingTB;                                         // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _sectionList;                                      // 0x0390(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_398[0x10];                                     // 0x0398(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetData(const class UInboxItemViewData* ViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInboxBodyWidget">();
	}
	static class UCoreInboxBodyWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInboxBodyWidget>();
	}
};
static_assert(alignof(UCoreInboxBodyWidget) == 0x000008, "Wrong alignment on UCoreInboxBodyWidget");
static_assert(sizeof(UCoreInboxBodyWidget) == 0x0003A8, "Wrong size on UCoreInboxBodyWidget");
static_assert(offsetof(UCoreInboxBodyWidget, _preConstructedItemsCount) == 0x000320, "Member 'UCoreInboxBodyWidget::_preConstructedItemsCount' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodyWidget, _sectionWidgetClass) == 0x000328, "Member 'UCoreInboxBodyWidget::_sectionWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodyWidget, _sectionMargin) == 0x000330, "Member 'UCoreInboxBodyWidget::_sectionMargin' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodyWidget, ContentContainer) == 0x000340, "Member 'UCoreInboxBodyWidget::ContentContainer' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodyWidget, SectionsScrollBox) == 0x000348, "Member 'UCoreInboxBodyWidget::SectionsScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodyWidget, SectionsContainer) == 0x000350, "Member 'UCoreInboxBodyWidget::SectionsContainer' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodyWidget, EmptyBodyContainer) == 0x000358, "Member 'UCoreInboxBodyWidget::EmptyBodyContainer' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodyWidget, ErrorMessageContainer) == 0x000360, "Member 'UCoreInboxBodyWidget::ErrorMessageContainer' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodyWidget, InfoMessageWidget) == 0x000368, "Member 'UCoreInboxBodyWidget::InfoMessageWidget' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodyWidget, TitleRTB) == 0x000370, "Member 'UCoreInboxBodyWidget::TitleRTB' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodyWidget, ExpirationRTB) == 0x000378, "Member 'UCoreInboxBodyWidget::ExpirationRTB' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodyWidget, LoadingContainer) == 0x000380, "Member 'UCoreInboxBodyWidget::LoadingContainer' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodyWidget, LoadingTB) == 0x000388, "Member 'UCoreInboxBodyWidget::LoadingTB' has a wrong offset!");
static_assert(offsetof(UCoreInboxBodyWidget, _sectionList) == 0x000390, "Member 'UCoreInboxBodyWidget::_sectionList' has a wrong offset!");

// Class DBDUIViewsCore.CoreMenuSkillWidget
// 0x0000 (0x05B0 - 0x05B0)
class UCoreMenuSkillWidget final : public UCoreMenuLoadoutPartWidget
{
public:
	void SetMenuSkillLocked(bool IsLocked);
	void SetMenuSkillUnlockable(bool IsUnlockable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMenuSkillWidget">();
	}
	static class UCoreMenuSkillWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMenuSkillWidget>();
	}
};
static_assert(alignof(UCoreMenuSkillWidget) == 0x000008, "Wrong alignment on UCoreMenuSkillWidget");
static_assert(sizeof(UCoreMenuSkillWidget) == 0x0005B0, "Wrong size on UCoreMenuSkillWidget");

// Class DBDUIViewsCore.CoreInboxCallToActionWidget
// 0x0038 (0x0358 - 0x0320)
class UCoreInboxCallToActionWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               QRCodeOverlay;                                     // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              QRCodeIMG;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               TextOverlay;                                       // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      TextRTB;                                           // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RedirectInputSwitcher;                             // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnRedirectClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInboxCallToActionWidget">();
	}
	static class UCoreInboxCallToActionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInboxCallToActionWidget>();
	}
};
static_assert(alignof(UCoreInboxCallToActionWidget) == 0x000008, "Wrong alignment on UCoreInboxCallToActionWidget");
static_assert(sizeof(UCoreInboxCallToActionWidget) == 0x000358, "Wrong size on UCoreInboxCallToActionWidget");
static_assert(offsetof(UCoreInboxCallToActionWidget, QRCodeOverlay) == 0x000330, "Member 'UCoreInboxCallToActionWidget::QRCodeOverlay' has a wrong offset!");
static_assert(offsetof(UCoreInboxCallToActionWidget, QRCodeIMG) == 0x000338, "Member 'UCoreInboxCallToActionWidget::QRCodeIMG' has a wrong offset!");
static_assert(offsetof(UCoreInboxCallToActionWidget, TextOverlay) == 0x000340, "Member 'UCoreInboxCallToActionWidget::TextOverlay' has a wrong offset!");
static_assert(offsetof(UCoreInboxCallToActionWidget, TextRTB) == 0x000348, "Member 'UCoreInboxCallToActionWidget::TextRTB' has a wrong offset!");
static_assert(offsetof(UCoreInboxCallToActionWidget, RedirectInputSwitcher) == 0x000350, "Member 'UCoreInboxCallToActionWidget::RedirectInputSwitcher' has a wrong offset!");

// Class DBDUIViewsCore.CoreInboxHeaderWidget
// 0x0020 (0x0340 - 0x0320)
class UCoreInboxHeaderWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDTextBlock*                          TitleTB;                                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SubtitleTB;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              IconIMG;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              BackgroundIMG;                                     // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetBackgroundMaterial(const TSoftObjectPtr<class UMaterialInterface> backgroundMaterial) const;
	void SetIconTexture(const TSoftObjectPtr<class UTexture2D> iconTexture, const bool matchSize) const;
	void SetTexts(const class FText& TitleText, const class FText& SubtitleText) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInboxHeaderWidget">();
	}
	static class UCoreInboxHeaderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInboxHeaderWidget>();
	}
};
static_assert(alignof(UCoreInboxHeaderWidget) == 0x000008, "Wrong alignment on UCoreInboxHeaderWidget");
static_assert(sizeof(UCoreInboxHeaderWidget) == 0x000340, "Wrong size on UCoreInboxHeaderWidget");
static_assert(offsetof(UCoreInboxHeaderWidget, TitleTB) == 0x000320, "Member 'UCoreInboxHeaderWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreInboxHeaderWidget, SubtitleTB) == 0x000328, "Member 'UCoreInboxHeaderWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UCoreInboxHeaderWidget, IconIMG) == 0x000330, "Member 'UCoreInboxHeaderWidget::IconIMG' has a wrong offset!");
static_assert(offsetof(UCoreInboxHeaderWidget, BackgroundIMG) == 0x000338, "Member 'UCoreInboxHeaderWidget::BackgroundIMG' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreCharacterPerksToastWidget
// 0x0048 (0x0368 - 0x0320)
class UCoreStoreCharacterPerksToastWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDTextBlock*                          Title;                                             // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreCharacterPerksWidget*              CharacterPerks;                                    // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UWidget*>                        _ignoreClickWidgets;                               // 0x0330(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          _isShowing;                                        // 0x0340(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const ESlateVisibility newVisibility)> _onWidgetVisibilityChanged; // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_358[0x10];                                     // 0x0358(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerClick(const struct FPointerEvent& PointerEvent);
	void OnWidgetVisibilityChanged(ESlateVisibility newVisibility);
	void SetData(const TArray<class UMenuPerkViewData*>& CharacterUniquePerksViewData, const EPlayerRole Role, class UMenuPowerViewData* KillerPowerViewData);
	void ToggleWidgetVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCharacterPerksToastWidget">();
	}
	static class UCoreStoreCharacterPerksToastWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCharacterPerksToastWidget>();
	}
};
static_assert(alignof(UCoreStoreCharacterPerksToastWidget) == 0x000008, "Wrong alignment on UCoreStoreCharacterPerksToastWidget");
static_assert(sizeof(UCoreStoreCharacterPerksToastWidget) == 0x000368, "Wrong size on UCoreStoreCharacterPerksToastWidget");
static_assert(offsetof(UCoreStoreCharacterPerksToastWidget, Title) == 0x000320, "Member 'UCoreStoreCharacterPerksToastWidget::Title' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharacterPerksToastWidget, CharacterPerks) == 0x000328, "Member 'UCoreStoreCharacterPerksToastWidget::CharacterPerks' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharacterPerksToastWidget, _ignoreClickWidgets) == 0x000330, "Member 'UCoreStoreCharacterPerksToastWidget::_ignoreClickWidgets' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharacterPerksToastWidget, _isShowing) == 0x000340, "Member 'UCoreStoreCharacterPerksToastWidget::_isShowing' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharacterPerksToastWidget, _onWidgetVisibilityChanged) == 0x000348, "Member 'UCoreStoreCharacterPerksToastWidget::_onWidgetVisibilityChanged' has a wrong offset!");

// Class DBDUIViewsCore.CoreInboxItemWidget
// 0x00A0 (0x0578 - 0x04D8)
class UCoreInboxItemWidget final : public UCoreSelectableButtonWidget
{
public:
	TMulticastInlineDelegate<void(const class FName& ID)> OnInboxItemClicked;                        // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TitleTB;                                           // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SubtitleTB;                                        // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              IconIMG;                                           // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               StickyDecoration;                                  // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            NotificationIcon;                                  // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ENewsAndMessagesIconType, TSoftObjectPtr<class UTexture2D>> _iconTextures;                  // 0x0518(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_568[0x10];                                     // 0x0568(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnItemClicked(class UCoreButtonWidget* Widget);
	void SetData(const class UInboxItemViewData* ViewData);
	void SetNotificationIcon(const bool IsNew);
	void SetSkin(const struct FInboxSkinUIData& skinUIData);
	void SetSticky(const bool IsSticky);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInboxItemWidget">();
	}
	static class UCoreInboxItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInboxItemWidget>();
	}
};
static_assert(alignof(UCoreInboxItemWidget) == 0x000008, "Wrong alignment on UCoreInboxItemWidget");
static_assert(sizeof(UCoreInboxItemWidget) == 0x000578, "Wrong size on UCoreInboxItemWidget");
static_assert(offsetof(UCoreInboxItemWidget, OnInboxItemClicked) == 0x0004D8, "Member 'UCoreInboxItemWidget::OnInboxItemClicked' has a wrong offset!");
static_assert(offsetof(UCoreInboxItemWidget, OnHoverBorder) == 0x0004E8, "Member 'UCoreInboxItemWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreInboxItemWidget, TitleTB) == 0x0004F0, "Member 'UCoreInboxItemWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreInboxItemWidget, SubtitleTB) == 0x0004F8, "Member 'UCoreInboxItemWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UCoreInboxItemWidget, IconIMG) == 0x000500, "Member 'UCoreInboxItemWidget::IconIMG' has a wrong offset!");
static_assert(offsetof(UCoreInboxItemWidget, StickyDecoration) == 0x000508, "Member 'UCoreInboxItemWidget::StickyDecoration' has a wrong offset!");
static_assert(offsetof(UCoreInboxItemWidget, NotificationIcon) == 0x000510, "Member 'UCoreInboxItemWidget::NotificationIcon' has a wrong offset!");
static_assert(offsetof(UCoreInboxItemWidget, _iconTextures) == 0x000518, "Member 'UCoreInboxItemWidget::_iconTextures' has a wrong offset!");

// Class DBDUIViewsCore.CoreInboxKeyArtWidget
// 0x0010 (0x0330 - 0x0320)
class UCoreInboxKeyArtWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDImage*                              KeyArtIMG;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextureLoadingWrapper*                 _imageLoader;                                      // 0x0328(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnTextureLoaded(const bool Success, class UTexture2D* LoadedTexture) const;
	void OnTextureLoadedDelayed(const bool Success, class UTexture2D* LoadedTexture) const;
	void SetData(struct FSoftRemoteContentCacheObjectPtr* remotePtr) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInboxKeyArtWidget">();
	}
	static class UCoreInboxKeyArtWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInboxKeyArtWidget>();
	}
};
static_assert(alignof(UCoreInboxKeyArtWidget) == 0x000008, "Wrong alignment on UCoreInboxKeyArtWidget");
static_assert(sizeof(UCoreInboxKeyArtWidget) == 0x000330, "Wrong size on UCoreInboxKeyArtWidget");
static_assert(offsetof(UCoreInboxKeyArtWidget, KeyArtIMG) == 0x000320, "Member 'UCoreInboxKeyArtWidget::KeyArtIMG' has a wrong offset!");
static_assert(offsetof(UCoreInboxKeyArtWidget, _imageLoader) == 0x000328, "Member 'UCoreInboxKeyArtWidget::_imageLoader' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreCollectionsListWidget
// 0x0080 (0x03A0 - 0x0320)
class UCoreStoreCollectionsListWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          TitleTB;                                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInfoMessageWidget*                 EmptyContentWidget;                                // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSearchBarWidget*                   SearchBar;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUniformGridPanel*                      FeaturedUniformGrid;                               // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUniformGridPanel*                      AllUniformGrid;                                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           FeaturedContainer;                                 // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          CollectionsListScrollBox;                          // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreStoreCollectionsItemWidget> _collectionItemClass;                         // 0x0360(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _featuredItemsColumnCount;                         // 0x0368(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _allItemsColumnCount;                              // 0x036C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedFeaturedItemsCount;                 // 0x0370(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedAllItemsCount;                      // 0x0374(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _featuredListHiddenThreshold;                      // 0x0378(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCorePreConstructableList*              _featuredItemsList;                                // 0x0380(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCorePreConstructableList*              _allItemsList;                                     // 0x0388(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_390[0x10];                                     // 0x0390(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCollectionItemClicked(class UCoreButtonWidget* Target);
	void UpdateTitleFromScroll(float CurrentOffset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCollectionsListWidget">();
	}
	static class UCoreStoreCollectionsListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCollectionsListWidget>();
	}
};
static_assert(alignof(UCoreStoreCollectionsListWidget) == 0x000008, "Wrong alignment on UCoreStoreCollectionsListWidget");
static_assert(sizeof(UCoreStoreCollectionsListWidget) == 0x0003A0, "Wrong size on UCoreStoreCollectionsListWidget");
static_assert(offsetof(UCoreStoreCollectionsListWidget, TitleTB) == 0x000328, "Member 'UCoreStoreCollectionsListWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsListWidget, EmptyContentWidget) == 0x000330, "Member 'UCoreStoreCollectionsListWidget::EmptyContentWidget' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsListWidget, SearchBar) == 0x000338, "Member 'UCoreStoreCollectionsListWidget::SearchBar' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsListWidget, FeaturedUniformGrid) == 0x000340, "Member 'UCoreStoreCollectionsListWidget::FeaturedUniformGrid' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsListWidget, AllUniformGrid) == 0x000348, "Member 'UCoreStoreCollectionsListWidget::AllUniformGrid' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsListWidget, FeaturedContainer) == 0x000350, "Member 'UCoreStoreCollectionsListWidget::FeaturedContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsListWidget, CollectionsListScrollBox) == 0x000358, "Member 'UCoreStoreCollectionsListWidget::CollectionsListScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsListWidget, _collectionItemClass) == 0x000360, "Member 'UCoreStoreCollectionsListWidget::_collectionItemClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsListWidget, _featuredItemsColumnCount) == 0x000368, "Member 'UCoreStoreCollectionsListWidget::_featuredItemsColumnCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsListWidget, _allItemsColumnCount) == 0x00036C, "Member 'UCoreStoreCollectionsListWidget::_allItemsColumnCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsListWidget, _preConstructedFeaturedItemsCount) == 0x000370, "Member 'UCoreStoreCollectionsListWidget::_preConstructedFeaturedItemsCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsListWidget, _preConstructedAllItemsCount) == 0x000374, "Member 'UCoreStoreCollectionsListWidget::_preConstructedAllItemsCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsListWidget, _featuredListHiddenThreshold) == 0x000378, "Member 'UCoreStoreCollectionsListWidget::_featuredListHiddenThreshold' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsListWidget, _featuredItemsList) == 0x000380, "Member 'UCoreStoreCollectionsListWidget::_featuredItemsList' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsListWidget, _allItemsList) == 0x000388, "Member 'UCoreStoreCollectionsListWidget::_allItemsList' has a wrong offset!");

// Class DBDUIViewsCore.CoreInboxListWidget
// 0x0050 (0x0370 - 0x0320)
class UCoreInboxListWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _preConstructedItemsCount;                         // 0x0330(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreInboxItemWidget>       _itemWidgetClass;                                  // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _itemMargin;                                       // 0x0340(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          ItemsScrollBox;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           ItemsContainer;                                    // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _itemList;                                         // 0x0360(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreInboxItemWidget*                   _selectedItemWidget;                               // 0x0368(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnItemClicked(const class FName& ItemId);
	void SetData(const TArray<class UInboxItemViewData*>& Data);
	void SetSelectedItem(const class UInboxItemViewData* SelectedItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInboxListWidget">();
	}
	static class UCoreInboxListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInboxListWidget>();
	}
};
static_assert(alignof(UCoreInboxListWidget) == 0x000008, "Wrong alignment on UCoreInboxListWidget");
static_assert(sizeof(UCoreInboxListWidget) == 0x000370, "Wrong size on UCoreInboxListWidget");
static_assert(offsetof(UCoreInboxListWidget, _preConstructedItemsCount) == 0x000330, "Member 'UCoreInboxListWidget::_preConstructedItemsCount' has a wrong offset!");
static_assert(offsetof(UCoreInboxListWidget, _itemWidgetClass) == 0x000338, "Member 'UCoreInboxListWidget::_itemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreInboxListWidget, _itemMargin) == 0x000340, "Member 'UCoreInboxListWidget::_itemMargin' has a wrong offset!");
static_assert(offsetof(UCoreInboxListWidget, ItemsScrollBox) == 0x000350, "Member 'UCoreInboxListWidget::ItemsScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreInboxListWidget, ItemsContainer) == 0x000358, "Member 'UCoreInboxListWidget::ItemsContainer' has a wrong offset!");
static_assert(offsetof(UCoreInboxListWidget, _itemList) == 0x000360, "Member 'UCoreInboxListWidget::_itemList' has a wrong offset!");
static_assert(offsetof(UCoreInboxListWidget, _selectedItemWidget) == 0x000368, "Member 'UCoreInboxListWidget::_selectedItemWidget' has a wrong offset!");

// Class DBDUIViewsCore.CoreInboxWidget
// 0x0128 (0x0448 - 0x0320)
class UCoreInboxWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      ScrollInputPrompt;                                 // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreTabContainerWidget*                TabsContainer;                                     // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        TabContentSwitcher;                                // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInboxListWidget*                   NewsList;                                          // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInboxListWidget*                   MessagesList;                                      // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInboxHeaderWidget*                 Header;                                            // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               NewsGeneralButton;                                 // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               MessagesGeneralButton;                             // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInboxBodyWidget*                   Body;                                              // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInboxKeyArtWidget*                 KeyArt;                                            // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               ClaimInputSwitcher;                                // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               InternalLinkInputSwitcher;                         // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               ExternalLinkInputSwitcher;                         // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInfoMessageWidget*                 InfoMessageWidget;                                 // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                LoadingContainer;                                  // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LoadingTB;                                         // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioEventWrapper*                     _openSfx;                                          // 0x03B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioEventWrapper*                     _closeSfx;                                         // 0x03B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C0[0x88];                                     // 0x03C0(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackButtonClicked();
	void OnClaimClicked();
	void OnItemClicked(const class FName& ItemId);
	void OnMessagesGeneralButtonClicked();
	void OnNewsGeneralButtonClicked();
	void OnRedirectClicked();
	void OnTabSelected(class UCoreSelectableButtonWidget* selectedButton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInboxWidget">();
	}
	static class UCoreInboxWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInboxWidget>();
	}
};
static_assert(alignof(UCoreInboxWidget) == 0x000008, "Wrong alignment on UCoreInboxWidget");
static_assert(sizeof(UCoreInboxWidget) == 0x000448, "Wrong size on UCoreInboxWidget");
static_assert(offsetof(UCoreInboxWidget, BackInputSwitcher) == 0x000328, "Member 'UCoreInboxWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, ScrollInputPrompt) == 0x000330, "Member 'UCoreInboxWidget::ScrollInputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, TabsContainer) == 0x000338, "Member 'UCoreInboxWidget::TabsContainer' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, TabContentSwitcher) == 0x000340, "Member 'UCoreInboxWidget::TabContentSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, NewsList) == 0x000348, "Member 'UCoreInboxWidget::NewsList' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, MessagesList) == 0x000350, "Member 'UCoreInboxWidget::MessagesList' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, Header) == 0x000358, "Member 'UCoreInboxWidget::Header' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, NewsGeneralButton) == 0x000360, "Member 'UCoreInboxWidget::NewsGeneralButton' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, MessagesGeneralButton) == 0x000368, "Member 'UCoreInboxWidget::MessagesGeneralButton' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, Body) == 0x000370, "Member 'UCoreInboxWidget::Body' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, KeyArt) == 0x000378, "Member 'UCoreInboxWidget::KeyArt' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, ClaimInputSwitcher) == 0x000380, "Member 'UCoreInboxWidget::ClaimInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, InternalLinkInputSwitcher) == 0x000388, "Member 'UCoreInboxWidget::InternalLinkInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, ExternalLinkInputSwitcher) == 0x000390, "Member 'UCoreInboxWidget::ExternalLinkInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, InfoMessageWidget) == 0x000398, "Member 'UCoreInboxWidget::InfoMessageWidget' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, LoadingContainer) == 0x0003A0, "Member 'UCoreInboxWidget::LoadingContainer' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, LoadingTB) == 0x0003A8, "Member 'UCoreInboxWidget::LoadingTB' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, _openSfx) == 0x0003B0, "Member 'UCoreInboxWidget::_openSfx' has a wrong offset!");
static_assert(offsetof(UCoreInboxWidget, _closeSfx) == 0x0003B8, "Member 'UCoreInboxWidget::_closeSfx' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreCharactersSelectionWidget
// 0x00E0 (0x0400 - 0x0320)
class UCoreStoreCharactersSelectionWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const int32 characterIndex)> _characterSelectedDelegate;           // 0x0328(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreStoreCharacterItemWidget> _itemWidgetClass;                               // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _numberOfColumns;                                  // 0x0340(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _itemScale;                                        // 0x0344(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _layoutMask;                                       // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedItemsCount;                         // 0x034C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _defaultFilterAvailable;                           // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _defaultFilterOwned;                               // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_352[0x2];                                      // 0x0352(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _sortingOptions;                                   // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESortingOption                                _defaultSortingOption;                             // 0x0358(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESortingOrder                                 _defaultSortingOrder;                              // 0x035A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35B[0x5];                                      // 0x035B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUniformGridPanel*                      container;                                         // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCharactersFilterWidget*       FiltersWidget;                                     // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreIconToggleWidget*                  FiltersButton;                                     // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSearchBarWidget*                   SearchBar;                                         // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreIconToggleWidget*                  PerksToastButton;                                  // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCharacterPerksToastWidget*    PerksToast;                                        // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInfoMessageWidget*                 EmptyContentWidget;                                // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCharacterItemWidget*          _selectedItem;                                     // 0x0398(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _filtersTooltipText;                               // 0x03A0(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   _closeFiltersTooltipText;                          // 0x03B8(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   _perksTooltipText;                                 // 0x03D0(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          CharacterSelectionScrollBox;                       // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCorePreConstructableList*              _characterList;                                    // 0x03F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ERightStickMode                               _rightStickMode;                                   // 0x03F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCharacterSelected(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected);
	void OnClearFiltersClicked();
	void OnFiltersButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnFiltersChanged(const struct FStoreCharactersFiltersData& storeFiltersData);
	void OnFiltersWidgetVisibilityChanged(const ESlateVisibility newVisibility);
	void OnPerkToastButtonClick(class UCoreButtonWidget* buttonTarget);
	void OnPerkWidgetVisibilityChanged(ESlateVisibility newVisibility);
	void SetRightStickMode(ERightStickMode rightStickMode);

	class UDBDScrollBox* GetCharacterSelectionScrollBox() const;
	ERightStickMode GetRightStickMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCharactersSelectionWidget">();
	}
	static class UCoreStoreCharactersSelectionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCharactersSelectionWidget>();
	}
};
static_assert(alignof(UCoreStoreCharactersSelectionWidget) == 0x000008, "Wrong alignment on UCoreStoreCharactersSelectionWidget");
static_assert(sizeof(UCoreStoreCharactersSelectionWidget) == 0x000400, "Wrong size on UCoreStoreCharactersSelectionWidget");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _characterSelectedDelegate) == 0x000328, "Member 'UCoreStoreCharactersSelectionWidget::_characterSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _itemWidgetClass) == 0x000338, "Member 'UCoreStoreCharactersSelectionWidget::_itemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _numberOfColumns) == 0x000340, "Member 'UCoreStoreCharactersSelectionWidget::_numberOfColumns' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _itemScale) == 0x000344, "Member 'UCoreStoreCharactersSelectionWidget::_itemScale' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _layoutMask) == 0x000348, "Member 'UCoreStoreCharactersSelectionWidget::_layoutMask' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _preConstructedItemsCount) == 0x00034C, "Member 'UCoreStoreCharactersSelectionWidget::_preConstructedItemsCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _defaultFilterAvailable) == 0x000350, "Member 'UCoreStoreCharactersSelectionWidget::_defaultFilterAvailable' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _defaultFilterOwned) == 0x000351, "Member 'UCoreStoreCharactersSelectionWidget::_defaultFilterOwned' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _sortingOptions) == 0x000354, "Member 'UCoreStoreCharactersSelectionWidget::_sortingOptions' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _defaultSortingOption) == 0x000358, "Member 'UCoreStoreCharactersSelectionWidget::_defaultSortingOption' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _defaultSortingOrder) == 0x00035A, "Member 'UCoreStoreCharactersSelectionWidget::_defaultSortingOrder' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, container) == 0x000360, "Member 'UCoreStoreCharactersSelectionWidget::container' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, FiltersWidget) == 0x000368, "Member 'UCoreStoreCharactersSelectionWidget::FiltersWidget' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, FiltersButton) == 0x000370, "Member 'UCoreStoreCharactersSelectionWidget::FiltersButton' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, SearchBar) == 0x000378, "Member 'UCoreStoreCharactersSelectionWidget::SearchBar' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, PerksToastButton) == 0x000380, "Member 'UCoreStoreCharactersSelectionWidget::PerksToastButton' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, PerksToast) == 0x000388, "Member 'UCoreStoreCharactersSelectionWidget::PerksToast' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, EmptyContentWidget) == 0x000390, "Member 'UCoreStoreCharactersSelectionWidget::EmptyContentWidget' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _selectedItem) == 0x000398, "Member 'UCoreStoreCharactersSelectionWidget::_selectedItem' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _filtersTooltipText) == 0x0003A0, "Member 'UCoreStoreCharactersSelectionWidget::_filtersTooltipText' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _closeFiltersTooltipText) == 0x0003B8, "Member 'UCoreStoreCharactersSelectionWidget::_closeFiltersTooltipText' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _perksTooltipText) == 0x0003D0, "Member 'UCoreStoreCharactersSelectionWidget::_perksTooltipText' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, CharacterSelectionScrollBox) == 0x0003E8, "Member 'UCoreStoreCharactersSelectionWidget::CharacterSelectionScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _characterList) == 0x0003F0, "Member 'UCoreStoreCharactersSelectionWidget::_characterList' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersSelectionWidget, _rightStickMode) == 0x0003F8, "Member 'UCoreStoreCharactersSelectionWidget::_rightStickMode' has a wrong offset!");

// Class DBDUIViewsCore.CoreInfoMessageWidget
// 0x0010 (0x0330 - 0x0320)
class UCoreInfoMessageWidget : public UCoreBaseUserWidget
{
public:
	class UDBDRichTextBlock*                      TitleRTB;                                          // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      MessageRTB;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInfoMessageWidget">();
	}
	static class UCoreInfoMessageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInfoMessageWidget>();
	}
};
static_assert(alignof(UCoreInfoMessageWidget) == 0x000008, "Wrong alignment on UCoreInfoMessageWidget");
static_assert(sizeof(UCoreInfoMessageWidget) == 0x000330, "Wrong size on UCoreInfoMessageWidget");
static_assert(offsetof(UCoreInfoMessageWidget, TitleRTB) == 0x000320, "Member 'UCoreInfoMessageWidget::TitleRTB' has a wrong offset!");
static_assert(offsetof(UCoreInfoMessageWidget, MessageRTB) == 0x000328, "Member 'UCoreInfoMessageWidget::MessageRTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreInputPromptWidget
// 0x0058 (0x0378 - 0x0320)
class UCoreInputPromptWidget : public UCoreBaseUserWidget
{
public:
	class FText                                   _unfoundInputKeyText;                              // 0x0320(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   _betaFeatureText;                                  // 0x0338(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FKey                                   _inputKey;                                         // 0x0350(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isEnabled;                                        // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayPrompt();
	struct FKey GetInputKey();
	bool IsEnabled();
	void OnEnabledChanged(bool IsEnabled);
	void PromptNotFound();
	void SetBetaFeatureOverlayVisible(bool IsVisible_0);
	void SetEnabled(bool IsEnabled);
	void SetInputKey(const struct FKey& InputKey);

	class FText GetInputShortDisplayName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInputPromptWidget">();
	}
	static class UCoreInputPromptWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInputPromptWidget>();
	}
};
static_assert(alignof(UCoreInputPromptWidget) == 0x000008, "Wrong alignment on UCoreInputPromptWidget");
static_assert(sizeof(UCoreInputPromptWidget) == 0x000378, "Wrong size on UCoreInputPromptWidget");
static_assert(offsetof(UCoreInputPromptWidget, _unfoundInputKeyText) == 0x000320, "Member 'UCoreInputPromptWidget::_unfoundInputKeyText' has a wrong offset!");
static_assert(offsetof(UCoreInputPromptWidget, _betaFeatureText) == 0x000338, "Member 'UCoreInputPromptWidget::_betaFeatureText' has a wrong offset!");
static_assert(offsetof(UCoreInputPromptWidget, _inputKey) == 0x000350, "Member 'UCoreInputPromptWidget::_inputKey' has a wrong offset!");
static_assert(offsetof(UCoreInputPromptWidget, _isEnabled) == 0x000370, "Member 'UCoreInputPromptWidget::_isEnabled' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreItemWidget
// 0x0088 (0x0560 - 0x04D8)
class UCoreStoreItemWidget : public UCoreSelectableButtonWidget
{
public:
	int32                                         _layoutMask;                                       // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _priceTagPadding;                                  // 0x04DC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                _timerFlagPadding;                                 // 0x04EC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCorePriceTagWidget>        _priceTagWidgetClass;                              // 0x0500(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreTimerFlagWidget>       _timerFlagWidgetClass;                             // 0x0508(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedPriceTagCount;                      // 0x0510(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedTimerFlagCount;                     // 0x0514(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _showTooltipOnHover;                               // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETooltipHorizontalAlignment                   _tooltipHorizontalAlignment;                       // 0x0519(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETooltipVerticalAlignment                     _tooltipVerticalAlignment;                         // 0x051A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_51B[0x5];                                      // 0x051B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UScaleBox*                              LayoutScale;                                       // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                SelectedOverlay;                                   // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           TimerFlagVerticalBox;                              // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             PriceTagsContainer;                                // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _priceTagsList;                                    // 0x0548(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _timerFlagsList;                                   // 0x0550(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFlagSize                                     _flagSize;                                         // 0x0558(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_559[0x7];                                      // 0x0559(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindHoverBorder(const bool IsInteractable_0);
	void ClearPriceTagWidgets();
	void ClearTimerFlagWidgets();
	class UCorePriceTagWidget* CreatePriceTagWidget();
	class UCoreTimerFlagWidget* CreateTimerFlagWidget();
	void OnButtonHovered(class UCoreButtonWidget* targetButton);
	void OnButtonSelectedChanged(class UCoreSelectableButtonWidget* targetButton, bool IsSelected_0);
	void OnButtonUnhovered(class UCoreButtonWidget* targetButton);
	void SetNotificationTag(const bool IsNew);
	void SetPriceTagScale(const float priceTagScale);
	void SetScale(float Scale);
	void SetShowTooltipOnHover(const bool showTooltipOnHover);
	void SetStoreItemData(class UStoreItemViewData* Data);
	void SetStoreItemLayout(int32 layoutMask);
	void SetTimerFlagSize(EFlagSize FlagSize);

	bool IsTagEnabled(const int32 layoutMask) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreItemWidget">();
	}
	static class UCoreStoreItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreItemWidget>();
	}
};
static_assert(alignof(UCoreStoreItemWidget) == 0x000008, "Wrong alignment on UCoreStoreItemWidget");
static_assert(sizeof(UCoreStoreItemWidget) == 0x000560, "Wrong size on UCoreStoreItemWidget");
static_assert(offsetof(UCoreStoreItemWidget, _layoutMask) == 0x0004D8, "Member 'UCoreStoreItemWidget::_layoutMask' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, _priceTagPadding) == 0x0004DC, "Member 'UCoreStoreItemWidget::_priceTagPadding' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, _timerFlagPadding) == 0x0004EC, "Member 'UCoreStoreItemWidget::_timerFlagPadding' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, _priceTagWidgetClass) == 0x000500, "Member 'UCoreStoreItemWidget::_priceTagWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, _timerFlagWidgetClass) == 0x000508, "Member 'UCoreStoreItemWidget::_timerFlagWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, _preConstructedPriceTagCount) == 0x000510, "Member 'UCoreStoreItemWidget::_preConstructedPriceTagCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, _preConstructedTimerFlagCount) == 0x000514, "Member 'UCoreStoreItemWidget::_preConstructedTimerFlagCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, _showTooltipOnHover) == 0x000518, "Member 'UCoreStoreItemWidget::_showTooltipOnHover' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, _tooltipHorizontalAlignment) == 0x000519, "Member 'UCoreStoreItemWidget::_tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, _tooltipVerticalAlignment) == 0x00051A, "Member 'UCoreStoreItemWidget::_tooltipVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, LayoutScale) == 0x000520, "Member 'UCoreStoreItemWidget::LayoutScale' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, SelectedOverlay) == 0x000528, "Member 'UCoreStoreItemWidget::SelectedOverlay' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, OnHoverBorder) == 0x000530, "Member 'UCoreStoreItemWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, TimerFlagVerticalBox) == 0x000538, "Member 'UCoreStoreItemWidget::TimerFlagVerticalBox' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, PriceTagsContainer) == 0x000540, "Member 'UCoreStoreItemWidget::PriceTagsContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, _priceTagsList) == 0x000548, "Member 'UCoreStoreItemWidget::_priceTagsList' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, _timerFlagsList) == 0x000550, "Member 'UCoreStoreItemWidget::_timerFlagsList' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemWidget, _flagSize) == 0x000558, "Member 'UCoreStoreItemWidget::_flagSize' has a wrong offset!");

// Class DBDUIViewsCore.CoreInteractionProgressWidget
// 0x0030 (0x0380 - 0x0350)
class UCoreInteractionProgressWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCoreStatusEffectIcon*>          Proficiencies;                                     // 0x0360(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _hemorrhageAnimationIsCompleteDelegate;            // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	void SetProficiencies(const TArray<struct FStatusEffectViewData>& proficiencyDatas);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInteractionProgressWidget">();
	}
	static class UCoreInteractionProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInteractionProgressWidget>();
	}
};
static_assert(alignof(UCoreInteractionProgressWidget) == 0x000008, "Wrong alignment on UCoreInteractionProgressWidget");
static_assert(sizeof(UCoreInteractionProgressWidget) == 0x000380, "Wrong size on UCoreInteractionProgressWidget");
static_assert(offsetof(UCoreInteractionProgressWidget, Proficiencies) == 0x000360, "Member 'UCoreInteractionProgressWidget::Proficiencies' has a wrong offset!");
static_assert(offsetof(UCoreInteractionProgressWidget, _hemorrhageAnimationIsCompleteDelegate) == 0x000370, "Member 'UCoreInteractionProgressWidget::_hemorrhageAnimationIsCompleteDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreInteractionPromptActionWidget
// 0x00B8 (0x03D8 - 0x0320)
class UCoreInteractionPromptActionWidget final : public UCoreBaseUserWidget
{
public:
	class UCoreInputPromptWidget*                 InputPrompt;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputPromptWidget*                 InputPrompt2;                                      // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputPromptWidget*                 InputPrompt3;                                      // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputPromptWidget*                 InputPrompt4;                                      // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   IdleAnimationName;                                 // 0x0340(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   InputKey;                                          // 0x0350(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FKey                                   InputKey2;                                         // 0x0370(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FKey                                   InputKey3;                                         // 0x0390(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FKey                                   InputKey4;                                         // 0x03B0(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D0[0x8];                                      // 0x03D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayIdleAnimation();
	void SetInputKey(const struct FKey& InputKey_0);
	void SetInputKey2(const struct FKey& InputKey2_0);
	void SetInputKey3(const struct FKey& InputKey3_0);
	void SetInputKey4(const struct FKey& InputKey4_0);
	void StopIdleAnimation();

	bool HasFourthPrompt() const;
	bool HasSecondPrompt() const;
	bool HasThirdPrompt() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInteractionPromptActionWidget">();
	}
	static class UCoreInteractionPromptActionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInteractionPromptActionWidget>();
	}
};
static_assert(alignof(UCoreInteractionPromptActionWidget) == 0x000008, "Wrong alignment on UCoreInteractionPromptActionWidget");
static_assert(sizeof(UCoreInteractionPromptActionWidget) == 0x0003D8, "Wrong size on UCoreInteractionPromptActionWidget");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputPrompt) == 0x000320, "Member 'UCoreInteractionPromptActionWidget::InputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputPrompt2) == 0x000328, "Member 'UCoreInteractionPromptActionWidget::InputPrompt2' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputPrompt3) == 0x000330, "Member 'UCoreInteractionPromptActionWidget::InputPrompt3' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputPrompt4) == 0x000338, "Member 'UCoreInteractionPromptActionWidget::InputPrompt4' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, IdleAnimationName) == 0x000340, "Member 'UCoreInteractionPromptActionWidget::IdleAnimationName' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputKey) == 0x000350, "Member 'UCoreInteractionPromptActionWidget::InputKey' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputKey2) == 0x000370, "Member 'UCoreInteractionPromptActionWidget::InputKey2' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputKey3) == 0x000390, "Member 'UCoreInteractionPromptActionWidget::InputKey3' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputKey4) == 0x0003B0, "Member 'UCoreInteractionPromptActionWidget::InputKey4' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreCollectionsCustomizationsWidget
// 0x0020 (0x0340 - 0x0320)
class UCoreStoreCollectionsCustomizationsWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          CollectionNameTB;                                  // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CharacterNameTB;                                   // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCharactersCustomizationsWidget* CharactersCustomizations;                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetCollectionVisuals(const class UStoreCollectionViewData* CollectionViewData);

	class UCoreStoreCharactersCustomizationsWidget* GetCharactersCustomizations() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCollectionsCustomizationsWidget">();
	}
	static class UCoreStoreCollectionsCustomizationsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCollectionsCustomizationsWidget>();
	}
};
static_assert(alignof(UCoreStoreCollectionsCustomizationsWidget) == 0x000008, "Wrong alignment on UCoreStoreCollectionsCustomizationsWidget");
static_assert(sizeof(UCoreStoreCollectionsCustomizationsWidget) == 0x000340, "Wrong size on UCoreStoreCollectionsCustomizationsWidget");
static_assert(offsetof(UCoreStoreCollectionsCustomizationsWidget, CollectionNameTB) == 0x000328, "Member 'UCoreStoreCollectionsCustomizationsWidget::CollectionNameTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsCustomizationsWidget, CharacterNameTB) == 0x000330, "Member 'UCoreStoreCollectionsCustomizationsWidget::CharacterNameTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsCustomizationsWidget, CharactersCustomizations) == 0x000338, "Member 'UCoreStoreCollectionsCustomizationsWidget::CharactersCustomizations' has a wrong offset!");

// Class DBDUIViewsCore.CoreInteractionPromptsContainerWidget
// 0x00D0 (0x0420 - 0x0350)
class UCoreInteractionPromptsContainerWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDWrapBox*                            CenterContainerBox;                                // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDWrapBox*                            ContainerBox;                                      // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreInteractionPromptWidget> InteractionPromptWidgetClass;                    // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxDisplayedPrompts;                               // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxDisplayedCenterPrompts;                         // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                SlotMargin;                                        // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FInteractionPromptViewData>     _promptViewDataList;                               // 0x0390(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FInteractionPromptViewData>     _centerPromptViewDataList;                         // 0x03A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UCoreInteractionPromptWidget*>   _promptWidgets;                                    // 0x03B0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreInteractionPromptWidget*>   _centerPromptWidgets;                              // 0x03C0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class FName, class UCoreInteractionPromptWidget*> _displayedPromptsMap;                     // 0x03D0(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInteractionPromptsContainerWidget">();
	}
	static class UCoreInteractionPromptsContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInteractionPromptsContainerWidget>();
	}
};
static_assert(alignof(UCoreInteractionPromptsContainerWidget) == 0x000008, "Wrong alignment on UCoreInteractionPromptsContainerWidget");
static_assert(sizeof(UCoreInteractionPromptsContainerWidget) == 0x000420, "Wrong size on UCoreInteractionPromptsContainerWidget");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, CenterContainerBox) == 0x000360, "Member 'UCoreInteractionPromptsContainerWidget::CenterContainerBox' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, ContainerBox) == 0x000368, "Member 'UCoreInteractionPromptsContainerWidget::ContainerBox' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, InteractionPromptWidgetClass) == 0x000370, "Member 'UCoreInteractionPromptsContainerWidget::InteractionPromptWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, MaxDisplayedPrompts) == 0x000378, "Member 'UCoreInteractionPromptsContainerWidget::MaxDisplayedPrompts' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, MaxDisplayedCenterPrompts) == 0x00037C, "Member 'UCoreInteractionPromptsContainerWidget::MaxDisplayedCenterPrompts' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, SlotMargin) == 0x000380, "Member 'UCoreInteractionPromptsContainerWidget::SlotMargin' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, _promptViewDataList) == 0x000390, "Member 'UCoreInteractionPromptsContainerWidget::_promptViewDataList' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, _centerPromptViewDataList) == 0x0003A0, "Member 'UCoreInteractionPromptsContainerWidget::_centerPromptViewDataList' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, _promptWidgets) == 0x0003B0, "Member 'UCoreInteractionPromptsContainerWidget::_promptWidgets' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, _centerPromptWidgets) == 0x0003C0, "Member 'UCoreInteractionPromptsContainerWidget::_centerPromptWidgets' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, _displayedPromptsMap) == 0x0003D0, "Member 'UCoreInteractionPromptsContainerWidget::_displayedPromptsMap' has a wrong offset!");

// Class DBDUIViewsCore.CoreInteractionPromptWidget
// 0x0028 (0x02D0 - 0x02A8)
class UCoreInteractionPromptWidget final : public UUserWidget
{
public:
	float                                         LargeTextScale;                                    // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScaleBox*                              LargeTextScaleBox;                                 // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ActionTB;                                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          DisabledActionTB;                                  // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearData();
	void OnLargeTextSettingsChanged(bool isLargeTextEnabled);
	void SetData(const struct FInteractionPromptViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInteractionPromptWidget">();
	}
	static class UCoreInteractionPromptWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInteractionPromptWidget>();
	}
};
static_assert(alignof(UCoreInteractionPromptWidget) == 0x000008, "Wrong alignment on UCoreInteractionPromptWidget");
static_assert(sizeof(UCoreInteractionPromptWidget) == 0x0002D0, "Wrong size on UCoreInteractionPromptWidget");
static_assert(offsetof(UCoreInteractionPromptWidget, LargeTextScale) == 0x0002A8, "Member 'UCoreInteractionPromptWidget::LargeTextScale' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptWidget, LargeTextScaleBox) == 0x0002B0, "Member 'UCoreInteractionPromptWidget::LargeTextScaleBox' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptWidget, ActionTB) == 0x0002B8, "Member 'UCoreInteractionPromptWidget::ActionTB' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptWidget, DisabledActionTB) == 0x0002C0, "Member 'UCoreInteractionPromptWidget::DisabledActionTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreFeaturedCustomizationItemWidget
// 0x0298 (0x0770 - 0x04D8)
class UCoreStoreFeaturedCustomizationItemWidget final : public UCoreSelectableButtonWidget
{
public:
	TSubclassOf<class UCorePriceTagWidget>        _priceTagWidgetClass;                              // 0x04D8(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreTimerFlagWidget>       _timerFlagWidgetClass;                             // 0x04E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedPriceTagCount;                      // 0x04E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedTimerFlagCount;                     // 0x04EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _timerFlagPadding;                                 // 0x04F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                _priceTagPadding;                                  // 0x0500(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         _timerFlagScale;                                   // 0x0510(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFlagSize                                     _timerFlagSize;                                    // 0x0514(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_515[0x3];                                      // 0x0515(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBox*                         PriceTagsContainer;                                // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           TimerFlagVerticalBox;                              // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOwnedTagWidget*                    OwnedTag;                                          // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              RarityIMG;                                         // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RarityTB;                                          // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CharacterNameTB;                                   // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TitleTB;                                           // 0x0550(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          OwnedCountTB;                                      // 0x0558(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              BundleIMG;                                         // 0x0560(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Footer;                                            // 0x0568(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           DetailPanel;                                       // 0x0570(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ItemIcon;                                          // 0x0578(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FStoreContentViewData                  _cachedData;                                       // 0x0580(0x01A8)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _priceTagsList;                                    // 0x0728(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCorePreConstructableList*              _timerFlagsList;                                   // 0x0730(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUITweenInstance*                       _sizeTween;                                        // 0x0738(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUITweenInstance*                       _positionTween;                                    // 0x0740(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUITweenInstance*                       _onHoverBorderTween;                               // 0x0748(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextureLoadingWrapper*                 _imageLoader;                                      // 0x0750(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_758[0x18];                                     // 0x0758(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearPriceTagWidgets();
	void ClearTimerFlagWidgets();
	class UCorePriceTagWidget* CreatePriceTagWidget();
	void OnSelectedItemChanged(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected_0);
	void SetChapterPackData(class UStoreChapterPackViewData* chapterPackViewData);
	void SetCustomizationData(class UStoreCustomizationItemViewData* customizationItemViewData);
	void SetOwnedTagVisibility(const bool IsVisible_0);
	void SetPriceTags(const bool IsBuyable, const TArray<struct FPriceTagViewData>& priceTags);
	void SetTimerFlags(const struct FTimerFlagViewData& LimitedTimeFlag, const struct FTimerFlagViewData& DiscountTimeFlag, const bool IsOwned);
	class UCoreTimerFlagWidget* ShowTimerFlagWidget(const struct FTimerFlagViewData& timerFlagData);
	void UpdateOnHoverBorder(class UUITweenInstance* tween);
	void UpdatePosition(class UUITweenInstance* tween);
	void UpdateSize(class UUITweenInstance* tween);
	void UpdateSizeCompleted(class UUITweenInstance* tween);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreFeaturedCustomizationItemWidget">();
	}
	static class UCoreStoreFeaturedCustomizationItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreFeaturedCustomizationItemWidget>();
	}
};
static_assert(alignof(UCoreStoreFeaturedCustomizationItemWidget) == 0x000008, "Wrong alignment on UCoreStoreFeaturedCustomizationItemWidget");
static_assert(sizeof(UCoreStoreFeaturedCustomizationItemWidget) == 0x000770, "Wrong size on UCoreStoreFeaturedCustomizationItemWidget");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _priceTagWidgetClass) == 0x0004D8, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_priceTagWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _timerFlagWidgetClass) == 0x0004E0, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_timerFlagWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _preConstructedPriceTagCount) == 0x0004E8, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_preConstructedPriceTagCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _preConstructedTimerFlagCount) == 0x0004EC, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_preConstructedTimerFlagCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _timerFlagPadding) == 0x0004F0, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_timerFlagPadding' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _priceTagPadding) == 0x000500, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_priceTagPadding' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _timerFlagScale) == 0x000510, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_timerFlagScale' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _timerFlagSize) == 0x000514, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_timerFlagSize' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, PriceTagsContainer) == 0x000518, "Member 'UCoreStoreFeaturedCustomizationItemWidget::PriceTagsContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, TimerFlagVerticalBox) == 0x000520, "Member 'UCoreStoreFeaturedCustomizationItemWidget::TimerFlagVerticalBox' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, OnHoverBorder) == 0x000528, "Member 'UCoreStoreFeaturedCustomizationItemWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, OwnedTag) == 0x000530, "Member 'UCoreStoreFeaturedCustomizationItemWidget::OwnedTag' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, RarityIMG) == 0x000538, "Member 'UCoreStoreFeaturedCustomizationItemWidget::RarityIMG' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, RarityTB) == 0x000540, "Member 'UCoreStoreFeaturedCustomizationItemWidget::RarityTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, CharacterNameTB) == 0x000548, "Member 'UCoreStoreFeaturedCustomizationItemWidget::CharacterNameTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, TitleTB) == 0x000550, "Member 'UCoreStoreFeaturedCustomizationItemWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, OwnedCountTB) == 0x000558, "Member 'UCoreStoreFeaturedCustomizationItemWidget::OwnedCountTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, BundleIMG) == 0x000560, "Member 'UCoreStoreFeaturedCustomizationItemWidget::BundleIMG' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, Footer) == 0x000568, "Member 'UCoreStoreFeaturedCustomizationItemWidget::Footer' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, DetailPanel) == 0x000570, "Member 'UCoreStoreFeaturedCustomizationItemWidget::DetailPanel' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, ItemIcon) == 0x000578, "Member 'UCoreStoreFeaturedCustomizationItemWidget::ItemIcon' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _cachedData) == 0x000580, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_cachedData' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _priceTagsList) == 0x000728, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_priceTagsList' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _timerFlagsList) == 0x000730, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_timerFlagsList' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _sizeTween) == 0x000738, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_sizeTween' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _positionTween) == 0x000740, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_positionTween' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _onHoverBorderTween) == 0x000748, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_onHoverBorderTween' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemWidget, _imageLoader) == 0x000750, "Member 'UCoreStoreFeaturedCustomizationItemWidget::_imageLoader' has a wrong offset!");

// Class DBDUIViewsCore.CoreItemBundleWidget
// 0x0008 (0x0328 - 0x0320)
class UCoreItemBundleWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreItemBundleWidget">();
	}
	static class UCoreItemBundleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreItemBundleWidget>();
	}
};
static_assert(alignof(UCoreItemBundleWidget) == 0x000008, "Wrong alignment on UCoreItemBundleWidget");
static_assert(sizeof(UCoreItemBundleWidget) == 0x000328, "Wrong size on UCoreItemBundleWidget");

// Class DBDUIViewsCore.CoreItemInteractionWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreItemInteractionWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreItemInteractionWidget">();
	}
	static class UCoreItemInteractionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreItemInteractionWidget>();
	}
};
static_assert(alignof(UCoreItemInteractionWidget) == 0x000008, "Wrong alignment on UCoreItemInteractionWidget");
static_assert(sizeof(UCoreItemInteractionWidget) == 0x000358, "Wrong size on UCoreItemInteractionWidget");

// Class DBDUIViewsCore.CoreStoreContentWidget
// 0x0248 (0x0720 - 0x04D8)
class UCoreStoreContentWidget final : public UCoreSelectableButtonWidget
{
public:
	uint8                                         Pad_4D8[0x10];                                     // 0x04D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TitleTB;                                           // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOwnedTagWidget*                    OwnedTag;                                          // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          OwnedCountTB;                                      // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ContentTB;                                         // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreTimerFlagWidget*                   LimitedAvailabilityTimerFlag;                      // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreTimerFlagWidget*                   SaleTimerFlag;                                     // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              BannerIMG;                                         // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePriceTagWidget*                    PriceTag;                                          // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           RiftIconsContainer;                                // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              RiftPassIcon;                                      // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              RiftFragmentIcon;                                  // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            NotificationIcon;                                  // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FStoreContentViewData                  _cachedData;                                       // 0x0550(0x01A8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	class UTextureLoadingWrapper*                 _imageLoader;                                      // 0x06F8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULocalTextureLoader*                    _localTextureLoader;                               // 0x0700(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_708[0x18];                                     // 0x0708(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnContentClicked(class UCoreButtonWidget* buttonTarget);
	void SetChapterPackData(class UStoreChapterPackViewData* Data, const bool appendDataToAnalyticsName);
	void SetCollectionData(class UStoreCollectionViewData* Data, const bool appendDataToAnalyticsName);
	void SetCrossPromotionData(const struct FCrossPromoCampaignViewData& Data, const bool appendDataToAnalyticsName);
	void SetHeritagePackData(const struct FStoreHeritagePackViewData& Data, const bool appendDataToAnalyticsName);
	void SetImageCompositionData(const class FString& packId, const class FText& DisplayTitle, const int32 PackImageCompositionNumberOfItems, const TArray<class UStorePackContentData*>& packContentData);
	void SetNewIcon(const bool IsNew);
	void SetOwnedTagVisibility(const bool IsVisible_0);
	void SetPriceTagDataAndVisibility(const struct FPriceTagViewData& PriceTagData, const bool IsVisible_0);
	void SetPriceTagVisibility(const bool IsVisible_0);
	void SetRiftIconsVisibility(const bool showRiftIconsContainer, const bool showRiftFragmentIcon);
	void SetSimplifiedData(const class FString& packId, const class FText& DisplayTitle, const TSoftObjectPtr<class UTexture2D>& imagePtr, const struct FSoftRemoteContentCacheObjectPtr& imageRemotePtr);
	void SetSimplifiedVisuals();
	void SetSpecialPackData(class UStoreSpecialPackViewData* Data, const bool appendDataToAnalyticsName);
	void SetSpecialPackImageUsingComposition(const int32 numberOfItems, const TArray<class UStorePackContentData*>& Data, const TMap<class FName, class UTexture2D*>& icons);
	void SetTextBlockVisibility(class UDBDTextBlock* TextBlock, const bool IsVisible_0);
	void SetTimerFlagDataAndVisibility(class UCoreTimerFlagWidget* Timer, const struct FTimerFlagViewData& timerData, const bool isItemOwned);
	void SetTimerFlagVisibility(class UCoreTimerFlagWidget* Timer, const bool IsVisible_0);

	void LoadBannerImage(TSoftObjectPtr<class UTexture2D> localPtr, struct FSoftRemoteContentCacheObjectPtr* remotePtr) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreContentWidget">();
	}
	static class UCoreStoreContentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreContentWidget>();
	}
};
static_assert(alignof(UCoreStoreContentWidget) == 0x000008, "Wrong alignment on UCoreStoreContentWidget");
static_assert(sizeof(UCoreStoreContentWidget) == 0x000720, "Wrong size on UCoreStoreContentWidget");
static_assert(offsetof(UCoreStoreContentWidget, OnHoverBorder) == 0x0004E8, "Member 'UCoreStoreContentWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, TitleTB) == 0x0004F0, "Member 'UCoreStoreContentWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, OwnedTag) == 0x0004F8, "Member 'UCoreStoreContentWidget::OwnedTag' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, OwnedCountTB) == 0x000500, "Member 'UCoreStoreContentWidget::OwnedCountTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, ContentTB) == 0x000508, "Member 'UCoreStoreContentWidget::ContentTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, LimitedAvailabilityTimerFlag) == 0x000510, "Member 'UCoreStoreContentWidget::LimitedAvailabilityTimerFlag' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, SaleTimerFlag) == 0x000518, "Member 'UCoreStoreContentWidget::SaleTimerFlag' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, BannerIMG) == 0x000520, "Member 'UCoreStoreContentWidget::BannerIMG' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, PriceTag) == 0x000528, "Member 'UCoreStoreContentWidget::PriceTag' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, RiftIconsContainer) == 0x000530, "Member 'UCoreStoreContentWidget::RiftIconsContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, RiftPassIcon) == 0x000538, "Member 'UCoreStoreContentWidget::RiftPassIcon' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, RiftFragmentIcon) == 0x000540, "Member 'UCoreStoreContentWidget::RiftFragmentIcon' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, NotificationIcon) == 0x000548, "Member 'UCoreStoreContentWidget::NotificationIcon' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, _cachedData) == 0x000550, "Member 'UCoreStoreContentWidget::_cachedData' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, _imageLoader) == 0x0006F8, "Member 'UCoreStoreContentWidget::_imageLoader' has a wrong offset!");
static_assert(offsetof(UCoreStoreContentWidget, _localTextureLoader) == 0x000700, "Member 'UCoreStoreContentWidget::_localTextureLoader' has a wrong offset!");

// Class DBDUIViewsCore.CoreItemSummaryPopupWidget
// 0x00D0 (0x0458 - 0x0388)
class UCoreItemSummaryPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreMenuPerkWidget>        _loadoutPerkWidgetClass;                           // 0x0390(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuLoadoutPartWidget> _loadoutItemWidgetClass;                           // 0x0398(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuAddonWidget>       _loadoutAddonWidgetClass;                          // 0x03A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuOfferingWidget>    _loadoutOfferingWidgetClass;                       // 0x03A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _perkPadding;                                      // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                _itemPadding;                                      // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                _addonPadding;                                     // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                _offeringPadding;                                  // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	int32                                         _perksPerRow;                                      // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _itemsPerRow;                                      // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _addonsPerRow;                                     // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _offeringsPerRow;                                  // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          _slotHorizontalAlignment;                          // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            _slotVerticalAlignment;                            // 0x0401(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_402[0x6];                                      // 0x0402(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDRichTextBlock*                      PerksLabelRTB;                                     // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             PerksGridPanel;                                    // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      ItemsLabelRTB;                                     // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             ItemsGridPanel;                                    // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      AddonsLabelRTB;                                    // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             AddonsGridPanel;                                   // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      OfferingsLabelRTB;                                 // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             OfferingsGridPanel;                                // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreMenuLoadoutPartWidget*>     _inventoryItemWidgetList;                          // 0x0448(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void OnItemHovered(class UCoreButtonWidget* buttonTarget);
	void OnItemUnhovered(class UCoreButtonWidget* buttonTarget);
	void PreviewItems(int32 perkCount, int32 itemCount, int32 addonCount, int32 OfferingCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreItemSummaryPopupWidget">();
	}
	static class UCoreItemSummaryPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreItemSummaryPopupWidget>();
	}
};
static_assert(alignof(UCoreItemSummaryPopupWidget) == 0x000008, "Wrong alignment on UCoreItemSummaryPopupWidget");
static_assert(sizeof(UCoreItemSummaryPopupWidget) == 0x000458, "Wrong size on UCoreItemSummaryPopupWidget");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _loadoutPerkWidgetClass) == 0x000390, "Member 'UCoreItemSummaryPopupWidget::_loadoutPerkWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _loadoutItemWidgetClass) == 0x000398, "Member 'UCoreItemSummaryPopupWidget::_loadoutItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _loadoutAddonWidgetClass) == 0x0003A0, "Member 'UCoreItemSummaryPopupWidget::_loadoutAddonWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _loadoutOfferingWidgetClass) == 0x0003A8, "Member 'UCoreItemSummaryPopupWidget::_loadoutOfferingWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _perkPadding) == 0x0003B0, "Member 'UCoreItemSummaryPopupWidget::_perkPadding' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _itemPadding) == 0x0003C0, "Member 'UCoreItemSummaryPopupWidget::_itemPadding' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _addonPadding) == 0x0003D0, "Member 'UCoreItemSummaryPopupWidget::_addonPadding' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _offeringPadding) == 0x0003E0, "Member 'UCoreItemSummaryPopupWidget::_offeringPadding' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _perksPerRow) == 0x0003F0, "Member 'UCoreItemSummaryPopupWidget::_perksPerRow' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _itemsPerRow) == 0x0003F4, "Member 'UCoreItemSummaryPopupWidget::_itemsPerRow' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _addonsPerRow) == 0x0003F8, "Member 'UCoreItemSummaryPopupWidget::_addonsPerRow' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _offeringsPerRow) == 0x0003FC, "Member 'UCoreItemSummaryPopupWidget::_offeringsPerRow' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _slotHorizontalAlignment) == 0x000400, "Member 'UCoreItemSummaryPopupWidget::_slotHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _slotVerticalAlignment) == 0x000401, "Member 'UCoreItemSummaryPopupWidget::_slotVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, PerksLabelRTB) == 0x000408, "Member 'UCoreItemSummaryPopupWidget::PerksLabelRTB' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, PerksGridPanel) == 0x000410, "Member 'UCoreItemSummaryPopupWidget::PerksGridPanel' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, ItemsLabelRTB) == 0x000418, "Member 'UCoreItemSummaryPopupWidget::ItemsLabelRTB' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, ItemsGridPanel) == 0x000420, "Member 'UCoreItemSummaryPopupWidget::ItemsGridPanel' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, AddonsLabelRTB) == 0x000428, "Member 'UCoreItemSummaryPopupWidget::AddonsLabelRTB' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, AddonsGridPanel) == 0x000430, "Member 'UCoreItemSummaryPopupWidget::AddonsGridPanel' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, OfferingsLabelRTB) == 0x000438, "Member 'UCoreItemSummaryPopupWidget::OfferingsLabelRTB' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, OfferingsGridPanel) == 0x000440, "Member 'UCoreItemSummaryPopupWidget::OfferingsGridPanel' has a wrong offset!");
static_assert(offsetof(UCoreItemSummaryPopupWidget, _inventoryItemWidgetList) == 0x000448, "Member 'UCoreItemSummaryPopupWidget::_inventoryItemWidgetList' has a wrong offset!");

// Class DBDUIViewsCore.CoreItemWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreItemWidget final : public UCoreBaseLoadoutPartWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreItemWidget">();
	}
	static class UCoreItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreItemWidget>();
	}
};
static_assert(alignof(UCoreItemWidget) == 0x000008, "Wrong alignment on UCoreItemWidget");
static_assert(sizeof(UCoreItemWidget) == 0x000358, "Wrong size on UCoreItemWidget");

// Class DBDUIViewsCore.CoreStoreCharmSlotListWidget
// 0x0050 (0x0370 - 0x0320)
class UCoreStoreCharmSlotListWidget final : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void(const int32 slotIndex)> _charmSlotSelectedDelegate;                // 0x0320(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreStoreCharmSlotWidget>  _charmSlotItemWidgetClass;                         // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedCharmSlotsCount;                    // 0x0338(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _charmSlotsPadding;                                // 0x033C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBox*                         CharmSlotsContainer;                               // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TitleTB;                                           // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _charmSlotList;                                    // 0x0360(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreStoreCharmSlotWidget*              _selectedCharmSlotItem;                            // 0x0368(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnCharmSlotSelected(class UCoreSelectableButtonWidget* buttonTarget, bool IsSelected);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCharmSlotListWidget">();
	}
	static class UCoreStoreCharmSlotListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCharmSlotListWidget>();
	}
};
static_assert(alignof(UCoreStoreCharmSlotListWidget) == 0x000008, "Wrong alignment on UCoreStoreCharmSlotListWidget");
static_assert(sizeof(UCoreStoreCharmSlotListWidget) == 0x000370, "Wrong size on UCoreStoreCharmSlotListWidget");
static_assert(offsetof(UCoreStoreCharmSlotListWidget, _charmSlotSelectedDelegate) == 0x000320, "Member 'UCoreStoreCharmSlotListWidget::_charmSlotSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharmSlotListWidget, _charmSlotItemWidgetClass) == 0x000330, "Member 'UCoreStoreCharmSlotListWidget::_charmSlotItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharmSlotListWidget, _preConstructedCharmSlotsCount) == 0x000338, "Member 'UCoreStoreCharmSlotListWidget::_preConstructedCharmSlotsCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharmSlotListWidget, _charmSlotsPadding) == 0x00033C, "Member 'UCoreStoreCharmSlotListWidget::_charmSlotsPadding' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharmSlotListWidget, CharmSlotsContainer) == 0x000350, "Member 'UCoreStoreCharmSlotListWidget::CharmSlotsContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharmSlotListWidget, TitleTB) == 0x000358, "Member 'UCoreStoreCharmSlotListWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharmSlotListWidget, _charmSlotList) == 0x000360, "Member 'UCoreStoreCharmSlotListWidget::_charmSlotList' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharmSlotListWidget, _selectedCharmSlotItem) == 0x000368, "Member 'UCoreStoreCharmSlotListWidget::_selectedCharmSlotItem' has a wrong offset!");

// Class DBDUIViewsCore.CoreKillerStatusWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreKillerStatusWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreKillerStatusWidget">();
	}
	static class UCoreKillerStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreKillerStatusWidget>();
	}
};
static_assert(alignof(UCoreKillerStatusWidget) == 0x000008, "Wrong alignment on UCoreKillerStatusWidget");
static_assert(sizeof(UCoreKillerStatusWidget) == 0x000358, "Wrong size on UCoreKillerStatusWidget");

// Class DBDUIViewsCore.CoreLargeCurrencyIconWidget
// 0x0008 (0x0328 - 0x0320)
class UCoreLargeCurrencyIconWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDImage*                              CurrencyIcon;                                      // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLargeCurrencyIconWidget">();
	}
	static class UCoreLargeCurrencyIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLargeCurrencyIconWidget>();
	}
};
static_assert(alignof(UCoreLargeCurrencyIconWidget) == 0x000008, "Wrong alignment on UCoreLargeCurrencyIconWidget");
static_assert(sizeof(UCoreLargeCurrencyIconWidget) == 0x000328, "Wrong size on UCoreLargeCurrencyIconWidget");
static_assert(offsetof(UCoreLargeCurrencyIconWidget, CurrencyIcon) == 0x000320, "Member 'UCoreLargeCurrencyIconWidget::CurrencyIcon' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreFeaturedContentContainerWidget
// 0x0060 (0x0380 - 0x0320)
class UCoreStoreFeaturedContentContainerWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _contentWidgetScale;                               // 0x0330(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _autoAdvanceRate;                                  // 0x0334(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _autoAdvanceFirstDelay;                            // 0x0338(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreStoreContentWidget*                ContentTile;                                       // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreButtonWidget*                      PreviousArrow;                                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreButtonWidget*                      NextArrow;                                         // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCorePaginationContainerWidget*         IndexIndicatorContainer;                           // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FStoreContentViewData>          _cachedData;                                       // 0x0360(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_370[0x10];                                     // 0x0370(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnIndicatorClicked(class UCoreButtonWidget* buttonTarget);
	void OnIndicatorSelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnNextArrowClicked(class UCoreButtonWidget* buttonTarget);
	void OnPreviousArrowClicked(class UCoreButtonWidget* buttonTarget);
	void OnStoreContentClicked(const struct FStoreContentViewData& StoreContentViewData);
	void OnStoreContentHovered(class UCoreButtonWidget* buttonTarget);
	void OnStoreContentUnhovered(class UCoreButtonWidget* buttonTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreFeaturedContentContainerWidget">();
	}
	static class UCoreStoreFeaturedContentContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreFeaturedContentContainerWidget>();
	}
};
static_assert(alignof(UCoreStoreFeaturedContentContainerWidget) == 0x000008, "Wrong alignment on UCoreStoreFeaturedContentContainerWidget");
static_assert(sizeof(UCoreStoreFeaturedContentContainerWidget) == 0x000380, "Wrong size on UCoreStoreFeaturedContentContainerWidget");
static_assert(offsetof(UCoreStoreFeaturedContentContainerWidget, _contentWidgetScale) == 0x000330, "Member 'UCoreStoreFeaturedContentContainerWidget::_contentWidgetScale' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedContentContainerWidget, _autoAdvanceRate) == 0x000334, "Member 'UCoreStoreFeaturedContentContainerWidget::_autoAdvanceRate' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedContentContainerWidget, _autoAdvanceFirstDelay) == 0x000338, "Member 'UCoreStoreFeaturedContentContainerWidget::_autoAdvanceFirstDelay' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedContentContainerWidget, ContentTile) == 0x000340, "Member 'UCoreStoreFeaturedContentContainerWidget::ContentTile' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedContentContainerWidget, PreviousArrow) == 0x000348, "Member 'UCoreStoreFeaturedContentContainerWidget::PreviousArrow' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedContentContainerWidget, NextArrow) == 0x000350, "Member 'UCoreStoreFeaturedContentContainerWidget::NextArrow' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedContentContainerWidget, IndexIndicatorContainer) == 0x000358, "Member 'UCoreStoreFeaturedContentContainerWidget::IndexIndicatorContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedContentContainerWidget, _cachedData) == 0x000360, "Member 'UCoreStoreFeaturedContentContainerWidget::_cachedData' has a wrong offset!");

// Class DBDUIViewsCore.CoreLeaningArrowsWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreLeaningArrowsWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLeaningArrowsWidget">();
	}
	static class UCoreLeaningArrowsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLeaningArrowsWidget>();
	}
};
static_assert(alignof(UCoreLeaningArrowsWidget) == 0x000008, "Wrong alignment on UCoreLeaningArrowsWidget");
static_assert(sizeof(UCoreLeaningArrowsWidget) == 0x000358, "Wrong size on UCoreLeaningArrowsWidget");

// Class DBDUIViewsCore.CoreLightSensitivityWidget
// 0x0030 (0x0350 - 0x0320)
class UCoreLightSensitivityWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDBDRichTextBlock*>              _lightSensitivityRichTextBlocks;                   // 0x0328(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeOutAnim;                                       // 0x0338(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_340[0x10];                                     // 0x0340(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLightSensitivityWidget">();
	}
	static class UCoreLightSensitivityWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLightSensitivityWidget>();
	}
};
static_assert(alignof(UCoreLightSensitivityWidget) == 0x000008, "Wrong alignment on UCoreLightSensitivityWidget");
static_assert(sizeof(UCoreLightSensitivityWidget) == 0x000350, "Wrong size on UCoreLightSensitivityWidget");
static_assert(offsetof(UCoreLightSensitivityWidget, _lightSensitivityRichTextBlocks) == 0x000328, "Member 'UCoreLightSensitivityWidget::_lightSensitivityRichTextBlocks' has a wrong offset!");
static_assert(offsetof(UCoreLightSensitivityWidget, FadeOutAnim) == 0x000338, "Member 'UCoreLightSensitivityWidget::FadeOutAnim' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreBaseTabWidget
// 0x0010 (0x0330 - 0x0320)
class UCoreStoreBaseTabWidget : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void(EStoreMenuState newState)> OnStoreStateChangedDelegate;            // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void OnShow();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreBaseTabWidget">();
	}
	static class UCoreStoreBaseTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreBaseTabWidget>();
	}
};
static_assert(alignof(UCoreStoreBaseTabWidget) == 0x000008, "Wrong alignment on UCoreStoreBaseTabWidget");
static_assert(sizeof(UCoreStoreBaseTabWidget) == 0x000330, "Wrong size on UCoreStoreBaseTabWidget");
static_assert(offsetof(UCoreStoreBaseTabWidget, OnStoreStateChangedDelegate) == 0x000320, "Member 'UCoreStoreBaseTabWidget::OnStoreStateChangedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreBaseSubTabsWidget
// 0x0028 (0x0358 - 0x0330)
class UCoreStoreBaseSubTabsWidget : public UCoreStoreBaseTabWidget
{
public:
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 menuState)> _menuTabSelectedDelegate;                        // 0x0338(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UCoreTabContainerWidget*                SubTabsContainer;                                  // 0x0348(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        TabContentSwitcher;                                // 0x0350(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UWidget* GetSubTabContentForTab(int32 subTabId);
	void OnSubTabSelected(class UCoreSelectableButtonWidget* selectedButton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreBaseSubTabsWidget">();
	}
	static class UCoreStoreBaseSubTabsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreBaseSubTabsWidget>();
	}
};
static_assert(alignof(UCoreStoreBaseSubTabsWidget) == 0x000008, "Wrong alignment on UCoreStoreBaseSubTabsWidget");
static_assert(sizeof(UCoreStoreBaseSubTabsWidget) == 0x000358, "Wrong size on UCoreStoreBaseSubTabsWidget");
static_assert(offsetof(UCoreStoreBaseSubTabsWidget, _menuTabSelectedDelegate) == 0x000338, "Member 'UCoreStoreBaseSubTabsWidget::_menuTabSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreBaseSubTabsWidget, SubTabsContainer) == 0x000348, "Member 'UCoreStoreBaseSubTabsWidget::SubTabsContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreBaseSubTabsWidget, TabContentSwitcher) == 0x000350, "Member 'UCoreStoreBaseSubTabsWidget::TabContentSwitcher' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreSpecialPacksWidget
// 0x0030 (0x0388 - 0x0358)
class UCoreStoreSpecialPacksWidget final : public UCoreStoreBaseSubTabsWidget
{
public:
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreStoreSpecialPackDetailsWidget*     DetailsWidget;                                     // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreSpecialPacksListWidget*       SpecialPacksTab;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreSpecialPacksListWidget*       ChapterPacksTab;                                   // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreSpecialPacksListWidget*       HeritagePacksTab;                                  // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStoreSpecialPacksScreenState                 _currentScreenState;                               // 0x0380(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStoreSpecialPacksTabState                    _currentSubTab;                                    // 0x0381(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_382[0x6];                                      // 0x0382(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimateHideDetails();
	void AnimateHideTabs();
	void AnimateShowDetails();
	void AnimateShowTabs();
	void OnDetailsHideAnimationFinished();
	void OnDetailsShowAnimationFinished();
	void OnTabsHideAnimationFinished();
	void OnTabsShowAnimationFinished();
	void SetTabInputsEnabled(const bool IsEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreSpecialPacksWidget">();
	}
	static class UCoreStoreSpecialPacksWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreSpecialPacksWidget>();
	}
};
static_assert(alignof(UCoreStoreSpecialPacksWidget) == 0x000008, "Wrong alignment on UCoreStoreSpecialPacksWidget");
static_assert(sizeof(UCoreStoreSpecialPacksWidget) == 0x000388, "Wrong size on UCoreStoreSpecialPacksWidget");
static_assert(offsetof(UCoreStoreSpecialPacksWidget, DetailsWidget) == 0x000360, "Member 'UCoreStoreSpecialPacksWidget::DetailsWidget' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPacksWidget, SpecialPacksTab) == 0x000368, "Member 'UCoreStoreSpecialPacksWidget::SpecialPacksTab' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPacksWidget, ChapterPacksTab) == 0x000370, "Member 'UCoreStoreSpecialPacksWidget::ChapterPacksTab' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPacksWidget, HeritagePacksTab) == 0x000378, "Member 'UCoreStoreSpecialPacksWidget::HeritagePacksTab' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPacksWidget, _currentScreenState) == 0x000380, "Member 'UCoreStoreSpecialPacksWidget::_currentScreenState' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPacksWidget, _currentSubTab) == 0x000381, "Member 'UCoreStoreSpecialPacksWidget::_currentSubTab' has a wrong offset!");

// Class DBDUIViewsCore.CoreLoadingHintsDisplayWidget
// 0x0060 (0x0380 - 0x0320)
class UCoreLoadingHintsDisplayWidget : public UCoreBaseUserWidget
{
public:
	float                                         _fadeInDuration;                                   // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _fadeOutDuration;                                  // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextJustify                                  _titleAlignment;                                   // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextJustify                                  _descriptionAlignment;                             // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32A[0x2];                                      // 0x032A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           _titleColor;                                       // 0x032C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           _descriptionColor;                                 // 0x033C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               HintOverlay;                                       // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              Icon;                                              // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      TitleRTB;                                          // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      DescriptionRTB;                                    // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnLoadingHintsFadeSequenceCompletedDelegate;       // 0x0370(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void SetLoadingHint(const struct FLoadingHintViewData& loadingHintData);
	void SetTextAlignment(ETextJustify titleAlignment, ETextJustify descriptionAlignment);
	void SetTextColors(const struct FLinearColor& TitleColor, const struct FLinearColor& descriptionColor);
	void StartFadeSequence(float FadeOutDelay);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLoadingHintsDisplayWidget">();
	}
	static class UCoreLoadingHintsDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLoadingHintsDisplayWidget>();
	}
};
static_assert(alignof(UCoreLoadingHintsDisplayWidget) == 0x000008, "Wrong alignment on UCoreLoadingHintsDisplayWidget");
static_assert(sizeof(UCoreLoadingHintsDisplayWidget) == 0x000380, "Wrong size on UCoreLoadingHintsDisplayWidget");
static_assert(offsetof(UCoreLoadingHintsDisplayWidget, _fadeInDuration) == 0x000320, "Member 'UCoreLoadingHintsDisplayWidget::_fadeInDuration' has a wrong offset!");
static_assert(offsetof(UCoreLoadingHintsDisplayWidget, _fadeOutDuration) == 0x000324, "Member 'UCoreLoadingHintsDisplayWidget::_fadeOutDuration' has a wrong offset!");
static_assert(offsetof(UCoreLoadingHintsDisplayWidget, _titleAlignment) == 0x000328, "Member 'UCoreLoadingHintsDisplayWidget::_titleAlignment' has a wrong offset!");
static_assert(offsetof(UCoreLoadingHintsDisplayWidget, _descriptionAlignment) == 0x000329, "Member 'UCoreLoadingHintsDisplayWidget::_descriptionAlignment' has a wrong offset!");
static_assert(offsetof(UCoreLoadingHintsDisplayWidget, _titleColor) == 0x00032C, "Member 'UCoreLoadingHintsDisplayWidget::_titleColor' has a wrong offset!");
static_assert(offsetof(UCoreLoadingHintsDisplayWidget, _descriptionColor) == 0x00033C, "Member 'UCoreLoadingHintsDisplayWidget::_descriptionColor' has a wrong offset!");
static_assert(offsetof(UCoreLoadingHintsDisplayWidget, HintOverlay) == 0x000350, "Member 'UCoreLoadingHintsDisplayWidget::HintOverlay' has a wrong offset!");
static_assert(offsetof(UCoreLoadingHintsDisplayWidget, Icon) == 0x000358, "Member 'UCoreLoadingHintsDisplayWidget::Icon' has a wrong offset!");
static_assert(offsetof(UCoreLoadingHintsDisplayWidget, TitleRTB) == 0x000360, "Member 'UCoreLoadingHintsDisplayWidget::TitleRTB' has a wrong offset!");
static_assert(offsetof(UCoreLoadingHintsDisplayWidget, DescriptionRTB) == 0x000368, "Member 'UCoreLoadingHintsDisplayWidget::DescriptionRTB' has a wrong offset!");
static_assert(offsetof(UCoreLoadingHintsDisplayWidget, OnLoadingHintsFadeSequenceCompletedDelegate) == 0x000370, "Member 'UCoreLoadingHintsDisplayWidget::OnLoadingHintsFadeSequenceCompletedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreLoadingLogoWidget
// 0x0018 (0x0338 - 0x0320)
class UCoreLoadingLogoWidget : public UCoreBaseUserWidget
{
public:
	struct FLinearColor                           _logoIconColor;                                    // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              LogoIcon;                                          // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void UpdateColor(const struct FLinearColor& Color);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLoadingLogoWidget">();
	}
	static class UCoreLoadingLogoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLoadingLogoWidget>();
	}
};
static_assert(alignof(UCoreLoadingLogoWidget) == 0x000008, "Wrong alignment on UCoreLoadingLogoWidget");
static_assert(sizeof(UCoreLoadingLogoWidget) == 0x000338, "Wrong size on UCoreLoadingLogoWidget");
static_assert(offsetof(UCoreLoadingLogoWidget, _logoIconColor) == 0x000320, "Member 'UCoreLoadingLogoWidget::_logoIconColor' has a wrong offset!");
static_assert(offsetof(UCoreLoadingLogoWidget, LogoIcon) == 0x000330, "Member 'UCoreLoadingLogoWidget::LogoIcon' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreFeaturedWidget
// 0x0040 (0x0370 - 0x0330)
class UCoreStoreFeaturedWidget final : public UCoreStoreBaseTabWidget
{
public:
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreStoreFeaturedCustomizationItemContainerWidget* CustomizationItemContainer;            // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreFeaturedCharacterContainerWidget* CharacterContainer;                            // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreFeaturedMysteryBoxWidget*     mysteryBox;                                        // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreFeaturedContentContainerWidget* FeaturedContentContainer;                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          FeaturedCharactersTitleTB;                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          FeaturedChapterPackTitleTB;                        // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          FreeGiftTitleTB;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreFeaturedWidget">();
	}
	static class UCoreStoreFeaturedWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreFeaturedWidget>();
	}
};
static_assert(alignof(UCoreStoreFeaturedWidget) == 0x000008, "Wrong alignment on UCoreStoreFeaturedWidget");
static_assert(sizeof(UCoreStoreFeaturedWidget) == 0x000370, "Wrong size on UCoreStoreFeaturedWidget");
static_assert(offsetof(UCoreStoreFeaturedWidget, CustomizationItemContainer) == 0x000338, "Member 'UCoreStoreFeaturedWidget::CustomizationItemContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedWidget, CharacterContainer) == 0x000340, "Member 'UCoreStoreFeaturedWidget::CharacterContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedWidget, mysteryBox) == 0x000348, "Member 'UCoreStoreFeaturedWidget::mysteryBox' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedWidget, FeaturedContentContainer) == 0x000350, "Member 'UCoreStoreFeaturedWidget::FeaturedContentContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedWidget, FeaturedCharactersTitleTB) == 0x000358, "Member 'UCoreStoreFeaturedWidget::FeaturedCharactersTitleTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedWidget, FeaturedChapterPackTitleTB) == 0x000360, "Member 'UCoreStoreFeaturedWidget::FeaturedChapterPackTitleTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedWidget, FreeGiftTitleTB) == 0x000368, "Member 'UCoreStoreFeaturedWidget::FreeGiftTitleTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreLoadingScreenWidget
// 0x0040 (0x0360 - 0x0320)
class UCoreLoadingScreenWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             SurvivorLoadingArtTexture;                         // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             KillerLoadingArtTexture;                           // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSpecialEventLoadingScreenContainer* SpecialEventLoadingScreenContainer;               // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLoadingHintsDisplayWidget*         LoadingHintsDisplay;                               // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ProgressBar;                                       // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnLoadingHintsFadeSequenceCompletedDelegate;       // 0x0350(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void OnLoadingHintsFadeSequenceCompleted();

	void SetProgressBarColors(const struct FLinearColor& PrimaryColor, const struct FLinearColor& secondaryColor) const;
	void SetProgressBarValue(float Progress) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLoadingScreenWidget">();
	}
	static class UCoreLoadingScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLoadingScreenWidget>();
	}
};
static_assert(alignof(UCoreLoadingScreenWidget) == 0x000008, "Wrong alignment on UCoreLoadingScreenWidget");
static_assert(sizeof(UCoreLoadingScreenWidget) == 0x000360, "Wrong size on UCoreLoadingScreenWidget");
static_assert(offsetof(UCoreLoadingScreenWidget, SurvivorLoadingArtTexture) == 0x000328, "Member 'UCoreLoadingScreenWidget::SurvivorLoadingArtTexture' has a wrong offset!");
static_assert(offsetof(UCoreLoadingScreenWidget, KillerLoadingArtTexture) == 0x000330, "Member 'UCoreLoadingScreenWidget::KillerLoadingArtTexture' has a wrong offset!");
static_assert(offsetof(UCoreLoadingScreenWidget, SpecialEventLoadingScreenContainer) == 0x000338, "Member 'UCoreLoadingScreenWidget::SpecialEventLoadingScreenContainer' has a wrong offset!");
static_assert(offsetof(UCoreLoadingScreenWidget, LoadingHintsDisplay) == 0x000340, "Member 'UCoreLoadingScreenWidget::LoadingHintsDisplay' has a wrong offset!");
static_assert(offsetof(UCoreLoadingScreenWidget, ProgressBar) == 0x000348, "Member 'UCoreLoadingScreenWidget::ProgressBar' has a wrong offset!");
static_assert(offsetof(UCoreLoadingScreenWidget, OnLoadingHintsFadeSequenceCompletedDelegate) == 0x000350, "Member 'UCoreLoadingScreenWidget::OnLoadingHintsFadeSequenceCompletedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreLoadoutCharacterClassSectionWidget
// 0x0030 (0x0378 - 0x0348)
class UCoreLoadoutCharacterClassSectionWidget final : public UCoreBaseLoadoutSectionWidget
{
public:
	class UCoreMenuLoadoutPartWidget*             CharacterClassPowerSlot;                           // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreMenuLoadoutPartWidget*             CharacterClassSlot;                                // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDImage*                              CharacterClassPowerSeparator;                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CharacterClassPowerLabelTB;                        // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               CharacterClassPowerOverlay;                        // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CharacterClassLabelTB;                             // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLoadoutCharacterClassSectionWidget">();
	}
	static class UCoreLoadoutCharacterClassSectionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLoadoutCharacterClassSectionWidget>();
	}
};
static_assert(alignof(UCoreLoadoutCharacterClassSectionWidget) == 0x000008, "Wrong alignment on UCoreLoadoutCharacterClassSectionWidget");
static_assert(sizeof(UCoreLoadoutCharacterClassSectionWidget) == 0x000378, "Wrong size on UCoreLoadoutCharacterClassSectionWidget");
static_assert(offsetof(UCoreLoadoutCharacterClassSectionWidget, CharacterClassPowerSlot) == 0x000348, "Member 'UCoreLoadoutCharacterClassSectionWidget::CharacterClassPowerSlot' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutCharacterClassSectionWidget, CharacterClassSlot) == 0x000350, "Member 'UCoreLoadoutCharacterClassSectionWidget::CharacterClassSlot' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutCharacterClassSectionWidget, CharacterClassPowerSeparator) == 0x000358, "Member 'UCoreLoadoutCharacterClassSectionWidget::CharacterClassPowerSeparator' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutCharacterClassSectionWidget, CharacterClassPowerLabelTB) == 0x000360, "Member 'UCoreLoadoutCharacterClassSectionWidget::CharacterClassPowerLabelTB' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutCharacterClassSectionWidget, CharacterClassPowerOverlay) == 0x000368, "Member 'UCoreLoadoutCharacterClassSectionWidget::CharacterClassPowerOverlay' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutCharacterClassSectionWidget, CharacterClassLabelTB) == 0x000370, "Member 'UCoreLoadoutCharacterClassSectionWidget::CharacterClassLabelTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreFeaturedCharacterContainerWidget
// 0x0030 (0x03C0 - 0x0390)
class UCoreStoreFeaturedCharacterContainerWidget final : public UCoreButtonSelector
{
public:
	uint8                                         Pad_390[0x10];                                     // 0x0390(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreStoreCharacterItemWidget> CharacterTileClass;                             // 0x03A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         Root;                                              // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _itemScale;                                        // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _itemSpacing;                                      // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _layoutMask;                                       // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCharacterTileClicked(class UCoreButtonWidget* Target);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreFeaturedCharacterContainerWidget">();
	}
	static class UCoreStoreFeaturedCharacterContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreFeaturedCharacterContainerWidget>();
	}
};
static_assert(alignof(UCoreStoreFeaturedCharacterContainerWidget) == 0x000008, "Wrong alignment on UCoreStoreFeaturedCharacterContainerWidget");
static_assert(sizeof(UCoreStoreFeaturedCharacterContainerWidget) == 0x0003C0, "Wrong size on UCoreStoreFeaturedCharacterContainerWidget");
static_assert(offsetof(UCoreStoreFeaturedCharacterContainerWidget, CharacterTileClass) == 0x0003A0, "Member 'UCoreStoreFeaturedCharacterContainerWidget::CharacterTileClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCharacterContainerWidget, Root) == 0x0003A8, "Member 'UCoreStoreFeaturedCharacterContainerWidget::Root' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCharacterContainerWidget, _itemScale) == 0x0003B0, "Member 'UCoreStoreFeaturedCharacterContainerWidget::_itemScale' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCharacterContainerWidget, _itemSpacing) == 0x0003B4, "Member 'UCoreStoreFeaturedCharacterContainerWidget::_itemSpacing' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCharacterContainerWidget, _layoutMask) == 0x0003B8, "Member 'UCoreStoreFeaturedCharacterContainerWidget::_layoutMask' has a wrong offset!");

// Class DBDUIViewsCore.CoreLoadoutItemAndOfferingSectionWidget
// 0x0050 (0x0398 - 0x0348)
class UCoreLoadoutItemAndOfferingSectionWidget final : public UCoreBaseLoadoutSectionWidget
{
public:
	class UCoreMenuLoadoutPartWidget*             PowerSlot;                                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreMenuLoadoutPartWidget*             ItemSlot;                                          // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UCoreMenuAddonWidget*>           AddOnSlots;                                        // 0x0358(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UCoreMenuLoadoutPartWidget*             OfferingSlot;                                      // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          PowerItemLabelTB;                                  // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          AddonLabelTB;                                      // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          OfferingLabelTB;                                   // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuAddonWidget*                   Addon1Slot;                                        // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuAddonWidget*                   Addon2Slot;                                        // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLoadoutItemAndOfferingSectionWidget">();
	}
	static class UCoreLoadoutItemAndOfferingSectionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLoadoutItemAndOfferingSectionWidget>();
	}
};
static_assert(alignof(UCoreLoadoutItemAndOfferingSectionWidget) == 0x000008, "Wrong alignment on UCoreLoadoutItemAndOfferingSectionWidget");
static_assert(sizeof(UCoreLoadoutItemAndOfferingSectionWidget) == 0x000398, "Wrong size on UCoreLoadoutItemAndOfferingSectionWidget");
static_assert(offsetof(UCoreLoadoutItemAndOfferingSectionWidget, PowerSlot) == 0x000348, "Member 'UCoreLoadoutItemAndOfferingSectionWidget::PowerSlot' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutItemAndOfferingSectionWidget, ItemSlot) == 0x000350, "Member 'UCoreLoadoutItemAndOfferingSectionWidget::ItemSlot' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutItemAndOfferingSectionWidget, AddOnSlots) == 0x000358, "Member 'UCoreLoadoutItemAndOfferingSectionWidget::AddOnSlots' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutItemAndOfferingSectionWidget, OfferingSlot) == 0x000368, "Member 'UCoreLoadoutItemAndOfferingSectionWidget::OfferingSlot' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutItemAndOfferingSectionWidget, PowerItemLabelTB) == 0x000370, "Member 'UCoreLoadoutItemAndOfferingSectionWidget::PowerItemLabelTB' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutItemAndOfferingSectionWidget, AddonLabelTB) == 0x000378, "Member 'UCoreLoadoutItemAndOfferingSectionWidget::AddonLabelTB' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutItemAndOfferingSectionWidget, OfferingLabelTB) == 0x000380, "Member 'UCoreLoadoutItemAndOfferingSectionWidget::OfferingLabelTB' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutItemAndOfferingSectionWidget, Addon1Slot) == 0x000388, "Member 'UCoreLoadoutItemAndOfferingSectionWidget::Addon1Slot' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutItemAndOfferingSectionWidget, Addon2Slot) == 0x000390, "Member 'UCoreLoadoutItemAndOfferingSectionWidget::Addon2Slot' has a wrong offset!");

// Class DBDUIViewsCore.CoreLoadoutSkillsSectionWidget
// 0x0030 (0x0378 - 0x0348)
class UCoreLoadoutSkillsSectionWidget final : public UCoreBaseLoadoutSectionWidget
{
public:
	TArray<class UCoreMenuSkillWidget*>           SkillSlots;                                        // 0x0348(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          SkillsLabelTB;                                     // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuSkillWidget*                   Skill1Slot;                                        // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuSkillWidget*                   Skill2Slot;                                        // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuSkillWidget*                   Skill3Slot;                                        // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLoadoutSkillsSectionWidget">();
	}
	static class UCoreLoadoutSkillsSectionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLoadoutSkillsSectionWidget>();
	}
};
static_assert(alignof(UCoreLoadoutSkillsSectionWidget) == 0x000008, "Wrong alignment on UCoreLoadoutSkillsSectionWidget");
static_assert(sizeof(UCoreLoadoutSkillsSectionWidget) == 0x000378, "Wrong size on UCoreLoadoutSkillsSectionWidget");
static_assert(offsetof(UCoreLoadoutSkillsSectionWidget, SkillSlots) == 0x000348, "Member 'UCoreLoadoutSkillsSectionWidget::SkillSlots' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutSkillsSectionWidget, SkillsLabelTB) == 0x000358, "Member 'UCoreLoadoutSkillsSectionWidget::SkillsLabelTB' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutSkillsSectionWidget, Skill1Slot) == 0x000360, "Member 'UCoreLoadoutSkillsSectionWidget::Skill1Slot' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutSkillsSectionWidget, Skill2Slot) == 0x000368, "Member 'UCoreLoadoutSkillsSectionWidget::Skill2Slot' has a wrong offset!");
static_assert(offsetof(UCoreLoadoutSkillsSectionWidget, Skill3Slot) == 0x000370, "Member 'UCoreLoadoutSkillsSectionWidget::Skill3Slot' has a wrong offset!");

// Class DBDUIViewsCore.CoreLobbyCharactersWidget
// 0x0058 (0x0378 - 0x0320)
class UCoreLobbyCharactersWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const ELobbyCharactersMenuState selectedTabId)> _subTabSelectedDelegate; // 0x0328(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher;                                    // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreTabContainerWidget*                SubTabsContainer;                                  // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCharactersSelectionWidget*    CharactersSelection;                               // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCharactersCustomizationsWidget* CharactersCustomizations;                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCharactersBioWidget*          CharactersBio;                                     // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbyCharactersMenuState                     _currentMenuState;                                 // 0x0360(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UToggleableWidgetPromptController*      _toggleableWidgetPromptController;                 // 0x0368(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_370[0x8];                                      // 0x0370(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSelectionSubTabHovered(class UCoreButtonWidget* buttonTarget);
	void OnSelectionSubTabUnhovered(class UCoreButtonWidget* buttonTarget);
	void OnSubTabSelected(class UCoreSelectableButtonWidget* selectedButton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLobbyCharactersWidget">();
	}
	static class UCoreLobbyCharactersWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLobbyCharactersWidget>();
	}
};
static_assert(alignof(UCoreLobbyCharactersWidget) == 0x000008, "Wrong alignment on UCoreLobbyCharactersWidget");
static_assert(sizeof(UCoreLobbyCharactersWidget) == 0x000378, "Wrong size on UCoreLobbyCharactersWidget");
static_assert(offsetof(UCoreLobbyCharactersWidget, _subTabSelectedDelegate) == 0x000328, "Member 'UCoreLobbyCharactersWidget::_subTabSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreLobbyCharactersWidget, WidgetSwitcher) == 0x000338, "Member 'UCoreLobbyCharactersWidget::WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreLobbyCharactersWidget, SubTabsContainer) == 0x000340, "Member 'UCoreLobbyCharactersWidget::SubTabsContainer' has a wrong offset!");
static_assert(offsetof(UCoreLobbyCharactersWidget, CharactersSelection) == 0x000348, "Member 'UCoreLobbyCharactersWidget::CharactersSelection' has a wrong offset!");
static_assert(offsetof(UCoreLobbyCharactersWidget, CharactersCustomizations) == 0x000350, "Member 'UCoreLobbyCharactersWidget::CharactersCustomizations' has a wrong offset!");
static_assert(offsetof(UCoreLobbyCharactersWidget, CharactersBio) == 0x000358, "Member 'UCoreLobbyCharactersWidget::CharactersBio' has a wrong offset!");
static_assert(offsetof(UCoreLobbyCharactersWidget, _currentMenuState) == 0x000360, "Member 'UCoreLobbyCharactersWidget::_currentMenuState' has a wrong offset!");
static_assert(offsetof(UCoreLobbyCharactersWidget, _toggleableWidgetPromptController) == 0x000368, "Member 'UCoreLobbyCharactersWidget::_toggleableWidgetPromptController' has a wrong offset!");

// Class DBDUIViewsCore.CoreLobbyPerkPreviewerWidget
// 0x0030 (0x0350 - 0x0320)
class UCoreLobbyPerkPreviewerWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          PerksTB;                                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSettingsPerksDisplayWidget*        PerksDisplay;                                      // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SkillsTB;                                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSettingsSkillsDisplayWidget*       SkillsDisplay;                                     // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _layoutMask;                                       // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsLayoutSectionEnabled(const int32 loadoutLayoutMask) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLobbyPerkPreviewerWidget">();
	}
	static class UCoreLobbyPerkPreviewerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLobbyPerkPreviewerWidget>();
	}
};
static_assert(alignof(UCoreLobbyPerkPreviewerWidget) == 0x000008, "Wrong alignment on UCoreLobbyPerkPreviewerWidget");
static_assert(sizeof(UCoreLobbyPerkPreviewerWidget) == 0x000350, "Wrong size on UCoreLobbyPerkPreviewerWidget");
static_assert(offsetof(UCoreLobbyPerkPreviewerWidget, PerksTB) == 0x000328, "Member 'UCoreLobbyPerkPreviewerWidget::PerksTB' has a wrong offset!");
static_assert(offsetof(UCoreLobbyPerkPreviewerWidget, PerksDisplay) == 0x000330, "Member 'UCoreLobbyPerkPreviewerWidget::PerksDisplay' has a wrong offset!");
static_assert(offsetof(UCoreLobbyPerkPreviewerWidget, SkillsTB) == 0x000338, "Member 'UCoreLobbyPerkPreviewerWidget::SkillsTB' has a wrong offset!");
static_assert(offsetof(UCoreLobbyPerkPreviewerWidget, SkillsDisplay) == 0x000340, "Member 'UCoreLobbyPerkPreviewerWidget::SkillsDisplay' has a wrong offset!");
static_assert(offsetof(UCoreLobbyPerkPreviewerWidget, _layoutMask) == 0x000348, "Member 'UCoreLobbyPerkPreviewerWidget::_layoutMask' has a wrong offset!");

// Class DBDUIViewsCore.CoreLobbySidePanelButtonDecoration
// 0x0020 (0x0340 - 0x0320)
class UCoreLobbySidePanelButtonDecoration final : public UCoreBaseUserWidget
{
public:
	class UPanelWidget*                           container;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _containerOpacityAnimationDuration;                // 0x0328(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _defaultContainerOpacity;                          // 0x032C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _hoveredContainerOpacity;                          // 0x0330(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _pressedContainerOpacity;                          // 0x0334(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _disabledContainerOpacity;                         // 0x0338(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEnabledChanged(bool IsEnabled);
	void OnHover();
	void OnPressed();
	void OnReleased();
	void OnUnhover();
	void SetInitialVisual();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLobbySidePanelButtonDecoration">();
	}
	static class UCoreLobbySidePanelButtonDecoration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLobbySidePanelButtonDecoration>();
	}
};
static_assert(alignof(UCoreLobbySidePanelButtonDecoration) == 0x000008, "Wrong alignment on UCoreLobbySidePanelButtonDecoration");
static_assert(sizeof(UCoreLobbySidePanelButtonDecoration) == 0x000340, "Wrong size on UCoreLobbySidePanelButtonDecoration");
static_assert(offsetof(UCoreLobbySidePanelButtonDecoration, container) == 0x000320, "Member 'UCoreLobbySidePanelButtonDecoration::container' has a wrong offset!");
static_assert(offsetof(UCoreLobbySidePanelButtonDecoration, _containerOpacityAnimationDuration) == 0x000328, "Member 'UCoreLobbySidePanelButtonDecoration::_containerOpacityAnimationDuration' has a wrong offset!");
static_assert(offsetof(UCoreLobbySidePanelButtonDecoration, _defaultContainerOpacity) == 0x00032C, "Member 'UCoreLobbySidePanelButtonDecoration::_defaultContainerOpacity' has a wrong offset!");
static_assert(offsetof(UCoreLobbySidePanelButtonDecoration, _hoveredContainerOpacity) == 0x000330, "Member 'UCoreLobbySidePanelButtonDecoration::_hoveredContainerOpacity' has a wrong offset!");
static_assert(offsetof(UCoreLobbySidePanelButtonDecoration, _pressedContainerOpacity) == 0x000334, "Member 'UCoreLobbySidePanelButtonDecoration::_pressedContainerOpacity' has a wrong offset!");
static_assert(offsetof(UCoreLobbySidePanelButtonDecoration, _disabledContainerOpacity) == 0x000338, "Member 'UCoreLobbySidePanelButtonDecoration::_disabledContainerOpacity' has a wrong offset!");

// Class DBDUIViewsCore.CoreLobbyWidget
// 0x0150 (0x0470 - 0x0320)
class UCoreLobbyWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               MainContentOverlay;                                // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        WidgetSwitcher;                                    // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLobbyTitleWidget*                  LobbyTitle;                                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbySidePanelWidget*                  LobbySidePanel;                                    // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterButtonWidget*                SettingsButton;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterButtonWidget*                ArchivesButton;                                    // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterButtonWidget*                FriendsButton;                                     // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterButtonWidget*                InboxButton;                                       // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterButtonWidget*                MatchManagementButton;                             // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      ToggleRightStickModeInputPrompt;                   // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      ScrollInputPrompt;                                 // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      RotateInputPrompt;                                 // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         Footer;                                            // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLobbyCharactersWidget*             Characters;                                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULobbyPlayerListWidget*                 LobbyPlayerList;                                   // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLobbyLoadoutWidget*                Loadout;                                           // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreChatWidget*                        Chat;                                              // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreDisplayStandWidget*                LobbyDisplayStand;                                 // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLobbyPerkPreviewerWidget*          PerksPreviewer;                                    // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELobbyMenuState                               _currentMenuState;                                 // 0x03C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UToggleableWidgetPromptController*      _toggleableWidgetPromptController;                 // 0x03D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D8[0x98];                                     // 0x03D8(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideBackgroundVisual();
	void OnArchivesButtonClicked(class UCoreButtonWidget* Target);
	void OnBackButtonClicked();
	void OnBloodPointBulkSpendingButtonClicked();
	void OnChallengesButtonHovered(class UCoreButtonWidget* Button);
	void OnChallengesButtonUnhovered(class UCoreButtonWidget* Button);
	void OnChatHovered();
	void OnChatUnhovered();
	void OnFriendsButtonClicked(class UCoreButtonWidget* Target);
	void OnInboxButtonClicked(class UCoreButtonWidget* Target);
	void OnLevelUpAnimationDone();
	void OnMatchManagementButtonClicked(class UCoreButtonWidget* Target);
	void OnMenuStateChanged();
	void OnSettingsButtonClicked(class UCoreButtonWidget* Target);
	void SetUiTakeoverVisuals(bool IsActive);
	void ShowBackgroundVisual();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLobbyWidget">();
	}
	static class UCoreLobbyWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLobbyWidget>();
	}
};
static_assert(alignof(UCoreLobbyWidget) == 0x000008, "Wrong alignment on UCoreLobbyWidget");
static_assert(sizeof(UCoreLobbyWidget) == 0x000470, "Wrong size on UCoreLobbyWidget");
static_assert(offsetof(UCoreLobbyWidget, MainContentOverlay) == 0x000328, "Member 'UCoreLobbyWidget::MainContentOverlay' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, WidgetSwitcher) == 0x000330, "Member 'UCoreLobbyWidget::WidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, LobbyTitle) == 0x000338, "Member 'UCoreLobbyWidget::LobbyTitle' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, LobbySidePanel) == 0x000340, "Member 'UCoreLobbyWidget::LobbySidePanel' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, BackInputSwitcher) == 0x000348, "Member 'UCoreLobbyWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, SettingsButton) == 0x000350, "Member 'UCoreLobbyWidget::SettingsButton' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, ArchivesButton) == 0x000358, "Member 'UCoreLobbyWidget::ArchivesButton' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, FriendsButton) == 0x000360, "Member 'UCoreLobbyWidget::FriendsButton' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, InboxButton) == 0x000368, "Member 'UCoreLobbyWidget::InboxButton' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, MatchManagementButton) == 0x000370, "Member 'UCoreLobbyWidget::MatchManagementButton' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, ToggleRightStickModeInputPrompt) == 0x000378, "Member 'UCoreLobbyWidget::ToggleRightStickModeInputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, ScrollInputPrompt) == 0x000380, "Member 'UCoreLobbyWidget::ScrollInputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, RotateInputPrompt) == 0x000388, "Member 'UCoreLobbyWidget::RotateInputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, Footer) == 0x000390, "Member 'UCoreLobbyWidget::Footer' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, Characters) == 0x000398, "Member 'UCoreLobbyWidget::Characters' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, LobbyPlayerList) == 0x0003A0, "Member 'UCoreLobbyWidget::LobbyPlayerList' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, Loadout) == 0x0003A8, "Member 'UCoreLobbyWidget::Loadout' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, Chat) == 0x0003B0, "Member 'UCoreLobbyWidget::Chat' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, LobbyDisplayStand) == 0x0003B8, "Member 'UCoreLobbyWidget::LobbyDisplayStand' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, PerksPreviewer) == 0x0003C0, "Member 'UCoreLobbyWidget::PerksPreviewer' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, _currentMenuState) == 0x0003C8, "Member 'UCoreLobbyWidget::_currentMenuState' has a wrong offset!");
static_assert(offsetof(UCoreLobbyWidget, _toggleableWidgetPromptController) == 0x0003D0, "Member 'UCoreLobbyWidget::_toggleableWidgetPromptController' has a wrong offset!");

// Class DBDUIViewsCore.CoreMainMenuButtonWidget
// 0x0098 (0x0548 - 0x04B0)
class UCoreMainMenuButtonWidget final : public UCoreButtonWidget
{
public:
	uint8                                         Pad_4B0[0x10];                                     // 0x04B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EMainMenuButtonTemplate                       ButtonTemplate;                                    // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameType                                     gameType;                                          // 0x04C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C2[0x16];                                     // 0x04C2(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                _timerFlagPadding;                                 // 0x04D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreTimerFlagWidget>       _timerFlagWidgetClass;                             // 0x04E8(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           TimerFlagContainer;                                // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               DecorationContainer;                               // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          BonusLabelTB;                                      // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          BonusValueTB;                                      // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SubtitleTB;                                        // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              SubtitleTimerIcon;                                 // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EButtonDisableState                           _buttonDisableState;                               // 0x0520(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isNew;                                            // 0x0521(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hasNewStoreItem;                                  // 0x0522(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_523[0x5];                                      // 0x0523(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCoreTimerFlagWidget*>           _timerFlagWidgets;                                 // 0x0528(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UDataTable*                             _mainMenuButtonsEventDB;                           // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_540[0x8];                                      // 0x0540(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddTimerFlag(const struct FTimerFlagViewData& TimerFlagViewData);
	void ClearAllTimerFlags();
	class UCoreTimerFlagWidget* CreateTimerFlag();
	bool GetRowDataFromMainMenuButtonsEventDB(struct FMainMenuButtonsEventData* buttonsEventData, const class FString& eventFrameLabel);
	void PlaySubMenuAnimation(bool isFadingOut, float animDuration);
	void SetBonus(int32 bonusPercent);
	void SetBonusText(const class FText& Text);
	void SetBonusVisibility(bool IsVisible_0);
	void SetDecoration(const class FString& decorationId);
	void SetDecorationVisible(bool IsVisible_0);
	void SetHighlight(const class FString& decorationId);
	void SetIcon(const class FString& eventID);
	void SetSubtitle(const class FText& subtitle);
	void SetSubtitleTimerIconVisible(bool IsVisible_0);
	void SetSubtitleVisible(bool IsVisible_0);
	void UpdateNotificationVisibility();
	void UpdateSubMenuVisuals(bool isGoingInSubMenu, bool isPreTransitionCall);
	void UpdateTimerFlagsVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMainMenuButtonWidget">();
	}
	static class UCoreMainMenuButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMainMenuButtonWidget>();
	}
};
static_assert(alignof(UCoreMainMenuButtonWidget) == 0x000008, "Wrong alignment on UCoreMainMenuButtonWidget");
static_assert(sizeof(UCoreMainMenuButtonWidget) == 0x000548, "Wrong size on UCoreMainMenuButtonWidget");
static_assert(offsetof(UCoreMainMenuButtonWidget, ButtonTemplate) == 0x0004C0, "Member 'UCoreMainMenuButtonWidget::ButtonTemplate' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuButtonWidget, gameType) == 0x0004C1, "Member 'UCoreMainMenuButtonWidget::gameType' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuButtonWidget, _timerFlagPadding) == 0x0004D8, "Member 'UCoreMainMenuButtonWidget::_timerFlagPadding' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuButtonWidget, _timerFlagWidgetClass) == 0x0004E8, "Member 'UCoreMainMenuButtonWidget::_timerFlagWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuButtonWidget, TimerFlagContainer) == 0x0004F0, "Member 'UCoreMainMenuButtonWidget::TimerFlagContainer' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuButtonWidget, DecorationContainer) == 0x0004F8, "Member 'UCoreMainMenuButtonWidget::DecorationContainer' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuButtonWidget, BonusLabelTB) == 0x000500, "Member 'UCoreMainMenuButtonWidget::BonusLabelTB' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuButtonWidget, BonusValueTB) == 0x000508, "Member 'UCoreMainMenuButtonWidget::BonusValueTB' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuButtonWidget, SubtitleTB) == 0x000510, "Member 'UCoreMainMenuButtonWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuButtonWidget, SubtitleTimerIcon) == 0x000518, "Member 'UCoreMainMenuButtonWidget::SubtitleTimerIcon' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuButtonWidget, _buttonDisableState) == 0x000520, "Member 'UCoreMainMenuButtonWidget::_buttonDisableState' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuButtonWidget, _isNew) == 0x000521, "Member 'UCoreMainMenuButtonWidget::_isNew' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuButtonWidget, _hasNewStoreItem) == 0x000522, "Member 'UCoreMainMenuButtonWidget::_hasNewStoreItem' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuButtonWidget, _timerFlagWidgets) == 0x000528, "Member 'UCoreMainMenuButtonWidget::_timerFlagWidgets' has a wrong offset!");
static_assert(offsetof(UCoreMainMenuButtonWidget, _mainMenuButtonsEventDB) == 0x000538, "Member 'UCoreMainMenuButtonWidget::_mainMenuButtonsEventDB' has a wrong offset!");

// Class DBDUIViewsCore.CoreMarketingInvitationPopupWidget
// 0x0098 (0x0420 - 0x0388)
class UCoreMarketingInvitationPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreCurrencyProgressionRewardWidget> RewardWidgetClass;                       // 0x0390(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          InstructionTB;                                     // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RewardTB;                                          // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              KeyArtImage;                                       // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           RewardsContainer;                                  // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         RewardsIconContainer;                              // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              RewardsBackgroundImage;                            // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreToggleButtonWidget*                OptOutToggleButton;                                // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           PromoVideoContainer;                               // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PromoVideoTitleTB;                                 // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               WatchVideoInputSwitcher;                           // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RewardInstructionTB;                               // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const bool isOptOutToggleActive)> _optOutToggleClickedDelegate;    // 0x03F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _instructionButtonClickedDelegate;                 // 0x0400(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _watchVideoClickedDelegate;                        // 0x0410(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	void OnWatchVideoClicked();
	void SetOptOutToggleValue(const bool isOptOutToggleActive);
	void SetQRCodeImage(const TSoftObjectPtr<class UTexture2D>& QrCodeImage);
	void ShowOptOutToggle(const bool shouldShowToggle);
	void ShowRewards(const bool ShowRewards_0);

	void OnInstructionButtonClicked() const;
	void OnOptOutToggleButtonClicked(bool isOptOutToggleActive) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMarketingInvitationPopupWidget">();
	}
	static class UCoreMarketingInvitationPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMarketingInvitationPopupWidget>();
	}
};
static_assert(alignof(UCoreMarketingInvitationPopupWidget) == 0x000008, "Wrong alignment on UCoreMarketingInvitationPopupWidget");
static_assert(sizeof(UCoreMarketingInvitationPopupWidget) == 0x000420, "Wrong size on UCoreMarketingInvitationPopupWidget");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, RewardWidgetClass) == 0x000390, "Member 'UCoreMarketingInvitationPopupWidget::RewardWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, InstructionTB) == 0x000398, "Member 'UCoreMarketingInvitationPopupWidget::InstructionTB' has a wrong offset!");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, RewardTB) == 0x0003A0, "Member 'UCoreMarketingInvitationPopupWidget::RewardTB' has a wrong offset!");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, KeyArtImage) == 0x0003A8, "Member 'UCoreMarketingInvitationPopupWidget::KeyArtImage' has a wrong offset!");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, RewardsContainer) == 0x0003B0, "Member 'UCoreMarketingInvitationPopupWidget::RewardsContainer' has a wrong offset!");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, RewardsIconContainer) == 0x0003B8, "Member 'UCoreMarketingInvitationPopupWidget::RewardsIconContainer' has a wrong offset!");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, RewardsBackgroundImage) == 0x0003C0, "Member 'UCoreMarketingInvitationPopupWidget::RewardsBackgroundImage' has a wrong offset!");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, OptOutToggleButton) == 0x0003C8, "Member 'UCoreMarketingInvitationPopupWidget::OptOutToggleButton' has a wrong offset!");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, PromoVideoContainer) == 0x0003D0, "Member 'UCoreMarketingInvitationPopupWidget::PromoVideoContainer' has a wrong offset!");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, PromoVideoTitleTB) == 0x0003D8, "Member 'UCoreMarketingInvitationPopupWidget::PromoVideoTitleTB' has a wrong offset!");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, WatchVideoInputSwitcher) == 0x0003E0, "Member 'UCoreMarketingInvitationPopupWidget::WatchVideoInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, RewardInstructionTB) == 0x0003E8, "Member 'UCoreMarketingInvitationPopupWidget::RewardInstructionTB' has a wrong offset!");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, _optOutToggleClickedDelegate) == 0x0003F0, "Member 'UCoreMarketingInvitationPopupWidget::_optOutToggleClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, _instructionButtonClickedDelegate) == 0x000400, "Member 'UCoreMarketingInvitationPopupWidget::_instructionButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreMarketingInvitationPopupWidget, _watchVideoClickedDelegate) == 0x000410, "Member 'UCoreMarketingInvitationPopupWidget::_watchVideoClickedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreMatchmakingWidget
// 0x00B8 (0x03D8 - 0x0320)
class UCoreMatchmakingWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreMatchmakingReadyMarkerWidget*      MatchmakingReadyMarker;                            // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      MatchmakingStatusRTB;                              // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          KillerNameTB;                                      // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              BackgroundSmokeIMG;                                // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                ScaleformSpacer;                                   // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EMatchmakingPlayerState, struct FSlateColor> _statusTextColor;                              // 0x0350(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A0[0x38];                                     // 0x03A0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayTextAnimation(bool Play);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMatchmakingWidget">();
	}
	static class UCoreMatchmakingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMatchmakingWidget>();
	}
};
static_assert(alignof(UCoreMatchmakingWidget) == 0x000008, "Wrong alignment on UCoreMatchmakingWidget");
static_assert(sizeof(UCoreMatchmakingWidget) == 0x0003D8, "Wrong size on UCoreMatchmakingWidget");
static_assert(offsetof(UCoreMatchmakingWidget, MatchmakingReadyMarker) == 0x000328, "Member 'UCoreMatchmakingWidget::MatchmakingReadyMarker' has a wrong offset!");
static_assert(offsetof(UCoreMatchmakingWidget, MatchmakingStatusRTB) == 0x000330, "Member 'UCoreMatchmakingWidget::MatchmakingStatusRTB' has a wrong offset!");
static_assert(offsetof(UCoreMatchmakingWidget, KillerNameTB) == 0x000338, "Member 'UCoreMatchmakingWidget::KillerNameTB' has a wrong offset!");
static_assert(offsetof(UCoreMatchmakingWidget, BackgroundSmokeIMG) == 0x000340, "Member 'UCoreMatchmakingWidget::BackgroundSmokeIMG' has a wrong offset!");
static_assert(offsetof(UCoreMatchmakingWidget, ScaleformSpacer) == 0x000348, "Member 'UCoreMatchmakingWidget::ScaleformSpacer' has a wrong offset!");
static_assert(offsetof(UCoreMatchmakingWidget, _statusTextColor) == 0x000350, "Member 'UCoreMatchmakingWidget::_statusTextColor' has a wrong offset!");

// Class DBDUIViewsCore.CoreMenuClassWidget
// 0x0010 (0x05C0 - 0x05B0)
class UCoreMenuClassWidget final : public UCoreMenuLoadoutPartWidget
{
public:
	class UOverlay*                               StackCountOverlay;                                 // 0x05B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5B8[0x8];                                      // 0x05B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateFullState(bool isFull);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMenuClassWidget">();
	}
	static class UCoreMenuClassWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMenuClassWidget>();
	}
};
static_assert(alignof(UCoreMenuClassWidget) == 0x000008, "Wrong alignment on UCoreMenuClassWidget");
static_assert(sizeof(UCoreMenuClassWidget) == 0x0005C0, "Wrong size on UCoreMenuClassWidget");
static_assert(offsetof(UCoreMenuClassWidget, StackCountOverlay) == 0x0005B0, "Member 'UCoreMenuClassWidget::StackCountOverlay' has a wrong offset!");

// Class DBDUIViewsCore.CoreMenuOfferingWidget
// 0x0000 (0x05B0 - 0x05B0)
class UCoreMenuOfferingWidget final : public UCoreMenuLoadoutPartWidget
{
public:
	void SetHiddenOffering(bool IsHidden);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMenuOfferingWidget">();
	}
	static class UCoreMenuOfferingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMenuOfferingWidget>();
	}
};
static_assert(alignof(UCoreMenuOfferingWidget) == 0x000008, "Wrong alignment on UCoreMenuOfferingWidget");
static_assert(sizeof(UCoreMenuOfferingWidget) == 0x0005B0, "Wrong size on UCoreMenuOfferingWidget");

// Class DBDUIViewsCore.CoreMenuPowerWidget
// 0x0000 (0x05B0 - 0x05B0)
class UCoreMenuPowerWidget final : public UCoreMenuLoadoutPartWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMenuPowerWidget">();
	}
	static class UCoreMenuPowerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMenuPowerWidget>();
	}
};
static_assert(alignof(UCoreMenuPowerWidget) == 0x000008, "Wrong alignment on UCoreMenuPowerWidget");
static_assert(sizeof(UCoreMenuPowerWidget) == 0x0005B0, "Wrong size on UCoreMenuPowerWidget");

// Class DBDUIViewsCore.CoreNewsWidget
// 0x00A0 (0x03C0 - 0x0320)
class UCoreNewsWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInboxHeaderWidget*                 Header;                                            // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         NewsArticleContent;                                // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           LoadingContainer;                                  // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreTabContainerWidget*                TabsContainer;                                     // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               ExternalLinkInputSwitcher;                         // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               CTAInputSwitcher;                                  // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      ScrollInputPrompt;                                 // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInboxBodyWidget*                   Body;                                              // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInboxKeyArtWidget*                 KeyArt;                                            // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInboxCallToActionWidget*           QRCodeWidget;                                      // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioEventWrapper*                     _openSfx;                                          // 0x0380(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioEventWrapper*                     _closeSfx;                                         // 0x0388(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_390[0x30];                                     // 0x0390(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackButtonClicked();
	void OnRedirectButtonClicked();
	void OnTabSelected(class UCoreSelectableButtonWidget* selectedButton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreNewsWidget">();
	}
	static class UCoreNewsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreNewsWidget>();
	}
};
static_assert(alignof(UCoreNewsWidget) == 0x000008, "Wrong alignment on UCoreNewsWidget");
static_assert(sizeof(UCoreNewsWidget) == 0x0003C0, "Wrong size on UCoreNewsWidget");
static_assert(offsetof(UCoreNewsWidget, Header) == 0x000328, "Member 'UCoreNewsWidget::Header' has a wrong offset!");
static_assert(offsetof(UCoreNewsWidget, NewsArticleContent) == 0x000330, "Member 'UCoreNewsWidget::NewsArticleContent' has a wrong offset!");
static_assert(offsetof(UCoreNewsWidget, LoadingContainer) == 0x000338, "Member 'UCoreNewsWidget::LoadingContainer' has a wrong offset!");
static_assert(offsetof(UCoreNewsWidget, TabsContainer) == 0x000340, "Member 'UCoreNewsWidget::TabsContainer' has a wrong offset!");
static_assert(offsetof(UCoreNewsWidget, BackInputSwitcher) == 0x000348, "Member 'UCoreNewsWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreNewsWidget, ExternalLinkInputSwitcher) == 0x000350, "Member 'UCoreNewsWidget::ExternalLinkInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreNewsWidget, CTAInputSwitcher) == 0x000358, "Member 'UCoreNewsWidget::CTAInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreNewsWidget, ScrollInputPrompt) == 0x000360, "Member 'UCoreNewsWidget::ScrollInputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreNewsWidget, Body) == 0x000368, "Member 'UCoreNewsWidget::Body' has a wrong offset!");
static_assert(offsetof(UCoreNewsWidget, KeyArt) == 0x000370, "Member 'UCoreNewsWidget::KeyArt' has a wrong offset!");
static_assert(offsetof(UCoreNewsWidget, QRCodeWidget) == 0x000378, "Member 'UCoreNewsWidget::QRCodeWidget' has a wrong offset!");
static_assert(offsetof(UCoreNewsWidget, _openSfx) == 0x000380, "Member 'UCoreNewsWidget::_openSfx' has a wrong offset!");
static_assert(offsetof(UCoreNewsWidget, _closeSfx) == 0x000388, "Member 'UCoreNewsWidget::_closeSfx' has a wrong offset!");

// Class DBDUIViewsCore.CoreOfferingWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreOfferingWidget final : public UCoreBaseLoadoutPartWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOfferingWidget">();
	}
	static class UCoreOfferingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOfferingWidget>();
	}
};
static_assert(alignof(UCoreOfferingWidget) == 0x000008, "Wrong alignment on UCoreOfferingWidget");
static_assert(sizeof(UCoreOfferingWidget) == 0x000358, "Wrong size on UCoreOfferingWidget");

// Class DBDUIViewsCore.CoreOnboardingMenuTitleWidget
// 0x0000 (0x0320 - 0x0320)
class UCoreOnboardingMenuTitleWidget final : public UCoreBaseUserWidget
{
public:
	void ResetOnboardingMenuSubtitle();
	void SetOnboardingMenuDoubleTitle(const class FText& menuTitle, const class FText& menuSubTitle);
	void SetOnboardingMenuSubtitle(const class FText& menuTitle);
	void SetOnboardingMenuTitle(const class FText& menuTitle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOnboardingMenuTitleWidget">();
	}
	static class UCoreOnboardingMenuTitleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOnboardingMenuTitleWidget>();
	}
};
static_assert(alignof(UCoreOnboardingMenuTitleWidget) == 0x000008, "Wrong alignment on UCoreOnboardingMenuTitleWidget");
static_assert(sizeof(UCoreOnboardingMenuTitleWidget) == 0x000320, "Wrong size on UCoreOnboardingMenuTitleWidget");

// Class DBDUIViewsCore.CoreOnboardingTutorialButtonWidget
// 0x00E0 (0x0590 - 0x04B0)
class UCoreOnboardingTutorialButtonWidget final : public UCoreButtonWidget
{
public:
	TMulticastInlineDelegate<void()>              OnSetDataAnimationCompleteDelegate;                // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	class FString                                 UnavailablePressedSfxName;                         // 0x04C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          UnavailablePressedSfx;                             // 0x04D0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          TitleText;                                         // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          descriptionText;                                   // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              RoleIcon;                                          // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        StateSwitcher;                                     // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              LockedImage;                                       // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              CompletedImage;                                    // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreRewardWrapperWidget*>       RewardWrappers;                                    // 0x0508(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FOnboardingTutorialButtonViewData      ViewData;                                          // 0x0518(0x0078)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)

public:
	void OnRewardClicked(class UCoreButtonWidget* buttonTarget);
	void OnRewardPressed(class UCoreButtonWidget* buttonTarget);
	void OnRewardReleased(class UCoreButtonWidget* buttonTarget);
	void SetData(const struct FOnboardingTutorialButtonViewData& ViewData_0, bool isRefreshingWithAnimation);
	void SetIsKillSwitch(bool isKillSwitch);
	void SetUIEnabled(bool Enabled);
	void SetVisual();

	bool IsInUnavailableStep() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOnboardingTutorialButtonWidget">();
	}
	static class UCoreOnboardingTutorialButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOnboardingTutorialButtonWidget>();
	}
};
static_assert(alignof(UCoreOnboardingTutorialButtonWidget) == 0x000008, "Wrong alignment on UCoreOnboardingTutorialButtonWidget");
static_assert(sizeof(UCoreOnboardingTutorialButtonWidget) == 0x000590, "Wrong size on UCoreOnboardingTutorialButtonWidget");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, OnSetDataAnimationCompleteDelegate) == 0x0004B0, "Member 'UCoreOnboardingTutorialButtonWidget::OnSetDataAnimationCompleteDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, UnavailablePressedSfxName) == 0x0004C0, "Member 'UCoreOnboardingTutorialButtonWidget::UnavailablePressedSfxName' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, UnavailablePressedSfx) == 0x0004D0, "Member 'UCoreOnboardingTutorialButtonWidget::UnavailablePressedSfx' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, TitleText) == 0x0004D8, "Member 'UCoreOnboardingTutorialButtonWidget::TitleText' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, descriptionText) == 0x0004E0, "Member 'UCoreOnboardingTutorialButtonWidget::descriptionText' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, RoleIcon) == 0x0004E8, "Member 'UCoreOnboardingTutorialButtonWidget::RoleIcon' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, StateSwitcher) == 0x0004F0, "Member 'UCoreOnboardingTutorialButtonWidget::StateSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, LockedImage) == 0x0004F8, "Member 'UCoreOnboardingTutorialButtonWidget::LockedImage' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, CompletedImage) == 0x000500, "Member 'UCoreOnboardingTutorialButtonWidget::CompletedImage' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, RewardWrappers) == 0x000508, "Member 'UCoreOnboardingTutorialButtonWidget::RewardWrappers' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, ViewData) == 0x000518, "Member 'UCoreOnboardingTutorialButtonWidget::ViewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreOnHoverBorderWidget
// 0x0000 (0x0320 - 0x0320)
class UCoreOnHoverBorderWidget : public UCoreBaseUserWidget
{
public:
	void BindToButton(class UCoreButtonWidget* buttonToBindOn);
	void PlayHoveredAnimation(bool playForward);
	void PlayPressedAnimation(bool playForward);
	void UnbindFromButton();
	void UpdateBorderSize(int32 Thickness, const struct FVector2D& desiredSize);
	void UpdateColors(const struct FLinearColor& progressBarColor, const struct FLinearColor& BackgroundColor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOnHoverBorderWidget">();
	}
	static class UCoreOnHoverBorderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOnHoverBorderWidget>();
	}
};
static_assert(alignof(UCoreOnHoverBorderWidget) == 0x000008, "Wrong alignment on UCoreOnHoverBorderWidget");
static_assert(sizeof(UCoreOnHoverBorderWidget) == 0x000320, "Wrong size on UCoreOnHoverBorderWidget");

// Class DBDUIViewsCore.CorePaginationContainerWidget
// 0x00E0 (0x0470 - 0x0390)
class UCorePaginationContainerWidget final : public UCoreButtonSelector
{
public:
	TMulticastInlineDelegate<void(int32 selectedPage, bool isUpdate)> OnSelectedPageDelegate;        // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UCoreSelectableButtonWidget> PaginationWidgetClass;                            // 0x03A0(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxNumberOfPages;                                  // 0x03A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanLoop;                                           // 0x03AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShowPageNumbers;                                   // 0x03AD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3AE[0x2];                                      // 0x03AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                WidgetPadding;                                     // 0x03B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	int32                                         PreviewSelectedPageIndex;                          // 0x03C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PreviewNumberOfPages;                              // 0x03C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             PaginationContainer;                               // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSelectableButtonWidget*            FirstPage;                                         // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          FirstEllipsis;                                     // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LastEllipsis;                                      // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSelectableButtonWidget*            LastPage;                                          // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreSelectableButtonWidget*>    _paginationWidgetList;                             // 0x03F0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<int32, class UCoreSelectableButtonWidget*> _pageWidgetMap;                                  // 0x0400(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_450[0x20];                                     // 0x0450(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCoreSelectableButtonWidget* CreatePaginationWidget(int32 Index_0);
	void OnPaginationSelected(class UCoreSelectableButtonWidget* selectedButton);
	void UpdateSelectedWidget(int32 currentIndex, int32 numberOfPages);

	int32 GetCurrentPage() const;
	int32 GetNumberOfPages() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePaginationContainerWidget">();
	}
	static class UCorePaginationContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePaginationContainerWidget>();
	}
};
static_assert(alignof(UCorePaginationContainerWidget) == 0x000008, "Wrong alignment on UCorePaginationContainerWidget");
static_assert(sizeof(UCorePaginationContainerWidget) == 0x000470, "Wrong size on UCorePaginationContainerWidget");
static_assert(offsetof(UCorePaginationContainerWidget, OnSelectedPageDelegate) == 0x000390, "Member 'UCorePaginationContainerWidget::OnSelectedPageDelegate' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, PaginationWidgetClass) == 0x0003A0, "Member 'UCorePaginationContainerWidget::PaginationWidgetClass' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, MaxNumberOfPages) == 0x0003A8, "Member 'UCorePaginationContainerWidget::MaxNumberOfPages' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, CanLoop) == 0x0003AC, "Member 'UCorePaginationContainerWidget::CanLoop' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, ShowPageNumbers) == 0x0003AD, "Member 'UCorePaginationContainerWidget::ShowPageNumbers' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, WidgetPadding) == 0x0003B0, "Member 'UCorePaginationContainerWidget::WidgetPadding' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, PreviewSelectedPageIndex) == 0x0003C0, "Member 'UCorePaginationContainerWidget::PreviewSelectedPageIndex' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, PreviewNumberOfPages) == 0x0003C4, "Member 'UCorePaginationContainerWidget::PreviewNumberOfPages' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, PaginationContainer) == 0x0003C8, "Member 'UCorePaginationContainerWidget::PaginationContainer' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, FirstPage) == 0x0003D0, "Member 'UCorePaginationContainerWidget::FirstPage' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, FirstEllipsis) == 0x0003D8, "Member 'UCorePaginationContainerWidget::FirstEllipsis' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, LastEllipsis) == 0x0003E0, "Member 'UCorePaginationContainerWidget::LastEllipsis' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, LastPage) == 0x0003E8, "Member 'UCorePaginationContainerWidget::LastPage' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, _paginationWidgetList) == 0x0003F0, "Member 'UCorePaginationContainerWidget::_paginationWidgetList' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, _pageWidgetMap) == 0x000400, "Member 'UCorePaginationContainerWidget::_pageWidgetMap' has a wrong offset!");

// Class DBDUIViewsCore.CorePingStatusWidget
// 0x0008 (0x0358 - 0x0350)
class UCorePingStatusWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePingStatusWidget">();
	}
	static class UCorePingStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePingStatusWidget>();
	}
};
static_assert(alignof(UCorePingStatusWidget) == 0x000008, "Wrong alignment on UCorePingStatusWidget");
static_assert(sizeof(UCorePingStatusWidget) == 0x000358, "Wrong size on UCorePingStatusWidget");

// Class DBDUIViewsCore.CorePlayerCardWidget
// 0x0018 (0x0338 - 0x0320)
class UCorePlayerCardWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDImage*                              Icon;                                              // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               AnimationContainer;                                // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerCardWidget">();
	}
	static class UCorePlayerCardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerCardWidget>();
	}
};
static_assert(alignof(UCorePlayerCardWidget) == 0x000008, "Wrong alignment on UCorePlayerCardWidget");
static_assert(sizeof(UCorePlayerCardWidget) == 0x000338, "Wrong size on UCorePlayerCardWidget");
static_assert(offsetof(UCorePlayerCardWidget, Icon) == 0x000328, "Member 'UCorePlayerCardWidget::Icon' has a wrong offset!");
static_assert(offsetof(UCorePlayerCardWidget, AnimationContainer) == 0x000330, "Member 'UCorePlayerCardWidget::AnimationContainer' has a wrong offset!");

// Class DBDUIViewsCore.CorePlayerLevelTooltipWidget
// 0x0040 (0x0370 - 0x0330)
class UCorePlayerLevelTooltipWidget final : public UTooltipWidget
{
public:
	class UDBDTextBlock*                          TitleTB;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          XPCurrentTitleTB;                                  // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          XPTB;                                              // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          XPNextTitleTB;                                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          NextXpTB;                                          // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PlayerLevelTitleTB;                                // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PrestigeTitleTB;                                   // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      InfoTB;                                            // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetTooltipData(const struct FCorePlayerLevelTooltipViewData& ViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerLevelTooltipWidget">();
	}
	static class UCorePlayerLevelTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerLevelTooltipWidget>();
	}
};
static_assert(alignof(UCorePlayerLevelTooltipWidget) == 0x000008, "Wrong alignment on UCorePlayerLevelTooltipWidget");
static_assert(sizeof(UCorePlayerLevelTooltipWidget) == 0x000370, "Wrong size on UCorePlayerLevelTooltipWidget");
static_assert(offsetof(UCorePlayerLevelTooltipWidget, TitleTB) == 0x000330, "Member 'UCorePlayerLevelTooltipWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCorePlayerLevelTooltipWidget, XPCurrentTitleTB) == 0x000338, "Member 'UCorePlayerLevelTooltipWidget::XPCurrentTitleTB' has a wrong offset!");
static_assert(offsetof(UCorePlayerLevelTooltipWidget, XPTB) == 0x000340, "Member 'UCorePlayerLevelTooltipWidget::XPTB' has a wrong offset!");
static_assert(offsetof(UCorePlayerLevelTooltipWidget, XPNextTitleTB) == 0x000348, "Member 'UCorePlayerLevelTooltipWidget::XPNextTitleTB' has a wrong offset!");
static_assert(offsetof(UCorePlayerLevelTooltipWidget, NextXpTB) == 0x000350, "Member 'UCorePlayerLevelTooltipWidget::NextXpTB' has a wrong offset!");
static_assert(offsetof(UCorePlayerLevelTooltipWidget, PlayerLevelTitleTB) == 0x000358, "Member 'UCorePlayerLevelTooltipWidget::PlayerLevelTitleTB' has a wrong offset!");
static_assert(offsetof(UCorePlayerLevelTooltipWidget, PrestigeTitleTB) == 0x000360, "Member 'UCorePlayerLevelTooltipWidget::PrestigeTitleTB' has a wrong offset!");
static_assert(offsetof(UCorePlayerLevelTooltipWidget, InfoTB) == 0x000368, "Member 'UCorePlayerLevelTooltipWidget::InfoTB' has a wrong offset!");

// Class DBDUIViewsCore.CorePlayerNameWidget
// 0x0008 (0x0328 - 0x0320)
class UCorePlayerNameWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDTextBlock*                          PlayerNameTB;                                      // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetPlayerName(const class FText& PlayerName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerNameWidget">();
	}
	static class UCorePlayerNameWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerNameWidget>();
	}
};
static_assert(alignof(UCorePlayerNameWidget) == 0x000008, "Wrong alignment on UCorePlayerNameWidget");
static_assert(sizeof(UCorePlayerNameWidget) == 0x000328, "Wrong size on UCorePlayerNameWidget");
static_assert(offsetof(UCorePlayerNameWidget, PlayerNameTB) == 0x000320, "Member 'UCorePlayerNameWidget::PlayerNameTB' has a wrong offset!");

// Class DBDUIViewsCore.CorePlayerRankWidget
// 0x0108 (0x05B8 - 0x04B0)
class UCorePlayerRankWidget : public UCoreButtonWidget
{
public:
	struct FCoreRankWidgetConfiguration           _widgetConfiguration;                              // 0x04B0(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          _showTooltipOnHover;                               // 0x05A0(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5A1[0x7];                                      // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDImage*                              LevelBG;                                           // 0x05A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              RankNumberImage;                                   // 0x05B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AnimateRankUp();
	void SetData(const struct FRankViewData& Data);
	void SetRankImageAndText(const int32 rankIndex, const bool IsKiller);

	struct FCoreRankWidgetConfiguration GetConfiguration() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerRankWidget">();
	}
	static class UCorePlayerRankWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerRankWidget>();
	}
};
static_assert(alignof(UCorePlayerRankWidget) == 0x000008, "Wrong alignment on UCorePlayerRankWidget");
static_assert(sizeof(UCorePlayerRankWidget) == 0x0005B8, "Wrong size on UCorePlayerRankWidget");
static_assert(offsetof(UCorePlayerRankWidget, _widgetConfiguration) == 0x0004B0, "Member 'UCorePlayerRankWidget::_widgetConfiguration' has a wrong offset!");
static_assert(offsetof(UCorePlayerRankWidget, _showTooltipOnHover) == 0x0005A0, "Member 'UCorePlayerRankWidget::_showTooltipOnHover' has a wrong offset!");
static_assert(offsetof(UCorePlayerRankWidget, LevelBG) == 0x0005A8, "Member 'UCorePlayerRankWidget::LevelBG' has a wrong offset!");
static_assert(offsetof(UCorePlayerRankWidget, RankNumberImage) == 0x0005B0, "Member 'UCorePlayerRankWidget::RankNumberImage' has a wrong offset!");

// Class DBDUIViewsCore.CorePlayerSocialOptionsMenuWidget
// 0x0040 (0x0360 - 0x0320)
class UCorePlayerSocialOptionsMenuWidget final : public UCoreBaseUserWidget
{
public:
	TSubclassOf<class UCorePlayerSocialOptionButtonWidget> PlayerSocialOptionButtonWidgetClass;      // 0x0320(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedItemsCount;                         // 0x0328(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBox*                           PlayerSocialOptionButtonContainer;                 // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _playerSocialOptionButtons;                        // 0x0338(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FPlayerSocialOptionViewData>    _data;                                             // 0x0340(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const struct FPlayerSocialOptionViewData& optionData)> _onClickedPlayerSocialOptionDelegate; // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void Hide();
	void OnPlayerSocialOptionButtonClicked(class UCoreButtonWidget* Button);
	void SetData(const TArray<struct FPlayerSocialOptionViewData>& Data);
	void Show();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerSocialOptionsMenuWidget">();
	}
	static class UCorePlayerSocialOptionsMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerSocialOptionsMenuWidget>();
	}
};
static_assert(alignof(UCorePlayerSocialOptionsMenuWidget) == 0x000008, "Wrong alignment on UCorePlayerSocialOptionsMenuWidget");
static_assert(sizeof(UCorePlayerSocialOptionsMenuWidget) == 0x000360, "Wrong size on UCorePlayerSocialOptionsMenuWidget");
static_assert(offsetof(UCorePlayerSocialOptionsMenuWidget, PlayerSocialOptionButtonWidgetClass) == 0x000320, "Member 'UCorePlayerSocialOptionsMenuWidget::PlayerSocialOptionButtonWidgetClass' has a wrong offset!");
static_assert(offsetof(UCorePlayerSocialOptionsMenuWidget, _preConstructedItemsCount) == 0x000328, "Member 'UCorePlayerSocialOptionsMenuWidget::_preConstructedItemsCount' has a wrong offset!");
static_assert(offsetof(UCorePlayerSocialOptionsMenuWidget, PlayerSocialOptionButtonContainer) == 0x000330, "Member 'UCorePlayerSocialOptionsMenuWidget::PlayerSocialOptionButtonContainer' has a wrong offset!");
static_assert(offsetof(UCorePlayerSocialOptionsMenuWidget, _playerSocialOptionButtons) == 0x000338, "Member 'UCorePlayerSocialOptionsMenuWidget::_playerSocialOptionButtons' has a wrong offset!");
static_assert(offsetof(UCorePlayerSocialOptionsMenuWidget, _data) == 0x000340, "Member 'UCorePlayerSocialOptionsMenuWidget::_data' has a wrong offset!");
static_assert(offsetof(UCorePlayerSocialOptionsMenuWidget, _onClickedPlayerSocialOptionDelegate) == 0x000350, "Member 'UCorePlayerSocialOptionsMenuWidget::_onClickedPlayerSocialOptionDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CorePlayerStatusWidget
// 0x01B8 (0x0508 - 0x0350)
class UCorePlayerStatusWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNameLength;                                     // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPlayerStatus, struct FPlayerStatusAssets> PlayerStatusAssets;                              // 0x0360(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ObsessionSfx;                                      // 0x03B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PlayerNameTextfield;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               KillerStatusContainer;                             // 0x03C0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               SecondaryKillerStatusContainer1;                   // 0x03C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               SecondaryKillerStatusContainer2;                   // 0x03D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPlayerStatusViewData                  _cachedViewData;                                   // 0x03D8(0x00B0)(BlueprintVisible, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_488[0x50];                                     // 0x0488(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	EPlayerStatusTemplate                         _cachedDebugPlayerStatusTemplate;                  // 0x04D8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D9[0x7];                                      // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCorePlayerStatusKillerEffectWidget*> _killersStatusEffectWidget;                   // 0x04E0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCorePlayerStatusKillerEffectWidget*> _secondaryKillersStatusEffectWidgets;         // 0x04F0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UDataTable*                             _killerStatusDataMappingDB;                        // 0x0500(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	struct FPlayerStatusViewData CacheViewData(const struct FPlayerStatusViewData& Data);

	TArray<class UCorePlayerStatusKillerEffectWidget*> GetKillersStatusEffectWidget() const;
	class UDataTable* GetKillerStatusDataMappingDB() const;
	EPlayerStateChangeType GetPlayerStateChangeType(const struct FPlayerStatusViewData& newViewData) const;
	TArray<class UCorePlayerStatusKillerEffectWidget*> GetSecondaryKillersStatusEffectWidgets() const;
	bool HasKillerStatusDataChanged(const struct FPlayerStatusViewData& newViewData) const;
	bool HasObsessionStateChanged(EObsessionUIState newObsessionState) const;
	bool HasPlayerStateChanged(EPlayerStatus newPlayerState) const;
	bool HasPlayerStatusDataChanged(const struct FPlayerStatusViewData& newViewData) const;
	bool HasTimerProgressChanged(float newTimerProgress) const;
	bool ShouldPlaySleepAnimation(ESleepingUIState newSleepState) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerStatusWidget">();
	}
	static class UCorePlayerStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerStatusWidget>();
	}
};
static_assert(alignof(UCorePlayerStatusWidget) == 0x000008, "Wrong alignment on UCorePlayerStatusWidget");
static_assert(sizeof(UCorePlayerStatusWidget) == 0x000508, "Wrong size on UCorePlayerStatusWidget");
static_assert(offsetof(UCorePlayerStatusWidget, MaxNameLength) == 0x000358, "Member 'UCorePlayerStatusWidget::MaxNameLength' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, PlayerStatusAssets) == 0x000360, "Member 'UCorePlayerStatusWidget::PlayerStatusAssets' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, ObsessionSfx) == 0x0003B0, "Member 'UCorePlayerStatusWidget::ObsessionSfx' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, PlayerNameTextfield) == 0x0003B8, "Member 'UCorePlayerStatusWidget::PlayerNameTextfield' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, KillerStatusContainer) == 0x0003C0, "Member 'UCorePlayerStatusWidget::KillerStatusContainer' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, SecondaryKillerStatusContainer1) == 0x0003C8, "Member 'UCorePlayerStatusWidget::SecondaryKillerStatusContainer1' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, SecondaryKillerStatusContainer2) == 0x0003D0, "Member 'UCorePlayerStatusWidget::SecondaryKillerStatusContainer2' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, _cachedViewData) == 0x0003D8, "Member 'UCorePlayerStatusWidget::_cachedViewData' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, _cachedDebugPlayerStatusTemplate) == 0x0004D8, "Member 'UCorePlayerStatusWidget::_cachedDebugPlayerStatusTemplate' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, _killersStatusEffectWidget) == 0x0004E0, "Member 'UCorePlayerStatusWidget::_killersStatusEffectWidget' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, _secondaryKillersStatusEffectWidgets) == 0x0004F0, "Member 'UCorePlayerStatusWidget::_secondaryKillersStatusEffectWidgets' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, _killerStatusDataMappingDB) == 0x000500, "Member 'UCorePlayerStatusWidget::_killerStatusDataMappingDB' has a wrong offset!");

// Class DBDUIViewsCore.CorePowerWidget
// 0x0008 (0x0358 - 0x0350)
class UCorePowerWidget final : public UCoreBaseLoadoutPartWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePowerWidget">();
	}
	static class UCorePowerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePowerWidget>();
	}
};
static_assert(alignof(UCorePowerWidget) == 0x000008, "Wrong alignment on UCorePowerWidget");
static_assert(sizeof(UCorePowerWidget) == 0x000358, "Wrong size on UCorePowerWidget");

// Class DBDUIViewsCore.CorePremiumCurrencyButtonWidget
// 0x0008 (0x04B8 - 0x04B0)
class UCorePremiumCurrencyButtonWidget final : public UCoreButtonWidget
{
public:
	class UDBDTextBlock*                          PriceTextBlock;                                    // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetPrice(const class FText& PriceText) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePremiumCurrencyButtonWidget">();
	}
	static class UCorePremiumCurrencyButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePremiumCurrencyButtonWidget>();
	}
};
static_assert(alignof(UCorePremiumCurrencyButtonWidget) == 0x000008, "Wrong alignment on UCorePremiumCurrencyButtonWidget");
static_assert(sizeof(UCorePremiumCurrencyButtonWidget) == 0x0004B8, "Wrong size on UCorePremiumCurrencyButtonWidget");
static_assert(offsetof(UCorePremiumCurrencyButtonWidget, PriceTextBlock) == 0x0004B0, "Member 'UCorePremiumCurrencyButtonWidget::PriceTextBlock' has a wrong offset!");

// Class DBDUIViewsCore.CorePresetWidget
// 0x0028 (0x0500 - 0x04D8)
class UCorePresetWidget final : public UCoreSelectableButtonWidget
{
public:
	class UDBDTextBlock*                          PresetIdTB;                                        // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           SelectedContainer;                                 // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              IsPreviewingCustomizationsTagIMG;                  // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F8[0x8];                                      // 0x04F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPresetButtonHovered(class UCoreButtonWidget* buttonTarget);
	void OnPresetButtonUnhovered(class UCoreButtonWidget* buttonTarget);
	void SetData(const int32 presetId);
	void SetIsPreviewingAnyCustomization(const bool isPreviewingAnyCustomization);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePresetWidget">();
	}
	static class UCorePresetWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePresetWidget>();
	}
};
static_assert(alignof(UCorePresetWidget) == 0x000008, "Wrong alignment on UCorePresetWidget");
static_assert(sizeof(UCorePresetWidget) == 0x000500, "Wrong size on UCorePresetWidget");
static_assert(offsetof(UCorePresetWidget, PresetIdTB) == 0x0004D8, "Member 'UCorePresetWidget::PresetIdTB' has a wrong offset!");
static_assert(offsetof(UCorePresetWidget, SelectedContainer) == 0x0004E0, "Member 'UCorePresetWidget::SelectedContainer' has a wrong offset!");
static_assert(offsetof(UCorePresetWidget, OnHoverBorder) == 0x0004E8, "Member 'UCorePresetWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCorePresetWidget, IsPreviewingCustomizationsTagIMG) == 0x0004F0, "Member 'UCorePresetWidget::IsPreviewingCustomizationsTagIMG' has a wrong offset!");

// Class DBDUIViewsCore.CorePrestigeWidget
// 0x0188 (0x0638 - 0x04B0)
class UCorePrestigeWidget final : public UCoreButtonWidget
{
public:
	class UDBDImage*                              PrestigeImage;                                     // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               ProgressOverlay;                                   // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ProgressBackgroundImage;                           // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ProgressFillImage;                                 // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ClawImage;                                         // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              OrnamentImage;                                     // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PrestigeLevelTB;                                   // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCorePrestigeWidgetConfiguration       _widgetConfiguration;                              // 0x04E8(0x0140)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          _showProgress;                                     // 0x0628(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _showClaws;                                        // 0x0629(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_62A[0x2];                                      // 0x062A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _levelZeroPrestigeImageRenderOpacity;              // 0x062C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPrestigeViewData                      _prestigeData;                                     // 0x0630(0x0008)(BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	void PlayTransitionAnimation();
	void SetClawVisibility(bool Show);
	void SetData(const struct FPrestigeViewData& Data, bool hideClaws);
	void SetProgressVisibility(bool Show);
	void UpdateImagesAndText(const struct FPrestigeViewData& Data);

	void UpdateComponentVisibility() const;
	void UpdatePrestigeImageOpacity() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePrestigeWidget">();
	}
	static class UCorePrestigeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePrestigeWidget>();
	}
};
static_assert(alignof(UCorePrestigeWidget) == 0x000008, "Wrong alignment on UCorePrestigeWidget");
static_assert(sizeof(UCorePrestigeWidget) == 0x000638, "Wrong size on UCorePrestigeWidget");
static_assert(offsetof(UCorePrestigeWidget, PrestigeImage) == 0x0004B0, "Member 'UCorePrestigeWidget::PrestigeImage' has a wrong offset!");
static_assert(offsetof(UCorePrestigeWidget, ProgressOverlay) == 0x0004B8, "Member 'UCorePrestigeWidget::ProgressOverlay' has a wrong offset!");
static_assert(offsetof(UCorePrestigeWidget, ProgressBackgroundImage) == 0x0004C0, "Member 'UCorePrestigeWidget::ProgressBackgroundImage' has a wrong offset!");
static_assert(offsetof(UCorePrestigeWidget, ProgressFillImage) == 0x0004C8, "Member 'UCorePrestigeWidget::ProgressFillImage' has a wrong offset!");
static_assert(offsetof(UCorePrestigeWidget, ClawImage) == 0x0004D0, "Member 'UCorePrestigeWidget::ClawImage' has a wrong offset!");
static_assert(offsetof(UCorePrestigeWidget, OrnamentImage) == 0x0004D8, "Member 'UCorePrestigeWidget::OrnamentImage' has a wrong offset!");
static_assert(offsetof(UCorePrestigeWidget, PrestigeLevelTB) == 0x0004E0, "Member 'UCorePrestigeWidget::PrestigeLevelTB' has a wrong offset!");
static_assert(offsetof(UCorePrestigeWidget, _widgetConfiguration) == 0x0004E8, "Member 'UCorePrestigeWidget::_widgetConfiguration' has a wrong offset!");
static_assert(offsetof(UCorePrestigeWidget, _showProgress) == 0x000628, "Member 'UCorePrestigeWidget::_showProgress' has a wrong offset!");
static_assert(offsetof(UCorePrestigeWidget, _showClaws) == 0x000629, "Member 'UCorePrestigeWidget::_showClaws' has a wrong offset!");
static_assert(offsetof(UCorePrestigeWidget, _levelZeroPrestigeImageRenderOpacity) == 0x00062C, "Member 'UCorePrestigeWidget::_levelZeroPrestigeImageRenderOpacity' has a wrong offset!");
static_assert(offsetof(UCorePrestigeWidget, _prestigeData) == 0x000630, "Member 'UCorePrestigeWidget::_prestigeData' has a wrong offset!");

// Class DBDUIViewsCore.CoreProfileMenuWidget
// 0x0058 (0x0378 - 0x0320)
class UCoreProfileMenuWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreTabContainerWidget*                TabsContainer;                                     // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreFooterInputSwitcherWidget*         SettingsInputSwitcher;                             // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreKeyListenerInputPromptWidget*      ScrollPrompt;                                      // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              _backButtonClickedDelegate;                        // 0x0348(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _settingsButtonClickedDelegate;                    // 0x0358(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const EProfileMenuState menuState)> _menuTabSelectedDelegate;      // 0x0368(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void OnBackButtonClicked();
	void OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreProfileMenuWidget">();
	}
	static class UCoreProfileMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreProfileMenuWidget>();
	}
};
static_assert(alignof(UCoreProfileMenuWidget) == 0x000008, "Wrong alignment on UCoreProfileMenuWidget");
static_assert(sizeof(UCoreProfileMenuWidget) == 0x000378, "Wrong size on UCoreProfileMenuWidget");
static_assert(offsetof(UCoreProfileMenuWidget, TabsContainer) == 0x000328, "Member 'UCoreProfileMenuWidget::TabsContainer' has a wrong offset!");
static_assert(offsetof(UCoreProfileMenuWidget, BackInputSwitcher) == 0x000330, "Member 'UCoreProfileMenuWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreProfileMenuWidget, SettingsInputSwitcher) == 0x000338, "Member 'UCoreProfileMenuWidget::SettingsInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreProfileMenuWidget, ScrollPrompt) == 0x000340, "Member 'UCoreProfileMenuWidget::ScrollPrompt' has a wrong offset!");
static_assert(offsetof(UCoreProfileMenuWidget, _backButtonClickedDelegate) == 0x000348, "Member 'UCoreProfileMenuWidget::_backButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreProfileMenuWidget, _settingsButtonClickedDelegate) == 0x000358, "Member 'UCoreProfileMenuWidget::_settingsButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreProfileMenuWidget, _menuTabSelectedDelegate) == 0x000368, "Member 'UCoreProfileMenuWidget::_menuTabSelectedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreRankTooltipWidget
// 0x0020 (0x0350 - 0x0330)
class UCoreRankTooltipWidget final : public UTooltipWidget
{
public:
	class UDBDTextBlock*                          TitleTB;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RankNameTB;                                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ProgressTB;                                        // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      InfoTB;                                            // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetTooltipData(const struct FRankTooltipViewData& ViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreRankTooltipWidget">();
	}
	static class UCoreRankTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreRankTooltipWidget>();
	}
};
static_assert(alignof(UCoreRankTooltipWidget) == 0x000008, "Wrong alignment on UCoreRankTooltipWidget");
static_assert(sizeof(UCoreRankTooltipWidget) == 0x000350, "Wrong size on UCoreRankTooltipWidget");
static_assert(offsetof(UCoreRankTooltipWidget, TitleTB) == 0x000330, "Member 'UCoreRankTooltipWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreRankTooltipWidget, RankNameTB) == 0x000338, "Member 'UCoreRankTooltipWidget::RankNameTB' has a wrong offset!");
static_assert(offsetof(UCoreRankTooltipWidget, ProgressTB) == 0x000340, "Member 'UCoreRankTooltipWidget::ProgressTB' has a wrong offset!");
static_assert(offsetof(UCoreRankTooltipWidget, InfoTB) == 0x000348, "Member 'UCoreRankTooltipWidget::InfoTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreRewardWrapperWidget
// 0x0038 (0x02E0 - 0x02A8)
class UCoreRewardWrapperWidget : public UUserWidget
{
public:
	TSubclassOf<class UCoreCharacterRewardWidget> CharacterRewardWidget;                             // 0x02A8(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreCurrencyProgressionRewardWidget> CurrencyProgressionRewardWidget;         // 0x02B0(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreCustomizationRewardWidget> CustomizationRewardWidget;                     // 0x02B8(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           RewardContainer;                                   // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                               SizeBox;                                           // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScaleBox*                              ScaleBox;                                          // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreRewardWidget*                      _rewardWidget;                                     // 0x02D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ClearData();
	void CreateRewardWidget(TSubclassOf<class UCoreRewardWidget> rewardClass);
	void SetData(const struct FRewardWrapperViewData& ViewData);
	void SetIsClickable(bool IsClickable);
	void SetIsLocked(bool IsLocked, bool PlayAnimation_0);
	void SetScaleToFit(float Size);
	void SetScaleUserSpecified(float Scale);
	void SetTooltipAlignment(const ETooltipHorizontalAlignment Alignment);

	class UCoreRewardWidget* GetRewardWidget() const;
	TSubclassOf<class UCoreRewardWidget> GetWidgetClassFromRewardType(ERewardType RewardType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreRewardWrapperWidget">();
	}
	static class UCoreRewardWrapperWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreRewardWrapperWidget>();
	}
};
static_assert(alignof(UCoreRewardWrapperWidget) == 0x000008, "Wrong alignment on UCoreRewardWrapperWidget");
static_assert(sizeof(UCoreRewardWrapperWidget) == 0x0002E0, "Wrong size on UCoreRewardWrapperWidget");
static_assert(offsetof(UCoreRewardWrapperWidget, CharacterRewardWidget) == 0x0002A8, "Member 'UCoreRewardWrapperWidget::CharacterRewardWidget' has a wrong offset!");
static_assert(offsetof(UCoreRewardWrapperWidget, CurrencyProgressionRewardWidget) == 0x0002B0, "Member 'UCoreRewardWrapperWidget::CurrencyProgressionRewardWidget' has a wrong offset!");
static_assert(offsetof(UCoreRewardWrapperWidget, CustomizationRewardWidget) == 0x0002B8, "Member 'UCoreRewardWrapperWidget::CustomizationRewardWidget' has a wrong offset!");
static_assert(offsetof(UCoreRewardWrapperWidget, RewardContainer) == 0x0002C0, "Member 'UCoreRewardWrapperWidget::RewardContainer' has a wrong offset!");
static_assert(offsetof(UCoreRewardWrapperWidget, SizeBox) == 0x0002C8, "Member 'UCoreRewardWrapperWidget::SizeBox' has a wrong offset!");
static_assert(offsetof(UCoreRewardWrapperWidget, ScaleBox) == 0x0002D0, "Member 'UCoreRewardWrapperWidget::ScaleBox' has a wrong offset!");
static_assert(offsetof(UCoreRewardWrapperWidget, _rewardWidget) == 0x0002D8, "Member 'UCoreRewardWrapperWidget::_rewardWidget' has a wrong offset!");

// Class DBDUIViewsCore.CoreScreenIndicatorsContainerWidget
// 0x0080 (0x03D0 - 0x0350)
class UCoreScreenIndicatorsContainerWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InactiveThreshold;                                 // 0x0358(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           container;                                         // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreScreenIndicatorWidget> ScreenIndicatorClass;                              // 0x0368(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FString, class UCoreScreenIndicatorWidget*> _screenIndicatorsMap;                     // 0x0370(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreScreenIndicatorWidget*>     _screenIndicatorsPool;                             // 0x03C0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	TMap<class FString, class UCoreScreenIndicatorWidget*> GetScreenIndicatorsMap();

	class FString FindScreenIndicatorKey(class UCoreScreenIndicatorWidget* Value) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreScreenIndicatorsContainerWidget">();
	}
	static class UCoreScreenIndicatorsContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreScreenIndicatorsContainerWidget>();
	}
};
static_assert(alignof(UCoreScreenIndicatorsContainerWidget) == 0x000008, "Wrong alignment on UCoreScreenIndicatorsContainerWidget");
static_assert(sizeof(UCoreScreenIndicatorsContainerWidget) == 0x0003D0, "Wrong size on UCoreScreenIndicatorsContainerWidget");
static_assert(offsetof(UCoreScreenIndicatorsContainerWidget, InactiveThreshold) == 0x000358, "Member 'UCoreScreenIndicatorsContainerWidget::InactiveThreshold' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorsContainerWidget, container) == 0x000360, "Member 'UCoreScreenIndicatorsContainerWidget::container' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorsContainerWidget, ScreenIndicatorClass) == 0x000368, "Member 'UCoreScreenIndicatorsContainerWidget::ScreenIndicatorClass' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorsContainerWidget, _screenIndicatorsMap) == 0x000370, "Member 'UCoreScreenIndicatorsContainerWidget::_screenIndicatorsMap' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorsContainerWidget, _screenIndicatorsPool) == 0x0003C0, "Member 'UCoreScreenIndicatorsContainerWidget::_screenIndicatorsPool' has a wrong offset!");

// Class DBDUIViewsCore.CoreSearchBarWidget
// 0x00C8 (0x03E8 - 0x0320)
class UCoreSearchBarWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDEditableTextBox*                    InputTextBox;                                      // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDButton*                             KeyboardButton;                                    // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDButton*                             ClearButton;                                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              SearchIcon;                                        // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_348[0x30];                                     // 0x0348(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _useAlphaNumericKeyboard;                          // 0x0378(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_379[0x3];                                      // 0x0379(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        _inputTextMaxCharacter;                            // 0x037C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FAnalyticsComponent                    _analytics;                                        // 0x0380(0x0040)(Edit, DisableEditOnTemplate, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C0[0x28];                                     // 0x03C0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClearButtonClicked();
	void OnKeyboardButtonClicked();
	void OnTextChanged(const class FText& InText);
	void OnTextCommitted(const class FText& InText, ETextCommit inCommitType);
	void OnTextInputChanged();
	void OnTextInputEntered();

	class FText GetEnteredText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSearchBarWidget">();
	}
	static class UCoreSearchBarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSearchBarWidget>();
	}
};
static_assert(alignof(UCoreSearchBarWidget) == 0x000008, "Wrong alignment on UCoreSearchBarWidget");
static_assert(sizeof(UCoreSearchBarWidget) == 0x0003E8, "Wrong size on UCoreSearchBarWidget");
static_assert(offsetof(UCoreSearchBarWidget, InputTextBox) == 0x000328, "Member 'UCoreSearchBarWidget::InputTextBox' has a wrong offset!");
static_assert(offsetof(UCoreSearchBarWidget, KeyboardButton) == 0x000330, "Member 'UCoreSearchBarWidget::KeyboardButton' has a wrong offset!");
static_assert(offsetof(UCoreSearchBarWidget, ClearButton) == 0x000338, "Member 'UCoreSearchBarWidget::ClearButton' has a wrong offset!");
static_assert(offsetof(UCoreSearchBarWidget, SearchIcon) == 0x000340, "Member 'UCoreSearchBarWidget::SearchIcon' has a wrong offset!");
static_assert(offsetof(UCoreSearchBarWidget, _useAlphaNumericKeyboard) == 0x000378, "Member 'UCoreSearchBarWidget::_useAlphaNumericKeyboard' has a wrong offset!");
static_assert(offsetof(UCoreSearchBarWidget, _inputTextMaxCharacter) == 0x00037C, "Member 'UCoreSearchBarWidget::_inputTextMaxCharacter' has a wrong offset!");
static_assert(offsetof(UCoreSearchBarWidget, _analytics) == 0x000380, "Member 'UCoreSearchBarWidget::_analytics' has a wrong offset!");

// Class DBDUIViewsCore.CoreSettingsOfferingsDisplayWidget
// 0x0020 (0x0340 - 0x0320)
class UCoreSettingsOfferingsDisplayWidget final : public UCoreBaseUserWidget
{
public:
	TArray<class UCoreMenuLoadoutPartWidget*>     _survivorOfferingWidgets;                          // 0x0320(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UCoreMenuLoadoutPartWidget*>     _killerOfferingWidgets;                            // 0x0330(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void OnOfferingHovered(class UCoreButtonWidget* hoveredOffering);
	void OnOfferingUnhovered(class UCoreButtonWidget* unhoveredOffering);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSettingsOfferingsDisplayWidget">();
	}
	static class UCoreSettingsOfferingsDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSettingsOfferingsDisplayWidget>();
	}
};
static_assert(alignof(UCoreSettingsOfferingsDisplayWidget) == 0x000008, "Wrong alignment on UCoreSettingsOfferingsDisplayWidget");
static_assert(sizeof(UCoreSettingsOfferingsDisplayWidget) == 0x000340, "Wrong size on UCoreSettingsOfferingsDisplayWidget");
static_assert(offsetof(UCoreSettingsOfferingsDisplayWidget, _survivorOfferingWidgets) == 0x000320, "Member 'UCoreSettingsOfferingsDisplayWidget::_survivorOfferingWidgets' has a wrong offset!");
static_assert(offsetof(UCoreSettingsOfferingsDisplayWidget, _killerOfferingWidgets) == 0x000330, "Member 'UCoreSettingsOfferingsDisplayWidget::_killerOfferingWidgets' has a wrong offset!");

// Class DBDUIViewsCore.CoreSettingsPlayerInfoButtonWidget
// 0x0080 (0x0530 - 0x04B0)
class UCoreSettingsPlayerInfoButtonWidget final : public UCoreButtonWidget
{
public:
	class UTexture2D*                             SurvivorIcon;                                      // 0x04B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             KillerIcon;                                        // 0x04B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CharacterNameTB;                                   // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          AccountNameTB;                                     // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PingTB;                                            // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              CrossplayIndicatorIcon;                            // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              BotTagIcon;                                        // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScaleBox*                              OfferingScaleBox;                                  // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuOfferingWidget*                Offering;                                          // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPlayerInfoData                        _playerInfoData;                                   // 0x04F8(0x0038)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void UpdateVisuals(const struct FPlayerInfoData& PlayerInfoData, bool isLocalPlayerSurvivor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSettingsPlayerInfoButtonWidget">();
	}
	static class UCoreSettingsPlayerInfoButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSettingsPlayerInfoButtonWidget>();
	}
};
static_assert(alignof(UCoreSettingsPlayerInfoButtonWidget) == 0x000008, "Wrong alignment on UCoreSettingsPlayerInfoButtonWidget");
static_assert(sizeof(UCoreSettingsPlayerInfoButtonWidget) == 0x000530, "Wrong size on UCoreSettingsPlayerInfoButtonWidget");
static_assert(offsetof(UCoreSettingsPlayerInfoButtonWidget, SurvivorIcon) == 0x0004B0, "Member 'UCoreSettingsPlayerInfoButtonWidget::SurvivorIcon' has a wrong offset!");
static_assert(offsetof(UCoreSettingsPlayerInfoButtonWidget, KillerIcon) == 0x0004B8, "Member 'UCoreSettingsPlayerInfoButtonWidget::KillerIcon' has a wrong offset!");
static_assert(offsetof(UCoreSettingsPlayerInfoButtonWidget, CharacterNameTB) == 0x0004C0, "Member 'UCoreSettingsPlayerInfoButtonWidget::CharacterNameTB' has a wrong offset!");
static_assert(offsetof(UCoreSettingsPlayerInfoButtonWidget, AccountNameTB) == 0x0004C8, "Member 'UCoreSettingsPlayerInfoButtonWidget::AccountNameTB' has a wrong offset!");
static_assert(offsetof(UCoreSettingsPlayerInfoButtonWidget, PingTB) == 0x0004D0, "Member 'UCoreSettingsPlayerInfoButtonWidget::PingTB' has a wrong offset!");
static_assert(offsetof(UCoreSettingsPlayerInfoButtonWidget, CrossplayIndicatorIcon) == 0x0004D8, "Member 'UCoreSettingsPlayerInfoButtonWidget::CrossplayIndicatorIcon' has a wrong offset!");
static_assert(offsetof(UCoreSettingsPlayerInfoButtonWidget, BotTagIcon) == 0x0004E0, "Member 'UCoreSettingsPlayerInfoButtonWidget::BotTagIcon' has a wrong offset!");
static_assert(offsetof(UCoreSettingsPlayerInfoButtonWidget, OfferingScaleBox) == 0x0004E8, "Member 'UCoreSettingsPlayerInfoButtonWidget::OfferingScaleBox' has a wrong offset!");
static_assert(offsetof(UCoreSettingsPlayerInfoButtonWidget, Offering) == 0x0004F0, "Member 'UCoreSettingsPlayerInfoButtonWidget::Offering' has a wrong offset!");
static_assert(offsetof(UCoreSettingsPlayerInfoButtonWidget, _playerInfoData) == 0x0004F8, "Member 'UCoreSettingsPlayerInfoButtonWidget::_playerInfoData' has a wrong offset!");

// Class DBDUIViewsCore.CoreSettingsSkillsDisplayWidget
// 0x0020 (0x0340 - 0x0320)
class UCoreSettingsSkillsDisplayWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x10];                                     // 0x0320(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCoreMenuSkillWidget*>           _skillWidgets;                                     // 0x0330(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void OnSkillClicked(class UCoreButtonWidget* Button);
	void OnSkillHovered(class UCoreButtonWidget* hoveredPerk);
	void OnSkillUnhovered(class UCoreButtonWidget* unhoveredPerk);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSettingsSkillsDisplayWidget">();
	}
	static class UCoreSettingsSkillsDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSettingsSkillsDisplayWidget>();
	}
};
static_assert(alignof(UCoreSettingsSkillsDisplayWidget) == 0x000008, "Wrong alignment on UCoreSettingsSkillsDisplayWidget");
static_assert(sizeof(UCoreSettingsSkillsDisplayWidget) == 0x000340, "Wrong size on UCoreSettingsSkillsDisplayWidget");
static_assert(offsetof(UCoreSettingsSkillsDisplayWidget, _skillWidgets) == 0x000330, "Member 'UCoreSettingsSkillsDisplayWidget::_skillWidgets' has a wrong offset!");

// Class DBDUIViewsCore.CoreSharedPerksTooltipWidget
// 0x0018 (0x0348 - 0x0330)
class UCoreSharedPerksTooltipWidget final : public UTooltipWidget
{
public:
	class UDBDTextBlock*                          TitleTB;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      DescriptionRTB;                                    // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      FreeTrialWarningRTB;                               // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSharedPerksTooltipWidget">();
	}
	static class UCoreSharedPerksTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSharedPerksTooltipWidget>();
	}
};
static_assert(alignof(UCoreSharedPerksTooltipWidget) == 0x000008, "Wrong alignment on UCoreSharedPerksTooltipWidget");
static_assert(sizeof(UCoreSharedPerksTooltipWidget) == 0x000348, "Wrong size on UCoreSharedPerksTooltipWidget");
static_assert(offsetof(UCoreSharedPerksTooltipWidget, TitleTB) == 0x000330, "Member 'UCoreSharedPerksTooltipWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreSharedPerksTooltipWidget, DescriptionRTB) == 0x000338, "Member 'UCoreSharedPerksTooltipWidget::DescriptionRTB' has a wrong offset!");
static_assert(offsetof(UCoreSharedPerksTooltipWidget, FreeTrialWarningRTB) == 0x000340, "Member 'UCoreSharedPerksTooltipWidget::FreeTrialWarningRTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreShrineOfSecretsWidget
// 0x00D8 (0x03F8 - 0x0320)
class UCoreShrineOfSecretsWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreShrineOfSecretsItemWidget> _shrineOfSecretsItemClass;                     // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TitleTB;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      SubtitleTB;                                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      TimerRTB;                                          // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         ItemsContainer;                                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          InfoTB;                                            // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      ScrollInputPrompt;                                 // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedItemsCount;                         // 0x0368(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioEventWrapper*                     _openSfx;                                          // 0x0370(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _shrineOfSecretsItems;                             // 0x0378(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_380[0x20];                                     // 0x0380(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FShrineOfSecretsViewData               _viewData;                                         // 0x03A0(0x0048)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E8[0x10];                                     // 0x03E8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackButtonClicked();
	void OnPurchaseButtonClicked(const struct FShrineOfSecretsItemViewData& ShrineOfSecretsItemViewData);
	void SetEventUi(const struct FShrineOfSecretsViewData& ShrineOfSecretsViewData);
	void UpdateTimer(int32 RemainingTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreShrineOfSecretsWidget">();
	}
	static class UCoreShrineOfSecretsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreShrineOfSecretsWidget>();
	}
};
static_assert(alignof(UCoreShrineOfSecretsWidget) == 0x000008, "Wrong alignment on UCoreShrineOfSecretsWidget");
static_assert(sizeof(UCoreShrineOfSecretsWidget) == 0x0003F8, "Wrong size on UCoreShrineOfSecretsWidget");
static_assert(offsetof(UCoreShrineOfSecretsWidget, _shrineOfSecretsItemClass) == 0x000328, "Member 'UCoreShrineOfSecretsWidget::_shrineOfSecretsItemClass' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsWidget, TitleTB) == 0x000330, "Member 'UCoreShrineOfSecretsWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsWidget, SubtitleTB) == 0x000338, "Member 'UCoreShrineOfSecretsWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsWidget, TimerRTB) == 0x000340, "Member 'UCoreShrineOfSecretsWidget::TimerRTB' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsWidget, ItemsContainer) == 0x000348, "Member 'UCoreShrineOfSecretsWidget::ItemsContainer' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsWidget, InfoTB) == 0x000350, "Member 'UCoreShrineOfSecretsWidget::InfoTB' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsWidget, BackInputSwitcher) == 0x000358, "Member 'UCoreShrineOfSecretsWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsWidget, ScrollInputPrompt) == 0x000360, "Member 'UCoreShrineOfSecretsWidget::ScrollInputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsWidget, _preConstructedItemsCount) == 0x000368, "Member 'UCoreShrineOfSecretsWidget::_preConstructedItemsCount' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsWidget, _openSfx) == 0x000370, "Member 'UCoreShrineOfSecretsWidget::_openSfx' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsWidget, _shrineOfSecretsItems) == 0x000378, "Member 'UCoreShrineOfSecretsWidget::_shrineOfSecretsItems' has a wrong offset!");
static_assert(offsetof(UCoreShrineOfSecretsWidget, _viewData) == 0x0003A0, "Member 'UCoreShrineOfSecretsWidget::_viewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreSkillUnlockedNotificationWidget
// 0x0010 (0x0360 - 0x0350)
class UCoreSkillUnlockedNotificationWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          TitleTB;                                           // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSkillUnlockedNotificationWidget">();
	}
	static class UCoreSkillUnlockedNotificationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSkillUnlockedNotificationWidget>();
	}
};
static_assert(alignof(UCoreSkillUnlockedNotificationWidget) == 0x000008, "Wrong alignment on UCoreSkillUnlockedNotificationWidget");
static_assert(sizeof(UCoreSkillUnlockedNotificationWidget) == 0x000360, "Wrong size on UCoreSkillUnlockedNotificationWidget");
static_assert(offsetof(UCoreSkillUnlockedNotificationWidget, TitleTB) == 0x000358, "Member 'UCoreSkillUnlockedNotificationWidget::TitleTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreSliderWidget
// 0x0098 (0x03B8 - 0x0320)
class UCoreSliderWidget : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void(float NewValue)> OnSliderValueChanged;                             // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UDBDSlider*                             Slider;                                            // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreButtonWidget*                      DecrementButton;                                   // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreButtonWidget*                      IncrementButton;                                   // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                               SizeBox;                                           // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _defaultValue;                                     // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _minValue;                                         // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _maxValue;                                         // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _stepSize;                                         // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _snapToValueOnClick;                               // 0x0360(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _showStepButtons;                                  // 0x0361(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_362[0x2];                                      // 0x0362(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                _stepButtonsPadding;                               // 0x0364(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          _canRepeatStepButtons;                             // 0x0374(0x0001)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _repeatCurve;                                      // 0x0378(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _sliderPadding;                                    // 0x0380(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         _sliderWidth;                                      // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAnalogCursorStickiness                       _analogCursorStickiness;                           // 0x0394(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreKeyListenerInputPromptWidget*      _displayPrompt;                                    // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioEventWrapper*                     HoveredSfx;                                        // 0x03A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioEventWrapper*                     PressedSfx;                                        // 0x03A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B0[0x8];                                      // 0x03B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Decrement();
	void Increment();
	void OnDecrementButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnIncrementButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnSliderHandlePressed();
	void OnSliderHandleReleased();
	void OnSliderHovered();
	void OnSliderUnhovered();
	void OnValueChanged(float NewValue);
	void ResetToDefaultValue();
	void SetGhostValue(const float Value);
	void SetValue(const float Value);

	float GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSliderWidget">();
	}
	static class UCoreSliderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSliderWidget>();
	}
};
static_assert(alignof(UCoreSliderWidget) == 0x000008, "Wrong alignment on UCoreSliderWidget");
static_assert(sizeof(UCoreSliderWidget) == 0x0003B8, "Wrong size on UCoreSliderWidget");
static_assert(offsetof(UCoreSliderWidget, OnSliderValueChanged) == 0x000320, "Member 'UCoreSliderWidget::OnSliderValueChanged' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, Slider) == 0x000330, "Member 'UCoreSliderWidget::Slider' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, DecrementButton) == 0x000338, "Member 'UCoreSliderWidget::DecrementButton' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, IncrementButton) == 0x000340, "Member 'UCoreSliderWidget::IncrementButton' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, SizeBox) == 0x000348, "Member 'UCoreSliderWidget::SizeBox' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, _defaultValue) == 0x000350, "Member 'UCoreSliderWidget::_defaultValue' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, _minValue) == 0x000354, "Member 'UCoreSliderWidget::_minValue' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, _maxValue) == 0x000358, "Member 'UCoreSliderWidget::_maxValue' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, _stepSize) == 0x00035C, "Member 'UCoreSliderWidget::_stepSize' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, _snapToValueOnClick) == 0x000360, "Member 'UCoreSliderWidget::_snapToValueOnClick' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, _showStepButtons) == 0x000361, "Member 'UCoreSliderWidget::_showStepButtons' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, _stepButtonsPadding) == 0x000364, "Member 'UCoreSliderWidget::_stepButtonsPadding' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, _canRepeatStepButtons) == 0x000374, "Member 'UCoreSliderWidget::_canRepeatStepButtons' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, _repeatCurve) == 0x000378, "Member 'UCoreSliderWidget::_repeatCurve' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, _sliderPadding) == 0x000380, "Member 'UCoreSliderWidget::_sliderPadding' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, _sliderWidth) == 0x000390, "Member 'UCoreSliderWidget::_sliderWidth' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, _analogCursorStickiness) == 0x000394, "Member 'UCoreSliderWidget::_analogCursorStickiness' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, _displayPrompt) == 0x000398, "Member 'UCoreSliderWidget::_displayPrompt' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, HoveredSfx) == 0x0003A0, "Member 'UCoreSliderWidget::HoveredSfx' has a wrong offset!");
static_assert(offsetof(UCoreSliderWidget, PressedSfx) == 0x0003A8, "Member 'UCoreSliderWidget::PressedSfx' has a wrong offset!");

// Class DBDUIViewsCore.CoreSpecialEventLoadingScreenContainer
// 0x0028 (0x0348 - 0x0320)
class UCoreSpecialEventLoadingScreenContainer : public UCoreBaseUserWidget
{
public:
	class UDataTable*                             _specialEventLoadingScreenWidgetDB;                // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               container;                                         // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnLoadingHintsFadeSequenceCompletedDelegate;       // 0x0330(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UCoreSpecialEventLoadingScreenWidget*   _activeSpecialLoadingScreenWidget;                 // 0x0340(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ClearActiveSpecialLoadingScreenWidget();
	bool HasCustomWidgetForEvent(const class FName& eventID);
	void OnLoadingHintsFadeSequenceCompleted();
	void SetLoadingHint(const struct FLoadingHintViewData& loadingHintData);
	void SetupSpecialEventLoadingScreen(const class FName& eventLabel);
	void UpdateProgress(float Progress);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSpecialEventLoadingScreenContainer">();
	}
	static class UCoreSpecialEventLoadingScreenContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSpecialEventLoadingScreenContainer>();
	}
};
static_assert(alignof(UCoreSpecialEventLoadingScreenContainer) == 0x000008, "Wrong alignment on UCoreSpecialEventLoadingScreenContainer");
static_assert(sizeof(UCoreSpecialEventLoadingScreenContainer) == 0x000348, "Wrong size on UCoreSpecialEventLoadingScreenContainer");
static_assert(offsetof(UCoreSpecialEventLoadingScreenContainer, _specialEventLoadingScreenWidgetDB) == 0x000320, "Member 'UCoreSpecialEventLoadingScreenContainer::_specialEventLoadingScreenWidgetDB' has a wrong offset!");
static_assert(offsetof(UCoreSpecialEventLoadingScreenContainer, container) == 0x000328, "Member 'UCoreSpecialEventLoadingScreenContainer::container' has a wrong offset!");
static_assert(offsetof(UCoreSpecialEventLoadingScreenContainer, OnLoadingHintsFadeSequenceCompletedDelegate) == 0x000330, "Member 'UCoreSpecialEventLoadingScreenContainer::OnLoadingHintsFadeSequenceCompletedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreSpecialEventLoadingScreenContainer, _activeSpecialLoadingScreenWidget) == 0x000340, "Member 'UCoreSpecialEventLoadingScreenContainer::_activeSpecialLoadingScreenWidget' has a wrong offset!");

// Class DBDUIViewsCore.CoreSpectateBarWidget
// 0x0050 (0x03A0 - 0x0350)
class UCoreSpectateBarWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               LeaveInputSwitcher;                                // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               LeftArrowInputSwitcher;                            // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RightArrowInputSwitcher;                           // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _leaveTriggeredDelegate;                           // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _leftArrowTriggeredDelegate;                       // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _rightArrowTriggeredDelegate;                      // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	void OnLeaveTriggered();
	void OnLeftArrowTriggered();
	void OnRightArrowTriggered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSpectateBarWidget">();
	}
	static class UCoreSpectateBarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSpectateBarWidget>();
	}
};
static_assert(alignof(UCoreSpectateBarWidget) == 0x000008, "Wrong alignment on UCoreSpectateBarWidget");
static_assert(sizeof(UCoreSpectateBarWidget) == 0x0003A0, "Wrong size on UCoreSpectateBarWidget");
static_assert(offsetof(UCoreSpectateBarWidget, LeaveInputSwitcher) == 0x000358, "Member 'UCoreSpectateBarWidget::LeaveInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreSpectateBarWidget, LeftArrowInputSwitcher) == 0x000360, "Member 'UCoreSpectateBarWidget::LeftArrowInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreSpectateBarWidget, RightArrowInputSwitcher) == 0x000368, "Member 'UCoreSpectateBarWidget::RightArrowInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreSpectateBarWidget, _leaveTriggeredDelegate) == 0x000370, "Member 'UCoreSpectateBarWidget::_leaveTriggeredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreSpectateBarWidget, _leftArrowTriggeredDelegate) == 0x000380, "Member 'UCoreSpectateBarWidget::_leftArrowTriggeredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreSpectateBarWidget, _rightArrowTriggeredDelegate) == 0x000390, "Member 'UCoreSpectateBarWidget::_rightArrowTriggeredDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreSplashWidget
// 0x0068 (0x0388 - 0x0320)
class UCoreSplashWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             _specialEventSplashWidgetDB;                       // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LoadingTB;                                         // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PressTB;                                           // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputPromptWidget*                 PressKeyInputPrompt;                               // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ToContinueTB;                                      // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PressKeyMouseAndKeyboardTB;                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          VersionTB;                                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SaveGameTitleTB;                                   // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SaveGameDescriptionTB;                             // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               SpecialEventWidgetContainer;                       // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _onSaveGameFadeOutCompleted;                       // 0x0378(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSplashWidget">();
	}
	static class UCoreSplashWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSplashWidget>();
	}
};
static_assert(alignof(UCoreSplashWidget) == 0x000008, "Wrong alignment on UCoreSplashWidget");
static_assert(sizeof(UCoreSplashWidget) == 0x000388, "Wrong size on UCoreSplashWidget");
static_assert(offsetof(UCoreSplashWidget, _specialEventSplashWidgetDB) == 0x000328, "Member 'UCoreSplashWidget::_specialEventSplashWidgetDB' has a wrong offset!");
static_assert(offsetof(UCoreSplashWidget, LoadingTB) == 0x000330, "Member 'UCoreSplashWidget::LoadingTB' has a wrong offset!");
static_assert(offsetof(UCoreSplashWidget, PressTB) == 0x000338, "Member 'UCoreSplashWidget::PressTB' has a wrong offset!");
static_assert(offsetof(UCoreSplashWidget, PressKeyInputPrompt) == 0x000340, "Member 'UCoreSplashWidget::PressKeyInputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreSplashWidget, ToContinueTB) == 0x000348, "Member 'UCoreSplashWidget::ToContinueTB' has a wrong offset!");
static_assert(offsetof(UCoreSplashWidget, PressKeyMouseAndKeyboardTB) == 0x000350, "Member 'UCoreSplashWidget::PressKeyMouseAndKeyboardTB' has a wrong offset!");
static_assert(offsetof(UCoreSplashWidget, VersionTB) == 0x000358, "Member 'UCoreSplashWidget::VersionTB' has a wrong offset!");
static_assert(offsetof(UCoreSplashWidget, SaveGameTitleTB) == 0x000360, "Member 'UCoreSplashWidget::SaveGameTitleTB' has a wrong offset!");
static_assert(offsetof(UCoreSplashWidget, SaveGameDescriptionTB) == 0x000368, "Member 'UCoreSplashWidget::SaveGameDescriptionTB' has a wrong offset!");
static_assert(offsetof(UCoreSplashWidget, SpecialEventWidgetContainer) == 0x000370, "Member 'UCoreSplashWidget::SpecialEventWidgetContainer' has a wrong offset!");
static_assert(offsetof(UCoreSplashWidget, _onSaveGameFadeOutCompleted) == 0x000378, "Member 'UCoreSplashWidget::_onSaveGameFadeOutCompleted' has a wrong offset!");

// Class DBDUIViewsCore.CoreStartSequenceWidget
// 0x00A0 (0x03F0 - 0x0350)
class UCoreStartSequenceWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeInDuration;                                    // 0x0358(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeOutDuration;                                   // 0x035C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   FadeInEasing;                                      // 0x0360(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   FadeOutEasing;                                     // 0x0361(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_362[0x6];                                      // 0x0362(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EThemeColorId, struct FLinearColor>      BorderColors;                                      // 0x0368(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FLinearColor                           DefaultColor;                                      // 0x03B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ThemeNameTextfield;                                // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 SeparatorImage;                                    // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          MapNameTextfield;                                  // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              StartSequenceFadeOutDelegate;                      // 0x03E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	void OnHideStartSequenceComplete(class UUITweenInstance* tween);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStartSequenceWidget">();
	}
	static class UCoreStartSequenceWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStartSequenceWidget>();
	}
};
static_assert(alignof(UCoreStartSequenceWidget) == 0x000008, "Wrong alignment on UCoreStartSequenceWidget");
static_assert(sizeof(UCoreStartSequenceWidget) == 0x0003F0, "Wrong size on UCoreStartSequenceWidget");
static_assert(offsetof(UCoreStartSequenceWidget, FadeInDuration) == 0x000358, "Member 'UCoreStartSequenceWidget::FadeInDuration' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, FadeOutDuration) == 0x00035C, "Member 'UCoreStartSequenceWidget::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, FadeInEasing) == 0x000360, "Member 'UCoreStartSequenceWidget::FadeInEasing' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, FadeOutEasing) == 0x000361, "Member 'UCoreStartSequenceWidget::FadeOutEasing' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, BorderColors) == 0x000368, "Member 'UCoreStartSequenceWidget::BorderColors' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, DefaultColor) == 0x0003B8, "Member 'UCoreStartSequenceWidget::DefaultColor' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, ThemeNameTextfield) == 0x0003C8, "Member 'UCoreStartSequenceWidget::ThemeNameTextfield' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, SeparatorImage) == 0x0003D0, "Member 'UCoreStartSequenceWidget::SeparatorImage' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, MapNameTextfield) == 0x0003D8, "Member 'UCoreStartSequenceWidget::MapNameTextfield' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, StartSequenceFadeOutDelegate) == 0x0003E0, "Member 'UCoreStartSequenceWidget::StartSequenceFadeOutDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreStatusEffectIcon
// 0x0068 (0x0388 - 0x0320)
class UCoreStatusEffectIcon final : public UCoreBaseUserWidget
{
public:
	struct FStatusEffectViewData                  _statusEffectData;                                 // 0x0320(0x0060)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_380[0x8];                                      // 0x0380(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FStatusEffectViewData GetStatusEffectData();
	void ResetWidget();
	void SetInactiveTicks(const int32 inactiveTicks);
	void SetStatusEffectData(const struct FStatusEffectViewData& Data);
	void UpdatePercentageFill(float Percentage);
	void UpdateWidget();

	int32 GetInactiveTicks() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStatusEffectIcon">();
	}
	static class UCoreStatusEffectIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStatusEffectIcon>();
	}
};
static_assert(alignof(UCoreStatusEffectIcon) == 0x000008, "Wrong alignment on UCoreStatusEffectIcon");
static_assert(sizeof(UCoreStatusEffectIcon) == 0x000388, "Wrong size on UCoreStatusEffectIcon");
static_assert(offsetof(UCoreStatusEffectIcon, _statusEffectData) == 0x000320, "Member 'UCoreStatusEffectIcon::_statusEffectData' has a wrong offset!");

// Class DBDUIViewsCore.CoreStatusEffectWidget
// 0x0098 (0x03E8 - 0x0350)
class UCoreStatusEffectWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InactiveThreshold;                                 // 0x0358(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PrepooledItemAmount;                               // 0x035C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ItemsByColumn;                                     // 0x0360(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EvenColumnOffset;                                  // 0x0364(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreStatusEffectIcon>      CoreStatusEffectIconClass;                         // 0x0368(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             StatusEffectContainer;                             // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreStatusEffectIcon*>          _statusEffectPool;                                 // 0x0378(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class FName>                           _statusEffectOrder;                                // 0x0388(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class UCoreStatusEffectIcon*> _statusEffectMap;                                // 0x0398(0x0050)(BlueprintVisible, ExportObject, BlueprintReadOnly, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	TMap<class FName, class UCoreStatusEffectIcon*> GetStatusEffectMap() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStatusEffectWidget">();
	}
	static class UCoreStatusEffectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStatusEffectWidget>();
	}
};
static_assert(alignof(UCoreStatusEffectWidget) == 0x000008, "Wrong alignment on UCoreStatusEffectWidget");
static_assert(sizeof(UCoreStatusEffectWidget) == 0x0003E8, "Wrong size on UCoreStatusEffectWidget");
static_assert(offsetof(UCoreStatusEffectWidget, InactiveThreshold) == 0x000358, "Member 'UCoreStatusEffectWidget::InactiveThreshold' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, PrepooledItemAmount) == 0x00035C, "Member 'UCoreStatusEffectWidget::PrepooledItemAmount' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, ItemsByColumn) == 0x000360, "Member 'UCoreStatusEffectWidget::ItemsByColumn' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, EvenColumnOffset) == 0x000364, "Member 'UCoreStatusEffectWidget::EvenColumnOffset' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, CoreStatusEffectIconClass) == 0x000368, "Member 'UCoreStatusEffectWidget::CoreStatusEffectIconClass' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, StatusEffectContainer) == 0x000370, "Member 'UCoreStatusEffectWidget::StatusEffectContainer' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, _statusEffectPool) == 0x000378, "Member 'UCoreStatusEffectWidget::_statusEffectPool' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, _statusEffectOrder) == 0x000388, "Member 'UCoreStatusEffectWidget::_statusEffectOrder' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, _statusEffectMap) == 0x000398, "Member 'UCoreStatusEffectWidget::_statusEffectMap' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreCategoryWidget
// 0x0028 (0x0500 - 0x04D8)
class UCoreStoreCategoryWidget final : public UCoreSelectableButtonWidget
{
public:
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECustomizationCategory                        _category;                                         // 0x04E0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E1[0x7];                                      // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _categoryTooltipText;                              // 0x04E8(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void SetData(const struct FStoreCategoryViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCategoryWidget">();
	}
	static class UCoreStoreCategoryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCategoryWidget>();
	}
};
static_assert(alignof(UCoreStoreCategoryWidget) == 0x000008, "Wrong alignment on UCoreStoreCategoryWidget");
static_assert(sizeof(UCoreStoreCategoryWidget) == 0x000500, "Wrong size on UCoreStoreCategoryWidget");
static_assert(offsetof(UCoreStoreCategoryWidget, OnHoverBorder) == 0x0004D8, "Member 'UCoreStoreCategoryWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreStoreCategoryWidget, _category) == 0x0004E0, "Member 'UCoreStoreCategoryWidget::_category' has a wrong offset!");
static_assert(offsetof(UCoreStoreCategoryWidget, _categoryTooltipText) == 0x0004E8, "Member 'UCoreStoreCategoryWidget::_categoryTooltipText' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreCharacterItemWidget
// 0x0008 (0x0568 - 0x0560)
class UCoreStoreCharacterItemWidget final : public UCoreStoreItemWidget
{
public:
	class UStoreCharacterItemViewData*            _data;                                             // 0x0560(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetStoreCharacterItemData(class UStoreCharacterItemViewData* Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCharacterItemWidget">();
	}
	static class UCoreStoreCharacterItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCharacterItemWidget>();
	}
};
static_assert(alignof(UCoreStoreCharacterItemWidget) == 0x000008, "Wrong alignment on UCoreStoreCharacterItemWidget");
static_assert(sizeof(UCoreStoreCharacterItemWidget) == 0x000568, "Wrong size on UCoreStoreCharacterItemWidget");
static_assert(offsetof(UCoreStoreCharacterItemWidget, _data) == 0x000560, "Member 'UCoreStoreCharacterItemWidget::_data' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreCharactersBioWidget
// 0x0080 (0x03A0 - 0x0320)
class UCoreStoreCharactersBioWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          AttributeSpeedTB;                                  // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          AttributeTerrorRadiusTB;                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          AttributeSizeTB;                                   // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreCharacterPerksWidget*              CharacterPerks;                                    // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _speedTooltipText;                                 // 0x0348(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   _terrorRadiusTooltipText;                          // 0x0360(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   _heightTooltipText;                                // 0x0378(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UDBDScrollBox*                          CharacterBioScrollBox;                             // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ERightStickMode                               _rightStickMode;                                   // 0x0398(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetRightStickMode(ERightStickMode rightStickMode);

	class UDBDScrollBox* GetCharacterBioScrollBox() const;
	ERightStickMode GetRightStickMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCharactersBioWidget">();
	}
	static class UCoreStoreCharactersBioWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCharactersBioWidget>();
	}
};
static_assert(alignof(UCoreStoreCharactersBioWidget) == 0x000008, "Wrong alignment on UCoreStoreCharactersBioWidget");
static_assert(sizeof(UCoreStoreCharactersBioWidget) == 0x0003A0, "Wrong size on UCoreStoreCharactersBioWidget");
static_assert(offsetof(UCoreStoreCharactersBioWidget, AttributeSpeedTB) == 0x000328, "Member 'UCoreStoreCharactersBioWidget::AttributeSpeedTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersBioWidget, AttributeTerrorRadiusTB) == 0x000330, "Member 'UCoreStoreCharactersBioWidget::AttributeTerrorRadiusTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersBioWidget, AttributeSizeTB) == 0x000338, "Member 'UCoreStoreCharactersBioWidget::AttributeSizeTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersBioWidget, CharacterPerks) == 0x000340, "Member 'UCoreStoreCharactersBioWidget::CharacterPerks' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersBioWidget, _speedTooltipText) == 0x000348, "Member 'UCoreStoreCharactersBioWidget::_speedTooltipText' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersBioWidget, _terrorRadiusTooltipText) == 0x000360, "Member 'UCoreStoreCharactersBioWidget::_terrorRadiusTooltipText' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersBioWidget, _heightTooltipText) == 0x000378, "Member 'UCoreStoreCharactersBioWidget::_heightTooltipText' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersBioWidget, CharacterBioScrollBox) == 0x000390, "Member 'UCoreStoreCharactersBioWidget::CharacterBioScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersBioWidget, _rightStickMode) == 0x000398, "Member 'UCoreStoreCharactersBioWidget::_rightStickMode' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreCharactersFilterWidget
// 0x0028 (0x03C0 - 0x0398)
class UCoreStoreCharactersFilterWidget final : public UBaseFilterWidget
{
public:
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              _onClearFiltersClicked;                            // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const struct FStoreCharactersFiltersData& storeFiltersData)> _onFiltersChanged; // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void OnClearFiltersClicked(class UCoreButtonWidget* buttonTarget);
	void OnFilterOptionCheckBoxToggled();
	void OverrideDefaultFiltersAndSortingParams(bool defaultFilterAvailable, bool defaultFilterOwned, int32 sortingOptions, ESortingOption defaultSortingOption, ESortingOrder defaultSortingOrder);

	struct FStoreCharactersFiltersData GetCurrentFiltersData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCharactersFilterWidget">();
	}
	static class UCoreStoreCharactersFilterWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCharactersFilterWidget>();
	}
};
static_assert(alignof(UCoreStoreCharactersFilterWidget) == 0x000008, "Wrong alignment on UCoreStoreCharactersFilterWidget");
static_assert(sizeof(UCoreStoreCharactersFilterWidget) == 0x0003C0, "Wrong size on UCoreStoreCharactersFilterWidget");
static_assert(offsetof(UCoreStoreCharactersFilterWidget, _onClearFiltersClicked) == 0x0003A0, "Member 'UCoreStoreCharactersFilterWidget::_onClearFiltersClicked' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersFilterWidget, _onFiltersChanged) == 0x0003B0, "Member 'UCoreStoreCharactersFilterWidget::_onFiltersChanged' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreCharactersWidget
// 0x0038 (0x0390 - 0x0358)
class UCoreStoreCharactersWidget final : public UCoreStoreBaseSubTabsWidget
{
public:
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EPlayerRole                                   _role;                                             // 0x0360(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStoreCharactersMenuState                     _currentMenuState;                                 // 0x0361(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_362[0x6];                                      // 0x0362(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          SelectedCharacterNameTB;                           // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreCharactersSelectionWidget*    SelectionTab;                                      // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreStoreCharactersCustomizationsWidget* CustomizationsTab;                               // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreStoreCharactersBioWidget*          BioTab;                                            // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UToggleableWidgetPromptController*      _toggleableWidgetPromptController;                 // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetToggleableWidgetPromptController(class UToggleableWidgetPromptController* Controller);

	class UCoreStoreCharactersBioWidget* GetBioTab() const;
	class UCoreStoreCharactersCustomizationsWidget* GetCustomizationsTab() const;
	class UCoreStoreCharactersSelectionWidget* GetSelectionTab() const;
	class UToggleableWidgetPromptController* GetToggleableWidgetPromptController() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCharactersWidget">();
	}
	static class UCoreStoreCharactersWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCharactersWidget>();
	}
};
static_assert(alignof(UCoreStoreCharactersWidget) == 0x000008, "Wrong alignment on UCoreStoreCharactersWidget");
static_assert(sizeof(UCoreStoreCharactersWidget) == 0x000390, "Wrong size on UCoreStoreCharactersWidget");
static_assert(offsetof(UCoreStoreCharactersWidget, _role) == 0x000360, "Member 'UCoreStoreCharactersWidget::_role' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersWidget, _currentMenuState) == 0x000361, "Member 'UCoreStoreCharactersWidget::_currentMenuState' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersWidget, SelectedCharacterNameTB) == 0x000368, "Member 'UCoreStoreCharactersWidget::SelectedCharacterNameTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersWidget, SelectionTab) == 0x000370, "Member 'UCoreStoreCharactersWidget::SelectionTab' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersWidget, CustomizationsTab) == 0x000378, "Member 'UCoreStoreCharactersWidget::CustomizationsTab' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersWidget, BioTab) == 0x000380, "Member 'UCoreStoreCharactersWidget::BioTab' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharactersWidget, _toggleableWidgetPromptController) == 0x000388, "Member 'UCoreStoreCharactersWidget::_toggleableWidgetPromptController' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreCharmSlotWidget
// 0x0028 (0x0500 - 0x04D8)
class UCoreStoreCharmSlotWidget final : public UCoreSelectableButtonWidget
{
public:
	class UWidget*                                EmptyCharmSlot;                                    // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreCustomizationRewardWidget*         CustomizationReward;                               // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                SelectedOverlay;                                   // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F8[0x8];                                      // 0x04F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonSelectedChanged(class UCoreSelectableButtonWidget* targetButton, bool IsSelected_0);
	void SetEmptyCharmSlotData(const int32 slotIndex);
	void SetSelectedCharmSlotData(const int32 slotIndex, const struct FCustomizationRewardViewData& charmSlotData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCharmSlotWidget">();
	}
	static class UCoreStoreCharmSlotWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCharmSlotWidget>();
	}
};
static_assert(alignof(UCoreStoreCharmSlotWidget) == 0x000008, "Wrong alignment on UCoreStoreCharmSlotWidget");
static_assert(sizeof(UCoreStoreCharmSlotWidget) == 0x000500, "Wrong size on UCoreStoreCharmSlotWidget");
static_assert(offsetof(UCoreStoreCharmSlotWidget, EmptyCharmSlot) == 0x0004D8, "Member 'UCoreStoreCharmSlotWidget::EmptyCharmSlot' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharmSlotWidget, CustomizationReward) == 0x0004E0, "Member 'UCoreStoreCharmSlotWidget::CustomizationReward' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharmSlotWidget, OnHoverBorder) == 0x0004E8, "Member 'UCoreStoreCharmSlotWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreStoreCharmSlotWidget, SelectedOverlay) == 0x0004F0, "Member 'UCoreStoreCharmSlotWidget::SelectedOverlay' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreCollectionsItemWidget
// 0x0020 (0x04D0 - 0x04B0)
class UCoreStoreCollectionsItemWidget final : public UCoreButtonWidget
{
public:
	class UDBDTextBlock*                          CountTB;                                           // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreTimerFlagWidget*                   SaleTimerFlag;                                     // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreTimerFlagWidget*                   LimitedTimerFlag;                                  // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStoreCollectionViewData*               _collectionViewData;                               // 0x04C8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UStoreCollectionViewData* GetStoreCollectionViewData();
	void SetData(class UStoreCollectionViewData* CollectionViewData, const ECollectionItemScaleType collectionItemScale);
	void SetupVisuals(class UStoreCollectionViewData* CollectionViewData, const ECollectionItemScaleType collectionItemScale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCollectionsItemWidget">();
	}
	static class UCoreStoreCollectionsItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCollectionsItemWidget>();
	}
};
static_assert(alignof(UCoreStoreCollectionsItemWidget) == 0x000008, "Wrong alignment on UCoreStoreCollectionsItemWidget");
static_assert(sizeof(UCoreStoreCollectionsItemWidget) == 0x0004D0, "Wrong size on UCoreStoreCollectionsItemWidget");
static_assert(offsetof(UCoreStoreCollectionsItemWidget, CountTB) == 0x0004B0, "Member 'UCoreStoreCollectionsItemWidget::CountTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsItemWidget, SaleTimerFlag) == 0x0004B8, "Member 'UCoreStoreCollectionsItemWidget::SaleTimerFlag' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsItemWidget, LimitedTimerFlag) == 0x0004C0, "Member 'UCoreStoreCollectionsItemWidget::LimitedTimerFlag' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsItemWidget, _collectionViewData) == 0x0004C8, "Member 'UCoreStoreCollectionsItemWidget::_collectionViewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreCollectionsWidget
// 0x0028 (0x0358 - 0x0330)
class UCoreStoreCollectionsWidget final : public UCoreStoreBaseTabWidget
{
public:
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EStoreCollectionsMenuState                    _currentMenuState;                                 // 0x0338(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreStoreCollectionsListWidget*        CollectionsList;                                   // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreStoreCollectionsCustomizationsWidget* CollectionsCustomizations;                      // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UToggleableWidgetPromptController*      _toggleableWidgetPromptController;                 // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetToggleableWidgetPromptController(class UToggleableWidgetPromptController* Controller);

	class UCoreStoreCollectionsCustomizationsWidget* GetCollectionsCustomizations() const;
	class UCoreStoreCollectionsListWidget* GetCollectionsList() const;
	class UToggleableWidgetPromptController* GetToggleableWidgetPromptController() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCollectionsWidget">();
	}
	static class UCoreStoreCollectionsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCollectionsWidget>();
	}
};
static_assert(alignof(UCoreStoreCollectionsWidget) == 0x000008, "Wrong alignment on UCoreStoreCollectionsWidget");
static_assert(sizeof(UCoreStoreCollectionsWidget) == 0x000358, "Wrong size on UCoreStoreCollectionsWidget");
static_assert(offsetof(UCoreStoreCollectionsWidget, _currentMenuState) == 0x000338, "Member 'UCoreStoreCollectionsWidget::_currentMenuState' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsWidget, CollectionsList) == 0x000340, "Member 'UCoreStoreCollectionsWidget::CollectionsList' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsWidget, CollectionsCustomizations) == 0x000348, "Member 'UCoreStoreCollectionsWidget::CollectionsCustomizations' has a wrong offset!");
static_assert(offsetof(UCoreStoreCollectionsWidget, _toggleableWidgetPromptController) == 0x000350, "Member 'UCoreStoreCollectionsWidget::_toggleableWidgetPromptController' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreCustomizationItemWidget
// 0x0018 (0x0578 - 0x0560)
class UCoreStoreCustomizationItemWidget : public UCoreStoreItemWidget
{
public:
	class UDBDImage*                              RarityIMG;                                         // 0x0560(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStoreCustomizationItemViewData*        _data;                                             // 0x0568(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_570[0x8];                                      // 0x0570(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector2D GetRealSize();
	void SetEquippedItem(const bool IsEquipped);
	void SetStoreCustomizationItemData(class UStoreCustomizationItemViewData* Data);

	struct FStoreRedirectionData MakeStoreRedirectionData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreCustomizationItemWidget">();
	}
	static class UCoreStoreCustomizationItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreCustomizationItemWidget>();
	}
};
static_assert(alignof(UCoreStoreCustomizationItemWidget) == 0x000008, "Wrong alignment on UCoreStoreCustomizationItemWidget");
static_assert(sizeof(UCoreStoreCustomizationItemWidget) == 0x000578, "Wrong size on UCoreStoreCustomizationItemWidget");
static_assert(offsetof(UCoreStoreCustomizationItemWidget, RarityIMG) == 0x000560, "Member 'UCoreStoreCustomizationItemWidget::RarityIMG' has a wrong offset!");
static_assert(offsetof(UCoreStoreCustomizationItemWidget, _data) == 0x000568, "Member 'UCoreStoreCustomizationItemWidget::_data' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreFeaturedCharacterWidget
// 0x00A8 (0x0580 - 0x04D8)
class UCoreStoreFeaturedCharacterWidget final : public UCoreSelectableButtonWidget
{
public:
	TMulticastInlineDelegate<void(int32 chracterIndex, EPlayerRole PlayerRole)> OnMoveToCharactersBioPageButtonClickedDelegate; // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	class UCoreButtonWidget*                      MoveToCharactersBioPageButton;                     // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F0[0x90];                                     // 0x04F0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FStoreFeaturedCharacterViewData GetCharacterViewData();
	void SetCharacterData(const struct FStoreFeaturedCharacterViewData& CharacterData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreFeaturedCharacterWidget">();
	}
	static class UCoreStoreFeaturedCharacterWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreFeaturedCharacterWidget>();
	}
};
static_assert(alignof(UCoreStoreFeaturedCharacterWidget) == 0x000008, "Wrong alignment on UCoreStoreFeaturedCharacterWidget");
static_assert(sizeof(UCoreStoreFeaturedCharacterWidget) == 0x000580, "Wrong size on UCoreStoreFeaturedCharacterWidget");
static_assert(offsetof(UCoreStoreFeaturedCharacterWidget, OnMoveToCharactersBioPageButtonClickedDelegate) == 0x0004D8, "Member 'UCoreStoreFeaturedCharacterWidget::OnMoveToCharactersBioPageButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCharacterWidget, MoveToCharactersBioPageButton) == 0x0004E8, "Member 'UCoreStoreFeaturedCharacterWidget::MoveToCharactersBioPageButton' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreFeaturedCustomizationItemContainerWidget
// 0x00F8 (0x0488 - 0x0390)
class UCoreStoreFeaturedCustomizationItemContainerWidget final : public UCoreButtonSelector
{
public:
	uint8                                         Pad_390[0x10];                                     // 0x0390(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreStoreFeaturedCustomizationItemWidget> ItemTileClass;                      // 0x03A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           Root;                                              // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               LeftArrow;                                         // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RightArrow;                                        // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxVisibleTiles;                                   // 0x03C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AllTileHeight;                                     // 0x03C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SmallTileWidth;                                    // 0x03C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BigTileWidth;                                      // 0x03CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TileSpacing;                                       // 0x03D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TranslationDuration;                               // 0x03D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OnHoverBorderThickness;                            // 0x03D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   TranslationEasingType;                             // 0x03DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3DD[0x3];                                      // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoAdvanceRate;                                   // 0x03E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStoreContentViewData>          _cachedData;                                       // 0x03E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UCoreStoreFeaturedCustomizationItemWidget*> _usedTilePool;                          // 0x03F8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreStoreFeaturedCustomizationItemWidget*> _availableTilePool;                     // 0x0408(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<int32, class UCoreStoreFeaturedCustomizationItemWidget*> _positionToWidgetMap;              // 0x0418(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_468[0x20];                                     // 0x0468(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitItemContainer();
	void MoveNext();
	void MovePrevious();
	void OnItemHovered(class UCoreButtonWidget* buttonTarget);
	void OnItemUnhovered(class UCoreButtonWidget* buttonTarget);
	void OnMoveCompleted();
	void OnSelectedItemAgain(class UCoreSelectableButtonWidget* selectedButton);
	void OnSelectedItemChanged(class UCoreSelectableButtonWidget* selectedButton);
	void SetItems(const TArray<struct FStoreContentViewData>& viewDataArray);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreFeaturedCustomizationItemContainerWidget">();
	}
	static class UCoreStoreFeaturedCustomizationItemContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreFeaturedCustomizationItemContainerWidget>();
	}
};
static_assert(alignof(UCoreStoreFeaturedCustomizationItemContainerWidget) == 0x000008, "Wrong alignment on UCoreStoreFeaturedCustomizationItemContainerWidget");
static_assert(sizeof(UCoreStoreFeaturedCustomizationItemContainerWidget) == 0x000488, "Wrong size on UCoreStoreFeaturedCustomizationItemContainerWidget");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, ItemTileClass) == 0x0003A0, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::ItemTileClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, Root) == 0x0003A8, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::Root' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, LeftArrow) == 0x0003B0, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::LeftArrow' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, RightArrow) == 0x0003B8, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::RightArrow' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, MaxVisibleTiles) == 0x0003C0, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::MaxVisibleTiles' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, AllTileHeight) == 0x0003C4, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::AllTileHeight' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, SmallTileWidth) == 0x0003C8, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::SmallTileWidth' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, BigTileWidth) == 0x0003CC, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::BigTileWidth' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, TileSpacing) == 0x0003D0, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::TileSpacing' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, TranslationDuration) == 0x0003D4, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::TranslationDuration' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, OnHoverBorderThickness) == 0x0003D8, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::OnHoverBorderThickness' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, TranslationEasingType) == 0x0003DC, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::TranslationEasingType' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, AutoAdvanceRate) == 0x0003E0, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::AutoAdvanceRate' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, _cachedData) == 0x0003E8, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::_cachedData' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, _usedTilePool) == 0x0003F8, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::_usedTilePool' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, _availableTilePool) == 0x000408, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::_availableTilePool' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedCustomizationItemContainerWidget, _positionToWidgetMap) == 0x000418, "Member 'UCoreStoreFeaturedCustomizationItemContainerWidget::_positionToWidgetMap' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreFeaturedMysteryBoxWidget
// 0x0040 (0x0518 - 0x04D8)
class UCoreStoreFeaturedMysteryBoxWidget final : public UCoreSelectableButtonWidget
{
public:
	TMulticastInlineDelegate<void()>              OnMysteryBoxClaimClicked;                          // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          DescriptionTB;                                     // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FStoreMysteryBoxViewData               _cachedViewData;                                   // 0x04F0(0x0028)(NoDestructor, NativeAccessSpecifierPrivate)

public:
	void OnClaimButtonClicked(class UCoreButtonWidget* buttonTarget);
	void SetData(const struct FStoreMysteryBoxViewData& ViewData);

	const struct FStoreMysteryBoxViewData GetMysteryBoxViewData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreFeaturedMysteryBoxWidget">();
	}
	static class UCoreStoreFeaturedMysteryBoxWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreFeaturedMysteryBoxWidget>();
	}
};
static_assert(alignof(UCoreStoreFeaturedMysteryBoxWidget) == 0x000008, "Wrong alignment on UCoreStoreFeaturedMysteryBoxWidget");
static_assert(sizeof(UCoreStoreFeaturedMysteryBoxWidget) == 0x000518, "Wrong size on UCoreStoreFeaturedMysteryBoxWidget");
static_assert(offsetof(UCoreStoreFeaturedMysteryBoxWidget, OnMysteryBoxClaimClicked) == 0x0004D8, "Member 'UCoreStoreFeaturedMysteryBoxWidget::OnMysteryBoxClaimClicked' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedMysteryBoxWidget, DescriptionTB) == 0x0004E8, "Member 'UCoreStoreFeaturedMysteryBoxWidget::DescriptionTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreFeaturedMysteryBoxWidget, _cachedViewData) == 0x0004F0, "Member 'UCoreStoreFeaturedMysteryBoxWidget::_cachedViewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreItemAvailabilityBannerWidget
// 0x0028 (0x0348 - 0x0320)
class UCoreStoreItemAvailabilityBannerWidget final : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void()>              _availabilityBannerClickedDelegate;                // 0x0320(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UCoreButtonWidget*                      Button;                                            // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          MessageTB;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          NameTB;                                            // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnAvailabilityBannerClicked(class UCoreButtonWidget* buttonTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreItemAvailabilityBannerWidget">();
	}
	static class UCoreStoreItemAvailabilityBannerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreItemAvailabilityBannerWidget>();
	}
};
static_assert(alignof(UCoreStoreItemAvailabilityBannerWidget) == 0x000008, "Wrong alignment on UCoreStoreItemAvailabilityBannerWidget");
static_assert(sizeof(UCoreStoreItemAvailabilityBannerWidget) == 0x000348, "Wrong size on UCoreStoreItemAvailabilityBannerWidget");
static_assert(offsetof(UCoreStoreItemAvailabilityBannerWidget, _availabilityBannerClickedDelegate) == 0x000320, "Member 'UCoreStoreItemAvailabilityBannerWidget::_availabilityBannerClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemAvailabilityBannerWidget, Button) == 0x000330, "Member 'UCoreStoreItemAvailabilityBannerWidget::Button' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemAvailabilityBannerWidget, MessageTB) == 0x000338, "Member 'UCoreStoreItemAvailabilityBannerWidget::MessageTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreItemAvailabilityBannerWidget, NameTB) == 0x000340, "Member 'UCoreStoreItemAvailabilityBannerWidget::NameTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreRiftTierItemWidget
// 0x0170 (0x0648 - 0x04D8)
class UCoreStoreRiftTierItemWidget final : public UCoreSelectableButtonWidget
{
public:
	class UDBDImage*                              IconIMG;                                           // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          AmountTB;                                          // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FStoreRiftTierViewData                 _viewData;                                         // 0x04F0(0x0158)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void OnButtonHovered(class UCoreButtonWidget* targetButton);
	void OnButtonUnhovered(class UCoreButtonWidget* targetButton);
	void SetData(const struct FStoreRiftTierViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreRiftTierItemWidget">();
	}
	static class UCoreStoreRiftTierItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreRiftTierItemWidget>();
	}
};
static_assert(alignof(UCoreStoreRiftTierItemWidget) == 0x000008, "Wrong alignment on UCoreStoreRiftTierItemWidget");
static_assert(sizeof(UCoreStoreRiftTierItemWidget) == 0x000648, "Wrong size on UCoreStoreRiftTierItemWidget");
static_assert(offsetof(UCoreStoreRiftTierItemWidget, IconIMG) == 0x0004D8, "Member 'UCoreStoreRiftTierItemWidget::IconIMG' has a wrong offset!");
static_assert(offsetof(UCoreStoreRiftTierItemWidget, AmountTB) == 0x0004E0, "Member 'UCoreStoreRiftTierItemWidget::AmountTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreRiftTierItemWidget, OnHoverBorder) == 0x0004E8, "Member 'UCoreStoreRiftTierItemWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreStoreRiftTierItemWidget, _viewData) == 0x0004F0, "Member 'UCoreStoreRiftTierItemWidget::_viewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreSpecialPacksListWidget
// 0x0058 (0x0378 - 0x0320)
class UCoreStoreSpecialPacksListWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _preConstructedItemsCount;                         // 0x0328(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _numOfColumns;                                     // 0x032C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreStoreContentWidget>    _itemWidgetClass;                                  // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUniformGridPanel*                      ContentGrid;                                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          PacksScrollBox;                                    // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _itemList;                                         // 0x0348(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_350[0x28];                                     // 0x0350(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnItemClicked(const struct FStoreContentViewData& contentViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreSpecialPacksListWidget">();
	}
	static class UCoreStoreSpecialPacksListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreSpecialPacksListWidget>();
	}
};
static_assert(alignof(UCoreStoreSpecialPacksListWidget) == 0x000008, "Wrong alignment on UCoreStoreSpecialPacksListWidget");
static_assert(sizeof(UCoreStoreSpecialPacksListWidget) == 0x000378, "Wrong size on UCoreStoreSpecialPacksListWidget");
static_assert(offsetof(UCoreStoreSpecialPacksListWidget, _preConstructedItemsCount) == 0x000328, "Member 'UCoreStoreSpecialPacksListWidget::_preConstructedItemsCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPacksListWidget, _numOfColumns) == 0x00032C, "Member 'UCoreStoreSpecialPacksListWidget::_numOfColumns' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPacksListWidget, _itemWidgetClass) == 0x000330, "Member 'UCoreStoreSpecialPacksListWidget::_itemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPacksListWidget, ContentGrid) == 0x000338, "Member 'UCoreStoreSpecialPacksListWidget::ContentGrid' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPacksListWidget, PacksScrollBox) == 0x000340, "Member 'UCoreStoreSpecialPacksListWidget::PacksScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialPacksListWidget, _itemList) == 0x000348, "Member 'UCoreStoreSpecialPacksListWidget::_itemList' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoreSpecialsWidget
// 0x00B8 (0x03E8 - 0x0330)
class UCoreStoreSpecialsWidget final : public UCoreStoreBaseTabWidget
{
public:
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreStoreCustomizationItemWidget> _itemWidgetClass;                           // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _layoutMask;                                       // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _highlightPreConstructedItemsCount;                // 0x0344(0x0004)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _highlightItemsScale;                              // 0x0348(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _highlightItemPadding;                             // 0x034C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	int32                                         _regularPreConstructedItemsCount;                  // 0x035C(0x0004)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _regularItemsScale;                                // 0x0360(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreAuricCellsBundleWidget*            AuricCellSpecialOffer;                             // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          NoAuricCellsTitleTB;                               // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          NoAuricCellsTextTB;                                // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          HighlightSectionTitleTB;                           // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               ArchivePassBannerContainer;                        // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreArchivePassBannerWidget*           ArchivePassBanner;                                 // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         HighlightSectionContainer;                         // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RegularSectionTitleTB;                             // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDWrapBox*                            RegularSectionContainer;                           // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          SpecialsScrollBox;                                 // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const struct FStoreRedirectionData& redirectionData)> SpecialItemClickedDelegate; // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FName& archiveId)> ArchivePassBannerClickedDelegate;   // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _highlightItemList;                                // 0x03D8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCorePreConstructableList*              _regularItemList;                                  // 0x03E0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnArchivePassBannerClicked(class UCoreButtonWidget* buttonTarget);
	void OnSpecialItemClicked(class UCoreButtonWidget* buttonTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoreSpecialsWidget">();
	}
	static class UCoreStoreSpecialsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoreSpecialsWidget>();
	}
};
static_assert(alignof(UCoreStoreSpecialsWidget) == 0x000008, "Wrong alignment on UCoreStoreSpecialsWidget");
static_assert(sizeof(UCoreStoreSpecialsWidget) == 0x0003E8, "Wrong size on UCoreStoreSpecialsWidget");
static_assert(offsetof(UCoreStoreSpecialsWidget, _itemWidgetClass) == 0x000338, "Member 'UCoreStoreSpecialsWidget::_itemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, _layoutMask) == 0x000340, "Member 'UCoreStoreSpecialsWidget::_layoutMask' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, _highlightPreConstructedItemsCount) == 0x000344, "Member 'UCoreStoreSpecialsWidget::_highlightPreConstructedItemsCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, _highlightItemsScale) == 0x000348, "Member 'UCoreStoreSpecialsWidget::_highlightItemsScale' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, _highlightItemPadding) == 0x00034C, "Member 'UCoreStoreSpecialsWidget::_highlightItemPadding' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, _regularPreConstructedItemsCount) == 0x00035C, "Member 'UCoreStoreSpecialsWidget::_regularPreConstructedItemsCount' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, _regularItemsScale) == 0x000360, "Member 'UCoreStoreSpecialsWidget::_regularItemsScale' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, AuricCellSpecialOffer) == 0x000368, "Member 'UCoreStoreSpecialsWidget::AuricCellSpecialOffer' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, NoAuricCellsTitleTB) == 0x000370, "Member 'UCoreStoreSpecialsWidget::NoAuricCellsTitleTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, NoAuricCellsTextTB) == 0x000378, "Member 'UCoreStoreSpecialsWidget::NoAuricCellsTextTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, HighlightSectionTitleTB) == 0x000380, "Member 'UCoreStoreSpecialsWidget::HighlightSectionTitleTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, ArchivePassBannerContainer) == 0x000388, "Member 'UCoreStoreSpecialsWidget::ArchivePassBannerContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, ArchivePassBanner) == 0x000390, "Member 'UCoreStoreSpecialsWidget::ArchivePassBanner' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, HighlightSectionContainer) == 0x000398, "Member 'UCoreStoreSpecialsWidget::HighlightSectionContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, RegularSectionTitleTB) == 0x0003A0, "Member 'UCoreStoreSpecialsWidget::RegularSectionTitleTB' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, RegularSectionContainer) == 0x0003A8, "Member 'UCoreStoreSpecialsWidget::RegularSectionContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, SpecialsScrollBox) == 0x0003B0, "Member 'UCoreStoreSpecialsWidget::SpecialsScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, SpecialItemClickedDelegate) == 0x0003B8, "Member 'UCoreStoreSpecialsWidget::SpecialItemClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, ArchivePassBannerClickedDelegate) == 0x0003C8, "Member 'UCoreStoreSpecialsWidget::ArchivePassBannerClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, _highlightItemList) == 0x0003D8, "Member 'UCoreStoreSpecialsWidget::_highlightItemList' has a wrong offset!");
static_assert(offsetof(UCoreStoreSpecialsWidget, _regularItemList) == 0x0003E0, "Member 'UCoreStoreSpecialsWidget::_regularItemList' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoryLevelButtonWidget
// 0x0038 (0x0510 - 0x04D8)
class UCoreStoryLevelButtonWidget final : public UCoreSelectableButtonWidget
{
public:
	TMulticastInlineDelegate<void()>              _levelUnlockedAnimationDoneDelegate;               // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class FText                                   _tooltipText;                                      // 0x04E8(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	ERemainingTimeFormat                          _lockedLevelTimeFormat;                            // 0x0500(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_501[0xF];                                      // 0x0501(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetData(const class UArchiveStoryLevelViewData* ViewData, bool isSelectorReadOnly);
	void UpdateStatusData(EArchivesStoryLevelStatus newStatus, bool isSelectorReadOnly);
	void UpdateVisual(const class UArchiveStoryLevelViewData* ViewData, bool newlyUnlocked);
	void UpdateVisualStatus(EArchivesStoryLevelStatus newStatus, bool newlyUnlocked);

	int32 GetLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoryLevelButtonWidget">();
	}
	static class UCoreStoryLevelButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoryLevelButtonWidget>();
	}
};
static_assert(alignof(UCoreStoryLevelButtonWidget) == 0x000008, "Wrong alignment on UCoreStoryLevelButtonWidget");
static_assert(sizeof(UCoreStoryLevelButtonWidget) == 0x000510, "Wrong size on UCoreStoryLevelButtonWidget");
static_assert(offsetof(UCoreStoryLevelButtonWidget, _levelUnlockedAnimationDoneDelegate) == 0x0004D8, "Member 'UCoreStoryLevelButtonWidget::_levelUnlockedAnimationDoneDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoryLevelButtonWidget, _tooltipText) == 0x0004E8, "Member 'UCoreStoryLevelButtonWidget::_tooltipText' has a wrong offset!");
static_assert(offsetof(UCoreStoryLevelButtonWidget, _lockedLevelTimeFormat) == 0x000500, "Member 'UCoreStoryLevelButtonWidget::_lockedLevelTimeFormat' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoryLevelsSelectorWidget
// 0x0048 (0x03D8 - 0x0390)
class UCoreStoryLevelsSelectorWidget final : public UCoreButtonSelector
{
public:
	bool                                          IsReadOnly;                                        // 0x0390(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreStoryLevelButtonWidget> CoreStoryLevelButtonWidgetClass;                  // 0x0398(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             LevelButtonsContainer;                             // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               PreviousLevelInputSwitcher;                        // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               NextLevelInputSwitcher;                            // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UArchiveStoryLevelViewData*>     _levelButtonsData;                                 // 0x03B8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C8[0x10];                                     // 0x03C8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AdaptButtonsPoolToData(int32 dataNumber);
	void OnStoryLevelUnlockedAnimation();
	void SetData(const TArray<class UArchiveStoryLevelViewData*>& levelbuttonsData);
	void SetEnabled(bool Enabled);
	void SetUpInteractionMode();
	void UpdateLevelStatus(const int32 Level, const EArchivesStoryLevelStatus status);
	void UpdateVisual(EArchivesStoryLevelStatus globalStatus, bool PlayAnimation_0);

	class UCoreStoryLevelButtonWidget* GetStoryLevelButton(int32 Level) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoryLevelsSelectorWidget">();
	}
	static class UCoreStoryLevelsSelectorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoryLevelsSelectorWidget>();
	}
};
static_assert(alignof(UCoreStoryLevelsSelectorWidget) == 0x000008, "Wrong alignment on UCoreStoryLevelsSelectorWidget");
static_assert(sizeof(UCoreStoryLevelsSelectorWidget) == 0x0003D8, "Wrong size on UCoreStoryLevelsSelectorWidget");
static_assert(offsetof(UCoreStoryLevelsSelectorWidget, IsReadOnly) == 0x000390, "Member 'UCoreStoryLevelsSelectorWidget::IsReadOnly' has a wrong offset!");
static_assert(offsetof(UCoreStoryLevelsSelectorWidget, CoreStoryLevelButtonWidgetClass) == 0x000398, "Member 'UCoreStoryLevelsSelectorWidget::CoreStoryLevelButtonWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoryLevelsSelectorWidget, LevelButtonsContainer) == 0x0003A0, "Member 'UCoreStoryLevelsSelectorWidget::LevelButtonsContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoryLevelsSelectorWidget, PreviousLevelInputSwitcher) == 0x0003A8, "Member 'UCoreStoryLevelsSelectorWidget::PreviousLevelInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreStoryLevelsSelectorWidget, NextLevelInputSwitcher) == 0x0003B0, "Member 'UCoreStoryLevelsSelectorWidget::NextLevelInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreStoryLevelsSelectorWidget, _levelButtonsData) == 0x0003B8, "Member 'UCoreStoryLevelsSelectorWidget::_levelButtonsData' has a wrong offset!");

// Class DBDUIViewsCore.CoreSubtitlesWidget
// 0x0010 (0x0330 - 0x0320)
class UCoreSubtitlesWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          SubtitlesTB;                                       // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSubtitlesWidget">();
	}
	static class UCoreSubtitlesWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSubtitlesWidget>();
	}
};
static_assert(alignof(UCoreSubtitlesWidget) == 0x000008, "Wrong alignment on UCoreSubtitlesWidget");
static_assert(sizeof(UCoreSubtitlesWidget) == 0x000330, "Wrong size on UCoreSubtitlesWidget");
static_assert(offsetof(UCoreSubtitlesWidget, SubtitlesTB) == 0x000328, "Member 'UCoreSubtitlesWidget::SubtitlesTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreSurrenderNotificationWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreSurrenderNotificationWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSurrenderNotificationWidget">();
	}
	static class UCoreSurrenderNotificationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSurrenderNotificationWidget>();
	}
};
static_assert(alignof(UCoreSurrenderNotificationWidget) == 0x000008, "Wrong alignment on UCoreSurrenderNotificationWidget");
static_assert(sizeof(UCoreSurrenderNotificationWidget) == 0x000358, "Wrong size on UCoreSurrenderNotificationWidget");

// Class DBDUIViewsCore.CoreTallyMenuWidget
// 0x0008 (0x0328 - 0x0320)
class UCoreTallyMenuWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTallyMenuWidget">();
	}
	static class UCoreTallyMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTallyMenuWidget>();
	}
};
static_assert(alignof(UCoreTallyMenuWidget) == 0x000008, "Wrong alignment on UCoreTallyMenuWidget");
static_assert(sizeof(UCoreTallyMenuWidget) == 0x000328, "Wrong size on UCoreTallyMenuWidget");

// Class DBDUIViewsCore.CoreTallyPlayerStatusWidget
// 0x02D8 (0x05F8 - 0x0320)
class UCoreTallyPlayerStatusWidget final : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void(const class FString& PlayerId)> _onReportButtonClicked;            // 0x0320(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FString& PlayerId)> _onPlayerStatusClicked;            // 0x0330(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CharacterNameTB;                                   // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          AccountNameTB;                                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ScoreTB;                                           // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LoadoutBlockerTB;                                  // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuLoadoutPartWidget*             CorePower;                                         // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuLoadoutPartWidget*             CoreItem;                                          // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuAddonWidget*                   CoreAddon_1;                                       // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuAddonWidget*                   CoreAddon_2;                                       // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuLoadoutPartWidget*             CoreOffering;                                      // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuClassWidget*                   CoreClass;                                         // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         PerksContainer;                                    // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreMenuPerkWidget*>            PerkSlotWidgets;                                   // 0x0398(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UCoreIconToggleWidget*                  ReportButton;                                      // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDButton*                             HoverzoneButton;                                   // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDButton*                             HitzoneButton;                                     // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxNameLength;                                     // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCoreMenuAddonWidget*>           _addonSlotWidget;                                  // 0x03C8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UMenuLoadoutPartViewData*               _menuLoadoutPartViewData;                          // 0x03D8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTallyPlayerStatusViewData             _tallyPlayerStatusViewData;                        // 0x03E0(0x0200)(Transient, NativeAccessSpecifierPrivate)
	TArray<class UCoreMenuLoadoutPartWidget*>     _slotList;                                         // 0x05E0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5F0[0x8];                                      // 0x05F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideLoadoutTooltip(class UCoreButtonWidget* unhoveredSlotWidget);
	void OnPlayerStatusClicked();
	void OnPlayerStatusHovered();
	void OnPlayerStatusUnhovered();
	void OnReportButtonClicked(class UCoreButtonWidget* buttonTarget);
	void SetAsReported(const bool IsReported);
	void SetData(const struct FTallyPlayerStatusViewData& ViewData, EGameType gameType, bool isUsingCharacterClass);
	void SetKillerLoadoutBlocked(const bool IsBlocked);
	void SetPlayerCardAnimation(const bool IsAnimationPlaying_0);
	void SetPlayerCardAnimationMode(const EPlayerCardAnimationMode PlayerCardAnimationMode);
	void SetReportButtonOpacity(const float Opacity);
	void ShowLoadoutTooltip(class UCoreButtonWidget* hoveredSlotWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTallyPlayerStatusWidget">();
	}
	static class UCoreTallyPlayerStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTallyPlayerStatusWidget>();
	}
};
static_assert(alignof(UCoreTallyPlayerStatusWidget) == 0x000008, "Wrong alignment on UCoreTallyPlayerStatusWidget");
static_assert(sizeof(UCoreTallyPlayerStatusWidget) == 0x0005F8, "Wrong size on UCoreTallyPlayerStatusWidget");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, _onReportButtonClicked) == 0x000320, "Member 'UCoreTallyPlayerStatusWidget::_onReportButtonClicked' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, _onPlayerStatusClicked) == 0x000330, "Member 'UCoreTallyPlayerStatusWidget::_onPlayerStatusClicked' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, CharacterNameTB) == 0x000340, "Member 'UCoreTallyPlayerStatusWidget::CharacterNameTB' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, AccountNameTB) == 0x000348, "Member 'UCoreTallyPlayerStatusWidget::AccountNameTB' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, ScoreTB) == 0x000350, "Member 'UCoreTallyPlayerStatusWidget::ScoreTB' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, LoadoutBlockerTB) == 0x000358, "Member 'UCoreTallyPlayerStatusWidget::LoadoutBlockerTB' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, CorePower) == 0x000360, "Member 'UCoreTallyPlayerStatusWidget::CorePower' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, CoreItem) == 0x000368, "Member 'UCoreTallyPlayerStatusWidget::CoreItem' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, CoreAddon_1) == 0x000370, "Member 'UCoreTallyPlayerStatusWidget::CoreAddon_1' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, CoreAddon_2) == 0x000378, "Member 'UCoreTallyPlayerStatusWidget::CoreAddon_2' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, CoreOffering) == 0x000380, "Member 'UCoreTallyPlayerStatusWidget::CoreOffering' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, CoreClass) == 0x000388, "Member 'UCoreTallyPlayerStatusWidget::CoreClass' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, PerksContainer) == 0x000390, "Member 'UCoreTallyPlayerStatusWidget::PerksContainer' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, PerkSlotWidgets) == 0x000398, "Member 'UCoreTallyPlayerStatusWidget::PerkSlotWidgets' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, ReportButton) == 0x0003A8, "Member 'UCoreTallyPlayerStatusWidget::ReportButton' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, HoverzoneButton) == 0x0003B0, "Member 'UCoreTallyPlayerStatusWidget::HoverzoneButton' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, HitzoneButton) == 0x0003B8, "Member 'UCoreTallyPlayerStatusWidget::HitzoneButton' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, MaxNameLength) == 0x0003C0, "Member 'UCoreTallyPlayerStatusWidget::MaxNameLength' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, _addonSlotWidget) == 0x0003C8, "Member 'UCoreTallyPlayerStatusWidget::_addonSlotWidget' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, _menuLoadoutPartViewData) == 0x0003D8, "Member 'UCoreTallyPlayerStatusWidget::_menuLoadoutPartViewData' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, _tallyPlayerStatusViewData) == 0x0003E0, "Member 'UCoreTallyPlayerStatusWidget::_tallyPlayerStatusViewData' has a wrong offset!");
static_assert(offsetof(UCoreTallyPlayerStatusWidget, _slotList) == 0x0005E0, "Member 'UCoreTallyPlayerStatusWidget::_slotList' has a wrong offset!");

// Class DBDUIViewsCore.CoreTallyScoreboardWidget
// 0x00A8 (0x03C8 - 0x0320)
class UCoreTallyScoreboardWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCoreTallyPlayerStatusWidget*>   SurvivorStatusWidgets;                             // 0x0328(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UCoreTallyPlayerStatusWidget*>   KillerStatusWidgets;                               // 0x0338(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          StatusTB;                                          // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ScoreTB;                                           // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePlayerSocialOptionsMenuWidget*     PlayerSocialOptionsMenu;                           // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SocialOptionsMenuRightOffset;                      // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SocialOptionsMenuTopOffset;                        // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FString& PlayerId)> _onPlayerReportClicked;            // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const class FString& PlayerId)> _onPlayerStatusClicked;            // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const struct FPlayerSocialOptionViewData& optionData)> _onPlayerSocialOptionClicked; // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TArray<struct FTallyPlayerStatusViewData>     _tallyPlayerStatusViewData;                        // 0x0398(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A8[0x20];                                     // 0x03A8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerSocialOptionClicked(const struct FPlayerSocialOptionViewData& playerSocialOptionData);
	void OnPlayerStatusClicked(const class FString& PlayerId);
	void OnReportButtonClicked(const class FString& PlayerId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTallyScoreboardWidget">();
	}
	static class UCoreTallyScoreboardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTallyScoreboardWidget>();
	}
};
static_assert(alignof(UCoreTallyScoreboardWidget) == 0x000008, "Wrong alignment on UCoreTallyScoreboardWidget");
static_assert(sizeof(UCoreTallyScoreboardWidget) == 0x0003C8, "Wrong size on UCoreTallyScoreboardWidget");
static_assert(offsetof(UCoreTallyScoreboardWidget, SurvivorStatusWidgets) == 0x000328, "Member 'UCoreTallyScoreboardWidget::SurvivorStatusWidgets' has a wrong offset!");
static_assert(offsetof(UCoreTallyScoreboardWidget, KillerStatusWidgets) == 0x000338, "Member 'UCoreTallyScoreboardWidget::KillerStatusWidgets' has a wrong offset!");
static_assert(offsetof(UCoreTallyScoreboardWidget, StatusTB) == 0x000348, "Member 'UCoreTallyScoreboardWidget::StatusTB' has a wrong offset!");
static_assert(offsetof(UCoreTallyScoreboardWidget, ScoreTB) == 0x000350, "Member 'UCoreTallyScoreboardWidget::ScoreTB' has a wrong offset!");
static_assert(offsetof(UCoreTallyScoreboardWidget, PlayerSocialOptionsMenu) == 0x000358, "Member 'UCoreTallyScoreboardWidget::PlayerSocialOptionsMenu' has a wrong offset!");
static_assert(offsetof(UCoreTallyScoreboardWidget, SocialOptionsMenuRightOffset) == 0x000360, "Member 'UCoreTallyScoreboardWidget::SocialOptionsMenuRightOffset' has a wrong offset!");
static_assert(offsetof(UCoreTallyScoreboardWidget, SocialOptionsMenuTopOffset) == 0x000364, "Member 'UCoreTallyScoreboardWidget::SocialOptionsMenuTopOffset' has a wrong offset!");
static_assert(offsetof(UCoreTallyScoreboardWidget, _onPlayerReportClicked) == 0x000368, "Member 'UCoreTallyScoreboardWidget::_onPlayerReportClicked' has a wrong offset!");
static_assert(offsetof(UCoreTallyScoreboardWidget, _onPlayerStatusClicked) == 0x000378, "Member 'UCoreTallyScoreboardWidget::_onPlayerStatusClicked' has a wrong offset!");
static_assert(offsetof(UCoreTallyScoreboardWidget, _onPlayerSocialOptionClicked) == 0x000388, "Member 'UCoreTallyScoreboardWidget::_onPlayerSocialOptionClicked' has a wrong offset!");
static_assert(offsetof(UCoreTallyScoreboardWidget, _tallyPlayerStatusViewData) == 0x000398, "Member 'UCoreTallyScoreboardWidget::_tallyPlayerStatusViewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreTemplateWidget
// 0x0008 (0x02B0 - 0x02A8)
class UCoreTemplateWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTemplateWidget">();
	}
	static class UCoreTemplateWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTemplateWidget>();
	}
};
static_assert(alignof(UCoreTemplateWidget) == 0x000008, "Wrong alignment on UCoreTemplateWidget");
static_assert(sizeof(UCoreTemplateWidget) == 0x0002B0, "Wrong size on UCoreTemplateWidget");

// Class DBDUIViewsCore.CoreTestBuildFlagWidget
// 0x0028 (0x0378 - 0x0350)
class UCoreTestBuildFlagWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           ContainerCanvasPanel;                              // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             TestFlagContainer;                                 // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             TopLineTextfield;                                  // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             BottomLineTextfield;                               // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void UpdateTestFlagPosition(ETestBuildFlagPosition testBuildFlagPosition);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTestBuildFlagWidget">();
	}
	static class UCoreTestBuildFlagWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTestBuildFlagWidget>();
	}
};
static_assert(alignof(UCoreTestBuildFlagWidget) == 0x000008, "Wrong alignment on UCoreTestBuildFlagWidget");
static_assert(sizeof(UCoreTestBuildFlagWidget) == 0x000378, "Wrong size on UCoreTestBuildFlagWidget");
static_assert(offsetof(UCoreTestBuildFlagWidget, ContainerCanvasPanel) == 0x000358, "Member 'UCoreTestBuildFlagWidget::ContainerCanvasPanel' has a wrong offset!");
static_assert(offsetof(UCoreTestBuildFlagWidget, TestFlagContainer) == 0x000360, "Member 'UCoreTestBuildFlagWidget::TestFlagContainer' has a wrong offset!");
static_assert(offsetof(UCoreTestBuildFlagWidget, TopLineTextfield) == 0x000368, "Member 'UCoreTestBuildFlagWidget::TopLineTextfield' has a wrong offset!");
static_assert(offsetof(UCoreTestBuildFlagWidget, BottomLineTextfield) == 0x000370, "Member 'UCoreTestBuildFlagWidget::BottomLineTextfield' has a wrong offset!");

// Class DBDUIViewsCore.CoreTimedEffectMeterWidget
// 0x0010 (0x0360 - 0x0350)
class UCoreTimedEffectMeterWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetVisualState(const ETimedEffectMeterState newState);

	ETimedEffectMeterState GetPreviousState() const;
	float GetProgress() const;
	ETimedEffectMeterState GetState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTimedEffectMeterWidget">();
	}
	static class UCoreTimedEffectMeterWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTimedEffectMeterWidget>();
	}
};
static_assert(alignof(UCoreTimedEffectMeterWidget) == 0x000008, "Wrong alignment on UCoreTimedEffectMeterWidget");
static_assert(sizeof(UCoreTimedEffectMeterWidget) == 0x000360, "Wrong size on UCoreTimedEffectMeterWidget");

// Class DBDUIViewsCore.CoreTimerFlagWidget
// 0x0068 (0x0388 - 0x0320)
class UCoreTimerFlagWidget : public UCoreBaseUserWidget
{
public:
	class UDBDTextBlock*                          TimerTB;                                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerFlagViewData                     _cachedData;                                       // 0x0328(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	EFlagSize                                     _currentFlagSize;                                  // 0x0358(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_359[0x27];                                     // 0x0359(0x0027)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreButtonWidget*                      _targetButton;                                     // 0x0380(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BindToButton(class UCoreButtonWidget* targetButton);
	void NativeDestruct();
	void OnTargetHovered(class UCoreButtonWidget* targetButton);
	void OnTargetUnhovered(class UCoreButtonWidget* targetButton);
	void OnTimerTick(int32 RemainingTime);
	void SetData(const struct FTimerFlagViewData& Data);
	void UnbindFromButton();
	void UpdateFlagSize(EFlagSize FlagSize);
	void UpdateTimer(const class FString& newTimer);

	const struct FTimerFlagViewData GetCachedData() const;
	EFlagSize GetCurrentFlagSize() const;
	bool IsDataSet() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTimerFlagWidget">();
	}
	static class UCoreTimerFlagWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTimerFlagWidget>();
	}
};
static_assert(alignof(UCoreTimerFlagWidget) == 0x000008, "Wrong alignment on UCoreTimerFlagWidget");
static_assert(sizeof(UCoreTimerFlagWidget) == 0x000388, "Wrong size on UCoreTimerFlagWidget");
static_assert(offsetof(UCoreTimerFlagWidget, TimerTB) == 0x000320, "Member 'UCoreTimerFlagWidget::TimerTB' has a wrong offset!");
static_assert(offsetof(UCoreTimerFlagWidget, _cachedData) == 0x000328, "Member 'UCoreTimerFlagWidget::_cachedData' has a wrong offset!");
static_assert(offsetof(UCoreTimerFlagWidget, _currentFlagSize) == 0x000358, "Member 'UCoreTimerFlagWidget::_currentFlagSize' has a wrong offset!");
static_assert(offsetof(UCoreTimerFlagWidget, _targetButton) == 0x000380, "Member 'UCoreTimerFlagWidget::_targetButton' has a wrong offset!");

// Class DBDUIViewsCore.CoreToastNotificationContainerWidget
// 0x0098 (0x03B8 - 0x0320)
class UCoreToastNotificationContainerWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreToastNotificationWidget> ToastNotificationWidgetClass;                    // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           ToastsContainer;                                   // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<int32, class UCoreToastNotificationWidget*> _toastsDisplayedOnScreen;                       // 0x0338(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_388[0x30];                                     // 0x0388(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleToastButtonSelected(const int32 buttonId, const uint32 notificationId);
	void HandleToastDisplayEnded(const uint32 notificationId);
	void HandleToastPromptSelected(const uint32 notificationId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreToastNotificationContainerWidget">();
	}
	static class UCoreToastNotificationContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreToastNotificationContainerWidget>();
	}
};
static_assert(alignof(UCoreToastNotificationContainerWidget) == 0x000008, "Wrong alignment on UCoreToastNotificationContainerWidget");
static_assert(sizeof(UCoreToastNotificationContainerWidget) == 0x0003B8, "Wrong size on UCoreToastNotificationContainerWidget");
static_assert(offsetof(UCoreToastNotificationContainerWidget, ToastNotificationWidgetClass) == 0x000328, "Member 'UCoreToastNotificationContainerWidget::ToastNotificationWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreToastNotificationContainerWidget, ToastsContainer) == 0x000330, "Member 'UCoreToastNotificationContainerWidget::ToastsContainer' has a wrong offset!");
static_assert(offsetof(UCoreToastNotificationContainerWidget, _toastsDisplayedOnScreen) == 0x000338, "Member 'UCoreToastNotificationContainerWidget::_toastsDisplayedOnScreen' has a wrong offset!");

// Class DBDUIViewsCore.CoreToastNotificationWidget
// 0x0158 (0x0478 - 0x0320)
class UCoreToastNotificationWidget : public UCoreBaseUserWidget
{
public:
	class UDBDImage*                              ToastIcon;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDRichTextBlock*                      ToastTitle;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDRichTextBlock*                      ToastText;                                         // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDImage*                              TimeToastProgression;                              // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         ButtonContainer;                                   // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreKeyListenerButtonWidget*           LeftButton;                                        // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreKeyListenerButtonWidget*           RightButton;                                       // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCoreKeyListenerButtonWidget> ButtonWidgetClass;                               // 0x0358(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 InputBlockerId;                                    // 0x0360(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FToastNotificationViewData             _toastData;                                        // 0x0370(0x00C0)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_430[0x48];                                     // 0x0430(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeVisibility(bool IsVisible_0);
	void OnButtonClicked(const int32 buttonId);
	void OnLeftButtonClicked(class UCoreButtonWidget* Button);
	void OnRightButtonClicked(class UCoreButtonWidget* Button);
	void OnTimerFinished();
	void SetVisuals(const struct FToastNotificationViewData& toastData, const bool IsInteractable_0);
	void UpdateScaleformInputBlocker();

	void OnOutAnimationFinished() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreToastNotificationWidget">();
	}
	static class UCoreToastNotificationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreToastNotificationWidget>();
	}
};
static_assert(alignof(UCoreToastNotificationWidget) == 0x000008, "Wrong alignment on UCoreToastNotificationWidget");
static_assert(sizeof(UCoreToastNotificationWidget) == 0x000478, "Wrong size on UCoreToastNotificationWidget");
static_assert(offsetof(UCoreToastNotificationWidget, ToastIcon) == 0x000320, "Member 'UCoreToastNotificationWidget::ToastIcon' has a wrong offset!");
static_assert(offsetof(UCoreToastNotificationWidget, ToastTitle) == 0x000328, "Member 'UCoreToastNotificationWidget::ToastTitle' has a wrong offset!");
static_assert(offsetof(UCoreToastNotificationWidget, ToastText) == 0x000330, "Member 'UCoreToastNotificationWidget::ToastText' has a wrong offset!");
static_assert(offsetof(UCoreToastNotificationWidget, TimeToastProgression) == 0x000338, "Member 'UCoreToastNotificationWidget::TimeToastProgression' has a wrong offset!");
static_assert(offsetof(UCoreToastNotificationWidget, ButtonContainer) == 0x000340, "Member 'UCoreToastNotificationWidget::ButtonContainer' has a wrong offset!");
static_assert(offsetof(UCoreToastNotificationWidget, LeftButton) == 0x000348, "Member 'UCoreToastNotificationWidget::LeftButton' has a wrong offset!");
static_assert(offsetof(UCoreToastNotificationWidget, RightButton) == 0x000350, "Member 'UCoreToastNotificationWidget::RightButton' has a wrong offset!");
static_assert(offsetof(UCoreToastNotificationWidget, ButtonWidgetClass) == 0x000358, "Member 'UCoreToastNotificationWidget::ButtonWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreToastNotificationWidget, InputBlockerId) == 0x000360, "Member 'UCoreToastNotificationWidget::InputBlockerId' has a wrong offset!");
static_assert(offsetof(UCoreToastNotificationWidget, _toastData) == 0x000370, "Member 'UCoreToastNotificationWidget::_toastData' has a wrong offset!");

// Class DBDUIViewsCore.CoreTutorialMysteryNoteWidget
// 0x0008 (0x0358 - 0x0350)
class UCoreTutorialMysteryNoteWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTutorialMysteryNoteWidget">();
	}
	static class UCoreTutorialMysteryNoteWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTutorialMysteryNoteWidget>();
	}
};
static_assert(alignof(UCoreTutorialMysteryNoteWidget) == 0x000008, "Wrong alignment on UCoreTutorialMysteryNoteWidget");
static_assert(sizeof(UCoreTutorialMysteryNoteWidget) == 0x000358, "Wrong size on UCoreTutorialMysteryNoteWidget");

// Class DBDUIViewsCore.CoreTutorialObjectiveItem
// 0x0010 (0x0330 - 0x0320)
class UCoreTutorialObjectiveItem final : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void(class UCoreTutorialObjectiveItem* Item)> TutorialObjectiveCompletedDelegate; // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void InitObjective(const struct FTutorialObjectivesViewData& interactionsViewData);
	void SetObjectiveCompleted(bool removeAfterCompletion);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTutorialObjectiveItem">();
	}
	static class UCoreTutorialObjectiveItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTutorialObjectiveItem>();
	}
};
static_assert(alignof(UCoreTutorialObjectiveItem) == 0x000008, "Wrong alignment on UCoreTutorialObjectiveItem");
static_assert(sizeof(UCoreTutorialObjectiveItem) == 0x000330, "Wrong size on UCoreTutorialObjectiveItem");
static_assert(offsetof(UCoreTutorialObjectiveItem, TutorialObjectiveCompletedDelegate) == 0x000320, "Member 'UCoreTutorialObjectiveItem::TutorialObjectiveCompletedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreTutorialObjectivesContainer
// 0x0080 (0x03D0 - 0x0350)
class UCoreTutorialObjectivesContainer final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreTutorialObjectiveItem> CoreTutorialObjectiveItemClass;                    // 0x0358(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BasePooledInstanceAmount;                          // 0x0360(0x0004)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridPanel*                             ObjectiveContainer;                                // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreTutorialObjectiveItem*>     _objectivePool;                                    // 0x0370(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class FName, class UCoreTutorialObjectiveItem*> _objectiveItems;                            // 0x0380(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void OnTutorialObjectiveCompleted(class UCoreTutorialObjectiveItem* Item);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTutorialObjectivesContainer">();
	}
	static class UCoreTutorialObjectivesContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTutorialObjectivesContainer>();
	}
};
static_assert(alignof(UCoreTutorialObjectivesContainer) == 0x000008, "Wrong alignment on UCoreTutorialObjectivesContainer");
static_assert(sizeof(UCoreTutorialObjectivesContainer) == 0x0003D0, "Wrong size on UCoreTutorialObjectivesContainer");
static_assert(offsetof(UCoreTutorialObjectivesContainer, CoreTutorialObjectiveItemClass) == 0x000358, "Member 'UCoreTutorialObjectivesContainer::CoreTutorialObjectiveItemClass' has a wrong offset!");
static_assert(offsetof(UCoreTutorialObjectivesContainer, BasePooledInstanceAmount) == 0x000360, "Member 'UCoreTutorialObjectivesContainer::BasePooledInstanceAmount' has a wrong offset!");
static_assert(offsetof(UCoreTutorialObjectivesContainer, ObjectiveContainer) == 0x000368, "Member 'UCoreTutorialObjectivesContainer::ObjectiveContainer' has a wrong offset!");
static_assert(offsetof(UCoreTutorialObjectivesContainer, _objectivePool) == 0x000370, "Member 'UCoreTutorialObjectivesContainer::_objectivePool' has a wrong offset!");
static_assert(offsetof(UCoreTutorialObjectivesContainer, _objectiveItems) == 0x000380, "Member 'UCoreTutorialObjectivesContainer::_objectiveItems' has a wrong offset!");

// Class DBDUIViewsCore.CoreTutorialPopupWidget
// 0x0028 (0x0378 - 0x0350)
class UCoreTutorialPopupWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               ProgressionInputSwitcher;                          // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ClosePopupSfx;                                     // 0x0360(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _notifTutoConfirmButtonClickDelegate;              // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTutorialPopupWidget">();
	}
	static class UCoreTutorialPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTutorialPopupWidget>();
	}
};
static_assert(alignof(UCoreTutorialPopupWidget) == 0x000008, "Wrong alignment on UCoreTutorialPopupWidget");
static_assert(sizeof(UCoreTutorialPopupWidget) == 0x000378, "Wrong size on UCoreTutorialPopupWidget");
static_assert(offsetof(UCoreTutorialPopupWidget, ProgressionInputSwitcher) == 0x000358, "Member 'UCoreTutorialPopupWidget::ProgressionInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreTutorialPopupWidget, ClosePopupSfx) == 0x000360, "Member 'UCoreTutorialPopupWidget::ClosePopupSfx' has a wrong offset!");
static_assert(offsetof(UCoreTutorialPopupWidget, _notifTutoConfirmButtonClickDelegate) == 0x000368, "Member 'UCoreTutorialPopupWidget::_notifTutoConfirmButtonClickDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreUnlockPersonalPerksPopupWidget
// 0x0030 (0x03B8 - 0x0388)
class UCoreUnlockPersonalPerksPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCoreMenuPerkWidget*>            _perkArray;                                        // 0x0390(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UCoreMenuPerkWidget*                    FirstPerk;                                         // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuPerkWidget*                    SecondPerk;                                        // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuPerkWidget*                    ThirdPerk;                                         // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HideMenuPerkTooltip(class UCoreButtonWidget* unhoveredSlotWidget);
	void ShowMenuPerkTooltip(class UCoreButtonWidget* hoveredSlotWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreUnlockPersonalPerksPopupWidget">();
	}
	static class UCoreUnlockPersonalPerksPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreUnlockPersonalPerksPopupWidget>();
	}
};
static_assert(alignof(UCoreUnlockPersonalPerksPopupWidget) == 0x000008, "Wrong alignment on UCoreUnlockPersonalPerksPopupWidget");
static_assert(sizeof(UCoreUnlockPersonalPerksPopupWidget) == 0x0003B8, "Wrong size on UCoreUnlockPersonalPerksPopupWidget");
static_assert(offsetof(UCoreUnlockPersonalPerksPopupWidget, _perkArray) == 0x000390, "Member 'UCoreUnlockPersonalPerksPopupWidget::_perkArray' has a wrong offset!");
static_assert(offsetof(UCoreUnlockPersonalPerksPopupWidget, FirstPerk) == 0x0003A0, "Member 'UCoreUnlockPersonalPerksPopupWidget::FirstPerk' has a wrong offset!");
static_assert(offsetof(UCoreUnlockPersonalPerksPopupWidget, SecondPerk) == 0x0003A8, "Member 'UCoreUnlockPersonalPerksPopupWidget::SecondPerk' has a wrong offset!");
static_assert(offsetof(UCoreUnlockPersonalPerksPopupWidget, ThirdPerk) == 0x0003B0, "Member 'UCoreUnlockPersonalPerksPopupWidget::ThirdPerk' has a wrong offset!");

// Class DBDUIViewsCore.CoreWalletWidget
// 0x0070 (0x0390 - 0x0320)
class UCoreWalletWidget final : public UCoreBaseUserWidget
{
public:
	TSubclassOf<class UCoreCurrencyLabelWidget>   CoreCurrencyLabelWidgetClass;                      // 0x0320(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGridPanel*                             CurrencyContainer;                                 // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ECurrencyType, class UCoreCurrencyLabelWidget*> _currencyWidgetMap;                         // 0x0330(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(ECurrencyType currencyType)> _currencyClickedDelegate;             // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	void FullUpdateCurrency(const struct FCurrencyLabelViewData& ViewData);
	void InitWallet(const TArray<struct FCurrencyLabelViewData>& walletData);
	void OnCurrencyClicked(class UCoreButtonWidget* buttonTarget);
	void PlayNotEnoughCurrency(const ECurrencyType Type);
	void SetCurrenciesButtonsEnabled(const bool IsEnabled);
	void UpdateCurrency(const ECurrencyType Type, int32 newBalance, int32 previousBalance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreWalletWidget">();
	}
	static class UCoreWalletWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreWalletWidget>();
	}
};
static_assert(alignof(UCoreWalletWidget) == 0x000008, "Wrong alignment on UCoreWalletWidget");
static_assert(sizeof(UCoreWalletWidget) == 0x000390, "Wrong size on UCoreWalletWidget");
static_assert(offsetof(UCoreWalletWidget, CoreCurrencyLabelWidgetClass) == 0x000320, "Member 'UCoreWalletWidget::CoreCurrencyLabelWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreWalletWidget, CurrencyContainer) == 0x000328, "Member 'UCoreWalletWidget::CurrencyContainer' has a wrong offset!");
static_assert(offsetof(UCoreWalletWidget, _currencyWidgetMap) == 0x000330, "Member 'UCoreWalletWidget::_currencyWidgetMap' has a wrong offset!");
static_assert(offsetof(UCoreWalletWidget, _currencyClickedDelegate) == 0x000380, "Member 'UCoreWalletWidget::_currencyClickedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreWardrobeActionButtonsWidget
// 0x0130 (0x0450 - 0x0320)
class UCoreWardrobeActionButtonsWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreCurrencyInputSwitcherWidget> _currencySwitcherWidgetClass;                // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedCurrencyButtonCount;                // 0x0330(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _currencyButtonPadding;                            // 0x0334(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	ETextJustify                                  _currencyButtonAlignment;                          // 0x0344(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          CurrencyButtonsTitleTB;                            // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         CurrencyButtonsHorizontalBox;                      // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           CurrencyButtonsMainContainer;                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreButtonWidget*                      EquipButton;                                       // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreButtonWidget*                      EquipAllButton;                                    // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreButtonWidget*                      SelectAllButton;                                   // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoreItemAvailabilityBannerWidget* AvailabilityBanner;                                // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreButtonWidget*                      PlayMoriButton;                                    // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreButtonWidget*                      SecondPlayMoriButton;                              // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreIconButtonWidget*                  ZoomCharmButton;                                   // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          WarningMessageTB;                                  // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _playSecondaryMoriTooltipText;                     // 0x03A0(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _currencyButtonList;                               // 0x03B8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UCoreCurrencyInputSwitcherWidget*> _chargingDisabledButton;                         // 0x03C0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(ECurrencyType currencyType)> _itemUnlockClickedDelegate;           // 0x03D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _itemEquipClickedDelegate;                         // 0x03E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _itemEquipAllClickedDelegate;                      // 0x03F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _itemSelectAllClickedDelegate;                     // 0x0400(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _itemAvailabilityBannerClickedDelegate;            // 0x0410(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _playMoriClickedDelegate;                          // 0x0420(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _playSecondMoriClickedDelegate;                    // 0x0430(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _zoomCharmClickedDelegate;                         // 0x0440(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	void OnItemAvailabilityBannerClicked();
	void OnItemEquipAllClicked(class UCoreButtonWidget* buttonTarget);
	void OnItemEquipClicked(class UCoreButtonWidget* buttonTarget);
	void OnItemSelectAllClicked(class UCoreButtonWidget* buttonTarget);
	void OnItemUnlockPressed();
	void OnItemUnlockReleased();
	void OnItemUnlockTriggered(const ECurrencyType currencyType);
	void OnPlayMoriClicked(class UCoreButtonWidget* buttonTarget);
	void OnPlayMoriHovered(class UCoreButtonWidget* buttonTarget);
	void OnPlayMoriUnhovered(class UCoreButtonWidget* buttonTarget);
	void OnPlaySecondMoriClicked(class UCoreButtonWidget* buttonTarget);
	void OnSecondMoriHovered(class UCoreButtonWidget* buttonTarget);
	void OnSecondMoriUnhovered(class UCoreButtonWidget* buttonTarget);
	void OnZoomCharmClicked(class UCoreButtonWidget* buttonTarget);
	void UpdateMoriButtonVisual(const bool HasUniqueMori);

	void UpdateZoomCharmIcon(const bool IsCharmZoomed) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreWardrobeActionButtonsWidget">();
	}
	static class UCoreWardrobeActionButtonsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreWardrobeActionButtonsWidget>();
	}
};
static_assert(alignof(UCoreWardrobeActionButtonsWidget) == 0x000008, "Wrong alignment on UCoreWardrobeActionButtonsWidget");
static_assert(sizeof(UCoreWardrobeActionButtonsWidget) == 0x000450, "Wrong size on UCoreWardrobeActionButtonsWidget");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _currencySwitcherWidgetClass) == 0x000328, "Member 'UCoreWardrobeActionButtonsWidget::_currencySwitcherWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _preConstructedCurrencyButtonCount) == 0x000330, "Member 'UCoreWardrobeActionButtonsWidget::_preConstructedCurrencyButtonCount' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _currencyButtonPadding) == 0x000334, "Member 'UCoreWardrobeActionButtonsWidget::_currencyButtonPadding' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _currencyButtonAlignment) == 0x000344, "Member 'UCoreWardrobeActionButtonsWidget::_currencyButtonAlignment' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, CurrencyButtonsTitleTB) == 0x000348, "Member 'UCoreWardrobeActionButtonsWidget::CurrencyButtonsTitleTB' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, CurrencyButtonsHorizontalBox) == 0x000350, "Member 'UCoreWardrobeActionButtonsWidget::CurrencyButtonsHorizontalBox' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, CurrencyButtonsMainContainer) == 0x000358, "Member 'UCoreWardrobeActionButtonsWidget::CurrencyButtonsMainContainer' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, EquipButton) == 0x000360, "Member 'UCoreWardrobeActionButtonsWidget::EquipButton' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, EquipAllButton) == 0x000368, "Member 'UCoreWardrobeActionButtonsWidget::EquipAllButton' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, SelectAllButton) == 0x000370, "Member 'UCoreWardrobeActionButtonsWidget::SelectAllButton' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, AvailabilityBanner) == 0x000378, "Member 'UCoreWardrobeActionButtonsWidget::AvailabilityBanner' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, PlayMoriButton) == 0x000380, "Member 'UCoreWardrobeActionButtonsWidget::PlayMoriButton' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, SecondPlayMoriButton) == 0x000388, "Member 'UCoreWardrobeActionButtonsWidget::SecondPlayMoriButton' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, ZoomCharmButton) == 0x000390, "Member 'UCoreWardrobeActionButtonsWidget::ZoomCharmButton' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, WarningMessageTB) == 0x000398, "Member 'UCoreWardrobeActionButtonsWidget::WarningMessageTB' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _playSecondaryMoriTooltipText) == 0x0003A0, "Member 'UCoreWardrobeActionButtonsWidget::_playSecondaryMoriTooltipText' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _currencyButtonList) == 0x0003B8, "Member 'UCoreWardrobeActionButtonsWidget::_currencyButtonList' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _chargingDisabledButton) == 0x0003C0, "Member 'UCoreWardrobeActionButtonsWidget::_chargingDisabledButton' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _itemUnlockClickedDelegate) == 0x0003D0, "Member 'UCoreWardrobeActionButtonsWidget::_itemUnlockClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _itemEquipClickedDelegate) == 0x0003E0, "Member 'UCoreWardrobeActionButtonsWidget::_itemEquipClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _itemEquipAllClickedDelegate) == 0x0003F0, "Member 'UCoreWardrobeActionButtonsWidget::_itemEquipAllClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _itemSelectAllClickedDelegate) == 0x000400, "Member 'UCoreWardrobeActionButtonsWidget::_itemSelectAllClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _itemAvailabilityBannerClickedDelegate) == 0x000410, "Member 'UCoreWardrobeActionButtonsWidget::_itemAvailabilityBannerClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _playMoriClickedDelegate) == 0x000420, "Member 'UCoreWardrobeActionButtonsWidget::_playMoriClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _playSecondMoriClickedDelegate) == 0x000430, "Member 'UCoreWardrobeActionButtonsWidget::_playSecondMoriClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreWardrobeActionButtonsWidget, _zoomCharmClickedDelegate) == 0x000440, "Member 'UCoreWardrobeActionButtonsWidget::_zoomCharmClickedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreWatermarkWidget
// 0x0040 (0x0360 - 0x0320)
class UCoreWatermarkWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDBDTextBlock*>                  _watermarkDBDTextBlocks;                           // 0x0328(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_338[0x28];                                     // 0x0338(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateWatermarkText();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreWatermarkWidget">();
	}
	static class UCoreWatermarkWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreWatermarkWidget>();
	}
};
static_assert(alignof(UCoreWatermarkWidget) == 0x000008, "Wrong alignment on UCoreWatermarkWidget");
static_assert(sizeof(UCoreWatermarkWidget) == 0x000360, "Wrong size on UCoreWatermarkWidget");
static_assert(offsetof(UCoreWatermarkWidget, _watermarkDBDTextBlocks) == 0x000328, "Member 'UCoreWatermarkWidget::_watermarkDBDTextBlocks' has a wrong offset!");

// Class DBDUIViewsCore.CurrencyConversionPopupWidget
// 0x0008 (0x0390 - 0x0388)
class UCurrencyConversionPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetData(const class UCurrencyConversionPopupViewData* Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurrencyConversionPopupWidget">();
	}
	static class UCurrencyConversionPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurrencyConversionPopupWidget>();
	}
};
static_assert(alignof(UCurrencyConversionPopupWidget) == 0x000008, "Wrong alignment on UCurrencyConversionPopupWidget");
static_assert(sizeof(UCurrencyConversionPopupWidget) == 0x000390, "Wrong size on UCurrencyConversionPopupWidget");

// Class DBDUIViewsCore.CurrencyProgressionTooltipWidget
// 0x0080 (0x03B0 - 0x0330)
class UCurrencyProgressionTooltipWidget final : public UTooltipWidget
{
public:
	int32                                         MaxExpirationLabels;                               // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreCurrencyExpirationLabelWidget> CoreCurrencyExpirationLabelWidgetClass;    // 0x0338(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          CurrencyTB;                                        // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          CurrencyTitleTB;                                   // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDRichTextBlock*                      CurrencyDescriptionRTB;                            // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDImage*                              TitleBgIMG;                                        // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDImage*                              TitleDecorationIMG;                                // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           EventContainer;                                    // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          EventNameTB;                                       // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDRichTextBlock*                      EventDescriptionTB;                                // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          EventTimerTB;                                      // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           ExpirationPanel;                                   // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           ExpirationLabelContainer;                          // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          ExpirationTitleTB;                                 // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UCoreCurrencyExpirationLabelWidget*> _currencyExpirationWidgetPool;                 // 0x03A0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void SetTooltipData(const struct FCurrencyProgressionTooltipViewData& currencyViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurrencyProgressionTooltipWidget">();
	}
	static class UCurrencyProgressionTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurrencyProgressionTooltipWidget>();
	}
};
static_assert(alignof(UCurrencyProgressionTooltipWidget) == 0x000008, "Wrong alignment on UCurrencyProgressionTooltipWidget");
static_assert(sizeof(UCurrencyProgressionTooltipWidget) == 0x0003B0, "Wrong size on UCurrencyProgressionTooltipWidget");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, MaxExpirationLabels) == 0x000330, "Member 'UCurrencyProgressionTooltipWidget::MaxExpirationLabels' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, CoreCurrencyExpirationLabelWidgetClass) == 0x000338, "Member 'UCurrencyProgressionTooltipWidget::CoreCurrencyExpirationLabelWidgetClass' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, CurrencyTB) == 0x000340, "Member 'UCurrencyProgressionTooltipWidget::CurrencyTB' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, CurrencyTitleTB) == 0x000348, "Member 'UCurrencyProgressionTooltipWidget::CurrencyTitleTB' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, CurrencyDescriptionRTB) == 0x000350, "Member 'UCurrencyProgressionTooltipWidget::CurrencyDescriptionRTB' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, TitleBgIMG) == 0x000358, "Member 'UCurrencyProgressionTooltipWidget::TitleBgIMG' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, TitleDecorationIMG) == 0x000360, "Member 'UCurrencyProgressionTooltipWidget::TitleDecorationIMG' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, EventContainer) == 0x000368, "Member 'UCurrencyProgressionTooltipWidget::EventContainer' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, EventNameTB) == 0x000370, "Member 'UCurrencyProgressionTooltipWidget::EventNameTB' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, EventDescriptionTB) == 0x000378, "Member 'UCurrencyProgressionTooltipWidget::EventDescriptionTB' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, EventTimerTB) == 0x000380, "Member 'UCurrencyProgressionTooltipWidget::EventTimerTB' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, ExpirationPanel) == 0x000388, "Member 'UCurrencyProgressionTooltipWidget::ExpirationPanel' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, ExpirationLabelContainer) == 0x000390, "Member 'UCurrencyProgressionTooltipWidget::ExpirationLabelContainer' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, ExpirationTitleTB) == 0x000398, "Member 'UCurrencyProgressionTooltipWidget::ExpirationTitleTB' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, _currencyExpirationWidgetPool) == 0x0003A0, "Member 'UCurrencyProgressionTooltipWidget::_currencyExpirationWidgetPool' has a wrong offset!");

// Class DBDUIViewsCore.CustomizationItemGridContainer
// 0x00D0 (0x03F0 - 0x0320)
class UCustomizationItemGridContainer : public UCoreBaseUserWidget
{
public:
	TSubclassOf<class UCoreCustomizationItemSlotWrapper> _customizationRewardWidgetClass;            // 0x0320(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedCustomizationItemsCount;            // 0x0328(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _setSmallTemplate;                                 // 0x032C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32D[0x3];                                      // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _columnCountInGrid;                                // 0x0330(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _customizationTileScale;                           // 0x0334(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _layoutMask;                                       // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFlagSize                                     _flagSize;                                         // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33D[0x3];                                      // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _rowCountToShowScrollBar;                          // 0x0340(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _fillGridWithEmptyItems;                           // 0x0344(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _priceTagScale;                                    // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUniformGridPanel*                      GridContainer;                                     // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          ScrollBox;                                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _scrollLabelText;                                  // 0x0360(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _customizationItemsList;                           // 0x0378(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_380[0x70];                                     // 0x0380(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearGrid();
	void OnItemClicked(class UCoreButtonWidget* buttonTarget);
	void SetData(const TArray<class UStoreCustomizationItemViewData*>& customizationRewardsData, const int32 selectedIndex, int32 overrideLayoutMask);
	void SetEquippedItem(const bool IsEquipped);
	void SetScrollPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt);
	void SetSelectedItem(const int32 selectedIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizationItemGridContainer">();
	}
	static class UCustomizationItemGridContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomizationItemGridContainer>();
	}
};
static_assert(alignof(UCustomizationItemGridContainer) == 0x000008, "Wrong alignment on UCustomizationItemGridContainer");
static_assert(sizeof(UCustomizationItemGridContainer) == 0x0003F0, "Wrong size on UCustomizationItemGridContainer");
static_assert(offsetof(UCustomizationItemGridContainer, _customizationRewardWidgetClass) == 0x000320, "Member 'UCustomizationItemGridContainer::_customizationRewardWidgetClass' has a wrong offset!");
static_assert(offsetof(UCustomizationItemGridContainer, _preConstructedCustomizationItemsCount) == 0x000328, "Member 'UCustomizationItemGridContainer::_preConstructedCustomizationItemsCount' has a wrong offset!");
static_assert(offsetof(UCustomizationItemGridContainer, _setSmallTemplate) == 0x00032C, "Member 'UCustomizationItemGridContainer::_setSmallTemplate' has a wrong offset!");
static_assert(offsetof(UCustomizationItemGridContainer, _columnCountInGrid) == 0x000330, "Member 'UCustomizationItemGridContainer::_columnCountInGrid' has a wrong offset!");
static_assert(offsetof(UCustomizationItemGridContainer, _customizationTileScale) == 0x000334, "Member 'UCustomizationItemGridContainer::_customizationTileScale' has a wrong offset!");
static_assert(offsetof(UCustomizationItemGridContainer, _layoutMask) == 0x000338, "Member 'UCustomizationItemGridContainer::_layoutMask' has a wrong offset!");
static_assert(offsetof(UCustomizationItemGridContainer, _flagSize) == 0x00033C, "Member 'UCustomizationItemGridContainer::_flagSize' has a wrong offset!");
static_assert(offsetof(UCustomizationItemGridContainer, _rowCountToShowScrollBar) == 0x000340, "Member 'UCustomizationItemGridContainer::_rowCountToShowScrollBar' has a wrong offset!");
static_assert(offsetof(UCustomizationItemGridContainer, _fillGridWithEmptyItems) == 0x000344, "Member 'UCustomizationItemGridContainer::_fillGridWithEmptyItems' has a wrong offset!");
static_assert(offsetof(UCustomizationItemGridContainer, _priceTagScale) == 0x000348, "Member 'UCustomizationItemGridContainer::_priceTagScale' has a wrong offset!");
static_assert(offsetof(UCustomizationItemGridContainer, GridContainer) == 0x000350, "Member 'UCustomizationItemGridContainer::GridContainer' has a wrong offset!");
static_assert(offsetof(UCustomizationItemGridContainer, ScrollBox) == 0x000358, "Member 'UCustomizationItemGridContainer::ScrollBox' has a wrong offset!");
static_assert(offsetof(UCustomizationItemGridContainer, _scrollLabelText) == 0x000360, "Member 'UCustomizationItemGridContainer::_scrollLabelText' has a wrong offset!");
static_assert(offsetof(UCustomizationItemGridContainer, _customizationItemsList) == 0x000378, "Member 'UCustomizationItemGridContainer::_customizationItemsList' has a wrong offset!");

// Class DBDUIViewsCore.CustomizationItemOriginWidget
// 0x0058 (0x0378 - 0x0320)
class UCustomizationItemOriginWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDRichTextBlock*                      InstructionText;                                   // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              InstructionImage;                                  // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      UnlockTitle;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      UnlockSubtitle;                                    // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreCurrencyInputSwitcherWidget*       CurrencyButton;                                    // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               ArchivesButton;                                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               ChallengesButton;                                  // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               StoreButton;                                       // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_360[0x18];                                     // 0x0360(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisableArchivesButton();
	void DisableChallengesButton();
	void DisableCurrencyButton();
	void DisableInputs();
	void DisableStoreButton();
	void OnButtonClick();
	void SetArchivesState(const TArray<class FText>& Args);
	void SetChallengeState(const TArray<class FText>& Args);
	void SetCurrencyPurchaseState(const struct FPriceTagViewData& CurrencyData);
	void SetData(const struct FCustomizationItemOriginViewData& ViewData);
	void SetDefaultState();
	void SetGameplayState(const TArray<class FText>& Args);
	void SetInputSwitcherEnabled(class UCoreInputSwitcherWidget* inputSwitcher, const bool Enabled);
	void SetMilestonePointsState(const TArray<class FText>& Args);
	void SetState(const struct FCustomizationItemOriginViewData& ViewData);
	void SetStoreState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizationItemOriginWidget">();
	}
	static class UCustomizationItemOriginWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomizationItemOriginWidget>();
	}
};
static_assert(alignof(UCustomizationItemOriginWidget) == 0x000008, "Wrong alignment on UCustomizationItemOriginWidget");
static_assert(sizeof(UCustomizationItemOriginWidget) == 0x000378, "Wrong size on UCustomizationItemOriginWidget");
static_assert(offsetof(UCustomizationItemOriginWidget, InstructionText) == 0x000320, "Member 'UCustomizationItemOriginWidget::InstructionText' has a wrong offset!");
static_assert(offsetof(UCustomizationItemOriginWidget, InstructionImage) == 0x000328, "Member 'UCustomizationItemOriginWidget::InstructionImage' has a wrong offset!");
static_assert(offsetof(UCustomizationItemOriginWidget, UnlockTitle) == 0x000330, "Member 'UCustomizationItemOriginWidget::UnlockTitle' has a wrong offset!");
static_assert(offsetof(UCustomizationItemOriginWidget, UnlockSubtitle) == 0x000338, "Member 'UCustomizationItemOriginWidget::UnlockSubtitle' has a wrong offset!");
static_assert(offsetof(UCustomizationItemOriginWidget, CurrencyButton) == 0x000340, "Member 'UCustomizationItemOriginWidget::CurrencyButton' has a wrong offset!");
static_assert(offsetof(UCustomizationItemOriginWidget, ArchivesButton) == 0x000348, "Member 'UCustomizationItemOriginWidget::ArchivesButton' has a wrong offset!");
static_assert(offsetof(UCustomizationItemOriginWidget, ChallengesButton) == 0x000350, "Member 'UCustomizationItemOriginWidget::ChallengesButton' has a wrong offset!");
static_assert(offsetof(UCustomizationItemOriginWidget, StoreButton) == 0x000358, "Member 'UCustomizationItemOriginWidget::StoreButton' has a wrong offset!");

// Class DBDUIViewsCore.CustomizationTooltipWidget
// 0x0098 (0x03C8 - 0x0330)
class UCustomizationTooltipWidget final : public UTooltipWidget
{
public:
	TSubclassOf<class UCorePriceTagWidget>        _priceTagWidgetClass;                              // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _priceTagPadding;                                  // 0x0338(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         _priceTagScaleFactor;                              // 0x0348(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedPriceTagCount;                      // 0x034C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreCustomizationRewardWidget> _outfitPartWidgetClass;                        // 0x0350(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _preConstructedOutfitPartsCount;                   // 0x0358(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _outfitPartsScale;                                 // 0x035C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   TagJoinSeparator;                                  // 0x0360(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         PriceTagsHorizontalBox;                            // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ToolTipStatusTB;                                   // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      ToolTipDescriptionRTB;                             // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUniformGridPanel*                      OutfitPartsContainer;                              // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          OutfitPartsLabel;                                  // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TagsTB;                                            // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               TagsContainer;                                     // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePreConstructableList*              _priceTagsList;                                    // 0x03B0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCorePreConstructableList*              _outfitPartsList;                                  // 0x03B8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUIDataManager*                         _uiDataManager;                                    // 0x03C0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AppendToDescriptionText(const class FText& appendedText);
	void ClearPriceTagWidgets();
	class UCorePriceTagWidget* CreatePriceTagWidget();
	void SetOutfitParts(const bool IsUnbreakable, const class UCustomizationRewardOutfitPartsViewData* outfitPartsViewData);
	void SetStatusText(const bool IsEquipped, const bool IsOwned, const bool IsAvailable, const bool IsLocked, const bool ShowAvailability);
	void SetTags(const EItemSourceTag ItemSourceTags);
	void SetTooltipData(const struct FCustomizationTooltipViewData& CustomizationViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizationTooltipWidget">();
	}
	static class UCustomizationTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomizationTooltipWidget>();
	}
};
static_assert(alignof(UCustomizationTooltipWidget) == 0x000008, "Wrong alignment on UCustomizationTooltipWidget");
static_assert(sizeof(UCustomizationTooltipWidget) == 0x0003C8, "Wrong size on UCustomizationTooltipWidget");
static_assert(offsetof(UCustomizationTooltipWidget, _priceTagWidgetClass) == 0x000330, "Member 'UCustomizationTooltipWidget::_priceTagWidgetClass' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, _priceTagPadding) == 0x000338, "Member 'UCustomizationTooltipWidget::_priceTagPadding' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, _priceTagScaleFactor) == 0x000348, "Member 'UCustomizationTooltipWidget::_priceTagScaleFactor' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, _preConstructedPriceTagCount) == 0x00034C, "Member 'UCustomizationTooltipWidget::_preConstructedPriceTagCount' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, _outfitPartWidgetClass) == 0x000350, "Member 'UCustomizationTooltipWidget::_outfitPartWidgetClass' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, _preConstructedOutfitPartsCount) == 0x000358, "Member 'UCustomizationTooltipWidget::_preConstructedOutfitPartsCount' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, _outfitPartsScale) == 0x00035C, "Member 'UCustomizationTooltipWidget::_outfitPartsScale' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, TagJoinSeparator) == 0x000360, "Member 'UCustomizationTooltipWidget::TagJoinSeparator' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, PriceTagsHorizontalBox) == 0x000378, "Member 'UCustomizationTooltipWidget::PriceTagsHorizontalBox' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, ToolTipStatusTB) == 0x000380, "Member 'UCustomizationTooltipWidget::ToolTipStatusTB' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, ToolTipDescriptionRTB) == 0x000388, "Member 'UCustomizationTooltipWidget::ToolTipDescriptionRTB' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, OutfitPartsContainer) == 0x000390, "Member 'UCustomizationTooltipWidget::OutfitPartsContainer' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, OutfitPartsLabel) == 0x000398, "Member 'UCustomizationTooltipWidget::OutfitPartsLabel' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, TagsTB) == 0x0003A0, "Member 'UCustomizationTooltipWidget::TagsTB' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, TagsContainer) == 0x0003A8, "Member 'UCustomizationTooltipWidget::TagsContainer' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, _priceTagsList) == 0x0003B0, "Member 'UCustomizationTooltipWidget::_priceTagsList' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, _outfitPartsList) == 0x0003B8, "Member 'UCustomizationTooltipWidget::_outfitPartsList' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, _uiDataManager) == 0x0003C0, "Member 'UCustomizationTooltipWidget::_uiDataManager' has a wrong offset!");

// Class DBDUIViewsCore.DBDButton
// 0x0020 (0x0660 - 0x0640)
class UDBDButton final : public UButton
{
public:
	bool                                          _sendAnalyticsData;                                // 0x0638(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _analyticsName;                                    // 0x0640(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _prependCurrentTabNameToAnalyticsName;             // 0x0650(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_651[0xF];                                      // 0x0651(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDButton">();
	}
	static class UDBDButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDButton>();
	}
};
static_assert(alignof(UDBDButton) == 0x000010, "Wrong alignment on UDBDButton");
static_assert(sizeof(UDBDButton) == 0x000660, "Wrong size on UDBDButton");
static_assert(offsetof(UDBDButton, _sendAnalyticsData) == 0x000638, "Member 'UDBDButton::_sendAnalyticsData' has a wrong offset!");
static_assert(offsetof(UDBDButton, _analyticsName) == 0x000640, "Member 'UDBDButton::_analyticsName' has a wrong offset!");
static_assert(offsetof(UDBDButton, _prependCurrentTabNameToAnalyticsName) == 0x000650, "Member 'UDBDButton::_prependCurrentTabNameToAnalyticsName' has a wrong offset!");

// Class DBDUIViewsCore.DBDComboBoxString
// 0x0000 (0x1DF0 - 0x1DF0)
class UDBDComboBoxString final : public UComboBoxString
{
public:
	void SetData(const TArray<class FString>& OptionsList, const class FString& DefaultOption);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDComboBoxString">();
	}
	static class UDBDComboBoxString* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDComboBoxString>();
	}
};
static_assert(alignof(UDBDComboBoxString) == 0x000010, "Wrong alignment on UDBDComboBoxString");
static_assert(sizeof(UDBDComboBoxString) == 0x001DF0, "Wrong size on UDBDComboBoxString");

// Class DBDUIViewsCore.DBDDropDownListButton
// 0x0000 (0x0510 - 0x0510)
class UDBDDropDownListButton final : public UCoreTabWidget
{
public:
	void ToggleDropDownArrow(bool showArrow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDDropDownListButton">();
	}
	static class UDBDDropDownListButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDDropDownListButton>();
	}
};
static_assert(alignof(UDBDDropDownListButton) == 0x000008, "Wrong alignment on UDBDDropDownListButton");
static_assert(sizeof(UDBDDropDownListButton) == 0x000510, "Wrong size on UDBDDropDownListButton");

// Class DBDUIViewsCore.DBDDropDownListWidget
// 0x0028 (0x0400 - 0x03D8)
class UDBDDropDownListWidget final : public UCoreTabContainerWidget
{
public:
	TMulticastInlineDelegate<void(const struct FTabWidgetData& buttonData)> OnSelectedOptionDelegate; // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCoreButtonWidget*                      _triggerButton;                                    // 0x03E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F0[0x10];                                     // 0x03F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindToTrigger(class UCoreButtonWidget* triggerButton);
	void HideDropDownList();
	void OnOptionSelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnTriggerClicked(class UCoreButtonWidget* buttonTarget);
	void OnUserClicked(const struct FPointerEvent& MouseEvent);
	void UnbindFromTrigger();
	void UpdateDropDown();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDDropDownListWidget">();
	}
	static class UDBDDropDownListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDDropDownListWidget>();
	}
};
static_assert(alignof(UDBDDropDownListWidget) == 0x000008, "Wrong alignment on UDBDDropDownListWidget");
static_assert(sizeof(UDBDDropDownListWidget) == 0x000400, "Wrong size on UDBDDropDownListWidget");
static_assert(offsetof(UDBDDropDownListWidget, OnSelectedOptionDelegate) == 0x0003D8, "Member 'UDBDDropDownListWidget::OnSelectedOptionDelegate' has a wrong offset!");
static_assert(offsetof(UDBDDropDownListWidget, _triggerButton) == 0x0003E8, "Member 'UDBDDropDownListWidget::_triggerButton' has a wrong offset!");

// Class DBDUIViewsCore.DBDEditableTextBox
// 0x0020 (0x10C0 - 0x10A0)
class UDBDEditableTextBox final : public UEditableTextBox
{
public:
	TMulticastInlineDelegate<void()>              OnCharacterLimitReached;                           // 0x1098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 TextStyle;                                         // 0x10A8(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _characterLimit;                                   // 0x10B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10BC[0x4];                                     // 0x10BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<class FString> GetTextStyles();
	static void PopulateTextStyles();

	void SetBackgroundColor(const struct FLinearColor& Color);
	void SetCharacterLimit(int32 CharacterLimit);

	int32 GetCharacterLimit() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDEditableTextBox">();
	}
	static class UDBDEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDEditableTextBox>();
	}
};
static_assert(alignof(UDBDEditableTextBox) == 0x000010, "Wrong alignment on UDBDEditableTextBox");
static_assert(sizeof(UDBDEditableTextBox) == 0x0010C0, "Wrong size on UDBDEditableTextBox");
static_assert(offsetof(UDBDEditableTextBox, OnCharacterLimitReached) == 0x001098, "Member 'UDBDEditableTextBox::OnCharacterLimitReached' has a wrong offset!");
static_assert(offsetof(UDBDEditableTextBox, TextStyle) == 0x0010A8, "Member 'UDBDEditableTextBox::TextStyle' has a wrong offset!");
static_assert(offsetof(UDBDEditableTextBox, _characterLimit) == 0x0010B8, "Member 'UDBDEditableTextBox::_characterLimit' has a wrong offset!");

// Class DBDUIViewsCore.DBDImage
// 0x0040 (0x0320 - 0x02E0)
class UDBDImage : public UImage
{
public:
	class UTexture2D*                             DefaultImage;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              _onImageStreamingCancelled;                        // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              _onImageStreamingStarted;                          // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              _onImageStreamingCompleted;                        // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_310[0x10];                                     // 0x0310(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBrushFromSoftTextureWithDefault(TSoftObjectPtr<class UTexture2D> SoftTexture, bool matchSize);
	void SetBrushFromTextureWithDefault(class UTexture2D* Texture, bool matchSize);
	void SetMaterialTextureFromSoftTextureWithDefault(TSoftObjectPtr<class UTexture2D> SoftTexture, class FName ParameterName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDImage">();
	}
	static class UDBDImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDImage>();
	}
};
static_assert(alignof(UDBDImage) == 0x000010, "Wrong alignment on UDBDImage");
static_assert(sizeof(UDBDImage) == 0x000320, "Wrong size on UDBDImage");
static_assert(offsetof(UDBDImage, DefaultImage) == 0x0002D8, "Member 'UDBDImage::DefaultImage' has a wrong offset!");
static_assert(offsetof(UDBDImage, _onImageStreamingCancelled) == 0x0002E0, "Member 'UDBDImage::_onImageStreamingCancelled' has a wrong offset!");
static_assert(offsetof(UDBDImage, _onImageStreamingStarted) == 0x0002F0, "Member 'UDBDImage::_onImageStreamingStarted' has a wrong offset!");
static_assert(offsetof(UDBDImage, _onImageStreamingCompleted) == 0x000300, "Member 'UDBDImage::_onImageStreamingCompleted' has a wrong offset!");

// Class DBDUIViewsCore.DBDPreviewWorldImage
// 0x0020 (0x0340 - 0x0320)
class UDBDPreviewWorldImage final : public UDBDImage
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _textureSampleParameterName;                       // 0x0328(0x000C)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_334[0xC];                                      // 0x0334(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FName GetCurrentWorldName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDPreviewWorldImage">();
	}
	static class UDBDPreviewWorldImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDPreviewWorldImage>();
	}
};
static_assert(alignof(UDBDPreviewWorldImage) == 0x000010, "Wrong alignment on UDBDPreviewWorldImage");
static_assert(sizeof(UDBDPreviewWorldImage) == 0x000340, "Wrong size on UDBDPreviewWorldImage");
static_assert(offsetof(UDBDPreviewWorldImage, _textureSampleParameterName) == 0x000328, "Member 'UDBDPreviewWorldImage::_textureSampleParameterName' has a wrong offset!");

// Class DBDUIViewsCore.DBDRichTextBlock
// 0x00C0 (0x0950 - 0x0890)
class UDBDRichTextBlock final : public URichTextBlock
{
public:
	class FString                                 TextStyle;                                         // 0x0890(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USwitchDockStateManager*                _switchDockStateManager;                           // 0x08A0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8A8[0x8];                                      // 0x08A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _characterLimit;                                   // 0x08B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isUpperCase;                                      // 0x08B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hasLargeText;                                     // 0x08B5(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8B6[0x2];                                      // 0x08B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockOverrideProperties           _largeTextProperties;                              // 0x08B8(0x002C)(Edit, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_8E4[0x1];                                      // 0x08E4(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _overrideUndockedPropertiesWithLargeText;          // 0x08E5(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hasUndocking;                                     // 0x08E6(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8E7[0x1];                                      // 0x08E7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockOverrideProperties           _undockedProperties;                               // 0x08E8(0x002C)(Edit, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_914[0x3C];                                     // 0x0914(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<class FString> GetTextStyles();
	static void PopulateTextStyles();

	void OnLargeTextSettingsChanged(bool isLargeText);
	void OnSwitchDockStateChanged(bool isDocked);
	void PreviewHTMLText();
	void PreviewLargeText();
	void PreviewUndocked();
	void SetHTMLText(const class FText& InText);
	void SetIsUpperCase(bool isUpperCase);
	void SetWrapTextAt(float wrapTextAtValue);

	bool GetIsUpperCase() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDRichTextBlock">();
	}
	static class UDBDRichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDRichTextBlock>();
	}
};
static_assert(alignof(UDBDRichTextBlock) == 0x000010, "Wrong alignment on UDBDRichTextBlock");
static_assert(sizeof(UDBDRichTextBlock) == 0x000950, "Wrong size on UDBDRichTextBlock");
static_assert(offsetof(UDBDRichTextBlock, TextStyle) == 0x000890, "Member 'UDBDRichTextBlock::TextStyle' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _switchDockStateManager) == 0x0008A0, "Member 'UDBDRichTextBlock::_switchDockStateManager' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _characterLimit) == 0x0008B0, "Member 'UDBDRichTextBlock::_characterLimit' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _isUpperCase) == 0x0008B4, "Member 'UDBDRichTextBlock::_isUpperCase' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _hasLargeText) == 0x0008B5, "Member 'UDBDRichTextBlock::_hasLargeText' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _largeTextProperties) == 0x0008B8, "Member 'UDBDRichTextBlock::_largeTextProperties' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _overrideUndockedPropertiesWithLargeText) == 0x0008E5, "Member 'UDBDRichTextBlock::_overrideUndockedPropertiesWithLargeText' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _hasUndocking) == 0x0008E6, "Member 'UDBDRichTextBlock::_hasUndocking' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _undockedProperties) == 0x0008E8, "Member 'UDBDRichTextBlock::_undockedProperties' has a wrong offset!");

// Class DBDUIViewsCore.DBDScrollBox
// 0x0080 (0x0D60 - 0x0CE0)
class UDBDScrollBox final : public UScrollBox
{
public:
	TMulticastInlineDelegate<void(const bool IsScrollable)> OnIsScrollableChanged;                   // 0x0CE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnHovered;                                         // 0x0CF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnUnhovered;                                       // 0x0D00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          _automaticallyRegisterForInput;                    // 0x0D10(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _useControllerScroll;                              // 0x0D11(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _shouldScrollOnMouseOver;                          // 0x0D12(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D13[0x1];                                      // 0x0D13(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _scrollSpeed;                                      // 0x0D14(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      _displayPrompt;                                    // 0x0D18(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoClear, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _displayPromptText;                                // 0x0D20(0x0018)(Edit, BlueprintVisible, DisableEditOnTemplate, NoClear, Protected, NativeAccessSpecifierProtected)
	EShowScrollDisplayPrompt                      _showDisplayPrompt;                                // 0x0D38(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isScrollable;                                     // 0x0D39(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsUsingSmoothMask;                                 // 0x0D3A(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D3B[0x5];                                      // 0x0D3B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class URetainerBox*                           SmoothMaskRetainerBox;                             // 0x0D40(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoClear, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D48[0x8];                                      // 0x0D48(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               _smoothMaskMaterial;                               // 0x0D50(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D58[0x8];                                      // 0x0D58(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleControllerInput(float analogValue);
	void HandleMouseWheelInput(const struct FPointerEvent& PointerEvent);
	void HideDisplayPrompt();
	bool IsMouseOver();
	void OnControlModeChanged(EControlMode controlMode);
	void RegisterForInput();
	void SetDisplayPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt);
	void SetShouldScrollOnMouseOver(const bool shouldScrollOnMouseOver);
	void SetShowScrollDisplayPrompt(const EShowScrollDisplayPrompt showScrollDisplayPrompt);
	void UpdateDisplayPrompt();
	void UpdateSmoothMask(float CurrentOffset);

	bool IsScrollable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDScrollBox">();
	}
	static class UDBDScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDScrollBox>();
	}
};
static_assert(alignof(UDBDScrollBox) == 0x000010, "Wrong alignment on UDBDScrollBox");
static_assert(sizeof(UDBDScrollBox) == 0x000D60, "Wrong size on UDBDScrollBox");
static_assert(offsetof(UDBDScrollBox, OnIsScrollableChanged) == 0x000CE0, "Member 'UDBDScrollBox::OnIsScrollableChanged' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, OnHovered) == 0x000CF0, "Member 'UDBDScrollBox::OnHovered' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, OnUnhovered) == 0x000D00, "Member 'UDBDScrollBox::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, _automaticallyRegisterForInput) == 0x000D10, "Member 'UDBDScrollBox::_automaticallyRegisterForInput' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, _useControllerScroll) == 0x000D11, "Member 'UDBDScrollBox::_useControllerScroll' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, _shouldScrollOnMouseOver) == 0x000D12, "Member 'UDBDScrollBox::_shouldScrollOnMouseOver' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, _scrollSpeed) == 0x000D14, "Member 'UDBDScrollBox::_scrollSpeed' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, _displayPrompt) == 0x000D18, "Member 'UDBDScrollBox::_displayPrompt' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, _displayPromptText) == 0x000D20, "Member 'UDBDScrollBox::_displayPromptText' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, _showDisplayPrompt) == 0x000D38, "Member 'UDBDScrollBox::_showDisplayPrompt' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, _isScrollable) == 0x000D39, "Member 'UDBDScrollBox::_isScrollable' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, IsUsingSmoothMask) == 0x000D3A, "Member 'UDBDScrollBox::IsUsingSmoothMask' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, SmoothMaskRetainerBox) == 0x000D40, "Member 'UDBDScrollBox::SmoothMaskRetainerBox' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, _smoothMaskMaterial) == 0x000D50, "Member 'UDBDScrollBox::_smoothMaskMaterial' has a wrong offset!");

// Class DBDUIViewsCore.DBDSlider
// 0x0000 (0x0740 - 0x0740)
class UDBDSlider final : public USlider
{
public:
	void Decrement();
	void Increment();
	bool IsValidValue(const float InValue);
	void OnControlModeChanged(EControlMode controlMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDSlider">();
	}
	static class UDBDSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDSlider>();
	}
};
static_assert(alignof(UDBDSlider) == 0x000010, "Wrong alignment on UDBDSlider");
static_assert(sizeof(UDBDSlider) == 0x000740, "Wrong size on UDBDSlider");

// Class DBDUIViewsCore.DBDTextBlock
// 0x00C0 (0x0430 - 0x0370)
class UDBDTextBlock final : public UTextBlock
{
public:
	class FString                                 TextStyle;                                         // 0x0370(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USwitchDockStateManager*                _switchDockStateManager;                           // 0x0380(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextManager*                        _textManager;                                      // 0x0388(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _characterLimit;                                   // 0x0390(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _truncateOnSpace;                                  // 0x0394(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isUpperCase;                                      // 0x0395(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hasLargeText;                                     // 0x0396(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_397[0x1];                                      // 0x0397(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockOverrideProperties           _largeTextProperties;                              // 0x0398(0x002C)(Edit, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C4[0x1];                                      // 0x03C4(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _overrideUndockedPropertiesWithLargeText;          // 0x03C5(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hasUndocking;                                     // 0x03C6(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C7[0x1];                                      // 0x03C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockOverrideProperties           _undockedProperties;                               // 0x03C8(0x002C)(Edit, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F4[0x3C];                                     // 0x03F4(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<class FString> GetTextStyles();
	static void PopulateTextStyles();

	void OnLargeTextSettingsChanged(bool isLargeText);
	void OnSwitchDockStateChanged(bool isDocked);
	void PreviewLargeText();
	void PreviewUndocked();
	void SetIsUpperCase(bool isUpperCase);

	bool GetIsUpperCase() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDTextBlock">();
	}
	static class UDBDTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDTextBlock>();
	}
};
static_assert(alignof(UDBDTextBlock) == 0x000010, "Wrong alignment on UDBDTextBlock");
static_assert(sizeof(UDBDTextBlock) == 0x000430, "Wrong size on UDBDTextBlock");
static_assert(offsetof(UDBDTextBlock, TextStyle) == 0x000370, "Member 'UDBDTextBlock::TextStyle' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _switchDockStateManager) == 0x000380, "Member 'UDBDTextBlock::_switchDockStateManager' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _textManager) == 0x000388, "Member 'UDBDTextBlock::_textManager' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _characterLimit) == 0x000390, "Member 'UDBDTextBlock::_characterLimit' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _truncateOnSpace) == 0x000394, "Member 'UDBDTextBlock::_truncateOnSpace' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _isUpperCase) == 0x000395, "Member 'UDBDTextBlock::_isUpperCase' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _hasLargeText) == 0x000396, "Member 'UDBDTextBlock::_hasLargeText' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _largeTextProperties) == 0x000398, "Member 'UDBDTextBlock::_largeTextProperties' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _overrideUndockedPropertiesWithLargeText) == 0x0003C5, "Member 'UDBDTextBlock::_overrideUndockedPropertiesWithLargeText' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _hasUndocking) == 0x0003C6, "Member 'UDBDTextBlock::_hasUndocking' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _undockedProperties) == 0x0003C8, "Member 'UDBDTextBlock::_undockedProperties' has a wrong offset!");

// Class DBDUIViewsCore.TooltipRoot
// 0x0008 (0x02B0 - 0x02A8)
class UTooltipRoot final : public UUserWidget
{
public:
	class UCanvasPanel*                           _canvasPanel;                                      // 0x02A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TooltipRoot">();
	}
	static class UTooltipRoot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTooltipRoot>();
	}
};
static_assert(alignof(UTooltipRoot) == 0x000008, "Wrong alignment on UTooltipRoot");
static_assert(sizeof(UTooltipRoot) == 0x0002B0, "Wrong size on UTooltipRoot");
static_assert(offsetof(UTooltipRoot, _canvasPanel) == 0x0002A8, "Member 'UTooltipRoot::_canvasPanel' has a wrong offset!");

// Class DBDUIViewsCore.DBDTooltipManager
// 0x0060 (0x0098 - 0x0038)
class UDBDTooltipManager final : public UGameInstanceSubsystem
{
public:
	class UTooltipRoot*                           _rootWidget;                                       // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<ETooltipType, class UTooltipWidget*>     _tooltipPool;                                      // 0x0040(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UTooltipWidget*                         _currentTooltip;                                   // 0x0090(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HideAllTooltips();
	void HideTooltip(const ETooltipPriority Priority);
	void OnViewportCreated();
	void ShowArchiveCompendiumTooltip(const struct FCompendiumButtonData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowArchiveNodeTooltip(const struct FArchiveNodeViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowArchivePassTooltip(const struct FArchivePassTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowArchiveRewardNodeTooltip(const struct FArchiveRewardNodeTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowBloodpointBonusTooltip(const struct FBloodpointBonusTooltipViewData& tooltipViewData, const struct FTooltipTriggerGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowChallengeTooltip(const struct FChallengeTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowCharacterTooltip(const struct FCharacterTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowCurrencyTooltip(const struct FCurrencyProgressionTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowCustomizationTooltip(const struct FCustomizationTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowDisabledButtonTooltip(const class FText& disabledButtonTooltipText, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowFollowedQuestsTooltip(const struct FFollowedQuestsTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowLabelTooltip(const class FText& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowLoadoutTooltip(const struct FLoadoutTooltipData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowLockedFeatureTooltip(const struct FLockedFeatureTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowMapShowcaseTooltip(const struct FMapShowcaseTooltipViewData& tooltipViewData, const struct FTooltipTriggerGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowNotEnoughCurrencyModal(const struct FNotEnoughCurrencyModalViewData& ViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowObjectiveTrackerTooltip(const struct FEventObjectiveTrackerViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowPlayerLevelTooltip(const struct FCorePlayerLevelTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowPrestigeTooltip(const struct FPrestigeViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowRankTooltip(const struct FRankTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, const ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowSharedPerksTooltip(const struct FSharedPerksTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDTooltipManager">();
	}
	static class UDBDTooltipManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDTooltipManager>();
	}
};
static_assert(alignof(UDBDTooltipManager) == 0x000008, "Wrong alignment on UDBDTooltipManager");
static_assert(sizeof(UDBDTooltipManager) == 0x000098, "Wrong size on UDBDTooltipManager");
static_assert(offsetof(UDBDTooltipManager, _rootWidget) == 0x000038, "Member 'UDBDTooltipManager::_rootWidget' has a wrong offset!");
static_assert(offsetof(UDBDTooltipManager, _tooltipPool) == 0x000040, "Member 'UDBDTooltipManager::_tooltipPool' has a wrong offset!");
static_assert(offsetof(UDBDTooltipManager, _currentTooltip) == 0x000090, "Member 'UDBDTooltipManager::_currentTooltip' has a wrong offset!");

// Class DBDUIViewsCore.DBDWrapBox
// 0x0028 (0x01B0 - 0x0188)
class UDBDWrapBox final : public UPanelWidget
{
public:
	struct FVector2D                              InnerSlotPadding;                                  // 0x0188(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WrapWidth;                                         // 0x0198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplicitWrapWidth;                                // 0x019C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x019D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E[0x12];                                     // 0x019E(0x0012)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UDBDWrapBoxSlot* AddChildToWrapBox(class UWidget* Content);
	void SetHorizontalAlignment(EHorizontalAlignment inHorizontalAlignment);
	void SetInnerSlotPadding(const struct FVector2D& InPadding);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDWrapBox">();
	}
	static class UDBDWrapBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDWrapBox>();
	}
};
static_assert(alignof(UDBDWrapBox) == 0x000008, "Wrong alignment on UDBDWrapBox");
static_assert(sizeof(UDBDWrapBox) == 0x0001B0, "Wrong size on UDBDWrapBox");
static_assert(offsetof(UDBDWrapBox, InnerSlotPadding) == 0x000188, "Member 'UDBDWrapBox::InnerSlotPadding' has a wrong offset!");
static_assert(offsetof(UDBDWrapBox, WrapWidth) == 0x000198, "Member 'UDBDWrapBox::WrapWidth' has a wrong offset!");
static_assert(offsetof(UDBDWrapBox, bExplicitWrapWidth) == 0x00019C, "Member 'UDBDWrapBox::bExplicitWrapWidth' has a wrong offset!");
static_assert(offsetof(UDBDWrapBox, HorizontalAlignment) == 0x00019D, "Member 'UDBDWrapBox::HorizontalAlignment' has a wrong offset!");

// Class DBDUIViewsCore.DBDWrapBoxSlot
// 0x0028 (0x0068 - 0x0040)
class UDBDWrapBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFillEmptySpace;                                   // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FillSpanWhenLessThan;                              // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0xE];                                       // 0x005A(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFillEmptySpace(bool InbFillEmptySpace);
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);
	void SetHorizontalAlignment(EHorizontalAlignment inHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment inVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDWrapBoxSlot">();
	}
	static class UDBDWrapBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDWrapBoxSlot>();
	}
};
static_assert(alignof(UDBDWrapBoxSlot) == 0x000008, "Wrong alignment on UDBDWrapBoxSlot");
static_assert(sizeof(UDBDWrapBoxSlot) == 0x000068, "Wrong size on UDBDWrapBoxSlot");
static_assert(offsetof(UDBDWrapBoxSlot, Padding) == 0x000040, "Member 'UDBDWrapBoxSlot::Padding' has a wrong offset!");
static_assert(offsetof(UDBDWrapBoxSlot, bFillEmptySpace) == 0x000050, "Member 'UDBDWrapBoxSlot::bFillEmptySpace' has a wrong offset!");
static_assert(offsetof(UDBDWrapBoxSlot, FillSpanWhenLessThan) == 0x000054, "Member 'UDBDWrapBoxSlot::FillSpanWhenLessThan' has a wrong offset!");
static_assert(offsetof(UDBDWrapBoxSlot, HorizontalAlignment) == 0x000058, "Member 'UDBDWrapBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UDBDWrapBoxSlot, VerticalAlignment) == 0x000059, "Member 'UDBDWrapBoxSlot::VerticalAlignment' has a wrong offset!");

// Class DBDUIViewsCore.DisabledButtonTooltipWidget
// 0x0008 (0x0338 - 0x0330)
class UDisabledButtonTooltipWidget final : public UTooltipWidget
{
public:
	class UDBDRichTextBlock*                      ContentRTB;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetTooltipData(const class FText& disabledButtonTooltipText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DisabledButtonTooltipWidget">();
	}
	static class UDisabledButtonTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDisabledButtonTooltipWidget>();
	}
};
static_assert(alignof(UDisabledButtonTooltipWidget) == 0x000008, "Wrong alignment on UDisabledButtonTooltipWidget");
static_assert(sizeof(UDisabledButtonTooltipWidget) == 0x000338, "Wrong size on UDisabledButtonTooltipWidget");
static_assert(offsetof(UDisabledButtonTooltipWidget, ContentRTB) == 0x000330, "Member 'UDisabledButtonTooltipWidget::ContentRTB' has a wrong offset!");

// Class DBDUIViewsCore.DragZone
// 0x0060 (0x0308 - 0x02A8)
class UDragZone final : public UUserWidget
{
public:
	TMulticastInlineDelegate<void(const struct FVector2D& cursorDelta)> OnDragDelegate;              // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         DeadZone;                                          // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviewLowerDeadZone;                              // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDragZoneAxis                                 Axis;                                              // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBorder*                                DebugPreview;                                      // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D0[0x38];                                     // 0x02D0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAnalogInput(const struct FAnalogInputEvent& analogEvent);
	void OnMouseMoveGlobal(const struct FPointerEvent& MouseEvent);
	void OnMousePressGlobal(const struct FPointerEvent& MouseEvent);
	void OnMouseReleaseGlobal(const struct FPointerEvent& MouseEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragZone">();
	}
	static class UDragZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragZone>();
	}
};
static_assert(alignof(UDragZone) == 0x000008, "Wrong alignment on UDragZone");
static_assert(sizeof(UDragZone) == 0x000308, "Wrong size on UDragZone");
static_assert(offsetof(UDragZone, OnDragDelegate) == 0x0002A8, "Member 'UDragZone::OnDragDelegate' has a wrong offset!");
static_assert(offsetof(UDragZone, DeadZone) == 0x0002B8, "Member 'UDragZone::DeadZone' has a wrong offset!");
static_assert(offsetof(UDragZone, PreviewLowerDeadZone) == 0x0002BC, "Member 'UDragZone::PreviewLowerDeadZone' has a wrong offset!");
static_assert(offsetof(UDragZone, Axis) == 0x0002C0, "Member 'UDragZone::Axis' has a wrong offset!");
static_assert(offsetof(UDragZone, DebugPreview) == 0x0002C8, "Member 'UDragZone::DebugPreview' has a wrong offset!");

// Class DBDUIViewsCore.EmblemWidget
// 0x0060 (0x0380 - 0x0320)
class UEmblemWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDImage*                              Background;                                        // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              Icon;                                              // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EEmblemQuality, TSoftObjectPtr<class UTexture2D>> BackgroundQualityTextures;                // 0x0330(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void SetData(const struct FEmblemViewData& ViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EmblemWidget">();
	}
	static class UEmblemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEmblemWidget>();
	}
};
static_assert(alignof(UEmblemWidget) == 0x000008, "Wrong alignment on UEmblemWidget");
static_assert(sizeof(UEmblemWidget) == 0x000380, "Wrong size on UEmblemWidget");
static_assert(offsetof(UEmblemWidget, Background) == 0x000320, "Member 'UEmblemWidget::Background' has a wrong offset!");
static_assert(offsetof(UEmblemWidget, Icon) == 0x000328, "Member 'UEmblemWidget::Icon' has a wrong offset!");
static_assert(offsetof(UEmblemWidget, BackgroundQualityTextures) == 0x000330, "Member 'UEmblemWidget::BackgroundQualityTextures' has a wrong offset!");

// Class DBDUIViewsCore.EventEntryRewardsTabWidget
// 0x01D8 (0x0518 - 0x0340)
class UEventEntryRewardsTabWidget : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventEntryPopupSkinUIData             _skinData;                                         // 0x0348(0x01A8)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UEventEntryRewardsDisplayWidget*        EventEntryRewardsDisplayWidget;                    // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const int32 Index)> _onRewardGridItemClicked;                      // 0x04F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const int32 Index)> _onPreviewAreaItemClicked;                     // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void OnPreviewAreaItemClicked(const int32 selectedIndex);
	void OnRewardGridItemClicked(const int32 selectedIndex);
	void SetScrollPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryRewardsTabWidget">();
	}
	static class UEventEntryRewardsTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryRewardsTabWidget>();
	}
};
static_assert(alignof(UEventEntryRewardsTabWidget) == 0x000008, "Wrong alignment on UEventEntryRewardsTabWidget");
static_assert(sizeof(UEventEntryRewardsTabWidget) == 0x000518, "Wrong size on UEventEntryRewardsTabWidget");
static_assert(offsetof(UEventEntryRewardsTabWidget, _skinData) == 0x000348, "Member 'UEventEntryRewardsTabWidget::_skinData' has a wrong offset!");
static_assert(offsetof(UEventEntryRewardsTabWidget, EventEntryRewardsDisplayWidget) == 0x0004F0, "Member 'UEventEntryRewardsTabWidget::EventEntryRewardsDisplayWidget' has a wrong offset!");
static_assert(offsetof(UEventEntryRewardsTabWidget, _onRewardGridItemClicked) == 0x0004F8, "Member 'UEventEntryRewardsTabWidget::_onRewardGridItemClicked' has a wrong offset!");
static_assert(offsetof(UEventEntryRewardsTabWidget, _onPreviewAreaItemClicked) == 0x000508, "Member 'UEventEntryRewardsTabWidget::_onPreviewAreaItemClicked' has a wrong offset!");

// Class DBDUIViewsCore.EventEntryCollectionTabWidget
// 0x0000 (0x0518 - 0x0518)
class UEventEntryCollectionTabWidget final : public UEventEntryRewardsTabWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryCollectionTabWidget">();
	}
	static class UEventEntryCollectionTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryCollectionTabWidget>();
	}
};
static_assert(alignof(UEventEntryCollectionTabWidget) == 0x000008, "Wrong alignment on UEventEntryCollectionTabWidget");
static_assert(sizeof(UEventEntryCollectionTabWidget) == 0x000518, "Wrong size on UEventEntryCollectionTabWidget");

// Class DBDUIViewsCore.EventEntryDetailsTabContentWidget
// 0x0028 (0x0348 - 0x0320)
class UEventEntryDetailsTabContentWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDTextBlock*                          TitleText;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      descriptionText;                                   // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _scrollLabelText;                                  // 0x0330(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void SetData(const struct FSpecialEventDetailsTabContentData& ContentData, const struct FEventEntryPopupSkinUIData& skinData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryDetailsTabContentWidget">();
	}
	static class UEventEntryDetailsTabContentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryDetailsTabContentWidget>();
	}
};
static_assert(alignof(UEventEntryDetailsTabContentWidget) == 0x000008, "Wrong alignment on UEventEntryDetailsTabContentWidget");
static_assert(sizeof(UEventEntryDetailsTabContentWidget) == 0x000348, "Wrong size on UEventEntryDetailsTabContentWidget");
static_assert(offsetof(UEventEntryDetailsTabContentWidget, TitleText) == 0x000320, "Member 'UEventEntryDetailsTabContentWidget::TitleText' has a wrong offset!");
static_assert(offsetof(UEventEntryDetailsTabContentWidget, descriptionText) == 0x000328, "Member 'UEventEntryDetailsTabContentWidget::descriptionText' has a wrong offset!");
static_assert(offsetof(UEventEntryDetailsTabContentWidget, _scrollLabelText) == 0x000330, "Member 'UEventEntryDetailsTabContentWidget::_scrollLabelText' has a wrong offset!");

// Class DBDUIViewsCore.EventEntryDetailsTabLayoutWidget
// 0x0000 (0x0320 - 0x0320)
class UEventEntryDetailsTabLayoutWidget final : public UCoreBaseUserWidget
{
public:
	void SetData(const struct FEventEntryPopupSkinUIData& skinData, const TArray<struct FSpecialEventDetailsTabContentData>& ContentData, const TSoftObjectPtr<class UTexture2D>& ImageTexture);
	struct FCustomizationTooltipViewData SetTooltipEventData(const struct FCustomizationTooltipViewData& TooltipData, const struct FSpecialEventDetailsTabContentData& ContentData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryDetailsTabLayoutWidget">();
	}
	static class UEventEntryDetailsTabLayoutWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryDetailsTabLayoutWidget>();
	}
};
static_assert(alignof(UEventEntryDetailsTabLayoutWidget) == 0x000008, "Wrong alignment on UEventEntryDetailsTabLayoutWidget");
static_assert(sizeof(UEventEntryDetailsTabLayoutWidget) == 0x000320, "Wrong size on UEventEntryDetailsTabLayoutWidget");

// Class DBDUIViewsCore.EventEntryDetailsTabWidget
// 0x0200 (0x0540 - 0x0340)
class UEventEntryDetailsTabWidget final : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventEntryPopupSkinUIData             _skinData;                                         // 0x0348(0x01A8)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<EDetailsTabLayout, class UEventEntryDetailsTabLayoutWidget*> LayoutWidgetsMap;              // 0x04F0(0x0050)(BlueprintVisible, ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryDetailsTabWidget">();
	}
	static class UEventEntryDetailsTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryDetailsTabWidget>();
	}
};
static_assert(alignof(UEventEntryDetailsTabWidget) == 0x000008, "Wrong alignment on UEventEntryDetailsTabWidget");
static_assert(sizeof(UEventEntryDetailsTabWidget) == 0x000540, "Wrong size on UEventEntryDetailsTabWidget");
static_assert(offsetof(UEventEntryDetailsTabWidget, _skinData) == 0x000348, "Member 'UEventEntryDetailsTabWidget::_skinData' has a wrong offset!");
static_assert(offsetof(UEventEntryDetailsTabWidget, LayoutWidgetsMap) == 0x0004F0, "Member 'UEventEntryDetailsTabWidget::LayoutWidgetsMap' has a wrong offset!");

// Class DBDUIViewsCore.EventEntryEventTabWidget
// 0x0318 (0x0658 - 0x0340)
class UEventEntryEventTabWidget final : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             _eventObjectiveTrackerSkinDataTable;               // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEventTabViewData*                      _viewData;                                         // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FEventEntryPopupSkinUIData             _skinData;                                         // 0x0358(0x01A8)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FEventObjectiveTrackerSkinUIData       _eventObjectiveTrackerSkinData;                    // 0x0500(0x0100)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UDBDImage*                              ImageContainer;                                    // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          ScrollBox;                                         // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      MessageText;                                       // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      AdditionalInformationText;                         // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEventObjectiveTrackerWidget*           EventObjectiveTracker;                             // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               GoToChallengesInputSwitcher;                       // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _scrollLabelText;                                  // 0x0630(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _onChallengesButtonClicked;                        // 0x0648(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void DisableInputs();
	void EnableInputs();
	void OnChallengesButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryEventTabWidget">();
	}
	static class UEventEntryEventTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryEventTabWidget>();
	}
};
static_assert(alignof(UEventEntryEventTabWidget) == 0x000008, "Wrong alignment on UEventEntryEventTabWidget");
static_assert(sizeof(UEventEntryEventTabWidget) == 0x000658, "Wrong size on UEventEntryEventTabWidget");
static_assert(offsetof(UEventEntryEventTabWidget, _eventObjectiveTrackerSkinDataTable) == 0x000348, "Member 'UEventEntryEventTabWidget::_eventObjectiveTrackerSkinDataTable' has a wrong offset!");
static_assert(offsetof(UEventEntryEventTabWidget, _viewData) == 0x000350, "Member 'UEventEntryEventTabWidget::_viewData' has a wrong offset!");
static_assert(offsetof(UEventEntryEventTabWidget, _skinData) == 0x000358, "Member 'UEventEntryEventTabWidget::_skinData' has a wrong offset!");
static_assert(offsetof(UEventEntryEventTabWidget, _eventObjectiveTrackerSkinData) == 0x000500, "Member 'UEventEntryEventTabWidget::_eventObjectiveTrackerSkinData' has a wrong offset!");
static_assert(offsetof(UEventEntryEventTabWidget, ImageContainer) == 0x000600, "Member 'UEventEntryEventTabWidget::ImageContainer' has a wrong offset!");
static_assert(offsetof(UEventEntryEventTabWidget, ScrollBox) == 0x000608, "Member 'UEventEntryEventTabWidget::ScrollBox' has a wrong offset!");
static_assert(offsetof(UEventEntryEventTabWidget, MessageText) == 0x000610, "Member 'UEventEntryEventTabWidget::MessageText' has a wrong offset!");
static_assert(offsetof(UEventEntryEventTabWidget, AdditionalInformationText) == 0x000618, "Member 'UEventEntryEventTabWidget::AdditionalInformationText' has a wrong offset!");
static_assert(offsetof(UEventEntryEventTabWidget, EventObjectiveTracker) == 0x000620, "Member 'UEventEntryEventTabWidget::EventObjectiveTracker' has a wrong offset!");
static_assert(offsetof(UEventEntryEventTabWidget, GoToChallengesInputSwitcher) == 0x000628, "Member 'UEventEntryEventTabWidget::GoToChallengesInputSwitcher' has a wrong offset!");
static_assert(offsetof(UEventEntryEventTabWidget, _scrollLabelText) == 0x000630, "Member 'UEventEntryEventTabWidget::_scrollLabelText' has a wrong offset!");
static_assert(offsetof(UEventEntryEventTabWidget, _onChallengesButtonClicked) == 0x000648, "Member 'UEventEntryEventTabWidget::_onChallengesButtonClicked' has a wrong offset!");

// Class DBDUIViewsCore.EventEntryRewardsDisplayWidget
// 0x0020 (0x0340 - 0x0320)
class UEventEntryRewardsDisplayWidget final : public UCoreBaseUserWidget
{
public:
	int32                                         _layoutMask;                                       // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomizationItemGridContainer*        RewardGrid;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreImagePreviewAreaWidget*            PreviewArea;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCustomizationItemOriginWidget*         InstructionWidget;                                 // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisableInputs();
	void DisableInstructionArchivesButton();
	void DisableInstructionChallengesButton();
	void DisableInstructionCurrencyButton();
	void DisableInstructionStoreButton();
	void SetInstructionWidgetData(const struct FCustomizationItemOriginViewData& ViewData);
	void SetItemsData(const TArray<class UStoreCustomizationItemViewData*>& customizationRewardsData, const int32 selectedIndex);
	void SetPreviewAreaData(const struct FCustomizationItemPreviewAreaViewData& ViewData);
	void SetScrollPrompt(class UCoreKeyListenerInputPromptWidget* DisplayPrompt);
	void SetSelectedReward(const int32 selectedIndex);
	void SetVisuals(const struct FEventEntryPopupSkinUIData& skinUIData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryRewardsDisplayWidget">();
	}
	static class UEventEntryRewardsDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryRewardsDisplayWidget>();
	}
};
static_assert(alignof(UEventEntryRewardsDisplayWidget) == 0x000008, "Wrong alignment on UEventEntryRewardsDisplayWidget");
static_assert(sizeof(UEventEntryRewardsDisplayWidget) == 0x000340, "Wrong size on UEventEntryRewardsDisplayWidget");
static_assert(offsetof(UEventEntryRewardsDisplayWidget, _layoutMask) == 0x000320, "Member 'UEventEntryRewardsDisplayWidget::_layoutMask' has a wrong offset!");
static_assert(offsetof(UEventEntryRewardsDisplayWidget, RewardGrid) == 0x000328, "Member 'UEventEntryRewardsDisplayWidget::RewardGrid' has a wrong offset!");
static_assert(offsetof(UEventEntryRewardsDisplayWidget, PreviewArea) == 0x000330, "Member 'UEventEntryRewardsDisplayWidget::PreviewArea' has a wrong offset!");
static_assert(offsetof(UEventEntryRewardsDisplayWidget, InstructionWidget) == 0x000338, "Member 'UEventEntryRewardsDisplayWidget::InstructionWidget' has a wrong offset!");

// Class DBDUIViewsCore.EventEntryStoreTabWidget
// 0x0000 (0x0518 - 0x0518)
class UEventEntryStoreTabWidget final : public UEventEntryRewardsTabWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryStoreTabWidget">();
	}
	static class UEventEntryStoreTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryStoreTabWidget>();
	}
};
static_assert(alignof(UEventEntryStoreTabWidget) == 0x000008, "Wrong alignment on UEventEntryStoreTabWidget");
static_assert(sizeof(UEventEntryStoreTabWidget) == 0x000518, "Wrong size on UEventEntryStoreTabWidget");

// Class DBDUIViewsCore.EventObjectiveTrackerTarget
// 0x0000 (0x0320 - 0x0320)
class UEventObjectiveTrackerTarget final : public UCoreBaseUserWidget
{
public:
	void SetData(const struct FEventObjectiveTargetData& Data, const struct FEventObjectiveTrackerSkinUIData& skinData);
	void SetIsReached(const bool IsReached);
	void SetRewardPreviewVisible(const bool IsVisible_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventObjectiveTrackerTarget">();
	}
	static class UEventObjectiveTrackerTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventObjectiveTrackerTarget>();
	}
};
static_assert(alignof(UEventObjectiveTrackerTarget) == 0x000008, "Wrong alignment on UEventObjectiveTrackerTarget");
static_assert(sizeof(UEventObjectiveTrackerTarget) == 0x000320, "Wrong size on UEventObjectiveTrackerTarget");

// Class DBDUIViewsCore.EventObjectiveTrackerWidget
// 0x0038 (0x0358 - 0x0320)
class UEventObjectiveTrackerWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDTextBlock*                          NextTB;                                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      ProgressRTB;                                       // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           TargetsPanel;                                      // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UEventObjectiveTrackerTarget> _eventObjectiveTrackerTargetClass;               // 0x0338(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _maxTargets;                                       // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UEventObjectiveTrackerTarget*>   _targetPool;                                       // 0x0348(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void SetData(const struct FEventObjectiveTrackerViewData& ViewData, const struct FEventObjectiveTrackerSkinUIData& skinData);
	void SetTargetPosition(const class UEventObjectiveTrackerTarget* Target, float relativePosition);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventObjectiveTrackerWidget">();
	}
	static class UEventObjectiveTrackerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventObjectiveTrackerWidget>();
	}
};
static_assert(alignof(UEventObjectiveTrackerWidget) == 0x000008, "Wrong alignment on UEventObjectiveTrackerWidget");
static_assert(sizeof(UEventObjectiveTrackerWidget) == 0x000358, "Wrong size on UEventObjectiveTrackerWidget");
static_assert(offsetof(UEventObjectiveTrackerWidget, NextTB) == 0x000320, "Member 'UEventObjectiveTrackerWidget::NextTB' has a wrong offset!");
static_assert(offsetof(UEventObjectiveTrackerWidget, ProgressRTB) == 0x000328, "Member 'UEventObjectiveTrackerWidget::ProgressRTB' has a wrong offset!");
static_assert(offsetof(UEventObjectiveTrackerWidget, TargetsPanel) == 0x000330, "Member 'UEventObjectiveTrackerWidget::TargetsPanel' has a wrong offset!");
static_assert(offsetof(UEventObjectiveTrackerWidget, _eventObjectiveTrackerTargetClass) == 0x000338, "Member 'UEventObjectiveTrackerWidget::_eventObjectiveTrackerTargetClass' has a wrong offset!");
static_assert(offsetof(UEventObjectiveTrackerWidget, _maxTargets) == 0x000340, "Member 'UEventObjectiveTrackerWidget::_maxTargets' has a wrong offset!");
static_assert(offsetof(UEventObjectiveTrackerWidget, _targetPool) == 0x000348, "Member 'UEventObjectiveTrackerWidget::_targetPool' has a wrong offset!");

// Class DBDUIViewsCore.EventPointsWidget
// 0x0000 (0x02A8 - 0x02A8)
class UEventPointsWidget final : public UUserWidget
{
public:
	void Highlight(bool IsHighlighted);
	void SetValue(int32 NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventPointsWidget">();
	}
	static class UEventPointsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventPointsWidget>();
	}
};
static_assert(alignof(UEventPointsWidget) == 0x000008, "Wrong alignment on UEventPointsWidget");
static_assert(sizeof(UEventPointsWidget) == 0x0002A8, "Wrong size on UEventPointsWidget");

// Class DBDUIViewsCore.FollowedQuestsTooltipWidget
// 0x0028 (0x0358 - 0x0330)
class UFollowedQuestsTooltipWidget final : public UTooltipWidget
{
public:
	class UDBDTextBlock*                          TitleTB;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          BeginnerDescriptionTB;                             // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreChallengeCardListWidget*           ChallengeCardList;                                 // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_348[0x10];                                     // 0x0348(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAnalogInput(const struct FAnalogInputEvent& analogEvent);
	void OnMouseWheelInput(const struct FPointerEvent& PointerEvent);
	void SetTooltipData(const struct FFollowedQuestsTooltipViewData& TooltipData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FollowedQuestsTooltipWidget">();
	}
	static class UFollowedQuestsTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFollowedQuestsTooltipWidget>();
	}
};
static_assert(alignof(UFollowedQuestsTooltipWidget) == 0x000008, "Wrong alignment on UFollowedQuestsTooltipWidget");
static_assert(sizeof(UFollowedQuestsTooltipWidget) == 0x000358, "Wrong size on UFollowedQuestsTooltipWidget");
static_assert(offsetof(UFollowedQuestsTooltipWidget, TitleTB) == 0x000330, "Member 'UFollowedQuestsTooltipWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UFollowedQuestsTooltipWidget, BeginnerDescriptionTB) == 0x000338, "Member 'UFollowedQuestsTooltipWidget::BeginnerDescriptionTB' has a wrong offset!");
static_assert(offsetof(UFollowedQuestsTooltipWidget, ChallengeCardList) == 0x000340, "Member 'UFollowedQuestsTooltipWidget::ChallengeCardList' has a wrong offset!");

// Class DBDUIViewsCore.FriendItemWidget
// 0x0038 (0x04E8 - 0x04B0)
class UFriendItemWidget final : public UCoreButtonWidget
{
public:
	class UDBDRichTextBlock*                      playerNameText;                                    // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      StatusText;                                        // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              InviteIcon;                                        // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              CrossplayIcon;                                     // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D0[0x18];                                     // 0x04D0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendItemWidget">();
	}
	static class UFriendItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendItemWidget>();
	}
};
static_assert(alignof(UFriendItemWidget) == 0x000008, "Wrong alignment on UFriendItemWidget");
static_assert(sizeof(UFriendItemWidget) == 0x0004E8, "Wrong size on UFriendItemWidget");
static_assert(offsetof(UFriendItemWidget, playerNameText) == 0x0004B0, "Member 'UFriendItemWidget::playerNameText' has a wrong offset!");
static_assert(offsetof(UFriendItemWidget, StatusText) == 0x0004B8, "Member 'UFriendItemWidget::StatusText' has a wrong offset!");
static_assert(offsetof(UFriendItemWidget, InviteIcon) == 0x0004C0, "Member 'UFriendItemWidget::InviteIcon' has a wrong offset!");
static_assert(offsetof(UFriendItemWidget, CrossplayIcon) == 0x0004C8, "Member 'UFriendItemWidget::CrossplayIcon' has a wrong offset!");

// Class DBDUIViewsCore.GradeChangePopupWidget
// 0x0008 (0x0390 - 0x0388)
class UGradeChangePopupWidget : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetData(const class UGradeChangePopupViewData* Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GradeChangePopupWidget">();
	}
	static class UGradeChangePopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGradeChangePopupWidget>();
	}
};
static_assert(alignof(UGradeChangePopupWidget) == 0x000008, "Wrong alignment on UGradeChangePopupWidget");
static_assert(sizeof(UGradeChangePopupWidget) == 0x000390, "Wrong size on UGradeChangePopupWidget");

// Class DBDUIViewsCore.HudEffectCardWidget
// 0x0028 (0x0378 - 0x0350)
class UHudEffectCardWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          EffectCardNameTB;                                  // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         _futureCardIndex;                                  // 0x0360(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_361[0x17];                                     // 0x0361(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddMatchPoint(bool isSecondPoint, bool withAnimation);
	void InitCards(const struct FEffectCardViewData& currentCardViewData, const struct FEffectCardViewData& nextCardViewData);
	void RotateCards(const bool isFutureCardValid, const struct FEffectCardViewData& futureCardViewData);
	void UpdateEffectCardName(const class FText& cardName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudEffectCardWidget">();
	}
	static class UHudEffectCardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudEffectCardWidget>();
	}
};
static_assert(alignof(UHudEffectCardWidget) == 0x000008, "Wrong alignment on UHudEffectCardWidget");
static_assert(sizeof(UHudEffectCardWidget) == 0x000378, "Wrong size on UHudEffectCardWidget");
static_assert(offsetof(UHudEffectCardWidget, EffectCardNameTB) == 0x000358, "Member 'UHudEffectCardWidget::EffectCardNameTB' has a wrong offset!");
static_assert(offsetof(UHudEffectCardWidget, _futureCardIndex) == 0x000360, "Member 'UHudEffectCardWidget::_futureCardIndex' has a wrong offset!");

// Class DBDUIViewsCore.ItemPickupWidget
// 0x0008 (0x0328 - 0x0320)
class UItemPickupWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ItemPickupWidget">();
	}
	static class UItemPickupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemPickupWidget>();
	}
};
static_assert(alignof(UItemPickupWidget) == 0x000008, "Wrong alignment on UItemPickupWidget");
static_assert(sizeof(UItemPickupWidget) == 0x000328, "Wrong size on UItemPickupWidget");

// Class DBDUIViewsCore.LeaveMatchPopupWidget
// 0x0020 (0x03A8 - 0x0388)
class ULeaveMatchPopupWidget : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          AbandonLoseTitleTB;                                // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          SurrenderKeepTitleTB;                              // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          SurrenderLoseTitleTB;                              // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetData(const class ULeaveMatchPopupViewData* Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LeaveMatchPopupWidget">();
	}
	static class ULeaveMatchPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULeaveMatchPopupWidget>();
	}
};
static_assert(alignof(ULeaveMatchPopupWidget) == 0x000008, "Wrong alignment on ULeaveMatchPopupWidget");
static_assert(sizeof(ULeaveMatchPopupWidget) == 0x0003A8, "Wrong size on ULeaveMatchPopupWidget");
static_assert(offsetof(ULeaveMatchPopupWidget, AbandonLoseTitleTB) == 0x000390, "Member 'ULeaveMatchPopupWidget::AbandonLoseTitleTB' has a wrong offset!");
static_assert(offsetof(ULeaveMatchPopupWidget, SurrenderKeepTitleTB) == 0x000398, "Member 'ULeaveMatchPopupWidget::SurrenderKeepTitleTB' has a wrong offset!");
static_assert(offsetof(ULeaveMatchPopupWidget, SurrenderLoseTitleTB) == 0x0003A0, "Member 'ULeaveMatchPopupWidget::SurrenderLoseTitleTB' has a wrong offset!");

// Class DBDUIViewsCore.LobbyPlayerListItemWidget
// 0x00E0 (0x0590 - 0x04B0)
class ULobbyPlayerListItemWidget final : public UCoreButtonWidget
{
public:
	class UOverlay*                               EmptyOverlay;                                      // 0x04B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               LockedOverlay;                                     // 0x04B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               InviteOverlay;                                     // 0x04C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               PlayerOverlay;                                     // 0x04C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               DetailsOverlay;                                    // 0x04D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               SearchingOverlay;                                  // 0x04D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SearchingText;                                     // 0x04E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          playerNameText;                                    // 0x04E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CharacterNameText;                                 // 0x04F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          InviteText;                                        // 0x04F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          InMatchText;                                       // 0x0500(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               LocalPlayerOverlay;                                // 0x0508(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               OverlayPlayerBackgroundKiller;                     // 0x0510(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               OverlayPlayerBackgroundSurvivor;                   // 0x0518(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              PlayerReadyImg;                                    // 0x0520(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              PlayerNotReadyImg;                                 // 0x0528(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuClassWidget*                   ClassWidget;                                       // 0x0530(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              WeakConnectionIcon;                                // 0x0538(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              CrossplayIcon;                                     // 0x0540(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLobbyPlayerListViewData               _viewData;                                         // 0x0548(0x0040)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_588[0x8];                                      // 0x0588(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideLoadoutPartTooltip(class UCoreButtonWidget* unhoveredSlotWidget);
	void OnBindHoverBorder(EPlayerListItemState State, bool isHoverEnabled);
	void SetState(EPlayerListItemState State);
	void ShowLoadoutPartTooltip(class UCoreButtonWidget* hoveredSlotWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyPlayerListItemWidget">();
	}
	static class ULobbyPlayerListItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyPlayerListItemWidget>();
	}
};
static_assert(alignof(ULobbyPlayerListItemWidget) == 0x000008, "Wrong alignment on ULobbyPlayerListItemWidget");
static_assert(sizeof(ULobbyPlayerListItemWidget) == 0x000590, "Wrong size on ULobbyPlayerListItemWidget");
static_assert(offsetof(ULobbyPlayerListItemWidget, EmptyOverlay) == 0x0004B0, "Member 'ULobbyPlayerListItemWidget::EmptyOverlay' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, LockedOverlay) == 0x0004B8, "Member 'ULobbyPlayerListItemWidget::LockedOverlay' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, InviteOverlay) == 0x0004C0, "Member 'ULobbyPlayerListItemWidget::InviteOverlay' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, PlayerOverlay) == 0x0004C8, "Member 'ULobbyPlayerListItemWidget::PlayerOverlay' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, DetailsOverlay) == 0x0004D0, "Member 'ULobbyPlayerListItemWidget::DetailsOverlay' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, SearchingOverlay) == 0x0004D8, "Member 'ULobbyPlayerListItemWidget::SearchingOverlay' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, SearchingText) == 0x0004E0, "Member 'ULobbyPlayerListItemWidget::SearchingText' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, playerNameText) == 0x0004E8, "Member 'ULobbyPlayerListItemWidget::playerNameText' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, CharacterNameText) == 0x0004F0, "Member 'ULobbyPlayerListItemWidget::CharacterNameText' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, InviteText) == 0x0004F8, "Member 'ULobbyPlayerListItemWidget::InviteText' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, InMatchText) == 0x000500, "Member 'ULobbyPlayerListItemWidget::InMatchText' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, LocalPlayerOverlay) == 0x000508, "Member 'ULobbyPlayerListItemWidget::LocalPlayerOverlay' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, OverlayPlayerBackgroundKiller) == 0x000510, "Member 'ULobbyPlayerListItemWidget::OverlayPlayerBackgroundKiller' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, OverlayPlayerBackgroundSurvivor) == 0x000518, "Member 'ULobbyPlayerListItemWidget::OverlayPlayerBackgroundSurvivor' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, PlayerReadyImg) == 0x000520, "Member 'ULobbyPlayerListItemWidget::PlayerReadyImg' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, PlayerNotReadyImg) == 0x000528, "Member 'ULobbyPlayerListItemWidget::PlayerNotReadyImg' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, ClassWidget) == 0x000530, "Member 'ULobbyPlayerListItemWidget::ClassWidget' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, WeakConnectionIcon) == 0x000538, "Member 'ULobbyPlayerListItemWidget::WeakConnectionIcon' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, CrossplayIcon) == 0x000540, "Member 'ULobbyPlayerListItemWidget::CrossplayIcon' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListItemWidget, _viewData) == 0x000548, "Member 'ULobbyPlayerListItemWidget::_viewData' has a wrong offset!");

// Class DBDUIViewsCore.LobbyPlayerListWidget
// 0x00D0 (0x03F0 - 0x0320)
class ULobbyPlayerListWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULobbyPlayerListItemWidget> PlayerListItemClass;                               // 0x0328(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           KillersSectionVerticalBox;                         // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           SurvivorsSectionVerticalBox;                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          KillersSectionText;                                // 0x0340(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SurvivorsSectionText;                              // 0x0348(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x18];                                     // 0x0350(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULobbyPlayerListItemWidget*>     ListItems;                                         // 0x0368(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& PlayerId)> _onPlayerStatusClicked;            // 0x0380(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const struct FPlayerSocialOptionViewData& optionData)> _onPlayerSocialOptionClicked; // 0x0390(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UCorePlayerSocialOptionsMenuWidget*     PlayerSocialOptionsMenu;                           // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SurvivorsConnectedText;                            // 0x03A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          KillersConnectedText;                              // 0x03B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               KillersSectionFogOverlay;                          // 0x03B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          KillersSectionFogText;                             // 0x03C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               SurvivorsSectionFogOverlay;                        // 0x03C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SurvivorsSectionFogText;                           // 0x03D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D8[0x18];                                     // 0x03D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnKillerClicked(class UCoreButtonWidget* buttonTarget);
	void OnPlayerSocialOptionClicked(const struct FPlayerSocialOptionViewData& playerSocialOptionData);
	void OnSurvivorClicked(class UCoreButtonWidget* buttonTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyPlayerListWidget">();
	}
	static class ULobbyPlayerListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyPlayerListWidget>();
	}
};
static_assert(alignof(ULobbyPlayerListWidget) == 0x000008, "Wrong alignment on ULobbyPlayerListWidget");
static_assert(sizeof(ULobbyPlayerListWidget) == 0x0003F0, "Wrong size on ULobbyPlayerListWidget");
static_assert(offsetof(ULobbyPlayerListWidget, PlayerListItemClass) == 0x000328, "Member 'ULobbyPlayerListWidget::PlayerListItemClass' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListWidget, KillersSectionVerticalBox) == 0x000330, "Member 'ULobbyPlayerListWidget::KillersSectionVerticalBox' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListWidget, SurvivorsSectionVerticalBox) == 0x000338, "Member 'ULobbyPlayerListWidget::SurvivorsSectionVerticalBox' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListWidget, KillersSectionText) == 0x000340, "Member 'ULobbyPlayerListWidget::KillersSectionText' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListWidget, SurvivorsSectionText) == 0x000348, "Member 'ULobbyPlayerListWidget::SurvivorsSectionText' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListWidget, ListItems) == 0x000368, "Member 'ULobbyPlayerListWidget::ListItems' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListWidget, _onPlayerStatusClicked) == 0x000380, "Member 'ULobbyPlayerListWidget::_onPlayerStatusClicked' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListWidget, _onPlayerSocialOptionClicked) == 0x000390, "Member 'ULobbyPlayerListWidget::_onPlayerSocialOptionClicked' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListWidget, PlayerSocialOptionsMenu) == 0x0003A0, "Member 'ULobbyPlayerListWidget::PlayerSocialOptionsMenu' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListWidget, SurvivorsConnectedText) == 0x0003A8, "Member 'ULobbyPlayerListWidget::SurvivorsConnectedText' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListWidget, KillersConnectedText) == 0x0003B0, "Member 'ULobbyPlayerListWidget::KillersConnectedText' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListWidget, KillersSectionFogOverlay) == 0x0003B8, "Member 'ULobbyPlayerListWidget::KillersSectionFogOverlay' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListWidget, KillersSectionFogText) == 0x0003C0, "Member 'ULobbyPlayerListWidget::KillersSectionFogText' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListWidget, SurvivorsSectionFogOverlay) == 0x0003C8, "Member 'ULobbyPlayerListWidget::SurvivorsSectionFogOverlay' has a wrong offset!");
static_assert(offsetof(ULobbyPlayerListWidget, SurvivorsSectionFogText) == 0x0003D0, "Member 'ULobbyPlayerListWidget::SurvivorsSectionFogText' has a wrong offset!");

// Class DBDUIViewsCore.LobbySidePanelWidget
// 0x0180 (0x04A0 - 0x0320)
class ULobbySidePanelWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCoreLobbySidePanelButton*>      _lobbySidePanelButtons;                            // 0x0328(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_338[0xC0];                                     // 0x0338(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreLobbySidePanelButton*              CharactersButton;                                  // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLobbySidePanelButton*              LoadoutButton;                                     // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLobbySidePanelButton*              BloodWebButton;                                    // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLobbySidePanelButton*              ChallengesButton;                                  // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLobbySidePanelButton*              EventButton;                                       // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLobbySidePanelButton*              ShrineButton;                                      // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLobbySidePanelButton*              StoreButton;                                       // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLobbySidePanelButton*              SurvivorRoleButton;                                // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLobbySidePanelButton*              KillerRoleButton;                                  // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLobbySidePanelButton*              SpectatorRoleButton;                               // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSelectableButtonWidget*            _selectedSidePanelButton;                          // 0x0448(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_450[0x50];                                     // 0x0450(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeSidePanel(const struct FLobbySidePanelViewData& sidePanelViewData);
	void OnBloodWebButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnButtonSelectedAgain(class UCoreSelectableButtonWidget* buttonTarget);
	void OnChallengesButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnChallengesButtonHovered(class UCoreButtonWidget* Button);
	void OnChallengesButtonUnhovered(class UCoreButtonWidget* Button);
	void OnCharacterButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnEventButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnKillerRoleButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnLoadoutButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnShrineButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnSpectatorRoleButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnStoreButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnSurvivorRoleButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnTabButtonSelectedChanged(class UCoreSelectableButtonWidget* targetButton, bool IsSelected);

	void SetRoleButtonVisibility(bool IsVisible_0) const;
	void SetUiTakeoverVisuals(bool IsActive) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbySidePanelWidget">();
	}
	static class ULobbySidePanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbySidePanelWidget>();
	}
};
static_assert(alignof(ULobbySidePanelWidget) == 0x000008, "Wrong alignment on ULobbySidePanelWidget");
static_assert(sizeof(ULobbySidePanelWidget) == 0x0004A0, "Wrong size on ULobbySidePanelWidget");
static_assert(offsetof(ULobbySidePanelWidget, _lobbySidePanelButtons) == 0x000328, "Member 'ULobbySidePanelWidget::_lobbySidePanelButtons' has a wrong offset!");
static_assert(offsetof(ULobbySidePanelWidget, CharactersButton) == 0x0003F8, "Member 'ULobbySidePanelWidget::CharactersButton' has a wrong offset!");
static_assert(offsetof(ULobbySidePanelWidget, LoadoutButton) == 0x000400, "Member 'ULobbySidePanelWidget::LoadoutButton' has a wrong offset!");
static_assert(offsetof(ULobbySidePanelWidget, BloodWebButton) == 0x000408, "Member 'ULobbySidePanelWidget::BloodWebButton' has a wrong offset!");
static_assert(offsetof(ULobbySidePanelWidget, ChallengesButton) == 0x000410, "Member 'ULobbySidePanelWidget::ChallengesButton' has a wrong offset!");
static_assert(offsetof(ULobbySidePanelWidget, EventButton) == 0x000418, "Member 'ULobbySidePanelWidget::EventButton' has a wrong offset!");
static_assert(offsetof(ULobbySidePanelWidget, ShrineButton) == 0x000420, "Member 'ULobbySidePanelWidget::ShrineButton' has a wrong offset!");
static_assert(offsetof(ULobbySidePanelWidget, StoreButton) == 0x000428, "Member 'ULobbySidePanelWidget::StoreButton' has a wrong offset!");
static_assert(offsetof(ULobbySidePanelWidget, SurvivorRoleButton) == 0x000430, "Member 'ULobbySidePanelWidget::SurvivorRoleButton' has a wrong offset!");
static_assert(offsetof(ULobbySidePanelWidget, KillerRoleButton) == 0x000438, "Member 'ULobbySidePanelWidget::KillerRoleButton' has a wrong offset!");
static_assert(offsetof(ULobbySidePanelWidget, SpectatorRoleButton) == 0x000440, "Member 'ULobbySidePanelWidget::SpectatorRoleButton' has a wrong offset!");
static_assert(offsetof(ULobbySidePanelWidget, _selectedSidePanelButton) == 0x000448, "Member 'ULobbySidePanelWidget::_selectedSidePanelButton' has a wrong offset!");

// Class DBDUIViewsCore.LocalTextureLoader
// 0x00C0 (0x00F0 - 0x0030)
class ULocalTextureLoader final : public UObject
{
public:
	TMap<class FString, class UTexture2D*>        _loadedTexturesMap;                                // 0x0030(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x70];                                      // 0x0080(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LocalTextureLoader">();
	}
	static class ULocalTextureLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalTextureLoader>();
	}
};
static_assert(alignof(ULocalTextureLoader) == 0x000008, "Wrong alignment on ULocalTextureLoader");
static_assert(sizeof(ULocalTextureLoader) == 0x0000F0, "Wrong size on ULocalTextureLoader");
static_assert(offsetof(ULocalTextureLoader, _loadedTexturesMap) == 0x000030, "Member 'ULocalTextureLoader::_loadedTexturesMap' has a wrong offset!");

// Class DBDUIViewsCore.LockedFeatureTooltipWidget
// 0x0070 (0x03A0 - 0x0330)
class ULockedFeatureTooltipWidget final : public UTooltipWidget
{
public:
	TMap<ELockedElementType, struct FMargin>      _tooltipMargins;                                   // 0x0330(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TitleTB;                                           // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ContentTB;                                         // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ProgressTB;                                        // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTooltipData(const struct FLockedFeatureTooltipViewData& ViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LockedFeatureTooltipWidget">();
	}
	static class ULockedFeatureTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULockedFeatureTooltipWidget>();
	}
};
static_assert(alignof(ULockedFeatureTooltipWidget) == 0x000008, "Wrong alignment on ULockedFeatureTooltipWidget");
static_assert(sizeof(ULockedFeatureTooltipWidget) == 0x0003A0, "Wrong size on ULockedFeatureTooltipWidget");
static_assert(offsetof(ULockedFeatureTooltipWidget, _tooltipMargins) == 0x000330, "Member 'ULockedFeatureTooltipWidget::_tooltipMargins' has a wrong offset!");
static_assert(offsetof(ULockedFeatureTooltipWidget, TitleTB) == 0x000380, "Member 'ULockedFeatureTooltipWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(ULockedFeatureTooltipWidget, ContentTB) == 0x000388, "Member 'ULockedFeatureTooltipWidget::ContentTB' has a wrong offset!");
static_assert(offsetof(ULockedFeatureTooltipWidget, ProgressTB) == 0x000390, "Member 'ULockedFeatureTooltipWidget::ProgressTB' has a wrong offset!");

// Class DBDUIViewsCore.MapShowcaseTooltipWidget
// 0x0020 (0x0350 - 0x0330)
class UMapShowcaseTooltipWidget final : public UTooltipWidget
{
public:
	class UDBDTextBlock*                          TooltipTitle;                                      // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TooltipSubtitle;                                   // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      ToolTipDescriptionRTB;                             // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              MapImage;                                          // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetTooltipData(const struct FMapShowcaseTooltipViewData& tooltipViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MapShowcaseTooltipWidget">();
	}
	static class UMapShowcaseTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMapShowcaseTooltipWidget>();
	}
};
static_assert(alignof(UMapShowcaseTooltipWidget) == 0x000008, "Wrong alignment on UMapShowcaseTooltipWidget");
static_assert(sizeof(UMapShowcaseTooltipWidget) == 0x000350, "Wrong size on UMapShowcaseTooltipWidget");
static_assert(offsetof(UMapShowcaseTooltipWidget, TooltipTitle) == 0x000330, "Member 'UMapShowcaseTooltipWidget::TooltipTitle' has a wrong offset!");
static_assert(offsetof(UMapShowcaseTooltipWidget, TooltipSubtitle) == 0x000338, "Member 'UMapShowcaseTooltipWidget::TooltipSubtitle' has a wrong offset!");
static_assert(offsetof(UMapShowcaseTooltipWidget, ToolTipDescriptionRTB) == 0x000340, "Member 'UMapShowcaseTooltipWidget::ToolTipDescriptionRTB' has a wrong offset!");
static_assert(offsetof(UMapShowcaseTooltipWidget, MapImage) == 0x000348, "Member 'UMapShowcaseTooltipWidget::MapImage' has a wrong offset!");

// Class DBDUIViewsCore.MilestoneTrackerTierItem
// 0x0020 (0x0340 - 0x0320)
class UMilestoneTrackerTierItem final : public UCoreBaseUserWidget
{
public:
	class UCoreStoreCustomizationItemWidget*      Reward;                                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEventPointsWidget*                     EventPointsWidget;                                 // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              BackgroundImage;                                   // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackgroundImageLoadingCompleted();
	void OnBackgroundImageLoadingStarted();
	void PlayUnlockanimation();
	void SetData(const struct FMilestoneTrackerItemViewData& Data);
	void SetVisualState(const EMilestoneTrackerItemState State);
	void UpdateBackground(const TSoftObjectPtr<class UMaterialInstance> Background);

	void Clear() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MilestoneTrackerTierItem">();
	}
	static class UMilestoneTrackerTierItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMilestoneTrackerTierItem>();
	}
};
static_assert(alignof(UMilestoneTrackerTierItem) == 0x000008, "Wrong alignment on UMilestoneTrackerTierItem");
static_assert(sizeof(UMilestoneTrackerTierItem) == 0x000340, "Wrong size on UMilestoneTrackerTierItem");
static_assert(offsetof(UMilestoneTrackerTierItem, Reward) == 0x000320, "Member 'UMilestoneTrackerTierItem::Reward' has a wrong offset!");
static_assert(offsetof(UMilestoneTrackerTierItem, EventPointsWidget) == 0x000328, "Member 'UMilestoneTrackerTierItem::EventPointsWidget' has a wrong offset!");
static_assert(offsetof(UMilestoneTrackerTierItem, BackgroundImage) == 0x000330, "Member 'UMilestoneTrackerTierItem::BackgroundImage' has a wrong offset!");

// Class DBDUIViewsCore.MilestoneTrackerWidget
// 0x0058 (0x0378 - 0x0320)
class UMilestoneTrackerWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDRichTextBlock*                      Title;                                             // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      MilestonePointsText;                               // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEventPointsWidget*                     UserMilestonePointsWidget;                         // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         RewardsGrid;                                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              Background;                                        // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMilestoneTrackerTierItem>  _milestoneTrackerTierItemClass;                    // 0x0348(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _maxTierItems;                                     // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMilestoneTrackerTierItem*>      _tierItemPool;                                     // 0x0358(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_368[0x10];                                     // 0x0368(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeselectMilestoneRewards();
	void OnRewardItemClicked(class UCoreButtonWidget* buttonTarget);
	void PlayMilestoneTrackerItemUnlockAnimation(const int32 Index_0);
	void SelectMilestoneTrackerItem(class FName ItemId);
	void SetData(const struct FMilestoneTrackerViewData& ViewData);
	void SetVisuals(const struct FMilestoneTrackerEventBasedSkinViewData& ViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MilestoneTrackerWidget">();
	}
	static class UMilestoneTrackerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMilestoneTrackerWidget>();
	}
};
static_assert(alignof(UMilestoneTrackerWidget) == 0x000008, "Wrong alignment on UMilestoneTrackerWidget");
static_assert(sizeof(UMilestoneTrackerWidget) == 0x000378, "Wrong size on UMilestoneTrackerWidget");
static_assert(offsetof(UMilestoneTrackerWidget, Title) == 0x000320, "Member 'UMilestoneTrackerWidget::Title' has a wrong offset!");
static_assert(offsetof(UMilestoneTrackerWidget, MilestonePointsText) == 0x000328, "Member 'UMilestoneTrackerWidget::MilestonePointsText' has a wrong offset!");
static_assert(offsetof(UMilestoneTrackerWidget, UserMilestonePointsWidget) == 0x000330, "Member 'UMilestoneTrackerWidget::UserMilestonePointsWidget' has a wrong offset!");
static_assert(offsetof(UMilestoneTrackerWidget, RewardsGrid) == 0x000338, "Member 'UMilestoneTrackerWidget::RewardsGrid' has a wrong offset!");
static_assert(offsetof(UMilestoneTrackerWidget, Background) == 0x000340, "Member 'UMilestoneTrackerWidget::Background' has a wrong offset!");
static_assert(offsetof(UMilestoneTrackerWidget, _milestoneTrackerTierItemClass) == 0x000348, "Member 'UMilestoneTrackerWidget::_milestoneTrackerTierItemClass' has a wrong offset!");
static_assert(offsetof(UMilestoneTrackerWidget, _maxTierItems) == 0x000350, "Member 'UMilestoneTrackerWidget::_maxTierItems' has a wrong offset!");
static_assert(offsetof(UMilestoneTrackerWidget, _tierItemPool) == 0x000358, "Member 'UMilestoneTrackerWidget::_tierItemPool' has a wrong offset!");

// Class DBDUIViewsCore.ModalWidget
// 0x0030 (0x0360 - 0x0330)
class UModalWidget : public UTooltipWidget
{
public:
	class UDBDButton*                             HitzoneButton;                                     // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _timeToFade;                                       // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33C[0x24];                                     // 0x033C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FinishCloseAnimation();
	void FinishOpenAnimation();
	void OnHoveredInternal();
	void OnKeyDownAnywhere(const struct FKeyEvent& Event);
	void OnKeyUpAnywhere(const struct FKeyEvent& Event);
	void OnMouseDownAnywhere(const struct FPointerEvent& PointerEvent);
	void OnMouseUpAnywhere(const struct FPointerEvent& PointerEvent);
	void OnUnhoveredInternal();
	void StartCloseAnimation();
	void StartOpenAnimation();
	void StopCloseAnimation();
	void StopOpenAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModalWidget">();
	}
	static class UModalWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModalWidget>();
	}
};
static_assert(alignof(UModalWidget) == 0x000008, "Wrong alignment on UModalWidget");
static_assert(sizeof(UModalWidget) == 0x000360, "Wrong size on UModalWidget");
static_assert(offsetof(UModalWidget, HitzoneButton) == 0x000330, "Member 'UModalWidget::HitzoneButton' has a wrong offset!");
static_assert(offsetof(UModalWidget, _timeToFade) == 0x000338, "Member 'UModalWidget::_timeToFade' has a wrong offset!");

// Class DBDUIViewsCore.NewRiftPopupWidget
// 0x0080 (0x0408 - 0x0388)
class UNewRiftPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDImage*                              BgImageContainer;                                  // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RiftTimeLabel;                                     // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          QuestTitle;                                        // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          QuestDescription;                                  // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               QuestButton;                                       // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RiftTitle;                                         // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RiftDescription;                                   // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RiftButton;                                        // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreIconButtonWidget*                  ReplayButton;                                      // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _questButtonClickedDelegate;                       // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _replayButtonClickedDelegate;                      // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _riftButtonClickedDelegate;                        // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void OnQuestButtonClicked();
	void OnReplayButtonClicked(class UCoreButtonWidget* CoreButtonWidget);
	void OnRiftButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NewRiftPopupWidget">();
	}
	static class UNewRiftPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNewRiftPopupWidget>();
	}
};
static_assert(alignof(UNewRiftPopupWidget) == 0x000008, "Wrong alignment on UNewRiftPopupWidget");
static_assert(sizeof(UNewRiftPopupWidget) == 0x000408, "Wrong size on UNewRiftPopupWidget");
static_assert(offsetof(UNewRiftPopupWidget, BgImageContainer) == 0x000390, "Member 'UNewRiftPopupWidget::BgImageContainer' has a wrong offset!");
static_assert(offsetof(UNewRiftPopupWidget, RiftTimeLabel) == 0x000398, "Member 'UNewRiftPopupWidget::RiftTimeLabel' has a wrong offset!");
static_assert(offsetof(UNewRiftPopupWidget, QuestTitle) == 0x0003A0, "Member 'UNewRiftPopupWidget::QuestTitle' has a wrong offset!");
static_assert(offsetof(UNewRiftPopupWidget, QuestDescription) == 0x0003A8, "Member 'UNewRiftPopupWidget::QuestDescription' has a wrong offset!");
static_assert(offsetof(UNewRiftPopupWidget, QuestButton) == 0x0003B0, "Member 'UNewRiftPopupWidget::QuestButton' has a wrong offset!");
static_assert(offsetof(UNewRiftPopupWidget, RiftTitle) == 0x0003B8, "Member 'UNewRiftPopupWidget::RiftTitle' has a wrong offset!");
static_assert(offsetof(UNewRiftPopupWidget, RiftDescription) == 0x0003C0, "Member 'UNewRiftPopupWidget::RiftDescription' has a wrong offset!");
static_assert(offsetof(UNewRiftPopupWidget, RiftButton) == 0x0003C8, "Member 'UNewRiftPopupWidget::RiftButton' has a wrong offset!");
static_assert(offsetof(UNewRiftPopupWidget, ReplayButton) == 0x0003D0, "Member 'UNewRiftPopupWidget::ReplayButton' has a wrong offset!");
static_assert(offsetof(UNewRiftPopupWidget, _questButtonClickedDelegate) == 0x0003D8, "Member 'UNewRiftPopupWidget::_questButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UNewRiftPopupWidget, _replayButtonClickedDelegate) == 0x0003E8, "Member 'UNewRiftPopupWidget::_replayButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UNewRiftPopupWidget, _riftButtonClickedDelegate) == 0x0003F8, "Member 'UNewRiftPopupWidget::_riftButtonClickedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.NotEnoughCurrencyModalWidget
// 0x0048 (0x03A8 - 0x0360)
class UNotEnoughCurrencyModalWidget final : public UModalWidget
{
public:
	class UDBDRichTextBlock*                      ContentRTB;                                        // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerButtonWidget*           Button;                                            // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_370[0x38];                                     // 0x0370(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonClicked(class UCoreButtonWidget* clickedButton);
	void OnHovered(class UCoreButtonWidget* hoveredButton);
	void OnUnhovered(class UCoreButtonWidget* unhoveredButton);
	void SetTooltipData(const struct FNotEnoughCurrencyModalViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NotEnoughCurrencyModalWidget">();
	}
	static class UNotEnoughCurrencyModalWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNotEnoughCurrencyModalWidget>();
	}
};
static_assert(alignof(UNotEnoughCurrencyModalWidget) == 0x000008, "Wrong alignment on UNotEnoughCurrencyModalWidget");
static_assert(sizeof(UNotEnoughCurrencyModalWidget) == 0x0003A8, "Wrong size on UNotEnoughCurrencyModalWidget");
static_assert(offsetof(UNotEnoughCurrencyModalWidget, ContentRTB) == 0x000360, "Member 'UNotEnoughCurrencyModalWidget::ContentRTB' has a wrong offset!");
static_assert(offsetof(UNotEnoughCurrencyModalWidget, Button) == 0x000368, "Member 'UNotEnoughCurrencyModalWidget::Button' has a wrong offset!");

// Class DBDUIViewsCore.ObjectiveRewardLabelWidget
// 0x0000 (0x0320 - 0x0320)
class UObjectiveRewardLabelWidget final : public UCoreBaseUserWidget
{
public:
	void SetData(const struct FObjectiveRewardLabelViewData& ViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObjectiveRewardLabelWidget">();
	}
	static class UObjectiveRewardLabelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectiveRewardLabelWidget>();
	}
};
static_assert(alignof(UObjectiveRewardLabelWidget) == 0x000008, "Wrong alignment on UObjectiveRewardLabelWidget");
static_assert(sizeof(UObjectiveRewardLabelWidget) == 0x000320, "Wrong size on UObjectiveRewardLabelWidget");

// Class DBDUIViewsCore.ObjectiveTrackerTooltipWidget
// 0x0058 (0x0388 - 0x0330)
class UObjectiveTrackerTooltipWidget final : public UTooltipWidget
{
public:
	class UDBDTextBlock*                          TitleTB;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SubtitleTB;                                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      DescriptionRTB;                                    // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RewardsHeaderTB;                                   // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           RewardLabelContainer;                              // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              BannerIMG;                                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              LabelIMG;                                          // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UObjectiveRewardLabelWidget> ObjectiveRewardLabelWidgetClass;                  // 0x0368(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxRewardLabels;                                   // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObjectiveRewardLabelWidget*>    _objectiveRewardWidgetPool;                        // 0x0378(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void SetTooltipData(const struct FEventObjectiveTrackerViewData& ViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObjectiveTrackerTooltipWidget">();
	}
	static class UObjectiveTrackerTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectiveTrackerTooltipWidget>();
	}
};
static_assert(alignof(UObjectiveTrackerTooltipWidget) == 0x000008, "Wrong alignment on UObjectiveTrackerTooltipWidget");
static_assert(sizeof(UObjectiveTrackerTooltipWidget) == 0x000388, "Wrong size on UObjectiveTrackerTooltipWidget");
static_assert(offsetof(UObjectiveTrackerTooltipWidget, TitleTB) == 0x000330, "Member 'UObjectiveTrackerTooltipWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UObjectiveTrackerTooltipWidget, SubtitleTB) == 0x000338, "Member 'UObjectiveTrackerTooltipWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UObjectiveTrackerTooltipWidget, DescriptionRTB) == 0x000340, "Member 'UObjectiveTrackerTooltipWidget::DescriptionRTB' has a wrong offset!");
static_assert(offsetof(UObjectiveTrackerTooltipWidget, RewardsHeaderTB) == 0x000348, "Member 'UObjectiveTrackerTooltipWidget::RewardsHeaderTB' has a wrong offset!");
static_assert(offsetof(UObjectiveTrackerTooltipWidget, RewardLabelContainer) == 0x000350, "Member 'UObjectiveTrackerTooltipWidget::RewardLabelContainer' has a wrong offset!");
static_assert(offsetof(UObjectiveTrackerTooltipWidget, BannerIMG) == 0x000358, "Member 'UObjectiveTrackerTooltipWidget::BannerIMG' has a wrong offset!");
static_assert(offsetof(UObjectiveTrackerTooltipWidget, LabelIMG) == 0x000360, "Member 'UObjectiveTrackerTooltipWidget::LabelIMG' has a wrong offset!");
static_assert(offsetof(UObjectiveTrackerTooltipWidget, ObjectiveRewardLabelWidgetClass) == 0x000368, "Member 'UObjectiveTrackerTooltipWidget::ObjectiveRewardLabelWidgetClass' has a wrong offset!");
static_assert(offsetof(UObjectiveTrackerTooltipWidget, MaxRewardLabels) == 0x000370, "Member 'UObjectiveTrackerTooltipWidget::MaxRewardLabels' has a wrong offset!");
static_assert(offsetof(UObjectiveTrackerTooltipWidget, _objectiveRewardWidgetPool) == 0x000378, "Member 'UObjectiveTrackerTooltipWidget::_objectiveRewardWidgetPool' has a wrong offset!");

// Class DBDUIViewsCore.ProcessingPopupWidget
// 0x0008 (0x0348 - 0x0340)
class UProcessingPopupWidget : public UCoreBasePopupWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProcessingPopupWidget">();
	}
	static class UProcessingPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProcessingPopupWidget>();
	}
};
static_assert(alignof(UProcessingPopupWidget) == 0x000008, "Wrong alignment on UProcessingPopupWidget");
static_assert(sizeof(UProcessingPopupWidget) == 0x000348, "Wrong size on UProcessingPopupWidget");

// Class DBDUIViewsCore.ProfileMenuCustomizationWidget
// 0x00C8 (0x0408 - 0x0340)
class UProfileMenuCustomizationWidget : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _sortingOptions;                                   // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreSortingWidget*                     SortButton;                                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCustomizationItemGridContainer*        CustomizationGrid;                                 // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreImagePreviewAreaWidget*            PreviewArea;                                       // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               EquipInputSwitcher;                                // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSearchBarWidget*                   SearchBar;                                         // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _noBannerSelectedText;                             // 0x0378(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   _noBadgeSelectedText;                              // 0x0390(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	ECustomizationCategory                        _customizationCategory;                            // 0x03A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A9[0x5F];                                     // 0x03A9(0x005F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCustomizationGridItemClicked(const int32 selectedIndex);
	void OnEquipButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileMenuCustomizationWidget">();
	}
	static class UProfileMenuCustomizationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfileMenuCustomizationWidget>();
	}
};
static_assert(alignof(UProfileMenuCustomizationWidget) == 0x000008, "Wrong alignment on UProfileMenuCustomizationWidget");
static_assert(sizeof(UProfileMenuCustomizationWidget) == 0x000408, "Wrong size on UProfileMenuCustomizationWidget");
static_assert(offsetof(UProfileMenuCustomizationWidget, _sortingOptions) == 0x000348, "Member 'UProfileMenuCustomizationWidget::_sortingOptions' has a wrong offset!");
static_assert(offsetof(UProfileMenuCustomizationWidget, SortButton) == 0x000350, "Member 'UProfileMenuCustomizationWidget::SortButton' has a wrong offset!");
static_assert(offsetof(UProfileMenuCustomizationWidget, CustomizationGrid) == 0x000358, "Member 'UProfileMenuCustomizationWidget::CustomizationGrid' has a wrong offset!");
static_assert(offsetof(UProfileMenuCustomizationWidget, PreviewArea) == 0x000360, "Member 'UProfileMenuCustomizationWidget::PreviewArea' has a wrong offset!");
static_assert(offsetof(UProfileMenuCustomizationWidget, EquipInputSwitcher) == 0x000368, "Member 'UProfileMenuCustomizationWidget::EquipInputSwitcher' has a wrong offset!");
static_assert(offsetof(UProfileMenuCustomizationWidget, SearchBar) == 0x000370, "Member 'UProfileMenuCustomizationWidget::SearchBar' has a wrong offset!");
static_assert(offsetof(UProfileMenuCustomizationWidget, _noBannerSelectedText) == 0x000378, "Member 'UProfileMenuCustomizationWidget::_noBannerSelectedText' has a wrong offset!");
static_assert(offsetof(UProfileMenuCustomizationWidget, _noBadgeSelectedText) == 0x000390, "Member 'UProfileMenuCustomizationWidget::_noBadgeSelectedText' has a wrong offset!");
static_assert(offsetof(UProfileMenuCustomizationWidget, _customizationCategory) == 0x0003A8, "Member 'UProfileMenuCustomizationWidget::_customizationCategory' has a wrong offset!");

// Class DBDUIViewsCore.ProfileMenuPlayerRankWrapper
// 0x0048 (0x0368 - 0x0320)
class UProfileMenuPlayerRankWrapper : public UCoreBaseUserWidget
{
public:
	class FText                                   ProgressText;                                      // 0x0320(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   KillerGradeText;                                   // 0x0338(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   SurvivorGradeText;                                 // 0x0350(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void SetData(const struct FRankViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileMenuPlayerRankWrapper">();
	}
	static class UProfileMenuPlayerRankWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfileMenuPlayerRankWrapper>();
	}
};
static_assert(alignof(UProfileMenuPlayerRankWrapper) == 0x000008, "Wrong alignment on UProfileMenuPlayerRankWrapper");
static_assert(sizeof(UProfileMenuPlayerRankWrapper) == 0x000368, "Wrong size on UProfileMenuPlayerRankWrapper");
static_assert(offsetof(UProfileMenuPlayerRankWrapper, ProgressText) == 0x000320, "Member 'UProfileMenuPlayerRankWrapper::ProgressText' has a wrong offset!");
static_assert(offsetof(UProfileMenuPlayerRankWrapper, KillerGradeText) == 0x000338, "Member 'UProfileMenuPlayerRankWrapper::KillerGradeText' has a wrong offset!");
static_assert(offsetof(UProfileMenuPlayerRankWrapper, SurvivorGradeText) == 0x000350, "Member 'UProfileMenuPlayerRankWrapper::SurvivorGradeText' has a wrong offset!");

// Class DBDUIViewsCore.ProfileMenuStatsWidget
// 0x0050 (0x0390 - 0x0340)
class UProfileMenuStatsWidget : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_340[0x8];                                      // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PlayerLevelText;                                   // 0x0348(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   PlayerLevelAndDevotionDescription;                 // 0x0360(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   KillerAndSurvivorGradesDescription;                // 0x0378(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileMenuStatsWidget">();
	}
	static class UProfileMenuStatsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfileMenuStatsWidget>();
	}
};
static_assert(alignof(UProfileMenuStatsWidget) == 0x000008, "Wrong alignment on UProfileMenuStatsWidget");
static_assert(sizeof(UProfileMenuStatsWidget) == 0x000390, "Wrong size on UProfileMenuStatsWidget");
static_assert(offsetof(UProfileMenuStatsWidget, PlayerLevelText) == 0x000348, "Member 'UProfileMenuStatsWidget::PlayerLevelText' has a wrong offset!");
static_assert(offsetof(UProfileMenuStatsWidget, PlayerLevelAndDevotionDescription) == 0x000360, "Member 'UProfileMenuStatsWidget::PlayerLevelAndDevotionDescription' has a wrong offset!");
static_assert(offsetof(UProfileMenuStatsWidget, KillerAndSurvivorGradesDescription) == 0x000378, "Member 'UProfileMenuStatsWidget::KillerAndSurvivorGradesDescription' has a wrong offset!");

// Class DBDUIViewsCore.ProgressionSystemInfoPopupWidget
// 0x0008 (0x0390 - 0x0388)
class UProgressionSystemInfoPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProgressionSystemInfoPopupWidget">();
	}
	static class UProgressionSystemInfoPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProgressionSystemInfoPopupWidget>();
	}
};
static_assert(alignof(UProgressionSystemInfoPopupWidget) == 0x000008, "Wrong alignment on UProgressionSystemInfoPopupWidget");
static_assert(sizeof(UProgressionSystemInfoPopupWidget) == 0x000390, "Wrong size on UProgressionSystemInfoPopupWidget");

// Class DBDUIViewsCore.ReportFeedbackInfoWidget
// 0x0010 (0x0330 - 0x0320)
class UReportFeedbackInfoWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDTextBlock*                          BanTimestampTB;                                    // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ReasonTB;                                          // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetData(const struct FReportFeedbackData& ReportData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReportFeedbackInfoWidget">();
	}
	static class UReportFeedbackInfoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReportFeedbackInfoWidget>();
	}
};
static_assert(alignof(UReportFeedbackInfoWidget) == 0x000008, "Wrong alignment on UReportFeedbackInfoWidget");
static_assert(sizeof(UReportFeedbackInfoWidget) == 0x000330, "Wrong size on UReportFeedbackInfoWidget");
static_assert(offsetof(UReportFeedbackInfoWidget, BanTimestampTB) == 0x000320, "Member 'UReportFeedbackInfoWidget::BanTimestampTB' has a wrong offset!");
static_assert(offsetof(UReportFeedbackInfoWidget, ReasonTB) == 0x000328, "Member 'UReportFeedbackInfoWidget::ReasonTB' has a wrong offset!");

// Class DBDUIViewsCore.RichTextBlockImageSharedSizeDecorator
// 0x0008 (0x0040 - 0x0038)
class URichTextBlockImageSharedSizeDecorator final : public URichTextBlockImageDecorator
{
public:
	int32                                         Width;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextBlockImageSharedSizeDecorator">();
	}
	static class URichTextBlockImageSharedSizeDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlockImageSharedSizeDecorator>();
	}
};
static_assert(alignof(URichTextBlockImageSharedSizeDecorator) == 0x000008, "Wrong alignment on URichTextBlockImageSharedSizeDecorator");
static_assert(sizeof(URichTextBlockImageSharedSizeDecorator) == 0x000040, "Wrong size on URichTextBlockImageSharedSizeDecorator");
static_assert(offsetof(URichTextBlockImageSharedSizeDecorator, Width) == 0x000038, "Member 'URichTextBlockImageSharedSizeDecorator::Width' has a wrong offset!");
static_assert(offsetof(URichTextBlockImageSharedSizeDecorator, Height) == 0x00003C, "Member 'URichTextBlockImageSharedSizeDecorator::Height' has a wrong offset!");

// Class DBDUIViewsCore.RichTextBlockScalableImageDecorator
// 0x0018 (0x0050 - 0x0038)
class URichTextBlockScalableImageDecorator : public URichTextBlockImageDecorator
{
public:
	struct FSlateColor                            TintColor;                                         // 0x0038(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetTintColor();
	void SetTintColor(const struct FSlateColor& TintColor_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextBlockScalableImageDecorator">();
	}
	static class URichTextBlockScalableImageDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlockScalableImageDecorator>();
	}
};
static_assert(alignof(URichTextBlockScalableImageDecorator) == 0x000008, "Wrong alignment on URichTextBlockScalableImageDecorator");
static_assert(sizeof(URichTextBlockScalableImageDecorator) == 0x000050, "Wrong size on URichTextBlockScalableImageDecorator");
static_assert(offsetof(URichTextBlockScalableImageDecorator, TintColor) == 0x000038, "Member 'URichTextBlockScalableImageDecorator::TintColor' has a wrong offset!");

// Class DBDUIViewsCore.RichTextHTMLDecorator
// 0x0000 (0x0030 - 0x0030)
class URichTextHTMLDecorator final : public URichTextBlockDecorator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextHTMLDecorator">();
	}
	static class URichTextHTMLDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextHTMLDecorator>();
	}
};
static_assert(alignof(URichTextHTMLDecorator) == 0x000008, "Wrong alignment on URichTextHTMLDecorator");
static_assert(sizeof(URichTextHTMLDecorator) == 0x000030, "Wrong size on URichTextHTMLDecorator");

// Class DBDUIViewsCore.RichTextNestedTagsDecorator
// 0x0030 (0x0060 - 0x0030)
class URichTextNestedTagsDecorator final : public URichTextBlockDecorator
{
public:
	uint8                                         Pad_30[0x30];                                      // 0x0030(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextNestedTagsDecorator">();
	}
	static class URichTextNestedTagsDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextNestedTagsDecorator>();
	}
};
static_assert(alignof(URichTextNestedTagsDecorator) == 0x000008, "Wrong alignment on URichTextNestedTagsDecorator");
static_assert(sizeof(URichTextNestedTagsDecorator) == 0x000060, "Wrong size on URichTextNestedTagsDecorator");

// Class DBDUIViewsCore.ScaleformTooltipWidget
// 0x0008 (0x0328 - 0x0320)
class UScaleformTooltipWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScaleformTooltipWidget">();
	}
	static class UScaleformTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScaleformTooltipWidget>();
	}
};
static_assert(alignof(UScaleformTooltipWidget) == 0x000008, "Wrong alignment on UScaleformTooltipWidget");
static_assert(sizeof(UScaleformTooltipWidget) == 0x000328, "Wrong size on UScaleformTooltipWidget");

// Class DBDUIViewsCore.SecurityCameraOverlayWidget
// 0x0010 (0x0360 - 0x0350)
class USecurityCameraOverlayWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FText GetLocalizedDisabledLabel();
	class FText GetLocalizedUsedLabel();
	class FText GetLocalizedYouLabel();

	float GetBatteryPercent() const;
	ESecurityCameraState GetPreviousState() const;
	ESecurityCameraState GetState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SecurityCameraOverlayWidget">();
	}
	static class USecurityCameraOverlayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USecurityCameraOverlayWidget>();
	}
};
static_assert(alignof(USecurityCameraOverlayWidget) == 0x000008, "Wrong alignment on USecurityCameraOverlayWidget");
static_assert(sizeof(USecurityCameraOverlayWidget) == 0x000360, "Wrong size on USecurityCameraOverlayWidget");

// Class DBDUIViewsCore.SettingsWidget
// 0x0068 (0x0388 - 0x0320)
class USettingsWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USettingsMatchDetailsWidget*            MatchDetailsWidget;                                // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               FooterOverlay;                                     // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               ResetDefaultsInputSwitcher;                        // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      ScrollInputPrompt;                                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               QuitInputSwitcher;                                 // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_358[0x30];                                     // 0x0358(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackInputSwitcherTriggered();
	void OnQuitInputSwitcherTriggered();
	void OnResetDefaultsInputSwitcherTriggered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingsWidget">();
	}
	static class USettingsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingsWidget>();
	}
};
static_assert(alignof(USettingsWidget) == 0x000008, "Wrong alignment on USettingsWidget");
static_assert(sizeof(USettingsWidget) == 0x000388, "Wrong size on USettingsWidget");
static_assert(offsetof(USettingsWidget, MatchDetailsWidget) == 0x000328, "Member 'USettingsWidget::MatchDetailsWidget' has a wrong offset!");
static_assert(offsetof(USettingsWidget, FooterOverlay) == 0x000330, "Member 'USettingsWidget::FooterOverlay' has a wrong offset!");
static_assert(offsetof(USettingsWidget, BackInputSwitcher) == 0x000338, "Member 'USettingsWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(USettingsWidget, ResetDefaultsInputSwitcher) == 0x000340, "Member 'USettingsWidget::ResetDefaultsInputSwitcher' has a wrong offset!");
static_assert(offsetof(USettingsWidget, ScrollInputPrompt) == 0x000348, "Member 'USettingsWidget::ScrollInputPrompt' has a wrong offset!");
static_assert(offsetof(USettingsWidget, QuitInputSwitcher) == 0x000350, "Member 'USettingsWidget::QuitInputSwitcher' has a wrong offset!");

// Class DBDUIViewsCore.TestWidget
// 0x0010 (0x0330 - 0x0320)
class UTestWidget final : public UCoreBaseUserWidget
{
public:
	class UPanelWidget*                           Workbench;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          showWorkbench;                                     // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetShowWorkbench(bool showWorkbench_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestWidget">();
	}
	static class UTestWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestWidget>();
	}
};
static_assert(alignof(UTestWidget) == 0x000008, "Wrong alignment on UTestWidget");
static_assert(sizeof(UTestWidget) == 0x000330, "Wrong size on UTestWidget");
static_assert(offsetof(UTestWidget, Workbench) == 0x000320, "Member 'UTestWidget::Workbench' has a wrong offset!");
static_assert(offsetof(UTestWidget, showWorkbench) == 0x000328, "Member 'UTestWidget::showWorkbench' has a wrong offset!");

// Class DBDUIViewsCore.TextureLoadingWrapper
// 0x0028 (0x0058 - 0x0030)
class UTextureLoadingWrapper final : public UObject
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextureLoadingWrapper">();
	}
	static class UTextureLoadingWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureLoadingWrapper>();
	}
};
static_assert(alignof(UTextureLoadingWrapper) == 0x000008, "Wrong alignment on UTextureLoadingWrapper");
static_assert(sizeof(UTextureLoadingWrapper) == 0x000058, "Wrong size on UTextureLoadingWrapper");

// Class DBDUIViewsCore.ToggleableWidgetPromptController
// 0x0080 (0x00B0 - 0x0030)
class UToggleableWidgetPromptController final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDScrollBox*                          _scrollBox;                                        // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreDisplayStandWidget*                _displayStand;                                     // 0x0040(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreKeyListenerInputPromptWidget*      _scrollPrompt;                                     // 0x0048(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreKeyListenerInputPromptWidget*      _rotatePrompt;                                     // 0x0050(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreKeyListenerInputPromptWidget*      _togglePrompt;                                     // 0x0058(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0x50];                                      // 0x0060(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Disable();
	void OnControlModeChanged(EControlMode controlMode);
	void OnScrollableStateChanged(const bool IsScrollable);
	void Reenable();
	void Reset();
	void SetRotatePrompt(class UCoreKeyListenerInputPromptWidget* rotatePrompt);
	void SetRotatePromptText(const class FText& rotatePromptText);
	void SetScrollPrompt(class UCoreKeyListenerInputPromptWidget* ScrollPrompt);
	void SetScrollPromptText(const class FText& scrollPromptText);
	void SetTogglePrompt(class UCoreKeyListenerInputPromptWidget* togglePrompt);
	void SetTogglePromptText(const class FText& togglePromptText);
	void SetupScrollableWidget(class UDBDScrollBox* ScrollBox, class UCoreKeyListenerInputPromptWidget* ScrollPrompt);
	void SetupToggleableWidget(class UDBDScrollBox* ScrollBox, class UCoreDisplayStandWidget* DisplayStand, class UCoreKeyListenerInputPromptWidget* togglePrompt, class UCoreKeyListenerInputPromptWidget* ScrollPrompt, class UCoreKeyListenerInputPromptWidget* rotatePrompt, ERightStickMode overrideMode);
	void UpdateAllPrompts();
	void UpdateInteractiveWidgetBehaviours(ERightStickMode overrideMode);

	ERightStickMode GetRightStickMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ToggleableWidgetPromptController">();
	}
	static class UToggleableWidgetPromptController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UToggleableWidgetPromptController>();
	}
};
static_assert(alignof(UToggleableWidgetPromptController) == 0x000008, "Wrong alignment on UToggleableWidgetPromptController");
static_assert(sizeof(UToggleableWidgetPromptController) == 0x0000B0, "Wrong size on UToggleableWidgetPromptController");
static_assert(offsetof(UToggleableWidgetPromptController, _scrollBox) == 0x000038, "Member 'UToggleableWidgetPromptController::_scrollBox' has a wrong offset!");
static_assert(offsetof(UToggleableWidgetPromptController, _displayStand) == 0x000040, "Member 'UToggleableWidgetPromptController::_displayStand' has a wrong offset!");
static_assert(offsetof(UToggleableWidgetPromptController, _scrollPrompt) == 0x000048, "Member 'UToggleableWidgetPromptController::_scrollPrompt' has a wrong offset!");
static_assert(offsetof(UToggleableWidgetPromptController, _rotatePrompt) == 0x000050, "Member 'UToggleableWidgetPromptController::_rotatePrompt' has a wrong offset!");
static_assert(offsetof(UToggleableWidgetPromptController, _togglePrompt) == 0x000058, "Member 'UToggleableWidgetPromptController::_togglePrompt' has a wrong offset!");

}

